
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d68  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004e24  08004e24  00014e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f00  08004f00  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004f00  08004f00  00014f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f08  08004f08  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f0c  08004f0c  00014f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000014  08004f24  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08004f24  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001618b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003186  00000000  00000000  0003620a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00039390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f80  00000000  00000000  0003a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c49  00000000  00000000  0003b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a587  00000000  00000000  00053309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094e71  00000000  00000000  0006d890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000473c  00000000  00000000  00102704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00106e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004e0c 	.word	0x08004e0c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08004e0c 	.word	0x08004e0c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	; 0x24
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	240c      	movs	r4, #12
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f004 fbc1 	bl	8004db4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b44      	ldr	r3, [pc, #272]	; (8000744 <MX_GPIO_Init+0x128>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000636:	4b43      	ldr	r3, [pc, #268]	; (8000744 <MX_GPIO_Init+0x128>)
 8000638:	2102      	movs	r1, #2
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
 800063e:	4b41      	ldr	r3, [pc, #260]	; (8000744 <MX_GPIO_Init+0x128>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000642:	2202      	movs	r2, #2
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <MX_GPIO_Init+0x128>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064e:	4b3d      	ldr	r3, [pc, #244]	; (8000744 <MX_GPIO_Init+0x128>)
 8000650:	2104      	movs	r1, #4
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
 8000656:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <MX_GPIO_Init+0x128>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065a:	2204      	movs	r2, #4
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <MX_GPIO_Init+0x128>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000666:	4b37      	ldr	r3, [pc, #220]	; (8000744 <MX_GPIO_Init+0x128>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
 800066e:	4b35      	ldr	r3, [pc, #212]	; (8000744 <MX_GPIO_Init+0x128>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	4832      	ldr	r0, [pc, #200]	; (8000748 <MX_GPIO_Init+0x12c>)
 8000680:	2200      	movs	r2, #0
 8000682:	0019      	movs	r1, r3
 8000684:	f000 fef0 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SK6812_OUT_GPIO_Port, SK6812_OUT_Pin, GPIO_PIN_RESET);
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	482f      	ldr	r0, [pc, #188]	; (800074c <MX_GPIO_Init+0x130>)
 800068e:	2200      	movs	r2, #0
 8000690:	0019      	movs	r1, r3
 8000692:	f000 fee9 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GEN_OUT_Pin|NRF_CE_Pin|SPI1_CSN_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 8000696:	23a0      	movs	r3, #160	; 0xa0
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2200      	movs	r2, #0
 800069c:	2199      	movs	r1, #153	; 0x99
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fee2 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WP_Pin;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2201      	movs	r2, #1
 80006b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <MX_GPIO_Init+0x12c>)
 80006c2:	0019      	movs	r1, r3
 80006c4:	0010      	movs	r0, r2
 80006c6:	f000 fd6b 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SK6812_OUT_Pin;
 80006ca:	0021      	movs	r1, r4
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0212      	lsls	r2, r2, #8
 80006d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	000c      	movs	r4, r1
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2201      	movs	r2, #1
 80006da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SK6812_OUT_GPIO_Port, &GPIO_InitStruct);
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <MX_GPIO_Init+0x130>)
 80006ec:	0019      	movs	r1, r3
 80006ee:	0010      	movs	r0, r2
 80006f0:	f000 fd56 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = GEN_OUT_Pin|NRF_CE_Pin|SPI1_CSN_Pin|STATUS_LED_Pin;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2299      	movs	r2, #153	; 0x99
 80006f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2201      	movs	r2, #1
 80006fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	193a      	adds	r2, r7, r4
 800070e:	23a0      	movs	r3, #160	; 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fd43 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2220      	movs	r2, #32
 800071e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 800072c:	193a      	adds	r2, r7, r4
 800072e:	23a0      	movs	r3, #160	; 0xa0
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fd33 	bl	80011a0 <HAL_GPIO_Init>

}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b009      	add	sp, #36	; 0x24
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40021000 	.word	0x40021000
 8000748:	50000400 	.word	0x50000400
 800074c:	50000800 	.word	0x50000800

08000750 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_I2C2_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_I2C2_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <MX_I2C2_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000768:	2201      	movs	r2, #1
 800076a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_I2C2_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C2_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2C2_Init+0x74>)
 800078c:	0018      	movs	r0, r3
 800078e:	f000 fe89 	bl	80014a4 <HAL_I2C_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000796:	f000 f8dd 	bl	8000954 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2C2_Init+0x74>)
 800079c:	2100      	movs	r1, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 ff26 	bl	80015f0 <HAL_I2CEx_ConfigAnalogFilter>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007a8:	f000 f8d4 	bl	8000954 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <MX_I2C2_Init+0x74>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 ff69 	bl	8001688 <HAL_I2CEx_ConfigDigitalFilter>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 f8cb 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000030 	.word	0x20000030
 80007c8:	40005800 	.word	0x40005800
 80007cc:	00303d5b 	.word	0x00303d5b

080007d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b08b      	sub	sp, #44	; 0x2c
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	2414      	movs	r4, #20
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	0018      	movs	r0, r3
 80007de:	2314      	movs	r3, #20
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f004 fae6 	bl	8004db4 <memset>
  if(i2cHandle->Instance==I2C2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <HAL_I2C_MspInit+0x90>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d131      	bne.n	8000856 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_I2C_MspInit+0x94>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_I2C_MspInit+0x94>)
 80007f8:	2101      	movs	r1, #1
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_I2C_MspInit+0x94>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000802:	2201      	movs	r2, #1
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	22c0      	movs	r2, #192	; 0xc0
 800080e:	0152      	lsls	r2, r2, #5
 8000810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000812:	0021      	movs	r1, r4
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2212      	movs	r2, #18
 8000818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2201      	movs	r2, #1
 800081e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2203      	movs	r2, #3
 8000824:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2206      	movs	r2, #6
 800082a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	187a      	adds	r2, r7, r1
 800082e:	23a0      	movs	r3, #160	; 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fcb3 	bl	80011a0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_I2C_MspInit+0x94>)
 800083c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_I2C_MspInit+0x94>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	03c9      	lsls	r1, r1, #15
 8000844:	430a      	orrs	r2, r1
 8000846:	63da      	str	r2, [r3, #60]	; 0x3c
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_I2C_MspInit+0x94>)
 800084a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	03db      	lsls	r3, r3, #15
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b00b      	add	sp, #44	; 0x2c
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40005800 	.word	0x40005800
 8000864:	40021000 	.word	0x40021000

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086c:	f000 fb3a 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000870:	f000 f828 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000874:	f7ff fed2 	bl	800061c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000878:	f7ff ff6a 	bl	8000750 <MX_I2C2_Init>
  MX_SPI1_Init();
 800087c:	f000 f870 	bl	8000960 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000880:	f000 f936 	bl	8000af0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000884:	f000 fa54 	bl	8000d30 <MX_USART1_UART_Init>
//	read_reg_multi(0x10, data, 5);
//	if(data[0] == 0xE7)
//	  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET);


  nrf_init();
 8000888:	f004 f9a4 	bl	8004bd4 <nrf_init>
  nrf_rx_mode(RX_addr, 10);
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <main+0x54>)
 800088e:	210a      	movs	r1, #10
 8000890:	0018      	movs	r0, r3
 8000892:	f004 f9ce 	bl	8004c32 <nrf_rx_mode>


  while (1)
  {

	  if(is_data_availible(1) == 1){
 8000896:	2001      	movs	r0, #1
 8000898:	f004 fa32 	bl	8004d00 <is_data_availible>
 800089c:	0003      	movs	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d1f9      	bne.n	8000896 <main+0x2e>
		  nrf_receive(RX_data);
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <main+0x58>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f004 fa4d 	bl	8004d44 <nrf_receive>
		  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port,    STATUS_LED_Pin, GPIO_PIN_SET);
 80008aa:	23a0      	movs	r3, #160	; 0xa0
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	2201      	movs	r2, #1
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fdd8 	bl	8001468 <HAL_GPIO_WritePin>
	  if(is_data_availible(1) == 1){
 80008b8:	e7ed      	b.n	8000896 <main+0x2e>
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000084 	.word	0x20000084

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b093      	sub	sp, #76	; 0x4c
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	2410      	movs	r4, #16
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	0018      	movs	r0, r3
 80008d0:	2338      	movs	r3, #56	; 0x38
 80008d2:	001a      	movs	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	f004 fa6d 	bl	8004db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008da:	003b      	movs	r3, r7
 80008dc:	0018      	movs	r0, r3
 80008de:	2310      	movs	r3, #16
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f004 fa66 	bl	8004db4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 ff17 	bl	8001720 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2202      	movs	r2, #2
 80008f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	0052      	lsls	r2, r2, #1
 80008fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2240      	movs	r2, #64	; 0x40
 800090a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	193b      	adds	r3, r7, r4
 8000914:	0018      	movs	r0, r3
 8000916:	f000 ff4f 	bl	80017b8 <HAL_RCC_OscConfig>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800091e:	f000 f819 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	003b      	movs	r3, r7
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000928:	003b      	movs	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	003b      	movs	r3, r7
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000934:	003b      	movs	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800093a:	003b      	movs	r3, r7
 800093c:	2100      	movs	r1, #0
 800093e:	0018      	movs	r0, r3
 8000940:	f001 fa54 	bl	8001dec <HAL_RCC_ClockConfig>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000948:	f000 f804 	bl	8000954 <Error_Handler>
  }
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b013      	add	sp, #76	; 0x4c
 8000952:	bd90      	pop	{r4, r7, pc}

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <MX_SPI1_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_SPI1_Init+0x74>)
 800096c:	2282      	movs	r2, #130	; 0x82
 800096e:	0052      	lsls	r2, r2, #1
 8000970:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_SPI1_Init+0x74>)
 800097a:	22e0      	movs	r2, #224	; 0xe0
 800097c:	00d2      	lsls	r2, r2, #3
 800097e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_SPI1_Init+0x74>)
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	0092      	lsls	r2, r2, #2
 8000992:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009ae:	2207      	movs	r2, #7
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009ba:	2208      	movs	r2, #8
 80009bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 fd37 	bl	8002434 <HAL_SPI_Init>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f7ff ffc3 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200000a4 	.word	0x200000a4
 80009d8:	40013000 	.word	0x40013000

080009dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b08b      	sub	sp, #44	; 0x2c
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	2414      	movs	r4, #20
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	0018      	movs	r0, r3
 80009ea:	2314      	movs	r3, #20
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f004 f9e0 	bl	8004db4 <memset>
  if(spiHandle->Instance==SPI1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <HAL_SPI_MspInit+0x8c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d130      	bne.n	8000a60 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <HAL_SPI_MspInit+0x90>)
 8000a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <HAL_SPI_MspInit+0x90>)
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	0149      	lsls	r1, r1, #5
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_SPI_MspInit+0x90>)
 8000a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	015b      	lsls	r3, r3, #5
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_SPI_MspInit+0x90>)
 8000a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <HAL_SPI_MspInit+0x90>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	430a      	orrs	r2, r1
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_SPI_MspInit+0x90>)
 8000a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8000a32:	0021      	movs	r1, r4
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2246      	movs	r2, #70	; 0x46
 8000a38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	187a      	adds	r2, r7, r1
 8000a54:	23a0      	movs	r3, #160	; 0xa0
 8000a56:	05db      	lsls	r3, r3, #23
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 fba0 	bl	80011a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b00b      	add	sp, #44	; 0x2c
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	40013000 	.word	0x40013000
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	641a      	str	r2, [r3, #64]	; 0x40
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	2201      	movs	r2, #1
 8000a88:	4013      	ands	r3, r2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	0549      	lsls	r1, r1, #21
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	055b      	lsls	r3, r3, #21
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 fa6c 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b098      	sub	sp, #96	; 0x60
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af6:	2354      	movs	r3, #84	; 0x54
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	0018      	movs	r0, r3
 8000afc:	230c      	movs	r3, #12
 8000afe:	001a      	movs	r2, r3
 8000b00:	2100      	movs	r1, #0
 8000b02:	f004 f957 	bl	8004db4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b06:	2338      	movs	r3, #56	; 0x38
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	231c      	movs	r3, #28
 8000b0e:	001a      	movs	r2, r3
 8000b10:	2100      	movs	r1, #0
 8000b12:	f004 f94f 	bl	8004db4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	0018      	movs	r0, r3
 8000b1a:	2334      	movs	r3, #52	; 0x34
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f004 f948 	bl	8004db4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b24:	4b45      	ldr	r3, [pc, #276]	; (8000c3c <MX_TIM1_Init+0x14c>)
 8000b26:	4a46      	ldr	r2, [pc, #280]	; (8000c40 <MX_TIM1_Init+0x150>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b2a:	4b44      	ldr	r3, [pc, #272]	; (8000c3c <MX_TIM1_Init+0x14c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b42      	ldr	r3, [pc, #264]	; (8000c3c <MX_TIM1_Init+0x14c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b36:	4b41      	ldr	r3, [pc, #260]	; (8000c3c <MX_TIM1_Init+0x14c>)
 8000b38:	4a42      	ldr	r2, [pc, #264]	; (8000c44 <MX_TIM1_Init+0x154>)
 8000b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <MX_TIM1_Init+0x14c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b42:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <MX_TIM1_Init+0x14c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <MX_TIM1_Init+0x14c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <MX_TIM1_Init+0x14c>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f002 fb8f 	bl	8003274 <HAL_TIM_PWM_Init>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f7ff fefb 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5e:	2154      	movs	r1, #84	; 0x54
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b72:	187a      	adds	r2, r7, r1
 8000b74:	4b31      	ldr	r3, [pc, #196]	; (8000c3c <MX_TIM1_Init+0x14c>)
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f002 fff3 	bl	8003b64 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	1e03      	subs	r3, r0, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b82:	f7ff fee7 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b86:	2138      	movs	r1, #56	; 0x38
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2260      	movs	r2, #96	; 0x60
 8000b8c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb2:	1879      	adds	r1, r7, r1
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_TIM1_Init+0x14c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f002 fbb3 	bl	8003324 <HAL_TIM_PWM_ConfigChannel>
 8000bbe:	1e03      	subs	r3, r0, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000bc2:	f7ff fec7 	bl	8000954 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	0192      	lsls	r2, r2, #6
 8000bea:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	0492      	lsls	r2, r2, #18
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c18:	1d3a      	adds	r2, r7, #4
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_TIM1_Init+0x14c>)
 8000c1c:	0011      	movs	r1, r2
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f003 f808 	bl	8003c34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c24:	1e03      	subs	r3, r0, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000c28:	f7ff fe94 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <MX_TIM1_Init+0x14c>)
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 f840 	bl	8000cb4 <HAL_TIM_MspPostInit>

}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b018      	add	sp, #96	; 0x60
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000108 	.word	0x20000108
 8000c40:	40012c00 	.word	0x40012c00
 8000c44:	0000ffff 	.word	0x0000ffff

08000c48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b08f      	sub	sp, #60	; 0x3c
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	2410      	movs	r4, #16
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	0018      	movs	r0, r3
 8000c56:	2328      	movs	r3, #40	; 0x28
 8000c58:	001a      	movs	r2, r3
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f004 f8aa 	bl	8004db4 <memset>
  if(tim_pwmHandle->Instance==TIM1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a11      	ldr	r2, [pc, #68]	; (8000cac <HAL_TIM_PWM_MspInit+0x64>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d11c      	bne.n	8000ca4 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	0392      	lsls	r2, r2, #14
 8000c70:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 fa60 	bl	8002140 <HAL_RCCEx_PeriphCLKConfig>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000c84:	f7ff fe66 	bl	8000954 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_TIM_PWM_MspInit+0x68>)
 8000c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_TIM_PWM_MspInit+0x68>)
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	0109      	lsls	r1, r1, #4
 8000c92:	430a      	orrs	r2, r1
 8000c94:	641a      	str	r2, [r3, #64]	; 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_TIM_PWM_MspInit+0x68>)
 8000c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	011b      	lsls	r3, r3, #4
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b00f      	add	sp, #60	; 0x3c
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	40012c00 	.word	0x40012c00
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	240c      	movs	r4, #12
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	2314      	movs	r3, #20
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f004 f874 	bl	8004db4 <memset>
  if(timHandle->Instance==TIM1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <HAL_TIM_MspPostInit+0x74>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d123      	bne.n	8000d1e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_TIM_MspPostInit+0x78>)
 8000cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_TIM_MspPostInit+0x78>)
 8000cdc:	2101      	movs	r1, #1
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_TIM_MspPostInit+0x78>)
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	0052      	lsls	r2, r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d10:	187a      	adds	r2, r7, r1
 8000d12:	23a0      	movs	r3, #160	; 0xa0
 8000d14:	05db      	lsls	r3, r3, #23
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 fa41 	bl	80011a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b009      	add	sp, #36	; 0x24
 8000d24:	bd90      	pop	{r4, r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	40012c00 	.word	0x40012c00
 8000d2c:	40021000 	.word	0x40021000

08000d30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d36:	4a24      	ldr	r2, [pc, #144]	; (8000dc8 <MX_USART1_UART_Init+0x98>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d3c:	22e1      	movs	r2, #225	; 0xe1
 8000d3e:	0252      	lsls	r2, r2, #9
 8000d40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f002 fff6 	bl	8003d6c <HAL_UART_Init>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d84:	f7ff fde6 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f003 fd29 	bl	80047e4 <HAL_UARTEx_SetTxFifoThreshold>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d96:	f7ff fddd 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f003 fd60 	bl	8004864 <HAL_UARTEx_SetRxFifoThreshold>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000da8:	f7ff fdd4 	bl	8000954 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <MX_USART1_UART_Init+0x94>)
 8000dae:	0018      	movs	r0, r3
 8000db0:	f003 fcde 	bl	8004770 <HAL_UARTEx_DisableFifoMode>
 8000db4:	1e03      	subs	r3, r0, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000db8:	f7ff fdcc 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	20000154 	.word	0x20000154
 8000dc8:	40013800 	.word	0x40013800

08000dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b095      	sub	sp, #84	; 0x54
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	233c      	movs	r3, #60	; 0x3c
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	0018      	movs	r0, r3
 8000dda:	2314      	movs	r3, #20
 8000ddc:	001a      	movs	r2, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	f003 ffe8 	bl	8004db4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de4:	2414      	movs	r4, #20
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	0018      	movs	r0, r3
 8000dea:	2328      	movs	r3, #40	; 0x28
 8000dec:	001a      	movs	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	f003 ffe0 	bl	8004db4 <memset>
  if(uartHandle->Instance==USART1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <HAL_UART_MspInit+0xb8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d13d      	bne.n	8000e7a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	2201      	movs	r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f001 f997 	bl	8002140 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e16:	f7ff fd9d 	bl	8000954 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_UART_MspInit+0xbc>)
 8000e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_UART_MspInit+0xbc>)
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	01c9      	lsls	r1, r1, #7
 8000e24:	430a      	orrs	r2, r1
 8000e26:	641a      	str	r2, [r3, #64]	; 0x40
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_UART_MspInit+0xbc>)
 8000e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	01db      	lsls	r3, r3, #7
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_UART_MspInit+0xbc>)
 8000e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_UART_MspInit+0xbc>)
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_UART_MspInit+0xbc>)
 8000e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e46:	2202      	movs	r2, #2
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000e4e:	213c      	movs	r1, #60	; 0x3c
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	22c0      	movs	r2, #192	; 0xc0
 8000e54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2202      	movs	r2, #2
 8000e5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_UART_MspInit+0xc0>)
 8000e72:	0019      	movs	r1, r3
 8000e74:	0010      	movs	r0, r2
 8000e76:	f000 f993 	bl	80011a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b015      	add	sp, #84	; 0x54
 8000e80:	bd90      	pop	{r4, r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	40013800 	.word	0x40013800
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	50000400 	.word	0x50000400

08000e90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e94:	f7ff fe27 	bl	8000ae6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <LoopForever+0xe>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	; (8000edc <LoopForever+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ebe:	f003 ff81 	bl	8004dc4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ec2:	f7ff fcd1 	bl	8000868 <main>

08000ec6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
  ldr   r0, =_estack
 8000ec8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ed4:	08004f10 	.word	0x08004f10
  ldr r2, =_sbss
 8000ed8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000edc:	200001ec 	.word	0x200001ec

08000ee0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x3c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Init+0x3c>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0049      	lsls	r1, r1, #1
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000efe:	2003      	movs	r0, #3
 8000f00:	f000 f810 	bl	8000f24 <HAL_InitTick>
 8000f04:	1e03      	subs	r3, r0, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	e001      	b.n	8000f14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fdae 	bl	8000a70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	781b      	ldrb	r3, [r3, #0]
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40022000 	.word	0x40022000

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <HAL_InitTick+0x88>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d02b      	beq.n	8000f94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <HAL_InitTick+0x8c>)
 8000f3e:	681c      	ldr	r4, [r3, #0]
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_InitTick+0x88>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	0019      	movs	r1, r3
 8000f46:	23fa      	movs	r3, #250	; 0xfa
 8000f48:	0098      	lsls	r0, r3, #2
 8000f4a:	f7ff f8db 	bl	8000104 <__udivsi3>
 8000f4e:	0003      	movs	r3, r0
 8000f50:	0019      	movs	r1, r3
 8000f52:	0020      	movs	r0, r4
 8000f54:	f7ff f8d6 	bl	8000104 <__udivsi3>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 f913 	bl	8001186 <HAL_SYSTICK_Config>
 8000f60:	1e03      	subs	r3, r0, #0
 8000f62:	d112      	bne.n	8000f8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d80a      	bhi.n	8000f80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	425b      	negs	r3, r3
 8000f70:	2200      	movs	r2, #0
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 f8f2 	bl	800115c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_InitTick+0x90>)
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e00d      	b.n	8000f9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f80:	230f      	movs	r3, #15
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e008      	b.n	8000f9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e003      	b.n	8000f9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f94:	230f      	movs	r3, #15
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b005      	add	sp, #20
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	20000010 	.word	0x20000010
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	2000000c 	.word	0x2000000c

08000fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x1c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	18d2      	adds	r2, r2, r3
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fca:	601a      	str	r2, [r3, #0]
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	20000010 	.word	0x20000010
 8000fd8:	200001e8 	.word	0x200001e8

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <HAL_GetTick+0x10>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	200001e8 	.word	0x200001e8

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff fff0 	bl	8000fdc <HAL_GetTick>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_Delay+0x44>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	001a      	movs	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	189b      	adds	r3, r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	f7ff ffe0 	bl	8000fdc <HAL_GetTick>
 800101c:	0002      	movs	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b004      	add	sp, #16
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	20000010 	.word	0x20000010

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	0002      	movs	r2, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b7f      	cmp	r3, #127	; 0x7f
 800104c:	d828      	bhi.n	80010a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800104e:	4a2f      	ldr	r2, [pc, #188]	; (800110c <__NVIC_SetPriority+0xd4>)
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b25b      	sxtb	r3, r3
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	33c0      	adds	r3, #192	; 0xc0
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	589b      	ldr	r3, [r3, r2]
 800105e:	1dfa      	adds	r2, r7, #7
 8001060:	7812      	ldrb	r2, [r2, #0]
 8001062:	0011      	movs	r1, r2
 8001064:	2203      	movs	r2, #3
 8001066:	400a      	ands	r2, r1
 8001068:	00d2      	lsls	r2, r2, #3
 800106a:	21ff      	movs	r1, #255	; 0xff
 800106c:	4091      	lsls	r1, r2
 800106e:	000a      	movs	r2, r1
 8001070:	43d2      	mvns	r2, r2
 8001072:	401a      	ands	r2, r3
 8001074:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	22ff      	movs	r2, #255	; 0xff
 800107c:	401a      	ands	r2, r3
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	0018      	movs	r0, r3
 8001084:	2303      	movs	r3, #3
 8001086:	4003      	ands	r3, r0
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800108c:	481f      	ldr	r0, [pc, #124]	; (800110c <__NVIC_SetPriority+0xd4>)
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b25b      	sxtb	r3, r3
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	430a      	orrs	r2, r1
 8001098:	33c0      	adds	r3, #192	; 0xc0
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800109e:	e031      	b.n	8001104 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a0:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <__NVIC_SetPriority+0xd8>)
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	0019      	movs	r1, r3
 80010a8:	230f      	movs	r3, #15
 80010aa:	400b      	ands	r3, r1
 80010ac:	3b08      	subs	r3, #8
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3306      	adds	r3, #6
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	18d3      	adds	r3, r2, r3
 80010b6:	3304      	adds	r3, #4
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1dfa      	adds	r2, r7, #7
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	0011      	movs	r1, r2
 80010c0:	2203      	movs	r2, #3
 80010c2:	400a      	ands	r2, r1
 80010c4:	00d2      	lsls	r2, r2, #3
 80010c6:	21ff      	movs	r1, #255	; 0xff
 80010c8:	4091      	lsls	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	43d2      	mvns	r2, r2
 80010ce:	401a      	ands	r2, r3
 80010d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	019b      	lsls	r3, r3, #6
 80010d6:	22ff      	movs	r2, #255	; 0xff
 80010d8:	401a      	ands	r2, r3
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	0018      	movs	r0, r3
 80010e0:	2303      	movs	r3, #3
 80010e2:	4003      	ands	r3, r0
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <__NVIC_SetPriority+0xd8>)
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	001c      	movs	r4, r3
 80010f0:	230f      	movs	r3, #15
 80010f2:	4023      	ands	r3, r4
 80010f4:	3b08      	subs	r3, #8
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	430a      	orrs	r2, r1
 80010fa:	3306      	adds	r3, #6
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	18c3      	adds	r3, r0, r3
 8001100:	3304      	adds	r3, #4
 8001102:	601a      	str	r2, [r3, #0]
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b003      	add	sp, #12
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	045b      	lsls	r3, r3, #17
 8001124:	429a      	cmp	r2, r3
 8001126:	d301      	bcc.n	800112c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001128:	2301      	movs	r3, #1
 800112a:	e010      	b.n	800114e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <SysTick_Config+0x44>)
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	3a01      	subs	r2, #1
 8001132:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001134:	2301      	movs	r3, #1
 8001136:	425b      	negs	r3, r3
 8001138:	2103      	movs	r1, #3
 800113a:	0018      	movs	r0, r3
 800113c:	f7ff ff7c 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x44>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x44>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	210f      	movs	r1, #15
 8001168:	187b      	adds	r3, r7, r1
 800116a:	1c02      	adds	r2, r0, #0
 800116c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	187b      	adds	r3, r7, r1
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b25b      	sxtb	r3, r3
 8001176:	0011      	movs	r1, r2
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <__NVIC_SetPriority>
}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	46bd      	mov	sp, r7
 8001182:	b004      	add	sp, #16
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff ffbf 	bl	8001114 <SysTick_Config>
 8001196:	0003      	movs	r3, r0
}
 8001198:	0018      	movs	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	b002      	add	sp, #8
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ae:	e147      	b.n	8001440 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2101      	movs	r1, #1
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4091      	lsls	r1, r2
 80011ba:	000a      	movs	r2, r1
 80011bc:	4013      	ands	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d100      	bne.n	80011c8 <HAL_GPIO_Init+0x28>
 80011c6:	e138      	b.n	800143a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2203      	movs	r2, #3
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d005      	beq.n	80011e0 <HAL_GPIO_Init+0x40>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2203      	movs	r2, #3
 80011da:	4013      	ands	r3, r2
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d130      	bne.n	8001242 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	409a      	lsls	r2, r3
 80011ee:	0013      	movs	r3, r2
 80011f0:	43da      	mvns	r2, r3
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	409a      	lsls	r2, r3
 8001202:	0013      	movs	r3, r2
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001216:	2201      	movs	r2, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
 800121c:	0013      	movs	r3, r2
 800121e:	43da      	mvns	r2, r3
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	2201      	movs	r2, #1
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2203      	movs	r2, #3
 8001248:	4013      	ands	r3, r2
 800124a:	2b03      	cmp	r3, #3
 800124c:	d017      	beq.n	800127e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2203      	movs	r2, #3
 800125a:	409a      	lsls	r2, r3
 800125c:	0013      	movs	r3, r2
 800125e:	43da      	mvns	r2, r3
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	409a      	lsls	r2, r3
 8001270:	0013      	movs	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2203      	movs	r2, #3
 8001284:	4013      	ands	r3, r2
 8001286:	2b02      	cmp	r3, #2
 8001288:	d123      	bne.n	80012d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	08da      	lsrs	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3208      	adds	r2, #8
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	58d3      	ldr	r3, [r2, r3]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2207      	movs	r2, #7
 800129c:	4013      	ands	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	691a      	ldr	r2, [r3, #16]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	2107      	movs	r1, #7
 80012b6:	400b      	ands	r3, r1
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	409a      	lsls	r2, r3
 80012bc:	0013      	movs	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	08da      	lsrs	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3208      	adds	r2, #8
 80012cc:	0092      	lsls	r2, r2, #2
 80012ce:	6939      	ldr	r1, [r7, #16]
 80012d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	43da      	mvns	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2203      	movs	r2, #3
 80012f0:	401a      	ands	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	23c0      	movs	r3, #192	; 0xc0
 800130c:	029b      	lsls	r3, r3, #10
 800130e:	4013      	ands	r3, r2
 8001310:	d100      	bne.n	8001314 <HAL_GPIO_Init+0x174>
 8001312:	e092      	b.n	800143a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001314:	4a50      	ldr	r2, [pc, #320]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3318      	adds	r3, #24
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	589b      	ldr	r3, [r3, r2]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2203      	movs	r2, #3
 8001326:	4013      	ands	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	220f      	movs	r2, #15
 800132c:	409a      	lsls	r2, r3
 800132e:	0013      	movs	r3, r2
 8001330:	43da      	mvns	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	23a0      	movs	r3, #160	; 0xa0
 800133c:	05db      	lsls	r3, r3, #23
 800133e:	429a      	cmp	r2, r3
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0x1ca>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a45      	ldr	r2, [pc, #276]	; (800145c <HAL_GPIO_Init+0x2bc>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00d      	beq.n	8001366 <HAL_GPIO_Init+0x1c6>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a44      	ldr	r2, [pc, #272]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0x1c2>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a43      	ldr	r2, [pc, #268]	; (8001464 <HAL_GPIO_Init+0x2c4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_GPIO_Init+0x1be>
 800135a:	2303      	movs	r3, #3
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x1cc>
 800135e:	2305      	movs	r3, #5
 8001360:	e004      	b.n	800136c <HAL_GPIO_Init+0x1cc>
 8001362:	2302      	movs	r3, #2
 8001364:	e002      	b.n	800136c <HAL_GPIO_Init+0x1cc>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x1cc>
 800136a:	2300      	movs	r3, #0
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	2103      	movs	r1, #3
 8001370:	400a      	ands	r2, r1
 8001372:	00d2      	lsls	r2, r2, #3
 8001374:	4093      	lsls	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800137c:	4936      	ldr	r1, [pc, #216]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3318      	adds	r3, #24
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43da      	mvns	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	035b      	lsls	r3, r3, #13
 80013a2:	4013      	ands	r3, r2
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	43da      	mvns	r2, r3
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	039b      	lsls	r3, r3, #14
 80013cc:	4013      	ands	r3, r2
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013de:	4a1e      	ldr	r2, [pc, #120]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 80013e0:	2384      	movs	r3, #132	; 0x84
 80013e2:	58d3      	ldr	r3, [r2, r3]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	43da      	mvns	r2, r3
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	029b      	lsls	r3, r3, #10
 80013f8:	4013      	ands	r3, r2
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001404:	4914      	ldr	r1, [pc, #80]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 8001406:	2284      	movs	r2, #132	; 0x84
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	58d3      	ldr	r3, [r2, r3]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43da      	mvns	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	025b      	lsls	r3, r3, #9
 8001426:	4013      	ands	r3, r2
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001432:	4909      	ldr	r1, [pc, #36]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3301      	adds	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	40da      	lsrs	r2, r3
 8001448:	1e13      	subs	r3, r2, #0
 800144a:	d000      	beq.n	800144e <HAL_GPIO_Init+0x2ae>
 800144c:	e6b0      	b.n	80011b0 <HAL_GPIO_Init+0x10>
  }
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b006      	add	sp, #24
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021800 	.word	0x40021800
 800145c:	50000400 	.word	0x50000400
 8001460:	50000800 	.word	0x50000800
 8001464:	50000c00 	.word	0x50000c00

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	0008      	movs	r0, r1
 8001472:	0011      	movs	r1, r2
 8001474:	1cbb      	adds	r3, r7, #2
 8001476:	1c02      	adds	r2, r0, #0
 8001478:	801a      	strh	r2, [r3, #0]
 800147a:	1c7b      	adds	r3, r7, #1
 800147c:	1c0a      	adds	r2, r1, #0
 800147e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001480:	1c7b      	adds	r3, r7, #1
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001488:	1cbb      	adds	r3, r7, #2
 800148a:	881a      	ldrh	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001490:	e003      	b.n	800149a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001492:	1cbb      	adds	r3, r7, #2
 8001494:	881a      	ldrh	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e08f      	b.n	80015d6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2241      	movs	r2, #65	; 0x41
 80014ba:	5c9b      	ldrb	r3, [r3, r2]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d107      	bne.n	80014d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2240      	movs	r2, #64	; 0x40
 80014c6:	2100      	movs	r1, #0
 80014c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff f97f 	bl	80007d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2241      	movs	r2, #65	; 0x41
 80014d6:	2124      	movs	r1, #36	; 0x24
 80014d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	438a      	bics	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	493b      	ldr	r1, [pc, #236]	; (80015e0 <HAL_I2C_Init+0x13c>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4938      	ldr	r1, [pc, #224]	; (80015e4 <HAL_I2C_Init+0x140>)
 8001504:	400a      	ands	r2, r1
 8001506:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d108      	bne.n	8001522 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	0209      	lsls	r1, r1, #8
 800151c:	430a      	orrs	r2, r1
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	e007      	b.n	8001532 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2184      	movs	r1, #132	; 0x84
 800152c:	0209      	lsls	r1, r1, #8
 800152e:	430a      	orrs	r2, r1
 8001530:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d109      	bne.n	800154e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	0109      	lsls	r1, r1, #4
 8001548:	430a      	orrs	r2, r1
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	e007      	b.n	800155e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4923      	ldr	r1, [pc, #140]	; (80015e8 <HAL_I2C_Init+0x144>)
 800155a:	400a      	ands	r2, r1
 800155c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4920      	ldr	r1, [pc, #128]	; (80015ec <HAL_I2C_Init+0x148>)
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	491a      	ldr	r1, [pc, #104]	; (80015e4 <HAL_I2C_Init+0x140>)
 800157a:	400a      	ands	r2, r1
 800157c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	431a      	orrs	r2, r3
 8001588:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69d9      	ldr	r1, [r3, #28]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1a      	ldr	r2, [r3, #32]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2101      	movs	r1, #1
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2241      	movs	r2, #65	; 0x41
 80015c2:	2120      	movs	r1, #32
 80015c4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2242      	movs	r2, #66	; 0x42
 80015d0:	2100      	movs	r1, #0
 80015d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	f0ffffff 	.word	0xf0ffffff
 80015e4:	ffff7fff 	.word	0xffff7fff
 80015e8:	fffff7ff 	.word	0xfffff7ff
 80015ec:	02008000 	.word	0x02008000

080015f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2241      	movs	r2, #65	; 0x41
 80015fe:	5c9b      	ldrb	r3, [r3, r2]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b20      	cmp	r3, #32
 8001604:	d138      	bne.n	8001678 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2240      	movs	r2, #64	; 0x40
 800160a:	5c9b      	ldrb	r3, [r3, r2]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001610:	2302      	movs	r3, #2
 8001612:	e032      	b.n	800167a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2240      	movs	r2, #64	; 0x40
 8001618:	2101      	movs	r1, #1
 800161a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2241      	movs	r2, #65	; 0x41
 8001620:	2124      	movs	r1, #36	; 0x24
 8001622:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2101      	movs	r1, #1
 8001630:	438a      	bics	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4911      	ldr	r1, [pc, #68]	; (8001684 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001640:	400a      	ands	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2101      	movs	r1, #1
 8001660:	430a      	orrs	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2241      	movs	r2, #65	; 0x41
 8001668:	2120      	movs	r1, #32
 800166a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2240      	movs	r2, #64	; 0x40
 8001670:	2100      	movs	r1, #0
 8001672:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	e000      	b.n	800167a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001678:	2302      	movs	r3, #2
  }
}
 800167a:	0018      	movs	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	b002      	add	sp, #8
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	ffffefff 	.word	0xffffefff

08001688 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2241      	movs	r2, #65	; 0x41
 8001696:	5c9b      	ldrb	r3, [r3, r2]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b20      	cmp	r3, #32
 800169c:	d139      	bne.n	8001712 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2240      	movs	r2, #64	; 0x40
 80016a2:	5c9b      	ldrb	r3, [r3, r2]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e033      	b.n	8001714 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2240      	movs	r2, #64	; 0x40
 80016b0:	2101      	movs	r1, #1
 80016b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2241      	movs	r2, #65	; 0x41
 80016b8:	2124      	movs	r1, #36	; 0x24
 80016ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2101      	movs	r1, #1
 80016c8:	438a      	bics	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4a11      	ldr	r2, [pc, #68]	; (800171c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2241      	movs	r2, #65	; 0x41
 8001702:	2120      	movs	r1, #32
 8001704:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2240      	movs	r2, #64	; 0x40
 800170a:	2100      	movs	r1, #0
 800170c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001712:	2302      	movs	r3, #2
  }
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b004      	add	sp, #16
 800171a:	bd80      	pop	{r7, pc}
 800171c:	fffff0ff 	.word	0xfffff0ff

08001720 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a19      	ldr	r2, [pc, #100]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800172e:	4013      	ands	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	429a      	cmp	r2, r3
 8001742:	d11f      	bne.n	8001784 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	0013      	movs	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	189b      	adds	r3, r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4912      	ldr	r1, [pc, #72]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001752:	0018      	movs	r0, r3
 8001754:	f7fe fcd6 	bl	8000104 <__udivsi3>
 8001758:	0003      	movs	r3, r0
 800175a:	3301      	adds	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800175e:	e008      	b.n	8001772 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3b01      	subs	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	e001      	b.n	8001772 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e009      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	401a      	ands	r2, r3
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	429a      	cmp	r2, r3
 8001782:	d0ed      	beq.n	8001760 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	40007000 	.word	0x40007000
 8001794:	fffff9ff 	.word	0xfffff9ff
 8001798:	20000008 	.word	0x20000008
 800179c:	000f4240 	.word	0x000f4240

080017a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	23e0      	movs	r3, #224	; 0xe0
 80017aa:	01db      	lsls	r3, r3, #7
 80017ac:	4013      	ands	r3, r2
}
 80017ae:	0018      	movs	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e2fe      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	d100      	bne.n	80017d6 <HAL_RCC_OscConfig+0x1e>
 80017d4:	e07c      	b.n	80018d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d6:	4bc3      	ldr	r3, [pc, #780]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2238      	movs	r2, #56	; 0x38
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e0:	4bc0      	ldr	r3, [pc, #768]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2203      	movs	r2, #3
 80017e6:	4013      	ands	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b10      	cmp	r3, #16
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3e>
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d002      	beq.n	80017fc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d10b      	bne.n	8001814 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	4bb9      	ldr	r3, [pc, #740]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	029b      	lsls	r3, r3, #10
 8001804:	4013      	ands	r3, r2
 8001806:	d062      	beq.n	80018ce <HAL_RCC_OscConfig+0x116>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d15e      	bne.n	80018ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e2d9      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	025b      	lsls	r3, r3, #9
 800181c:	429a      	cmp	r2, r3
 800181e:	d107      	bne.n	8001830 <HAL_RCC_OscConfig+0x78>
 8001820:	4bb0      	ldr	r3, [pc, #704]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4baf      	ldr	r3, [pc, #700]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001826:	2180      	movs	r1, #128	; 0x80
 8001828:	0249      	lsls	r1, r1, #9
 800182a:	430a      	orrs	r2, r1
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e020      	b.n	8001872 <HAL_RCC_OscConfig+0xba>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	23a0      	movs	r3, #160	; 0xa0
 8001836:	02db      	lsls	r3, r3, #11
 8001838:	429a      	cmp	r2, r3
 800183a:	d10e      	bne.n	800185a <HAL_RCC_OscConfig+0xa2>
 800183c:	4ba9      	ldr	r3, [pc, #676]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4ba8      	ldr	r3, [pc, #672]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	02c9      	lsls	r1, r1, #11
 8001846:	430a      	orrs	r2, r1
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	4ba6      	ldr	r3, [pc, #664]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4ba5      	ldr	r3, [pc, #660]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	0249      	lsls	r1, r1, #9
 8001854:	430a      	orrs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	e00b      	b.n	8001872 <HAL_RCC_OscConfig+0xba>
 800185a:	4ba2      	ldr	r3, [pc, #648]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4ba1      	ldr	r3, [pc, #644]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001860:	49a1      	ldr	r1, [pc, #644]	; (8001ae8 <HAL_RCC_OscConfig+0x330>)
 8001862:	400a      	ands	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	4b9f      	ldr	r3, [pc, #636]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b9e      	ldr	r3, [pc, #632]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 800186c:	499f      	ldr	r1, [pc, #636]	; (8001aec <HAL_RCC_OscConfig+0x334>)
 800186e:	400a      	ands	r2, r1
 8001870:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d014      	beq.n	80018a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fbaf 	bl	8000fdc <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fbaa 	bl	8000fdc <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e298      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001896:	4b93      	ldr	r3, [pc, #588]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	029b      	lsls	r3, r3, #10
 800189e:	4013      	ands	r3, r2
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0xcc>
 80018a2:	e015      	b.n	80018d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fb9a 	bl	8000fdc <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ae:	f7ff fb95 	bl	8000fdc <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b64      	cmp	r3, #100	; 0x64
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e283      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c0:	4b88      	ldr	r3, [pc, #544]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	029b      	lsls	r3, r3, #10
 80018c8:	4013      	ands	r3, r2
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0xf6>
 80018cc:	e000      	b.n	80018d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2202      	movs	r2, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	d100      	bne.n	80018dc <HAL_RCC_OscConfig+0x124>
 80018da:	e099      	b.n	8001a10 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018dc:	4b81      	ldr	r3, [pc, #516]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2238      	movs	r2, #56	; 0x38
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e6:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2203      	movs	r2, #3
 80018ec:	4013      	ands	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d102      	bne.n	80018fc <HAL_RCC_OscConfig+0x144>
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d002      	beq.n	8001902 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d135      	bne.n	800196e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001902:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4013      	ands	r3, r2
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x162>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e256      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b72      	ldr	r3, [pc, #456]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4a74      	ldr	r2, [pc, #464]	; (8001af0 <HAL_RCC_OscConfig+0x338>)
 8001920:	4013      	ands	r3, r2
 8001922:	0019      	movs	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	021a      	lsls	r2, r3, #8
 800192a:	4b6e      	ldr	r3, [pc, #440]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d112      	bne.n	800195c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001936:	4b6b      	ldr	r3, [pc, #428]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a6e      	ldr	r2, [pc, #440]	; (8001af4 <HAL_RCC_OscConfig+0x33c>)
 800193c:	4013      	ands	r3, r2
 800193e:	0019      	movs	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	4b67      	ldr	r3, [pc, #412]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800194a:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	0adb      	lsrs	r3, r3, #11
 8001950:	2207      	movs	r2, #7
 8001952:	4013      	ands	r3, r2
 8001954:	4a68      	ldr	r2, [pc, #416]	; (8001af8 <HAL_RCC_OscConfig+0x340>)
 8001956:	40da      	lsrs	r2, r3
 8001958:	4b68      	ldr	r3, [pc, #416]	; (8001afc <HAL_RCC_OscConfig+0x344>)
 800195a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800195c:	4b68      	ldr	r3, [pc, #416]	; (8001b00 <HAL_RCC_OscConfig+0x348>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff fadf 	bl	8000f24 <HAL_InitTick>
 8001966:	1e03      	subs	r3, r0, #0
 8001968:	d051      	beq.n	8001a0e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e22c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d030      	beq.n	80019d8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001976:	4b5b      	ldr	r3, [pc, #364]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a5e      	ldr	r2, [pc, #376]	; (8001af4 <HAL_RCC_OscConfig+0x33c>)
 800197c:	4013      	ands	r3, r2
 800197e:	0019      	movs	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	4b57      	ldr	r3, [pc, #348]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001986:	430a      	orrs	r2, r1
 8001988:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800198a:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b55      	ldr	r3, [pc, #340]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	0049      	lsls	r1, r1, #1
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fb20 	bl	8000fdc <HAL_GetTick>
 800199c:	0003      	movs	r3, r0
 800199e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff fb1b 	bl	8000fdc <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e209      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b4:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4013      	ands	r3, r2
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c0:	4b48      	ldr	r3, [pc, #288]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	4a4a      	ldr	r2, [pc, #296]	; (8001af0 <HAL_RCC_OscConfig+0x338>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	0019      	movs	r1, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	021a      	lsls	r2, r3, #8
 80019d0:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 80019d2:	430a      	orrs	r2, r1
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	e01b      	b.n	8001a10 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80019d8:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 80019de:	4949      	ldr	r1, [pc, #292]	; (8001b04 <HAL_RCC_OscConfig+0x34c>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff fafa 	bl	8000fdc <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff faf5 	bl	8000fdc <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1e3      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a00:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x236>
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a0e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2208      	movs	r2, #8
 8001a16:	4013      	ands	r3, r2
 8001a18:	d047      	beq.n	8001aaa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a1a:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2238      	movs	r2, #56	; 0x38
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b18      	cmp	r3, #24
 8001a24:	d10a      	bne.n	8001a3c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a26:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d03c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x2f2>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d138      	bne.n	8001aaa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e1c5      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d019      	beq.n	8001a78 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a48:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fac4 	bl	8000fdc <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fabf 	bl	8000fdc <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1ad      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a70:	2202      	movs	r2, #2
 8001a72:	4013      	ands	r3, r2
 8001a74:	d0f1      	beq.n	8001a5a <HAL_RCC_OscConfig+0x2a2>
 8001a76:	e018      	b.n	8001aaa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	438a      	bics	r2, r1
 8001a82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff faaa 	bl	8000fdc <HAL_GetTick>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8e:	f7ff faa5 	bl	8000fdc <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e193      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d1f1      	bne.n	8001a8e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d100      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x2fe>
 8001ab4:	e0c6      	b.n	8001c44 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab6:	231f      	movs	r3, #31
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2238      	movs	r2, #56	; 0x38
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d11e      	bne.n	8001b08 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ace:	2202      	movs	r2, #2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x31e>
 8001ad4:	e0b6      	b.n	8001c44 <HAL_RCC_OscConfig+0x48c>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d000      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x328>
 8001ade:	e0b1      	b.n	8001c44 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e171      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	fffeffff 	.word	0xfffeffff
 8001aec:	fffbffff 	.word	0xfffbffff
 8001af0:	ffff80ff 	.word	0xffff80ff
 8001af4:	ffffc7ff 	.word	0xffffc7ff
 8001af8:	00f42400 	.word	0x00f42400
 8001afc:	20000008 	.word	0x20000008
 8001b00:	2000000c 	.word	0x2000000c
 8001b04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b08:	4bb1      	ldr	r3, [pc, #708]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	055b      	lsls	r3, r3, #21
 8001b10:	4013      	ands	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_OscConfig+0x360>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x362>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d011      	beq.n	8001b42 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4bac      	ldr	r3, [pc, #688]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b22:	4bab      	ldr	r3, [pc, #684]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	0549      	lsls	r1, r1, #21
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b2c:	4ba8      	ldr	r3, [pc, #672]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	055b      	lsls	r3, r3, #21
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b3a:	231f      	movs	r3, #31
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b42:	4ba4      	ldr	r3, [pc, #656]	; (8001dd4 <HAL_RCC_OscConfig+0x61c>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d11a      	bne.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b4e:	4ba1      	ldr	r3, [pc, #644]	; (8001dd4 <HAL_RCC_OscConfig+0x61c>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4ba0      	ldr	r3, [pc, #640]	; (8001dd4 <HAL_RCC_OscConfig+0x61c>)
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	0049      	lsls	r1, r1, #1
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fa3e 	bl	8000fdc <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b66:	f7ff fa39 	bl	8000fdc <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e127      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b78:	4b96      	ldr	r3, [pc, #600]	; (8001dd4 <HAL_RCC_OscConfig+0x61c>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4013      	ands	r3, r2
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3e2>
 8001b8c:	4b90      	ldr	r3, [pc, #576]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001b8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b90:	4b8f      	ldr	r3, [pc, #572]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	430a      	orrs	r2, r1
 8001b96:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b98:	e01c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x41c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b05      	cmp	r3, #5
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x404>
 8001ba2:	4b8b      	ldr	r3, [pc, #556]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001ba4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ba6:	4b8a      	ldr	r3, [pc, #552]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001ba8:	2104      	movs	r1, #4
 8001baa:	430a      	orrs	r2, r1
 8001bac:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bae:	4b88      	ldr	r3, [pc, #544]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001bb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bb2:	4b87      	ldr	r3, [pc, #540]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x41c>
 8001bbc:	4b84      	ldr	r3, [pc, #528]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001bbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bc0:	4b83      	ldr	r3, [pc, #524]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	438a      	bics	r2, r1
 8001bc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bc8:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001bca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bcc:	4b80      	ldr	r3, [pc, #512]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001bce:	2104      	movs	r1, #4
 8001bd0:	438a      	bics	r2, r1
 8001bd2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d014      	beq.n	8001c06 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f9fe 	bl	8000fdc <HAL_GetTick>
 8001be0:	0003      	movs	r3, r0
 8001be2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be4:	e009      	b.n	8001bfa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7ff f9f9 	bl	8000fdc <HAL_GetTick>
 8001bea:	0002      	movs	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	4a79      	ldr	r2, [pc, #484]	; (8001dd8 <HAL_RCC_OscConfig+0x620>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e0e6      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfa:	4b75      	ldr	r3, [pc, #468]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfe:	2202      	movs	r2, #2
 8001c00:	4013      	ands	r3, r2
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x42e>
 8001c04:	e013      	b.n	8001c2e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7ff f9e9 	bl	8000fdc <HAL_GetTick>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c0e:	e009      	b.n	8001c24 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c10:	f7ff f9e4 	bl	8000fdc <HAL_GetTick>
 8001c14:	0002      	movs	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	4a6f      	ldr	r2, [pc, #444]	; (8001dd8 <HAL_RCC_OscConfig+0x620>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e0d1      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c2e:	231f      	movs	r3, #31
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c38:	4b65      	ldr	r3, [pc, #404]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c3c:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001c3e:	4967      	ldr	r1, [pc, #412]	; (8001ddc <HAL_RCC_OscConfig+0x624>)
 8001c40:	400a      	ands	r2, r1
 8001c42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d100      	bne.n	8001c4e <HAL_RCC_OscConfig+0x496>
 8001c4c:	e0bb      	b.n	8001dc6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c4e:	4b60      	ldr	r3, [pc, #384]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2238      	movs	r2, #56	; 0x38
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b10      	cmp	r3, #16
 8001c58:	d100      	bne.n	8001c5c <HAL_RCC_OscConfig+0x4a4>
 8001c5a:	e07b      	b.n	8001d54 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d156      	bne.n	8001d12 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c64:	4b5a      	ldr	r3, [pc, #360]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001c6a:	495d      	ldr	r1, [pc, #372]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff f9b4 	bl	8000fdc <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7ff f9af 	bl	8000fdc <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e09d      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	049b      	lsls	r3, r3, #18
 8001c94:	4013      	ands	r3, r2
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c98:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a51      	ldr	r2, [pc, #324]	; (8001de4 <HAL_RCC_OscConfig+0x62c>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1a      	ldr	r2, [r3, #32]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	0449      	lsls	r1, r1, #17
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	0549      	lsls	r1, r1, #21
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f978 	bl	8000fdc <HAL_GetTick>
 8001cec:	0003      	movs	r3, r0
 8001cee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7ff f973 	bl	8000fdc <HAL_GetTick>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e061      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d04:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	049b      	lsls	r3, r3, #18
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
 8001d10:	e059      	b.n	8001dc6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001d18:	4931      	ldr	r1, [pc, #196]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7ff f95d 	bl	8000fdc <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff f958 	bl	8000fdc <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e046      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	049b      	lsls	r3, r3, #18
 8001d42:	4013      	ands	r3, r2
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001d4c:	4926      	ldr	r1, [pc, #152]	; (8001de8 <HAL_RCC_OscConfig+0x630>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	e038      	b.n	8001dc6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e033      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x618>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2203      	movs	r2, #3
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d126      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2270      	movs	r2, #112	; 0x70
 8001d78:	401a      	ands	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d11f      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	23fe      	movs	r3, #254	; 0xfe
 8001d86:	01db      	lsls	r3, r3, #7
 8001d88:	401a      	ands	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d116      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	23f8      	movs	r3, #248	; 0xf8
 8001d98:	039b      	lsls	r3, r3, #14
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d10e      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	23e0      	movs	r3, #224	; 0xe0
 8001da8:	051b      	lsls	r3, r3, #20
 8001daa:	401a      	ands	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	0f5b      	lsrs	r3, r3, #29
 8001db8:	075a      	lsls	r2, r3, #29
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b008      	add	sp, #32
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	00001388 	.word	0x00001388
 8001ddc:	efffffff 	.word	0xefffffff
 8001de0:	feffffff 	.word	0xfeffffff
 8001de4:	11c1808c 	.word	0x11c1808c
 8001de8:	eefefffc 	.word	0xeefefffc

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0e9      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2207      	movs	r2, #7
 8001e06:	4013      	ands	r3, r2
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d91e      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b73      	ldr	r3, [pc, #460]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2207      	movs	r2, #7
 8001e14:	4393      	bics	r3, r2
 8001e16:	0019      	movs	r1, r3
 8001e18:	4b70      	ldr	r3, [pc, #448]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e20:	f7ff f8dc 	bl	8000fdc <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e28:	e009      	b.n	8001e3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2a:	f7ff f8d7 	bl	8000fdc <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4a6a      	ldr	r2, [pc, #424]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e0ca      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e3e:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2207      	movs	r2, #7
 8001e44:	4013      	ands	r3, r2
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d1ee      	bne.n	8001e2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2202      	movs	r2, #2
 8001e52:	4013      	ands	r3, r2
 8001e54:	d015      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d006      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e60:	4b60      	ldr	r3, [pc, #384]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e66:	21e0      	movs	r1, #224	; 0xe0
 8001e68:	01c9      	lsls	r1, r1, #7
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <HAL_RCC_ClockConfig+0x1fc>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d057      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e94:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	029b      	lsls	r3, r3, #10
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d12b      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e097      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d107      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eac:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	049b      	lsls	r3, r3, #18
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d11f      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e08b      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec4:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d113      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e07f      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001edc:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d108      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e074      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eea:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e06d      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ef8:	4b3a      	ldr	r3, [pc, #232]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2207      	movs	r2, #7
 8001efe:	4393      	bics	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f0c:	f7ff f866 	bl	8000fdc <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f14:	e009      	b.n	8001f2a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f16:	f7ff f861 	bl	8000fdc <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	4a2f      	ldr	r2, [pc, #188]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e054      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2238      	movs	r2, #56	; 0x38
 8001f30:	401a      	ands	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d1ec      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2207      	movs	r2, #7
 8001f42:	4013      	ands	r3, r2
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d21e      	bcs.n	8001f88 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2207      	movs	r2, #7
 8001f50:	4393      	bics	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f5c:	f7ff f83e 	bl	8000fdc <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f64:	e009      	b.n	8001f7a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f66:	f7ff f839 	bl	8000fdc <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e02c      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4013      	ands	r3, r2
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1ee      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d009      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4a15      	ldr	r2, [pc, #84]	; (8001fec <HAL_RCC_ClockConfig+0x200>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fa6:	f000 f829 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001faa:	0001      	movs	r1, r0
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_RCC_ClockConfig+0x204>)
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	58d3      	ldr	r3, [r2, r3]
 8001fbc:	221f      	movs	r2, #31
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	000a      	movs	r2, r1
 8001fc2:	40da      	lsrs	r2, r3
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_ClockConfig+0x208>)
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_ClockConfig+0x20c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7fe ffa9 	bl	8000f24 <HAL_InitTick>
 8001fd2:	0003      	movs	r3, r0
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b004      	add	sp, #16
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	00001388 	.word	0x00001388
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	fffff0ff 	.word	0xfffff0ff
 8001fec:	ffff8fff 	.word	0xffff8fff
 8001ff0:	08004e24 	.word	0x08004e24
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	2000000c 	.word	0x2000000c

08001ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002002:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2238      	movs	r2, #56	; 0x38
 8002008:	4013      	ands	r3, r2
 800200a:	d10f      	bne.n	800202c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800200c:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0adb      	lsrs	r3, r3, #11
 8002012:	2207      	movs	r2, #7
 8002014:	4013      	ands	r3, r2
 8002016:	2201      	movs	r2, #1
 8002018:	409a      	lsls	r2, r3
 800201a:	0013      	movs	r3, r2
 800201c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	4835      	ldr	r0, [pc, #212]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002022:	f7fe f86f 	bl	8000104 <__udivsi3>
 8002026:	0003      	movs	r3, r0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e05d      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2238      	movs	r2, #56	; 0x38
 8002032:	4013      	ands	r3, r2
 8002034:	2b08      	cmp	r3, #8
 8002036:	d102      	bne.n	800203e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002038:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_RCC_GetSysClockFreq+0x100>)
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	e054      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2238      	movs	r2, #56	; 0x38
 8002044:	4013      	ands	r3, r2
 8002046:	2b10      	cmp	r3, #16
 8002048:	d138      	bne.n	80020bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2203      	movs	r2, #3
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	2207      	movs	r2, #7
 800205c:	4013      	ands	r3, r2
 800205e:	3301      	adds	r3, #1
 8002060:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d10d      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	4824      	ldr	r0, [pc, #144]	; (80020fc <HAL_RCC_GetSysClockFreq+0x100>)
 800206c:	f7fe f84a 	bl	8000104 <__udivsi3>
 8002070:	0003      	movs	r3, r0
 8002072:	0019      	movs	r1, r3
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	227f      	movs	r2, #127	; 0x7f
 800207c:	4013      	ands	r3, r2
 800207e:	434b      	muls	r3, r1
 8002080:	617b      	str	r3, [r7, #20]
        break;
 8002082:	e00d      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	481c      	ldr	r0, [pc, #112]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002088:	f7fe f83c 	bl	8000104 <__udivsi3>
 800208c:	0003      	movs	r3, r0
 800208e:	0019      	movs	r1, r3
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	227f      	movs	r2, #127	; 0x7f
 8002098:	4013      	ands	r3, r2
 800209a:	434b      	muls	r3, r1
 800209c:	617b      	str	r3, [r7, #20]
        break;
 800209e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0f5b      	lsrs	r3, r3, #29
 80020a6:	2207      	movs	r2, #7
 80020a8:	4013      	ands	r3, r2
 80020aa:	3301      	adds	r3, #1
 80020ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	6978      	ldr	r0, [r7, #20]
 80020b2:	f7fe f827 	bl	8000104 <__udivsi3>
 80020b6:	0003      	movs	r3, r0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	e015      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2238      	movs	r2, #56	; 0x38
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d103      	bne.n	80020d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2238      	movs	r2, #56	; 0x38
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b18      	cmp	r3, #24
 80020da:	d103      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020dc:	23fa      	movs	r3, #250	; 0xfa
 80020de:	01db      	lsls	r3, r3, #7
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	e001      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020e8:	693b      	ldr	r3, [r7, #16]
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b006      	add	sp, #24
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	007a1200 	.word	0x007a1200

08002100 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b02      	ldr	r3, [pc, #8]	; (8002110 <HAL_RCC_GetHCLKFreq+0x10>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	20000008 	.word	0x20000008

08002114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002118:	f7ff fff2 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 800211c:	0004      	movs	r4, r0
 800211e:	f7ff fb3f 	bl	80017a0 <LL_RCC_GetAPB1Prescaler>
 8002122:	0003      	movs	r3, r0
 8002124:	0b1a      	lsrs	r2, r3, #12
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	58d3      	ldr	r3, [r2, r3]
 800212c:	221f      	movs	r2, #31
 800212e:	4013      	ands	r3, r2
 8002130:	40dc      	lsrs	r4, r3
 8002132:	0023      	movs	r3, r4
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	bdb0      	pop	{r4, r5, r7, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	08004e64 	.word	0x08004e64

08002140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002148:	2313      	movs	r3, #19
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002150:	2312      	movs	r3, #18
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	029b      	lsls	r3, r3, #10
 8002160:	4013      	ands	r3, r2
 8002162:	d100      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002164:	e0a3      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2011      	movs	r0, #17
 8002168:	183b      	adds	r3, r7, r0
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216e:	4ba5      	ldr	r3, [pc, #660]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	055b      	lsls	r3, r3, #21
 8002176:	4013      	ands	r3, r2
 8002178:	d110      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4ba2      	ldr	r3, [pc, #648]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800217c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800217e:	4ba1      	ldr	r3, [pc, #644]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	0549      	lsls	r1, r1, #21
 8002184:	430a      	orrs	r2, r1
 8002186:	63da      	str	r2, [r3, #60]	; 0x3c
 8002188:	4b9e      	ldr	r3, [pc, #632]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800218a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	055b      	lsls	r3, r3, #21
 8002190:	4013      	ands	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002196:	183b      	adds	r3, r7, r0
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800219c:	4b9a      	ldr	r3, [pc, #616]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b99      	ldr	r3, [pc, #612]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	0049      	lsls	r1, r1, #1
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021aa:	f7fe ff17 	bl	8000fdc <HAL_GetTick>
 80021ae:	0003      	movs	r3, r0
 80021b0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021b2:	e00b      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b4:	f7fe ff12 	bl	8000fdc <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d904      	bls.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80021c2:	2313      	movs	r3, #19
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	2203      	movs	r2, #3
 80021c8:	701a      	strb	r2, [r3, #0]
        break;
 80021ca:	e005      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021cc:	4b8e      	ldr	r3, [pc, #568]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	d0ed      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80021d8:	2313      	movs	r3, #19
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d154      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021e2:	4b88      	ldr	r3, [pc, #544]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021e6:	23c0      	movs	r3, #192	; 0xc0
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4013      	ands	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d019      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d014      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021fe:	4b81      	ldr	r3, [pc, #516]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	4a82      	ldr	r2, [pc, #520]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002204:	4013      	ands	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002208:	4b7e      	ldr	r3, [pc, #504]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800220a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800220c:	4b7d      	ldr	r3, [pc, #500]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	0249      	lsls	r1, r1, #9
 8002212:	430a      	orrs	r2, r1
 8002214:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002216:	4b7b      	ldr	r3, [pc, #492]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002218:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800221a:	4b7a      	ldr	r3, [pc, #488]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800221c:	497c      	ldr	r1, [pc, #496]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800221e:	400a      	ands	r2, r1
 8002220:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002222:	4b78      	ldr	r3, [pc, #480]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2201      	movs	r2, #1
 800222c:	4013      	ands	r3, r2
 800222e:	d016      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fed4 	bl	8000fdc <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002238:	e00c      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fecf 	bl	8000fdc <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	4a73      	ldr	r2, [pc, #460]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d904      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800224a:	2313      	movs	r3, #19
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	2203      	movs	r2, #3
 8002250:	701a      	strb	r2, [r3, #0]
            break;
 8002252:	e004      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002254:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002258:	2202      	movs	r2, #2
 800225a:	4013      	ands	r3, r2
 800225c:	d0ed      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800225e:	2313      	movs	r3, #19
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10a      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002268:	4b66      	ldr	r3, [pc, #408]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	4a67      	ldr	r2, [pc, #412]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800226e:	4013      	ands	r3, r2
 8002270:	0019      	movs	r1, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002276:	4b63      	ldr	r3, [pc, #396]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002278:	430a      	orrs	r2, r1
 800227a:	65da      	str	r2, [r3, #92]	; 0x5c
 800227c:	e00c      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800227e:	2312      	movs	r3, #18
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	2213      	movs	r2, #19
 8002284:	18ba      	adds	r2, r7, r2
 8002286:	7812      	ldrb	r2, [r2, #0]
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e005      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800228c:	2312      	movs	r3, #18
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	2213      	movs	r2, #19
 8002292:	18ba      	adds	r2, r7, r2
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002298:	2311      	movs	r3, #17
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a2:	4b58      	ldr	r3, [pc, #352]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022a6:	4b57      	ldr	r3, [pc, #348]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022a8:	495b      	ldr	r1, [pc, #364]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80022aa:	400a      	ands	r2, r1
 80022ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2201      	movs	r2, #1
 80022b4:	4013      	ands	r3, r2
 80022b6:	d009      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b8:	4b52      	ldr	r3, [pc, #328]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	2203      	movs	r2, #3
 80022be:	4393      	bics	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4b4f      	ldr	r3, [pc, #316]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022c8:	430a      	orrs	r2, r1
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2210      	movs	r2, #16
 80022d2:	4013      	ands	r3, r2
 80022d4:	d009      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022d6:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022da:	4a50      	ldr	r2, [pc, #320]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80022dc:	4013      	ands	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022e6:	430a      	orrs	r2, r1
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4013      	ands	r3, r2
 80022f4:	d009      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022f6:	4b43      	ldr	r3, [pc, #268]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	4a49      	ldr	r2, [pc, #292]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	0019      	movs	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002306:	430a      	orrs	r2, r1
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4013      	ands	r3, r2
 8002314:	d009      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	4a42      	ldr	r2, [pc, #264]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800231c:	4013      	ands	r3, r2
 800231e:	0019      	movs	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	4b37      	ldr	r3, [pc, #220]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002326:	430a      	orrs	r2, r1
 8002328:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2220      	movs	r2, #32
 8002330:	4013      	ands	r3, r2
 8002332:	d009      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002334:	4b33      	ldr	r3, [pc, #204]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	4a3b      	ldr	r2, [pc, #236]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800233a:	4013      	ands	r3, r2
 800233c:	0019      	movs	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	4b30      	ldr	r3, [pc, #192]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002344:	430a      	orrs	r2, r1
 8002346:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	01db      	lsls	r3, r3, #7
 8002350:	4013      	ands	r3, r2
 8002352:	d015      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	0899      	lsrs	r1, r3, #2
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69da      	ldr	r2, [r3, #28]
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002362:	430a      	orrs	r2, r1
 8002364:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	05db      	lsls	r3, r3, #23
 800236e:	429a      	cmp	r2, r3
 8002370:	d106      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002372:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	4b23      	ldr	r3, [pc, #140]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002378:	2180      	movs	r1, #128	; 0x80
 800237a:	0249      	lsls	r1, r1, #9
 800237c:	430a      	orrs	r2, r1
 800237e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	039b      	lsls	r3, r3, #14
 8002388:	4013      	ands	r3, r2
 800238a:	d016      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	4a26      	ldr	r2, [pc, #152]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002392:	4013      	ands	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1a      	ldr	r2, [r3, #32]
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800239c:	430a      	orrs	r2, r1
 800239e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1a      	ldr	r2, [r3, #32]
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	03db      	lsls	r3, r3, #15
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d106      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023b2:	2180      	movs	r1, #128	; 0x80
 80023b4:	0449      	lsls	r1, r1, #17
 80023b6:	430a      	orrs	r2, r1
 80023b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	4013      	ands	r3, r2
 80023c4:	d016      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ca:	4a19      	ldr	r2, [pc, #100]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	0019      	movs	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023d6:	430a      	orrs	r2, r1
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	01db      	lsls	r3, r3, #7
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d106      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023ec:	2180      	movs	r1, #128	; 0x80
 80023ee:	0249      	lsls	r1, r1, #9
 80023f0:	430a      	orrs	r2, r1
 80023f2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80023f4:	2312      	movs	r3, #18
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	781b      	ldrb	r3, [r3, #0]
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b006      	add	sp, #24
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	40021000 	.word	0x40021000
 8002408:	40007000 	.word	0x40007000
 800240c:	fffffcff 	.word	0xfffffcff
 8002410:	fffeffff 	.word	0xfffeffff
 8002414:	00001388 	.word	0x00001388
 8002418:	efffffff 	.word	0xefffffff
 800241c:	fffff3ff 	.word	0xfffff3ff
 8002420:	fff3ffff 	.word	0xfff3ffff
 8002424:	ffcfffff 	.word	0xffcfffff
 8002428:	ffffcfff 	.word	0xffffcfff
 800242c:	ffbfffff 	.word	0xffbfffff
 8002430:	ffff3fff 	.word	0xffff3fff

08002434 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0a8      	b.n	8002598 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	2382      	movs	r3, #130	; 0x82
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	429a      	cmp	r2, r3
 8002458:	d009      	beq.n	800246e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	61da      	str	r2, [r3, #28]
 8002460:	e005      	b.n	800246e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	225d      	movs	r2, #93	; 0x5d
 8002478:	5c9b      	ldrb	r3, [r3, r2]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	225c      	movs	r2, #92	; 0x5c
 8002484:	2100      	movs	r1, #0
 8002486:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	0018      	movs	r0, r3
 800248c:	f7fe faa6 	bl	80009dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	225d      	movs	r2, #93	; 0x5d
 8002494:	2102      	movs	r1, #2
 8002496:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2140      	movs	r1, #64	; 0x40
 80024a4:	438a      	bics	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	23e0      	movs	r3, #224	; 0xe0
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d902      	bls.n	80024ba <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e002      	b.n	80024c0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	015b      	lsls	r3, r3, #5
 80024be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	23f0      	movs	r3, #240	; 0xf0
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d008      	beq.n	80024de <HAL_SPI_Init+0xaa>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	23e0      	movs	r3, #224	; 0xe0
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d002      	beq.n	80024de <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	2382      	movs	r3, #130	; 0x82
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	401a      	ands	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	2384      	movs	r3, #132	; 0x84
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	400b      	ands	r3, r1
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2102      	movs	r1, #2
 80024fa:	400b      	ands	r3, r1
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	2101      	movs	r1, #1
 8002504:	400b      	ands	r3, r1
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6999      	ldr	r1, [r3, #24]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	400b      	ands	r3, r1
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2138      	movs	r1, #56	; 0x38
 800251a:	400b      	ands	r3, r1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	400b      	ands	r3, r1
 8002526:	431a      	orrs	r2, r3
 8002528:	0011      	movs	r1, r2
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	019b      	lsls	r3, r3, #6
 8002532:	401a      	ands	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	2204      	movs	r2, #4
 8002544:	401a      	ands	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	2110      	movs	r1, #16
 800254c:	400b      	ands	r3, r1
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002554:	2108      	movs	r1, #8
 8002556:	400b      	ands	r3, r1
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68d9      	ldr	r1, [r3, #12]
 800255e:	23f0      	movs	r3, #240	; 0xf0
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	400b      	ands	r3, r1
 8002564:	431a      	orrs	r2, r3
 8002566:	0011      	movs	r1, r2
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	015b      	lsls	r3, r3, #5
 800256e:	401a      	ands	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4907      	ldr	r1, [pc, #28]	; (80025a0 <HAL_SPI_Init+0x16c>)
 8002584:	400a      	ands	r2, r1
 8002586:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	225d      	movs	r2, #93	; 0x5d
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b004      	add	sp, #16
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	fffff7ff 	.word	0xfffff7ff

080025a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	1dbb      	adds	r3, r7, #6
 80025b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025b4:	231f      	movs	r3, #31
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	225c      	movs	r2, #92	; 0x5c
 80025c0:	5c9b      	ldrb	r3, [r3, r2]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_SPI_Transmit+0x26>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e147      	b.n	800285a <HAL_SPI_Transmit+0x2b6>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	225c      	movs	r2, #92	; 0x5c
 80025ce:	2101      	movs	r1, #1
 80025d0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025d2:	f7fe fd03 	bl	8000fdc <HAL_GetTick>
 80025d6:	0003      	movs	r3, r0
 80025d8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80025da:	2316      	movs	r3, #22
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	1dba      	adds	r2, r7, #6
 80025e0:	8812      	ldrh	r2, [r2, #0]
 80025e2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	225d      	movs	r2, #93	; 0x5d
 80025e8:	5c9b      	ldrb	r3, [r3, r2]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d004      	beq.n	80025fa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80025f0:	231f      	movs	r3, #31
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	2202      	movs	r2, #2
 80025f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80025f8:	e128      	b.n	800284c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_SPI_Transmit+0x64>
 8002600:	1dbb      	adds	r3, r7, #6
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d104      	bne.n	8002612 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002608:	231f      	movs	r3, #31
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002610:	e11c      	b.n	800284c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	225d      	movs	r2, #93	; 0x5d
 8002616:	2103      	movs	r1, #3
 8002618:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1dba      	adds	r2, r7, #6
 800262a:	8812      	ldrh	r2, [r2, #0]
 800262c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1dba      	adds	r2, r7, #6
 8002632:	8812      	ldrh	r2, [r2, #0]
 8002634:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2244      	movs	r2, #68	; 0x44
 8002640:	2100      	movs	r1, #0
 8002642:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2246      	movs	r2, #70	; 0x46
 8002648:	2100      	movs	r1, #0
 800264a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	429a      	cmp	r2, r3
 8002662:	d110      	bne.n	8002686 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2140      	movs	r1, #64	; 0x40
 8002670:	438a      	bics	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	01c9      	lsls	r1, r1, #7
 8002682:	430a      	orrs	r2, r1
 8002684:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2240      	movs	r2, #64	; 0x40
 800268e:	4013      	ands	r3, r2
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d007      	beq.n	80026a4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2140      	movs	r1, #64	; 0x40
 80026a0:	430a      	orrs	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	23e0      	movs	r3, #224	; 0xe0
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d952      	bls.n	8002756 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_SPI_Transmit+0x11e>
 80026b8:	2316      	movs	r3, #22
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d143      	bne.n	800274a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	881a      	ldrh	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	1c9a      	adds	r2, r3, #2
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026e6:	e030      	b.n	800274a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2202      	movs	r2, #2
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d112      	bne.n	800271c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fa:	881a      	ldrh	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	1c9a      	adds	r2, r3, #2
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	87da      	strh	r2, [r3, #62]	; 0x3e
 800271a:	e016      	b.n	800274a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800271c:	f7fe fc5e 	bl	8000fdc <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d802      	bhi.n	8002732 <HAL_SPI_Transmit+0x18e>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	3301      	adds	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_SPI_Transmit+0x194>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d108      	bne.n	800274a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002738:	231f      	movs	r3, #31
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	2203      	movs	r2, #3
 800273e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	225d      	movs	r2, #93	; 0x5d
 8002744:	2101      	movs	r1, #1
 8002746:	5499      	strb	r1, [r3, r2]
          goto error;
 8002748:	e080      	b.n	800284c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1c9      	bne.n	80026e8 <HAL_SPI_Transmit+0x144>
 8002754:	e053      	b.n	80027fe <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d004      	beq.n	8002768 <HAL_SPI_Transmit+0x1c4>
 800275e:	2316      	movs	r3, #22
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d145      	bne.n	80027f4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	7812      	ldrb	r2, [r2, #0]
 8002774:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800278e:	e031      	b.n	80027f4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2202      	movs	r2, #2
 8002798:	4013      	ands	r3, r2
 800279a:	2b02      	cmp	r3, #2
 800279c:	d113      	bne.n	80027c6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	330c      	adds	r3, #12
 80027a8:	7812      	ldrb	r2, [r2, #0]
 80027aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027c4:	e016      	b.n	80027f4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027c6:	f7fe fc09 	bl	8000fdc <HAL_GetTick>
 80027ca:	0002      	movs	r2, r0
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d802      	bhi.n	80027dc <HAL_SPI_Transmit+0x238>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	d102      	bne.n	80027e2 <HAL_SPI_Transmit+0x23e>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d108      	bne.n	80027f4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80027e2:	231f      	movs	r3, #31
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	2203      	movs	r2, #3
 80027e8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	225d      	movs	r2, #93	; 0x5d
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]
          goto error;
 80027f2:	e02b      	b.n	800284c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1c8      	bne.n	8002790 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	6839      	ldr	r1, [r7, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	0018      	movs	r0, r3
 8002806:	f000 fcef 	bl	80031e8 <SPI_EndRxTxTransaction>
 800280a:	1e03      	subs	r3, r0, #0
 800280c:	d002      	beq.n	8002814 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002836:	2b00      	cmp	r3, #0
 8002838:	d004      	beq.n	8002844 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800283a:	231f      	movs	r3, #31
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	e003      	b.n	800284c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	225d      	movs	r2, #93	; 0x5d
 8002848:	2101      	movs	r1, #1
 800284a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	225c      	movs	r2, #92	; 0x5c
 8002850:	2100      	movs	r1, #0
 8002852:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002854:	231f      	movs	r3, #31
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	781b      	ldrb	r3, [r3, #0]
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b008      	add	sp, #32
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	1dbb      	adds	r3, r7, #6
 8002872:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002874:	2117      	movs	r1, #23
 8002876:	187b      	adds	r3, r7, r1
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	225d      	movs	r2, #93	; 0x5d
 8002880:	5c9b      	ldrb	r3, [r3, r2]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d003      	beq.n	8002890 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002888:	187b      	adds	r3, r7, r1
 800288a:	2202      	movs	r2, #2
 800288c:	701a      	strb	r2, [r3, #0]
    goto error;
 800288e:	e12b      	b.n	8002ae8 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	2382      	movs	r3, #130	; 0x82
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	429a      	cmp	r2, r3
 800289a:	d113      	bne.n	80028c4 <HAL_SPI_Receive+0x60>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10f      	bne.n	80028c4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	225d      	movs	r2, #93	; 0x5d
 80028a8:	2104      	movs	r1, #4
 80028aa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80028ac:	1dbb      	adds	r3, r7, #6
 80028ae:	881c      	ldrh	r4, [r3, #0]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	0023      	movs	r3, r4
 80028bc:	f000 f924 	bl	8002b08 <HAL_SPI_TransmitReceive>
 80028c0:	0003      	movs	r3, r0
 80028c2:	e118      	b.n	8002af6 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	225c      	movs	r2, #92	; 0x5c
 80028c8:	5c9b      	ldrb	r3, [r3, r2]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_SPI_Receive+0x6e>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e111      	b.n	8002af6 <HAL_SPI_Receive+0x292>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	225c      	movs	r2, #92	; 0x5c
 80028d6:	2101      	movs	r1, #1
 80028d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028da:	f7fe fb7f 	bl	8000fdc <HAL_GetTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_SPI_Receive+0x8c>
 80028e8:	1dbb      	adds	r3, r7, #6
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d104      	bne.n	80028fa <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80028f0:	2317      	movs	r3, #23
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80028f8:	e0f6      	b.n	8002ae8 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	225d      	movs	r2, #93	; 0x5d
 80028fe:	2104      	movs	r1, #4
 8002900:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1dba      	adds	r2, r7, #6
 8002912:	2144      	movs	r1, #68	; 0x44
 8002914:	8812      	ldrh	r2, [r2, #0]
 8002916:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1dba      	adds	r2, r7, #6
 800291c:	2146      	movs	r1, #70	; 0x46
 800291e:	8812      	ldrh	r2, [r2, #0]
 8002920:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	23e0      	movs	r3, #224	; 0xe0
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	429a      	cmp	r2, r3
 800294a:	d908      	bls.n	800295e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	496a      	ldr	r1, [pc, #424]	; (8002b00 <HAL_SPI_Receive+0x29c>)
 8002958:	400a      	ands	r2, r1
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	e008      	b.n	8002970 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	0149      	lsls	r1, r1, #5
 800296c:	430a      	orrs	r2, r1
 800296e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	429a      	cmp	r2, r3
 800297a:	d10f      	bne.n	800299c <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2140      	movs	r1, #64	; 0x40
 8002988:	438a      	bics	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	495b      	ldr	r1, [pc, #364]	; (8002b04 <HAL_SPI_Receive+0x2a0>)
 8002998:	400a      	ands	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d007      	beq.n	80029ba <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2140      	movs	r1, #64	; 0x40
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	23e0      	movs	r3, #224	; 0xe0
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d900      	bls.n	80029c8 <HAL_SPI_Receive+0x164>
 80029c6:	e071      	b.n	8002aac <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80029c8:	e035      	b.n	8002a36 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2201      	movs	r2, #1
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d117      	bne.n	8002a08 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	330c      	adds	r3, #12
 80029de:	001a      	movs	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	7812      	ldrb	r2, [r2, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2246      	movs	r2, #70	; 0x46
 80029f8:	5a9b      	ldrh	r3, [r3, r2]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b299      	uxth	r1, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2246      	movs	r2, #70	; 0x46
 8002a04:	5299      	strh	r1, [r3, r2]
 8002a06:	e016      	b.n	8002a36 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a08:	f7fe fae8 	bl	8000fdc <HAL_GetTick>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d802      	bhi.n	8002a1e <HAL_SPI_Receive+0x1ba>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	d102      	bne.n	8002a24 <HAL_SPI_Receive+0x1c0>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d108      	bne.n	8002a36 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002a24:	2317      	movs	r3, #23
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	2203      	movs	r2, #3
 8002a2a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	225d      	movs	r2, #93	; 0x5d
 8002a30:	2101      	movs	r1, #1
 8002a32:	5499      	strb	r1, [r3, r2]
          goto error;
 8002a34:	e058      	b.n	8002ae8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2246      	movs	r2, #70	; 0x46
 8002a3a:	5a9b      	ldrh	r3, [r3, r2]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1c3      	bne.n	80029ca <HAL_SPI_Receive+0x166>
 8002a42:	e039      	b.n	8002ab8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d115      	bne.n	8002a7e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	b292      	uxth	r2, r2
 8002a5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	1c9a      	adds	r2, r3, #2
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2246      	movs	r2, #70	; 0x46
 8002a6e:	5a9b      	ldrh	r3, [r3, r2]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b299      	uxth	r1, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2246      	movs	r2, #70	; 0x46
 8002a7a:	5299      	strh	r1, [r3, r2]
 8002a7c:	e016      	b.n	8002aac <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a7e:	f7fe faad 	bl	8000fdc <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d802      	bhi.n	8002a94 <HAL_SPI_Receive+0x230>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	3301      	adds	r3, #1
 8002a92:	d102      	bne.n	8002a9a <HAL_SPI_Receive+0x236>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002a9a:	2317      	movs	r3, #23
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	225d      	movs	r2, #93	; 0x5d
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	5499      	strb	r1, [r3, r2]
          goto error;
 8002aaa:	e01d      	b.n	8002ae8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2246      	movs	r2, #70	; 0x46
 8002ab0:	5a9b      	ldrh	r3, [r3, r2]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1c5      	bne.n	8002a44 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 fb34 	bl	800312c <SPI_EndRxTransaction>
 8002ac4:	1e03      	subs	r3, r0, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002ad6:	2317      	movs	r3, #23
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e003      	b.n	8002ae8 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	225d      	movs	r2, #93	; 0x5d
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	225c      	movs	r2, #92	; 0x5c
 8002aec:	2100      	movs	r1, #0
 8002aee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002af0:	2317      	movs	r3, #23
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	781b      	ldrb	r3, [r3, #0]
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b007      	add	sp, #28
 8002afc:	bd90      	pop	{r4, r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	ffffefff 	.word	0xffffefff
 8002b04:	ffffbfff 	.word	0xffffbfff

08002b08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	001a      	movs	r2, r3
 8002b16:	1cbb      	adds	r3, r7, #2
 8002b18:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b1e:	2323      	movs	r3, #35	; 0x23
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	225c      	movs	r2, #92	; 0x5c
 8002b2a:	5c9b      	ldrb	r3, [r3, r2]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_SPI_TransmitReceive+0x2c>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e1c4      	b.n	8002ebe <HAL_SPI_TransmitReceive+0x3b6>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	225c      	movs	r2, #92	; 0x5c
 8002b38:	2101      	movs	r1, #1
 8002b3a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b3c:	f7fe fa4e 	bl	8000fdc <HAL_GetTick>
 8002b40:	0003      	movs	r3, r0
 8002b42:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b44:	201b      	movs	r0, #27
 8002b46:	183b      	adds	r3, r7, r0
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	215d      	movs	r1, #93	; 0x5d
 8002b4c:	5c52      	ldrb	r2, [r2, r1]
 8002b4e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002b56:	2312      	movs	r3, #18
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	1cba      	adds	r2, r7, #2
 8002b5c:	8812      	ldrh	r2, [r2, #0]
 8002b5e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b60:	183b      	adds	r3, r7, r0
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d011      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x84>
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	2382      	movs	r3, #130	; 0x82
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d107      	bne.n	8002b82 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <HAL_SPI_TransmitReceive+0x7a>
 8002b7a:	183b      	adds	r3, r7, r0
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d004      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002b82:	2323      	movs	r3, #35	; 0x23
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	2202      	movs	r2, #2
 8002b88:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b8a:	e191      	b.n	8002eb0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d006      	beq.n	8002ba0 <HAL_SPI_TransmitReceive+0x98>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_SPI_TransmitReceive+0x98>
 8002b98:	1cbb      	adds	r3, r7, #2
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d104      	bne.n	8002baa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002ba0:	2323      	movs	r3, #35	; 0x23
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ba8:	e182      	b.n	8002eb0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	225d      	movs	r2, #93	; 0x5d
 8002bae:	5c9b      	ldrb	r3, [r3, r2]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d003      	beq.n	8002bbe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	225d      	movs	r2, #93	; 0x5d
 8002bba:	2105      	movs	r1, #5
 8002bbc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1cba      	adds	r2, r7, #2
 8002bce:	2146      	movs	r1, #70	; 0x46
 8002bd0:	8812      	ldrh	r2, [r2, #0]
 8002bd2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1cba      	adds	r2, r7, #2
 8002bd8:	2144      	movs	r1, #68	; 0x44
 8002bda:	8812      	ldrh	r2, [r2, #0]
 8002bdc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1cba      	adds	r2, r7, #2
 8002be8:	8812      	ldrh	r2, [r2, #0]
 8002bea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1cba      	adds	r2, r7, #2
 8002bf0:	8812      	ldrh	r2, [r2, #0]
 8002bf2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	23e0      	movs	r3, #224	; 0xe0
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d908      	bls.n	8002c1e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	49ac      	ldr	r1, [pc, #688]	; (8002ec8 <HAL_SPI_TransmitReceive+0x3c0>)
 8002c18:	400a      	ands	r2, r1
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	e008      	b.n	8002c30 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2180      	movs	r1, #128	; 0x80
 8002c2a:	0149      	lsls	r1, r1, #5
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2240      	movs	r2, #64	; 0x40
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d007      	beq.n	8002c4e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2140      	movs	r1, #64	; 0x40
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	23e0      	movs	r3, #224	; 0xe0
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d800      	bhi.n	8002c5c <HAL_SPI_TransmitReceive+0x154>
 8002c5a:	e083      	b.n	8002d64 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_SPI_TransmitReceive+0x168>
 8002c64:	2312      	movs	r3, #18
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d000      	beq.n	8002c70 <HAL_SPI_TransmitReceive+0x168>
 8002c6e:	e06d      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	881a      	ldrh	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	1c9a      	adds	r2, r3, #2
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c94:	e05a      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d11b      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x1d4>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d016      	beq.n	8002cdc <HAL_SPI_TransmitReceive+0x1d4>
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d113      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	881a      	ldrh	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	1c9a      	adds	r2, r3, #2
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d11c      	bne.n	8002d24 <HAL_SPI_TransmitReceive+0x21c>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2246      	movs	r2, #70	; 0x46
 8002cee:	5a9b      	ldrh	r3, [r3, r2]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	b292      	uxth	r2, r2
 8002d02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	1c9a      	adds	r2, r3, #2
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2246      	movs	r2, #70	; 0x46
 8002d12:	5a9b      	ldrh	r3, [r3, r2]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b299      	uxth	r1, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2246      	movs	r2, #70	; 0x46
 8002d1e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d20:	2301      	movs	r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d24:	f7fe f95a 	bl	8000fdc <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d80b      	bhi.n	8002d4c <HAL_SPI_TransmitReceive+0x244>
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	3301      	adds	r3, #1
 8002d38:	d008      	beq.n	8002d4c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002d3a:	2323      	movs	r3, #35	; 0x23
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2203      	movs	r2, #3
 8002d40:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	225d      	movs	r2, #93	; 0x5d
 8002d46:	2101      	movs	r1, #1
 8002d48:	5499      	strb	r1, [r3, r2]
        goto error;
 8002d4a:	e0b1      	b.n	8002eb0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d19f      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0x18e>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2246      	movs	r2, #70	; 0x46
 8002d5a:	5a9b      	ldrh	r3, [r3, r2]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d199      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0x18e>
 8002d62:	e089      	b.n	8002e78 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x270>
 8002d6c:	2312      	movs	r3, #18
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d000      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x270>
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d9e:	e060      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2202      	movs	r2, #2
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d11c      	bne.n	8002de8 <HAL_SPI_TransmitReceive+0x2e0>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d017      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0x2e0>
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d114      	bne.n	8002de8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2201      	movs	r2, #1
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d11e      	bne.n	8002e34 <HAL_SPI_TransmitReceive+0x32c>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2246      	movs	r2, #70	; 0x46
 8002dfa:	5a9b      	ldrh	r3, [r3, r2]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d018      	beq.n	8002e34 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	330c      	adds	r3, #12
 8002e08:	001a      	movs	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2246      	movs	r2, #70	; 0x46
 8002e22:	5a9b      	ldrh	r3, [r3, r2]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b299      	uxth	r1, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2246      	movs	r2, #70	; 0x46
 8002e2e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e30:	2301      	movs	r3, #1
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e34:	f7fe f8d2 	bl	8000fdc <HAL_GetTick>
 8002e38:	0002      	movs	r2, r0
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d802      	bhi.n	8002e4a <HAL_SPI_TransmitReceive+0x342>
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	3301      	adds	r3, #1
 8002e48:	d102      	bne.n	8002e50 <HAL_SPI_TransmitReceive+0x348>
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d108      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002e50:	2323      	movs	r3, #35	; 0x23
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	2203      	movs	r2, #3
 8002e56:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	225d      	movs	r2, #93	; 0x5d
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	5499      	strb	r1, [r3, r2]
        goto error;
 8002e60:	e026      	b.n	8002eb0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d199      	bne.n	8002da0 <HAL_SPI_TransmitReceive+0x298>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2246      	movs	r2, #70	; 0x46
 8002e70:	5a9b      	ldrh	r3, [r3, r2]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d193      	bne.n	8002da0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 f9b2 	bl	80031e8 <SPI_EndRxTxTransaction>
 8002e84:	1e03      	subs	r3, r0, #0
 8002e86:	d006      	beq.n	8002e96 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002e88:	2323      	movs	r3, #35	; 0x23
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002e9e:	2323      	movs	r3, #35	; 0x23
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e003      	b.n	8002eb0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	225d      	movs	r2, #93	; 0x5d
 8002eac:	2101      	movs	r1, #1
 8002eae:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	225c      	movs	r2, #92	; 0x5c
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002eb8:	2323      	movs	r3, #35	; 0x23
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	781b      	ldrb	r3, [r3, #0]
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b00a      	add	sp, #40	; 0x28
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	ffffefff 	.word	0xffffefff

08002ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	1dfb      	adds	r3, r7, #7
 8002eda:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002edc:	f7fe f87e 	bl	8000fdc <HAL_GetTick>
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	18d3      	adds	r3, r2, r3
 8002eea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002eec:	f7fe f876 	bl	8000fdc <HAL_GetTick>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	015b      	lsls	r3, r3, #5
 8002efa:	0d1b      	lsrs	r3, r3, #20
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	4353      	muls	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f02:	e058      	b.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	3301      	adds	r3, #1
 8002f08:	d055      	beq.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f0a:	f7fe f867 	bl	8000fdc <HAL_GetTick>
 8002f0e:	0002      	movs	r2, r0
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d902      	bls.n	8002f20 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d142      	bne.n	8002fa6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	21e0      	movs	r1, #224	; 0xe0
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	2382      	movs	r3, #130	; 0x82
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d113      	bne.n	8002f64 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d005      	beq.n	8002f54 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d107      	bne.n	8002f64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2140      	movs	r1, #64	; 0x40
 8002f60:	438a      	bics	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	019b      	lsls	r3, r3, #6
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d110      	bne.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	491a      	ldr	r1, [pc, #104]	; (8002fe4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	0189      	lsls	r1, r1, #6
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	225d      	movs	r2, #93	; 0x5d
 8002f96:	2101      	movs	r1, #1
 8002f98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	225c      	movs	r2, #92	; 0x5c
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e017      	b.n	8002fd6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	425a      	negs	r2, r3
 8002fc6:	4153      	adcs	r3, r2
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	001a      	movs	r2, r3
 8002fcc:	1dfb      	adds	r3, r7, #7
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d197      	bne.n	8002f04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b008      	add	sp, #32
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	20000008 	.word	0x20000008
 8002fe4:	ffffdfff 	.word	0xffffdfff

08002fe8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002ff6:	2317      	movs	r3, #23
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ffe:	f7fd ffed 	bl	8000fdc <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	18d3      	adds	r3, r2, r3
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800300e:	f7fd ffe5 	bl	8000fdc <HAL_GetTick>
 8003012:	0003      	movs	r3, r0
 8003014:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	330c      	adds	r3, #12
 800301c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800301e:	4b41      	ldr	r3, [pc, #260]	; (8003124 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	0013      	movs	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	189b      	adds	r3, r3, r2
 8003028:	00da      	lsls	r2, r3, #3
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	0d1b      	lsrs	r3, r3, #20
 800302e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003030:	4353      	muls	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003034:	e068      	b.n	8003108 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	23c0      	movs	r3, #192	; 0xc0
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	429a      	cmp	r2, r3
 800303e:	d10a      	bne.n	8003056 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d107      	bne.n	8003056 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	2117      	movs	r1, #23
 800304e:	187b      	adds	r3, r7, r1
 8003050:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003052:	187b      	adds	r3, r7, r1
 8003054:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	d055      	beq.n	8003108 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800305c:	f7fd ffbe 	bl	8000fdc <HAL_GetTick>
 8003060:	0002      	movs	r2, r0
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003068:	429a      	cmp	r2, r3
 800306a:	d902      	bls.n	8003072 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	2b00      	cmp	r3, #0
 8003070:	d142      	bne.n	80030f8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	21e0      	movs	r1, #224	; 0xe0
 800307e:	438a      	bics	r2, r1
 8003080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	2382      	movs	r3, #130	; 0x82
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	429a      	cmp	r2, r3
 800308c:	d113      	bne.n	80030b6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	429a      	cmp	r2, r3
 8003098:	d005      	beq.n	80030a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d107      	bne.n	80030b6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2140      	movs	r1, #64	; 0x40
 80030b2:	438a      	bics	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	429a      	cmp	r2, r3
 80030c0:	d110      	bne.n	80030e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4916      	ldr	r1, [pc, #88]	; (8003128 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80030ce:	400a      	ands	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	0189      	lsls	r1, r1, #6
 80030e0:	430a      	orrs	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	225d      	movs	r2, #93	; 0x5d
 80030e8:	2101      	movs	r1, #1
 80030ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	225c      	movs	r2, #92	; 0x5c
 80030f0:	2100      	movs	r1, #0
 80030f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e010      	b.n	800311a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	3b01      	subs	r3, #1
 8003106:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	4013      	ands	r3, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	d18e      	bne.n	8003036 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b00a      	add	sp, #40	; 0x28
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	20000008 	.word	0x20000008
 8003128:	ffffdfff 	.word	0xffffdfff

0800312c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	2382      	movs	r3, #130	; 0x82
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	429a      	cmp	r2, r3
 8003142:	d113      	bne.n	800316c <SPI_EndRxTransaction+0x40>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	429a      	cmp	r2, r3
 800314e:	d005      	beq.n	800315c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	429a      	cmp	r2, r3
 800315a:	d107      	bne.n	800316c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2140      	movs	r1, #64	; 0x40
 8003168:	438a      	bics	r2, r1
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	0013      	movs	r3, r2
 8003176:	2200      	movs	r2, #0
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	f7ff fea7 	bl	8002ecc <SPI_WaitFlagStateUntilTimeout>
 800317e:	1e03      	subs	r3, r0, #0
 8003180:	d007      	beq.n	8003192 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003186:	2220      	movs	r2, #32
 8003188:	431a      	orrs	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e026      	b.n	80031e0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	2382      	movs	r3, #130	; 0x82
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	429a      	cmp	r2, r3
 800319c:	d11f      	bne.n	80031de <SPI_EndRxTransaction+0xb2>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d005      	beq.n	80031b6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d113      	bne.n	80031de <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	23c0      	movs	r3, #192	; 0xc0
 80031ba:	00d9      	lsls	r1, r3, #3
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	0013      	movs	r3, r2
 80031c4:	2200      	movs	r2, #0
 80031c6:	f7ff ff0f 	bl	8002fe8 <SPI_WaitFifoStateUntilTimeout>
 80031ca:	1e03      	subs	r3, r0, #0
 80031cc:	d007      	beq.n	80031de <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d2:	2220      	movs	r2, #32
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e000      	b.n	80031e0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b004      	add	sp, #16
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	23c0      	movs	r3, #192	; 0xc0
 80031f8:	0159      	lsls	r1, r3, #5
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	0013      	movs	r3, r2
 8003202:	2200      	movs	r2, #0
 8003204:	f7ff fef0 	bl	8002fe8 <SPI_WaitFifoStateUntilTimeout>
 8003208:	1e03      	subs	r3, r0, #0
 800320a:	d007      	beq.n	800321c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003210:	2220      	movs	r2, #32
 8003212:	431a      	orrs	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e027      	b.n	800326c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	0013      	movs	r3, r2
 8003226:	2200      	movs	r2, #0
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	f7ff fe4f 	bl	8002ecc <SPI_WaitFlagStateUntilTimeout>
 800322e:	1e03      	subs	r3, r0, #0
 8003230:	d007      	beq.n	8003242 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003236:	2220      	movs	r2, #32
 8003238:	431a      	orrs	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e014      	b.n	800326c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	23c0      	movs	r3, #192	; 0xc0
 8003246:	00d9      	lsls	r1, r3, #3
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	0013      	movs	r3, r2
 8003250:	2200      	movs	r2, #0
 8003252:	f7ff fec9 	bl	8002fe8 <SPI_WaitFifoStateUntilTimeout>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d007      	beq.n	800326a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325e:	2220      	movs	r2, #32
 8003260:	431a      	orrs	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e000      	b.n	800326c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	0018      	movs	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	b004      	add	sp, #16
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e04a      	b.n	800331c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	223d      	movs	r2, #61	; 0x3d
 800328a:	5c9b      	ldrb	r3, [r3, r2]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d107      	bne.n	80032a2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	223c      	movs	r2, #60	; 0x3c
 8003296:	2100      	movs	r1, #0
 8003298:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	0018      	movs	r0, r3
 800329e:	f7fd fcd3 	bl	8000c48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	223d      	movs	r2, #61	; 0x3d
 80032a6:	2102      	movs	r1, #2
 80032a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3304      	adds	r3, #4
 80032b2:	0019      	movs	r1, r3
 80032b4:	0010      	movs	r0, r2
 80032b6:	f000 f935 	bl	8003524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2248      	movs	r2, #72	; 0x48
 80032be:	2101      	movs	r1, #1
 80032c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	223e      	movs	r2, #62	; 0x3e
 80032c6:	2101      	movs	r1, #1
 80032c8:	5499      	strb	r1, [r3, r2]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	223f      	movs	r2, #63	; 0x3f
 80032ce:	2101      	movs	r1, #1
 80032d0:	5499      	strb	r1, [r3, r2]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2240      	movs	r2, #64	; 0x40
 80032d6:	2101      	movs	r1, #1
 80032d8:	5499      	strb	r1, [r3, r2]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2241      	movs	r2, #65	; 0x41
 80032de:	2101      	movs	r1, #1
 80032e0:	5499      	strb	r1, [r3, r2]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2242      	movs	r2, #66	; 0x42
 80032e6:	2101      	movs	r1, #1
 80032e8:	5499      	strb	r1, [r3, r2]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2243      	movs	r2, #67	; 0x43
 80032ee:	2101      	movs	r1, #1
 80032f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2244      	movs	r2, #68	; 0x44
 80032f6:	2101      	movs	r1, #1
 80032f8:	5499      	strb	r1, [r3, r2]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2245      	movs	r2, #69	; 0x45
 80032fe:	2101      	movs	r1, #1
 8003300:	5499      	strb	r1, [r3, r2]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2246      	movs	r2, #70	; 0x46
 8003306:	2101      	movs	r1, #1
 8003308:	5499      	strb	r1, [r3, r2]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2247      	movs	r2, #71	; 0x47
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	223d      	movs	r2, #61	; 0x3d
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	0018      	movs	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	b002      	add	sp, #8
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	2317      	movs	r3, #23
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	223c      	movs	r2, #60	; 0x3c
 800333c:	5c9b      	ldrb	r3, [r3, r2]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003342:	2302      	movs	r3, #2
 8003344:	e0e5      	b.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	223c      	movs	r2, #60	; 0x3c
 800334a:	2101      	movs	r1, #1
 800334c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b14      	cmp	r3, #20
 8003352:	d900      	bls.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003354:	e0d1      	b.n	80034fa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	009a      	lsls	r2, r3, #2
 800335a:	4b70      	ldr	r3, [pc, #448]	; (800351c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800335c:	18d3      	adds	r3, r2, r3
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	0011      	movs	r1, r2
 800336a:	0018      	movs	r0, r3
 800336c:	f000 f95e 	bl	800362c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2108      	movs	r1, #8
 800337c:	430a      	orrs	r2, r1
 800337e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2104      	movs	r1, #4
 800338c:	438a      	bics	r2, r1
 800338e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6999      	ldr	r1, [r3, #24]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	619a      	str	r2, [r3, #24]
      break;
 80033a2:	e0af      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	0011      	movs	r1, r2
 80033ac:	0018      	movs	r0, r3
 80033ae:	f000 f9bd 	bl	800372c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699a      	ldr	r2, [r3, #24]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2180      	movs	r1, #128	; 0x80
 80033be:	0109      	lsls	r1, r1, #4
 80033c0:	430a      	orrs	r2, r1
 80033c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4954      	ldr	r1, [pc, #336]	; (8003520 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80033d0:	400a      	ands	r2, r1
 80033d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6999      	ldr	r1, [r3, #24]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	021a      	lsls	r2, r3, #8
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	619a      	str	r2, [r3, #24]
      break;
 80033e8:	e08c      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	0011      	movs	r1, r2
 80033f2:	0018      	movs	r0, r3
 80033f4:	f000 fa18 	bl	8003828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2108      	movs	r1, #8
 8003404:	430a      	orrs	r2, r1
 8003406:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2104      	movs	r1, #4
 8003414:	438a      	bics	r2, r1
 8003416:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69d9      	ldr	r1, [r3, #28]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	61da      	str	r2, [r3, #28]
      break;
 800342a:	e06b      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	0011      	movs	r1, r2
 8003434:	0018      	movs	r0, r3
 8003436:	f000 fa79 	bl	800392c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2180      	movs	r1, #128	; 0x80
 8003446:	0109      	lsls	r1, r1, #4
 8003448:	430a      	orrs	r2, r1
 800344a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4932      	ldr	r1, [pc, #200]	; (8003520 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003458:	400a      	ands	r2, r1
 800345a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69d9      	ldr	r1, [r3, #28]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	021a      	lsls	r2, r3, #8
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	61da      	str	r2, [r3, #28]
      break;
 8003470:	e048      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	0011      	movs	r1, r2
 800347a:	0018      	movs	r0, r3
 800347c:	f000 faba 	bl	80039f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2108      	movs	r1, #8
 800348c:	430a      	orrs	r2, r1
 800348e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2104      	movs	r1, #4
 800349c:	438a      	bics	r2, r1
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034b2:	e027      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	0011      	movs	r1, r2
 80034bc:	0018      	movs	r0, r3
 80034be:	f000 faf3 	bl	8003aa8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2180      	movs	r1, #128	; 0x80
 80034ce:	0109      	lsls	r1, r1, #4
 80034d0:	430a      	orrs	r2, r1
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4910      	ldr	r1, [pc, #64]	; (8003520 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80034e0:	400a      	ands	r2, r1
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	021a      	lsls	r2, r3, #8
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034f8:	e004      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80034fa:	2317      	movs	r3, #23
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
      break;
 8003502:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	223c      	movs	r2, #60	; 0x3c
 8003508:	2100      	movs	r1, #0
 800350a:	5499      	strb	r1, [r3, r2]

  return status;
 800350c:	2317      	movs	r3, #23
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	781b      	ldrb	r3, [r3, #0]
}
 8003512:	0018      	movs	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	b006      	add	sp, #24
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	08004e84 	.word	0x08004e84
 8003520:	fffffbff 	.word	0xfffffbff

08003524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a37      	ldr	r2, [pc, #220]	; (8003614 <TIM_Base_SetConfig+0xf0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d008      	beq.n	800354e <TIM_Base_SetConfig+0x2a>
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	05db      	lsls	r3, r3, #23
 8003542:	429a      	cmp	r2, r3
 8003544:	d003      	beq.n	800354e <TIM_Base_SetConfig+0x2a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a33      	ldr	r2, [pc, #204]	; (8003618 <TIM_Base_SetConfig+0xf4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d108      	bne.n	8003560 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2270      	movs	r2, #112	; 0x70
 8003552:	4393      	bics	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a2c      	ldr	r2, [pc, #176]	; (8003614 <TIM_Base_SetConfig+0xf0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d014      	beq.n	8003592 <TIM_Base_SetConfig+0x6e>
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	05db      	lsls	r3, r3, #23
 800356e:	429a      	cmp	r2, r3
 8003570:	d00f      	beq.n	8003592 <TIM_Base_SetConfig+0x6e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a28      	ldr	r2, [pc, #160]	; (8003618 <TIM_Base_SetConfig+0xf4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00b      	beq.n	8003592 <TIM_Base_SetConfig+0x6e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a27      	ldr	r2, [pc, #156]	; (800361c <TIM_Base_SetConfig+0xf8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d007      	beq.n	8003592 <TIM_Base_SetConfig+0x6e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a26      	ldr	r2, [pc, #152]	; (8003620 <TIM_Base_SetConfig+0xfc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d003      	beq.n	8003592 <TIM_Base_SetConfig+0x6e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a25      	ldr	r2, [pc, #148]	; (8003624 <TIM_Base_SetConfig+0x100>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d108      	bne.n	80035a4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a24      	ldr	r2, [pc, #144]	; (8003628 <TIM_Base_SetConfig+0x104>)
 8003596:	4013      	ands	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2280      	movs	r2, #128	; 0x80
 80035a8:	4393      	bics	r3, r2
 80035aa:	001a      	movs	r2, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a11      	ldr	r2, [pc, #68]	; (8003614 <TIM_Base_SetConfig+0xf0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d007      	beq.n	80035e2 <TIM_Base_SetConfig+0xbe>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a12      	ldr	r2, [pc, #72]	; (8003620 <TIM_Base_SetConfig+0xfc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_Base_SetConfig+0xbe>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a11      	ldr	r2, [pc, #68]	; (8003624 <TIM_Base_SetConfig+0x100>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d103      	bne.n	80035ea <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2201      	movs	r2, #1
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d106      	bne.n	800360a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	2201      	movs	r2, #1
 8003602:	4393      	bics	r3, r2
 8003604:	001a      	movs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	611a      	str	r2, [r3, #16]
  }
}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	46bd      	mov	sp, r7
 800360e:	b004      	add	sp, #16
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40000400 	.word	0x40000400
 800361c:	40002000 	.word	0x40002000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800
 8003628:	fffffcff 	.word	0xfffffcff

0800362c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	2201      	movs	r2, #1
 8003642:	4393      	bics	r3, r2
 8003644:	001a      	movs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a2e      	ldr	r2, [pc, #184]	; (8003714 <TIM_OC1_SetConfig+0xe8>)
 800365a:	4013      	ands	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2203      	movs	r2, #3
 8003662:	4393      	bics	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2202      	movs	r2, #2
 8003674:	4393      	bics	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a24      	ldr	r2, [pc, #144]	; (8003718 <TIM_OC1_SetConfig+0xec>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d007      	beq.n	800369a <TIM_OC1_SetConfig+0x6e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a23      	ldr	r2, [pc, #140]	; (800371c <TIM_OC1_SetConfig+0xf0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d003      	beq.n	800369a <TIM_OC1_SetConfig+0x6e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a22      	ldr	r2, [pc, #136]	; (8003720 <TIM_OC1_SetConfig+0xf4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d10c      	bne.n	80036b4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2208      	movs	r2, #8
 800369e:	4393      	bics	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2204      	movs	r2, #4
 80036b0:	4393      	bics	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a18      	ldr	r2, [pc, #96]	; (8003718 <TIM_OC1_SetConfig+0xec>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d007      	beq.n	80036cc <TIM_OC1_SetConfig+0xa0>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a17      	ldr	r2, [pc, #92]	; (800371c <TIM_OC1_SetConfig+0xf0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_OC1_SetConfig+0xa0>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a16      	ldr	r2, [pc, #88]	; (8003720 <TIM_OC1_SetConfig+0xf4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d111      	bne.n	80036f0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4a15      	ldr	r2, [pc, #84]	; (8003724 <TIM_OC1_SetConfig+0xf8>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4a14      	ldr	r2, [pc, #80]	; (8003728 <TIM_OC1_SetConfig+0xfc>)
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b006      	add	sp, #24
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	fffeff8f 	.word	0xfffeff8f
 8003718:	40012c00 	.word	0x40012c00
 800371c:	40014400 	.word	0x40014400
 8003720:	40014800 	.word	0x40014800
 8003724:	fffffeff 	.word	0xfffffeff
 8003728:	fffffdff 	.word	0xfffffdff

0800372c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	2210      	movs	r2, #16
 8003742:	4393      	bics	r3, r2
 8003744:	001a      	movs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a2c      	ldr	r2, [pc, #176]	; (800380c <TIM_OC2_SetConfig+0xe0>)
 800375a:	4013      	ands	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a2b      	ldr	r2, [pc, #172]	; (8003810 <TIM_OC2_SetConfig+0xe4>)
 8003762:	4013      	ands	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2220      	movs	r2, #32
 8003776:	4393      	bics	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a22      	ldr	r2, [pc, #136]	; (8003814 <TIM_OC2_SetConfig+0xe8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10d      	bne.n	80037aa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2280      	movs	r2, #128	; 0x80
 8003792:	4393      	bics	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2240      	movs	r2, #64	; 0x40
 80037a6:	4393      	bics	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a19      	ldr	r2, [pc, #100]	; (8003814 <TIM_OC2_SetConfig+0xe8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d007      	beq.n	80037c2 <TIM_OC2_SetConfig+0x96>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a18      	ldr	r2, [pc, #96]	; (8003818 <TIM_OC2_SetConfig+0xec>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d003      	beq.n	80037c2 <TIM_OC2_SetConfig+0x96>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a17      	ldr	r2, [pc, #92]	; (800381c <TIM_OC2_SetConfig+0xf0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d113      	bne.n	80037ea <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4a16      	ldr	r2, [pc, #88]	; (8003820 <TIM_OC2_SetConfig+0xf4>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4a15      	ldr	r2, [pc, #84]	; (8003824 <TIM_OC2_SetConfig+0xf8>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	621a      	str	r2, [r3, #32]
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b006      	add	sp, #24
 800380a:	bd80      	pop	{r7, pc}
 800380c:	feff8fff 	.word	0xfeff8fff
 8003810:	fffffcff 	.word	0xfffffcff
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800
 8003820:	fffffbff 	.word	0xfffffbff
 8003824:	fffff7ff 	.word	0xfffff7ff

08003828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4a31      	ldr	r2, [pc, #196]	; (8003904 <TIM_OC3_SetConfig+0xdc>)
 800383e:	401a      	ands	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4a2d      	ldr	r2, [pc, #180]	; (8003908 <TIM_OC3_SetConfig+0xe0>)
 8003854:	4013      	ands	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2203      	movs	r2, #3
 800385c:	4393      	bics	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4a27      	ldr	r2, [pc, #156]	; (800390c <TIM_OC3_SetConfig+0xe4>)
 800386e:	4013      	ands	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a23      	ldr	r2, [pc, #140]	; (8003910 <TIM_OC3_SetConfig+0xe8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10d      	bne.n	80038a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	4a22      	ldr	r2, [pc, #136]	; (8003914 <TIM_OC3_SetConfig+0xec>)
 800388a:	4013      	ands	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <TIM_OC3_SetConfig+0xf0>)
 800389e:	4013      	ands	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1a      	ldr	r2, [pc, #104]	; (8003910 <TIM_OC3_SetConfig+0xe8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <TIM_OC3_SetConfig+0x92>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a1b      	ldr	r2, [pc, #108]	; (800391c <TIM_OC3_SetConfig+0xf4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d003      	beq.n	80038ba <TIM_OC3_SetConfig+0x92>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1a      	ldr	r2, [pc, #104]	; (8003920 <TIM_OC3_SetConfig+0xf8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d113      	bne.n	80038e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <TIM_OC3_SetConfig+0xfc>)
 80038be:	4013      	ands	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4a18      	ldr	r2, [pc, #96]	; (8003928 <TIM_OC3_SetConfig+0x100>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	621a      	str	r2, [r3, #32]
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b006      	add	sp, #24
 8003902:	bd80      	pop	{r7, pc}
 8003904:	fffffeff 	.word	0xfffffeff
 8003908:	fffeff8f 	.word	0xfffeff8f
 800390c:	fffffdff 	.word	0xfffffdff
 8003910:	40012c00 	.word	0x40012c00
 8003914:	fffff7ff 	.word	0xfffff7ff
 8003918:	fffffbff 	.word	0xfffffbff
 800391c:	40014400 	.word	0x40014400
 8003920:	40014800 	.word	0x40014800
 8003924:	ffffefff 	.word	0xffffefff
 8003928:	ffffdfff 	.word	0xffffdfff

0800392c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4a24      	ldr	r2, [pc, #144]	; (80039d4 <TIM_OC4_SetConfig+0xa8>)
 8003942:	401a      	ands	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a20      	ldr	r2, [pc, #128]	; (80039d8 <TIM_OC4_SetConfig+0xac>)
 8003958:	4013      	ands	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a1f      	ldr	r2, [pc, #124]	; (80039dc <TIM_OC4_SetConfig+0xb0>)
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <TIM_OC4_SetConfig+0xb4>)
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	031b      	lsls	r3, r3, #12
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <TIM_OC4_SetConfig+0xb8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d007      	beq.n	800399c <TIM_OC4_SetConfig+0x70>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <TIM_OC4_SetConfig+0xbc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <TIM_OC4_SetConfig+0x70>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a15      	ldr	r2, [pc, #84]	; (80039ec <TIM_OC4_SetConfig+0xc0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d109      	bne.n	80039b0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4a14      	ldr	r2, [pc, #80]	; (80039f0 <TIM_OC4_SetConfig+0xc4>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	621a      	str	r2, [r3, #32]
}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b006      	add	sp, #24
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	ffffefff 	.word	0xffffefff
 80039d8:	feff8fff 	.word	0xfeff8fff
 80039dc:	fffffcff 	.word	0xfffffcff
 80039e0:	ffffdfff 	.word	0xffffdfff
 80039e4:	40012c00 	.word	0x40012c00
 80039e8:	40014400 	.word	0x40014400
 80039ec:	40014800 	.word	0x40014800
 80039f0:	ffffbfff 	.word	0xffffbfff

080039f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4a21      	ldr	r2, [pc, #132]	; (8003a90 <TIM_OC5_SetConfig+0x9c>)
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <TIM_OC5_SetConfig+0xa0>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <TIM_OC5_SetConfig+0xa4>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <TIM_OC5_SetConfig+0xa8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d007      	beq.n	8003a5a <TIM_OC5_SetConfig+0x66>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <TIM_OC5_SetConfig+0xac>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d003      	beq.n	8003a5a <TIM_OC5_SetConfig+0x66>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <TIM_OC5_SetConfig+0xb0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d109      	bne.n	8003a6e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	4a0c      	ldr	r2, [pc, #48]	; (8003a90 <TIM_OC5_SetConfig+0x9c>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	621a      	str	r2, [r3, #32]
}
 8003a88:	46c0      	nop			; (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b006      	add	sp, #24
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	fffeffff 	.word	0xfffeffff
 8003a94:	fffeff8f 	.word	0xfffeff8f
 8003a98:	fffdffff 	.word	0xfffdffff
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40014400 	.word	0x40014400
 8003aa4:	40014800 	.word	0x40014800

08003aa8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <TIM_OC6_SetConfig+0xa0>)
 8003abe:	401a      	ands	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <TIM_OC6_SetConfig+0xa4>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4a1a      	ldr	r2, [pc, #104]	; (8003b50 <TIM_OC6_SetConfig+0xa8>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	051b      	lsls	r3, r3, #20
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <TIM_OC6_SetConfig+0xac>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d007      	beq.n	8003b10 <TIM_OC6_SetConfig+0x68>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a15      	ldr	r2, [pc, #84]	; (8003b58 <TIM_OC6_SetConfig+0xb0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d003      	beq.n	8003b10 <TIM_OC6_SetConfig+0x68>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <TIM_OC6_SetConfig+0xb4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d109      	bne.n	8003b24 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <TIM_OC6_SetConfig+0xb8>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	029b      	lsls	r3, r3, #10
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	621a      	str	r2, [r3, #32]
}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b006      	add	sp, #24
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	ffefffff 	.word	0xffefffff
 8003b4c:	feff8fff 	.word	0xfeff8fff
 8003b50:	ffdfffff 	.word	0xffdfffff
 8003b54:	40012c00 	.word	0x40012c00
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800
 8003b60:	fffbffff 	.word	0xfffbffff

08003b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	223c      	movs	r2, #60	; 0x3c
 8003b72:	5c9b      	ldrb	r3, [r3, r2]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e050      	b.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	223c      	movs	r2, #60	; 0x3c
 8003b80:	2101      	movs	r1, #1
 8003b82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	223d      	movs	r2, #61	; 0x3d
 8003b88:	2102      	movs	r1, #2
 8003b8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a21      	ldr	r2, [pc, #132]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d108      	bne.n	8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2270      	movs	r2, #112	; 0x70
 8003bbc:	4393      	bics	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00a      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	05db      	lsls	r3, r3, #23
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d004      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a10      	ldr	r2, [pc, #64]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10c      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2280      	movs	r2, #128	; 0x80
 8003bf6:	4393      	bics	r3, r2
 8003bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	223d      	movs	r2, #61	; 0x3d
 8003c10:	2101      	movs	r1, #1
 8003c12:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	223c      	movs	r2, #60	; 0x3c
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	0018      	movs	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b004      	add	sp, #16
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	ff0fffff 	.word	0xff0fffff
 8003c30:	40000400 	.word	0x40000400

08003c34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	223c      	movs	r2, #60	; 0x3c
 8003c46:	5c9b      	ldrb	r3, [r3, r2]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e06f      	b.n	8003d30 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	223c      	movs	r2, #60	; 0x3c
 8003c54:	2101      	movs	r1, #1
 8003c56:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	22ff      	movs	r2, #255	; 0xff
 8003c5c:	4393      	bics	r3, r2
 8003c5e:	001a      	movs	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a33      	ldr	r2, [pc, #204]	; (8003d38 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003c6c:	401a      	ands	r2, r3
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a30      	ldr	r2, [pc, #192]	; (8003d3c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a2e      	ldr	r2, [pc, #184]	; (8003d40 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003c88:	401a      	ands	r2, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4a2b      	ldr	r2, [pc, #172]	; (8003d44 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003c96:	401a      	ands	r2, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a29      	ldr	r2, [pc, #164]	; (8003d48 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003ca4:	401a      	ands	r2, r3
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a24      	ldr	r2, [pc, #144]	; (8003d50 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	041b      	lsls	r3, r3, #16
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4a21      	ldr	r2, [pc, #132]	; (8003d54 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003cd0:	401a      	ands	r2, r3
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1e      	ldr	r2, [pc, #120]	; (8003d58 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d11c      	bne.n	8003d1e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003ce8:	401a      	ands	r2, r3
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	051b      	lsls	r3, r3, #20
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a1a      	ldr	r2, [pc, #104]	; (8003d60 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003d06:	401a      	ands	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a15      	ldr	r2, [pc, #84]	; (8003d68 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003d14:	401a      	ands	r2, r3
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	223c      	movs	r2, #60	; 0x3c
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	0018      	movs	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b004      	add	sp, #16
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	fffffcff 	.word	0xfffffcff
 8003d3c:	fffffbff 	.word	0xfffffbff
 8003d40:	fffff7ff 	.word	0xfffff7ff
 8003d44:	ffffefff 	.word	0xffffefff
 8003d48:	ffffdfff 	.word	0xffffdfff
 8003d4c:	ffffbfff 	.word	0xffffbfff
 8003d50:	fff0ffff 	.word	0xfff0ffff
 8003d54:	efffffff 	.word	0xefffffff
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	ff0fffff 	.word	0xff0fffff
 8003d60:	feffffff 	.word	0xfeffffff
 8003d64:	fdffffff 	.word	0xfdffffff
 8003d68:	dfffffff 	.word	0xdfffffff

08003d6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e046      	b.n	8003e0c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2288      	movs	r2, #136	; 0x88
 8003d82:	589b      	ldr	r3, [r3, r2]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d107      	bne.n	8003d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2284      	movs	r2, #132	; 0x84
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7fd f81a 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2288      	movs	r2, #136	; 0x88
 8003d9c:	2124      	movs	r1, #36	; 0x24
 8003d9e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2101      	movs	r1, #1
 8003dac:	438a      	bics	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f000 faa4 	bl	8004308 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f000 f828 	bl	8003e18 <UART_SetConfig>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e01c      	b.n	8003e0c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	490d      	ldr	r1, [pc, #52]	; (8003e14 <HAL_UART_Init+0xa8>)
 8003dde:	400a      	ands	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	212a      	movs	r1, #42	; 0x2a
 8003dee:	438a      	bics	r2, r1
 8003df0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0018      	movs	r0, r3
 8003e06:	f000 fb33 	bl	8004470 <UART_CheckIdleState>
 8003e0a:	0003      	movs	r3, r0
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b002      	add	sp, #8
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	ffffb7ff 	.word	0xffffb7ff

08003e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	b090      	sub	sp, #64	; 0x40
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e20:	231a      	movs	r3, #26
 8003e22:	2220      	movs	r2, #32
 8003e24:	189b      	adds	r3, r3, r2
 8003e26:	19db      	adds	r3, r3, r7
 8003e28:	2200      	movs	r2, #0
 8003e2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4ac4      	ldr	r2, [pc, #784]	; (800415c <UART_SetConfig+0x344>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	0019      	movs	r1, r3
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e56:	430b      	orrs	r3, r1
 8003e58:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4abf      	ldr	r2, [pc, #764]	; (8004160 <UART_SetConfig+0x348>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	0018      	movs	r0, r3
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	68d9      	ldr	r1, [r3, #12]
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	0003      	movs	r3, r0
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4ab9      	ldr	r2, [pc, #740]	; (8004164 <UART_SetConfig+0x34c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	4ab4      	ldr	r2, [pc, #720]	; (8004168 <UART_SetConfig+0x350>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	0019      	movs	r1, r3
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	220f      	movs	r2, #15
 8003eac:	4393      	bics	r3, r2
 8003eae:	0018      	movs	r0, r3
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	0003      	movs	r3, r0
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4aaa      	ldr	r2, [pc, #680]	; (800416c <UART_SetConfig+0x354>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d131      	bne.n	8003f2c <UART_SetConfig+0x114>
 8003ec8:	4ba9      	ldr	r3, [pc, #676]	; (8004170 <UART_SetConfig+0x358>)
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	2203      	movs	r2, #3
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d01d      	beq.n	8003f10 <UART_SetConfig+0xf8>
 8003ed4:	d823      	bhi.n	8003f1e <UART_SetConfig+0x106>
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d00c      	beq.n	8003ef4 <UART_SetConfig+0xdc>
 8003eda:	d820      	bhi.n	8003f1e <UART_SetConfig+0x106>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <UART_SetConfig+0xce>
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d00e      	beq.n	8003f02 <UART_SetConfig+0xea>
 8003ee4:	e01b      	b.n	8003f1e <UART_SetConfig+0x106>
 8003ee6:	231b      	movs	r3, #27
 8003ee8:	2220      	movs	r2, #32
 8003eea:	189b      	adds	r3, r3, r2
 8003eec:	19db      	adds	r3, r3, r7
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e071      	b.n	8003fd8 <UART_SetConfig+0x1c0>
 8003ef4:	231b      	movs	r3, #27
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	189b      	adds	r3, r3, r2
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	2202      	movs	r2, #2
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e06a      	b.n	8003fd8 <UART_SetConfig+0x1c0>
 8003f02:	231b      	movs	r3, #27
 8003f04:	2220      	movs	r2, #32
 8003f06:	189b      	adds	r3, r3, r2
 8003f08:	19db      	adds	r3, r3, r7
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e063      	b.n	8003fd8 <UART_SetConfig+0x1c0>
 8003f10:	231b      	movs	r3, #27
 8003f12:	2220      	movs	r2, #32
 8003f14:	189b      	adds	r3, r3, r2
 8003f16:	19db      	adds	r3, r3, r7
 8003f18:	2208      	movs	r2, #8
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	e05c      	b.n	8003fd8 <UART_SetConfig+0x1c0>
 8003f1e:	231b      	movs	r3, #27
 8003f20:	2220      	movs	r2, #32
 8003f22:	189b      	adds	r3, r3, r2
 8003f24:	19db      	adds	r3, r3, r7
 8003f26:	2210      	movs	r2, #16
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e055      	b.n	8003fd8 <UART_SetConfig+0x1c0>
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a90      	ldr	r2, [pc, #576]	; (8004174 <UART_SetConfig+0x35c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d106      	bne.n	8003f44 <UART_SetConfig+0x12c>
 8003f36:	231b      	movs	r3, #27
 8003f38:	2220      	movs	r2, #32
 8003f3a:	189b      	adds	r3, r3, r2
 8003f3c:	19db      	adds	r3, r3, r7
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	e049      	b.n	8003fd8 <UART_SetConfig+0x1c0>
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a86      	ldr	r2, [pc, #536]	; (8004164 <UART_SetConfig+0x34c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d13e      	bne.n	8003fcc <UART_SetConfig+0x1b4>
 8003f4e:	4b88      	ldr	r3, [pc, #544]	; (8004170 <UART_SetConfig+0x358>)
 8003f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f52:	23c0      	movs	r3, #192	; 0xc0
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	4013      	ands	r3, r2
 8003f58:	22c0      	movs	r2, #192	; 0xc0
 8003f5a:	0112      	lsls	r2, r2, #4
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d027      	beq.n	8003fb0 <UART_SetConfig+0x198>
 8003f60:	22c0      	movs	r2, #192	; 0xc0
 8003f62:	0112      	lsls	r2, r2, #4
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d82a      	bhi.n	8003fbe <UART_SetConfig+0x1a6>
 8003f68:	2280      	movs	r2, #128	; 0x80
 8003f6a:	0112      	lsls	r2, r2, #4
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d011      	beq.n	8003f94 <UART_SetConfig+0x17c>
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	0112      	lsls	r2, r2, #4
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d822      	bhi.n	8003fbe <UART_SetConfig+0x1a6>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <UART_SetConfig+0x16e>
 8003f7c:	2280      	movs	r2, #128	; 0x80
 8003f7e:	00d2      	lsls	r2, r2, #3
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00e      	beq.n	8003fa2 <UART_SetConfig+0x18a>
 8003f84:	e01b      	b.n	8003fbe <UART_SetConfig+0x1a6>
 8003f86:	231b      	movs	r3, #27
 8003f88:	2220      	movs	r2, #32
 8003f8a:	189b      	adds	r3, r3, r2
 8003f8c:	19db      	adds	r3, r3, r7
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	e021      	b.n	8003fd8 <UART_SetConfig+0x1c0>
 8003f94:	231b      	movs	r3, #27
 8003f96:	2220      	movs	r2, #32
 8003f98:	189b      	adds	r3, r3, r2
 8003f9a:	19db      	adds	r3, r3, r7
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	e01a      	b.n	8003fd8 <UART_SetConfig+0x1c0>
 8003fa2:	231b      	movs	r3, #27
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	189b      	adds	r3, r3, r2
 8003fa8:	19db      	adds	r3, r3, r7
 8003faa:	2204      	movs	r2, #4
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	e013      	b.n	8003fd8 <UART_SetConfig+0x1c0>
 8003fb0:	231b      	movs	r3, #27
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	189b      	adds	r3, r3, r2
 8003fb6:	19db      	adds	r3, r3, r7
 8003fb8:	2208      	movs	r2, #8
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e00c      	b.n	8003fd8 <UART_SetConfig+0x1c0>
 8003fbe:	231b      	movs	r3, #27
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	189b      	adds	r3, r3, r2
 8003fc4:	19db      	adds	r3, r3, r7
 8003fc6:	2210      	movs	r2, #16
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e005      	b.n	8003fd8 <UART_SetConfig+0x1c0>
 8003fcc:	231b      	movs	r3, #27
 8003fce:	2220      	movs	r2, #32
 8003fd0:	189b      	adds	r3, r3, r2
 8003fd2:	19db      	adds	r3, r3, r7
 8003fd4:	2210      	movs	r2, #16
 8003fd6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a61      	ldr	r2, [pc, #388]	; (8004164 <UART_SetConfig+0x34c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d000      	beq.n	8003fe4 <UART_SetConfig+0x1cc>
 8003fe2:	e092      	b.n	800410a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fe4:	231b      	movs	r3, #27
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	189b      	adds	r3, r3, r2
 8003fea:	19db      	adds	r3, r3, r7
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d015      	beq.n	800401e <UART_SetConfig+0x206>
 8003ff2:	dc18      	bgt.n	8004026 <UART_SetConfig+0x20e>
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d00d      	beq.n	8004014 <UART_SetConfig+0x1fc>
 8003ff8:	dc15      	bgt.n	8004026 <UART_SetConfig+0x20e>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <UART_SetConfig+0x1ec>
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d005      	beq.n	800400e <UART_SetConfig+0x1f6>
 8004002:	e010      	b.n	8004026 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe f886 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8004008:	0003      	movs	r3, r0
 800400a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800400c:	e014      	b.n	8004038 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800400e:	4b5a      	ldr	r3, [pc, #360]	; (8004178 <UART_SetConfig+0x360>)
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004012:	e011      	b.n	8004038 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004014:	f7fd fff2 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8004018:	0003      	movs	r3, r0
 800401a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800401c:	e00c      	b.n	8004038 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004024:	e008      	b.n	8004038 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800402a:	231a      	movs	r3, #26
 800402c:	2220      	movs	r2, #32
 800402e:	189b      	adds	r3, r3, r2
 8004030:	19db      	adds	r3, r3, r7
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
        break;
 8004036:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	2b00      	cmp	r3, #0
 800403c:	d100      	bne.n	8004040 <UART_SetConfig+0x228>
 800403e:	e147      	b.n	80042d0 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004044:	4b4d      	ldr	r3, [pc, #308]	; (800417c <UART_SetConfig+0x364>)
 8004046:	0052      	lsls	r2, r2, #1
 8004048:	5ad3      	ldrh	r3, [r2, r3]
 800404a:	0019      	movs	r1, r3
 800404c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800404e:	f7fc f859 	bl	8000104 <__udivsi3>
 8004052:	0003      	movs	r3, r0
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	0013      	movs	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	189b      	adds	r3, r3, r2
 8004060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004062:	429a      	cmp	r2, r3
 8004064:	d305      	bcc.n	8004072 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800406c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800406e:	429a      	cmp	r2, r3
 8004070:	d906      	bls.n	8004080 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004072:	231a      	movs	r3, #26
 8004074:	2220      	movs	r2, #32
 8004076:	189b      	adds	r3, r3, r2
 8004078:	19db      	adds	r3, r3, r7
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
 800407e:	e127      	b.n	80042d0 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800408c:	4b3b      	ldr	r3, [pc, #236]	; (800417c <UART_SetConfig+0x364>)
 800408e:	0052      	lsls	r2, r2, #1
 8004090:	5ad3      	ldrh	r3, [r2, r3]
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	69b8      	ldr	r0, [r7, #24]
 800409e:	69f9      	ldr	r1, [r7, #28]
 80040a0:	f7fc f9a6 	bl	80003f0 <__aeabi_uldivmod>
 80040a4:	0002      	movs	r2, r0
 80040a6:	000b      	movs	r3, r1
 80040a8:	0e11      	lsrs	r1, r2, #24
 80040aa:	021d      	lsls	r5, r3, #8
 80040ac:	430d      	orrs	r5, r1
 80040ae:	0214      	lsls	r4, r2, #8
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68b8      	ldr	r0, [r7, #8]
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	1900      	adds	r0, r0, r4
 80040c2:	4169      	adcs	r1, r5
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	603b      	str	r3, [r7, #0]
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f7fc f98d 	bl	80003f0 <__aeabi_uldivmod>
 80040d6:	0002      	movs	r2, r0
 80040d8:	000b      	movs	r3, r1
 80040da:	0013      	movs	r3, r2
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e0:	23c0      	movs	r3, #192	; 0xc0
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d309      	bcc.n	80040fc <UART_SetConfig+0x2e4>
 80040e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ea:	2380      	movs	r3, #128	; 0x80
 80040ec:	035b      	lsls	r3, r3, #13
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d204      	bcs.n	80040fc <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	e0e9      	b.n	80042d0 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80040fc:	231a      	movs	r3, #26
 80040fe:	2220      	movs	r2, #32
 8004100:	189b      	adds	r3, r3, r2
 8004102:	19db      	adds	r3, r3, r7
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e0e2      	b.n	80042d0 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	69da      	ldr	r2, [r3, #28]
 800410e:	2380      	movs	r3, #128	; 0x80
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	429a      	cmp	r2, r3
 8004114:	d000      	beq.n	8004118 <UART_SetConfig+0x300>
 8004116:	e083      	b.n	8004220 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004118:	231b      	movs	r3, #27
 800411a:	2220      	movs	r2, #32
 800411c:	189b      	adds	r3, r3, r2
 800411e:	19db      	adds	r3, r3, r7
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b08      	cmp	r3, #8
 8004124:	d015      	beq.n	8004152 <UART_SetConfig+0x33a>
 8004126:	dc2b      	bgt.n	8004180 <UART_SetConfig+0x368>
 8004128:	2b04      	cmp	r3, #4
 800412a:	d00d      	beq.n	8004148 <UART_SetConfig+0x330>
 800412c:	dc28      	bgt.n	8004180 <UART_SetConfig+0x368>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <UART_SetConfig+0x320>
 8004132:	2b02      	cmp	r3, #2
 8004134:	d005      	beq.n	8004142 <UART_SetConfig+0x32a>
 8004136:	e023      	b.n	8004180 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004138:	f7fd ffec 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 800413c:	0003      	movs	r3, r0
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004140:	e027      	b.n	8004192 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <UART_SetConfig+0x360>)
 8004144:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004146:	e024      	b.n	8004192 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004148:	f7fd ff58 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 800414c:	0003      	movs	r3, r0
 800414e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004150:	e01f      	b.n	8004192 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004158:	e01b      	b.n	8004192 <UART_SetConfig+0x37a>
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	cfff69f3 	.word	0xcfff69f3
 8004160:	ffffcfff 	.word	0xffffcfff
 8004164:	40008000 	.word	0x40008000
 8004168:	11fff4ff 	.word	0x11fff4ff
 800416c:	40013800 	.word	0x40013800
 8004170:	40021000 	.word	0x40021000
 8004174:	40004400 	.word	0x40004400
 8004178:	00f42400 	.word	0x00f42400
 800417c:	08004ed8 	.word	0x08004ed8
      default:
        pclk = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004184:	231a      	movs	r3, #26
 8004186:	2220      	movs	r2, #32
 8004188:	189b      	adds	r3, r3, r2
 800418a:	19db      	adds	r3, r3, r7
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
        break;
 8004190:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004194:	2b00      	cmp	r3, #0
 8004196:	d100      	bne.n	800419a <UART_SetConfig+0x382>
 8004198:	e09a      	b.n	80042d0 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800419e:	4b58      	ldr	r3, [pc, #352]	; (8004300 <UART_SetConfig+0x4e8>)
 80041a0:	0052      	lsls	r2, r2, #1
 80041a2:	5ad3      	ldrh	r3, [r2, r3]
 80041a4:	0019      	movs	r1, r3
 80041a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80041a8:	f7fb ffac 	bl	8000104 <__udivsi3>
 80041ac:	0003      	movs	r3, r0
 80041ae:	005a      	lsls	r2, r3, #1
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	18d2      	adds	r2, r2, r3
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	0019      	movs	r1, r3
 80041be:	0010      	movs	r0, r2
 80041c0:	f7fb ffa0 	bl	8000104 <__udivsi3>
 80041c4:	0003      	movs	r3, r0
 80041c6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	2b0f      	cmp	r3, #15
 80041cc:	d921      	bls.n	8004212 <UART_SetConfig+0x3fa>
 80041ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	025b      	lsls	r3, r3, #9
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d21c      	bcs.n	8004212 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	b29a      	uxth	r2, r3
 80041dc:	200e      	movs	r0, #14
 80041de:	2420      	movs	r4, #32
 80041e0:	1903      	adds	r3, r0, r4
 80041e2:	19db      	adds	r3, r3, r7
 80041e4:	210f      	movs	r1, #15
 80041e6:	438a      	bics	r2, r1
 80041e8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	085b      	lsrs	r3, r3, #1
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2207      	movs	r2, #7
 80041f2:	4013      	ands	r3, r2
 80041f4:	b299      	uxth	r1, r3
 80041f6:	1903      	adds	r3, r0, r4
 80041f8:	19db      	adds	r3, r3, r7
 80041fa:	1902      	adds	r2, r0, r4
 80041fc:	19d2      	adds	r2, r2, r7
 80041fe:	8812      	ldrh	r2, [r2, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	1902      	adds	r2, r0, r4
 800420a:	19d2      	adds	r2, r2, r7
 800420c:	8812      	ldrh	r2, [r2, #0]
 800420e:	60da      	str	r2, [r3, #12]
 8004210:	e05e      	b.n	80042d0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004212:	231a      	movs	r3, #26
 8004214:	2220      	movs	r2, #32
 8004216:	189b      	adds	r3, r3, r2
 8004218:	19db      	adds	r3, r3, r7
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
 800421e:	e057      	b.n	80042d0 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004220:	231b      	movs	r3, #27
 8004222:	2220      	movs	r2, #32
 8004224:	189b      	adds	r3, r3, r2
 8004226:	19db      	adds	r3, r3, r7
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b08      	cmp	r3, #8
 800422c:	d015      	beq.n	800425a <UART_SetConfig+0x442>
 800422e:	dc18      	bgt.n	8004262 <UART_SetConfig+0x44a>
 8004230:	2b04      	cmp	r3, #4
 8004232:	d00d      	beq.n	8004250 <UART_SetConfig+0x438>
 8004234:	dc15      	bgt.n	8004262 <UART_SetConfig+0x44a>
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <UART_SetConfig+0x428>
 800423a:	2b02      	cmp	r3, #2
 800423c:	d005      	beq.n	800424a <UART_SetConfig+0x432>
 800423e:	e010      	b.n	8004262 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004240:	f7fd ff68 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8004244:	0003      	movs	r3, r0
 8004246:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004248:	e014      	b.n	8004274 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800424a:	4b2e      	ldr	r3, [pc, #184]	; (8004304 <UART_SetConfig+0x4ec>)
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800424e:	e011      	b.n	8004274 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004250:	f7fd fed4 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8004254:	0003      	movs	r3, r0
 8004256:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004258:	e00c      	b.n	8004274 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004260:	e008      	b.n	8004274 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004266:	231a      	movs	r3, #26
 8004268:	2220      	movs	r2, #32
 800426a:	189b      	adds	r3, r3, r2
 800426c:	19db      	adds	r3, r3, r7
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
        break;
 8004272:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	2b00      	cmp	r3, #0
 8004278:	d02a      	beq.n	80042d0 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <UART_SetConfig+0x4e8>)
 8004280:	0052      	lsls	r2, r2, #1
 8004282:	5ad3      	ldrh	r3, [r2, r3]
 8004284:	0019      	movs	r1, r3
 8004286:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004288:	f7fb ff3c 	bl	8000104 <__udivsi3>
 800428c:	0003      	movs	r3, r0
 800428e:	001a      	movs	r2, r3
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	085b      	lsrs	r3, r3, #1
 8004296:	18d2      	adds	r2, r2, r3
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	0019      	movs	r1, r3
 800429e:	0010      	movs	r0, r2
 80042a0:	f7fb ff30 	bl	8000104 <__udivsi3>
 80042a4:	0003      	movs	r3, r0
 80042a6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	2b0f      	cmp	r3, #15
 80042ac:	d90a      	bls.n	80042c4 <UART_SetConfig+0x4ac>
 80042ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b0:	2380      	movs	r3, #128	; 0x80
 80042b2:	025b      	lsls	r3, r3, #9
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d205      	bcs.n	80042c4 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60da      	str	r2, [r3, #12]
 80042c2:	e005      	b.n	80042d0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80042c4:	231a      	movs	r3, #26
 80042c6:	2220      	movs	r2, #32
 80042c8:	189b      	adds	r3, r3, r2
 80042ca:	19db      	adds	r3, r3, r7
 80042cc:	2201      	movs	r2, #1
 80042ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	226a      	movs	r2, #106	; 0x6a
 80042d4:	2101      	movs	r1, #1
 80042d6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	2268      	movs	r2, #104	; 0x68
 80042dc:	2101      	movs	r1, #1
 80042de:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	2200      	movs	r2, #0
 80042e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	2200      	movs	r2, #0
 80042ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80042ec:	231a      	movs	r3, #26
 80042ee:	2220      	movs	r2, #32
 80042f0:	189b      	adds	r3, r3, r2
 80042f2:	19db      	adds	r3, r3, r7
 80042f4:	781b      	ldrb	r3, [r3, #0]
}
 80042f6:	0018      	movs	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b010      	add	sp, #64	; 0x40
 80042fc:	bdb0      	pop	{r4, r5, r7, pc}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	08004ed8 	.word	0x08004ed8
 8004304:	00f42400 	.word	0x00f42400

08004308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	2208      	movs	r2, #8
 8004316:	4013      	ands	r3, r2
 8004318:	d00b      	beq.n	8004332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4a4a      	ldr	r2, [pc, #296]	; (800444c <UART_AdvFeatureConfig+0x144>)
 8004322:	4013      	ands	r3, r2
 8004324:	0019      	movs	r1, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	2201      	movs	r2, #1
 8004338:	4013      	ands	r3, r2
 800433a:	d00b      	beq.n	8004354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4a43      	ldr	r2, [pc, #268]	; (8004450 <UART_AdvFeatureConfig+0x148>)
 8004344:	4013      	ands	r3, r2
 8004346:	0019      	movs	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	2202      	movs	r2, #2
 800435a:	4013      	ands	r3, r2
 800435c:	d00b      	beq.n	8004376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4a3b      	ldr	r2, [pc, #236]	; (8004454 <UART_AdvFeatureConfig+0x14c>)
 8004366:	4013      	ands	r3, r2
 8004368:	0019      	movs	r1, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	2204      	movs	r2, #4
 800437c:	4013      	ands	r3, r2
 800437e:	d00b      	beq.n	8004398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	4a34      	ldr	r2, [pc, #208]	; (8004458 <UART_AdvFeatureConfig+0x150>)
 8004388:	4013      	ands	r3, r2
 800438a:	0019      	movs	r1, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	2210      	movs	r2, #16
 800439e:	4013      	ands	r3, r2
 80043a0:	d00b      	beq.n	80043ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4a2c      	ldr	r2, [pc, #176]	; (800445c <UART_AdvFeatureConfig+0x154>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	0019      	movs	r1, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	2220      	movs	r2, #32
 80043c0:	4013      	ands	r3, r2
 80043c2:	d00b      	beq.n	80043dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	4a25      	ldr	r2, [pc, #148]	; (8004460 <UART_AdvFeatureConfig+0x158>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	0019      	movs	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	2240      	movs	r2, #64	; 0x40
 80043e2:	4013      	ands	r3, r2
 80043e4:	d01d      	beq.n	8004422 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <UART_AdvFeatureConfig+0x15c>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	0019      	movs	r1, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	035b      	lsls	r3, r3, #13
 8004406:	429a      	cmp	r2, r3
 8004408:	d10b      	bne.n	8004422 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4a15      	ldr	r2, [pc, #84]	; (8004468 <UART_AdvFeatureConfig+0x160>)
 8004412:	4013      	ands	r3, r2
 8004414:	0019      	movs	r1, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	2280      	movs	r2, #128	; 0x80
 8004428:	4013      	ands	r3, r2
 800442a:	d00b      	beq.n	8004444 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4a0e      	ldr	r2, [pc, #56]	; (800446c <UART_AdvFeatureConfig+0x164>)
 8004434:	4013      	ands	r3, r2
 8004436:	0019      	movs	r1, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
  }
}
 8004444:	46c0      	nop			; (mov r8, r8)
 8004446:	46bd      	mov	sp, r7
 8004448:	b002      	add	sp, #8
 800444a:	bd80      	pop	{r7, pc}
 800444c:	ffff7fff 	.word	0xffff7fff
 8004450:	fffdffff 	.word	0xfffdffff
 8004454:	fffeffff 	.word	0xfffeffff
 8004458:	fffbffff 	.word	0xfffbffff
 800445c:	ffffefff 	.word	0xffffefff
 8004460:	ffffdfff 	.word	0xffffdfff
 8004464:	ffefffff 	.word	0xffefffff
 8004468:	ff9fffff 	.word	0xff9fffff
 800446c:	fff7ffff 	.word	0xfff7ffff

08004470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b092      	sub	sp, #72	; 0x48
 8004474:	af02      	add	r7, sp, #8
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2290      	movs	r2, #144	; 0x90
 800447c:	2100      	movs	r1, #0
 800447e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004480:	f7fc fdac 	bl	8000fdc <HAL_GetTick>
 8004484:	0003      	movs	r3, r0
 8004486:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2208      	movs	r2, #8
 8004490:	4013      	ands	r3, r2
 8004492:	2b08      	cmp	r3, #8
 8004494:	d12d      	bne.n	80044f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004498:	2280      	movs	r2, #128	; 0x80
 800449a:	0391      	lsls	r1, r2, #14
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4a47      	ldr	r2, [pc, #284]	; (80045bc <UART_CheckIdleState+0x14c>)
 80044a0:	9200      	str	r2, [sp, #0]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f000 f88e 	bl	80045c4 <UART_WaitOnFlagUntilTimeout>
 80044a8:	1e03      	subs	r3, r0, #0
 80044aa:	d022      	beq.n	80044f2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ac:	f3ef 8310 	mrs	r3, PRIMASK
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80044b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b6:	2301      	movs	r3, #1
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044bc:	f383 8810 	msr	PRIMASK, r3
}
 80044c0:	46c0      	nop			; (mov r8, r8)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2180      	movs	r1, #128	; 0x80
 80044ce:	438a      	bics	r2, r1
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d8:	f383 8810 	msr	PRIMASK, r3
}
 80044dc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2288      	movs	r2, #136	; 0x88
 80044e2:	2120      	movs	r1, #32
 80044e4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2284      	movs	r2, #132	; 0x84
 80044ea:	2100      	movs	r1, #0
 80044ec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e060      	b.n	80045b4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2204      	movs	r2, #4
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d146      	bne.n	800458e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004502:	2280      	movs	r2, #128	; 0x80
 8004504:	03d1      	lsls	r1, r2, #15
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4a2c      	ldr	r2, [pc, #176]	; (80045bc <UART_CheckIdleState+0x14c>)
 800450a:	9200      	str	r2, [sp, #0]
 800450c:	2200      	movs	r2, #0
 800450e:	f000 f859 	bl	80045c4 <UART_WaitOnFlagUntilTimeout>
 8004512:	1e03      	subs	r3, r0, #0
 8004514:	d03b      	beq.n	800458e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004516:	f3ef 8310 	mrs	r3, PRIMASK
 800451a:	60fb      	str	r3, [r7, #12]
  return(result);
 800451c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800451e:	637b      	str	r3, [r7, #52]	; 0x34
 8004520:	2301      	movs	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f383 8810 	msr	PRIMASK, r3
}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4922      	ldr	r1, [pc, #136]	; (80045c0 <UART_CheckIdleState+0x150>)
 8004538:	400a      	ands	r2, r1
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f383 8810 	msr	PRIMASK, r3
}
 8004546:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004548:	f3ef 8310 	mrs	r3, PRIMASK
 800454c:	61bb      	str	r3, [r7, #24]
  return(result);
 800454e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004550:	633b      	str	r3, [r7, #48]	; 0x30
 8004552:	2301      	movs	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f383 8810 	msr	PRIMASK, r3
}
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2101      	movs	r1, #1
 800456a:	438a      	bics	r2, r1
 800456c:	609a      	str	r2, [r3, #8]
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f383 8810 	msr	PRIMASK, r3
}
 8004578:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	228c      	movs	r2, #140	; 0x8c
 800457e:	2120      	movs	r1, #32
 8004580:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2284      	movs	r2, #132	; 0x84
 8004586:	2100      	movs	r1, #0
 8004588:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e012      	b.n	80045b4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2288      	movs	r2, #136	; 0x88
 8004592:	2120      	movs	r1, #32
 8004594:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	228c      	movs	r2, #140	; 0x8c
 800459a:	2120      	movs	r1, #32
 800459c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2284      	movs	r2, #132	; 0x84
 80045ae:	2100      	movs	r1, #0
 80045b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	0018      	movs	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b010      	add	sp, #64	; 0x40
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	01ffffff 	.word	0x01ffffff
 80045c0:	fffffedf 	.word	0xfffffedf

080045c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	1dfb      	adds	r3, r7, #7
 80045d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d4:	e051      	b.n	800467a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	3301      	adds	r3, #1
 80045da:	d04e      	beq.n	800467a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045dc:	f7fc fcfe 	bl	8000fdc <HAL_GetTick>
 80045e0:	0002      	movs	r2, r0
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d302      	bcc.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e051      	b.n	800469a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2204      	movs	r2, #4
 80045fe:	4013      	ands	r3, r2
 8004600:	d03b      	beq.n	800467a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b80      	cmp	r3, #128	; 0x80
 8004606:	d038      	beq.n	800467a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b40      	cmp	r3, #64	; 0x40
 800460c:	d035      	beq.n	800467a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2208      	movs	r2, #8
 8004616:	4013      	ands	r3, r2
 8004618:	2b08      	cmp	r3, #8
 800461a:	d111      	bne.n	8004640 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2208      	movs	r2, #8
 8004622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	0018      	movs	r0, r3
 8004628:	f000 f83c 	bl	80046a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2290      	movs	r2, #144	; 0x90
 8004630:	2108      	movs	r1, #8
 8004632:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2284      	movs	r2, #132	; 0x84
 8004638:	2100      	movs	r1, #0
 800463a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e02c      	b.n	800469a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	2380      	movs	r3, #128	; 0x80
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	401a      	ands	r2, r3
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	429a      	cmp	r2, r3
 8004652:	d112      	bne.n	800467a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2280      	movs	r2, #128	; 0x80
 800465a:	0112      	lsls	r2, r2, #4
 800465c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	0018      	movs	r0, r3
 8004662:	f000 f81f 	bl	80046a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2290      	movs	r2, #144	; 0x90
 800466a:	2120      	movs	r1, #32
 800466c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2284      	movs	r2, #132	; 0x84
 8004672:	2100      	movs	r1, #0
 8004674:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e00f      	b.n	800469a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	4013      	ands	r3, r2
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	425a      	negs	r2, r3
 800468a:	4153      	adcs	r3, r2
 800468c:	b2db      	uxtb	r3, r3
 800468e:	001a      	movs	r2, r3
 8004690:	1dfb      	adds	r3, r7, #7
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d09e      	beq.n	80045d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b004      	add	sp, #16
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08e      	sub	sp, #56	; 0x38
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ac:	f3ef 8310 	mrs	r3, PRIMASK
 80046b0:	617b      	str	r3, [r7, #20]
  return(result);
 80046b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
 80046b6:	2301      	movs	r3, #1
 80046b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f383 8810 	msr	PRIMASK, r3
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4926      	ldr	r1, [pc, #152]	; (8004768 <UART_EndRxTransfer+0xc4>)
 80046ce:	400a      	ands	r2, r1
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f383 8810 	msr	PRIMASK, r3
}
 80046dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046de:	f3ef 8310 	mrs	r3, PRIMASK
 80046e2:	623b      	str	r3, [r7, #32]
  return(result);
 80046e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046e6:	633b      	str	r3, [r7, #48]	; 0x30
 80046e8:	2301      	movs	r3, #1
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	f383 8810 	msr	PRIMASK, r3
}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	491b      	ldr	r1, [pc, #108]	; (800476c <UART_EndRxTransfer+0xc8>)
 8004700:	400a      	ands	r2, r1
 8004702:	609a      	str	r2, [r3, #8]
 8004704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	f383 8810 	msr	PRIMASK, r3
}
 800470e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d118      	bne.n	800474a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004718:	f3ef 8310 	mrs	r3, PRIMASK
 800471c:	60bb      	str	r3, [r7, #8]
  return(result);
 800471e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004722:	2301      	movs	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f383 8810 	msr	PRIMASK, r3
}
 800472c:	46c0      	nop			; (mov r8, r8)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2110      	movs	r1, #16
 800473a:	438a      	bics	r2, r1
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f383 8810 	msr	PRIMASK, r3
}
 8004748:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	228c      	movs	r2, #140	; 0x8c
 800474e:	2120      	movs	r1, #32
 8004750:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	46bd      	mov	sp, r7
 8004762:	b00e      	add	sp, #56	; 0x38
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	fffffedf 	.word	0xfffffedf
 800476c:	effffffe 	.word	0xeffffffe

08004770 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2284      	movs	r2, #132	; 0x84
 800477c:	5c9b      	ldrb	r3, [r3, r2]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_UARTEx_DisableFifoMode+0x16>
 8004782:	2302      	movs	r3, #2
 8004784:	e027      	b.n	80047d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2284      	movs	r2, #132	; 0x84
 800478a:	2101      	movs	r1, #1
 800478c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2288      	movs	r2, #136	; 0x88
 8004792:	2124      	movs	r1, #36	; 0x24
 8004794:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2101      	movs	r1, #1
 80047aa:	438a      	bics	r2, r1
 80047ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4a0b      	ldr	r2, [pc, #44]	; (80047e0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2288      	movs	r2, #136	; 0x88
 80047c8:	2120      	movs	r1, #32
 80047ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2284      	movs	r2, #132	; 0x84
 80047d0:	2100      	movs	r1, #0
 80047d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	0018      	movs	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	b004      	add	sp, #16
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	dfffffff 	.word	0xdfffffff

080047e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2284      	movs	r2, #132	; 0x84
 80047f2:	5c9b      	ldrb	r3, [r3, r2]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e02e      	b.n	800485a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2284      	movs	r2, #132	; 0x84
 8004800:	2101      	movs	r1, #1
 8004802:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2288      	movs	r2, #136	; 0x88
 8004808:	2124      	movs	r1, #36	; 0x24
 800480a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2101      	movs	r1, #1
 8004820:	438a      	bics	r2, r1
 8004822:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	08d9      	lsrs	r1, r3, #3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	0018      	movs	r0, r3
 800483c:	f000 f854 	bl	80048e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2288      	movs	r2, #136	; 0x88
 800484c:	2120      	movs	r1, #32
 800484e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2284      	movs	r2, #132	; 0x84
 8004854:	2100      	movs	r1, #0
 8004856:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	0018      	movs	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	b004      	add	sp, #16
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2284      	movs	r2, #132	; 0x84
 8004872:	5c9b      	ldrb	r3, [r3, r2]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004878:	2302      	movs	r3, #2
 800487a:	e02f      	b.n	80048dc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2284      	movs	r2, #132	; 0x84
 8004880:	2101      	movs	r1, #1
 8004882:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2288      	movs	r2, #136	; 0x88
 8004888:	2124      	movs	r1, #36	; 0x24
 800488a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2101      	movs	r1, #1
 80048a0:	438a      	bics	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	4a0e      	ldr	r2, [pc, #56]	; (80048e4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	0019      	movs	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	0018      	movs	r0, r3
 80048be:	f000 f813 	bl	80048e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2288      	movs	r2, #136	; 0x88
 80048ce:	2120      	movs	r1, #32
 80048d0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2284      	movs	r2, #132	; 0x84
 80048d6:	2100      	movs	r1, #0
 80048d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b004      	add	sp, #16
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	f1ffffff 	.word	0xf1ffffff

080048e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d108      	bne.n	800490a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	226a      	movs	r2, #106	; 0x6a
 80048fc:	2101      	movs	r1, #1
 80048fe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2268      	movs	r2, #104	; 0x68
 8004904:	2101      	movs	r1, #1
 8004906:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004908:	e043      	b.n	8004992 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800490a:	260f      	movs	r6, #15
 800490c:	19bb      	adds	r3, r7, r6
 800490e:	2208      	movs	r2, #8
 8004910:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004912:	200e      	movs	r0, #14
 8004914:	183b      	adds	r3, r7, r0
 8004916:	2208      	movs	r2, #8
 8004918:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	0e5b      	lsrs	r3, r3, #25
 8004922:	b2da      	uxtb	r2, r3
 8004924:	240d      	movs	r4, #13
 8004926:	193b      	adds	r3, r7, r4
 8004928:	2107      	movs	r1, #7
 800492a:	400a      	ands	r2, r1
 800492c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	0f5b      	lsrs	r3, r3, #29
 8004936:	b2da      	uxtb	r2, r3
 8004938:	250c      	movs	r5, #12
 800493a:	197b      	adds	r3, r7, r5
 800493c:	2107      	movs	r1, #7
 800493e:	400a      	ands	r2, r1
 8004940:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004942:	183b      	adds	r3, r7, r0
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	197a      	adds	r2, r7, r5
 8004948:	7812      	ldrb	r2, [r2, #0]
 800494a:	4914      	ldr	r1, [pc, #80]	; (800499c <UARTEx_SetNbDataToProcess+0xb4>)
 800494c:	5c8a      	ldrb	r2, [r1, r2]
 800494e:	435a      	muls	r2, r3
 8004950:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004952:	197b      	adds	r3, r7, r5
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	4a12      	ldr	r2, [pc, #72]	; (80049a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8004958:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800495a:	0019      	movs	r1, r3
 800495c:	f7fb fc5c 	bl	8000218 <__divsi3>
 8004960:	0003      	movs	r3, r0
 8004962:	b299      	uxth	r1, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	226a      	movs	r2, #106	; 0x6a
 8004968:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800496a:	19bb      	adds	r3, r7, r6
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	193a      	adds	r2, r7, r4
 8004970:	7812      	ldrb	r2, [r2, #0]
 8004972:	490a      	ldr	r1, [pc, #40]	; (800499c <UARTEx_SetNbDataToProcess+0xb4>)
 8004974:	5c8a      	ldrb	r2, [r1, r2]
 8004976:	435a      	muls	r2, r3
 8004978:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800497a:	193b      	adds	r3, r7, r4
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	4a08      	ldr	r2, [pc, #32]	; (80049a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8004980:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004982:	0019      	movs	r1, r3
 8004984:	f7fb fc48 	bl	8000218 <__divsi3>
 8004988:	0003      	movs	r3, r0
 800498a:	b299      	uxth	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2268      	movs	r2, #104	; 0x68
 8004990:	5299      	strh	r1, [r3, r2]
}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	46bd      	mov	sp, r7
 8004996:	b005      	add	sp, #20
 8004998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	08004ef0 	.word	0x08004ef0
 80049a0:	08004ef8 	.word	0x08004ef8

080049a4 <nrf_read_reg>:
 */

#include "NRF24L01.h"

uint8_t nrf_read_reg(uint8_t reg)
{
 80049a4:	b590      	push	{r4, r7, lr}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	0002      	movs	r2, r0
 80049ac:	1dfb      	adds	r3, r7, #7
 80049ae:	701a      	strb	r2, [r3, #0]
//    HAL_SPI_Transmit(&hspi1, &command, 1, 100);
//    HAL_SPI_Receive(&hspi1, &status, 1, 100);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
//
//    return status;
	uint8_t command = NRF24_CMD_R_REGISTER | reg;
 80049b0:	240f      	movs	r4, #15
 80049b2:	193b      	adds	r3, r7, r4
 80049b4:	1dfa      	adds	r2, r7, #7
 80049b6:	7812      	ldrb	r2, [r2, #0]
 80049b8:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t data;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 80049ba:	23a0      	movs	r3, #160	; 0xa0
 80049bc:	05db      	lsls	r3, r3, #23
 80049be:	2200      	movs	r2, #0
 80049c0:	2110      	movs	r1, #16
 80049c2:	0018      	movs	r0, r3
 80049c4:	f7fc fd50 	bl	8001468 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 80049c8:	230e      	movs	r3, #14
 80049ca:	18fa      	adds	r2, r7, r3
 80049cc:	1939      	adds	r1, r7, r4
 80049ce:	480e      	ldr	r0, [pc, #56]	; (8004a08 <nrf_read_reg+0x64>)
 80049d0:	23fa      	movs	r3, #250	; 0xfa
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	2301      	movs	r3, #1
 80049d8:	f7fe f896 	bl	8002b08 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&hspi1, &data, 1, 2000);
 80049dc:	23fa      	movs	r3, #250	; 0xfa
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	240d      	movs	r4, #13
 80049e2:	1939      	adds	r1, r7, r4
 80049e4:	4808      	ldr	r0, [pc, #32]	; (8004a08 <nrf_read_reg+0x64>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	f7fd ff3c 	bl	8002864 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 80049ec:	23a0      	movs	r3, #160	; 0xa0
 80049ee:	05db      	lsls	r3, r3, #23
 80049f0:	2201      	movs	r2, #1
 80049f2:	2110      	movs	r1, #16
 80049f4:	0018      	movs	r0, r3
 80049f6:	f7fc fd37 	bl	8001468 <HAL_GPIO_WritePin>
	return data;
 80049fa:	193b      	adds	r3, r7, r4
 80049fc:	781b      	ldrb	r3, [r3, #0]

}
 80049fe:	0018      	movs	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b005      	add	sp, #20
 8004a04:	bd90      	pop	{r4, r7, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	200000a4 	.word	0x200000a4

08004a0c <nrf_read_reg_multi>:

void nrf_read_reg_multi (uint8_t reg, uint8_t *data, int size){
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b089      	sub	sp, #36	; 0x24
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	210f      	movs	r1, #15
 8004a18:	187b      	adds	r3, r7, r1
 8004a1a:	1c02      	adds	r2, r0, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Receive(&hspi1, data, size, 1000);

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
    */

	uint8_t command = NRF24_CMD_R_REGISTER | reg;
 8004a1e:	2413      	movs	r4, #19
 8004a20:	193b      	adds	r3, r7, r4
 8004a22:	187a      	adds	r2, r7, r1
 8004a24:	7812      	ldrb	r2, [r2, #0]
 8004a26:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004a28:	23a0      	movs	r3, #160	; 0xa0
 8004a2a:	05db      	lsls	r3, r3, #23
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	2110      	movs	r1, #16
 8004a30:	0018      	movs	r0, r3
 8004a32:	f7fc fd19 	bl	8001468 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004a36:	23a0      	movs	r3, #160	; 0xa0
 8004a38:	05db      	lsls	r3, r3, #23
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2110      	movs	r1, #16
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f7fc fd12 	bl	8001468 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8004a44:	2312      	movs	r3, #18
 8004a46:	18fa      	adds	r2, r7, r3
 8004a48:	1939      	adds	r1, r7, r4
 8004a4a:	4812      	ldr	r0, [pc, #72]	; (8004a94 <nrf_read_reg_multi+0x88>)
 8004a4c:	23fa      	movs	r3, #250	; 0xfa
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	2301      	movs	r3, #1
 8004a54:	f7fe f858 	bl	8002b08 <HAL_SPI_TransmitReceive>
	for(int i = 0; i<size; i++)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e00b      	b.n	8004a76 <nrf_read_reg_multi+0x6a>
		HAL_SPI_Receive(&hspi1, &data[i], 1, 2000);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	18d1      	adds	r1, r2, r3
 8004a64:	23fa      	movs	r3, #250	; 0xfa
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	480a      	ldr	r0, [pc, #40]	; (8004a94 <nrf_read_reg_multi+0x88>)
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f7fd fefa 	bl	8002864 <HAL_SPI_Receive>
	for(int i = 0; i<size; i++)
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	3301      	adds	r3, #1
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	dbef      	blt.n	8004a5e <nrf_read_reg_multi+0x52>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004a7e:	23a0      	movs	r3, #160	; 0xa0
 8004a80:	05db      	lsls	r3, r3, #23
 8004a82:	2201      	movs	r2, #1
 8004a84:	2110      	movs	r1, #16
 8004a86:	0018      	movs	r0, r3
 8004a88:	f7fc fcee 	bl	8001468 <HAL_GPIO_WritePin>
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b007      	add	sp, #28
 8004a92:	bd90      	pop	{r4, r7, pc}
 8004a94:	200000a4 	.word	0x200000a4

08004a98 <nrf_write_reg>:

void nrf_write_reg(uint8_t reg, uint8_t value)
{
 8004a98:	b5b0      	push	{r4, r5, r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	0002      	movs	r2, r0
 8004aa0:	1dfb      	adds	r3, r7, #7
 8004aa2:	701a      	strb	r2, [r3, #0]
 8004aa4:	1dbb      	adds	r3, r7, #6
 8004aa6:	1c0a      	adds	r2, r1, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
//
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);

	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 8004aaa:	1dfb      	adds	r3, r7, #7
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	240f      	movs	r4, #15
 8004ab6:	193b      	adds	r3, r7, r4
 8004ab8:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t write_val = value;
 8004aba:	250d      	movs	r5, #13
 8004abc:	197b      	adds	r3, r7, r5
 8004abe:	1dba      	adds	r2, r7, #6
 8004ac0:	7812      	ldrb	r2, [r2, #0]
 8004ac2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004ac4:	23a0      	movs	r3, #160	; 0xa0
 8004ac6:	05db      	lsls	r3, r3, #23
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2110      	movs	r1, #16
 8004acc:	0018      	movs	r0, r3
 8004ace:	f7fc fccb 	bl	8001468 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8004ad2:	230e      	movs	r3, #14
 8004ad4:	18fa      	adds	r2, r7, r3
 8004ad6:	1939      	adds	r1, r7, r4
 8004ad8:	480c      	ldr	r0, [pc, #48]	; (8004b0c <nrf_write_reg+0x74>)
 8004ada:	23fa      	movs	r3, #250	; 0xfa
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f7fe f811 	bl	8002b08 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &write_val, 1, 2000);
 8004ae6:	23fa      	movs	r3, #250	; 0xfa
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	1979      	adds	r1, r7, r5
 8004aec:	4807      	ldr	r0, [pc, #28]	; (8004b0c <nrf_write_reg+0x74>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	f7fd fd58 	bl	80025a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004af4:	23a0      	movs	r3, #160	; 0xa0
 8004af6:	05db      	lsls	r3, r3, #23
 8004af8:	2201      	movs	r2, #1
 8004afa:	2110      	movs	r1, #16
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7fc fcb3 	bl	8001468 <HAL_GPIO_WritePin>

}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b004      	add	sp, #16
 8004b08:	bdb0      	pop	{r4, r5, r7, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	200000a4 	.word	0x200000a4

08004b10 <nrf_write_reg_multi>:

void nrf_write_reg_multi(uint8_t reg, uint8_t *data, int size)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b089      	sub	sp, #36	; 0x24
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
 8004b1a:	210f      	movs	r1, #15
 8004b1c:	187b      	adds	r3, r7, r1
 8004b1e:	1c02      	adds	r2, r0, #0
 8004b20:	701a      	strb	r2, [r3, #0]
	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 8004b22:	187b      	adds	r3, r7, r1
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2220      	movs	r2, #32
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	2413      	movs	r4, #19
 8004b2e:	193b      	adds	r3, r7, r4
 8004b30:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	//uint8_t write_val = value;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004b32:	23a0      	movs	r3, #160	; 0xa0
 8004b34:	05db      	lsls	r3, r3, #23
 8004b36:	2200      	movs	r2, #0
 8004b38:	2110      	movs	r1, #16
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f7fc fc94 	bl	8001468 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8004b40:	2312      	movs	r3, #18
 8004b42:	18fa      	adds	r2, r7, r3
 8004b44:	1939      	adds	r1, r7, r4
 8004b46:	4812      	ldr	r0, [pc, #72]	; (8004b90 <nrf_write_reg_multi+0x80>)
 8004b48:	23fa      	movs	r3, #250	; 0xfa
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f7fd ffda 	bl	8002b08 <HAL_SPI_TransmitReceive>
	for (int i = 0; i <size; i++)
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e00b      	b.n	8004b72 <nrf_write_reg_multi+0x62>
		HAL_SPI_Transmit(&hspi1, &data[i], 1, 2000);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	18d1      	adds	r1, r2, r3
 8004b60:	23fa      	movs	r3, #250	; 0xfa
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	480a      	ldr	r0, [pc, #40]	; (8004b90 <nrf_write_reg_multi+0x80>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	f7fd fd1c 	bl	80025a4 <HAL_SPI_Transmit>
	for (int i = 0; i <size; i++)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	dbef      	blt.n	8004b5a <nrf_write_reg_multi+0x4a>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004b7a:	23a0      	movs	r3, #160	; 0xa0
 8004b7c:	05db      	lsls	r3, r3, #23
 8004b7e:	2201      	movs	r2, #1
 8004b80:	2110      	movs	r1, #16
 8004b82:	0018      	movs	r0, r3
 8004b84:	f7fc fc70 	bl	8001468 <HAL_GPIO_WritePin>

}
 8004b88:	46c0      	nop			; (mov r8, r8)
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b007      	add	sp, #28
 8004b8e:	bd90      	pop	{r4, r7, pc}
 8004b90:	200000a4 	.word	0x200000a4

08004b94 <nrf_send_cmd>:

void nrf_send_cmd (uint8_t cmd){
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	0002      	movs	r2, r0
 8004b9c:	1dfb      	adds	r3, r7, #7
 8004b9e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004ba0:	23a0      	movs	r3, #160	; 0xa0
 8004ba2:	05db      	lsls	r3, r3, #23
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2110      	movs	r1, #16
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7fc fc5d 	bl	8001468 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8004bae:	1df9      	adds	r1, r7, #7
 8004bb0:	4807      	ldr	r0, [pc, #28]	; (8004bd0 <nrf_send_cmd+0x3c>)
 8004bb2:	2364      	movs	r3, #100	; 0x64
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f7fd fcf5 	bl	80025a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004bba:	23a0      	movs	r3, #160	; 0xa0
 8004bbc:	05db      	lsls	r3, r3, #23
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2110      	movs	r1, #16
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f7fc fc50 	bl	8001468 <HAL_GPIO_WritePin>
}
 8004bc8:	46c0      	nop			; (mov r8, r8)
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b002      	add	sp, #8
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	200000a4 	.word	0x200000a4

08004bd4 <nrf_init>:

void nrf_init(void){
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8004bd8:	23a0      	movs	r3, #160	; 0xa0
 8004bda:	05db      	lsls	r3, r3, #23
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2108      	movs	r1, #8
 8004be0:	0018      	movs	r0, r3
 8004be2:	f7fc fc41 	bl	8001468 <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_CONFIG, 0);
 8004be6:	2100      	movs	r1, #0
 8004be8:	2000      	movs	r0, #0
 8004bea:	f7ff ff55 	bl	8004a98 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_AA, 0); //Turn off auto ack
 8004bee:	2100      	movs	r1, #0
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	f7ff ff51 	bl	8004a98 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_RXADDR, 0); //Not enabling any data pipe
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	2002      	movs	r0, #2
 8004bfa:	f7ff ff4d 	bl	8004a98 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_AW, 0x03); //5 bytes for TX/RX address
 8004bfe:	2103      	movs	r1, #3
 8004c00:	2003      	movs	r0, #3
 8004c02:	f7ff ff49 	bl	8004a98 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_RETR, 0); //No retransmission
 8004c06:	2100      	movs	r1, #0
 8004c08:	2004      	movs	r0, #4
 8004c0a:	f7ff ff45 	bl	8004a98 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_CH, 0); //
 8004c0e:	2100      	movs	r1, #0
 8004c10:	2005      	movs	r0, #5
 8004c12:	f7ff ff41 	bl	8004a98 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_SETUP, 0x0E); //Power = 0dB, data rate = 2Mbps
 8004c16:	210e      	movs	r1, #14
 8004c18:	2006      	movs	r0, #6
 8004c1a:	f7ff ff3d 	bl	8004a98 <nrf_write_reg>

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8004c1e:	23a0      	movs	r3, #160	; 0xa0
 8004c20:	05db      	lsls	r3, r3, #23
 8004c22:	2200      	movs	r2, #0
 8004c24:	2108      	movs	r1, #8
 8004c26:	0018      	movs	r0, r3
 8004c28:	f7fc fc1e 	bl	8001468 <HAL_GPIO_WritePin>

}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <nrf_rx_mode>:
    return 0;


}

void nrf_rx_mode(uint8_t *addr, uint8_t channel){
 8004c32:	b5b0      	push	{r4, r5, r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	000a      	movs	r2, r1
 8004c3c:	1cfb      	adds	r3, r7, #3
 8004c3e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8004c40:	23a0      	movs	r3, #160	; 0xa0
 8004c42:	05db      	lsls	r3, r3, #23
 8004c44:	2200      	movs	r2, #0
 8004c46:	2108      	movs	r1, #8
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f7fc fc0d 	bl	8001468 <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_RF_CH, channel);
 8004c4e:	1cfb      	adds	r3, r7, #3
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	0019      	movs	r1, r3
 8004c54:	2005      	movs	r0, #5
 8004c56:	f7ff ff1f 	bl	8004a98 <nrf_write_reg>

    uint8_t enrxaddr = nrf_read_reg(NRF24_REG_EN_RXADDR);
 8004c5a:	250f      	movs	r5, #15
 8004c5c:	197c      	adds	r4, r7, r5
 8004c5e:	2002      	movs	r0, #2
 8004c60:	f7ff fea0 	bl	80049a4 <nrf_read_reg>
 8004c64:	0003      	movs	r3, r0
 8004c66:	7023      	strb	r3, [r4, #0]
    enrxaddr = enrxaddr | (1<<1);
 8004c68:	0028      	movs	r0, r5
 8004c6a:	183b      	adds	r3, r7, r0
 8004c6c:	183a      	adds	r2, r7, r0
 8004c6e:	7812      	ldrb	r2, [r2, #0]
 8004c70:	2102      	movs	r1, #2
 8004c72:	430a      	orrs	r2, r1
 8004c74:	701a      	strb	r2, [r3, #0]
    nrf_write_reg(NRF24_REG_EN_RXADDR, enrxaddr); //select data pipe 1
 8004c76:	183b      	adds	r3, r7, r0
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	0019      	movs	r1, r3
 8004c7c:	2002      	movs	r0, #2
 8004c7e:	f7ff ff0b 	bl	8004a98 <nrf_write_reg>
    nrf_write_reg_multi(NRF24_REG_RX_ADDR_P1, addr, 5); //Write the address
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2205      	movs	r2, #5
 8004c86:	0019      	movs	r1, r3
 8004c88:	200b      	movs	r0, #11
 8004c8a:	f7ff ff41 	bl	8004b10 <nrf_write_reg_multi>

    nrf_write_reg(NRF24_REG_RX_PW_P1, 32); //Set to 32 bit payload
 8004c8e:	2120      	movs	r1, #32
 8004c90:	2012      	movs	r0, #18
 8004c92:	f7ff ff01 	bl	8004a98 <nrf_write_reg>

    uint8_t config = nrf_read_reg(NRF24_REG_CONFIG);
 8004c96:	250e      	movs	r5, #14
 8004c98:	197c      	adds	r4, r7, r5
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f7ff fe82 	bl	80049a4 <nrf_read_reg>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	7023      	strb	r3, [r4, #0]
    config = config | (1<<1) | (1<<0);
 8004ca4:	0028      	movs	r0, r5
 8004ca6:	183b      	adds	r3, r7, r0
 8004ca8:	183a      	adds	r2, r7, r0
 8004caa:	7812      	ldrb	r2, [r2, #0]
 8004cac:	2103      	movs	r1, #3
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	701a      	strb	r2, [r3, #0]
    nrf_write_reg(NRF24_REG_CONFIG, config);
 8004cb2:	183b      	adds	r3, r7, r0
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	0019      	movs	r1, r3
 8004cb8:	2000      	movs	r0, #0
 8004cba:	f7ff feed 	bl	8004a98 <nrf_write_reg>

    //testing that I added
    uint8_t test = 0;
 8004cbe:	210d      	movs	r1, #13
 8004cc0:	187b      	adds	r3, r7, r1
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]
    test = nrf_read_reg(NRF24_REG_RF_SETUP);
 8004cc6:	187c      	adds	r4, r7, r1
 8004cc8:	2006      	movs	r0, #6
 8004cca:	f7ff fe6b 	bl	80049a4 <nrf_read_reg>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	7023      	strb	r3, [r4, #0]
    uint8_t test2[5] = {0};
 8004cd2:	2108      	movs	r1, #8
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	711a      	strb	r2, [r3, #4]
    nrf_read_reg_multi(NRF24_REG_RX_ADDR_P1, test2, 5);
 8004cde:	187b      	adds	r3, r7, r1
 8004ce0:	2205      	movs	r2, #5
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	200b      	movs	r0, #11
 8004ce6:	f7ff fe91 	bl	8004a0c <nrf_read_reg_multi>

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8004cea:	23a0      	movs	r3, #160	; 0xa0
 8004cec:	05db      	lsls	r3, r3, #23
 8004cee:	2201      	movs	r2, #1
 8004cf0:	2108      	movs	r1, #8
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f7fc fbb8 	bl	8001468 <HAL_GPIO_WritePin>
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b004      	add	sp, #16
 8004cfe:	bdb0      	pop	{r4, r5, r7, pc}

08004d00 <is_data_availible>:

uint8_t is_data_availible(int pipenum){
 8004d00:	b5b0      	push	{r4, r5, r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf_read_reg(NRF24_REG_STATUS);
 8004d08:	250f      	movs	r5, #15
 8004d0a:	197c      	adds	r4, r7, r5
 8004d0c:	2007      	movs	r0, #7
 8004d0e:	f7ff fe49 	bl	80049a4 <nrf_read_reg>
 8004d12:	0003      	movs	r3, r0
 8004d14:	7023      	strb	r3, [r4, #0]

	if((status & (1<<6)) && (status & (pipenum<<1))){
 8004d16:	0029      	movs	r1, r5
 8004d18:	187b      	adds	r3, r7, r1
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2240      	movs	r2, #64	; 0x40
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d00b      	beq.n	8004d3a <is_data_availible+0x3a>
 8004d22:	187b      	adds	r3, r7, r1
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	0052      	lsls	r2, r2, #1
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d005      	beq.n	8004d3a <is_data_availible+0x3a>
		nrf_write_reg(NRF24_REG_STATUS,(1<<6));
 8004d2e:	2140      	movs	r1, #64	; 0x40
 8004d30:	2007      	movs	r0, #7
 8004d32:	f7ff feb1 	bl	8004a98 <nrf_write_reg>

		return 1;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <is_data_availible+0x3c>
	}
	return 0;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b004      	add	sp, #16
 8004d42:	bdb0      	pop	{r4, r5, r7, pc}

08004d44 <nrf_receive>:

void nrf_receive(uint8_t *data){
 8004d44:	b590      	push	{r4, r7, lr}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 8004d4c:	240f      	movs	r4, #15
 8004d4e:	193b      	adds	r3, r7, r4
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004d54:	23a0      	movs	r3, #160	; 0xa0
 8004d56:	05db      	lsls	r3, r3, #23
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2110      	movs	r1, #16
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f7fc fb83 	bl	8001468 <HAL_GPIO_WritePin>

    //TX command
    cmd = NRF24_CMD_R_RX_PAYLOAD;
 8004d62:	193b      	adds	r3, r7, r4
 8004d64:	2261      	movs	r2, #97	; 0x61
 8004d66:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8004d68:	1939      	adds	r1, r7, r4
 8004d6a:	4811      	ldr	r0, [pc, #68]	; (8004db0 <nrf_receive+0x6c>)
 8004d6c:	2364      	movs	r3, #100	; 0x64
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f7fd fc18 	bl	80025a4 <HAL_SPI_Transmit>

    //TX data send
    HAL_SPI_Receive(&hspi1, data, 32, 1000);
 8004d74:	23fa      	movs	r3, #250	; 0xfa
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	480d      	ldr	r0, [pc, #52]	; (8004db0 <nrf_receive+0x6c>)
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f7fd fd71 	bl	8002864 <HAL_SPI_Receive>


    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004d82:	23a0      	movs	r3, #160	; 0xa0
 8004d84:	05db      	lsls	r3, r3, #23
 8004d86:	2201      	movs	r2, #1
 8004d88:	2110      	movs	r1, #16
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f7fc fb6c 	bl	8001468 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8004d90:	2001      	movs	r0, #1
 8004d92:	f7fc f92d 	bl	8000ff0 <HAL_Delay>

    cmd = NRF24_CMD_FLUSH_RX;
 8004d96:	193b      	adds	r3, r7, r4
 8004d98:	22e2      	movs	r2, #226	; 0xe2
 8004d9a:	701a      	strb	r2, [r3, #0]
    nrf_send_cmd(cmd);
 8004d9c:	193b      	adds	r3, r7, r4
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	0018      	movs	r0, r3
 8004da2:	f7ff fef7 	bl	8004b94 <nrf_send_cmd>


}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b005      	add	sp, #20
 8004dac:	bd90      	pop	{r4, r7, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	200000a4 	.word	0x200000a4

08004db4 <memset>:
 8004db4:	0003      	movs	r3, r0
 8004db6:	1882      	adds	r2, r0, r2
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d100      	bne.n	8004dbe <memset+0xa>
 8004dbc:	4770      	bx	lr
 8004dbe:	7019      	strb	r1, [r3, #0]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	e7f9      	b.n	8004db8 <memset+0x4>

08004dc4 <__libc_init_array>:
 8004dc4:	b570      	push	{r4, r5, r6, lr}
 8004dc6:	2600      	movs	r6, #0
 8004dc8:	4c0c      	ldr	r4, [pc, #48]	; (8004dfc <__libc_init_array+0x38>)
 8004dca:	4d0d      	ldr	r5, [pc, #52]	; (8004e00 <__libc_init_array+0x3c>)
 8004dcc:	1b64      	subs	r4, r4, r5
 8004dce:	10a4      	asrs	r4, r4, #2
 8004dd0:	42a6      	cmp	r6, r4
 8004dd2:	d109      	bne.n	8004de8 <__libc_init_array+0x24>
 8004dd4:	2600      	movs	r6, #0
 8004dd6:	f000 f819 	bl	8004e0c <_init>
 8004dda:	4c0a      	ldr	r4, [pc, #40]	; (8004e04 <__libc_init_array+0x40>)
 8004ddc:	4d0a      	ldr	r5, [pc, #40]	; (8004e08 <__libc_init_array+0x44>)
 8004dde:	1b64      	subs	r4, r4, r5
 8004de0:	10a4      	asrs	r4, r4, #2
 8004de2:	42a6      	cmp	r6, r4
 8004de4:	d105      	bne.n	8004df2 <__libc_init_array+0x2e>
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
 8004de8:	00b3      	lsls	r3, r6, #2
 8004dea:	58eb      	ldr	r3, [r5, r3]
 8004dec:	4798      	blx	r3
 8004dee:	3601      	adds	r6, #1
 8004df0:	e7ee      	b.n	8004dd0 <__libc_init_array+0xc>
 8004df2:	00b3      	lsls	r3, r6, #2
 8004df4:	58eb      	ldr	r3, [r5, r3]
 8004df6:	4798      	blx	r3
 8004df8:	3601      	adds	r6, #1
 8004dfa:	e7f2      	b.n	8004de2 <__libc_init_array+0x1e>
 8004dfc:	08004f08 	.word	0x08004f08
 8004e00:	08004f08 	.word	0x08004f08
 8004e04:	08004f0c 	.word	0x08004f0c
 8004e08:	08004f08 	.word	0x08004f08

08004e0c <_init>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr

08004e18 <_fini>:
 8004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1e:	bc08      	pop	{r3}
 8004e20:	469e      	mov	lr, r3
 8004e22:	4770      	bx	lr
