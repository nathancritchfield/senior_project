
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005310  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a8  080056a8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056b0  080056b0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080056b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000014  080056cc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080056cc  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000164a1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032e7  00000000  00000000  00036520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  00039808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f94  00000000  00000000  0003abd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187ff  00000000  00000000  0003bb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b147  00000000  00000000  0005436b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098045  00000000  00000000  0006f4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047a0  00000000  00000000  001074f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0010bc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080053b4 	.word	0x080053b4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	080053b4 	.word	0x080053b4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	; 0x24
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	240c      	movs	r4, #12
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f004 fe8b 	bl	8005348 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b44      	ldr	r3, [pc, #272]	; (8000744 <MX_GPIO_Init+0x128>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000636:	4b43      	ldr	r3, [pc, #268]	; (8000744 <MX_GPIO_Init+0x128>)
 8000638:	2102      	movs	r1, #2
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
 800063e:	4b41      	ldr	r3, [pc, #260]	; (8000744 <MX_GPIO_Init+0x128>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000642:	2202      	movs	r2, #2
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <MX_GPIO_Init+0x128>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064e:	4b3d      	ldr	r3, [pc, #244]	; (8000744 <MX_GPIO_Init+0x128>)
 8000650:	2104      	movs	r1, #4
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
 8000656:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <MX_GPIO_Init+0x128>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065a:	2204      	movs	r2, #4
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <MX_GPIO_Init+0x128>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000666:	4b37      	ldr	r3, [pc, #220]	; (8000744 <MX_GPIO_Init+0x128>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
 800066e:	4b35      	ldr	r3, [pc, #212]	; (8000744 <MX_GPIO_Init+0x128>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	4832      	ldr	r0, [pc, #200]	; (8000748 <MX_GPIO_Init+0x12c>)
 8000680:	2200      	movs	r2, #0
 8000682:	0019      	movs	r1, r3
 8000684:	f000 ff1c 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SK6812_OUT_GPIO_Port, SK6812_OUT_Pin, GPIO_PIN_RESET);
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	482f      	ldr	r0, [pc, #188]	; (800074c <MX_GPIO_Init+0x130>)
 800068e:	2200      	movs	r2, #0
 8000690:	0019      	movs	r1, r3
 8000692:	f000 ff15 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GEN_OUT_Pin|NRF_CE_Pin|SPI1_CSN_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 8000696:	23a0      	movs	r3, #160	; 0xa0
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2200      	movs	r2, #0
 800069c:	2199      	movs	r1, #153	; 0x99
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 ff0e 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WP_Pin;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2201      	movs	r2, #1
 80006b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <MX_GPIO_Init+0x12c>)
 80006c2:	0019      	movs	r1, r3
 80006c4:	0010      	movs	r0, r2
 80006c6:	f000 fd97 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SK6812_OUT_Pin;
 80006ca:	0021      	movs	r1, r4
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0212      	lsls	r2, r2, #8
 80006d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	000c      	movs	r4, r1
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2201      	movs	r2, #1
 80006da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SK6812_OUT_GPIO_Port, &GPIO_InitStruct);
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <MX_GPIO_Init+0x130>)
 80006ec:	0019      	movs	r1, r3
 80006ee:	0010      	movs	r0, r2
 80006f0:	f000 fd82 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = GEN_OUT_Pin|NRF_CE_Pin|SPI1_CSN_Pin|STATUS_LED_Pin;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2299      	movs	r2, #153	; 0x99
 80006f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2201      	movs	r2, #1
 80006fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	193a      	adds	r2, r7, r4
 800070e:	23a0      	movs	r3, #160	; 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fd6f 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2220      	movs	r2, #32
 800071e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 800072c:	193a      	adds	r2, r7, r4
 800072e:	23a0      	movs	r3, #160	; 0xa0
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fd5f 	bl	80011f8 <HAL_GPIO_Init>

}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b009      	add	sp, #36	; 0x24
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40021000 	.word	0x40021000
 8000748:	50000400 	.word	0x50000400
 800074c:	50000800 	.word	0x50000800

08000750 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_I2C2_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_I2C2_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <MX_I2C2_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000768:	2201      	movs	r2, #1
 800076a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_I2C2_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C2_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2C2_Init+0x74>)
 800078c:	0018      	movs	r0, r3
 800078e:	f000 feb5 	bl	80014fc <HAL_I2C_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000796:	f000 f909 	bl	80009ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2C2_Init+0x74>)
 800079c:	2100      	movs	r1, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 ff52 	bl	8001648 <HAL_I2CEx_ConfigAnalogFilter>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007a8:	f000 f900 	bl	80009ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <MX_I2C2_Init+0x74>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 ff95 	bl	80016e0 <HAL_I2CEx_ConfigDigitalFilter>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 f8f7 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000030 	.word	0x20000030
 80007c8:	40005800 	.word	0x40005800
 80007cc:	00303d5b 	.word	0x00303d5b

080007d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b08b      	sub	sp, #44	; 0x2c
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	2414      	movs	r4, #20
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	0018      	movs	r0, r3
 80007de:	2314      	movs	r3, #20
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f004 fdb0 	bl	8005348 <memset>
  if(i2cHandle->Instance==I2C2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <HAL_I2C_MspInit+0x90>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d131      	bne.n	8000856 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_I2C_MspInit+0x94>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_I2C_MspInit+0x94>)
 80007f8:	2101      	movs	r1, #1
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_I2C_MspInit+0x94>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000802:	2201      	movs	r2, #1
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	22c0      	movs	r2, #192	; 0xc0
 800080e:	0152      	lsls	r2, r2, #5
 8000810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000812:	0021      	movs	r1, r4
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2212      	movs	r2, #18
 8000818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2201      	movs	r2, #1
 800081e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2203      	movs	r2, #3
 8000824:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2206      	movs	r2, #6
 800082a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	187a      	adds	r2, r7, r1
 800082e:	23a0      	movs	r3, #160	; 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fcdf 	bl	80011f8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_I2C_MspInit+0x94>)
 800083c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_I2C_MspInit+0x94>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	03c9      	lsls	r1, r1, #15
 8000844:	430a      	orrs	r2, r1
 8000846:	63da      	str	r2, [r3, #60]	; 0x3c
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_I2C_MspInit+0x94>)
 800084a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	03db      	lsls	r3, r3, #15
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b00b      	add	sp, #44	; 0x2c
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40005800 	.word	0x40005800
 8000864:	40021000 	.word	0x40021000

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b0c2      	sub	sp, #264	; 0x108
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f000 fb65 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f853 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f7ff fed1 	bl	800061c <MX_GPIO_Init>
  MX_I2C2_Init();
 800087a:	f7ff ff69 	bl	8000750 <MX_I2C2_Init>
  MX_SPI1_Init();
 800087e:	f000 f89b 	bl	80009b8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000882:	f000 f961 	bl	8000b48 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000886:	f000 fa7f 	bl	8000d88 <MX_USART1_UART_Init>
//	read_reg_multi(0x10, data, 5);
//	if(data[0] == 0xE7)
//	  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET);


  nrf_init();
 800088a:	f004 fb13 	bl	8004eb4 <nrf_init>
  nrf_rx_mode(RX_addr, 10);
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <main+0xa8>)
 8000890:	210a      	movs	r1, #10
 8000892:	0018      	movs	r0, r3
 8000894:	f004 fb3d 	bl	8004f12 <nrf_rx_mode>
//  HAL_I2C_Master_Receive(&hi2c2, 0xA0, rx_buf, 2, HAL_MAX_DELAY);
//
//  tx_buf[2] = rx_buf[1];
//  tx_buf[1] = rx_buf[0];

  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET);
 8000898:	23a0      	movs	r3, #160	; 0xa0
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	2201      	movs	r2, #1
 800089e:	2180      	movs	r1, #128	; 0x80
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 fe0d 	bl	80014c0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80008a6:	23fa      	movs	r3, #250	; 0xfa
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fbcc 	bl	8001048 <HAL_Delay>


  while (1)
  {

	  if(is_data_availible(1) == 1){
 80008b0:	2001      	movs	r0, #1
 80008b2:	f004 fb7f 	bl	8004fb4 <is_data_availible>
 80008b6:	0003      	movs	r3, r0
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d103      	bne.n	80008c4 <main+0x5c>
		  nrf_receive(RX_data);
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <main+0xac>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f004 fb9a 	bl	8004ff8 <nrf_receive>
//	  tx_buf[2]++;


	  uint8_t payload[1];
	  //Set communication type to get firmware
	  payload[0] = 0;
 80008c4:	1d7b      	adds	r3, r7, #5
 80008c6:	33ff      	adds	r3, #255	; 0xff
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
	  VESCSendMessage(payload, 1);
 80008cc:	1d7b      	adds	r3, r7, #5
 80008ce:	33ff      	adds	r3, #255	; 0xff
 80008d0:	2101      	movs	r1, #1
 80008d2:	0018      	movs	r0, r3
 80008d4:	f004 fbfe 	bl	80050d4 <VESCSendMessage>


	  /********Receiving the payload**********/
	  uint8_t payloadReceived[256] = {0};
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <main+0xb0>)
 80008da:	2284      	movs	r2, #132	; 0x84
 80008dc:	0052      	lsls	r2, r2, #1
 80008de:	189b      	adds	r3, r3, r2
 80008e0:	19db      	adds	r3, r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	3304      	adds	r3, #4
 80008e8:	22fc      	movs	r2, #252	; 0xfc
 80008ea:	2100      	movs	r1, #0
 80008ec:	0018      	movs	r0, r3
 80008ee:	f004 fd2b 	bl	8005348 <memset>
	  uint8_t payloadLen = VESCReceiveMessage(payloadReceived);
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	0018      	movs	r0, r3
 80008f6:	f004 fc95 	bl	8005224 <VESCReceiveMessage>
 80008fa:	0002      	movs	r2, r0
 80008fc:	2308      	movs	r3, #8
 80008fe:	33ff      	adds	r3, #255	; 0xff
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(1000);
 8000904:	23fa      	movs	r3, #250	; 0xfa
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fb9d 	bl	8001048 <HAL_Delay>
  {
 800090e:	e7cf      	b.n	80008b0 <main+0x48>
 8000910:	20000000 	.word	0x20000000
 8000914:	20000084 	.word	0x20000084
 8000918:	fffffefc 	.word	0xfffffefc

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b093      	sub	sp, #76	; 0x4c
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	2410      	movs	r4, #16
 8000924:	193b      	adds	r3, r7, r4
 8000926:	0018      	movs	r0, r3
 8000928:	2338      	movs	r3, #56	; 0x38
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f004 fd0b 	bl	8005348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000932:	003b      	movs	r3, r7
 8000934:	0018      	movs	r0, r3
 8000936:	2310      	movs	r3, #16
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f004 fd04 	bl	8005348 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	0018      	movs	r0, r3
 8000946:	f000 ff17 	bl	8001778 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2202      	movs	r2, #2
 800094e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	0052      	lsls	r2, r2, #1
 8000956:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2240      	movs	r2, #64	; 0x40
 8000962:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	193b      	adds	r3, r7, r4
 800096c:	0018      	movs	r0, r3
 800096e:	f000 ff4f 	bl	8001810 <HAL_RCC_OscConfig>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000976:	f000 f819 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097a:	003b      	movs	r3, r7
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000980:	003b      	movs	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	003b      	movs	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098c:	003b      	movs	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000992:	003b      	movs	r3, r7
 8000994:	2100      	movs	r1, #0
 8000996:	0018      	movs	r0, r3
 8000998:	f001 fa54 	bl	8001e44 <HAL_RCC_ClockConfig>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80009a0:	f000 f804 	bl	80009ac <Error_Handler>
  }
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b013      	add	sp, #76	; 0x4c
 80009aa:	bd90      	pop	{r4, r7, pc}

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_SPI1_Init+0x74>)
 80009be:	4a1c      	ldr	r2, [pc, #112]	; (8000a30 <MX_SPI1_Init+0x78>)
 80009c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_SPI1_Init+0x74>)
 80009c4:	2282      	movs	r2, #130	; 0x82
 80009c6:	0052      	lsls	r2, r2, #1
 80009c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_SPI1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_SPI1_Init+0x74>)
 80009d2:	22e0      	movs	r2, #224	; 0xe0
 80009d4:	00d2      	lsls	r2, r2, #3
 80009d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_SPI1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_SPI1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_SPI1_Init+0x74>)
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	0092      	lsls	r2, r2, #2
 80009ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_SPI1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_SPI1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_SPI1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_SPI1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_SPI1_Init+0x74>)
 8000a06:	2207      	movs	r2, #7
 8000a08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_SPI1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_SPI1_Init+0x74>)
 8000a12:	2208      	movs	r2, #8
 8000a14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <MX_SPI1_Init+0x74>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f001 fd37 	bl	800248c <HAL_SPI_Init>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a22:	f7ff ffc3 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200000a4 	.word	0x200000a4
 8000a30:	40013000 	.word	0x40013000

08000a34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	2414      	movs	r4, #20
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	0018      	movs	r0, r3
 8000a42:	2314      	movs	r3, #20
 8000a44:	001a      	movs	r2, r3
 8000a46:	2100      	movs	r1, #0
 8000a48:	f004 fc7e 	bl	8005348 <memset>
  if(spiHandle->Instance==SPI1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <HAL_SPI_MspInit+0x8c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d130      	bne.n	8000ab8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <HAL_SPI_MspInit+0x90>)
 8000a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <HAL_SPI_MspInit+0x90>)
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	0149      	lsls	r1, r1, #5
 8000a60:	430a      	orrs	r2, r1
 8000a62:	641a      	str	r2, [r3, #64]	; 0x40
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <HAL_SPI_MspInit+0x90>)
 8000a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	015b      	lsls	r3, r3, #5
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <HAL_SPI_MspInit+0x90>)
 8000a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <HAL_SPI_MspInit+0x90>)
 8000a78:	2101      	movs	r1, #1
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_SPI_MspInit+0x90>)
 8000a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a82:	2201      	movs	r2, #1
 8000a84:	4013      	ands	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8000a8a:	0021      	movs	r1, r4
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2246      	movs	r2, #70	; 0x46
 8000a90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2202      	movs	r2, #2
 8000a96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	187a      	adds	r2, r7, r1
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fba0 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b00b      	add	sp, #44	; 0x2c
 8000abe:	bd90      	pop	{r4, r7, pc}
 8000ac0:	40013000 	.word	0x40013000
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	641a      	str	r2, [r3, #64]	; 0x40
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x44>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_MspInit+0x44>)
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	0549      	lsls	r1, r1, #21
 8000af0:	430a      	orrs	r2, r1
 8000af2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_MspInit+0x44>)
 8000af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	055b      	lsls	r3, r3, #21
 8000afc:	4013      	ands	r3, r2
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b002      	add	sp, #8
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	40021000 	.word	0x40021000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 fa6c 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b098      	sub	sp, #96	; 0x60
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4e:	2354      	movs	r3, #84	; 0x54
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	0018      	movs	r0, r3
 8000b54:	230c      	movs	r3, #12
 8000b56:	001a      	movs	r2, r3
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f004 fbf5 	bl	8005348 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5e:	2338      	movs	r3, #56	; 0x38
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	0018      	movs	r0, r3
 8000b64:	231c      	movs	r3, #28
 8000b66:	001a      	movs	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f004 fbed 	bl	8005348 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	0018      	movs	r0, r3
 8000b72:	2334      	movs	r3, #52	; 0x34
 8000b74:	001a      	movs	r2, r3
 8000b76:	2100      	movs	r1, #0
 8000b78:	f004 fbe6 	bl	8005348 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b7c:	4b45      	ldr	r3, [pc, #276]	; (8000c94 <MX_TIM1_Init+0x14c>)
 8000b7e:	4a46      	ldr	r2, [pc, #280]	; (8000c98 <MX_TIM1_Init+0x150>)
 8000b80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b82:	4b44      	ldr	r3, [pc, #272]	; (8000c94 <MX_TIM1_Init+0x14c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <MX_TIM1_Init+0x14c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b8e:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <MX_TIM1_Init+0x14c>)
 8000b90:	4a42      	ldr	r2, [pc, #264]	; (8000c9c <MX_TIM1_Init+0x154>)
 8000b92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b94:	4b3f      	ldr	r3, [pc, #252]	; (8000c94 <MX_TIM1_Init+0x14c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b9a:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <MX_TIM1_Init+0x14c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba0:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <MX_TIM1_Init+0x14c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <MX_TIM1_Init+0x14c>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f002 fb8f 	bl	80032cc <HAL_TIM_PWM_Init>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000bb2:	f7ff fefb 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb6:	2154      	movs	r1, #84	; 0x54
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bca:	187a      	adds	r2, r7, r1
 8000bcc:	4b31      	ldr	r3, [pc, #196]	; (8000c94 <MX_TIM1_Init+0x14c>)
 8000bce:	0011      	movs	r1, r2
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f002 fff3 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 8000bd6:	1e03      	subs	r3, r0, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bda:	f7ff fee7 	bl	80009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bde:	2138      	movs	r1, #56	; 0x38
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2260      	movs	r2, #96	; 0x60
 8000be4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c0a:	1879      	adds	r1, r7, r1
 8000c0c:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <MX_TIM1_Init+0x14c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	0018      	movs	r0, r3
 8000c12:	f002 fbb3 	bl	800337c <HAL_TIM_PWM_ConfigChannel>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000c1a:	f7ff fec7 	bl	80009ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2280      	movs	r2, #128	; 0x80
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	0492      	lsls	r2, r2, #18
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c70:	1d3a      	adds	r2, r7, #4
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_TIM1_Init+0x14c>)
 8000c74:	0011      	movs	r1, r2
 8000c76:	0018      	movs	r0, r3
 8000c78:	f003 f808 	bl	8003c8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c7c:	1e03      	subs	r3, r0, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000c80:	f7ff fe94 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <MX_TIM1_Init+0x14c>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 f840 	bl	8000d0c <HAL_TIM_MspPostInit>

}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b018      	add	sp, #96	; 0x60
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000108 	.word	0x20000108
 8000c98:	40012c00 	.word	0x40012c00
 8000c9c:	0000ffff 	.word	0x0000ffff

08000ca0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b08f      	sub	sp, #60	; 0x3c
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	2410      	movs	r4, #16
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	0018      	movs	r0, r3
 8000cae:	2328      	movs	r3, #40	; 0x28
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f004 fb48 	bl	8005348 <memset>
  if(tim_pwmHandle->Instance==TIM1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <HAL_TIM_PWM_MspInit+0x64>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d11c      	bne.n	8000cfc <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	0392      	lsls	r2, r2, #14
 8000cc8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f001 fa60 	bl	8002198 <HAL_RCCEx_PeriphCLKConfig>
 8000cd8:	1e03      	subs	r3, r0, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000cdc:	f7ff fe66 	bl	80009ac <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_TIM_PWM_MspInit+0x68>)
 8000ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_TIM_PWM_MspInit+0x68>)
 8000ce6:	2180      	movs	r1, #128	; 0x80
 8000ce8:	0109      	lsls	r1, r1, #4
 8000cea:	430a      	orrs	r2, r1
 8000cec:	641a      	str	r2, [r3, #64]	; 0x40
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_TIM_PWM_MspInit+0x68>)
 8000cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b00f      	add	sp, #60	; 0x3c
 8000d02:	bd90      	pop	{r4, r7, pc}
 8000d04:	40012c00 	.word	0x40012c00
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	240c      	movs	r4, #12
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	0018      	movs	r0, r3
 8000d1a:	2314      	movs	r3, #20
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	2100      	movs	r1, #0
 8000d20:	f004 fb12 	bl	8005348 <memset>
  if(timHandle->Instance==TIM1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <HAL_TIM_MspPostInit+0x74>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d123      	bne.n	8000d76 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_TIM_MspPostInit+0x78>)
 8000d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_TIM_MspPostInit+0x78>)
 8000d34:	2101      	movs	r1, #1
 8000d36:	430a      	orrs	r2, r1
 8000d38:	635a      	str	r2, [r3, #52]	; 0x34
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_TIM_MspPostInit+0x78>)
 8000d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	0052      	lsls	r2, r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	0021      	movs	r1, r4
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2202      	movs	r2, #2
 8000d54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	2202      	movs	r2, #2
 8000d66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d68:	187a      	adds	r2, r7, r1
 8000d6a:	23a0      	movs	r3, #160	; 0xa0
 8000d6c:	05db      	lsls	r3, r3, #23
 8000d6e:	0011      	movs	r1, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f000 fa41 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b009      	add	sp, #36	; 0x24
 8000d7c:	bd90      	pop	{r4, r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	40012c00 	.word	0x40012c00
 8000d84:	40021000 	.word	0x40021000

08000d88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000d8e:	4a24      	ldr	r2, [pc, #144]	; (8000e20 <MX_USART1_UART_Init+0x98>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000d94:	2296      	movs	r2, #150	; 0x96
 8000d96:	01d2      	lsls	r2, r2, #7
 8000d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f002 fff6 	bl	8003dc4 <HAL_UART_Init>
 8000dd8:	1e03      	subs	r3, r0, #0
 8000dda:	d001      	beq.n	8000de0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ddc:	f7ff fde6 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	0018      	movs	r0, r3
 8000de6:	f003 feb3 	bl	8004b50 <HAL_UARTEx_SetTxFifoThreshold>
 8000dea:	1e03      	subs	r3, r0, #0
 8000dec:	d001      	beq.n	8000df2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dee:	f7ff fddd 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000df4:	2100      	movs	r1, #0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f003 feea 	bl	8004bd0 <HAL_UARTEx_SetRxFifoThreshold>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e00:	f7ff fdd4 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <MX_USART1_UART_Init+0x94>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f003 fe68 	bl	8004adc <HAL_UARTEx_DisableFifoMode>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e10:	f7ff fdcc 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	20000154 	.word	0x20000154
 8000e20:	40013800 	.word	0x40013800

08000e24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b095      	sub	sp, #84	; 0x54
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	233c      	movs	r3, #60	; 0x3c
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	0018      	movs	r0, r3
 8000e32:	2314      	movs	r3, #20
 8000e34:	001a      	movs	r2, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	f004 fa86 	bl	8005348 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e3c:	2414      	movs	r4, #20
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	0018      	movs	r0, r3
 8000e42:	2328      	movs	r3, #40	; 0x28
 8000e44:	001a      	movs	r2, r3
 8000e46:	2100      	movs	r1, #0
 8000e48:	f004 fa7e 	bl	8005348 <memset>
  if(uartHandle->Instance==USART1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a22      	ldr	r2, [pc, #136]	; (8000edc <HAL_UART_MspInit+0xb8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d13d      	bne.n	8000ed2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	0018      	movs	r0, r3
 8000e66:	f001 f997 	bl	8002198 <HAL_RCCEx_PeriphCLKConfig>
 8000e6a:	1e03      	subs	r3, r0, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e6e:	f7ff fd9d 	bl	80009ac <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <HAL_UART_MspInit+0xbc>)
 8000e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <HAL_UART_MspInit+0xbc>)
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	01c9      	lsls	r1, r1, #7
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_UART_MspInit+0xbc>)
 8000e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	01db      	lsls	r3, r3, #7
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_UART_MspInit+0xbc>)
 8000e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <HAL_UART_MspInit+0xbc>)
 8000e94:	2102      	movs	r1, #2
 8000e96:	430a      	orrs	r2, r1
 8000e98:	635a      	str	r2, [r3, #52]	; 0x34
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_UART_MspInit+0xbc>)
 8000e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000ea6:	213c      	movs	r1, #60	; 0x3c
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	22c0      	movs	r2, #192	; 0xc0
 8000eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_UART_MspInit+0xc0>)
 8000eca:	0019      	movs	r1, r3
 8000ecc:	0010      	movs	r0, r2
 8000ece:	f000 f993 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b015      	add	sp, #84	; 0x54
 8000ed8:	bd90      	pop	{r4, r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	40013800 	.word	0x40013800
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	50000400 	.word	0x50000400

08000ee8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eec:	f7ff fe27 	bl	8000b3e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef2:	490d      	ldr	r1, [pc, #52]	; (8000f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <LoopForever+0xe>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f08:	4c0a      	ldr	r4, [pc, #40]	; (8000f34 <LoopForever+0x16>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f16:	f004 fa1f 	bl	8005358 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f1a:	f7ff fca5 	bl	8000868 <main>

08000f1e <LoopForever>:

LoopForever:
  b LoopForever
 8000f1e:	e7fe      	b.n	8000f1e <LoopForever>
  ldr   r0, =_estack
 8000f20:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f2c:	080056b8 	.word	0x080056b8
  ldr r2, =_sbss
 8000f30:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f34:	200001ec 	.word	0x200001ec

08000f38 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_IRQHandler>
	...

08000f3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x3c>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_Init+0x3c>)
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	0049      	lsls	r1, r1, #1
 8000f52:	430a      	orrs	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f56:	2003      	movs	r0, #3
 8000f58:	f000 f810 	bl	8000f7c <HAL_InitTick>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
 8000f66:	e001      	b.n	8000f6c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f68:	f7ff fdae 	bl	8000ac8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	781b      	ldrb	r3, [r3, #0]
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f84:	230f      	movs	r3, #15
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_InitTick+0x88>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d02b      	beq.n	8000fec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_InitTick+0x8c>)
 8000f96:	681c      	ldr	r4, [r3, #0]
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_InitTick+0x88>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	0019      	movs	r1, r3
 8000f9e:	23fa      	movs	r3, #250	; 0xfa
 8000fa0:	0098      	lsls	r0, r3, #2
 8000fa2:	f7ff f8af 	bl	8000104 <__udivsi3>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	0019      	movs	r1, r3
 8000faa:	0020      	movs	r0, r4
 8000fac:	f7ff f8aa 	bl	8000104 <__udivsi3>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 f913 	bl	80011de <HAL_SYSTICK_Config>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d112      	bne.n	8000fe2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d80a      	bhi.n	8000fd8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	425b      	negs	r3, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 f8f2 	bl	80011b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_InitTick+0x90>)
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	e00d      	b.n	8000ff4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fd8:	230f      	movs	r3, #15
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	e008      	b.n	8000ff4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	e003      	b.n	8000ff4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	781b      	ldrb	r3, [r3, #0]
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b005      	add	sp, #20
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	20000010 	.word	0x20000010
 8001008:	20000008 	.word	0x20000008
 800100c:	2000000c 	.word	0x2000000c

08001010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_IncTick+0x1c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	001a      	movs	r2, r3
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x20>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	18d2      	adds	r2, r2, r3
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_IncTick+0x20>)
 8001022:	601a      	str	r2, [r3, #0]
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	20000010 	.word	0x20000010
 8001030:	200001e8 	.word	0x200001e8

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b02      	ldr	r3, [pc, #8]	; (8001044 <HAL_GetTick+0x10>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	200001e8 	.word	0x200001e8

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff fff0 	bl	8001034 <HAL_GetTick>
 8001054:	0003      	movs	r3, r0
 8001056:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3301      	adds	r3, #1
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_Delay+0x44>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	001a      	movs	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	189b      	adds	r3, r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	f7ff ffe0 	bl	8001034 <HAL_GetTick>
 8001074:	0002      	movs	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f7      	bhi.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b004      	add	sp, #16
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	20000010 	.word	0x20000010

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	0002      	movs	r2, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b7f      	cmp	r3, #127	; 0x7f
 80010a4:	d828      	bhi.n	80010f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a6:	4a2f      	ldr	r2, [pc, #188]	; (8001164 <__NVIC_SetPriority+0xd4>)
 80010a8:	1dfb      	adds	r3, r7, #7
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	33c0      	adds	r3, #192	; 0xc0
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	589b      	ldr	r3, [r3, r2]
 80010b6:	1dfa      	adds	r2, r7, #7
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	0011      	movs	r1, r2
 80010bc:	2203      	movs	r2, #3
 80010be:	400a      	ands	r2, r1
 80010c0:	00d2      	lsls	r2, r2, #3
 80010c2:	21ff      	movs	r1, #255	; 0xff
 80010c4:	4091      	lsls	r1, r2
 80010c6:	000a      	movs	r2, r1
 80010c8:	43d2      	mvns	r2, r2
 80010ca:	401a      	ands	r2, r3
 80010cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	22ff      	movs	r2, #255	; 0xff
 80010d4:	401a      	ands	r2, r3
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	0018      	movs	r0, r3
 80010dc:	2303      	movs	r3, #3
 80010de:	4003      	ands	r3, r0
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e4:	481f      	ldr	r0, [pc, #124]	; (8001164 <__NVIC_SetPriority+0xd4>)
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	430a      	orrs	r2, r1
 80010f0:	33c0      	adds	r3, #192	; 0xc0
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010f6:	e031      	b.n	800115c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <__NVIC_SetPriority+0xd8>)
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	0019      	movs	r1, r3
 8001100:	230f      	movs	r3, #15
 8001102:	400b      	ands	r3, r1
 8001104:	3b08      	subs	r3, #8
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3306      	adds	r3, #6
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	18d3      	adds	r3, r2, r3
 800110e:	3304      	adds	r3, #4
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1dfa      	adds	r2, r7, #7
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	0011      	movs	r1, r2
 8001118:	2203      	movs	r2, #3
 800111a:	400a      	ands	r2, r1
 800111c:	00d2      	lsls	r2, r2, #3
 800111e:	21ff      	movs	r1, #255	; 0xff
 8001120:	4091      	lsls	r1, r2
 8001122:	000a      	movs	r2, r1
 8001124:	43d2      	mvns	r2, r2
 8001126:	401a      	ands	r2, r3
 8001128:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	019b      	lsls	r3, r3, #6
 800112e:	22ff      	movs	r2, #255	; 0xff
 8001130:	401a      	ands	r2, r3
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	0018      	movs	r0, r3
 8001138:	2303      	movs	r3, #3
 800113a:	4003      	ands	r3, r0
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001140:	4809      	ldr	r0, [pc, #36]	; (8001168 <__NVIC_SetPriority+0xd8>)
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	001c      	movs	r4, r3
 8001148:	230f      	movs	r3, #15
 800114a:	4023      	ands	r3, r4
 800114c:	3b08      	subs	r3, #8
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	430a      	orrs	r2, r1
 8001152:	3306      	adds	r3, #6
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	18c3      	adds	r3, r0, r3
 8001158:	3304      	adds	r3, #4
 800115a:	601a      	str	r2, [r3, #0]
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b003      	add	sp, #12
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	045b      	lsls	r3, r3, #17
 800117c:	429a      	cmp	r2, r3
 800117e:	d301      	bcc.n	8001184 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001180:	2301      	movs	r3, #1
 8001182:	e010      	b.n	80011a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <SysTick_Config+0x44>)
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	3a01      	subs	r2, #1
 800118a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118c:	2301      	movs	r3, #1
 800118e:	425b      	negs	r3, r3
 8001190:	2103      	movs	r1, #3
 8001192:	0018      	movs	r0, r3
 8001194:	f7ff ff7c 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <SysTick_Config+0x44>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SysTick_Config+0x44>)
 80011a0:	2207      	movs	r2, #7
 80011a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b002      	add	sp, #8
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	e000e010 	.word	0xe000e010

080011b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	210f      	movs	r1, #15
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	1c02      	adds	r2, r0, #0
 80011c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	0011      	movs	r1, r2
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b004      	add	sp, #16
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff ffbf 	bl	800116c <SysTick_Config>
 80011ee:	0003      	movs	r3, r0
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001206:	e147      	b.n	8001498 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4091      	lsls	r1, r2
 8001212:	000a      	movs	r2, r1
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d100      	bne.n	8001220 <HAL_GPIO_Init+0x28>
 800121e:	e138      	b.n	8001492 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2203      	movs	r2, #3
 8001226:	4013      	ands	r3, r2
 8001228:	2b01      	cmp	r3, #1
 800122a:	d005      	beq.n	8001238 <HAL_GPIO_Init+0x40>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2203      	movs	r2, #3
 8001232:	4013      	ands	r3, r2
 8001234:	2b02      	cmp	r3, #2
 8001236:	d130      	bne.n	800129a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	409a      	lsls	r2, r3
 8001246:	0013      	movs	r3, r2
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	409a      	lsls	r2, r3
 800125a:	0013      	movs	r3, r2
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800126e:	2201      	movs	r2, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	43da      	mvns	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	2201      	movs	r2, #1
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d017      	beq.n	80012d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2203      	movs	r2, #3
 80012dc:	4013      	ands	r3, r2
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d123      	bne.n	800132a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	58d3      	ldr	r3, [r2, r3]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2207      	movs	r2, #7
 80012f4:	4013      	ands	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	43da      	mvns	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691a      	ldr	r2, [r3, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2107      	movs	r1, #7
 800130e:	400b      	ands	r3, r1
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	08da      	lsrs	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3208      	adds	r2, #8
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	6939      	ldr	r1, [r7, #16]
 8001328:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	43da      	mvns	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2203      	movs	r2, #3
 8001348:	401a      	ands	r2, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	23c0      	movs	r3, #192	; 0xc0
 8001364:	029b      	lsls	r3, r3, #10
 8001366:	4013      	ands	r3, r2
 8001368:	d100      	bne.n	800136c <HAL_GPIO_Init+0x174>
 800136a:	e092      	b.n	8001492 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800136c:	4a50      	ldr	r2, [pc, #320]	; (80014b0 <HAL_GPIO_Init+0x2b8>)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3318      	adds	r3, #24
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	589b      	ldr	r3, [r3, r2]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2203      	movs	r2, #3
 800137e:	4013      	ands	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	220f      	movs	r2, #15
 8001384:	409a      	lsls	r2, r3
 8001386:	0013      	movs	r3, r2
 8001388:	43da      	mvns	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	23a0      	movs	r3, #160	; 0xa0
 8001394:	05db      	lsls	r3, r3, #23
 8001396:	429a      	cmp	r2, r3
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0x1ca>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a45      	ldr	r2, [pc, #276]	; (80014b4 <HAL_GPIO_Init+0x2bc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d00d      	beq.n	80013be <HAL_GPIO_Init+0x1c6>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <HAL_GPIO_Init+0x2c0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d007      	beq.n	80013ba <HAL_GPIO_Init+0x1c2>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a43      	ldr	r2, [pc, #268]	; (80014bc <HAL_GPIO_Init+0x2c4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_GPIO_Init+0x1be>
 80013b2:	2303      	movs	r3, #3
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x1cc>
 80013b6:	2305      	movs	r3, #5
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x1cc>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x1cc>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x1cc>
 80013c2:	2300      	movs	r3, #0
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	2103      	movs	r1, #3
 80013c8:	400a      	ands	r2, r1
 80013ca:	00d2      	lsls	r2, r2, #3
 80013cc:	4093      	lsls	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013d4:	4936      	ldr	r1, [pc, #216]	; (80014b0 <HAL_GPIO_Init+0x2b8>)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3318      	adds	r3, #24
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <HAL_GPIO_Init+0x2b8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43da      	mvns	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	035b      	lsls	r3, r3, #13
 80013fa:	4013      	ands	r3, r2
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_GPIO_Init+0x2b8>)
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <HAL_GPIO_Init+0x2b8>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43da      	mvns	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	039b      	lsls	r3, r3, #14
 8001424:	4013      	ands	r3, r2
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <HAL_GPIO_Init+0x2b8>)
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001436:	4a1e      	ldr	r2, [pc, #120]	; (80014b0 <HAL_GPIO_Init+0x2b8>)
 8001438:	2384      	movs	r3, #132	; 0x84
 800143a:	58d3      	ldr	r3, [r2, r3]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43da      	mvns	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	029b      	lsls	r3, r3, #10
 8001450:	4013      	ands	r3, r2
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800145c:	4914      	ldr	r1, [pc, #80]	; (80014b0 <HAL_GPIO_Init+0x2b8>)
 800145e:	2284      	movs	r2, #132	; 0x84
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001464:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <HAL_GPIO_Init+0x2b8>)
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	58d3      	ldr	r3, [r2, r3]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43da      	mvns	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	025b      	lsls	r3, r3, #9
 800147e:	4013      	ands	r3, r2
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800148a:	4909      	ldr	r1, [pc, #36]	; (80014b0 <HAL_GPIO_Init+0x2b8>)
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	40da      	lsrs	r2, r3
 80014a0:	1e13      	subs	r3, r2, #0
 80014a2:	d000      	beq.n	80014a6 <HAL_GPIO_Init+0x2ae>
 80014a4:	e6b0      	b.n	8001208 <HAL_GPIO_Init+0x10>
  }
}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b006      	add	sp, #24
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021800 	.word	0x40021800
 80014b4:	50000400 	.word	0x50000400
 80014b8:	50000800 	.word	0x50000800
 80014bc:	50000c00 	.word	0x50000c00

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	0008      	movs	r0, r1
 80014ca:	0011      	movs	r1, r2
 80014cc:	1cbb      	adds	r3, r7, #2
 80014ce:	1c02      	adds	r2, r0, #0
 80014d0:	801a      	strh	r2, [r3, #0]
 80014d2:	1c7b      	adds	r3, r7, #1
 80014d4:	1c0a      	adds	r2, r1, #0
 80014d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d8:	1c7b      	adds	r3, r7, #1
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014e0:	1cbb      	adds	r3, r7, #2
 80014e2:	881a      	ldrh	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ea:	1cbb      	adds	r3, r7, #2
 80014ec:	881a      	ldrh	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b002      	add	sp, #8
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e08f      	b.n	800162e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2241      	movs	r2, #65	; 0x41
 8001512:	5c9b      	ldrb	r3, [r3, r2]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d107      	bne.n	800152a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2240      	movs	r2, #64	; 0x40
 800151e:	2100      	movs	r1, #0
 8001520:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	0018      	movs	r0, r3
 8001526:	f7ff f953 	bl	80007d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2241      	movs	r2, #65	; 0x41
 800152e:	2124      	movs	r1, #36	; 0x24
 8001530:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2101      	movs	r1, #1
 800153e:	438a      	bics	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	493b      	ldr	r1, [pc, #236]	; (8001638 <HAL_I2C_Init+0x13c>)
 800154c:	400a      	ands	r2, r1
 800154e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4938      	ldr	r1, [pc, #224]	; (800163c <HAL_I2C_Init+0x140>)
 800155c:	400a      	ands	r2, r1
 800155e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d108      	bne.n	800157a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	0209      	lsls	r1, r1, #8
 8001574:	430a      	orrs	r2, r1
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	e007      	b.n	800158a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2184      	movs	r1, #132	; 0x84
 8001584:	0209      	lsls	r1, r1, #8
 8001586:	430a      	orrs	r2, r1
 8001588:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d109      	bne.n	80015a6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	0109      	lsls	r1, r1, #4
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	e007      	b.n	80015b6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4923      	ldr	r1, [pc, #140]	; (8001640 <HAL_I2C_Init+0x144>)
 80015b2:	400a      	ands	r2, r1
 80015b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4920      	ldr	r1, [pc, #128]	; (8001644 <HAL_I2C_Init+0x148>)
 80015c2:	430a      	orrs	r2, r1
 80015c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	491a      	ldr	r1, [pc, #104]	; (800163c <HAL_I2C_Init+0x140>)
 80015d2:	400a      	ands	r2, r1
 80015d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	431a      	orrs	r2, r3
 80015e0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69d9      	ldr	r1, [r3, #28]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1a      	ldr	r2, [r3, #32]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2101      	movs	r1, #1
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2241      	movs	r2, #65	; 0x41
 800161a:	2120      	movs	r1, #32
 800161c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2242      	movs	r2, #66	; 0x42
 8001628:	2100      	movs	r1, #0
 800162a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b002      	add	sp, #8
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	f0ffffff 	.word	0xf0ffffff
 800163c:	ffff7fff 	.word	0xffff7fff
 8001640:	fffff7ff 	.word	0xfffff7ff
 8001644:	02008000 	.word	0x02008000

08001648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2241      	movs	r2, #65	; 0x41
 8001656:	5c9b      	ldrb	r3, [r3, r2]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b20      	cmp	r3, #32
 800165c:	d138      	bne.n	80016d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2240      	movs	r2, #64	; 0x40
 8001662:	5c9b      	ldrb	r3, [r3, r2]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001668:	2302      	movs	r3, #2
 800166a:	e032      	b.n	80016d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2240      	movs	r2, #64	; 0x40
 8001670:	2101      	movs	r1, #1
 8001672:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2241      	movs	r2, #65	; 0x41
 8001678:	2124      	movs	r1, #36	; 0x24
 800167a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2101      	movs	r1, #1
 8001688:	438a      	bics	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4911      	ldr	r1, [pc, #68]	; (80016dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001698:	400a      	ands	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2101      	movs	r1, #1
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2241      	movs	r2, #65	; 0x41
 80016c0:	2120      	movs	r1, #32
 80016c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2240      	movs	r2, #64	; 0x40
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e000      	b.n	80016d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016d0:	2302      	movs	r3, #2
  }
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	ffffefff 	.word	0xffffefff

080016e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2241      	movs	r2, #65	; 0x41
 80016ee:	5c9b      	ldrb	r3, [r3, r2]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b20      	cmp	r3, #32
 80016f4:	d139      	bne.n	800176a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2240      	movs	r2, #64	; 0x40
 80016fa:	5c9b      	ldrb	r3, [r3, r2]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001700:	2302      	movs	r3, #2
 8001702:	e033      	b.n	800176c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2240      	movs	r2, #64	; 0x40
 8001708:	2101      	movs	r1, #1
 800170a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2241      	movs	r2, #65	; 0x41
 8001710:	2124      	movs	r1, #36	; 0x24
 8001712:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2101      	movs	r1, #1
 8001720:	438a      	bics	r2, r1
 8001722:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4a11      	ldr	r2, [pc, #68]	; (8001774 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2241      	movs	r2, #65	; 0x41
 800175a:	2120      	movs	r1, #32
 800175c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2240      	movs	r2, #64	; 0x40
 8001762:	2100      	movs	r1, #0
 8001764:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800176a:	2302      	movs	r3, #2
  }
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b004      	add	sp, #16
 8001772:	bd80      	pop	{r7, pc}
 8001774:	fffff0ff 	.word	0xfffff0ff

08001778 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a19      	ldr	r2, [pc, #100]	; (80017ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001786:	4013      	ands	r3, r2
 8001788:	0019      	movs	r1, r3
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	430a      	orrs	r2, r1
 8001790:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	429a      	cmp	r2, r3
 800179a:	d11f      	bne.n	80017dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	0013      	movs	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	189b      	adds	r3, r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4912      	ldr	r1, [pc, #72]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80017aa:	0018      	movs	r0, r3
 80017ac:	f7fe fcaa 	bl	8000104 <__udivsi3>
 80017b0:	0003      	movs	r3, r0
 80017b2:	3301      	adds	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b6:	e008      	b.n	80017ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e001      	b.n	80017ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e009      	b.n	80017de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	401a      	ands	r2, r3
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	429a      	cmp	r2, r3
 80017da:	d0ed      	beq.n	80017b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	0018      	movs	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b004      	add	sp, #16
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	40007000 	.word	0x40007000
 80017ec:	fffff9ff 	.word	0xfffff9ff
 80017f0:	20000008 	.word	0x20000008
 80017f4:	000f4240 	.word	0x000f4240

080017f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <LL_RCC_GetAPB1Prescaler+0x14>)
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	23e0      	movs	r3, #224	; 0xe0
 8001802:	01db      	lsls	r3, r3, #7
 8001804:	4013      	ands	r3, r2
}
 8001806:	0018      	movs	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021000 	.word	0x40021000

08001810 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e2fe      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2201      	movs	r2, #1
 8001828:	4013      	ands	r3, r2
 800182a:	d100      	bne.n	800182e <HAL_RCC_OscConfig+0x1e>
 800182c:	e07c      	b.n	8001928 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182e:	4bc3      	ldr	r3, [pc, #780]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2238      	movs	r2, #56	; 0x38
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001838:	4bc0      	ldr	r3, [pc, #768]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2203      	movs	r2, #3
 800183e:	4013      	ands	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b10      	cmp	r3, #16
 8001846:	d102      	bne.n	800184e <HAL_RCC_OscConfig+0x3e>
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d002      	beq.n	8001854 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b08      	cmp	r3, #8
 8001852:	d10b      	bne.n	800186c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	4bb9      	ldr	r3, [pc, #740]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	029b      	lsls	r3, r3, #10
 800185c:	4013      	ands	r3, r2
 800185e:	d062      	beq.n	8001926 <HAL_RCC_OscConfig+0x116>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d15e      	bne.n	8001926 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e2d9      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	025b      	lsls	r3, r3, #9
 8001874:	429a      	cmp	r2, r3
 8001876:	d107      	bne.n	8001888 <HAL_RCC_OscConfig+0x78>
 8001878:	4bb0      	ldr	r3, [pc, #704]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4baf      	ldr	r3, [pc, #700]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	0249      	lsls	r1, r1, #9
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e020      	b.n	80018ca <HAL_RCC_OscConfig+0xba>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	23a0      	movs	r3, #160	; 0xa0
 800188e:	02db      	lsls	r3, r3, #11
 8001890:	429a      	cmp	r2, r3
 8001892:	d10e      	bne.n	80018b2 <HAL_RCC_OscConfig+0xa2>
 8001894:	4ba9      	ldr	r3, [pc, #676]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4ba8      	ldr	r3, [pc, #672]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800189a:	2180      	movs	r1, #128	; 0x80
 800189c:	02c9      	lsls	r1, r1, #11
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	4ba6      	ldr	r3, [pc, #664]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4ba5      	ldr	r3, [pc, #660]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	0249      	lsls	r1, r1, #9
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	e00b      	b.n	80018ca <HAL_RCC_OscConfig+0xba>
 80018b2:	4ba2      	ldr	r3, [pc, #648]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4ba1      	ldr	r3, [pc, #644]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018b8:	49a1      	ldr	r1, [pc, #644]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 80018ba:	400a      	ands	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	4b9f      	ldr	r3, [pc, #636]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b9e      	ldr	r3, [pc, #632]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018c4:	499f      	ldr	r1, [pc, #636]	; (8001b44 <HAL_RCC_OscConfig+0x334>)
 80018c6:	400a      	ands	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d014      	beq.n	80018fc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff fbaf 	bl	8001034 <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fbaa 	bl	8001034 <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e298      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ee:	4b93      	ldr	r3, [pc, #588]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	029b      	lsls	r3, r3, #10
 80018f6:	4013      	ands	r3, r2
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xcc>
 80018fa:	e015      	b.n	8001928 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fb9a 	bl	8001034 <HAL_GetTick>
 8001900:	0003      	movs	r3, r0
 8001902:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001906:	f7ff fb95 	bl	8001034 <HAL_GetTick>
 800190a:	0002      	movs	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b64      	cmp	r3, #100	; 0x64
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e283      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001918:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	029b      	lsls	r3, r3, #10
 8001920:	4013      	ands	r3, r2
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0xf6>
 8001924:	e000      	b.n	8001928 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001926:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	d100      	bne.n	8001934 <HAL_RCC_OscConfig+0x124>
 8001932:	e099      	b.n	8001a68 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001934:	4b81      	ldr	r3, [pc, #516]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2238      	movs	r2, #56	; 0x38
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193e:	4b7f      	ldr	r3, [pc, #508]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2203      	movs	r2, #3
 8001944:	4013      	ands	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b10      	cmp	r3, #16
 800194c:	d102      	bne.n	8001954 <HAL_RCC_OscConfig+0x144>
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d002      	beq.n	800195a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d135      	bne.n	80019c6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800195a:	4b78      	ldr	r3, [pc, #480]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4013      	ands	r3, r2
 8001964:	d005      	beq.n	8001972 <HAL_RCC_OscConfig+0x162>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e256      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b72      	ldr	r3, [pc, #456]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4a74      	ldr	r2, [pc, #464]	; (8001b48 <HAL_RCC_OscConfig+0x338>)
 8001978:	4013      	ands	r3, r2
 800197a:	0019      	movs	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	021a      	lsls	r2, r3, #8
 8001982:	4b6e      	ldr	r3, [pc, #440]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001984:	430a      	orrs	r2, r1
 8001986:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d112      	bne.n	80019b4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800198e:	4b6b      	ldr	r3, [pc, #428]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a6e      	ldr	r2, [pc, #440]	; (8001b4c <HAL_RCC_OscConfig+0x33c>)
 8001994:	4013      	ands	r3, r2
 8001996:	0019      	movs	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80019a2:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0adb      	lsrs	r3, r3, #11
 80019a8:	2207      	movs	r2, #7
 80019aa:	4013      	ands	r3, r2
 80019ac:	4a68      	ldr	r2, [pc, #416]	; (8001b50 <HAL_RCC_OscConfig+0x340>)
 80019ae:	40da      	lsrs	r2, r3
 80019b0:	4b68      	ldr	r3, [pc, #416]	; (8001b54 <HAL_RCC_OscConfig+0x344>)
 80019b2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019b4:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <HAL_RCC_OscConfig+0x348>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7ff fadf 	bl	8000f7c <HAL_InitTick>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d051      	beq.n	8001a66 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e22c      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d030      	beq.n	8001a30 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019ce:	4b5b      	ldr	r3, [pc, #364]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a5e      	ldr	r2, [pc, #376]	; (8001b4c <HAL_RCC_OscConfig+0x33c>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	0019      	movs	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	4b57      	ldr	r3, [pc, #348]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80019e2:	4b56      	ldr	r3, [pc, #344]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b55      	ldr	r3, [pc, #340]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	0049      	lsls	r1, r1, #1
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fb20 	bl	8001034 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fb1b 	bl	8001034 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e209      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a0c:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4013      	ands	r3, r2
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b48      	ldr	r3, [pc, #288]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4a4a      	ldr	r2, [pc, #296]	; (8001b48 <HAL_RCC_OscConfig+0x338>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	0019      	movs	r1, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	021a      	lsls	r2, r3, #8
 8001a28:	4b44      	ldr	r3, [pc, #272]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	e01b      	b.n	8001a68 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a30:	4b42      	ldr	r3, [pc, #264]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a36:	4949      	ldr	r1, [pc, #292]	; (8001b5c <HAL_RCC_OscConfig+0x34c>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fafa 	bl	8001034 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff faf5 	bl	8001034 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e1e3      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a58:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4013      	ands	r3, r2
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x236>
 8001a64:	e000      	b.n	8001a68 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d047      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2238      	movs	r2, #56	; 0x38
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b18      	cmp	r3, #24
 8001a7c:	d10a      	bne.n	8001a94 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	2202      	movs	r2, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	d03c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d138      	bne.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e1c5      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d019      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aa0:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fac4 	bl	8001034 <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fabf 	bl	8001034 <HAL_GetTick>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1ad      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac8:	2202      	movs	r2, #2
 8001aca:	4013      	ands	r3, r2
 8001acc:	d0f1      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x2a2>
 8001ace:	e018      	b.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	438a      	bics	r2, r1
 8001ada:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faaa 	bl	8001034 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff faa5 	bl	8001034 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e193      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d1f1      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2204      	movs	r2, #4
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <HAL_RCC_OscConfig+0x2fe>
 8001b0c:	e0c6      	b.n	8001c9c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0e:	231f      	movs	r3, #31
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2238      	movs	r2, #56	; 0x38
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b20      	cmp	r3, #32
 8001b20:	d11e      	bne.n	8001b60 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d100      	bne.n	8001b2e <HAL_RCC_OscConfig+0x31e>
 8001b2c:	e0b6      	b.n	8001c9c <HAL_RCC_OscConfig+0x48c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d000      	beq.n	8001b38 <HAL_RCC_OscConfig+0x328>
 8001b36:	e0b1      	b.n	8001c9c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e171      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	fffeffff 	.word	0xfffeffff
 8001b44:	fffbffff 	.word	0xfffbffff
 8001b48:	ffff80ff 	.word	0xffff80ff
 8001b4c:	ffffc7ff 	.word	0xffffc7ff
 8001b50:	00f42400 	.word	0x00f42400
 8001b54:	20000008 	.word	0x20000008
 8001b58:	2000000c 	.word	0x2000000c
 8001b5c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b60:	4bb1      	ldr	r3, [pc, #708]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	055b      	lsls	r3, r3, #21
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_OscConfig+0x360>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x362>
 8001b70:	2300      	movs	r3, #0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d011      	beq.n	8001b9a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4bac      	ldr	r3, [pc, #688]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b7a:	4bab      	ldr	r3, [pc, #684]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	0549      	lsls	r1, r1, #21
 8001b80:	430a      	orrs	r2, r1
 8001b82:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b84:	4ba8      	ldr	r3, [pc, #672]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	055b      	lsls	r3, r3, #21
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b92:	231f      	movs	r3, #31
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9a:	4ba4      	ldr	r3, [pc, #656]	; (8001e2c <HAL_RCC_OscConfig+0x61c>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d11a      	bne.n	8001bdc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ba6:	4ba1      	ldr	r3, [pc, #644]	; (8001e2c <HAL_RCC_OscConfig+0x61c>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4ba0      	ldr	r3, [pc, #640]	; (8001e2c <HAL_RCC_OscConfig+0x61c>)
 8001bac:	2180      	movs	r1, #128	; 0x80
 8001bae:	0049      	lsls	r1, r1, #1
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fa3e 	bl	8001034 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbe:	f7ff fa39 	bl	8001034 <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e127      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd0:	4b96      	ldr	r3, [pc, #600]	; (8001e2c <HAL_RCC_OscConfig+0x61c>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x3e2>
 8001be4:	4b90      	ldr	r3, [pc, #576]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001be6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001be8:	4b8f      	ldr	r3, [pc, #572]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	430a      	orrs	r2, r1
 8001bee:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bf0:	e01c      	b.n	8001c2c <HAL_RCC_OscConfig+0x41c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x404>
 8001bfa:	4b8b      	ldr	r3, [pc, #556]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001bfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bfe:	4b8a      	ldr	r3, [pc, #552]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001c00:	2104      	movs	r1, #4
 8001c02:	430a      	orrs	r2, r1
 8001c04:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c06:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001c08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c0a:	4b87      	ldr	r3, [pc, #540]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0x41c>
 8001c14:	4b84      	ldr	r3, [pc, #528]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001c16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c18:	4b83      	ldr	r3, [pc, #524]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	438a      	bics	r2, r1
 8001c1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c20:	4b81      	ldr	r3, [pc, #516]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001c22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c24:	4b80      	ldr	r3, [pc, #512]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001c26:	2104      	movs	r1, #4
 8001c28:	438a      	bics	r2, r1
 8001c2a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d014      	beq.n	8001c5e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff f9fe 	bl	8001034 <HAL_GetTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c3c:	e009      	b.n	8001c52 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7ff f9f9 	bl	8001034 <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	4a79      	ldr	r2, [pc, #484]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0e6      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c52:	4b75      	ldr	r3, [pc, #468]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	2202      	movs	r2, #2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x42e>
 8001c5c:	e013      	b.n	8001c86 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f9e9 	bl	8001034 <HAL_GetTick>
 8001c62:	0003      	movs	r3, r0
 8001c64:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c66:	e009      	b.n	8001c7c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff f9e4 	bl	8001034 <HAL_GetTick>
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	4a6f      	ldr	r2, [pc, #444]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e0d1      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c7c:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	2202      	movs	r2, #2
 8001c82:	4013      	ands	r3, r2
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c86:	231f      	movs	r3, #31
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d105      	bne.n	8001c9c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c90:	4b65      	ldr	r3, [pc, #404]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c94:	4b64      	ldr	r3, [pc, #400]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001c96:	4967      	ldr	r1, [pc, #412]	; (8001e34 <HAL_RCC_OscConfig+0x624>)
 8001c98:	400a      	ands	r2, r1
 8001c9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d100      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x496>
 8001ca4:	e0bb      	b.n	8001e1e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca6:	4b60      	ldr	r3, [pc, #384]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2238      	movs	r2, #56	; 0x38
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d100      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4a4>
 8001cb2:	e07b      	b.n	8001dac <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d156      	bne.n	8001d6a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbc:	4b5a      	ldr	r3, [pc, #360]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001cc2:	495d      	ldr	r1, [pc, #372]	; (8001e38 <HAL_RCC_OscConfig+0x628>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff f9b4 	bl	8001034 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7ff f9af 	bl	8001034 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e09d      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce4:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	049b      	lsls	r3, r3, #18
 8001cec:	4013      	ands	r3, r2
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf0:	4b4d      	ldr	r3, [pc, #308]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a51      	ldr	r2, [pc, #324]	; (8001e3c <HAL_RCC_OscConfig+0x62c>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1a      	ldr	r2, [r3, #32]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d24:	4b40      	ldr	r3, [pc, #256]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	0449      	lsls	r1, r1, #17
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0549      	lsls	r1, r1, #21
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff f978 	bl	8001034 <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7ff f973 	bl	8001034 <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e061      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5c:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	049b      	lsls	r3, r3, #18
 8001d64:	4013      	ands	r3, r2
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x53a>
 8001d68:	e059      	b.n	8001e1e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001d70:	4931      	ldr	r1, [pc, #196]	; (8001e38 <HAL_RCC_OscConfig+0x628>)
 8001d72:	400a      	ands	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff f95d 	bl	8001034 <HAL_GetTick>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d80:	f7ff f958 	bl	8001034 <HAL_GetTick>
 8001d84:	0002      	movs	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e046      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	049b      	lsls	r3, r3, #18
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001da4:	4926      	ldr	r1, [pc, #152]	; (8001e40 <HAL_RCC_OscConfig+0x630>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	e038      	b.n	8001e1e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e033      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_RCC_OscConfig+0x618>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d126      	bne.n	8001e1a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2270      	movs	r2, #112	; 0x70
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d11f      	bne.n	8001e1a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	23fe      	movs	r3, #254	; 0xfe
 8001dde:	01db      	lsls	r3, r3, #7
 8001de0:	401a      	ands	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d116      	bne.n	8001e1a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	23f8      	movs	r3, #248	; 0xf8
 8001df0:	039b      	lsls	r3, r3, #14
 8001df2:	401a      	ands	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d10e      	bne.n	8001e1a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	23e0      	movs	r3, #224	; 0xe0
 8001e00:	051b      	lsls	r3, r3, #20
 8001e02:	401a      	ands	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	0f5b      	lsrs	r3, r3, #29
 8001e10:	075a      	lsls	r2, r3, #29
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b008      	add	sp, #32
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	00001388 	.word	0x00001388
 8001e34:	efffffff 	.word	0xefffffff
 8001e38:	feffffff 	.word	0xfeffffff
 8001e3c:	11c1808c 	.word	0x11c1808c
 8001e40:	eefefffc 	.word	0xeefefffc

08001e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0e9      	b.n	800202c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b76      	ldr	r3, [pc, #472]	; (8002034 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	4013      	ands	r3, r2
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d91e      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b73      	ldr	r3, [pc, #460]	; (8002034 <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	4393      	bics	r3, r2
 8001e6e:	0019      	movs	r1, r3
 8001e70:	4b70      	ldr	r3, [pc, #448]	; (8002034 <HAL_RCC_ClockConfig+0x1f0>)
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e78:	f7ff f8dc 	bl	8001034 <HAL_GetTick>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e80:	e009      	b.n	8001e96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e82:	f7ff f8d7 	bl	8001034 <HAL_GetTick>
 8001e86:	0002      	movs	r2, r0
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	4a6a      	ldr	r2, [pc, #424]	; (8002038 <HAL_RCC_ClockConfig+0x1f4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e0ca      	b.n	800202c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e96:	4b67      	ldr	r3, [pc, #412]	; (8002034 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d1ee      	bne.n	8001e82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d015      	beq.n	8001eda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d006      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001eb8:	4b60      	ldr	r3, [pc, #384]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	4b5f      	ldr	r3, [pc, #380]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001ebe:	21e0      	movs	r1, #224	; 0xe0
 8001ec0:	01c9      	lsls	r1, r1, #7
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	4a5d      	ldr	r2, [pc, #372]	; (8002040 <HAL_RCC_ClockConfig+0x1fc>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	4b59      	ldr	r3, [pc, #356]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d057      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eec:	4b53      	ldr	r3, [pc, #332]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	029b      	lsls	r3, r3, #10
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d12b      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e097      	b.n	800202c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f04:	4b4d      	ldr	r3, [pc, #308]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	049b      	lsls	r3, r3, #18
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d11f      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e08b      	b.n	800202c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f1c:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4013      	ands	r3, r2
 8001f26:	d113      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e07f      	b.n	800202c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f34:	4b41      	ldr	r3, [pc, #260]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d108      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e074      	b.n	800202c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f42:	4b3e      	ldr	r3, [pc, #248]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	2202      	movs	r2, #2
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e06d      	b.n	800202c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f50:	4b3a      	ldr	r3, [pc, #232]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2207      	movs	r2, #7
 8001f56:	4393      	bics	r3, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001f60:	430a      	orrs	r2, r1
 8001f62:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f64:	f7ff f866 	bl	8001034 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6c:	e009      	b.n	8001f82 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6e:	f7ff f861 	bl	8001034 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	4a2f      	ldr	r2, [pc, #188]	; (8002038 <HAL_RCC_ClockConfig+0x1f4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e054      	b.n	800202c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	4b2e      	ldr	r3, [pc, #184]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2238      	movs	r2, #56	; 0x38
 8001f88:	401a      	ands	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d1ec      	bne.n	8001f6e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f94:	4b27      	ldr	r3, [pc, #156]	; (8002034 <HAL_RCC_ClockConfig+0x1f0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2207      	movs	r2, #7
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d21e      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2207      	movs	r2, #7
 8001fa8:	4393      	bics	r3, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <HAL_RCC_ClockConfig+0x1f0>)
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fb4:	f7ff f83e 	bl	8001034 <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fbc:	e009      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbe:	f7ff f839 	bl	8001034 <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <HAL_RCC_ClockConfig+0x1f4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e02c      	b.n	800202c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2207      	movs	r2, #7
 8001fd8:	4013      	ands	r3, r2
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d1ee      	bne.n	8001fbe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d009      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	4a15      	ldr	r2, [pc, #84]	; (8002044 <HAL_RCC_ClockConfig+0x200>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ffe:	f000 f829 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 8002002:	0001      	movs	r1, r0
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_RCC_ClockConfig+0x1f8>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	220f      	movs	r2, #15
 800200c:	401a      	ands	r2, r3
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_RCC_ClockConfig+0x204>)
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	58d3      	ldr	r3, [r2, r3]
 8002014:	221f      	movs	r2, #31
 8002016:	4013      	ands	r3, r2
 8002018:	000a      	movs	r2, r1
 800201a:	40da      	lsrs	r2, r3
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_ClockConfig+0x208>)
 800201e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_ClockConfig+0x20c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0018      	movs	r0, r3
 8002026:	f7fe ffa9 	bl	8000f7c <HAL_InitTick>
 800202a:	0003      	movs	r3, r0
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b004      	add	sp, #16
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40022000 	.word	0x40022000
 8002038:	00001388 	.word	0x00001388
 800203c:	40021000 	.word	0x40021000
 8002040:	fffff0ff 	.word	0xfffff0ff
 8002044:	ffff8fff 	.word	0xffff8fff
 8002048:	080053cc 	.word	0x080053cc
 800204c:	20000008 	.word	0x20000008
 8002050:	2000000c 	.word	0x2000000c

08002054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800205a:	4b3c      	ldr	r3, [pc, #240]	; (800214c <HAL_RCC_GetSysClockFreq+0xf8>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2238      	movs	r2, #56	; 0x38
 8002060:	4013      	ands	r3, r2
 8002062:	d10f      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002064:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0adb      	lsrs	r3, r3, #11
 800206a:	2207      	movs	r2, #7
 800206c:	4013      	ands	r3, r2
 800206e:	2201      	movs	r2, #1
 8002070:	409a      	lsls	r2, r3
 8002072:	0013      	movs	r3, r2
 8002074:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002076:	6839      	ldr	r1, [r7, #0]
 8002078:	4835      	ldr	r0, [pc, #212]	; (8002150 <HAL_RCC_GetSysClockFreq+0xfc>)
 800207a:	f7fe f843 	bl	8000104 <__udivsi3>
 800207e:	0003      	movs	r3, r0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	e05d      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2238      	movs	r2, #56	; 0x38
 800208a:	4013      	ands	r3, r2
 800208c:	2b08      	cmp	r3, #8
 800208e:	d102      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002090:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_RCC_GetSysClockFreq+0x100>)
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	e054      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2238      	movs	r2, #56	; 0x38
 800209c:	4013      	ands	r3, r2
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d138      	bne.n	8002114 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80020a2:	4b2a      	ldr	r3, [pc, #168]	; (800214c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2203      	movs	r2, #3
 80020a8:	4013      	ands	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020ac:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	2207      	movs	r2, #7
 80020b4:	4013      	ands	r3, r2
 80020b6:	3301      	adds	r3, #1
 80020b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d10d      	bne.n	80020dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	4824      	ldr	r0, [pc, #144]	; (8002154 <HAL_RCC_GetSysClockFreq+0x100>)
 80020c4:	f7fe f81e 	bl	8000104 <__udivsi3>
 80020c8:	0003      	movs	r3, r0
 80020ca:	0019      	movs	r1, r3
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	227f      	movs	r2, #127	; 0x7f
 80020d4:	4013      	ands	r3, r2
 80020d6:	434b      	muls	r3, r1
 80020d8:	617b      	str	r3, [r7, #20]
        break;
 80020da:	e00d      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	481c      	ldr	r0, [pc, #112]	; (8002150 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020e0:	f7fe f810 	bl	8000104 <__udivsi3>
 80020e4:	0003      	movs	r3, r0
 80020e6:	0019      	movs	r1, r3
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	227f      	movs	r2, #127	; 0x7f
 80020f0:	4013      	ands	r3, r2
 80020f2:	434b      	muls	r3, r1
 80020f4:	617b      	str	r3, [r7, #20]
        break;
 80020f6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0f5b      	lsrs	r3, r3, #29
 80020fe:	2207      	movs	r2, #7
 8002100:	4013      	ands	r3, r2
 8002102:	3301      	adds	r3, #1
 8002104:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	6978      	ldr	r0, [r7, #20]
 800210a:	f7fd fffb 	bl	8000104 <__udivsi3>
 800210e:	0003      	movs	r3, r0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	e015      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2238      	movs	r2, #56	; 0x38
 800211a:	4013      	ands	r3, r2
 800211c:	2b20      	cmp	r3, #32
 800211e:	d103      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	e00b      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_RCC_GetSysClockFreq+0xf8>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2238      	movs	r2, #56	; 0x38
 800212e:	4013      	ands	r3, r2
 8002130:	2b18      	cmp	r3, #24
 8002132:	d103      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002134:	23fa      	movs	r3, #250	; 0xfa
 8002136:	01db      	lsls	r3, r3, #7
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	e001      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002140:	693b      	ldr	r3, [r7, #16]
}
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b006      	add	sp, #24
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	40021000 	.word	0x40021000
 8002150:	00f42400 	.word	0x00f42400
 8002154:	007a1200 	.word	0x007a1200

08002158 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800215c:	4b02      	ldr	r3, [pc, #8]	; (8002168 <HAL_RCC_GetHCLKFreq+0x10>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	20000008 	.word	0x20000008

0800216c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800216c:	b5b0      	push	{r4, r5, r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002170:	f7ff fff2 	bl	8002158 <HAL_RCC_GetHCLKFreq>
 8002174:	0004      	movs	r4, r0
 8002176:	f7ff fb3f 	bl	80017f8 <LL_RCC_GetAPB1Prescaler>
 800217a:	0003      	movs	r3, r0
 800217c:	0b1a      	lsrs	r2, r3, #12
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002180:	0092      	lsls	r2, r2, #2
 8002182:	58d3      	ldr	r3, [r2, r3]
 8002184:	221f      	movs	r2, #31
 8002186:	4013      	ands	r3, r2
 8002188:	40dc      	lsrs	r4, r3
 800218a:	0023      	movs	r3, r4
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	bdb0      	pop	{r4, r5, r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	0800540c 	.word	0x0800540c

08002198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80021a0:	2313      	movs	r3, #19
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021a8:	2312      	movs	r3, #18
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	029b      	lsls	r3, r3, #10
 80021b8:	4013      	ands	r3, r2
 80021ba:	d100      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80021bc:	e0a3      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021be:	2011      	movs	r0, #17
 80021c0:	183b      	adds	r3, r7, r0
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c6:	4ba5      	ldr	r3, [pc, #660]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	055b      	lsls	r3, r3, #21
 80021ce:	4013      	ands	r3, r2
 80021d0:	d110      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	4ba2      	ldr	r3, [pc, #648]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021d6:	4ba1      	ldr	r3, [pc, #644]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	0549      	lsls	r1, r1, #21
 80021dc:	430a      	orrs	r2, r1
 80021de:	63da      	str	r2, [r3, #60]	; 0x3c
 80021e0:	4b9e      	ldr	r3, [pc, #632]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	055b      	lsls	r3, r3, #21
 80021e8:	4013      	ands	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ee:	183b      	adds	r3, r7, r0
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f4:	4b9a      	ldr	r3, [pc, #616]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b99      	ldr	r3, [pc, #612]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	0049      	lsls	r1, r1, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002202:	f7fe ff17 	bl	8001034 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800220a:	e00b      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220c:	f7fe ff12 	bl	8001034 <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d904      	bls.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800221a:	2313      	movs	r3, #19
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	2203      	movs	r2, #3
 8002220:	701a      	strb	r2, [r3, #0]
        break;
 8002222:	e005      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002224:	4b8e      	ldr	r3, [pc, #568]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4013      	ands	r3, r2
 800222e:	d0ed      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002230:	2313      	movs	r3, #19
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d154      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800223a:	4b88      	ldr	r3, [pc, #544]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800223c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800223e:	23c0      	movs	r3, #192	; 0xc0
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4013      	ands	r3, r2
 8002244:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d019      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	429a      	cmp	r2, r3
 8002254:	d014      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002256:	4b81      	ldr	r3, [pc, #516]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225a:	4a82      	ldr	r2, [pc, #520]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800225c:	4013      	ands	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002260:	4b7e      	ldr	r3, [pc, #504]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002264:	4b7d      	ldr	r3, [pc, #500]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	0249      	lsls	r1, r1, #9
 800226a:	430a      	orrs	r2, r1
 800226c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800226e:	4b7b      	ldr	r3, [pc, #492]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002270:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002272:	4b7a      	ldr	r3, [pc, #488]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002274:	497c      	ldr	r1, [pc, #496]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002276:	400a      	ands	r2, r1
 8002278:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800227a:	4b78      	ldr	r3, [pc, #480]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2201      	movs	r2, #1
 8002284:	4013      	ands	r3, r2
 8002286:	d016      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe fed4 	bl	8001034 <HAL_GetTick>
 800228c:	0003      	movs	r3, r0
 800228e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002290:	e00c      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7fe fecf 	bl	8001034 <HAL_GetTick>
 8002296:	0002      	movs	r2, r0
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	4a73      	ldr	r2, [pc, #460]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d904      	bls.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80022a2:	2313      	movs	r3, #19
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	2203      	movs	r2, #3
 80022a8:	701a      	strb	r2, [r3, #0]
            break;
 80022aa:	e004      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ac:	4b6b      	ldr	r3, [pc, #428]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	2202      	movs	r2, #2
 80022b2:	4013      	ands	r3, r2
 80022b4:	d0ed      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80022b6:	2313      	movs	r3, #19
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10a      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022c0:	4b66      	ldr	r3, [pc, #408]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	4a67      	ldr	r2, [pc, #412]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ce:	4b63      	ldr	r3, [pc, #396]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80022d4:	e00c      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022d6:	2312      	movs	r3, #18
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	2213      	movs	r2, #19
 80022dc:	18ba      	adds	r2, r7, r2
 80022de:	7812      	ldrb	r2, [r2, #0]
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	e005      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e4:	2312      	movs	r3, #18
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2213      	movs	r2, #19
 80022ea:	18ba      	adds	r2, r7, r2
 80022ec:	7812      	ldrb	r2, [r2, #0]
 80022ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022f0:	2311      	movs	r3, #17
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d105      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fa:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022fe:	4b57      	ldr	r3, [pc, #348]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002300:	495b      	ldr	r1, [pc, #364]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002302:	400a      	ands	r2, r1
 8002304:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2201      	movs	r2, #1
 800230c:	4013      	ands	r3, r2
 800230e:	d009      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002310:	4b52      	ldr	r3, [pc, #328]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	2203      	movs	r2, #3
 8002316:	4393      	bics	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4b4f      	ldr	r3, [pc, #316]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002320:	430a      	orrs	r2, r1
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2210      	movs	r2, #16
 800232a:	4013      	ands	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800232e:	4b4b      	ldr	r3, [pc, #300]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	4a50      	ldr	r2, [pc, #320]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002334:	4013      	ands	r3, r2
 8002336:	0019      	movs	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800233e:	430a      	orrs	r2, r1
 8002340:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4013      	ands	r3, r2
 800234c:	d009      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800234e:	4b43      	ldr	r3, [pc, #268]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	4a49      	ldr	r2, [pc, #292]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002354:	4013      	ands	r3, r2
 8002356:	0019      	movs	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	4b3f      	ldr	r3, [pc, #252]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800235e:	430a      	orrs	r2, r1
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4013      	ands	r3, r2
 800236c:	d009      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	4a42      	ldr	r2, [pc, #264]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002374:	4013      	ands	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	4b37      	ldr	r3, [pc, #220]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800237e:	430a      	orrs	r2, r1
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2220      	movs	r2, #32
 8002388:	4013      	ands	r3, r2
 800238a:	d009      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800238c:	4b33      	ldr	r3, [pc, #204]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	4a3b      	ldr	r2, [pc, #236]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002392:	4013      	ands	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	4b30      	ldr	r3, [pc, #192]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800239c:	430a      	orrs	r2, r1
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	01db      	lsls	r3, r3, #7
 80023a8:	4013      	ands	r3, r2
 80023aa:	d015      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	0899      	lsrs	r1, r3, #2
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69da      	ldr	r2, [r3, #28]
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023ba:	430a      	orrs	r2, r1
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	05db      	lsls	r3, r3, #23
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d106      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023d0:	2180      	movs	r1, #128	; 0x80
 80023d2:	0249      	lsls	r1, r1, #9
 80023d4:	430a      	orrs	r2, r1
 80023d6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	039b      	lsls	r3, r3, #14
 80023e0:	4013      	ands	r3, r2
 80023e2:	d016      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023e4:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	4a26      	ldr	r2, [pc, #152]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1a      	ldr	r2, [r3, #32]
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023f4:	430a      	orrs	r2, r1
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1a      	ldr	r2, [r3, #32]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	03db      	lsls	r3, r3, #15
 8002400:	429a      	cmp	r2, r3
 8002402:	d106      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	0449      	lsls	r1, r1, #17
 800240e:	430a      	orrs	r2, r1
 8002410:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	4013      	ands	r3, r2
 800241c:	d016      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	4a19      	ldr	r2, [pc, #100]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002424:	4013      	ands	r3, r2
 8002426:	0019      	movs	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800242e:	430a      	orrs	r2, r1
 8002430:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	01db      	lsls	r3, r3, #7
 800243a:	429a      	cmp	r2, r3
 800243c:	d106      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	0249      	lsls	r1, r1, #9
 8002448:	430a      	orrs	r2, r1
 800244a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800244c:	2312      	movs	r3, #18
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	781b      	ldrb	r3, [r3, #0]
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b006      	add	sp, #24
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	40021000 	.word	0x40021000
 8002460:	40007000 	.word	0x40007000
 8002464:	fffffcff 	.word	0xfffffcff
 8002468:	fffeffff 	.word	0xfffeffff
 800246c:	00001388 	.word	0x00001388
 8002470:	efffffff 	.word	0xefffffff
 8002474:	fffff3ff 	.word	0xfffff3ff
 8002478:	fff3ffff 	.word	0xfff3ffff
 800247c:	ffcfffff 	.word	0xffcfffff
 8002480:	ffffcfff 	.word	0xffffcfff
 8002484:	ffbfffff 	.word	0xffbfffff
 8002488:	ffff3fff 	.word	0xffff3fff

0800248c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0a8      	b.n	80025f0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	2382      	movs	r3, #130	; 0x82
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d009      	beq.n	80024c6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	61da      	str	r2, [r3, #28]
 80024b8:	e005      	b.n	80024c6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	225d      	movs	r2, #93	; 0x5d
 80024d0:	5c9b      	ldrb	r3, [r3, r2]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d107      	bne.n	80024e8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	225c      	movs	r2, #92	; 0x5c
 80024dc:	2100      	movs	r1, #0
 80024de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	0018      	movs	r0, r3
 80024e4:	f7fe faa6 	bl	8000a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	225d      	movs	r2, #93	; 0x5d
 80024ec:	2102      	movs	r1, #2
 80024ee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2140      	movs	r1, #64	; 0x40
 80024fc:	438a      	bics	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	23e0      	movs	r3, #224	; 0xe0
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	429a      	cmp	r2, r3
 800250a:	d902      	bls.n	8002512 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	e002      	b.n	8002518 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	015b      	lsls	r3, r3, #5
 8002516:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	23f0      	movs	r3, #240	; 0xf0
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	429a      	cmp	r2, r3
 8002522:	d008      	beq.n	8002536 <HAL_SPI_Init+0xaa>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	23e0      	movs	r3, #224	; 0xe0
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	429a      	cmp	r2, r3
 800252e:	d002      	beq.n	8002536 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	2382      	movs	r3, #130	; 0x82
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	401a      	ands	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6899      	ldr	r1, [r3, #8]
 8002544:	2384      	movs	r3, #132	; 0x84
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	400b      	ands	r3, r1
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2102      	movs	r1, #2
 8002552:	400b      	ands	r3, r1
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	2101      	movs	r1, #1
 800255c:	400b      	ands	r3, r1
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6999      	ldr	r1, [r3, #24]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	400b      	ands	r3, r1
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	2138      	movs	r1, #56	; 0x38
 8002572:	400b      	ands	r3, r1
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	2180      	movs	r1, #128	; 0x80
 800257c:	400b      	ands	r3, r1
 800257e:	431a      	orrs	r2, r3
 8002580:	0011      	movs	r1, r2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	019b      	lsls	r3, r3, #6
 800258a:	401a      	ands	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	2204      	movs	r2, #4
 800259c:	401a      	ands	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	2110      	movs	r1, #16
 80025a4:	400b      	ands	r3, r1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	2108      	movs	r1, #8
 80025ae:	400b      	ands	r3, r1
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68d9      	ldr	r1, [r3, #12]
 80025b6:	23f0      	movs	r3, #240	; 0xf0
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	400b      	ands	r3, r1
 80025bc:	431a      	orrs	r2, r3
 80025be:	0011      	movs	r1, r2
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	015b      	lsls	r3, r3, #5
 80025c6:	401a      	ands	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4907      	ldr	r1, [pc, #28]	; (80025f8 <HAL_SPI_Init+0x16c>)
 80025dc:	400a      	ands	r2, r1
 80025de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	225d      	movs	r2, #93	; 0x5d
 80025ea:	2101      	movs	r1, #1
 80025ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b004      	add	sp, #16
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	fffff7ff 	.word	0xfffff7ff

080025fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	1dbb      	adds	r3, r7, #6
 800260a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800260c:	231f      	movs	r3, #31
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	225c      	movs	r2, #92	; 0x5c
 8002618:	5c9b      	ldrb	r3, [r3, r2]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_SPI_Transmit+0x26>
 800261e:	2302      	movs	r3, #2
 8002620:	e147      	b.n	80028b2 <HAL_SPI_Transmit+0x2b6>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	225c      	movs	r2, #92	; 0x5c
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800262a:	f7fe fd03 	bl	8001034 <HAL_GetTick>
 800262e:	0003      	movs	r3, r0
 8002630:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002632:	2316      	movs	r3, #22
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	1dba      	adds	r2, r7, #6
 8002638:	8812      	ldrh	r2, [r2, #0]
 800263a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	225d      	movs	r2, #93	; 0x5d
 8002640:	5c9b      	ldrb	r3, [r3, r2]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d004      	beq.n	8002652 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002648:	231f      	movs	r3, #31
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2202      	movs	r2, #2
 800264e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002650:	e128      	b.n	80028a4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_SPI_Transmit+0x64>
 8002658:	1dbb      	adds	r3, r7, #6
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002660:	231f      	movs	r3, #31
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
    goto error;
 8002668:	e11c      	b.n	80028a4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	225d      	movs	r2, #93	; 0x5d
 800266e:	2103      	movs	r1, #3
 8002670:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1dba      	adds	r2, r7, #6
 8002682:	8812      	ldrh	r2, [r2, #0]
 8002684:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1dba      	adds	r2, r7, #6
 800268a:	8812      	ldrh	r2, [r2, #0]
 800268c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2244      	movs	r2, #68	; 0x44
 8002698:	2100      	movs	r1, #0
 800269a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2246      	movs	r2, #70	; 0x46
 80026a0:	2100      	movs	r1, #0
 80026a2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d110      	bne.n	80026de <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2140      	movs	r1, #64	; 0x40
 80026c8:	438a      	bics	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	01c9      	lsls	r1, r1, #7
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2240      	movs	r2, #64	; 0x40
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b40      	cmp	r3, #64	; 0x40
 80026ea:	d007      	beq.n	80026fc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2140      	movs	r1, #64	; 0x40
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	23e0      	movs	r3, #224	; 0xe0
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	429a      	cmp	r2, r3
 8002706:	d952      	bls.n	80027ae <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <HAL_SPI_Transmit+0x11e>
 8002710:	2316      	movs	r3, #22
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d143      	bne.n	80027a2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	881a      	ldrh	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	1c9a      	adds	r2, r3, #2
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800273e:	e030      	b.n	80027a2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2202      	movs	r2, #2
 8002748:	4013      	ands	r3, r2
 800274a:	2b02      	cmp	r3, #2
 800274c:	d112      	bne.n	8002774 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	881a      	ldrh	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275e:	1c9a      	adds	r2, r3, #2
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002772:	e016      	b.n	80027a2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002774:	f7fe fc5e 	bl	8001034 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d802      	bhi.n	800278a <HAL_SPI_Transmit+0x18e>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_SPI_Transmit+0x194>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d108      	bne.n	80027a2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002790:	231f      	movs	r3, #31
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	2203      	movs	r2, #3
 8002796:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	225d      	movs	r2, #93	; 0x5d
 800279c:	2101      	movs	r1, #1
 800279e:	5499      	strb	r1, [r3, r2]
          goto error;
 80027a0:	e080      	b.n	80028a4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1c9      	bne.n	8002740 <HAL_SPI_Transmit+0x144>
 80027ac:	e053      	b.n	8002856 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <HAL_SPI_Transmit+0x1c4>
 80027b6:	2316      	movs	r3, #22
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d145      	bne.n	800284c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	7812      	ldrb	r2, [r2, #0]
 80027cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80027e6:	e031      	b.n	800284c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2202      	movs	r2, #2
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d113      	bne.n	800281e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	330c      	adds	r3, #12
 8002800:	7812      	ldrb	r2, [r2, #0]
 8002802:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800281c:	e016      	b.n	800284c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800281e:	f7fe fc09 	bl	8001034 <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d802      	bhi.n	8002834 <HAL_SPI_Transmit+0x238>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	d102      	bne.n	800283a <HAL_SPI_Transmit+0x23e>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d108      	bne.n	800284c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800283a:	231f      	movs	r3, #31
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	2203      	movs	r2, #3
 8002840:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	225d      	movs	r2, #93	; 0x5d
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]
          goto error;
 800284a:	e02b      	b.n	80028a4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1c8      	bne.n	80027e8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	6839      	ldr	r1, [r7, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	0018      	movs	r0, r3
 800285e:	f000 fcef 	bl	8003240 <SPI_EndRxTxTransaction>
 8002862:	1e03      	subs	r3, r0, #0
 8002864:	d002      	beq.n	800286c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288e:	2b00      	cmp	r3, #0
 8002890:	d004      	beq.n	800289c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002892:	231f      	movs	r3, #31
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	e003      	b.n	80028a4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	225d      	movs	r2, #93	; 0x5d
 80028a0:	2101      	movs	r1, #1
 80028a2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	225c      	movs	r2, #92	; 0x5c
 80028a8:	2100      	movs	r1, #0
 80028aa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80028ac:	231f      	movs	r3, #31
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	781b      	ldrb	r3, [r3, #0]
}
 80028b2:	0018      	movs	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b008      	add	sp, #32
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	1dbb      	adds	r3, r7, #6
 80028ca:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028cc:	2117      	movs	r1, #23
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	225d      	movs	r2, #93	; 0x5d
 80028d8:	5c9b      	ldrb	r3, [r3, r2]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d003      	beq.n	80028e8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	2202      	movs	r2, #2
 80028e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80028e6:	e12b      	b.n	8002b40 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	2382      	movs	r3, #130	; 0x82
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d113      	bne.n	800291c <HAL_SPI_Receive+0x60>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10f      	bne.n	800291c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	225d      	movs	r2, #93	; 0x5d
 8002900:	2104      	movs	r1, #4
 8002902:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002904:	1dbb      	adds	r3, r7, #6
 8002906:	881c      	ldrh	r4, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	0023      	movs	r3, r4
 8002914:	f000 f924 	bl	8002b60 <HAL_SPI_TransmitReceive>
 8002918:	0003      	movs	r3, r0
 800291a:	e118      	b.n	8002b4e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	225c      	movs	r2, #92	; 0x5c
 8002920:	5c9b      	ldrb	r3, [r3, r2]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_SPI_Receive+0x6e>
 8002926:	2302      	movs	r3, #2
 8002928:	e111      	b.n	8002b4e <HAL_SPI_Receive+0x292>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	225c      	movs	r2, #92	; 0x5c
 800292e:	2101      	movs	r1, #1
 8002930:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002932:	f7fe fb7f 	bl	8001034 <HAL_GetTick>
 8002936:	0003      	movs	r3, r0
 8002938:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_SPI_Receive+0x8c>
 8002940:	1dbb      	adds	r3, r7, #6
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d104      	bne.n	8002952 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002948:	2317      	movs	r3, #23
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002950:	e0f6      	b.n	8002b40 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	225d      	movs	r2, #93	; 0x5d
 8002956:	2104      	movs	r1, #4
 8002958:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1dba      	adds	r2, r7, #6
 800296a:	2144      	movs	r1, #68	; 0x44
 800296c:	8812      	ldrh	r2, [r2, #0]
 800296e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1dba      	adds	r2, r7, #6
 8002974:	2146      	movs	r1, #70	; 0x46
 8002976:	8812      	ldrh	r2, [r2, #0]
 8002978:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	23e0      	movs	r3, #224	; 0xe0
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d908      	bls.n	80029b6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	496a      	ldr	r1, [pc, #424]	; (8002b58 <HAL_SPI_Receive+0x29c>)
 80029b0:	400a      	ands	r2, r1
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	e008      	b.n	80029c8 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	0149      	lsls	r1, r1, #5
 80029c4:	430a      	orrs	r2, r1
 80029c6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d10f      	bne.n	80029f4 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2140      	movs	r1, #64	; 0x40
 80029e0:	438a      	bics	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	495b      	ldr	r1, [pc, #364]	; (8002b5c <HAL_SPI_Receive+0x2a0>)
 80029f0:	400a      	ands	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2240      	movs	r2, #64	; 0x40
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b40      	cmp	r3, #64	; 0x40
 8002a00:	d007      	beq.n	8002a12 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2140      	movs	r1, #64	; 0x40
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	23e0      	movs	r3, #224	; 0xe0
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d900      	bls.n	8002a20 <HAL_SPI_Receive+0x164>
 8002a1e:	e071      	b.n	8002b04 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a20:	e035      	b.n	8002a8e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d117      	bne.n	8002a60 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	330c      	adds	r3, #12
 8002a36:	001a      	movs	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2246      	movs	r2, #70	; 0x46
 8002a50:	5a9b      	ldrh	r3, [r3, r2]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b299      	uxth	r1, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2246      	movs	r2, #70	; 0x46
 8002a5c:	5299      	strh	r1, [r3, r2]
 8002a5e:	e016      	b.n	8002a8e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a60:	f7fe fae8 	bl	8001034 <HAL_GetTick>
 8002a64:	0002      	movs	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d802      	bhi.n	8002a76 <HAL_SPI_Receive+0x1ba>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	d102      	bne.n	8002a7c <HAL_SPI_Receive+0x1c0>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d108      	bne.n	8002a8e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002a7c:	2317      	movs	r3, #23
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	2203      	movs	r2, #3
 8002a82:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	225d      	movs	r2, #93	; 0x5d
 8002a88:	2101      	movs	r1, #1
 8002a8a:	5499      	strb	r1, [r3, r2]
          goto error;
 8002a8c:	e058      	b.n	8002b40 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2246      	movs	r2, #70	; 0x46
 8002a92:	5a9b      	ldrh	r3, [r3, r2]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1c3      	bne.n	8002a22 <HAL_SPI_Receive+0x166>
 8002a9a:	e039      	b.n	8002b10 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d115      	bne.n	8002ad6 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	b292      	uxth	r2, r2
 8002ab6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	1c9a      	adds	r2, r3, #2
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2246      	movs	r2, #70	; 0x46
 8002ac6:	5a9b      	ldrh	r3, [r3, r2]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b299      	uxth	r1, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2246      	movs	r2, #70	; 0x46
 8002ad2:	5299      	strh	r1, [r3, r2]
 8002ad4:	e016      	b.n	8002b04 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ad6:	f7fe faad 	bl	8001034 <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d802      	bhi.n	8002aec <HAL_SPI_Receive+0x230>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	d102      	bne.n	8002af2 <HAL_SPI_Receive+0x236>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d108      	bne.n	8002b04 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002af2:	2317      	movs	r3, #23
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	2203      	movs	r2, #3
 8002af8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	225d      	movs	r2, #93	; 0x5d
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b02:	e01d      	b.n	8002b40 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2246      	movs	r2, #70	; 0x46
 8002b08:	5a9b      	ldrh	r3, [r3, r2]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1c5      	bne.n	8002a9c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	6839      	ldr	r1, [r7, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 fb34 	bl	8003184 <SPI_EndRxTransaction>
 8002b1c:	1e03      	subs	r3, r0, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d004      	beq.n	8002b38 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002b2e:	2317      	movs	r3, #23
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	e003      	b.n	8002b40 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	225d      	movs	r2, #93	; 0x5d
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	225c      	movs	r2, #92	; 0x5c
 8002b44:	2100      	movs	r1, #0
 8002b46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b48:	2317      	movs	r3, #23
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
}
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b007      	add	sp, #28
 8002b54:	bd90      	pop	{r4, r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	ffffefff 	.word	0xffffefff
 8002b5c:	ffffbfff 	.word	0xffffbfff

08002b60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	001a      	movs	r2, r3
 8002b6e:	1cbb      	adds	r3, r7, #2
 8002b70:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b72:	2301      	movs	r3, #1
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b76:	2323      	movs	r3, #35	; 0x23
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	225c      	movs	r2, #92	; 0x5c
 8002b82:	5c9b      	ldrb	r3, [r3, r2]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_SPI_TransmitReceive+0x2c>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e1c4      	b.n	8002f16 <HAL_SPI_TransmitReceive+0x3b6>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	225c      	movs	r2, #92	; 0x5c
 8002b90:	2101      	movs	r1, #1
 8002b92:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b94:	f7fe fa4e 	bl	8001034 <HAL_GetTick>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b9c:	201b      	movs	r0, #27
 8002b9e:	183b      	adds	r3, r7, r0
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	215d      	movs	r1, #93	; 0x5d
 8002ba4:	5c52      	ldrb	r2, [r2, r1]
 8002ba6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002bae:	2312      	movs	r3, #18
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	1cba      	adds	r2, r7, #2
 8002bb4:	8812      	ldrh	r2, [r2, #0]
 8002bb6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bb8:	183b      	adds	r3, r7, r0
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d011      	beq.n	8002be4 <HAL_SPI_TransmitReceive+0x84>
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	2382      	movs	r3, #130	; 0x82
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d107      	bne.n	8002bda <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <HAL_SPI_TransmitReceive+0x7a>
 8002bd2:	183b      	adds	r3, r7, r0
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d004      	beq.n	8002be4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002bda:	2323      	movs	r3, #35	; 0x23
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2202      	movs	r2, #2
 8002be0:	701a      	strb	r2, [r3, #0]
    goto error;
 8002be2:	e191      	b.n	8002f08 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <HAL_SPI_TransmitReceive+0x98>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_SPI_TransmitReceive+0x98>
 8002bf0:	1cbb      	adds	r3, r7, #2
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d104      	bne.n	8002c02 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002bf8:	2323      	movs	r3, #35	; 0x23
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c00:	e182      	b.n	8002f08 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	225d      	movs	r2, #93	; 0x5d
 8002c06:	5c9b      	ldrb	r3, [r3, r2]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d003      	beq.n	8002c16 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	225d      	movs	r2, #93	; 0x5d
 8002c12:	2105      	movs	r1, #5
 8002c14:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1cba      	adds	r2, r7, #2
 8002c26:	2146      	movs	r1, #70	; 0x46
 8002c28:	8812      	ldrh	r2, [r2, #0]
 8002c2a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1cba      	adds	r2, r7, #2
 8002c30:	2144      	movs	r1, #68	; 0x44
 8002c32:	8812      	ldrh	r2, [r2, #0]
 8002c34:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1cba      	adds	r2, r7, #2
 8002c40:	8812      	ldrh	r2, [r2, #0]
 8002c42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1cba      	adds	r2, r7, #2
 8002c48:	8812      	ldrh	r2, [r2, #0]
 8002c4a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	23e0      	movs	r3, #224	; 0xe0
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d908      	bls.n	8002c76 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	49ac      	ldr	r1, [pc, #688]	; (8002f20 <HAL_SPI_TransmitReceive+0x3c0>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	e008      	b.n	8002c88 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2180      	movs	r1, #128	; 0x80
 8002c82:	0149      	lsls	r1, r1, #5
 8002c84:	430a      	orrs	r2, r1
 8002c86:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2240      	movs	r2, #64	; 0x40
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d007      	beq.n	8002ca6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2140      	movs	r1, #64	; 0x40
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	23e0      	movs	r3, #224	; 0xe0
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d800      	bhi.n	8002cb4 <HAL_SPI_TransmitReceive+0x154>
 8002cb2:	e083      	b.n	8002dbc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_SPI_TransmitReceive+0x168>
 8002cbc:	2312      	movs	r3, #18
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d000      	beq.n	8002cc8 <HAL_SPI_TransmitReceive+0x168>
 8002cc6:	e06d      	b.n	8002da4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	881a      	ldrh	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	1c9a      	adds	r2, r3, #2
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cec:	e05a      	b.n	8002da4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d11b      	bne.n	8002d34 <HAL_SPI_TransmitReceive+0x1d4>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <HAL_SPI_TransmitReceive+0x1d4>
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d113      	bne.n	8002d34 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	881a      	ldrh	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	1c9a      	adds	r2, r3, #2
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d11c      	bne.n	8002d7c <HAL_SPI_TransmitReceive+0x21c>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2246      	movs	r2, #70	; 0x46
 8002d46:	5a9b      	ldrh	r3, [r3, r2]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	b292      	uxth	r2, r2
 8002d5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	1c9a      	adds	r2, r3, #2
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2246      	movs	r2, #70	; 0x46
 8002d6a:	5a9b      	ldrh	r3, [r3, r2]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b299      	uxth	r1, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2246      	movs	r2, #70	; 0x46
 8002d76:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d7c:	f7fe f95a 	bl	8001034 <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d80b      	bhi.n	8002da4 <HAL_SPI_TransmitReceive+0x244>
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	3301      	adds	r3, #1
 8002d90:	d008      	beq.n	8002da4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002d92:	2323      	movs	r3, #35	; 0x23
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	2203      	movs	r2, #3
 8002d98:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	225d      	movs	r2, #93	; 0x5d
 8002d9e:	2101      	movs	r1, #1
 8002da0:	5499      	strb	r1, [r3, r2]
        goto error;
 8002da2:	e0b1      	b.n	8002f08 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d19f      	bne.n	8002cee <HAL_SPI_TransmitReceive+0x18e>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2246      	movs	r2, #70	; 0x46
 8002db2:	5a9b      	ldrh	r3, [r3, r2]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d199      	bne.n	8002cee <HAL_SPI_TransmitReceive+0x18e>
 8002dba:	e089      	b.n	8002ed0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_SPI_TransmitReceive+0x270>
 8002dc4:	2312      	movs	r3, #18
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d000      	beq.n	8002dd0 <HAL_SPI_TransmitReceive+0x270>
 8002dce:	e074      	b.n	8002eba <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	7812      	ldrb	r2, [r2, #0]
 8002ddc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002df6:	e060      	b.n	8002eba <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d11c      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x2e0>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d017      	beq.n	8002e40 <HAL_SPI_TransmitReceive+0x2e0>
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d114      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	330c      	adds	r3, #12
 8002e20:	7812      	ldrb	r2, [r2, #0]
 8002e22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2201      	movs	r2, #1
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d11e      	bne.n	8002e8c <HAL_SPI_TransmitReceive+0x32c>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2246      	movs	r2, #70	; 0x46
 8002e52:	5a9b      	ldrh	r3, [r3, r2]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d018      	beq.n	8002e8c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	001a      	movs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	7812      	ldrb	r2, [r2, #0]
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2246      	movs	r2, #70	; 0x46
 8002e7a:	5a9b      	ldrh	r3, [r3, r2]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b299      	uxth	r1, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2246      	movs	r2, #70	; 0x46
 8002e86:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e8c:	f7fe f8d2 	bl	8001034 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d802      	bhi.n	8002ea2 <HAL_SPI_TransmitReceive+0x342>
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	d102      	bne.n	8002ea8 <HAL_SPI_TransmitReceive+0x348>
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d108      	bne.n	8002eba <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002ea8:	2323      	movs	r3, #35	; 0x23
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2203      	movs	r2, #3
 8002eae:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	225d      	movs	r2, #93	; 0x5d
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	5499      	strb	r1, [r3, r2]
        goto error;
 8002eb8:	e026      	b.n	8002f08 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d199      	bne.n	8002df8 <HAL_SPI_TransmitReceive+0x298>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2246      	movs	r2, #70	; 0x46
 8002ec8:	5a9b      	ldrh	r3, [r3, r2]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d193      	bne.n	8002df8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f000 f9b2 	bl	8003240 <SPI_EndRxTxTransaction>
 8002edc:	1e03      	subs	r3, r0, #0
 8002ede:	d006      	beq.n	8002eee <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002ee0:	2323      	movs	r3, #35	; 0x23
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002ef6:	2323      	movs	r3, #35	; 0x23
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e003      	b.n	8002f08 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	225d      	movs	r2, #93	; 0x5d
 8002f04:	2101      	movs	r1, #1
 8002f06:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	225c      	movs	r2, #92	; 0x5c
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002f10:	2323      	movs	r3, #35	; 0x23
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	781b      	ldrb	r3, [r3, #0]
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b00a      	add	sp, #40	; 0x28
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	ffffefff 	.word	0xffffefff

08002f24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	1dfb      	adds	r3, r7, #7
 8002f32:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f34:	f7fe f87e 	bl	8001034 <HAL_GetTick>
 8002f38:	0002      	movs	r2, r0
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	18d3      	adds	r3, r2, r3
 8002f42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f44:	f7fe f876 	bl	8001034 <HAL_GetTick>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f4c:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	015b      	lsls	r3, r3, #5
 8002f52:	0d1b      	lsrs	r3, r3, #20
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	4353      	muls	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f5a:	e058      	b.n	800300e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	d055      	beq.n	800300e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f62:	f7fe f867 	bl	8001034 <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d902      	bls.n	8002f78 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d142      	bne.n	8002ffe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	21e0      	movs	r1, #224	; 0xe0
 8002f84:	438a      	bics	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	2382      	movs	r3, #130	; 0x82
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d113      	bne.n	8002fbc <SPI_WaitFlagStateUntilTimeout+0x98>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d005      	beq.n	8002fac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d107      	bne.n	8002fbc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2140      	movs	r1, #64	; 0x40
 8002fb8:	438a      	bics	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	019b      	lsls	r3, r3, #6
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d110      	bne.n	8002fea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	491a      	ldr	r1, [pc, #104]	; (800303c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	0189      	lsls	r1, r1, #6
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	225d      	movs	r2, #93	; 0x5d
 8002fee:	2101      	movs	r1, #1
 8002ff0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	225c      	movs	r2, #92	; 0x5c
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e017      	b.n	800302e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3b01      	subs	r3, #1
 800300c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	4013      	ands	r3, r2
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	425a      	negs	r2, r3
 800301e:	4153      	adcs	r3, r2
 8003020:	b2db      	uxtb	r3, r3
 8003022:	001a      	movs	r2, r3
 8003024:	1dfb      	adds	r3, r7, #7
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d197      	bne.n	8002f5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	b008      	add	sp, #32
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	20000008 	.word	0x20000008
 800303c:	ffffdfff 	.word	0xffffdfff

08003040 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800304e:	2317      	movs	r3, #23
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003056:	f7fd ffed 	bl	8001034 <HAL_GetTick>
 800305a:	0002      	movs	r2, r0
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	18d3      	adds	r3, r2, r3
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003066:	f7fd ffe5 	bl	8001034 <HAL_GetTick>
 800306a:	0003      	movs	r3, r0
 800306c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	330c      	adds	r3, #12
 8003074:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003076:	4b41      	ldr	r3, [pc, #260]	; (800317c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	0013      	movs	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	189b      	adds	r3, r3, r2
 8003080:	00da      	lsls	r2, r3, #3
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	0d1b      	lsrs	r3, r3, #20
 8003086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003088:	4353      	muls	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800308c:	e068      	b.n	8003160 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	23c0      	movs	r3, #192	; 0xc0
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	429a      	cmp	r2, r3
 8003096:	d10a      	bne.n	80030ae <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d107      	bne.n	80030ae <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	2117      	movs	r1, #23
 80030a6:	187b      	adds	r3, r7, r1
 80030a8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	3301      	adds	r3, #1
 80030b2:	d055      	beq.n	8003160 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030b4:	f7fd ffbe 	bl	8001034 <HAL_GetTick>
 80030b8:	0002      	movs	r2, r0
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d902      	bls.n	80030ca <SPI_WaitFifoStateUntilTimeout+0x8a>
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d142      	bne.n	8003150 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	21e0      	movs	r1, #224	; 0xe0
 80030d6:	438a      	bics	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	2382      	movs	r3, #130	; 0x82
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d113      	bne.n	800310e <SPI_WaitFifoStateUntilTimeout+0xce>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d005      	beq.n	80030fe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d107      	bne.n	800310e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2140      	movs	r1, #64	; 0x40
 800310a:	438a      	bics	r2, r1
 800310c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	019b      	lsls	r3, r3, #6
 8003116:	429a      	cmp	r2, r3
 8003118:	d110      	bne.n	800313c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4916      	ldr	r1, [pc, #88]	; (8003180 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003126:	400a      	ands	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	0189      	lsls	r1, r1, #6
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	225d      	movs	r2, #93	; 0x5d
 8003140:	2101      	movs	r1, #1
 8003142:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	225c      	movs	r2, #92	; 0x5c
 8003148:	2100      	movs	r1, #0
 800314a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e010      	b.n	8003172 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	3b01      	subs	r3, #1
 800315e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	4013      	ands	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d18e      	bne.n	800308e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b00a      	add	sp, #40	; 0x28
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	20000008 	.word	0x20000008
 8003180:	ffffdfff 	.word	0xffffdfff

08003184 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	2382      	movs	r3, #130	; 0x82
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	429a      	cmp	r2, r3
 800319a:	d113      	bne.n	80031c4 <SPI_EndRxTransaction+0x40>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d005      	beq.n	80031b4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d107      	bne.n	80031c4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2140      	movs	r1, #64	; 0x40
 80031c0:	438a      	bics	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	0013      	movs	r3, r2
 80031ce:	2200      	movs	r2, #0
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	f7ff fea7 	bl	8002f24 <SPI_WaitFlagStateUntilTimeout>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d007      	beq.n	80031ea <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031de:	2220      	movs	r2, #32
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e026      	b.n	8003238 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	2382      	movs	r3, #130	; 0x82
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d11f      	bne.n	8003236 <SPI_EndRxTransaction+0xb2>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	429a      	cmp	r2, r3
 8003200:	d005      	beq.n	800320e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	429a      	cmp	r2, r3
 800320c:	d113      	bne.n	8003236 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	23c0      	movs	r3, #192	; 0xc0
 8003212:	00d9      	lsls	r1, r3, #3
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	0013      	movs	r3, r2
 800321c:	2200      	movs	r2, #0
 800321e:	f7ff ff0f 	bl	8003040 <SPI_WaitFifoStateUntilTimeout>
 8003222:	1e03      	subs	r3, r0, #0
 8003224:	d007      	beq.n	8003236 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322a:	2220      	movs	r2, #32
 800322c:	431a      	orrs	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e000      	b.n	8003238 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	b004      	add	sp, #16
 800323e:	bd80      	pop	{r7, pc}

08003240 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	23c0      	movs	r3, #192	; 0xc0
 8003250:	0159      	lsls	r1, r3, #5
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	0013      	movs	r3, r2
 800325a:	2200      	movs	r2, #0
 800325c:	f7ff fef0 	bl	8003040 <SPI_WaitFifoStateUntilTimeout>
 8003260:	1e03      	subs	r3, r0, #0
 8003262:	d007      	beq.n	8003274 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003268:	2220      	movs	r2, #32
 800326a:	431a      	orrs	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e027      	b.n	80032c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	0013      	movs	r3, r2
 800327e:	2200      	movs	r2, #0
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	f7ff fe4f 	bl	8002f24 <SPI_WaitFlagStateUntilTimeout>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d007      	beq.n	800329a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328e:	2220      	movs	r2, #32
 8003290:	431a      	orrs	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e014      	b.n	80032c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	23c0      	movs	r3, #192	; 0xc0
 800329e:	00d9      	lsls	r1, r3, #3
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	0013      	movs	r3, r2
 80032a8:	2200      	movs	r2, #0
 80032aa:	f7ff fec9 	bl	8003040 <SPI_WaitFifoStateUntilTimeout>
 80032ae:	1e03      	subs	r3, r0, #0
 80032b0:	d007      	beq.n	80032c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b6:	2220      	movs	r2, #32
 80032b8:	431a      	orrs	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e000      	b.n	80032c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b004      	add	sp, #16
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e04a      	b.n	8003374 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	223d      	movs	r2, #61	; 0x3d
 80032e2:	5c9b      	ldrb	r3, [r3, r2]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d107      	bne.n	80032fa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	223c      	movs	r2, #60	; 0x3c
 80032ee:	2100      	movs	r1, #0
 80032f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7fd fcd3 	bl	8000ca0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	223d      	movs	r2, #61	; 0x3d
 80032fe:	2102      	movs	r1, #2
 8003300:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	0019      	movs	r1, r3
 800330c:	0010      	movs	r0, r2
 800330e:	f000 f935 	bl	800357c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2248      	movs	r2, #72	; 0x48
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	223e      	movs	r2, #62	; 0x3e
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	223f      	movs	r2, #63	; 0x3f
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2240      	movs	r2, #64	; 0x40
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2241      	movs	r2, #65	; 0x41
 8003336:	2101      	movs	r1, #1
 8003338:	5499      	strb	r1, [r3, r2]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2242      	movs	r2, #66	; 0x42
 800333e:	2101      	movs	r1, #1
 8003340:	5499      	strb	r1, [r3, r2]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2243      	movs	r2, #67	; 0x43
 8003346:	2101      	movs	r1, #1
 8003348:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2244      	movs	r2, #68	; 0x44
 800334e:	2101      	movs	r1, #1
 8003350:	5499      	strb	r1, [r3, r2]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2245      	movs	r2, #69	; 0x45
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2246      	movs	r2, #70	; 0x46
 800335e:	2101      	movs	r1, #1
 8003360:	5499      	strb	r1, [r3, r2]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2247      	movs	r2, #71	; 0x47
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	223d      	movs	r2, #61	; 0x3d
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	0018      	movs	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	b002      	add	sp, #8
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003388:	2317      	movs	r3, #23
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	223c      	movs	r2, #60	; 0x3c
 8003394:	5c9b      	ldrb	r3, [r3, r2]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_TIM_PWM_ConfigChannel+0x22>
 800339a:	2302      	movs	r3, #2
 800339c:	e0e5      	b.n	800356a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	223c      	movs	r2, #60	; 0x3c
 80033a2:	2101      	movs	r1, #1
 80033a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b14      	cmp	r3, #20
 80033aa:	d900      	bls.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x32>
 80033ac:	e0d1      	b.n	8003552 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	009a      	lsls	r2, r3, #2
 80033b2:	4b70      	ldr	r3, [pc, #448]	; (8003574 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80033b4:	18d3      	adds	r3, r2, r3
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	0011      	movs	r1, r2
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 f95e 	bl	8003684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2108      	movs	r1, #8
 80033d4:	430a      	orrs	r2, r1
 80033d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2104      	movs	r1, #4
 80033e4:	438a      	bics	r2, r1
 80033e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6999      	ldr	r1, [r3, #24]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	619a      	str	r2, [r3, #24]
      break;
 80033fa:	e0af      	b.n	800355c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	0011      	movs	r1, r2
 8003404:	0018      	movs	r0, r3
 8003406:	f000 f9bd 	bl	8003784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	0109      	lsls	r1, r1, #4
 8003418:	430a      	orrs	r2, r1
 800341a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4954      	ldr	r1, [pc, #336]	; (8003578 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003428:	400a      	ands	r2, r1
 800342a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6999      	ldr	r1, [r3, #24]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	021a      	lsls	r2, r3, #8
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	619a      	str	r2, [r3, #24]
      break;
 8003440:	e08c      	b.n	800355c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	0011      	movs	r1, r2
 800344a:	0018      	movs	r0, r3
 800344c:	f000 fa18 	bl	8003880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2108      	movs	r1, #8
 800345c:	430a      	orrs	r2, r1
 800345e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69da      	ldr	r2, [r3, #28]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2104      	movs	r1, #4
 800346c:	438a      	bics	r2, r1
 800346e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69d9      	ldr	r1, [r3, #28]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	61da      	str	r2, [r3, #28]
      break;
 8003482:	e06b      	b.n	800355c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	0011      	movs	r1, r2
 800348c:	0018      	movs	r0, r3
 800348e:	f000 fa79 	bl	8003984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2180      	movs	r1, #128	; 0x80
 800349e:	0109      	lsls	r1, r1, #4
 80034a0:	430a      	orrs	r2, r1
 80034a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69da      	ldr	r2, [r3, #28]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4932      	ldr	r1, [pc, #200]	; (8003578 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80034b0:	400a      	ands	r2, r1
 80034b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69d9      	ldr	r1, [r3, #28]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	021a      	lsls	r2, r3, #8
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	61da      	str	r2, [r3, #28]
      break;
 80034c8:	e048      	b.n	800355c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	0011      	movs	r1, r2
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 faba 	bl	8003a4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2108      	movs	r1, #8
 80034e4:	430a      	orrs	r2, r1
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2104      	movs	r1, #4
 80034f4:	438a      	bics	r2, r1
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800350a:	e027      	b.n	800355c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	0011      	movs	r1, r2
 8003514:	0018      	movs	r0, r3
 8003516:	f000 faf3 	bl	8003b00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2180      	movs	r1, #128	; 0x80
 8003526:	0109      	lsls	r1, r1, #4
 8003528:	430a      	orrs	r2, r1
 800352a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4910      	ldr	r1, [pc, #64]	; (8003578 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003538:	400a      	ands	r2, r1
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	021a      	lsls	r2, r3, #8
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003550:	e004      	b.n	800355c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003552:	2317      	movs	r3, #23
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	2201      	movs	r2, #1
 8003558:	701a      	strb	r2, [r3, #0]
      break;
 800355a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	223c      	movs	r2, #60	; 0x3c
 8003560:	2100      	movs	r1, #0
 8003562:	5499      	strb	r1, [r3, r2]

  return status;
 8003564:	2317      	movs	r3, #23
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	781b      	ldrb	r3, [r3, #0]
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b006      	add	sp, #24
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	0800542c 	.word	0x0800542c
 8003578:	fffffbff 	.word	0xfffffbff

0800357c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a37      	ldr	r2, [pc, #220]	; (800366c <TIM_Base_SetConfig+0xf0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d008      	beq.n	80035a6 <TIM_Base_SetConfig+0x2a>
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	05db      	lsls	r3, r3, #23
 800359a:	429a      	cmp	r2, r3
 800359c:	d003      	beq.n	80035a6 <TIM_Base_SetConfig+0x2a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a33      	ldr	r2, [pc, #204]	; (8003670 <TIM_Base_SetConfig+0xf4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d108      	bne.n	80035b8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2270      	movs	r2, #112	; 0x70
 80035aa:	4393      	bics	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a2c      	ldr	r2, [pc, #176]	; (800366c <TIM_Base_SetConfig+0xf0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d014      	beq.n	80035ea <TIM_Base_SetConfig+0x6e>
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	05db      	lsls	r3, r3, #23
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d00f      	beq.n	80035ea <TIM_Base_SetConfig+0x6e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a28      	ldr	r2, [pc, #160]	; (8003670 <TIM_Base_SetConfig+0xf4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00b      	beq.n	80035ea <TIM_Base_SetConfig+0x6e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a27      	ldr	r2, [pc, #156]	; (8003674 <TIM_Base_SetConfig+0xf8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d007      	beq.n	80035ea <TIM_Base_SetConfig+0x6e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a26      	ldr	r2, [pc, #152]	; (8003678 <TIM_Base_SetConfig+0xfc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d003      	beq.n	80035ea <TIM_Base_SetConfig+0x6e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a25      	ldr	r2, [pc, #148]	; (800367c <TIM_Base_SetConfig+0x100>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d108      	bne.n	80035fc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a24      	ldr	r2, [pc, #144]	; (8003680 <TIM_Base_SetConfig+0x104>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	4393      	bics	r3, r2
 8003602:	001a      	movs	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a11      	ldr	r2, [pc, #68]	; (800366c <TIM_Base_SetConfig+0xf0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d007      	beq.n	800363a <TIM_Base_SetConfig+0xbe>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a12      	ldr	r2, [pc, #72]	; (8003678 <TIM_Base_SetConfig+0xfc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d003      	beq.n	800363a <TIM_Base_SetConfig+0xbe>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a11      	ldr	r2, [pc, #68]	; (800367c <TIM_Base_SetConfig+0x100>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d103      	bne.n	8003642 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2201      	movs	r2, #1
 800364e:	4013      	ands	r3, r2
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2201      	movs	r2, #1
 800365a:	4393      	bics	r3, r2
 800365c:	001a      	movs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	611a      	str	r2, [r3, #16]
  }
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	b004      	add	sp, #16
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	40012c00 	.word	0x40012c00
 8003670:	40000400 	.word	0x40000400
 8003674:	40002000 	.word	0x40002000
 8003678:	40014400 	.word	0x40014400
 800367c:	40014800 	.word	0x40014800
 8003680:	fffffcff 	.word	0xfffffcff

08003684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	2201      	movs	r2, #1
 800369a:	4393      	bics	r3, r2
 800369c:	001a      	movs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a2e      	ldr	r2, [pc, #184]	; (800376c <TIM_OC1_SetConfig+0xe8>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2203      	movs	r2, #3
 80036ba:	4393      	bics	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2202      	movs	r2, #2
 80036cc:	4393      	bics	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a24      	ldr	r2, [pc, #144]	; (8003770 <TIM_OC1_SetConfig+0xec>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d007      	beq.n	80036f2 <TIM_OC1_SetConfig+0x6e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a23      	ldr	r2, [pc, #140]	; (8003774 <TIM_OC1_SetConfig+0xf0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d003      	beq.n	80036f2 <TIM_OC1_SetConfig+0x6e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a22      	ldr	r2, [pc, #136]	; (8003778 <TIM_OC1_SetConfig+0xf4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d10c      	bne.n	800370c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2208      	movs	r2, #8
 80036f6:	4393      	bics	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2204      	movs	r2, #4
 8003708:	4393      	bics	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a18      	ldr	r2, [pc, #96]	; (8003770 <TIM_OC1_SetConfig+0xec>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d007      	beq.n	8003724 <TIM_OC1_SetConfig+0xa0>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a17      	ldr	r2, [pc, #92]	; (8003774 <TIM_OC1_SetConfig+0xf0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <TIM_OC1_SetConfig+0xa0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a16      	ldr	r2, [pc, #88]	; (8003778 <TIM_OC1_SetConfig+0xf4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d111      	bne.n	8003748 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4a15      	ldr	r2, [pc, #84]	; (800377c <TIM_OC1_SetConfig+0xf8>)
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4a14      	ldr	r2, [pc, #80]	; (8003780 <TIM_OC1_SetConfig+0xfc>)
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b006      	add	sp, #24
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	fffeff8f 	.word	0xfffeff8f
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40014400 	.word	0x40014400
 8003778:	40014800 	.word	0x40014800
 800377c:	fffffeff 	.word	0xfffffeff
 8003780:	fffffdff 	.word	0xfffffdff

08003784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	2210      	movs	r2, #16
 800379a:	4393      	bics	r3, r2
 800379c:	001a      	movs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4a2c      	ldr	r2, [pc, #176]	; (8003864 <TIM_OC2_SetConfig+0xe0>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4a2b      	ldr	r2, [pc, #172]	; (8003868 <TIM_OC2_SetConfig+0xe4>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2220      	movs	r2, #32
 80037ce:	4393      	bics	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a22      	ldr	r2, [pc, #136]	; (800386c <TIM_OC2_SetConfig+0xe8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10d      	bne.n	8003802 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2280      	movs	r2, #128	; 0x80
 80037ea:	4393      	bics	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2240      	movs	r2, #64	; 0x40
 80037fe:	4393      	bics	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a19      	ldr	r2, [pc, #100]	; (800386c <TIM_OC2_SetConfig+0xe8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d007      	beq.n	800381a <TIM_OC2_SetConfig+0x96>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a18      	ldr	r2, [pc, #96]	; (8003870 <TIM_OC2_SetConfig+0xec>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d003      	beq.n	800381a <TIM_OC2_SetConfig+0x96>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <TIM_OC2_SetConfig+0xf0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d113      	bne.n	8003842 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4a16      	ldr	r2, [pc, #88]	; (8003878 <TIM_OC2_SetConfig+0xf4>)
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4a15      	ldr	r2, [pc, #84]	; (800387c <TIM_OC2_SetConfig+0xf8>)
 8003826:	4013      	ands	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	621a      	str	r2, [r3, #32]
}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b006      	add	sp, #24
 8003862:	bd80      	pop	{r7, pc}
 8003864:	feff8fff 	.word	0xfeff8fff
 8003868:	fffffcff 	.word	0xfffffcff
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40014400 	.word	0x40014400
 8003874:	40014800 	.word	0x40014800
 8003878:	fffffbff 	.word	0xfffffbff
 800387c:	fffff7ff 	.word	0xfffff7ff

08003880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	4a31      	ldr	r2, [pc, #196]	; (800395c <TIM_OC3_SetConfig+0xdc>)
 8003896:	401a      	ands	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a2d      	ldr	r2, [pc, #180]	; (8003960 <TIM_OC3_SetConfig+0xe0>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2203      	movs	r2, #3
 80038b4:	4393      	bics	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	4a27      	ldr	r2, [pc, #156]	; (8003964 <TIM_OC3_SetConfig+0xe4>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a23      	ldr	r2, [pc, #140]	; (8003968 <TIM_OC3_SetConfig+0xe8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10d      	bne.n	80038fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	4a22      	ldr	r2, [pc, #136]	; (800396c <TIM_OC3_SetConfig+0xec>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <TIM_OC3_SetConfig+0xf0>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1a      	ldr	r2, [pc, #104]	; (8003968 <TIM_OC3_SetConfig+0xe8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <TIM_OC3_SetConfig+0x92>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <TIM_OC3_SetConfig+0xf4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d003      	beq.n	8003912 <TIM_OC3_SetConfig+0x92>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1a      	ldr	r2, [pc, #104]	; (8003978 <TIM_OC3_SetConfig+0xf8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d113      	bne.n	800393a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4a19      	ldr	r2, [pc, #100]	; (800397c <TIM_OC3_SetConfig+0xfc>)
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4a18      	ldr	r2, [pc, #96]	; (8003980 <TIM_OC3_SetConfig+0x100>)
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	621a      	str	r2, [r3, #32]
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b006      	add	sp, #24
 800395a:	bd80      	pop	{r7, pc}
 800395c:	fffffeff 	.word	0xfffffeff
 8003960:	fffeff8f 	.word	0xfffeff8f
 8003964:	fffffdff 	.word	0xfffffdff
 8003968:	40012c00 	.word	0x40012c00
 800396c:	fffff7ff 	.word	0xfffff7ff
 8003970:	fffffbff 	.word	0xfffffbff
 8003974:	40014400 	.word	0x40014400
 8003978:	40014800 	.word	0x40014800
 800397c:	ffffefff 	.word	0xffffefff
 8003980:	ffffdfff 	.word	0xffffdfff

08003984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	4a24      	ldr	r2, [pc, #144]	; (8003a2c <TIM_OC4_SetConfig+0xa8>)
 800399a:	401a      	ands	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4a20      	ldr	r2, [pc, #128]	; (8003a30 <TIM_OC4_SetConfig+0xac>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a1f      	ldr	r2, [pc, #124]	; (8003a34 <TIM_OC4_SetConfig+0xb0>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4a1b      	ldr	r2, [pc, #108]	; (8003a38 <TIM_OC4_SetConfig+0xb4>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	031b      	lsls	r3, r3, #12
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <TIM_OC4_SetConfig+0xb8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d007      	beq.n	80039f4 <TIM_OC4_SetConfig+0x70>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <TIM_OC4_SetConfig+0xbc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_OC4_SetConfig+0x70>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <TIM_OC4_SetConfig+0xc0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d109      	bne.n	8003a08 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <TIM_OC4_SetConfig+0xc4>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	019b      	lsls	r3, r3, #6
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	621a      	str	r2, [r3, #32]
}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b006      	add	sp, #24
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	ffffefff 	.word	0xffffefff
 8003a30:	feff8fff 	.word	0xfeff8fff
 8003a34:	fffffcff 	.word	0xfffffcff
 8003a38:	ffffdfff 	.word	0xffffdfff
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40014400 	.word	0x40014400
 8003a44:	40014800 	.word	0x40014800
 8003a48:	ffffbfff 	.word	0xffffbfff

08003a4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <TIM_OC5_SetConfig+0x9c>)
 8003a62:	401a      	ands	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <TIM_OC5_SetConfig+0xa0>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4a19      	ldr	r2, [pc, #100]	; (8003af0 <TIM_OC5_SetConfig+0xa4>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	041b      	lsls	r3, r3, #16
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <TIM_OC5_SetConfig+0xa8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d007      	beq.n	8003ab2 <TIM_OC5_SetConfig+0x66>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <TIM_OC5_SetConfig+0xac>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d003      	beq.n	8003ab2 <TIM_OC5_SetConfig+0x66>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a13      	ldr	r2, [pc, #76]	; (8003afc <TIM_OC5_SetConfig+0xb0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d109      	bne.n	8003ac6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <TIM_OC5_SetConfig+0x9c>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	621a      	str	r2, [r3, #32]
}
 8003ae0:	46c0      	nop			; (mov r8, r8)
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b006      	add	sp, #24
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	fffeffff 	.word	0xfffeffff
 8003aec:	fffeff8f 	.word	0xfffeff8f
 8003af0:	fffdffff 	.word	0xfffdffff
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40014400 	.word	0x40014400
 8003afc:	40014800 	.word	0x40014800

08003b00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	4a22      	ldr	r2, [pc, #136]	; (8003ba0 <TIM_OC6_SetConfig+0xa0>)
 8003b16:	401a      	ands	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ba4 <TIM_OC6_SetConfig+0xa4>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ba8 <TIM_OC6_SetConfig+0xa8>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	051b      	lsls	r3, r3, #20
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a16      	ldr	r2, [pc, #88]	; (8003bac <TIM_OC6_SetConfig+0xac>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d007      	beq.n	8003b68 <TIM_OC6_SetConfig+0x68>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <TIM_OC6_SetConfig+0xb0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_OC6_SetConfig+0x68>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <TIM_OC6_SetConfig+0xb4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d109      	bne.n	8003b7c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <TIM_OC6_SetConfig+0xb8>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	029b      	lsls	r3, r3, #10
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	621a      	str	r2, [r3, #32]
}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b006      	add	sp, #24
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	ffefffff 	.word	0xffefffff
 8003ba4:	feff8fff 	.word	0xfeff8fff
 8003ba8:	ffdfffff 	.word	0xffdfffff
 8003bac:	40012c00 	.word	0x40012c00
 8003bb0:	40014400 	.word	0x40014400
 8003bb4:	40014800 	.word	0x40014800
 8003bb8:	fffbffff 	.word	0xfffbffff

08003bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	223c      	movs	r2, #60	; 0x3c
 8003bca:	5c9b      	ldrb	r3, [r3, r2]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e050      	b.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	223c      	movs	r2, #60	; 0x3c
 8003bd8:	2101      	movs	r1, #1
 8003bda:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	223d      	movs	r2, #61	; 0x3d
 8003be0:	2102      	movs	r1, #2
 8003be2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a20      	ldr	r2, [pc, #128]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2270      	movs	r2, #112	; 0x70
 8003c14:	4393      	bics	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00a      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	05db      	lsls	r3, r3, #23
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a10      	ldr	r2, [pc, #64]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10c      	bne.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2280      	movs	r2, #128	; 0x80
 8003c4e:	4393      	bics	r3, r2
 8003c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	223d      	movs	r2, #61	; 0x3d
 8003c68:	2101      	movs	r1, #1
 8003c6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	223c      	movs	r2, #60	; 0x3c
 8003c70:	2100      	movs	r1, #0
 8003c72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	0018      	movs	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b004      	add	sp, #16
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	40012c00 	.word	0x40012c00
 8003c84:	ff0fffff 	.word	0xff0fffff
 8003c88:	40000400 	.word	0x40000400

08003c8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	223c      	movs	r2, #60	; 0x3c
 8003c9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e06f      	b.n	8003d88 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	223c      	movs	r2, #60	; 0x3c
 8003cac:	2101      	movs	r1, #1
 8003cae:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	22ff      	movs	r2, #255	; 0xff
 8003cb4:	4393      	bics	r3, r2
 8003cb6:	001a      	movs	r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a33      	ldr	r2, [pc, #204]	; (8003d90 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4a30      	ldr	r2, [pc, #192]	; (8003d94 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a2e      	ldr	r2, [pc, #184]	; (8003d98 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003ce0:	401a      	ands	r2, r3
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4a2b      	ldr	r2, [pc, #172]	; (8003d9c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003cee:	401a      	ands	r2, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a29      	ldr	r2, [pc, #164]	; (8003da0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003d0a:	401a      	ands	r2, r3
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4a24      	ldr	r2, [pc, #144]	; (8003da8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003d18:	401a      	ands	r2, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4a21      	ldr	r2, [pc, #132]	; (8003dac <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003d28:	401a      	ands	r2, r3
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1e      	ldr	r2, [pc, #120]	; (8003db0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d11c      	bne.n	8003d76 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003d40:	401a      	ands	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	051b      	lsls	r3, r3, #20
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4a1a      	ldr	r2, [pc, #104]	; (8003db8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003d50:	401a      	ands	r2, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003d5e:	401a      	ands	r2, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003d6c:	401a      	ands	r2, r3
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	223c      	movs	r2, #60	; 0x3c
 8003d82:	2100      	movs	r1, #0
 8003d84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	0018      	movs	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b004      	add	sp, #16
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	fffffcff 	.word	0xfffffcff
 8003d94:	fffffbff 	.word	0xfffffbff
 8003d98:	fffff7ff 	.word	0xfffff7ff
 8003d9c:	ffffefff 	.word	0xffffefff
 8003da0:	ffffdfff 	.word	0xffffdfff
 8003da4:	ffffbfff 	.word	0xffffbfff
 8003da8:	fff0ffff 	.word	0xfff0ffff
 8003dac:	efffffff 	.word	0xefffffff
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	ff0fffff 	.word	0xff0fffff
 8003db8:	feffffff 	.word	0xfeffffff
 8003dbc:	fdffffff 	.word	0xfdffffff
 8003dc0:	dfffffff 	.word	0xdfffffff

08003dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e046      	b.n	8003e64 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2288      	movs	r2, #136	; 0x88
 8003dda:	589b      	ldr	r3, [r3, r2]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d107      	bne.n	8003df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2284      	movs	r2, #132	; 0x84
 8003de4:	2100      	movs	r1, #0
 8003de6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	0018      	movs	r0, r3
 8003dec:	f7fd f81a 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2288      	movs	r2, #136	; 0x88
 8003df4:	2124      	movs	r1, #36	; 0x24
 8003df6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2101      	movs	r1, #1
 8003e04:	438a      	bics	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f000 fc2e 	bl	8004674 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 f9b2 	bl	8004184 <UART_SetConfig>
 8003e20:	0003      	movs	r3, r0
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e01c      	b.n	8003e64 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	490d      	ldr	r1, [pc, #52]	; (8003e6c <HAL_UART_Init+0xa8>)
 8003e36:	400a      	ands	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	212a      	movs	r1, #42	; 0x2a
 8003e46:	438a      	bics	r2, r1
 8003e48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2101      	movs	r1, #1
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f000 fcbd 	bl	80047dc <UART_CheckIdleState>
 8003e62:	0003      	movs	r3, r0
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b002      	add	sp, #8
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	ffffb7ff 	.word	0xffffb7ff

08003e70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	1dbb      	adds	r3, r7, #6
 8003e7e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2288      	movs	r2, #136	; 0x88
 8003e84:	589b      	ldr	r3, [r3, r2]
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d000      	beq.n	8003e8c <HAL_UART_Transmit+0x1c>
 8003e8a:	e090      	b.n	8003fae <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_UART_Transmit+0x2a>
 8003e92:	1dbb      	adds	r3, r7, #6
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e088      	b.n	8003fb0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	015b      	lsls	r3, r3, #5
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d109      	bne.n	8003ebe <HAL_UART_Transmit+0x4e>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d105      	bne.n	8003ebe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d001      	beq.n	8003ebe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e078      	b.n	8003fb0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2290      	movs	r2, #144	; 0x90
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2288      	movs	r2, #136	; 0x88
 8003eca:	2121      	movs	r1, #33	; 0x21
 8003ecc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ece:	f7fd f8b1 	bl	8001034 <HAL_GetTick>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1dba      	adds	r2, r7, #6
 8003eda:	2154      	movs	r1, #84	; 0x54
 8003edc:	8812      	ldrh	r2, [r2, #0]
 8003ede:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1dba      	adds	r2, r7, #6
 8003ee4:	2156      	movs	r1, #86	; 0x56
 8003ee6:	8812      	ldrh	r2, [r2, #0]
 8003ee8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	015b      	lsls	r3, r3, #5
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d108      	bne.n	8003f08 <HAL_UART_Transmit+0x98>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d104      	bne.n	8003f08 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	e003      	b.n	8003f10 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f10:	e030      	b.n	8003f74 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	0013      	movs	r3, r2
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2180      	movs	r1, #128	; 0x80
 8003f20:	f000 fd06 	bl	8004930 <UART_WaitOnFlagUntilTimeout>
 8003f24:	1e03      	subs	r3, r0, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2288      	movs	r2, #136	; 0x88
 8003f2c:	2120      	movs	r1, #32
 8003f2e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e03d      	b.n	8003fb0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10b      	bne.n	8003f52 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	001a      	movs	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	05d2      	lsls	r2, r2, #23
 8003f46:	0dd2      	lsrs	r2, r2, #23
 8003f48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	e007      	b.n	8003f62 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	781a      	ldrb	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2256      	movs	r2, #86	; 0x56
 8003f66:	5a9b      	ldrh	r3, [r3, r2]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b299      	uxth	r1, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2256      	movs	r2, #86	; 0x56
 8003f72:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2256      	movs	r2, #86	; 0x56
 8003f78:	5a9b      	ldrh	r3, [r3, r2]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1c8      	bne.n	8003f12 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	0013      	movs	r3, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2140      	movs	r1, #64	; 0x40
 8003f8e:	f000 fccf 	bl	8004930 <UART_WaitOnFlagUntilTimeout>
 8003f92:	1e03      	subs	r3, r0, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2288      	movs	r2, #136	; 0x88
 8003f9a:	2120      	movs	r1, #32
 8003f9c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e006      	b.n	8003fb0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2288      	movs	r2, #136	; 0x88
 8003fa6:	2120      	movs	r1, #32
 8003fa8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e000      	b.n	8003fb0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003fae:	2302      	movs	r3, #2
  }
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b008      	add	sp, #32
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	; 0x28
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	1dbb      	adds	r3, r7, #6
 8003fc6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	228c      	movs	r2, #140	; 0x8c
 8003fcc:	589b      	ldr	r3, [r3, r2]
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d000      	beq.n	8003fd4 <HAL_UART_Receive+0x1c>
 8003fd2:	e0d0      	b.n	8004176 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_UART_Receive+0x2a>
 8003fda:	1dbb      	adds	r3, r7, #6
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e0c8      	b.n	8004178 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	015b      	lsls	r3, r3, #5
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d109      	bne.n	8004006 <HAL_UART_Receive+0x4e>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d105      	bne.n	8004006 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	4013      	ands	r3, r2
 8004000:	d001      	beq.n	8004006 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e0b8      	b.n	8004178 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2290      	movs	r2, #144	; 0x90
 800400a:	2100      	movs	r1, #0
 800400c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	228c      	movs	r2, #140	; 0x8c
 8004012:	2122      	movs	r1, #34	; 0x22
 8004014:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800401c:	f7fd f80a 	bl	8001034 <HAL_GetTick>
 8004020:	0003      	movs	r3, r0
 8004022:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1dba      	adds	r2, r7, #6
 8004028:	215c      	movs	r1, #92	; 0x5c
 800402a:	8812      	ldrh	r2, [r2, #0]
 800402c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1dba      	adds	r2, r7, #6
 8004032:	215e      	movs	r1, #94	; 0x5e
 8004034:	8812      	ldrh	r2, [r2, #0]
 8004036:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	015b      	lsls	r3, r3, #5
 8004040:	429a      	cmp	r2, r3
 8004042:	d10d      	bne.n	8004060 <HAL_UART_Receive+0xa8>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <HAL_UART_Receive+0x9e>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2260      	movs	r2, #96	; 0x60
 8004050:	494b      	ldr	r1, [pc, #300]	; (8004180 <HAL_UART_Receive+0x1c8>)
 8004052:	5299      	strh	r1, [r3, r2]
 8004054:	e02e      	b.n	80040b4 <HAL_UART_Receive+0xfc>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2260      	movs	r2, #96	; 0x60
 800405a:	21ff      	movs	r1, #255	; 0xff
 800405c:	5299      	strh	r1, [r3, r2]
 800405e:	e029      	b.n	80040b4 <HAL_UART_Receive+0xfc>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10d      	bne.n	8004084 <HAL_UART_Receive+0xcc>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d104      	bne.n	800407a <HAL_UART_Receive+0xc2>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2260      	movs	r2, #96	; 0x60
 8004074:	21ff      	movs	r1, #255	; 0xff
 8004076:	5299      	strh	r1, [r3, r2]
 8004078:	e01c      	b.n	80040b4 <HAL_UART_Receive+0xfc>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2260      	movs	r2, #96	; 0x60
 800407e:	217f      	movs	r1, #127	; 0x7f
 8004080:	5299      	strh	r1, [r3, r2]
 8004082:	e017      	b.n	80040b4 <HAL_UART_Receive+0xfc>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	055b      	lsls	r3, r3, #21
 800408c:	429a      	cmp	r2, r3
 800408e:	d10d      	bne.n	80040ac <HAL_UART_Receive+0xf4>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d104      	bne.n	80040a2 <HAL_UART_Receive+0xea>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2260      	movs	r2, #96	; 0x60
 800409c:	217f      	movs	r1, #127	; 0x7f
 800409e:	5299      	strh	r1, [r3, r2]
 80040a0:	e008      	b.n	80040b4 <HAL_UART_Receive+0xfc>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2260      	movs	r2, #96	; 0x60
 80040a6:	213f      	movs	r1, #63	; 0x3f
 80040a8:	5299      	strh	r1, [r3, r2]
 80040aa:	e003      	b.n	80040b4 <HAL_UART_Receive+0xfc>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2260      	movs	r2, #96	; 0x60
 80040b0:	2100      	movs	r1, #0
 80040b2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80040b4:	2312      	movs	r3, #18
 80040b6:	18fb      	adds	r3, r7, r3
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	2160      	movs	r1, #96	; 0x60
 80040bc:	5a52      	ldrh	r2, [r2, r1]
 80040be:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	015b      	lsls	r3, r3, #5
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d108      	bne.n	80040de <HAL_UART_Receive+0x126>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	e003      	b.n	80040e6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80040e6:	e03a      	b.n	800415e <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	0013      	movs	r3, r2
 80040f2:	2200      	movs	r2, #0
 80040f4:	2120      	movs	r1, #32
 80040f6:	f000 fc1b 	bl	8004930 <UART_WaitOnFlagUntilTimeout>
 80040fa:	1e03      	subs	r3, r0, #0
 80040fc:	d005      	beq.n	800410a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	228c      	movs	r2, #140	; 0x8c
 8004102:	2120      	movs	r1, #32
 8004104:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e036      	b.n	8004178 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10e      	bne.n	800412e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	b29b      	uxth	r3, r3
 8004118:	2212      	movs	r2, #18
 800411a:	18ba      	adds	r2, r7, r2
 800411c:	8812      	ldrh	r2, [r2, #0]
 800411e:	4013      	ands	r3, r2
 8004120:	b29a      	uxth	r2, r3
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	3302      	adds	r3, #2
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	e00e      	b.n	800414c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2212      	movs	r2, #18
 8004138:	18ba      	adds	r2, r7, r2
 800413a:	8812      	ldrh	r2, [r2, #0]
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	4013      	ands	r3, r2
 8004140:	b2da      	uxtb	r2, r3
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	3301      	adds	r3, #1
 800414a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	225e      	movs	r2, #94	; 0x5e
 8004150:	5a9b      	ldrh	r3, [r3, r2]
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b299      	uxth	r1, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	225e      	movs	r2, #94	; 0x5e
 800415c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	225e      	movs	r2, #94	; 0x5e
 8004162:	5a9b      	ldrh	r3, [r3, r2]
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1be      	bne.n	80040e8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	228c      	movs	r2, #140	; 0x8c
 800416e:	2120      	movs	r1, #32
 8004170:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e000      	b.n	8004178 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
  }
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b008      	add	sp, #32
 800417e:	bd80      	pop	{r7, pc}
 8004180:	000001ff 	.word	0x000001ff

08004184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004184:	b5b0      	push	{r4, r5, r7, lr}
 8004186:	b090      	sub	sp, #64	; 0x40
 8004188:	af00      	add	r7, sp, #0
 800418a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800418c:	231a      	movs	r3, #26
 800418e:	2220      	movs	r2, #32
 8004190:	189b      	adds	r3, r3, r2
 8004192:	19db      	adds	r3, r3, r7
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	431a      	orrs	r2, r3
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4ac4      	ldr	r2, [pc, #784]	; (80044c8 <UART_SetConfig+0x344>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c2:	430b      	orrs	r3, r1
 80041c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4abf      	ldr	r2, [pc, #764]	; (80044cc <UART_SetConfig+0x348>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	0018      	movs	r0, r3
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	68d9      	ldr	r1, [r3, #12]
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	0003      	movs	r3, r0
 80041dc:	430b      	orrs	r3, r1
 80041de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4ab9      	ldr	r2, [pc, #740]	; (80044d0 <UART_SetConfig+0x34c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041f6:	4313      	orrs	r3, r2
 80041f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	4ab4      	ldr	r2, [pc, #720]	; (80044d4 <UART_SetConfig+0x350>)
 8004202:	4013      	ands	r3, r2
 8004204:	0019      	movs	r1, r3
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420c:	430b      	orrs	r3, r1
 800420e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	220f      	movs	r2, #15
 8004218:	4393      	bics	r3, r2
 800421a:	0018      	movs	r0, r3
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	0003      	movs	r3, r0
 8004226:	430b      	orrs	r3, r1
 8004228:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4aaa      	ldr	r2, [pc, #680]	; (80044d8 <UART_SetConfig+0x354>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d131      	bne.n	8004298 <UART_SetConfig+0x114>
 8004234:	4ba9      	ldr	r3, [pc, #676]	; (80044dc <UART_SetConfig+0x358>)
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	2203      	movs	r2, #3
 800423a:	4013      	ands	r3, r2
 800423c:	2b03      	cmp	r3, #3
 800423e:	d01d      	beq.n	800427c <UART_SetConfig+0xf8>
 8004240:	d823      	bhi.n	800428a <UART_SetConfig+0x106>
 8004242:	2b02      	cmp	r3, #2
 8004244:	d00c      	beq.n	8004260 <UART_SetConfig+0xdc>
 8004246:	d820      	bhi.n	800428a <UART_SetConfig+0x106>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <UART_SetConfig+0xce>
 800424c:	2b01      	cmp	r3, #1
 800424e:	d00e      	beq.n	800426e <UART_SetConfig+0xea>
 8004250:	e01b      	b.n	800428a <UART_SetConfig+0x106>
 8004252:	231b      	movs	r3, #27
 8004254:	2220      	movs	r2, #32
 8004256:	189b      	adds	r3, r3, r2
 8004258:	19db      	adds	r3, r3, r7
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	e071      	b.n	8004344 <UART_SetConfig+0x1c0>
 8004260:	231b      	movs	r3, #27
 8004262:	2220      	movs	r2, #32
 8004264:	189b      	adds	r3, r3, r2
 8004266:	19db      	adds	r3, r3, r7
 8004268:	2202      	movs	r2, #2
 800426a:	701a      	strb	r2, [r3, #0]
 800426c:	e06a      	b.n	8004344 <UART_SetConfig+0x1c0>
 800426e:	231b      	movs	r3, #27
 8004270:	2220      	movs	r2, #32
 8004272:	189b      	adds	r3, r3, r2
 8004274:	19db      	adds	r3, r3, r7
 8004276:	2204      	movs	r2, #4
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	e063      	b.n	8004344 <UART_SetConfig+0x1c0>
 800427c:	231b      	movs	r3, #27
 800427e:	2220      	movs	r2, #32
 8004280:	189b      	adds	r3, r3, r2
 8004282:	19db      	adds	r3, r3, r7
 8004284:	2208      	movs	r2, #8
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	e05c      	b.n	8004344 <UART_SetConfig+0x1c0>
 800428a:	231b      	movs	r3, #27
 800428c:	2220      	movs	r2, #32
 800428e:	189b      	adds	r3, r3, r2
 8004290:	19db      	adds	r3, r3, r7
 8004292:	2210      	movs	r2, #16
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	e055      	b.n	8004344 <UART_SetConfig+0x1c0>
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a90      	ldr	r2, [pc, #576]	; (80044e0 <UART_SetConfig+0x35c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d106      	bne.n	80042b0 <UART_SetConfig+0x12c>
 80042a2:	231b      	movs	r3, #27
 80042a4:	2220      	movs	r2, #32
 80042a6:	189b      	adds	r3, r3, r2
 80042a8:	19db      	adds	r3, r3, r7
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e049      	b.n	8004344 <UART_SetConfig+0x1c0>
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a86      	ldr	r2, [pc, #536]	; (80044d0 <UART_SetConfig+0x34c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d13e      	bne.n	8004338 <UART_SetConfig+0x1b4>
 80042ba:	4b88      	ldr	r3, [pc, #544]	; (80044dc <UART_SetConfig+0x358>)
 80042bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042be:	23c0      	movs	r3, #192	; 0xc0
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	4013      	ands	r3, r2
 80042c4:	22c0      	movs	r2, #192	; 0xc0
 80042c6:	0112      	lsls	r2, r2, #4
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d027      	beq.n	800431c <UART_SetConfig+0x198>
 80042cc:	22c0      	movs	r2, #192	; 0xc0
 80042ce:	0112      	lsls	r2, r2, #4
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d82a      	bhi.n	800432a <UART_SetConfig+0x1a6>
 80042d4:	2280      	movs	r2, #128	; 0x80
 80042d6:	0112      	lsls	r2, r2, #4
 80042d8:	4293      	cmp	r3, r2
 80042da:	d011      	beq.n	8004300 <UART_SetConfig+0x17c>
 80042dc:	2280      	movs	r2, #128	; 0x80
 80042de:	0112      	lsls	r2, r2, #4
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d822      	bhi.n	800432a <UART_SetConfig+0x1a6>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <UART_SetConfig+0x16e>
 80042e8:	2280      	movs	r2, #128	; 0x80
 80042ea:	00d2      	lsls	r2, r2, #3
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00e      	beq.n	800430e <UART_SetConfig+0x18a>
 80042f0:	e01b      	b.n	800432a <UART_SetConfig+0x1a6>
 80042f2:	231b      	movs	r3, #27
 80042f4:	2220      	movs	r2, #32
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	19db      	adds	r3, r3, r7
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e021      	b.n	8004344 <UART_SetConfig+0x1c0>
 8004300:	231b      	movs	r3, #27
 8004302:	2220      	movs	r2, #32
 8004304:	189b      	adds	r3, r3, r2
 8004306:	19db      	adds	r3, r3, r7
 8004308:	2202      	movs	r2, #2
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	e01a      	b.n	8004344 <UART_SetConfig+0x1c0>
 800430e:	231b      	movs	r3, #27
 8004310:	2220      	movs	r2, #32
 8004312:	189b      	adds	r3, r3, r2
 8004314:	19db      	adds	r3, r3, r7
 8004316:	2204      	movs	r2, #4
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e013      	b.n	8004344 <UART_SetConfig+0x1c0>
 800431c:	231b      	movs	r3, #27
 800431e:	2220      	movs	r2, #32
 8004320:	189b      	adds	r3, r3, r2
 8004322:	19db      	adds	r3, r3, r7
 8004324:	2208      	movs	r2, #8
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	e00c      	b.n	8004344 <UART_SetConfig+0x1c0>
 800432a:	231b      	movs	r3, #27
 800432c:	2220      	movs	r2, #32
 800432e:	189b      	adds	r3, r3, r2
 8004330:	19db      	adds	r3, r3, r7
 8004332:	2210      	movs	r2, #16
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	e005      	b.n	8004344 <UART_SetConfig+0x1c0>
 8004338:	231b      	movs	r3, #27
 800433a:	2220      	movs	r2, #32
 800433c:	189b      	adds	r3, r3, r2
 800433e:	19db      	adds	r3, r3, r7
 8004340:	2210      	movs	r2, #16
 8004342:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a61      	ldr	r2, [pc, #388]	; (80044d0 <UART_SetConfig+0x34c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d000      	beq.n	8004350 <UART_SetConfig+0x1cc>
 800434e:	e092      	b.n	8004476 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004350:	231b      	movs	r3, #27
 8004352:	2220      	movs	r2, #32
 8004354:	189b      	adds	r3, r3, r2
 8004356:	19db      	adds	r3, r3, r7
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b08      	cmp	r3, #8
 800435c:	d015      	beq.n	800438a <UART_SetConfig+0x206>
 800435e:	dc18      	bgt.n	8004392 <UART_SetConfig+0x20e>
 8004360:	2b04      	cmp	r3, #4
 8004362:	d00d      	beq.n	8004380 <UART_SetConfig+0x1fc>
 8004364:	dc15      	bgt.n	8004392 <UART_SetConfig+0x20e>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <UART_SetConfig+0x1ec>
 800436a:	2b02      	cmp	r3, #2
 800436c:	d005      	beq.n	800437a <UART_SetConfig+0x1f6>
 800436e:	e010      	b.n	8004392 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004370:	f7fd fefc 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8004374:	0003      	movs	r3, r0
 8004376:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004378:	e014      	b.n	80043a4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800437a:	4b5a      	ldr	r3, [pc, #360]	; (80044e4 <UART_SetConfig+0x360>)
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800437e:	e011      	b.n	80043a4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004380:	f7fd fe68 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 8004384:	0003      	movs	r3, r0
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004388:	e00c      	b.n	80043a4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004390:	e008      	b.n	80043a4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004396:	231a      	movs	r3, #26
 8004398:	2220      	movs	r2, #32
 800439a:	189b      	adds	r3, r3, r2
 800439c:	19db      	adds	r3, r3, r7
 800439e:	2201      	movs	r2, #1
 80043a0:	701a      	strb	r2, [r3, #0]
        break;
 80043a2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d100      	bne.n	80043ac <UART_SetConfig+0x228>
 80043aa:	e147      	b.n	800463c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b0:	4b4d      	ldr	r3, [pc, #308]	; (80044e8 <UART_SetConfig+0x364>)
 80043b2:	0052      	lsls	r2, r2, #1
 80043b4:	5ad3      	ldrh	r3, [r2, r3]
 80043b6:	0019      	movs	r1, r3
 80043b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043ba:	f7fb fea3 	bl	8000104 <__udivsi3>
 80043be:	0003      	movs	r3, r0
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	0013      	movs	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d305      	bcc.n	80043de <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043da:	429a      	cmp	r2, r3
 80043dc:	d906      	bls.n	80043ec <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80043de:	231a      	movs	r3, #26
 80043e0:	2220      	movs	r2, #32
 80043e2:	189b      	adds	r3, r3, r2
 80043e4:	19db      	adds	r3, r3, r7
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	e127      	b.n	800463c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f8:	4b3b      	ldr	r3, [pc, #236]	; (80044e8 <UART_SetConfig+0x364>)
 80043fa:	0052      	lsls	r2, r2, #1
 80043fc:	5ad3      	ldrh	r3, [r2, r3]
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	69b8      	ldr	r0, [r7, #24]
 800440a:	69f9      	ldr	r1, [r7, #28]
 800440c:	f7fb fff0 	bl	80003f0 <__aeabi_uldivmod>
 8004410:	0002      	movs	r2, r0
 8004412:	000b      	movs	r3, r1
 8004414:	0e11      	lsrs	r1, r2, #24
 8004416:	021d      	lsls	r5, r3, #8
 8004418:	430d      	orrs	r5, r1
 800441a:	0214      	lsls	r4, r2, #8
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68b8      	ldr	r0, [r7, #8]
 800442a:	68f9      	ldr	r1, [r7, #12]
 800442c:	1900      	adds	r0, r0, r4
 800442e:	4169      	adcs	r1, r5
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	2300      	movs	r3, #0
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f7fb ffd7 	bl	80003f0 <__aeabi_uldivmod>
 8004442:	0002      	movs	r2, r0
 8004444:	000b      	movs	r3, r1
 8004446:	0013      	movs	r3, r2
 8004448:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800444a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444c:	23c0      	movs	r3, #192	; 0xc0
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	429a      	cmp	r2, r3
 8004452:	d309      	bcc.n	8004468 <UART_SetConfig+0x2e4>
 8004454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	035b      	lsls	r3, r3, #13
 800445a:	429a      	cmp	r2, r3
 800445c:	d204      	bcs.n	8004468 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	e0e9      	b.n	800463c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004468:	231a      	movs	r3, #26
 800446a:	2220      	movs	r2, #32
 800446c:	189b      	adds	r3, r3, r2
 800446e:	19db      	adds	r3, r3, r7
 8004470:	2201      	movs	r2, #1
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	e0e2      	b.n	800463c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	429a      	cmp	r2, r3
 8004480:	d000      	beq.n	8004484 <UART_SetConfig+0x300>
 8004482:	e083      	b.n	800458c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004484:	231b      	movs	r3, #27
 8004486:	2220      	movs	r2, #32
 8004488:	189b      	adds	r3, r3, r2
 800448a:	19db      	adds	r3, r3, r7
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b08      	cmp	r3, #8
 8004490:	d015      	beq.n	80044be <UART_SetConfig+0x33a>
 8004492:	dc2b      	bgt.n	80044ec <UART_SetConfig+0x368>
 8004494:	2b04      	cmp	r3, #4
 8004496:	d00d      	beq.n	80044b4 <UART_SetConfig+0x330>
 8004498:	dc28      	bgt.n	80044ec <UART_SetConfig+0x368>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <UART_SetConfig+0x320>
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d005      	beq.n	80044ae <UART_SetConfig+0x32a>
 80044a2:	e023      	b.n	80044ec <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a4:	f7fd fe62 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 80044a8:	0003      	movs	r3, r0
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044ac:	e027      	b.n	80044fe <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044ae:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <UART_SetConfig+0x360>)
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044b2:	e024      	b.n	80044fe <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b4:	f7fd fdce 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 80044b8:	0003      	movs	r3, r0
 80044ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044bc:	e01f      	b.n	80044fe <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044c4:	e01b      	b.n	80044fe <UART_SetConfig+0x37a>
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	cfff69f3 	.word	0xcfff69f3
 80044cc:	ffffcfff 	.word	0xffffcfff
 80044d0:	40008000 	.word	0x40008000
 80044d4:	11fff4ff 	.word	0x11fff4ff
 80044d8:	40013800 	.word	0x40013800
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40004400 	.word	0x40004400
 80044e4:	00f42400 	.word	0x00f42400
 80044e8:	08005480 	.word	0x08005480
      default:
        pclk = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80044f0:	231a      	movs	r3, #26
 80044f2:	2220      	movs	r2, #32
 80044f4:	189b      	adds	r3, r3, r2
 80044f6:	19db      	adds	r3, r3, r7
 80044f8:	2201      	movs	r2, #1
 80044fa:	701a      	strb	r2, [r3, #0]
        break;
 80044fc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004500:	2b00      	cmp	r3, #0
 8004502:	d100      	bne.n	8004506 <UART_SetConfig+0x382>
 8004504:	e09a      	b.n	800463c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800450a:	4b58      	ldr	r3, [pc, #352]	; (800466c <UART_SetConfig+0x4e8>)
 800450c:	0052      	lsls	r2, r2, #1
 800450e:	5ad3      	ldrh	r3, [r2, r3]
 8004510:	0019      	movs	r1, r3
 8004512:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004514:	f7fb fdf6 	bl	8000104 <__udivsi3>
 8004518:	0003      	movs	r3, r0
 800451a:	005a      	lsls	r2, r3, #1
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	18d2      	adds	r2, r2, r3
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	0019      	movs	r1, r3
 800452a:	0010      	movs	r0, r2
 800452c:	f7fb fdea 	bl	8000104 <__udivsi3>
 8004530:	0003      	movs	r3, r0
 8004532:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	2b0f      	cmp	r3, #15
 8004538:	d921      	bls.n	800457e <UART_SetConfig+0x3fa>
 800453a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	025b      	lsls	r3, r3, #9
 8004540:	429a      	cmp	r2, r3
 8004542:	d21c      	bcs.n	800457e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	b29a      	uxth	r2, r3
 8004548:	200e      	movs	r0, #14
 800454a:	2420      	movs	r4, #32
 800454c:	1903      	adds	r3, r0, r4
 800454e:	19db      	adds	r3, r3, r7
 8004550:	210f      	movs	r1, #15
 8004552:	438a      	bics	r2, r1
 8004554:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	b29b      	uxth	r3, r3
 800455c:	2207      	movs	r2, #7
 800455e:	4013      	ands	r3, r2
 8004560:	b299      	uxth	r1, r3
 8004562:	1903      	adds	r3, r0, r4
 8004564:	19db      	adds	r3, r3, r7
 8004566:	1902      	adds	r2, r0, r4
 8004568:	19d2      	adds	r2, r2, r7
 800456a:	8812      	ldrh	r2, [r2, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	1902      	adds	r2, r0, r4
 8004576:	19d2      	adds	r2, r2, r7
 8004578:	8812      	ldrh	r2, [r2, #0]
 800457a:	60da      	str	r2, [r3, #12]
 800457c:	e05e      	b.n	800463c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800457e:	231a      	movs	r3, #26
 8004580:	2220      	movs	r2, #32
 8004582:	189b      	adds	r3, r3, r2
 8004584:	19db      	adds	r3, r3, r7
 8004586:	2201      	movs	r2, #1
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	e057      	b.n	800463c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800458c:	231b      	movs	r3, #27
 800458e:	2220      	movs	r2, #32
 8004590:	189b      	adds	r3, r3, r2
 8004592:	19db      	adds	r3, r3, r7
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b08      	cmp	r3, #8
 8004598:	d015      	beq.n	80045c6 <UART_SetConfig+0x442>
 800459a:	dc18      	bgt.n	80045ce <UART_SetConfig+0x44a>
 800459c:	2b04      	cmp	r3, #4
 800459e:	d00d      	beq.n	80045bc <UART_SetConfig+0x438>
 80045a0:	dc15      	bgt.n	80045ce <UART_SetConfig+0x44a>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <UART_SetConfig+0x428>
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d005      	beq.n	80045b6 <UART_SetConfig+0x432>
 80045aa:	e010      	b.n	80045ce <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ac:	f7fd fdde 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 80045b0:	0003      	movs	r3, r0
 80045b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045b4:	e014      	b.n	80045e0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045b6:	4b2e      	ldr	r3, [pc, #184]	; (8004670 <UART_SetConfig+0x4ec>)
 80045b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045ba:	e011      	b.n	80045e0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045bc:	f7fd fd4a 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 80045c0:	0003      	movs	r3, r0
 80045c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045c4:	e00c      	b.n	80045e0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045c6:	2380      	movs	r3, #128	; 0x80
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045cc:	e008      	b.n	80045e0 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80045d2:	231a      	movs	r3, #26
 80045d4:	2220      	movs	r2, #32
 80045d6:	189b      	adds	r3, r3, r2
 80045d8:	19db      	adds	r3, r3, r7
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
        break;
 80045de:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80045e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d02a      	beq.n	800463c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <UART_SetConfig+0x4e8>)
 80045ec:	0052      	lsls	r2, r2, #1
 80045ee:	5ad3      	ldrh	r3, [r2, r3]
 80045f0:	0019      	movs	r1, r3
 80045f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80045f4:	f7fb fd86 	bl	8000104 <__udivsi3>
 80045f8:	0003      	movs	r3, r0
 80045fa:	001a      	movs	r2, r3
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	18d2      	adds	r2, r2, r3
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	0019      	movs	r1, r3
 800460a:	0010      	movs	r0, r2
 800460c:	f7fb fd7a 	bl	8000104 <__udivsi3>
 8004610:	0003      	movs	r3, r0
 8004612:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	2b0f      	cmp	r3, #15
 8004618:	d90a      	bls.n	8004630 <UART_SetConfig+0x4ac>
 800461a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	025b      	lsls	r3, r3, #9
 8004620:	429a      	cmp	r2, r3
 8004622:	d205      	bcs.n	8004630 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	b29a      	uxth	r2, r3
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	e005      	b.n	800463c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004630:	231a      	movs	r3, #26
 8004632:	2220      	movs	r2, #32
 8004634:	189b      	adds	r3, r3, r2
 8004636:	19db      	adds	r3, r3, r7
 8004638:	2201      	movs	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	226a      	movs	r2, #106	; 0x6a
 8004640:	2101      	movs	r1, #1
 8004642:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	2268      	movs	r2, #104	; 0x68
 8004648:	2101      	movs	r1, #1
 800464a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	2200      	movs	r2, #0
 8004650:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	2200      	movs	r2, #0
 8004656:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004658:	231a      	movs	r3, #26
 800465a:	2220      	movs	r2, #32
 800465c:	189b      	adds	r3, r3, r2
 800465e:	19db      	adds	r3, r3, r7
 8004660:	781b      	ldrb	r3, [r3, #0]
}
 8004662:	0018      	movs	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	b010      	add	sp, #64	; 0x40
 8004668:	bdb0      	pop	{r4, r5, r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	08005480 	.word	0x08005480
 8004670:	00f42400 	.word	0x00f42400

08004674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	2208      	movs	r2, #8
 8004682:	4013      	ands	r3, r2
 8004684:	d00b      	beq.n	800469e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4a4a      	ldr	r2, [pc, #296]	; (80047b8 <UART_AdvFeatureConfig+0x144>)
 800468e:	4013      	ands	r3, r2
 8004690:	0019      	movs	r1, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	2201      	movs	r2, #1
 80046a4:	4013      	ands	r3, r2
 80046a6:	d00b      	beq.n	80046c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4a43      	ldr	r2, [pc, #268]	; (80047bc <UART_AdvFeatureConfig+0x148>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	0019      	movs	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	2202      	movs	r2, #2
 80046c6:	4013      	ands	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4a3b      	ldr	r2, [pc, #236]	; (80047c0 <UART_AdvFeatureConfig+0x14c>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	0019      	movs	r1, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	2204      	movs	r2, #4
 80046e8:	4013      	ands	r3, r2
 80046ea:	d00b      	beq.n	8004704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4a34      	ldr	r2, [pc, #208]	; (80047c4 <UART_AdvFeatureConfig+0x150>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	0019      	movs	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	2210      	movs	r2, #16
 800470a:	4013      	ands	r3, r2
 800470c:	d00b      	beq.n	8004726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4a2c      	ldr	r2, [pc, #176]	; (80047c8 <UART_AdvFeatureConfig+0x154>)
 8004716:	4013      	ands	r3, r2
 8004718:	0019      	movs	r1, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	2220      	movs	r2, #32
 800472c:	4013      	ands	r3, r2
 800472e:	d00b      	beq.n	8004748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	4a25      	ldr	r2, [pc, #148]	; (80047cc <UART_AdvFeatureConfig+0x158>)
 8004738:	4013      	ands	r3, r2
 800473a:	0019      	movs	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	2240      	movs	r2, #64	; 0x40
 800474e:	4013      	ands	r3, r2
 8004750:	d01d      	beq.n	800478e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <UART_AdvFeatureConfig+0x15c>)
 800475a:	4013      	ands	r3, r2
 800475c:	0019      	movs	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	035b      	lsls	r3, r3, #13
 8004772:	429a      	cmp	r2, r3
 8004774:	d10b      	bne.n	800478e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <UART_AdvFeatureConfig+0x160>)
 800477e:	4013      	ands	r3, r2
 8004780:	0019      	movs	r1, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	2280      	movs	r2, #128	; 0x80
 8004794:	4013      	ands	r3, r2
 8004796:	d00b      	beq.n	80047b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <UART_AdvFeatureConfig+0x164>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	0019      	movs	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }
}
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b002      	add	sp, #8
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	ffff7fff 	.word	0xffff7fff
 80047bc:	fffdffff 	.word	0xfffdffff
 80047c0:	fffeffff 	.word	0xfffeffff
 80047c4:	fffbffff 	.word	0xfffbffff
 80047c8:	ffffefff 	.word	0xffffefff
 80047cc:	ffffdfff 	.word	0xffffdfff
 80047d0:	ffefffff 	.word	0xffefffff
 80047d4:	ff9fffff 	.word	0xff9fffff
 80047d8:	fff7ffff 	.word	0xfff7ffff

080047dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b092      	sub	sp, #72	; 0x48
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2290      	movs	r2, #144	; 0x90
 80047e8:	2100      	movs	r1, #0
 80047ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047ec:	f7fc fc22 	bl	8001034 <HAL_GetTick>
 80047f0:	0003      	movs	r3, r0
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2208      	movs	r2, #8
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d12d      	bne.n	800485e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004804:	2280      	movs	r2, #128	; 0x80
 8004806:	0391      	lsls	r1, r2, #14
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4a47      	ldr	r2, [pc, #284]	; (8004928 <UART_CheckIdleState+0x14c>)
 800480c:	9200      	str	r2, [sp, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	f000 f88e 	bl	8004930 <UART_WaitOnFlagUntilTimeout>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d022      	beq.n	800485e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004818:	f3ef 8310 	mrs	r3, PRIMASK
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004820:	63bb      	str	r3, [r7, #56]	; 0x38
 8004822:	2301      	movs	r3, #1
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	f383 8810 	msr	PRIMASK, r3
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2180      	movs	r1, #128	; 0x80
 800483a:	438a      	bics	r2, r1
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004844:	f383 8810 	msr	PRIMASK, r3
}
 8004848:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2288      	movs	r2, #136	; 0x88
 800484e:	2120      	movs	r1, #32
 8004850:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2284      	movs	r2, #132	; 0x84
 8004856:	2100      	movs	r1, #0
 8004858:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e060      	b.n	8004920 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2204      	movs	r2, #4
 8004866:	4013      	ands	r3, r2
 8004868:	2b04      	cmp	r3, #4
 800486a:	d146      	bne.n	80048fa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800486c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486e:	2280      	movs	r2, #128	; 0x80
 8004870:	03d1      	lsls	r1, r2, #15
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4a2c      	ldr	r2, [pc, #176]	; (8004928 <UART_CheckIdleState+0x14c>)
 8004876:	9200      	str	r2, [sp, #0]
 8004878:	2200      	movs	r2, #0
 800487a:	f000 f859 	bl	8004930 <UART_WaitOnFlagUntilTimeout>
 800487e:	1e03      	subs	r3, r0, #0
 8004880:	d03b      	beq.n	80048fa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004882:	f3ef 8310 	mrs	r3, PRIMASK
 8004886:	60fb      	str	r3, [r7, #12]
  return(result);
 8004888:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800488a:	637b      	str	r3, [r7, #52]	; 0x34
 800488c:	2301      	movs	r3, #1
 800488e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f383 8810 	msr	PRIMASK, r3
}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4922      	ldr	r1, [pc, #136]	; (800492c <UART_CheckIdleState+0x150>)
 80048a4:	400a      	ands	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f383 8810 	msr	PRIMASK, r3
}
 80048b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b4:	f3ef 8310 	mrs	r3, PRIMASK
 80048b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80048ba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048bc:	633b      	str	r3, [r7, #48]	; 0x30
 80048be:	2301      	movs	r3, #1
 80048c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f383 8810 	msr	PRIMASK, r3
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2101      	movs	r1, #1
 80048d6:	438a      	bics	r2, r1
 80048d8:	609a      	str	r2, [r3, #8]
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	f383 8810 	msr	PRIMASK, r3
}
 80048e4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	228c      	movs	r2, #140	; 0x8c
 80048ea:	2120      	movs	r1, #32
 80048ec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2284      	movs	r2, #132	; 0x84
 80048f2:	2100      	movs	r1, #0
 80048f4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e012      	b.n	8004920 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2288      	movs	r2, #136	; 0x88
 80048fe:	2120      	movs	r1, #32
 8004900:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	228c      	movs	r2, #140	; 0x8c
 8004906:	2120      	movs	r1, #32
 8004908:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2284      	movs	r2, #132	; 0x84
 800491a:	2100      	movs	r1, #0
 800491c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	b010      	add	sp, #64	; 0x40
 8004926:	bd80      	pop	{r7, pc}
 8004928:	01ffffff 	.word	0x01ffffff
 800492c:	fffffedf 	.word	0xfffffedf

08004930 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	1dfb      	adds	r3, r7, #7
 800493e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004940:	e051      	b.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	3301      	adds	r3, #1
 8004946:	d04e      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004948:	f7fc fb74 	bl	8001034 <HAL_GetTick>
 800494c:	0002      	movs	r2, r0
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e051      	b.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2204      	movs	r2, #4
 800496a:	4013      	ands	r3, r2
 800496c:	d03b      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b80      	cmp	r3, #128	; 0x80
 8004972:	d038      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d035      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	2208      	movs	r2, #8
 8004982:	4013      	ands	r3, r2
 8004984:	2b08      	cmp	r3, #8
 8004986:	d111      	bne.n	80049ac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2208      	movs	r2, #8
 800498e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	0018      	movs	r0, r3
 8004994:	f000 f83c 	bl	8004a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2290      	movs	r2, #144	; 0x90
 800499c:	2108      	movs	r1, #8
 800499e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2284      	movs	r2, #132	; 0x84
 80049a4:	2100      	movs	r1, #0
 80049a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e02c      	b.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69da      	ldr	r2, [r3, #28]
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	401a      	ands	r2, r3
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	429a      	cmp	r2, r3
 80049be:	d112      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2280      	movs	r2, #128	; 0x80
 80049c6:	0112      	lsls	r2, r2, #4
 80049c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 f81f 	bl	8004a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2290      	movs	r2, #144	; 0x90
 80049d6:	2120      	movs	r1, #32
 80049d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2284      	movs	r2, #132	; 0x84
 80049de:	2100      	movs	r1, #0
 80049e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e00f      	b.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	4013      	ands	r3, r2
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	425a      	negs	r2, r3
 80049f6:	4153      	adcs	r3, r2
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	001a      	movs	r2, r3
 80049fc:	1dfb      	adds	r3, r7, #7
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d09e      	beq.n	8004942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	0018      	movs	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b004      	add	sp, #16
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08e      	sub	sp, #56	; 0x38
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a18:	f3ef 8310 	mrs	r3, PRIMASK
 8004a1c:	617b      	str	r3, [r7, #20]
  return(result);
 8004a1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
 8004a22:	2301      	movs	r3, #1
 8004a24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	f383 8810 	msr	PRIMASK, r3
}
 8004a2c:	46c0      	nop			; (mov r8, r8)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4926      	ldr	r1, [pc, #152]	; (8004ad4 <UART_EndRxTransfer+0xc4>)
 8004a3a:	400a      	ands	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f383 8810 	msr	PRIMASK, r3
}
 8004a48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a4e:	623b      	str	r3, [r7, #32]
  return(result);
 8004a50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a52:	633b      	str	r3, [r7, #48]	; 0x30
 8004a54:	2301      	movs	r3, #1
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f383 8810 	msr	PRIMASK, r3
}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	491b      	ldr	r1, [pc, #108]	; (8004ad8 <UART_EndRxTransfer+0xc8>)
 8004a6c:	400a      	ands	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	f383 8810 	msr	PRIMASK, r3
}
 8004a7a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d118      	bne.n	8004ab6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a84:	f3ef 8310 	mrs	r3, PRIMASK
 8004a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8e:	2301      	movs	r3, #1
 8004a90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f383 8810 	msr	PRIMASK, r3
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2110      	movs	r1, #16
 8004aa6:	438a      	bics	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f383 8810 	msr	PRIMASK, r3
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	228c      	movs	r2, #140	; 0x8c
 8004aba:	2120      	movs	r1, #32
 8004abc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b00e      	add	sp, #56	; 0x38
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	fffffedf 	.word	0xfffffedf
 8004ad8:	effffffe 	.word	0xeffffffe

08004adc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2284      	movs	r2, #132	; 0x84
 8004ae8:	5c9b      	ldrb	r3, [r3, r2]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_UARTEx_DisableFifoMode+0x16>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e027      	b.n	8004b42 <HAL_UARTEx_DisableFifoMode+0x66>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2284      	movs	r2, #132	; 0x84
 8004af6:	2101      	movs	r1, #1
 8004af8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2288      	movs	r2, #136	; 0x88
 8004afe:	2124      	movs	r1, #36	; 0x24
 8004b00:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2101      	movs	r1, #1
 8004b16:	438a      	bics	r2, r1
 8004b18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4a0b      	ldr	r2, [pc, #44]	; (8004b4c <HAL_UARTEx_DisableFifoMode+0x70>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2288      	movs	r2, #136	; 0x88
 8004b34:	2120      	movs	r1, #32
 8004b36:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2284      	movs	r2, #132	; 0x84
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	0018      	movs	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b004      	add	sp, #16
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	dfffffff 	.word	0xdfffffff

08004b50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2284      	movs	r2, #132	; 0x84
 8004b5e:	5c9b      	ldrb	r3, [r3, r2]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e02e      	b.n	8004bc6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2284      	movs	r2, #132	; 0x84
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2288      	movs	r2, #136	; 0x88
 8004b74:	2124      	movs	r1, #36	; 0x24
 8004b76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	438a      	bics	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	08d9      	lsrs	r1, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f000 f854 	bl	8004c54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2288      	movs	r2, #136	; 0x88
 8004bb8:	2120      	movs	r1, #32
 8004bba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2284      	movs	r2, #132	; 0x84
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b004      	add	sp, #16
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2284      	movs	r2, #132	; 0x84
 8004bde:	5c9b      	ldrb	r3, [r3, r2]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e02f      	b.n	8004c48 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2284      	movs	r2, #132	; 0x84
 8004bec:	2101      	movs	r1, #1
 8004bee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2288      	movs	r2, #136	; 0x88
 8004bf4:	2124      	movs	r1, #36	; 0x24
 8004bf6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	438a      	bics	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	4a0e      	ldr	r2, [pc, #56]	; (8004c50 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	0019      	movs	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 f813 	bl	8004c54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2288      	movs	r2, #136	; 0x88
 8004c3a:	2120      	movs	r1, #32
 8004c3c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2284      	movs	r2, #132	; 0x84
 8004c42:	2100      	movs	r1, #0
 8004c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	0018      	movs	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	b004      	add	sp, #16
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	f1ffffff 	.word	0xf1ffffff

08004c54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d108      	bne.n	8004c76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	226a      	movs	r2, #106	; 0x6a
 8004c68:	2101      	movs	r1, #1
 8004c6a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2268      	movs	r2, #104	; 0x68
 8004c70:	2101      	movs	r1, #1
 8004c72:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c74:	e043      	b.n	8004cfe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c76:	260f      	movs	r6, #15
 8004c78:	19bb      	adds	r3, r7, r6
 8004c7a:	2208      	movs	r2, #8
 8004c7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c7e:	200e      	movs	r0, #14
 8004c80:	183b      	adds	r3, r7, r0
 8004c82:	2208      	movs	r2, #8
 8004c84:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	0e5b      	lsrs	r3, r3, #25
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	240d      	movs	r4, #13
 8004c92:	193b      	adds	r3, r7, r4
 8004c94:	2107      	movs	r1, #7
 8004c96:	400a      	ands	r2, r1
 8004c98:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	0f5b      	lsrs	r3, r3, #29
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	250c      	movs	r5, #12
 8004ca6:	197b      	adds	r3, r7, r5
 8004ca8:	2107      	movs	r1, #7
 8004caa:	400a      	ands	r2, r1
 8004cac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cae:	183b      	adds	r3, r7, r0
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	197a      	adds	r2, r7, r5
 8004cb4:	7812      	ldrb	r2, [r2, #0]
 8004cb6:	4914      	ldr	r1, [pc, #80]	; (8004d08 <UARTEx_SetNbDataToProcess+0xb4>)
 8004cb8:	5c8a      	ldrb	r2, [r1, r2]
 8004cba:	435a      	muls	r2, r3
 8004cbc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004cbe:	197b      	adds	r3, r7, r5
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <UARTEx_SetNbDataToProcess+0xb8>)
 8004cc4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	f7fb faa6 	bl	8000218 <__divsi3>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	b299      	uxth	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	226a      	movs	r2, #106	; 0x6a
 8004cd4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cd6:	19bb      	adds	r3, r7, r6
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	193a      	adds	r2, r7, r4
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	490a      	ldr	r1, [pc, #40]	; (8004d08 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ce0:	5c8a      	ldrb	r2, [r1, r2]
 8004ce2:	435a      	muls	r2, r3
 8004ce4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ce6:	193b      	adds	r3, r7, r4
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <UARTEx_SetNbDataToProcess+0xb8>)
 8004cec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cee:	0019      	movs	r1, r3
 8004cf0:	f7fb fa92 	bl	8000218 <__divsi3>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	b299      	uxth	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2268      	movs	r2, #104	; 0x68
 8004cfc:	5299      	strh	r1, [r3, r2]
}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b005      	add	sp, #20
 8004d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	08005498 	.word	0x08005498
 8004d0c:	080054a0 	.word	0x080054a0

08004d10 <nrf_read_reg>:
 */

#include "NRF24L01.h"

uint8_t nrf_read_reg(uint8_t reg)
{
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	0002      	movs	r2, r0
 8004d18:	1dfb      	adds	r3, r7, #7
 8004d1a:	701a      	strb	r2, [r3, #0]
//    HAL_SPI_Transmit(&hspi1, &command, 1, 100);
//    HAL_SPI_Receive(&hspi1, &status, 1, 100);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
//
//    return status;
	uint8_t command = NRF24_CMD_R_REGISTER | reg;
 8004d1c:	240f      	movs	r4, #15
 8004d1e:	193b      	adds	r3, r7, r4
 8004d20:	1dfa      	adds	r2, r7, #7
 8004d22:	7812      	ldrb	r2, [r2, #0]
 8004d24:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t data;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004d26:	23a0      	movs	r3, #160	; 0xa0
 8004d28:	05db      	lsls	r3, r3, #23
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2110      	movs	r1, #16
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f7fc fbc6 	bl	80014c0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8004d34:	230e      	movs	r3, #14
 8004d36:	18fa      	adds	r2, r7, r3
 8004d38:	1939      	adds	r1, r7, r4
 8004d3a:	480e      	ldr	r0, [pc, #56]	; (8004d74 <nrf_read_reg+0x64>)
 8004d3c:	23fa      	movs	r3, #250	; 0xfa
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	2301      	movs	r3, #1
 8004d44:	f7fd ff0c 	bl	8002b60 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&hspi1, &data, 1, 2000);
 8004d48:	23fa      	movs	r3, #250	; 0xfa
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	240d      	movs	r4, #13
 8004d4e:	1939      	adds	r1, r7, r4
 8004d50:	4808      	ldr	r0, [pc, #32]	; (8004d74 <nrf_read_reg+0x64>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	f7fd fdb2 	bl	80028bc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004d58:	23a0      	movs	r3, #160	; 0xa0
 8004d5a:	05db      	lsls	r3, r3, #23
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	2110      	movs	r1, #16
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7fc fbad 	bl	80014c0 <HAL_GPIO_WritePin>
	return data;
 8004d66:	193b      	adds	r3, r7, r4
 8004d68:	781b      	ldrb	r3, [r3, #0]

}
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b005      	add	sp, #20
 8004d70:	bd90      	pop	{r4, r7, pc}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	200000a4 	.word	0x200000a4

08004d78 <nrf_write_reg>:
		HAL_SPI_Receive(&hspi1, &data[i], 1, 2000);
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
}

void nrf_write_reg(uint8_t reg, uint8_t value)
{
 8004d78:	b5b0      	push	{r4, r5, r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	0002      	movs	r2, r0
 8004d80:	1dfb      	adds	r3, r7, #7
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	1dbb      	adds	r3, r7, #6
 8004d86:	1c0a      	adds	r2, r1, #0
 8004d88:	701a      	strb	r2, [r3, #0]
//
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);

	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 8004d8a:	1dfb      	adds	r3, r7, #7
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	4313      	orrs	r3, r2
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	240f      	movs	r4, #15
 8004d96:	193b      	adds	r3, r7, r4
 8004d98:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t write_val = value;
 8004d9a:	250d      	movs	r5, #13
 8004d9c:	197b      	adds	r3, r7, r5
 8004d9e:	1dba      	adds	r2, r7, #6
 8004da0:	7812      	ldrb	r2, [r2, #0]
 8004da2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004da4:	23a0      	movs	r3, #160	; 0xa0
 8004da6:	05db      	lsls	r3, r3, #23
 8004da8:	2200      	movs	r2, #0
 8004daa:	2110      	movs	r1, #16
 8004dac:	0018      	movs	r0, r3
 8004dae:	f7fc fb87 	bl	80014c0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8004db2:	230e      	movs	r3, #14
 8004db4:	18fa      	adds	r2, r7, r3
 8004db6:	1939      	adds	r1, r7, r4
 8004db8:	480c      	ldr	r0, [pc, #48]	; (8004dec <nrf_write_reg+0x74>)
 8004dba:	23fa      	movs	r3, #250	; 0xfa
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f7fd fecd 	bl	8002b60 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &write_val, 1, 2000);
 8004dc6:	23fa      	movs	r3, #250	; 0xfa
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	1979      	adds	r1, r7, r5
 8004dcc:	4807      	ldr	r0, [pc, #28]	; (8004dec <nrf_write_reg+0x74>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f7fd fc14 	bl	80025fc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004dd4:	23a0      	movs	r3, #160	; 0xa0
 8004dd6:	05db      	lsls	r3, r3, #23
 8004dd8:	2201      	movs	r2, #1
 8004dda:	2110      	movs	r1, #16
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f7fc fb6f 	bl	80014c0 <HAL_GPIO_WritePin>

}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b004      	add	sp, #16
 8004de8:	bdb0      	pop	{r4, r5, r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	200000a4 	.word	0x200000a4

08004df0 <nrf_write_reg_multi>:

void nrf_write_reg_multi(uint8_t reg, uint8_t *data, int size)
{
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b089      	sub	sp, #36	; 0x24
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	210f      	movs	r1, #15
 8004dfc:	187b      	adds	r3, r7, r1
 8004dfe:	1c02      	adds	r2, r0, #0
 8004e00:	701a      	strb	r2, [r3, #0]
	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 8004e02:	187b      	adds	r3, r7, r1
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2220      	movs	r2, #32
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	2413      	movs	r4, #19
 8004e0e:	193b      	adds	r3, r7, r4
 8004e10:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	//uint8_t write_val = value;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004e12:	23a0      	movs	r3, #160	; 0xa0
 8004e14:	05db      	lsls	r3, r3, #23
 8004e16:	2200      	movs	r2, #0
 8004e18:	2110      	movs	r1, #16
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f7fc fb50 	bl	80014c0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8004e20:	2312      	movs	r3, #18
 8004e22:	18fa      	adds	r2, r7, r3
 8004e24:	1939      	adds	r1, r7, r4
 8004e26:	4812      	ldr	r0, [pc, #72]	; (8004e70 <nrf_write_reg_multi+0x80>)
 8004e28:	23fa      	movs	r3, #250	; 0xfa
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f7fd fe96 	bl	8002b60 <HAL_SPI_TransmitReceive>
	for (int i = 0; i <size; i++)
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e00b      	b.n	8004e52 <nrf_write_reg_multi+0x62>
		HAL_SPI_Transmit(&hspi1, &data[i], 1, 2000);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	18d1      	adds	r1, r2, r3
 8004e40:	23fa      	movs	r3, #250	; 0xfa
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	480a      	ldr	r0, [pc, #40]	; (8004e70 <nrf_write_reg_multi+0x80>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	f7fd fbd8 	bl	80025fc <HAL_SPI_Transmit>
	for (int i = 0; i <size; i++)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	dbef      	blt.n	8004e3a <nrf_write_reg_multi+0x4a>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004e5a:	23a0      	movs	r3, #160	; 0xa0
 8004e5c:	05db      	lsls	r3, r3, #23
 8004e5e:	2201      	movs	r2, #1
 8004e60:	2110      	movs	r1, #16
 8004e62:	0018      	movs	r0, r3
 8004e64:	f7fc fb2c 	bl	80014c0 <HAL_GPIO_WritePin>

}
 8004e68:	46c0      	nop			; (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b007      	add	sp, #28
 8004e6e:	bd90      	pop	{r4, r7, pc}
 8004e70:	200000a4 	.word	0x200000a4

08004e74 <nrf_send_cmd>:

void nrf_send_cmd (uint8_t cmd){
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	0002      	movs	r2, r0
 8004e7c:	1dfb      	adds	r3, r7, #7
 8004e7e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004e80:	23a0      	movs	r3, #160	; 0xa0
 8004e82:	05db      	lsls	r3, r3, #23
 8004e84:	2200      	movs	r2, #0
 8004e86:	2110      	movs	r1, #16
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7fc fb19 	bl	80014c0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8004e8e:	1df9      	adds	r1, r7, #7
 8004e90:	4807      	ldr	r0, [pc, #28]	; (8004eb0 <nrf_send_cmd+0x3c>)
 8004e92:	2364      	movs	r3, #100	; 0x64
 8004e94:	2201      	movs	r2, #1
 8004e96:	f7fd fbb1 	bl	80025fc <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004e9a:	23a0      	movs	r3, #160	; 0xa0
 8004e9c:	05db      	lsls	r3, r3, #23
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	2110      	movs	r1, #16
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f7fc fb0c 	bl	80014c0 <HAL_GPIO_WritePin>
}
 8004ea8:	46c0      	nop			; (mov r8, r8)
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b002      	add	sp, #8
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	200000a4 	.word	0x200000a4

08004eb4 <nrf_init>:

void nrf_init(void){
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8004eb8:	23a0      	movs	r3, #160	; 0xa0
 8004eba:	05db      	lsls	r3, r3, #23
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2108      	movs	r1, #8
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f7fc fafd 	bl	80014c0 <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_CONFIG, 0);
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	2000      	movs	r0, #0
 8004eca:	f7ff ff55 	bl	8004d78 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_AA, 0); //Turn off auto ack
 8004ece:	2100      	movs	r1, #0
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	f7ff ff51 	bl	8004d78 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_RXADDR, 0); //Not enabling any data pipe
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	2002      	movs	r0, #2
 8004eda:	f7ff ff4d 	bl	8004d78 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_AW, 0x03); //5 bytes for TX/RX address
 8004ede:	2103      	movs	r1, #3
 8004ee0:	2003      	movs	r0, #3
 8004ee2:	f7ff ff49 	bl	8004d78 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_RETR, 0); //No retransmission
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	2004      	movs	r0, #4
 8004eea:	f7ff ff45 	bl	8004d78 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_CH, 0); //
 8004eee:	2100      	movs	r1, #0
 8004ef0:	2005      	movs	r0, #5
 8004ef2:	f7ff ff41 	bl	8004d78 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_SETUP, 0x0E); //Power = 0dB, data rate = 2Mbps
 8004ef6:	210e      	movs	r1, #14
 8004ef8:	2006      	movs	r0, #6
 8004efa:	f7ff ff3d 	bl	8004d78 <nrf_write_reg>

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8004efe:	23a0      	movs	r3, #160	; 0xa0
 8004f00:	05db      	lsls	r3, r3, #23
 8004f02:	2200      	movs	r2, #0
 8004f04:	2108      	movs	r1, #8
 8004f06:	0018      	movs	r0, r3
 8004f08:	f7fc fada 	bl	80014c0 <HAL_GPIO_WritePin>

}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <nrf_rx_mode>:
    return 0;


}

void nrf_rx_mode(uint8_t *addr, uint8_t channel){
 8004f12:	b5b0      	push	{r4, r5, r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	000a      	movs	r2, r1
 8004f1c:	1cfb      	adds	r3, r7, #3
 8004f1e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8004f20:	23a0      	movs	r3, #160	; 0xa0
 8004f22:	05db      	lsls	r3, r3, #23
 8004f24:	2200      	movs	r2, #0
 8004f26:	2108      	movs	r1, #8
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f7fc fac9 	bl	80014c0 <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_RF_CH, channel);
 8004f2e:	1cfb      	adds	r3, r7, #3
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	0019      	movs	r1, r3
 8004f34:	2005      	movs	r0, #5
 8004f36:	f7ff ff1f 	bl	8004d78 <nrf_write_reg>

    uint8_t enrxaddr = nrf_read_reg(NRF24_REG_EN_RXADDR);
 8004f3a:	250f      	movs	r5, #15
 8004f3c:	197c      	adds	r4, r7, r5
 8004f3e:	2002      	movs	r0, #2
 8004f40:	f7ff fee6 	bl	8004d10 <nrf_read_reg>
 8004f44:	0003      	movs	r3, r0
 8004f46:	7023      	strb	r3, [r4, #0]
    enrxaddr = enrxaddr | (1<<1);
 8004f48:	0028      	movs	r0, r5
 8004f4a:	183b      	adds	r3, r7, r0
 8004f4c:	183a      	adds	r2, r7, r0
 8004f4e:	7812      	ldrb	r2, [r2, #0]
 8004f50:	2102      	movs	r1, #2
 8004f52:	430a      	orrs	r2, r1
 8004f54:	701a      	strb	r2, [r3, #0]
    nrf_write_reg(NRF24_REG_EN_RXADDR, enrxaddr); //select data pipe 1
 8004f56:	183b      	adds	r3, r7, r0
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	2002      	movs	r0, #2
 8004f5e:	f7ff ff0b 	bl	8004d78 <nrf_write_reg>
    nrf_write_reg_multi(NRF24_REG_RX_ADDR_P1, addr, 5); //Write the address
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2205      	movs	r2, #5
 8004f66:	0019      	movs	r1, r3
 8004f68:	200b      	movs	r0, #11
 8004f6a:	f7ff ff41 	bl	8004df0 <nrf_write_reg_multi>

    nrf_write_reg(NRF24_REG_RX_PW_P1, 32); //Set to 32 bit payload
 8004f6e:	2120      	movs	r1, #32
 8004f70:	2012      	movs	r0, #18
 8004f72:	f7ff ff01 	bl	8004d78 <nrf_write_reg>

    uint8_t config = nrf_read_reg(NRF24_REG_CONFIG);
 8004f76:	250e      	movs	r5, #14
 8004f78:	197c      	adds	r4, r7, r5
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f7ff fec8 	bl	8004d10 <nrf_read_reg>
 8004f80:	0003      	movs	r3, r0
 8004f82:	7023      	strb	r3, [r4, #0]
    config = config | (1<<1) | (1<<0);
 8004f84:	0028      	movs	r0, r5
 8004f86:	183b      	adds	r3, r7, r0
 8004f88:	183a      	adds	r2, r7, r0
 8004f8a:	7812      	ldrb	r2, [r2, #0]
 8004f8c:	2103      	movs	r1, #3
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	701a      	strb	r2, [r3, #0]
    nrf_write_reg(NRF24_REG_CONFIG, config);
 8004f92:	183b      	adds	r3, r7, r0
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	0019      	movs	r1, r3
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f7ff feed 	bl	8004d78 <nrf_write_reg>
//    uint8_t test = 0;
//    test = nrf_read_reg(NRF24_REG_RF_SETUP);
//    uint8_t test2[5] = {0};
//    nrf_read_reg_multi(NRF24_REG_RX_ADDR_P1, test2, 5);

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8004f9e:	23a0      	movs	r3, #160	; 0xa0
 8004fa0:	05db      	lsls	r3, r3, #23
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	2108      	movs	r1, #8
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f7fc fa8a 	bl	80014c0 <HAL_GPIO_WritePin>
}
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b004      	add	sp, #16
 8004fb2:	bdb0      	pop	{r4, r5, r7, pc}

08004fb4 <is_data_availible>:

uint8_t is_data_availible(int pipenum){
 8004fb4:	b5b0      	push	{r4, r5, r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf_read_reg(NRF24_REG_STATUS);
 8004fbc:	250f      	movs	r5, #15
 8004fbe:	197c      	adds	r4, r7, r5
 8004fc0:	2007      	movs	r0, #7
 8004fc2:	f7ff fea5 	bl	8004d10 <nrf_read_reg>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	7023      	strb	r3, [r4, #0]

	if((status & (1<<6)) && (status & (pipenum<<1))){
 8004fca:	0029      	movs	r1, r5
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2240      	movs	r2, #64	; 0x40
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d00b      	beq.n	8004fee <is_data_availible+0x3a>
 8004fd6:	187b      	adds	r3, r7, r1
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	0052      	lsls	r2, r2, #1
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d005      	beq.n	8004fee <is_data_availible+0x3a>
		nrf_write_reg(NRF24_REG_STATUS,(1<<6));
 8004fe2:	2140      	movs	r1, #64	; 0x40
 8004fe4:	2007      	movs	r0, #7
 8004fe6:	f7ff fec7 	bl	8004d78 <nrf_write_reg>

		return 1;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <is_data_availible+0x3c>
	}
	return 0;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b004      	add	sp, #16
 8004ff6:	bdb0      	pop	{r4, r5, r7, pc}

08004ff8 <nrf_receive>:

void nrf_receive(uint8_t *data){
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 8005000:	240f      	movs	r4, #15
 8005002:	193b      	adds	r3, r7, r4
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8005008:	23a0      	movs	r3, #160	; 0xa0
 800500a:	05db      	lsls	r3, r3, #23
 800500c:	2200      	movs	r2, #0
 800500e:	2110      	movs	r1, #16
 8005010:	0018      	movs	r0, r3
 8005012:	f7fc fa55 	bl	80014c0 <HAL_GPIO_WritePin>

    //TX command
    cmd = NRF24_CMD_R_RX_PAYLOAD;
 8005016:	193b      	adds	r3, r7, r4
 8005018:	2261      	movs	r2, #97	; 0x61
 800501a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 800501c:	1939      	adds	r1, r7, r4
 800501e:	4811      	ldr	r0, [pc, #68]	; (8005064 <nrf_receive+0x6c>)
 8005020:	2364      	movs	r3, #100	; 0x64
 8005022:	2201      	movs	r2, #1
 8005024:	f7fd faea 	bl	80025fc <HAL_SPI_Transmit>

    //TX data send
    HAL_SPI_Receive(&hspi1, data, 32, 1000);
 8005028:	23fa      	movs	r3, #250	; 0xfa
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	480d      	ldr	r0, [pc, #52]	; (8005064 <nrf_receive+0x6c>)
 8005030:	2220      	movs	r2, #32
 8005032:	f7fd fc43 	bl	80028bc <HAL_SPI_Receive>


    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8005036:	23a0      	movs	r3, #160	; 0xa0
 8005038:	05db      	lsls	r3, r3, #23
 800503a:	2201      	movs	r2, #1
 800503c:	2110      	movs	r1, #16
 800503e:	0018      	movs	r0, r3
 8005040:	f7fc fa3e 	bl	80014c0 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8005044:	2001      	movs	r0, #1
 8005046:	f7fb ffff 	bl	8001048 <HAL_Delay>

    cmd = NRF24_CMD_FLUSH_RX;
 800504a:	193b      	adds	r3, r7, r4
 800504c:	22e2      	movs	r2, #226	; 0xe2
 800504e:	701a      	strb	r2, [r3, #0]
    nrf_send_cmd(cmd);
 8005050:	193b      	adds	r3, r7, r4
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	0018      	movs	r0, r3
 8005056:	f7ff ff0d 	bl	8004e74 <nrf_send_cmd>


}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	46bd      	mov	sp, r7
 800505e:	b005      	add	sp, #20
 8005060:	bd90      	pop	{r4, r7, pc}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	200000a4 	.word	0x200000a4

08005068 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 8005072:	230a      	movs	r3, #10
 8005074:	18fb      	adds	r3, r7, r3
 8005076:	2200      	movs	r2, #0
 8005078:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	e01b      	b.n	80050b8 <crc16+0x50>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 8005080:	200a      	movs	r0, #10
 8005082:	183b      	adds	r3, r7, r0
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	b29b      	uxth	r3, r3
 800508a:	0019      	movs	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	607a      	str	r2, [r7, #4]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	404b      	eors	r3, r1
 8005096:	22ff      	movs	r2, #255	; 0xff
 8005098:	401a      	ands	r2, r3
 800509a:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <crc16+0x68>)
 800509c:	0052      	lsls	r2, r2, #1
 800509e:	5ad3      	ldrh	r3, [r2, r3]
 80050a0:	b21a      	sxth	r2, r3
 80050a2:	183b      	adds	r3, r7, r0
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	b21b      	sxth	r3, r3
 80050aa:	4053      	eors	r3, r2
 80050ac:	b21a      	sxth	r2, r3
 80050ae:	183b      	adds	r3, r7, r0
 80050b0:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3301      	adds	r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d3df      	bcc.n	8005080 <crc16+0x18>
	}
	return cksum;
 80050c0:	230a      	movs	r3, #10
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	881b      	ldrh	r3, [r3, #0]
}
 80050c6:	0018      	movs	r0, r3
 80050c8:	46bd      	mov	sp, r7
 80050ca:	b004      	add	sp, #16
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	080054a8 	.word	0x080054a8

080050d4 <VESCSendMessage>:

int VESCSendMessage(uint8_t *payload, int payloadSize){
 80050d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050d6:	b0c5      	sub	sp, #276	; 0x114
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
	int count = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	2586      	movs	r5, #134	; 0x86
 80050e2:	006d      	lsls	r5, r5, #1
 80050e4:	197a      	adds	r2, r7, r5
 80050e6:	6013      	str	r3, [r2, #0]
	uint8_t messageSend[256];
	uint16_t crcPayload = crc16(payload, payloadSize);
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	2385      	movs	r3, #133	; 0x85
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	18fc      	adds	r4, r7, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	0011      	movs	r1, r2
 80050f4:	0018      	movs	r0, r3
 80050f6:	f7ff ffb7 	bl	8005068 <crc16>
 80050fa:	0003      	movs	r3, r0
 80050fc:	8023      	strh	r3, [r4, #0]

	if(payloadSize <= 256){
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	429a      	cmp	r2, r3
 8005106:	dc17      	bgt.n	8005138 <VESCSendMessage+0x64>
		messageSend[count++] = 2;
 8005108:	197b      	adds	r3, r7, r5
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	1979      	adds	r1, r7, r5
 8005110:	600a      	str	r2, [r1, #0]
 8005112:	4a42      	ldr	r2, [pc, #264]	; (800521c <VESCSendMessage+0x148>)
 8005114:	2088      	movs	r0, #136	; 0x88
 8005116:	0040      	lsls	r0, r0, #1
 8005118:	1812      	adds	r2, r2, r0
 800511a:	19d2      	adds	r2, r2, r7
 800511c:	2102      	movs	r1, #2
 800511e:	54d1      	strb	r1, [r2, r3]
		messageSend[count++] = payloadSize;
 8005120:	197b      	adds	r3, r7, r5
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	1979      	adds	r1, r7, r5
 8005128:	600a      	str	r2, [r1, #0]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	b2d1      	uxtb	r1, r2
 800512e:	4a3b      	ldr	r2, [pc, #236]	; (800521c <VESCSendMessage+0x148>)
 8005130:	1812      	adds	r2, r2, r0
 8005132:	19d2      	adds	r2, r2, r7
 8005134:	54d1      	strb	r1, [r2, r3]
 8005136:	e024      	b.n	8005182 <VESCSendMessage+0xae>
	}
	else{
		messageSend[count++] = 3;
 8005138:	2086      	movs	r0, #134	; 0x86
 800513a:	0040      	lsls	r0, r0, #1
 800513c:	183b      	adds	r3, r7, r0
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	1839      	adds	r1, r7, r0
 8005144:	600a      	str	r2, [r1, #0]
 8005146:	4a35      	ldr	r2, [pc, #212]	; (800521c <VESCSendMessage+0x148>)
 8005148:	2488      	movs	r4, #136	; 0x88
 800514a:	0064      	lsls	r4, r4, #1
 800514c:	1912      	adds	r2, r2, r4
 800514e:	19d2      	adds	r2, r2, r7
 8005150:	2103      	movs	r1, #3
 8005152:	54d1      	strb	r1, [r2, r3]
		messageSend[count++] = (uint8_t)(payloadSize >> 8);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	1219      	asrs	r1, r3, #8
 8005158:	183b      	adds	r3, r7, r0
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	183d      	adds	r5, r7, r0
 8005160:	602a      	str	r2, [r5, #0]
 8005162:	b2c9      	uxtb	r1, r1
 8005164:	4a2d      	ldr	r2, [pc, #180]	; (800521c <VESCSendMessage+0x148>)
 8005166:	1912      	adds	r2, r2, r4
 8005168:	19d2      	adds	r2, r2, r7
 800516a:	54d1      	strb	r1, [r2, r3]
		messageSend[count++] = (uint8_t)(payloadSize & 0xFF);
 800516c:	183b      	adds	r3, r7, r0
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	1839      	adds	r1, r7, r0
 8005174:	600a      	str	r2, [r1, #0]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	b2d1      	uxtb	r1, r2
 800517a:	4a28      	ldr	r2, [pc, #160]	; (800521c <VESCSendMessage+0x148>)
 800517c:	1912      	adds	r2, r2, r4
 800517e:	19d2      	adds	r2, r2, r7
 8005180:	54d1      	strb	r1, [r2, r3]
	}

	memcpy(messageSend + count, payload, payloadSize);
 8005182:	2486      	movs	r4, #134	; 0x86
 8005184:	0064      	lsls	r4, r4, #1
 8005186:	193b      	adds	r3, r7, r4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2608      	movs	r6, #8
 800518c:	19ba      	adds	r2, r7, r6
 800518e:	18d3      	adds	r3, r2, r3
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	0018      	movs	r0, r3
 8005196:	f000 f903 	bl	80053a0 <memcpy>
	count += payloadSize;
 800519a:	193b      	adds	r3, r7, r4
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	18d3      	adds	r3, r2, r3
 80051a2:	0022      	movs	r2, r4
 80051a4:	1939      	adds	r1, r7, r4
 80051a6:	600b      	str	r3, [r1, #0]

	messageSend[count++] = (uint8_t)(crcPayload >> 8);
 80051a8:	2585      	movs	r5, #133	; 0x85
 80051aa:	006d      	lsls	r5, r5, #1
 80051ac:	197b      	adds	r3, r7, r5
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	0a1b      	lsrs	r3, r3, #8
 80051b2:	b299      	uxth	r1, r3
 80051b4:	0010      	movs	r0, r2
 80051b6:	183b      	adds	r3, r7, r0
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	183c      	adds	r4, r7, r0
 80051be:	6022      	str	r2, [r4, #0]
 80051c0:	b2c9      	uxtb	r1, r1
 80051c2:	4a16      	ldr	r2, [pc, #88]	; (800521c <VESCSendMessage+0x148>)
 80051c4:	2488      	movs	r4, #136	; 0x88
 80051c6:	0064      	lsls	r4, r4, #1
 80051c8:	1912      	adds	r2, r2, r4
 80051ca:	19d2      	adds	r2, r2, r7
 80051cc:	54d1      	strb	r1, [r2, r3]
	messageSend[count++] = (uint8_t)(crcPayload & 0xFF);
 80051ce:	183b      	adds	r3, r7, r0
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	1839      	adds	r1, r7, r0
 80051d6:	600a      	str	r2, [r1, #0]
 80051d8:	197a      	adds	r2, r7, r5
 80051da:	8812      	ldrh	r2, [r2, #0]
 80051dc:	b2d1      	uxtb	r1, r2
 80051de:	4a0f      	ldr	r2, [pc, #60]	; (800521c <VESCSendMessage+0x148>)
 80051e0:	0025      	movs	r5, r4
 80051e2:	1912      	adds	r2, r2, r4
 80051e4:	19d2      	adds	r2, r2, r7
 80051e6:	54d1      	strb	r1, [r2, r3]
	messageSend[count++] = 3;
 80051e8:	0004      	movs	r4, r0
 80051ea:	193b      	adds	r3, r7, r4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	1939      	adds	r1, r7, r4
 80051f2:	600a      	str	r2, [r1, #0]
 80051f4:	4a09      	ldr	r2, [pc, #36]	; (800521c <VESCSendMessage+0x148>)
 80051f6:	1952      	adds	r2, r2, r5
 80051f8:	19d2      	adds	r2, r2, r7
 80051fa:	2103      	movs	r1, #3
 80051fc:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit(&huart1, messageSend, count, HAL_MAX_DELAY);
 80051fe:	193b      	adds	r3, r7, r4
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	b29a      	uxth	r2, r3
 8005204:	2301      	movs	r3, #1
 8005206:	425b      	negs	r3, r3
 8005208:	19b9      	adds	r1, r7, r6
 800520a:	4805      	ldr	r0, [pc, #20]	; (8005220 <VESCSendMessage+0x14c>)
 800520c:	f7fe fe30 	bl	8003e70 <HAL_UART_Transmit>

	return count;
 8005210:	193b      	adds	r3, r7, r4
 8005212:	681b      	ldr	r3, [r3, #0]
}
 8005214:	0018      	movs	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	b045      	add	sp, #276	; 0x114
 800521a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800521c:	fffffef8 	.word	0xfffffef8
 8005220:	20000154 	.word	0x20000154

08005224 <VESCReceiveMessage>:

int VESCReceiveMessage(uint8_t *payloadReceived){
 8005224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005226:	b0c5      	sub	sp, #276	; 0x114
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	uint8_t messageStart[2] = {0};
 800522c:	2484      	movs	r4, #132	; 0x84
 800522e:	0064      	lsls	r4, r4, #1
 8005230:	193b      	adds	r3, r7, r4
 8005232:	2200      	movs	r2, #0
 8005234:	801a      	strh	r2, [r3, #0]
	uint8_t messageReceived[256] = {0};
 8005236:	4b42      	ldr	r3, [pc, #264]	; (8005340 <VESCReceiveMessage+0x11c>)
 8005238:	2288      	movs	r2, #136	; 0x88
 800523a:	0052      	lsls	r2, r2, #1
 800523c:	189b      	adds	r3, r3, r2
 800523e:	19db      	adds	r3, r3, r7
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	3304      	adds	r3, #4
 8005246:	22fc      	movs	r2, #252	; 0xfc
 8005248:	2100      	movs	r1, #0
 800524a:	0018      	movs	r0, r3
 800524c:	f000 f87c 	bl	8005348 <memset>

	uint16_t crcMessage = 0;
 8005250:	2387      	movs	r3, #135	; 0x87
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	18fb      	adds	r3, r7, r3
 8005256:	2200      	movs	r2, #0
 8005258:	801a      	strh	r2, [r3, #0]
	uint16_t crcPayload = 0;
 800525a:	2386      	movs	r3, #134	; 0x86
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	2200      	movs	r2, #0
 8005262:	801a      	strh	r2, [r3, #0]
	uint8_t lenMes = 0;
 8005264:	230c      	movs	r3, #12
 8005266:	33ff      	adds	r3, #255	; 0xff
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive(&huart1, messageStart, 2, HAL_MAX_DELAY);
 800526e:	2301      	movs	r3, #1
 8005270:	425b      	negs	r3, r3
 8005272:	1939      	adds	r1, r7, r4
 8005274:	4833      	ldr	r0, [pc, #204]	; (8005344 <VESCReceiveMessage+0x120>)
 8005276:	2202      	movs	r2, #2
 8005278:	f7fe fe9e 	bl	8003fb8 <HAL_UART_Receive>

	//Handle message less than 255 bytes. Messages larger than 255 bytes are not handleable
	if(messageStart[0] == 2){
 800527c:	193b      	adds	r3, r7, r4
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d10b      	bne.n	800529c <VESCReceiveMessage+0x78>
		HAL_UART_Receive(&huart1, messageReceived, messageStart[1] + 3, HAL_MAX_DELAY); //+3 for CRC and End
 8005284:	193b      	adds	r3, r7, r4
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	b29b      	uxth	r3, r3
 800528a:	3303      	adds	r3, #3
 800528c:	b29a      	uxth	r2, r3
 800528e:	2301      	movs	r3, #1
 8005290:	425b      	negs	r3, r3
 8005292:	2108      	movs	r1, #8
 8005294:	1879      	adds	r1, r7, r1
 8005296:	482b      	ldr	r0, [pc, #172]	; (8005344 <VESCReceiveMessage+0x120>)
 8005298:	f7fe fe8e 	bl	8003fb8 <HAL_UART_Receive>
	}

	lenMes = messageStart[1] + 3;
 800529c:	2084      	movs	r0, #132	; 0x84
 800529e:	0040      	lsls	r0, r0, #1
 80052a0:	183b      	adds	r3, r7, r0
 80052a2:	785a      	ldrb	r2, [r3, #1]
 80052a4:	240c      	movs	r4, #12
 80052a6:	34ff      	adds	r4, #255	; 0xff
 80052a8:	193b      	adds	r3, r7, r4
 80052aa:	3203      	adds	r2, #3
 80052ac:	701a      	strb	r2, [r3, #0]

	//Rebuild crc
	crcMessage = messageReceived[lenMes - 3] << 8;
 80052ae:	193b      	adds	r3, r7, r4
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	3b03      	subs	r3, #3
 80052b4:	4a22      	ldr	r2, [pc, #136]	; (8005340 <VESCReceiveMessage+0x11c>)
 80052b6:	2688      	movs	r6, #136	; 0x88
 80052b8:	0076      	lsls	r6, r6, #1
 80052ba:	1992      	adds	r2, r2, r6
 80052bc:	19d2      	adds	r2, r2, r7
 80052be:	5cd3      	ldrb	r3, [r2, r3]
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	2587      	movs	r5, #135	; 0x87
 80052c4:	006d      	lsls	r5, r5, #1
 80052c6:	197b      	adds	r3, r7, r5
 80052c8:	0212      	lsls	r2, r2, #8
 80052ca:	801a      	strh	r2, [r3, #0]
	crcMessage &= 0xFF00;
 80052cc:	197b      	adds	r3, r7, r5
 80052ce:	197a      	adds	r2, r7, r5
 80052d0:	8812      	ldrh	r2, [r2, #0]
 80052d2:	21ff      	movs	r1, #255	; 0xff
 80052d4:	438a      	bics	r2, r1
 80052d6:	801a      	strh	r2, [r3, #0]
	crcMessage += messageReceived[lenMes - 2];
 80052d8:	193b      	adds	r3, r7, r4
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	3b02      	subs	r3, #2
 80052de:	4a18      	ldr	r2, [pc, #96]	; (8005340 <VESCReceiveMessage+0x11c>)
 80052e0:	1992      	adds	r2, r2, r6
 80052e2:	19d2      	adds	r2, r2, r7
 80052e4:	5cd3      	ldrb	r3, [r2, r3]
 80052e6:	b299      	uxth	r1, r3
 80052e8:	197b      	adds	r3, r7, r5
 80052ea:	197a      	adds	r2, r7, r5
 80052ec:	8812      	ldrh	r2, [r2, #0]
 80052ee:	188a      	adds	r2, r1, r2
 80052f0:	801a      	strh	r2, [r3, #0]

	//Extract payload
	memcpy(payloadReceived, messageReceived, messageStart[1]);
 80052f2:	0006      	movs	r6, r0
 80052f4:	19bb      	adds	r3, r7, r6
 80052f6:	785b      	ldrb	r3, [r3, #1]
 80052f8:	001a      	movs	r2, r3
 80052fa:	2308      	movs	r3, #8
 80052fc:	18f9      	adds	r1, r7, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	0018      	movs	r0, r3
 8005302:	f000 f84d 	bl	80053a0 <memcpy>

	crcPayload = crc16(payloadReceived, messageStart[1]);
 8005306:	19bb      	adds	r3, r7, r6
 8005308:	785b      	ldrb	r3, [r3, #1]
 800530a:	001a      	movs	r2, r3
 800530c:	2386      	movs	r3, #134	; 0x86
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	18fc      	adds	r4, r7, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0011      	movs	r1, r2
 8005316:	0018      	movs	r0, r3
 8005318:	f7ff fea6 	bl	8005068 <crc16>
 800531c:	0003      	movs	r3, r0
 800531e:	8023      	strh	r3, [r4, #0]

	if(crcPayload == crcMessage){
 8005320:	2386      	movs	r3, #134	; 0x86
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	18fa      	adds	r2, r7, r3
 8005326:	197b      	adds	r3, r7, r5
 8005328:	8812      	ldrh	r2, [r2, #0]
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d102      	bne.n	8005336 <VESCReceiveMessage+0x112>
		return messageStart[1];
 8005330:	19bb      	adds	r3, r7, r6
 8005332:	785b      	ldrb	r3, [r3, #1]
 8005334:	e000      	b.n	8005338 <VESCReceiveMessage+0x114>
	}
	else{
		return 0;
 8005336:	2300      	movs	r3, #0
	}
}
 8005338:	0018      	movs	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	b045      	add	sp, #276	; 0x114
 800533e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005340:	fffffef8 	.word	0xfffffef8
 8005344:	20000154 	.word	0x20000154

08005348 <memset>:
 8005348:	0003      	movs	r3, r0
 800534a:	1882      	adds	r2, r0, r2
 800534c:	4293      	cmp	r3, r2
 800534e:	d100      	bne.n	8005352 <memset+0xa>
 8005350:	4770      	bx	lr
 8005352:	7019      	strb	r1, [r3, #0]
 8005354:	3301      	adds	r3, #1
 8005356:	e7f9      	b.n	800534c <memset+0x4>

08005358 <__libc_init_array>:
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	2600      	movs	r6, #0
 800535c:	4c0c      	ldr	r4, [pc, #48]	; (8005390 <__libc_init_array+0x38>)
 800535e:	4d0d      	ldr	r5, [pc, #52]	; (8005394 <__libc_init_array+0x3c>)
 8005360:	1b64      	subs	r4, r4, r5
 8005362:	10a4      	asrs	r4, r4, #2
 8005364:	42a6      	cmp	r6, r4
 8005366:	d109      	bne.n	800537c <__libc_init_array+0x24>
 8005368:	2600      	movs	r6, #0
 800536a:	f000 f823 	bl	80053b4 <_init>
 800536e:	4c0a      	ldr	r4, [pc, #40]	; (8005398 <__libc_init_array+0x40>)
 8005370:	4d0a      	ldr	r5, [pc, #40]	; (800539c <__libc_init_array+0x44>)
 8005372:	1b64      	subs	r4, r4, r5
 8005374:	10a4      	asrs	r4, r4, #2
 8005376:	42a6      	cmp	r6, r4
 8005378:	d105      	bne.n	8005386 <__libc_init_array+0x2e>
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	00b3      	lsls	r3, r6, #2
 800537e:	58eb      	ldr	r3, [r5, r3]
 8005380:	4798      	blx	r3
 8005382:	3601      	adds	r6, #1
 8005384:	e7ee      	b.n	8005364 <__libc_init_array+0xc>
 8005386:	00b3      	lsls	r3, r6, #2
 8005388:	58eb      	ldr	r3, [r5, r3]
 800538a:	4798      	blx	r3
 800538c:	3601      	adds	r6, #1
 800538e:	e7f2      	b.n	8005376 <__libc_init_array+0x1e>
 8005390:	080056b0 	.word	0x080056b0
 8005394:	080056b0 	.word	0x080056b0
 8005398:	080056b4 	.word	0x080056b4
 800539c:	080056b0 	.word	0x080056b0

080053a0 <memcpy>:
 80053a0:	2300      	movs	r3, #0
 80053a2:	b510      	push	{r4, lr}
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d100      	bne.n	80053aa <memcpy+0xa>
 80053a8:	bd10      	pop	{r4, pc}
 80053aa:	5ccc      	ldrb	r4, [r1, r3]
 80053ac:	54c4      	strb	r4, [r0, r3]
 80053ae:	3301      	adds	r3, #1
 80053b0:	e7f8      	b.n	80053a4 <memcpy+0x4>
	...

080053b4 <_init>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr

080053c0 <_fini>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr
