
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d74  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800610c  0800610c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006114  08006114  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800611c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000014  08006130  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08006130  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017291  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000345f  00000000  00000000  00037310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  0003a770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101f  00000000  00000000  0003bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b35  00000000  00000000  0003cc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc0a  00000000  00000000  0005574c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099b62  00000000  00000000  00071356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bac  00000000  00000000  0010aeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0010fa64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005e18 	.word	0x08005e18

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08005e18 	.word	0x08005e18

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 f98b 	bl	8000714 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 f917 	bl	800063c <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 f97d 	bl	8000714 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f973 	bl	8000714 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f923 	bl	8000688 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f919 	bl	8000688 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	0008      	movs	r0, r1
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	; (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	; (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f806 	bl	80004a4 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 fe6e 	bl	80011a4 <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 fe69 	bl	80011a4 <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	d434      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004da:	469b      	mov	fp, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	465a      	mov	r2, fp
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83b      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e079      	b.n	80005ea <__udivmoddi4+0x146>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e076      	b.n	80005f0 <__udivmoddi4+0x14c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e029      	b.n	8000570 <__udivmoddi4+0xcc>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	469b      	mov	fp, r3
 8000548:	2320      	movs	r3, #32
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4652      	mov	r2, sl
 800054e:	40da      	lsrs	r2, r3
 8000550:	4641      	mov	r1, r8
 8000552:	0013      	movs	r3, r2
 8000554:	464a      	mov	r2, r9
 8000556:	408a      	lsls	r2, r1
 8000558:	0017      	movs	r7, r2
 800055a:	4642      	mov	r2, r8
 800055c:	431f      	orrs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d9c3      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	4643      	mov	r3, r8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0d8      	beq.n	8000528 <__udivmoddi4+0x84>
 8000576:	07fb      	lsls	r3, r7, #31
 8000578:	0872      	lsrs	r2, r6, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4646      	mov	r6, r8
 800057e:	087b      	lsrs	r3, r7, #1
 8000580:	e00e      	b.n	80005a0 <__udivmoddi4+0xfc>
 8000582:	42ab      	cmp	r3, r5
 8000584:	d101      	bne.n	800058a <__udivmoddi4+0xe6>
 8000586:	42a2      	cmp	r2, r4
 8000588:	d80c      	bhi.n	80005a4 <__udivmoddi4+0x100>
 800058a:	1aa4      	subs	r4, r4, r2
 800058c:	419d      	sbcs	r5, r3
 800058e:	2001      	movs	r0, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2100      	movs	r1, #0
 8000596:	3e01      	subs	r6, #1
 8000598:	1824      	adds	r4, r4, r0
 800059a:	414d      	adcs	r5, r1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d006      	beq.n	80005ae <__udivmoddi4+0x10a>
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	d9ee      	bls.n	8000582 <__udivmoddi4+0xde>
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1924      	adds	r4, r4, r4
 80005a8:	416d      	adcs	r5, r5
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d1f8      	bne.n	80005a0 <__udivmoddi4+0xfc>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	465b      	mov	r3, fp
 80005b4:	1900      	adds	r0, r0, r4
 80005b6:	4169      	adcs	r1, r5
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db24      	blt.n	8000606 <__udivmoddi4+0x162>
 80005bc:	002b      	movs	r3, r5
 80005be:	465a      	mov	r2, fp
 80005c0:	4644      	mov	r4, r8
 80005c2:	40d3      	lsrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db2a      	blt.n	8000628 <__udivmoddi4+0x184>
 80005d2:	0026      	movs	r6, r4
 80005d4:	409e      	lsls	r6, r3
 80005d6:	0033      	movs	r3, r6
 80005d8:	0026      	movs	r6, r4
 80005da:	4647      	mov	r7, r8
 80005dc:	40be      	lsls	r6, r7
 80005de:	0032      	movs	r2, r6
 80005e0:	1a80      	subs	r0, r0, r2
 80005e2:	4199      	sbcs	r1, r3
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	e79e      	b.n	8000528 <__udivmoddi4+0x84>
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	d8bc      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80005ee:	e782      	b.n	80004f6 <__udivmoddi4+0x52>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	9100      	str	r1, [sp, #0]
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	40da      	lsrs	r2, r3
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	e785      	b.n	8000512 <__udivmoddi4+0x6e>
 8000606:	4642      	mov	r2, r8
 8000608:	2320      	movs	r3, #32
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4646      	mov	r6, r8
 8000610:	409a      	lsls	r2, r3
 8000612:	0023      	movs	r3, r4
 8000614:	40f3      	lsrs	r3, r6
 8000616:	4644      	mov	r4, r8
 8000618:	4313      	orrs	r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	dad4      	bge.n	80005d2 <__udivmoddi4+0x12e>
 8000628:	4642      	mov	r2, r8
 800062a:	002f      	movs	r7, r5
 800062c:	2320      	movs	r3, #32
 800062e:	0026      	movs	r6, r4
 8000630:	4097      	lsls	r7, r2
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	40de      	lsrs	r6, r3
 8000636:	003b      	movs	r3, r7
 8000638:	4333      	orrs	r3, r6
 800063a:	e7cd      	b.n	80005d8 <__udivmoddi4+0x134>

0800063c <__eqsf2>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	0042      	lsls	r2, r0, #1
 8000640:	0245      	lsls	r5, r0, #9
 8000642:	024e      	lsls	r6, r1, #9
 8000644:	004c      	lsls	r4, r1, #1
 8000646:	0fc3      	lsrs	r3, r0, #31
 8000648:	0a6d      	lsrs	r5, r5, #9
 800064a:	2001      	movs	r0, #1
 800064c:	0e12      	lsrs	r2, r2, #24
 800064e:	0a76      	lsrs	r6, r6, #9
 8000650:	0e24      	lsrs	r4, r4, #24
 8000652:	0fc9      	lsrs	r1, r1, #31
 8000654:	2aff      	cmp	r2, #255	; 0xff
 8000656:	d006      	beq.n	8000666 <__eqsf2+0x2a>
 8000658:	2cff      	cmp	r4, #255	; 0xff
 800065a:	d003      	beq.n	8000664 <__eqsf2+0x28>
 800065c:	42a2      	cmp	r2, r4
 800065e:	d101      	bne.n	8000664 <__eqsf2+0x28>
 8000660:	42b5      	cmp	r5, r6
 8000662:	d006      	beq.n	8000672 <__eqsf2+0x36>
 8000664:	bd70      	pop	{r4, r5, r6, pc}
 8000666:	2d00      	cmp	r5, #0
 8000668:	d1fc      	bne.n	8000664 <__eqsf2+0x28>
 800066a:	2cff      	cmp	r4, #255	; 0xff
 800066c:	d1fa      	bne.n	8000664 <__eqsf2+0x28>
 800066e:	2e00      	cmp	r6, #0
 8000670:	d1f8      	bne.n	8000664 <__eqsf2+0x28>
 8000672:	428b      	cmp	r3, r1
 8000674:	d006      	beq.n	8000684 <__eqsf2+0x48>
 8000676:	2001      	movs	r0, #1
 8000678:	2a00      	cmp	r2, #0
 800067a:	d1f3      	bne.n	8000664 <__eqsf2+0x28>
 800067c:	0028      	movs	r0, r5
 800067e:	1e43      	subs	r3, r0, #1
 8000680:	4198      	sbcs	r0, r3
 8000682:	e7ef      	b.n	8000664 <__eqsf2+0x28>
 8000684:	2000      	movs	r0, #0
 8000686:	e7ed      	b.n	8000664 <__eqsf2+0x28>

08000688 <__gesf2>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	0042      	lsls	r2, r0, #1
 800068c:	0245      	lsls	r5, r0, #9
 800068e:	024e      	lsls	r6, r1, #9
 8000690:	004c      	lsls	r4, r1, #1
 8000692:	0fc3      	lsrs	r3, r0, #31
 8000694:	0a6d      	lsrs	r5, r5, #9
 8000696:	0e12      	lsrs	r2, r2, #24
 8000698:	0a76      	lsrs	r6, r6, #9
 800069a:	0e24      	lsrs	r4, r4, #24
 800069c:	0fc8      	lsrs	r0, r1, #31
 800069e:	2aff      	cmp	r2, #255	; 0xff
 80006a0:	d01b      	beq.n	80006da <__gesf2+0x52>
 80006a2:	2cff      	cmp	r4, #255	; 0xff
 80006a4:	d00e      	beq.n	80006c4 <__gesf2+0x3c>
 80006a6:	2a00      	cmp	r2, #0
 80006a8:	d11b      	bne.n	80006e2 <__gesf2+0x5a>
 80006aa:	2c00      	cmp	r4, #0
 80006ac:	d101      	bne.n	80006b2 <__gesf2+0x2a>
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d01c      	beq.n	80006ec <__gesf2+0x64>
 80006b2:	2d00      	cmp	r5, #0
 80006b4:	d00c      	beq.n	80006d0 <__gesf2+0x48>
 80006b6:	4283      	cmp	r3, r0
 80006b8:	d01c      	beq.n	80006f4 <__gesf2+0x6c>
 80006ba:	2102      	movs	r1, #2
 80006bc:	1e58      	subs	r0, r3, #1
 80006be:	4008      	ands	r0, r1
 80006c0:	3801      	subs	r0, #1
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	2e00      	cmp	r6, #0
 80006c6:	d122      	bne.n	800070e <__gesf2+0x86>
 80006c8:	2a00      	cmp	r2, #0
 80006ca:	d1f4      	bne.n	80006b6 <__gesf2+0x2e>
 80006cc:	2d00      	cmp	r5, #0
 80006ce:	d1f2      	bne.n	80006b6 <__gesf2+0x2e>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d1f6      	bne.n	80006c2 <__gesf2+0x3a>
 80006d4:	2001      	movs	r0, #1
 80006d6:	4240      	negs	r0, r0
 80006d8:	e7f3      	b.n	80006c2 <__gesf2+0x3a>
 80006da:	2d00      	cmp	r5, #0
 80006dc:	d117      	bne.n	800070e <__gesf2+0x86>
 80006de:	2cff      	cmp	r4, #255	; 0xff
 80006e0:	d0f0      	beq.n	80006c4 <__gesf2+0x3c>
 80006e2:	2c00      	cmp	r4, #0
 80006e4:	d1e7      	bne.n	80006b6 <__gesf2+0x2e>
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	d1e5      	bne.n	80006b6 <__gesf2+0x2e>
 80006ea:	e7e6      	b.n	80006ba <__gesf2+0x32>
 80006ec:	2000      	movs	r0, #0
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d0e7      	beq.n	80006c2 <__gesf2+0x3a>
 80006f2:	e7e2      	b.n	80006ba <__gesf2+0x32>
 80006f4:	42a2      	cmp	r2, r4
 80006f6:	dc05      	bgt.n	8000704 <__gesf2+0x7c>
 80006f8:	dbea      	blt.n	80006d0 <__gesf2+0x48>
 80006fa:	42b5      	cmp	r5, r6
 80006fc:	d802      	bhi.n	8000704 <__gesf2+0x7c>
 80006fe:	d3e7      	bcc.n	80006d0 <__gesf2+0x48>
 8000700:	2000      	movs	r0, #0
 8000702:	e7de      	b.n	80006c2 <__gesf2+0x3a>
 8000704:	4243      	negs	r3, r0
 8000706:	4158      	adcs	r0, r3
 8000708:	0040      	lsls	r0, r0, #1
 800070a:	3801      	subs	r0, #1
 800070c:	e7d9      	b.n	80006c2 <__gesf2+0x3a>
 800070e:	2002      	movs	r0, #2
 8000710:	4240      	negs	r0, r0
 8000712:	e7d6      	b.n	80006c2 <__gesf2+0x3a>

08000714 <__lesf2>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	0042      	lsls	r2, r0, #1
 8000718:	0245      	lsls	r5, r0, #9
 800071a:	024e      	lsls	r6, r1, #9
 800071c:	004c      	lsls	r4, r1, #1
 800071e:	0fc3      	lsrs	r3, r0, #31
 8000720:	0a6d      	lsrs	r5, r5, #9
 8000722:	0e12      	lsrs	r2, r2, #24
 8000724:	0a76      	lsrs	r6, r6, #9
 8000726:	0e24      	lsrs	r4, r4, #24
 8000728:	0fc8      	lsrs	r0, r1, #31
 800072a:	2aff      	cmp	r2, #255	; 0xff
 800072c:	d00b      	beq.n	8000746 <__lesf2+0x32>
 800072e:	2cff      	cmp	r4, #255	; 0xff
 8000730:	d00d      	beq.n	800074e <__lesf2+0x3a>
 8000732:	2a00      	cmp	r2, #0
 8000734:	d11f      	bne.n	8000776 <__lesf2+0x62>
 8000736:	2c00      	cmp	r4, #0
 8000738:	d116      	bne.n	8000768 <__lesf2+0x54>
 800073a:	2e00      	cmp	r6, #0
 800073c:	d114      	bne.n	8000768 <__lesf2+0x54>
 800073e:	2000      	movs	r0, #0
 8000740:	2d00      	cmp	r5, #0
 8000742:	d010      	beq.n	8000766 <__lesf2+0x52>
 8000744:	e009      	b.n	800075a <__lesf2+0x46>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d10c      	bne.n	8000764 <__lesf2+0x50>
 800074a:	2cff      	cmp	r4, #255	; 0xff
 800074c:	d113      	bne.n	8000776 <__lesf2+0x62>
 800074e:	2e00      	cmp	r6, #0
 8000750:	d108      	bne.n	8000764 <__lesf2+0x50>
 8000752:	2a00      	cmp	r2, #0
 8000754:	d008      	beq.n	8000768 <__lesf2+0x54>
 8000756:	4283      	cmp	r3, r0
 8000758:	d012      	beq.n	8000780 <__lesf2+0x6c>
 800075a:	2102      	movs	r1, #2
 800075c:	1e58      	subs	r0, r3, #1
 800075e:	4008      	ands	r0, r1
 8000760:	3801      	subs	r0, #1
 8000762:	e000      	b.n	8000766 <__lesf2+0x52>
 8000764:	2002      	movs	r0, #2
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	2d00      	cmp	r5, #0
 800076a:	d1f4      	bne.n	8000756 <__lesf2+0x42>
 800076c:	2800      	cmp	r0, #0
 800076e:	d1fa      	bne.n	8000766 <__lesf2+0x52>
 8000770:	2001      	movs	r0, #1
 8000772:	4240      	negs	r0, r0
 8000774:	e7f7      	b.n	8000766 <__lesf2+0x52>
 8000776:	2c00      	cmp	r4, #0
 8000778:	d1ed      	bne.n	8000756 <__lesf2+0x42>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d1eb      	bne.n	8000756 <__lesf2+0x42>
 800077e:	e7ec      	b.n	800075a <__lesf2+0x46>
 8000780:	42a2      	cmp	r2, r4
 8000782:	dc05      	bgt.n	8000790 <__lesf2+0x7c>
 8000784:	dbf2      	blt.n	800076c <__lesf2+0x58>
 8000786:	42b5      	cmp	r5, r6
 8000788:	d802      	bhi.n	8000790 <__lesf2+0x7c>
 800078a:	d3ef      	bcc.n	800076c <__lesf2+0x58>
 800078c:	2000      	movs	r0, #0
 800078e:	e7ea      	b.n	8000766 <__lesf2+0x52>
 8000790:	4243      	negs	r3, r0
 8000792:	4158      	adcs	r0, r3
 8000794:	0040      	lsls	r0, r0, #1
 8000796:	3801      	subs	r0, #1
 8000798:	e7e5      	b.n	8000766 <__lesf2+0x52>
 800079a:	46c0      	nop			; (mov r8, r8)

0800079c <__aeabi_fmul>:
 800079c:	0243      	lsls	r3, r0, #9
 800079e:	0a5b      	lsrs	r3, r3, #9
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a2:	464f      	mov	r7, r9
 80007a4:	4646      	mov	r6, r8
 80007a6:	4699      	mov	r9, r3
 80007a8:	46d6      	mov	lr, sl
 80007aa:	0fc3      	lsrs	r3, r0, #31
 80007ac:	0045      	lsls	r5, r0, #1
 80007ae:	4698      	mov	r8, r3
 80007b0:	b5c0      	push	{r6, r7, lr}
 80007b2:	464b      	mov	r3, r9
 80007b4:	1c0f      	adds	r7, r1, #0
 80007b6:	0e2d      	lsrs	r5, r5, #24
 80007b8:	d100      	bne.n	80007bc <__aeabi_fmul+0x20>
 80007ba:	e0cb      	b.n	8000954 <__aeabi_fmul+0x1b8>
 80007bc:	2dff      	cmp	r5, #255	; 0xff
 80007be:	d100      	bne.n	80007c2 <__aeabi_fmul+0x26>
 80007c0:	e0cf      	b.n	8000962 <__aeabi_fmul+0x1c6>
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	04d2      	lsls	r2, r2, #19
 80007c8:	431a      	orrs	r2, r3
 80007ca:	2300      	movs	r3, #0
 80007cc:	4691      	mov	r9, r2
 80007ce:	2600      	movs	r6, #0
 80007d0:	469a      	mov	sl, r3
 80007d2:	3d7f      	subs	r5, #127	; 0x7f
 80007d4:	027c      	lsls	r4, r7, #9
 80007d6:	007b      	lsls	r3, r7, #1
 80007d8:	0a64      	lsrs	r4, r4, #9
 80007da:	0e1b      	lsrs	r3, r3, #24
 80007dc:	0fff      	lsrs	r7, r7, #31
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fmul+0x48>
 80007e2:	e0a9      	b.n	8000938 <__aeabi_fmul+0x19c>
 80007e4:	2bff      	cmp	r3, #255	; 0xff
 80007e6:	d011      	beq.n	800080c <__aeabi_fmul+0x70>
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	00e4      	lsls	r4, r4, #3
 80007ec:	04d2      	lsls	r2, r2, #19
 80007ee:	4314      	orrs	r4, r2
 80007f0:	4642      	mov	r2, r8
 80007f2:	3b7f      	subs	r3, #127	; 0x7f
 80007f4:	195b      	adds	r3, r3, r5
 80007f6:	407a      	eors	r2, r7
 80007f8:	2000      	movs	r0, #0
 80007fa:	b2d2      	uxtb	r2, r2
 80007fc:	1c5d      	adds	r5, r3, #1
 80007fe:	2e0a      	cmp	r6, #10
 8000800:	dd13      	ble.n	800082a <__aeabi_fmul+0x8e>
 8000802:	003a      	movs	r2, r7
 8000804:	2e0b      	cmp	r6, #11
 8000806:	d047      	beq.n	8000898 <__aeabi_fmul+0xfc>
 8000808:	4647      	mov	r7, r8
 800080a:	e03f      	b.n	800088c <__aeabi_fmul+0xf0>
 800080c:	002b      	movs	r3, r5
 800080e:	33ff      	adds	r3, #255	; 0xff
 8000810:	2c00      	cmp	r4, #0
 8000812:	d11e      	bne.n	8000852 <__aeabi_fmul+0xb6>
 8000814:	2202      	movs	r2, #2
 8000816:	4316      	orrs	r6, r2
 8000818:	4642      	mov	r2, r8
 800081a:	3501      	adds	r5, #1
 800081c:	407a      	eors	r2, r7
 800081e:	b2d2      	uxtb	r2, r2
 8000820:	35ff      	adds	r5, #255	; 0xff
 8000822:	2e0a      	cmp	r6, #10
 8000824:	dd00      	ble.n	8000828 <__aeabi_fmul+0x8c>
 8000826:	e0e4      	b.n	80009f2 <__aeabi_fmul+0x256>
 8000828:	2002      	movs	r0, #2
 800082a:	2e02      	cmp	r6, #2
 800082c:	dc1c      	bgt.n	8000868 <__aeabi_fmul+0xcc>
 800082e:	3e01      	subs	r6, #1
 8000830:	2e01      	cmp	r6, #1
 8000832:	d842      	bhi.n	80008ba <__aeabi_fmul+0x11e>
 8000834:	2802      	cmp	r0, #2
 8000836:	d03d      	beq.n	80008b4 <__aeabi_fmul+0x118>
 8000838:	2801      	cmp	r0, #1
 800083a:	d166      	bne.n	800090a <__aeabi_fmul+0x16e>
 800083c:	2000      	movs	r0, #0
 800083e:	2100      	movs	r1, #0
 8000840:	05c0      	lsls	r0, r0, #23
 8000842:	4308      	orrs	r0, r1
 8000844:	07d2      	lsls	r2, r2, #31
 8000846:	4310      	orrs	r0, r2
 8000848:	bce0      	pop	{r5, r6, r7}
 800084a:	46ba      	mov	sl, r7
 800084c:	46b1      	mov	r9, r6
 800084e:	46a8      	mov	r8, r5
 8000850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000852:	2203      	movs	r2, #3
 8000854:	4316      	orrs	r6, r2
 8000856:	4642      	mov	r2, r8
 8000858:	3501      	adds	r5, #1
 800085a:	407a      	eors	r2, r7
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	35ff      	adds	r5, #255	; 0xff
 8000860:	2e0a      	cmp	r6, #10
 8000862:	dd00      	ble.n	8000866 <__aeabi_fmul+0xca>
 8000864:	e0e4      	b.n	8000a30 <__aeabi_fmul+0x294>
 8000866:	2003      	movs	r0, #3
 8000868:	2101      	movs	r1, #1
 800086a:	40b1      	lsls	r1, r6
 800086c:	26a6      	movs	r6, #166	; 0xa6
 800086e:	00f6      	lsls	r6, r6, #3
 8000870:	4231      	tst	r1, r6
 8000872:	d10a      	bne.n	800088a <__aeabi_fmul+0xee>
 8000874:	2690      	movs	r6, #144	; 0x90
 8000876:	00b6      	lsls	r6, r6, #2
 8000878:	4231      	tst	r1, r6
 800087a:	d116      	bne.n	80008aa <__aeabi_fmul+0x10e>
 800087c:	3eb9      	subs	r6, #185	; 0xb9
 800087e:	3eff      	subs	r6, #255	; 0xff
 8000880:	420e      	tst	r6, r1
 8000882:	d01a      	beq.n	80008ba <__aeabi_fmul+0x11e>
 8000884:	46a1      	mov	r9, r4
 8000886:	4682      	mov	sl, r0
 8000888:	e000      	b.n	800088c <__aeabi_fmul+0xf0>
 800088a:	0017      	movs	r7, r2
 800088c:	4653      	mov	r3, sl
 800088e:	003a      	movs	r2, r7
 8000890:	2b02      	cmp	r3, #2
 8000892:	d00f      	beq.n	80008b4 <__aeabi_fmul+0x118>
 8000894:	464c      	mov	r4, r9
 8000896:	4650      	mov	r0, sl
 8000898:	2803      	cmp	r0, #3
 800089a:	d1cd      	bne.n	8000838 <__aeabi_fmul+0x9c>
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	03c9      	lsls	r1, r1, #15
 80008a0:	4321      	orrs	r1, r4
 80008a2:	0249      	lsls	r1, r1, #9
 80008a4:	20ff      	movs	r0, #255	; 0xff
 80008a6:	0a49      	lsrs	r1, r1, #9
 80008a8:	e7ca      	b.n	8000840 <__aeabi_fmul+0xa4>
 80008aa:	2180      	movs	r1, #128	; 0x80
 80008ac:	2200      	movs	r2, #0
 80008ae:	20ff      	movs	r0, #255	; 0xff
 80008b0:	03c9      	lsls	r1, r1, #15
 80008b2:	e7c5      	b.n	8000840 <__aeabi_fmul+0xa4>
 80008b4:	20ff      	movs	r0, #255	; 0xff
 80008b6:	2100      	movs	r1, #0
 80008b8:	e7c2      	b.n	8000840 <__aeabi_fmul+0xa4>
 80008ba:	0c20      	lsrs	r0, r4, #16
 80008bc:	4649      	mov	r1, r9
 80008be:	0424      	lsls	r4, r4, #16
 80008c0:	0c24      	lsrs	r4, r4, #16
 80008c2:	0027      	movs	r7, r4
 80008c4:	0c0e      	lsrs	r6, r1, #16
 80008c6:	0409      	lsls	r1, r1, #16
 80008c8:	0c09      	lsrs	r1, r1, #16
 80008ca:	4374      	muls	r4, r6
 80008cc:	434f      	muls	r7, r1
 80008ce:	4346      	muls	r6, r0
 80008d0:	4348      	muls	r0, r1
 80008d2:	0c39      	lsrs	r1, r7, #16
 80008d4:	1900      	adds	r0, r0, r4
 80008d6:	1809      	adds	r1, r1, r0
 80008d8:	428c      	cmp	r4, r1
 80008da:	d903      	bls.n	80008e4 <__aeabi_fmul+0x148>
 80008dc:	2080      	movs	r0, #128	; 0x80
 80008de:	0240      	lsls	r0, r0, #9
 80008e0:	4684      	mov	ip, r0
 80008e2:	4466      	add	r6, ip
 80008e4:	043f      	lsls	r7, r7, #16
 80008e6:	0408      	lsls	r0, r1, #16
 80008e8:	0c3f      	lsrs	r7, r7, #16
 80008ea:	19c0      	adds	r0, r0, r7
 80008ec:	0184      	lsls	r4, r0, #6
 80008ee:	1e67      	subs	r7, r4, #1
 80008f0:	41bc      	sbcs	r4, r7
 80008f2:	0c09      	lsrs	r1, r1, #16
 80008f4:	0e80      	lsrs	r0, r0, #26
 80008f6:	1989      	adds	r1, r1, r6
 80008f8:	4304      	orrs	r4, r0
 80008fa:	0189      	lsls	r1, r1, #6
 80008fc:	430c      	orrs	r4, r1
 80008fe:	0109      	lsls	r1, r1, #4
 8000900:	d571      	bpl.n	80009e6 <__aeabi_fmul+0x24a>
 8000902:	2301      	movs	r3, #1
 8000904:	0861      	lsrs	r1, r4, #1
 8000906:	401c      	ands	r4, r3
 8000908:	430c      	orrs	r4, r1
 800090a:	002b      	movs	r3, r5
 800090c:	337f      	adds	r3, #127	; 0x7f
 800090e:	2b00      	cmp	r3, #0
 8000910:	dd51      	ble.n	80009b6 <__aeabi_fmul+0x21a>
 8000912:	0761      	lsls	r1, r4, #29
 8000914:	d004      	beq.n	8000920 <__aeabi_fmul+0x184>
 8000916:	210f      	movs	r1, #15
 8000918:	4021      	ands	r1, r4
 800091a:	2904      	cmp	r1, #4
 800091c:	d000      	beq.n	8000920 <__aeabi_fmul+0x184>
 800091e:	3404      	adds	r4, #4
 8000920:	0121      	lsls	r1, r4, #4
 8000922:	d503      	bpl.n	800092c <__aeabi_fmul+0x190>
 8000924:	4b43      	ldr	r3, [pc, #268]	; (8000a34 <__aeabi_fmul+0x298>)
 8000926:	401c      	ands	r4, r3
 8000928:	002b      	movs	r3, r5
 800092a:	3380      	adds	r3, #128	; 0x80
 800092c:	2bfe      	cmp	r3, #254	; 0xfe
 800092e:	dcc1      	bgt.n	80008b4 <__aeabi_fmul+0x118>
 8000930:	01a1      	lsls	r1, r4, #6
 8000932:	0a49      	lsrs	r1, r1, #9
 8000934:	b2d8      	uxtb	r0, r3
 8000936:	e783      	b.n	8000840 <__aeabi_fmul+0xa4>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d12c      	bne.n	8000996 <__aeabi_fmul+0x1fa>
 800093c:	2301      	movs	r3, #1
 800093e:	4642      	mov	r2, r8
 8000940:	431e      	orrs	r6, r3
 8000942:	002b      	movs	r3, r5
 8000944:	407a      	eors	r2, r7
 8000946:	2001      	movs	r0, #1
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	1c5d      	adds	r5, r3, #1
 800094c:	2e0a      	cmp	r6, #10
 800094e:	dd00      	ble.n	8000952 <__aeabi_fmul+0x1b6>
 8000950:	e757      	b.n	8000802 <__aeabi_fmul+0x66>
 8000952:	e76a      	b.n	800082a <__aeabi_fmul+0x8e>
 8000954:	2b00      	cmp	r3, #0
 8000956:	d110      	bne.n	800097a <__aeabi_fmul+0x1de>
 8000958:	2301      	movs	r3, #1
 800095a:	2604      	movs	r6, #4
 800095c:	2500      	movs	r5, #0
 800095e:	469a      	mov	sl, r3
 8000960:	e738      	b.n	80007d4 <__aeabi_fmul+0x38>
 8000962:	2b00      	cmp	r3, #0
 8000964:	d104      	bne.n	8000970 <__aeabi_fmul+0x1d4>
 8000966:	2302      	movs	r3, #2
 8000968:	2608      	movs	r6, #8
 800096a:	25ff      	movs	r5, #255	; 0xff
 800096c:	469a      	mov	sl, r3
 800096e:	e731      	b.n	80007d4 <__aeabi_fmul+0x38>
 8000970:	2303      	movs	r3, #3
 8000972:	260c      	movs	r6, #12
 8000974:	25ff      	movs	r5, #255	; 0xff
 8000976:	469a      	mov	sl, r3
 8000978:	e72c      	b.n	80007d4 <__aeabi_fmul+0x38>
 800097a:	4648      	mov	r0, r9
 800097c:	f000 fbf4 	bl	8001168 <__clzsi2>
 8000980:	464a      	mov	r2, r9
 8000982:	1f43      	subs	r3, r0, #5
 8000984:	2576      	movs	r5, #118	; 0x76
 8000986:	409a      	lsls	r2, r3
 8000988:	2300      	movs	r3, #0
 800098a:	426d      	negs	r5, r5
 800098c:	4691      	mov	r9, r2
 800098e:	2600      	movs	r6, #0
 8000990:	469a      	mov	sl, r3
 8000992:	1a2d      	subs	r5, r5, r0
 8000994:	e71e      	b.n	80007d4 <__aeabi_fmul+0x38>
 8000996:	0020      	movs	r0, r4
 8000998:	f000 fbe6 	bl	8001168 <__clzsi2>
 800099c:	4642      	mov	r2, r8
 800099e:	1f43      	subs	r3, r0, #5
 80009a0:	409c      	lsls	r4, r3
 80009a2:	1a2b      	subs	r3, r5, r0
 80009a4:	3b76      	subs	r3, #118	; 0x76
 80009a6:	407a      	eors	r2, r7
 80009a8:	2000      	movs	r0, #0
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	1c5d      	adds	r5, r3, #1
 80009ae:	2e0a      	cmp	r6, #10
 80009b0:	dd00      	ble.n	80009b4 <__aeabi_fmul+0x218>
 80009b2:	e726      	b.n	8000802 <__aeabi_fmul+0x66>
 80009b4:	e739      	b.n	800082a <__aeabi_fmul+0x8e>
 80009b6:	2101      	movs	r1, #1
 80009b8:	1acb      	subs	r3, r1, r3
 80009ba:	2b1b      	cmp	r3, #27
 80009bc:	dd00      	ble.n	80009c0 <__aeabi_fmul+0x224>
 80009be:	e73d      	b.n	800083c <__aeabi_fmul+0xa0>
 80009c0:	359e      	adds	r5, #158	; 0x9e
 80009c2:	0021      	movs	r1, r4
 80009c4:	40ac      	lsls	r4, r5
 80009c6:	40d9      	lsrs	r1, r3
 80009c8:	1e63      	subs	r3, r4, #1
 80009ca:	419c      	sbcs	r4, r3
 80009cc:	4321      	orrs	r1, r4
 80009ce:	074b      	lsls	r3, r1, #29
 80009d0:	d004      	beq.n	80009dc <__aeabi_fmul+0x240>
 80009d2:	230f      	movs	r3, #15
 80009d4:	400b      	ands	r3, r1
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	d000      	beq.n	80009dc <__aeabi_fmul+0x240>
 80009da:	3104      	adds	r1, #4
 80009dc:	014b      	lsls	r3, r1, #5
 80009de:	d504      	bpl.n	80009ea <__aeabi_fmul+0x24e>
 80009e0:	2001      	movs	r0, #1
 80009e2:	2100      	movs	r1, #0
 80009e4:	e72c      	b.n	8000840 <__aeabi_fmul+0xa4>
 80009e6:	001d      	movs	r5, r3
 80009e8:	e78f      	b.n	800090a <__aeabi_fmul+0x16e>
 80009ea:	0189      	lsls	r1, r1, #6
 80009ec:	2000      	movs	r0, #0
 80009ee:	0a49      	lsrs	r1, r1, #9
 80009f0:	e726      	b.n	8000840 <__aeabi_fmul+0xa4>
 80009f2:	2302      	movs	r3, #2
 80009f4:	2e0f      	cmp	r6, #15
 80009f6:	d10c      	bne.n	8000a12 <__aeabi_fmul+0x276>
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	464b      	mov	r3, r9
 80009fc:	03c9      	lsls	r1, r1, #15
 80009fe:	420b      	tst	r3, r1
 8000a00:	d00d      	beq.n	8000a1e <__aeabi_fmul+0x282>
 8000a02:	420c      	tst	r4, r1
 8000a04:	d10b      	bne.n	8000a1e <__aeabi_fmul+0x282>
 8000a06:	4321      	orrs	r1, r4
 8000a08:	0249      	lsls	r1, r1, #9
 8000a0a:	003a      	movs	r2, r7
 8000a0c:	20ff      	movs	r0, #255	; 0xff
 8000a0e:	0a49      	lsrs	r1, r1, #9
 8000a10:	e716      	b.n	8000840 <__aeabi_fmul+0xa4>
 8000a12:	2e0b      	cmp	r6, #11
 8000a14:	d000      	beq.n	8000a18 <__aeabi_fmul+0x27c>
 8000a16:	e6f7      	b.n	8000808 <__aeabi_fmul+0x6c>
 8000a18:	46a1      	mov	r9, r4
 8000a1a:	469a      	mov	sl, r3
 8000a1c:	e736      	b.n	800088c <__aeabi_fmul+0xf0>
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	464b      	mov	r3, r9
 8000a22:	03c9      	lsls	r1, r1, #15
 8000a24:	4319      	orrs	r1, r3
 8000a26:	0249      	lsls	r1, r1, #9
 8000a28:	4642      	mov	r2, r8
 8000a2a:	20ff      	movs	r0, #255	; 0xff
 8000a2c:	0a49      	lsrs	r1, r1, #9
 8000a2e:	e707      	b.n	8000840 <__aeabi_fmul+0xa4>
 8000a30:	2303      	movs	r3, #3
 8000a32:	e7df      	b.n	80009f4 <__aeabi_fmul+0x258>
 8000a34:	f7ffffff 	.word	0xf7ffffff

08000a38 <__aeabi_f2iz>:
 8000a38:	0241      	lsls	r1, r0, #9
 8000a3a:	0042      	lsls	r2, r0, #1
 8000a3c:	0fc3      	lsrs	r3, r0, #31
 8000a3e:	0a49      	lsrs	r1, r1, #9
 8000a40:	2000      	movs	r0, #0
 8000a42:	0e12      	lsrs	r2, r2, #24
 8000a44:	2a7e      	cmp	r2, #126	; 0x7e
 8000a46:	dd03      	ble.n	8000a50 <__aeabi_f2iz+0x18>
 8000a48:	2a9d      	cmp	r2, #157	; 0x9d
 8000a4a:	dd02      	ble.n	8000a52 <__aeabi_f2iz+0x1a>
 8000a4c:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <__aeabi_f2iz+0x3c>)
 8000a4e:	1898      	adds	r0, r3, r2
 8000a50:	4770      	bx	lr
 8000a52:	2080      	movs	r0, #128	; 0x80
 8000a54:	0400      	lsls	r0, r0, #16
 8000a56:	4301      	orrs	r1, r0
 8000a58:	2a95      	cmp	r2, #149	; 0x95
 8000a5a:	dc07      	bgt.n	8000a6c <__aeabi_f2iz+0x34>
 8000a5c:	2096      	movs	r0, #150	; 0x96
 8000a5e:	1a82      	subs	r2, r0, r2
 8000a60:	40d1      	lsrs	r1, r2
 8000a62:	4248      	negs	r0, r1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f3      	bne.n	8000a50 <__aeabi_f2iz+0x18>
 8000a68:	0008      	movs	r0, r1
 8000a6a:	e7f1      	b.n	8000a50 <__aeabi_f2iz+0x18>
 8000a6c:	3a96      	subs	r2, #150	; 0x96
 8000a6e:	4091      	lsls	r1, r2
 8000a70:	e7f7      	b.n	8000a62 <__aeabi_f2iz+0x2a>
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	7fffffff 	.word	0x7fffffff

08000a78 <__aeabi_dmul>:
 8000a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7a:	4645      	mov	r5, r8
 8000a7c:	46de      	mov	lr, fp
 8000a7e:	4657      	mov	r7, sl
 8000a80:	464e      	mov	r6, r9
 8000a82:	b5e0      	push	{r5, r6, r7, lr}
 8000a84:	001f      	movs	r7, r3
 8000a86:	030b      	lsls	r3, r1, #12
 8000a88:	0b1b      	lsrs	r3, r3, #12
 8000a8a:	469b      	mov	fp, r3
 8000a8c:	004d      	lsls	r5, r1, #1
 8000a8e:	0fcb      	lsrs	r3, r1, #31
 8000a90:	0004      	movs	r4, r0
 8000a92:	4691      	mov	r9, r2
 8000a94:	4698      	mov	r8, r3
 8000a96:	b087      	sub	sp, #28
 8000a98:	0d6d      	lsrs	r5, r5, #21
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dmul+0x26>
 8000a9c:	e1cd      	b.n	8000e3a <__aeabi_dmul+0x3c2>
 8000a9e:	4bce      	ldr	r3, [pc, #824]	; (8000dd8 <__aeabi_dmul+0x360>)
 8000aa0:	429d      	cmp	r5, r3
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dmul+0x2e>
 8000aa4:	e1e9      	b.n	8000e7a <__aeabi_dmul+0x402>
 8000aa6:	465a      	mov	r2, fp
 8000aa8:	0f43      	lsrs	r3, r0, #29
 8000aaa:	00d2      	lsls	r2, r2, #3
 8000aac:	4313      	orrs	r3, r2
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	0412      	lsls	r2, r2, #16
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	00c3      	lsls	r3, r0, #3
 8000ab6:	469a      	mov	sl, r3
 8000ab8:	4bc8      	ldr	r3, [pc, #800]	; (8000ddc <__aeabi_dmul+0x364>)
 8000aba:	4693      	mov	fp, r2
 8000abc:	469c      	mov	ip, r3
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2600      	movs	r6, #0
 8000ac2:	4465      	add	r5, ip
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	033c      	lsls	r4, r7, #12
 8000ac8:	007b      	lsls	r3, r7, #1
 8000aca:	4648      	mov	r0, r9
 8000acc:	0b24      	lsrs	r4, r4, #12
 8000ace:	0d5b      	lsrs	r3, r3, #21
 8000ad0:	0fff      	lsrs	r7, r7, #31
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dmul+0x60>
 8000ad6:	e189      	b.n	8000dec <__aeabi_dmul+0x374>
 8000ad8:	4abf      	ldr	r2, [pc, #764]	; (8000dd8 <__aeabi_dmul+0x360>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d019      	beq.n	8000b12 <__aeabi_dmul+0x9a>
 8000ade:	0f42      	lsrs	r2, r0, #29
 8000ae0:	00e4      	lsls	r4, r4, #3
 8000ae2:	4322      	orrs	r2, r4
 8000ae4:	2480      	movs	r4, #128	; 0x80
 8000ae6:	0424      	lsls	r4, r4, #16
 8000ae8:	4314      	orrs	r4, r2
 8000aea:	4abc      	ldr	r2, [pc, #752]	; (8000ddc <__aeabi_dmul+0x364>)
 8000aec:	2100      	movs	r1, #0
 8000aee:	4694      	mov	ip, r2
 8000af0:	4642      	mov	r2, r8
 8000af2:	4463      	add	r3, ip
 8000af4:	195b      	adds	r3, r3, r5
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	9b01      	ldr	r3, [sp, #4]
 8000afa:	407a      	eors	r2, r7
 8000afc:	3301      	adds	r3, #1
 8000afe:	00c0      	lsls	r0, r0, #3
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	9302      	str	r3, [sp, #8]
 8000b04:	2e0a      	cmp	r6, #10
 8000b06:	dd1c      	ble.n	8000b42 <__aeabi_dmul+0xca>
 8000b08:	003a      	movs	r2, r7
 8000b0a:	2e0b      	cmp	r6, #11
 8000b0c:	d05e      	beq.n	8000bcc <__aeabi_dmul+0x154>
 8000b0e:	4647      	mov	r7, r8
 8000b10:	e056      	b.n	8000bc0 <__aeabi_dmul+0x148>
 8000b12:	4649      	mov	r1, r9
 8000b14:	4bb0      	ldr	r3, [pc, #704]	; (8000dd8 <__aeabi_dmul+0x360>)
 8000b16:	4321      	orrs	r1, r4
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	d12a      	bne.n	8000b76 <__aeabi_dmul+0xfe>
 8000b20:	2080      	movs	r0, #128	; 0x80
 8000b22:	2202      	movs	r2, #2
 8000b24:	0100      	lsls	r0, r0, #4
 8000b26:	002b      	movs	r3, r5
 8000b28:	4684      	mov	ip, r0
 8000b2a:	4316      	orrs	r6, r2
 8000b2c:	4642      	mov	r2, r8
 8000b2e:	4463      	add	r3, ip
 8000b30:	407a      	eors	r2, r7
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	9302      	str	r3, [sp, #8]
 8000b36:	2e0a      	cmp	r6, #10
 8000b38:	dd00      	ble.n	8000b3c <__aeabi_dmul+0xc4>
 8000b3a:	e231      	b.n	8000fa0 <__aeabi_dmul+0x528>
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	2400      	movs	r4, #0
 8000b40:	2102      	movs	r1, #2
 8000b42:	2e02      	cmp	r6, #2
 8000b44:	dc26      	bgt.n	8000b94 <__aeabi_dmul+0x11c>
 8000b46:	3e01      	subs	r6, #1
 8000b48:	2e01      	cmp	r6, #1
 8000b4a:	d852      	bhi.n	8000bf2 <__aeabi_dmul+0x17a>
 8000b4c:	2902      	cmp	r1, #2
 8000b4e:	d04c      	beq.n	8000bea <__aeabi_dmul+0x172>
 8000b50:	2901      	cmp	r1, #1
 8000b52:	d000      	beq.n	8000b56 <__aeabi_dmul+0xde>
 8000b54:	e118      	b.n	8000d88 <__aeabi_dmul+0x310>
 8000b56:	2300      	movs	r3, #0
 8000b58:	2400      	movs	r4, #0
 8000b5a:	2500      	movs	r5, #0
 8000b5c:	051b      	lsls	r3, r3, #20
 8000b5e:	4323      	orrs	r3, r4
 8000b60:	07d2      	lsls	r2, r2, #31
 8000b62:	4313      	orrs	r3, r2
 8000b64:	0028      	movs	r0, r5
 8000b66:	0019      	movs	r1, r3
 8000b68:	b007      	add	sp, #28
 8000b6a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b6c:	46bb      	mov	fp, r7
 8000b6e:	46b2      	mov	sl, r6
 8000b70:	46a9      	mov	r9, r5
 8000b72:	46a0      	mov	r8, r4
 8000b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	2203      	movs	r2, #3
 8000b7a:	0109      	lsls	r1, r1, #4
 8000b7c:	002b      	movs	r3, r5
 8000b7e:	468c      	mov	ip, r1
 8000b80:	4316      	orrs	r6, r2
 8000b82:	4642      	mov	r2, r8
 8000b84:	4463      	add	r3, ip
 8000b86:	407a      	eors	r2, r7
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	9302      	str	r3, [sp, #8]
 8000b8c:	2e0a      	cmp	r6, #10
 8000b8e:	dd00      	ble.n	8000b92 <__aeabi_dmul+0x11a>
 8000b90:	e228      	b.n	8000fe4 <__aeabi_dmul+0x56c>
 8000b92:	2103      	movs	r1, #3
 8000b94:	2501      	movs	r5, #1
 8000b96:	40b5      	lsls	r5, r6
 8000b98:	46ac      	mov	ip, r5
 8000b9a:	26a6      	movs	r6, #166	; 0xa6
 8000b9c:	4663      	mov	r3, ip
 8000b9e:	00f6      	lsls	r6, r6, #3
 8000ba0:	4035      	ands	r5, r6
 8000ba2:	4233      	tst	r3, r6
 8000ba4:	d10b      	bne.n	8000bbe <__aeabi_dmul+0x146>
 8000ba6:	2690      	movs	r6, #144	; 0x90
 8000ba8:	00b6      	lsls	r6, r6, #2
 8000baa:	4233      	tst	r3, r6
 8000bac:	d118      	bne.n	8000be0 <__aeabi_dmul+0x168>
 8000bae:	3eb9      	subs	r6, #185	; 0xb9
 8000bb0:	3eff      	subs	r6, #255	; 0xff
 8000bb2:	421e      	tst	r6, r3
 8000bb4:	d01d      	beq.n	8000bf2 <__aeabi_dmul+0x17a>
 8000bb6:	46a3      	mov	fp, r4
 8000bb8:	4682      	mov	sl, r0
 8000bba:	9100      	str	r1, [sp, #0]
 8000bbc:	e000      	b.n	8000bc0 <__aeabi_dmul+0x148>
 8000bbe:	0017      	movs	r7, r2
 8000bc0:	9900      	ldr	r1, [sp, #0]
 8000bc2:	003a      	movs	r2, r7
 8000bc4:	2902      	cmp	r1, #2
 8000bc6:	d010      	beq.n	8000bea <__aeabi_dmul+0x172>
 8000bc8:	465c      	mov	r4, fp
 8000bca:	4650      	mov	r0, sl
 8000bcc:	2903      	cmp	r1, #3
 8000bce:	d1bf      	bne.n	8000b50 <__aeabi_dmul+0xd8>
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	031b      	lsls	r3, r3, #12
 8000bd4:	431c      	orrs	r4, r3
 8000bd6:	0324      	lsls	r4, r4, #12
 8000bd8:	0005      	movs	r5, r0
 8000bda:	4b7f      	ldr	r3, [pc, #508]	; (8000dd8 <__aeabi_dmul+0x360>)
 8000bdc:	0b24      	lsrs	r4, r4, #12
 8000bde:	e7bd      	b.n	8000b5c <__aeabi_dmul+0xe4>
 8000be0:	2480      	movs	r4, #128	; 0x80
 8000be2:	2200      	movs	r2, #0
 8000be4:	4b7c      	ldr	r3, [pc, #496]	; (8000dd8 <__aeabi_dmul+0x360>)
 8000be6:	0324      	lsls	r4, r4, #12
 8000be8:	e7b8      	b.n	8000b5c <__aeabi_dmul+0xe4>
 8000bea:	2400      	movs	r4, #0
 8000bec:	2500      	movs	r5, #0
 8000bee:	4b7a      	ldr	r3, [pc, #488]	; (8000dd8 <__aeabi_dmul+0x360>)
 8000bf0:	e7b4      	b.n	8000b5c <__aeabi_dmul+0xe4>
 8000bf2:	4653      	mov	r3, sl
 8000bf4:	041e      	lsls	r6, r3, #16
 8000bf6:	0c36      	lsrs	r6, r6, #16
 8000bf8:	0c1f      	lsrs	r7, r3, #16
 8000bfa:	0033      	movs	r3, r6
 8000bfc:	0c01      	lsrs	r1, r0, #16
 8000bfe:	0400      	lsls	r0, r0, #16
 8000c00:	0c00      	lsrs	r0, r0, #16
 8000c02:	4343      	muls	r3, r0
 8000c04:	4698      	mov	r8, r3
 8000c06:	0003      	movs	r3, r0
 8000c08:	437b      	muls	r3, r7
 8000c0a:	4699      	mov	r9, r3
 8000c0c:	0033      	movs	r3, r6
 8000c0e:	434b      	muls	r3, r1
 8000c10:	469c      	mov	ip, r3
 8000c12:	4643      	mov	r3, r8
 8000c14:	000d      	movs	r5, r1
 8000c16:	0c1b      	lsrs	r3, r3, #16
 8000c18:	469a      	mov	sl, r3
 8000c1a:	437d      	muls	r5, r7
 8000c1c:	44cc      	add	ip, r9
 8000c1e:	44d4      	add	ip, sl
 8000c20:	9500      	str	r5, [sp, #0]
 8000c22:	45e1      	cmp	r9, ip
 8000c24:	d904      	bls.n	8000c30 <__aeabi_dmul+0x1b8>
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	025b      	lsls	r3, r3, #9
 8000c2a:	4699      	mov	r9, r3
 8000c2c:	444d      	add	r5, r9
 8000c2e:	9500      	str	r5, [sp, #0]
 8000c30:	4663      	mov	r3, ip
 8000c32:	0c1b      	lsrs	r3, r3, #16
 8000c34:	001d      	movs	r5, r3
 8000c36:	4663      	mov	r3, ip
 8000c38:	041b      	lsls	r3, r3, #16
 8000c3a:	469c      	mov	ip, r3
 8000c3c:	4643      	mov	r3, r8
 8000c3e:	041b      	lsls	r3, r3, #16
 8000c40:	0c1b      	lsrs	r3, r3, #16
 8000c42:	4698      	mov	r8, r3
 8000c44:	4663      	mov	r3, ip
 8000c46:	4443      	add	r3, r8
 8000c48:	9303      	str	r3, [sp, #12]
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	4698      	mov	r8, r3
 8000c4e:	0033      	movs	r3, r6
 8000c50:	0424      	lsls	r4, r4, #16
 8000c52:	0c24      	lsrs	r4, r4, #16
 8000c54:	4363      	muls	r3, r4
 8000c56:	469c      	mov	ip, r3
 8000c58:	0023      	movs	r3, r4
 8000c5a:	437b      	muls	r3, r7
 8000c5c:	4699      	mov	r9, r3
 8000c5e:	4643      	mov	r3, r8
 8000c60:	435e      	muls	r6, r3
 8000c62:	435f      	muls	r7, r3
 8000c64:	444e      	add	r6, r9
 8000c66:	4663      	mov	r3, ip
 8000c68:	46b2      	mov	sl, r6
 8000c6a:	0c1e      	lsrs	r6, r3, #16
 8000c6c:	4456      	add	r6, sl
 8000c6e:	45b1      	cmp	r9, r6
 8000c70:	d903      	bls.n	8000c7a <__aeabi_dmul+0x202>
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	025b      	lsls	r3, r3, #9
 8000c76:	4699      	mov	r9, r3
 8000c78:	444f      	add	r7, r9
 8000c7a:	0c33      	lsrs	r3, r6, #16
 8000c7c:	4699      	mov	r9, r3
 8000c7e:	003b      	movs	r3, r7
 8000c80:	444b      	add	r3, r9
 8000c82:	9305      	str	r3, [sp, #20]
 8000c84:	4663      	mov	r3, ip
 8000c86:	46ac      	mov	ip, r5
 8000c88:	041f      	lsls	r7, r3, #16
 8000c8a:	0c3f      	lsrs	r7, r7, #16
 8000c8c:	0436      	lsls	r6, r6, #16
 8000c8e:	19f6      	adds	r6, r6, r7
 8000c90:	44b4      	add	ip, r6
 8000c92:	4663      	mov	r3, ip
 8000c94:	9304      	str	r3, [sp, #16]
 8000c96:	465b      	mov	r3, fp
 8000c98:	0c1b      	lsrs	r3, r3, #16
 8000c9a:	469c      	mov	ip, r3
 8000c9c:	465b      	mov	r3, fp
 8000c9e:	041f      	lsls	r7, r3, #16
 8000ca0:	0c3f      	lsrs	r7, r7, #16
 8000ca2:	003b      	movs	r3, r7
 8000ca4:	4343      	muls	r3, r0
 8000ca6:	4699      	mov	r9, r3
 8000ca8:	4663      	mov	r3, ip
 8000caa:	4343      	muls	r3, r0
 8000cac:	469a      	mov	sl, r3
 8000cae:	464b      	mov	r3, r9
 8000cb0:	4660      	mov	r0, ip
 8000cb2:	0c1b      	lsrs	r3, r3, #16
 8000cb4:	469b      	mov	fp, r3
 8000cb6:	4348      	muls	r0, r1
 8000cb8:	4379      	muls	r1, r7
 8000cba:	4451      	add	r1, sl
 8000cbc:	4459      	add	r1, fp
 8000cbe:	458a      	cmp	sl, r1
 8000cc0:	d903      	bls.n	8000cca <__aeabi_dmul+0x252>
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	025b      	lsls	r3, r3, #9
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	4450      	add	r0, sl
 8000cca:	0c0b      	lsrs	r3, r1, #16
 8000ccc:	469a      	mov	sl, r3
 8000cce:	464b      	mov	r3, r9
 8000cd0:	041b      	lsls	r3, r3, #16
 8000cd2:	0c1b      	lsrs	r3, r3, #16
 8000cd4:	4699      	mov	r9, r3
 8000cd6:	003b      	movs	r3, r7
 8000cd8:	4363      	muls	r3, r4
 8000cda:	0409      	lsls	r1, r1, #16
 8000cdc:	4645      	mov	r5, r8
 8000cde:	4449      	add	r1, r9
 8000ce0:	4699      	mov	r9, r3
 8000ce2:	4663      	mov	r3, ip
 8000ce4:	435c      	muls	r4, r3
 8000ce6:	436b      	muls	r3, r5
 8000ce8:	469c      	mov	ip, r3
 8000cea:	464b      	mov	r3, r9
 8000cec:	0c1b      	lsrs	r3, r3, #16
 8000cee:	4698      	mov	r8, r3
 8000cf0:	436f      	muls	r7, r5
 8000cf2:	193f      	adds	r7, r7, r4
 8000cf4:	4447      	add	r7, r8
 8000cf6:	4450      	add	r0, sl
 8000cf8:	42bc      	cmp	r4, r7
 8000cfa:	d903      	bls.n	8000d04 <__aeabi_dmul+0x28c>
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	025b      	lsls	r3, r3, #9
 8000d00:	4698      	mov	r8, r3
 8000d02:	44c4      	add	ip, r8
 8000d04:	9b04      	ldr	r3, [sp, #16]
 8000d06:	9d00      	ldr	r5, [sp, #0]
 8000d08:	4698      	mov	r8, r3
 8000d0a:	4445      	add	r5, r8
 8000d0c:	42b5      	cmp	r5, r6
 8000d0e:	41b6      	sbcs	r6, r6
 8000d10:	4273      	negs	r3, r6
 8000d12:	4698      	mov	r8, r3
 8000d14:	464b      	mov	r3, r9
 8000d16:	041e      	lsls	r6, r3, #16
 8000d18:	9b05      	ldr	r3, [sp, #20]
 8000d1a:	043c      	lsls	r4, r7, #16
 8000d1c:	4699      	mov	r9, r3
 8000d1e:	0c36      	lsrs	r6, r6, #16
 8000d20:	19a4      	adds	r4, r4, r6
 8000d22:	444c      	add	r4, r9
 8000d24:	46a1      	mov	r9, r4
 8000d26:	4683      	mov	fp, r0
 8000d28:	186e      	adds	r6, r5, r1
 8000d2a:	44c1      	add	r9, r8
 8000d2c:	428e      	cmp	r6, r1
 8000d2e:	4189      	sbcs	r1, r1
 8000d30:	44cb      	add	fp, r9
 8000d32:	465d      	mov	r5, fp
 8000d34:	4249      	negs	r1, r1
 8000d36:	186d      	adds	r5, r5, r1
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	41a4      	sbcs	r4, r4
 8000d3c:	45c1      	cmp	r9, r8
 8000d3e:	419b      	sbcs	r3, r3
 8000d40:	4583      	cmp	fp, r0
 8000d42:	4180      	sbcs	r0, r0
 8000d44:	428d      	cmp	r5, r1
 8000d46:	4189      	sbcs	r1, r1
 8000d48:	425b      	negs	r3, r3
 8000d4a:	4264      	negs	r4, r4
 8000d4c:	431c      	orrs	r4, r3
 8000d4e:	4240      	negs	r0, r0
 8000d50:	9b03      	ldr	r3, [sp, #12]
 8000d52:	4249      	negs	r1, r1
 8000d54:	4301      	orrs	r1, r0
 8000d56:	0270      	lsls	r0, r6, #9
 8000d58:	0c3f      	lsrs	r7, r7, #16
 8000d5a:	4318      	orrs	r0, r3
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	1e47      	subs	r7, r0, #1
 8000d60:	41b8      	sbcs	r0, r7
 8000d62:	1864      	adds	r4, r4, r1
 8000d64:	4464      	add	r4, ip
 8000d66:	0df6      	lsrs	r6, r6, #23
 8000d68:	0261      	lsls	r1, r4, #9
 8000d6a:	4330      	orrs	r0, r6
 8000d6c:	0dec      	lsrs	r4, r5, #23
 8000d6e:	026e      	lsls	r6, r5, #9
 8000d70:	430c      	orrs	r4, r1
 8000d72:	4330      	orrs	r0, r6
 8000d74:	01c9      	lsls	r1, r1, #7
 8000d76:	d400      	bmi.n	8000d7a <__aeabi_dmul+0x302>
 8000d78:	e0f1      	b.n	8000f5e <__aeabi_dmul+0x4e6>
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	0843      	lsrs	r3, r0, #1
 8000d7e:	4001      	ands	r1, r0
 8000d80:	430b      	orrs	r3, r1
 8000d82:	07e0      	lsls	r0, r4, #31
 8000d84:	4318      	orrs	r0, r3
 8000d86:	0864      	lsrs	r4, r4, #1
 8000d88:	4915      	ldr	r1, [pc, #84]	; (8000de0 <__aeabi_dmul+0x368>)
 8000d8a:	9b02      	ldr	r3, [sp, #8]
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	4463      	add	r3, ip
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	dc00      	bgt.n	8000d96 <__aeabi_dmul+0x31e>
 8000d94:	e097      	b.n	8000ec6 <__aeabi_dmul+0x44e>
 8000d96:	0741      	lsls	r1, r0, #29
 8000d98:	d009      	beq.n	8000dae <__aeabi_dmul+0x336>
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	4001      	ands	r1, r0
 8000d9e:	2904      	cmp	r1, #4
 8000da0:	d005      	beq.n	8000dae <__aeabi_dmul+0x336>
 8000da2:	1d01      	adds	r1, r0, #4
 8000da4:	4281      	cmp	r1, r0
 8000da6:	4180      	sbcs	r0, r0
 8000da8:	4240      	negs	r0, r0
 8000daa:	1824      	adds	r4, r4, r0
 8000dac:	0008      	movs	r0, r1
 8000dae:	01e1      	lsls	r1, r4, #7
 8000db0:	d506      	bpl.n	8000dc0 <__aeabi_dmul+0x348>
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	00c9      	lsls	r1, r1, #3
 8000db6:	468c      	mov	ip, r1
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <__aeabi_dmul+0x36c>)
 8000dba:	401c      	ands	r4, r3
 8000dbc:	9b02      	ldr	r3, [sp, #8]
 8000dbe:	4463      	add	r3, ip
 8000dc0:	4909      	ldr	r1, [pc, #36]	; (8000de8 <__aeabi_dmul+0x370>)
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	dd00      	ble.n	8000dc8 <__aeabi_dmul+0x350>
 8000dc6:	e710      	b.n	8000bea <__aeabi_dmul+0x172>
 8000dc8:	0761      	lsls	r1, r4, #29
 8000dca:	08c5      	lsrs	r5, r0, #3
 8000dcc:	0264      	lsls	r4, r4, #9
 8000dce:	055b      	lsls	r3, r3, #21
 8000dd0:	430d      	orrs	r5, r1
 8000dd2:	0b24      	lsrs	r4, r4, #12
 8000dd4:	0d5b      	lsrs	r3, r3, #21
 8000dd6:	e6c1      	b.n	8000b5c <__aeabi_dmul+0xe4>
 8000dd8:	000007ff 	.word	0x000007ff
 8000ddc:	fffffc01 	.word	0xfffffc01
 8000de0:	000003ff 	.word	0x000003ff
 8000de4:	feffffff 	.word	0xfeffffff
 8000de8:	000007fe 	.word	0x000007fe
 8000dec:	464b      	mov	r3, r9
 8000dee:	4323      	orrs	r3, r4
 8000df0:	d059      	beq.n	8000ea6 <__aeabi_dmul+0x42e>
 8000df2:	2c00      	cmp	r4, #0
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dmul+0x380>
 8000df6:	e0a3      	b.n	8000f40 <__aeabi_dmul+0x4c8>
 8000df8:	0020      	movs	r0, r4
 8000dfa:	f000 f9b5 	bl	8001168 <__clzsi2>
 8000dfe:	0001      	movs	r1, r0
 8000e00:	0003      	movs	r3, r0
 8000e02:	390b      	subs	r1, #11
 8000e04:	221d      	movs	r2, #29
 8000e06:	1a52      	subs	r2, r2, r1
 8000e08:	4649      	mov	r1, r9
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	40d1      	lsrs	r1, r2
 8000e0e:	464a      	mov	r2, r9
 8000e10:	3808      	subs	r0, #8
 8000e12:	4082      	lsls	r2, r0
 8000e14:	4084      	lsls	r4, r0
 8000e16:	0010      	movs	r0, r2
 8000e18:	430c      	orrs	r4, r1
 8000e1a:	4a74      	ldr	r2, [pc, #464]	; (8000fec <__aeabi_dmul+0x574>)
 8000e1c:	1aeb      	subs	r3, r5, r3
 8000e1e:	4694      	mov	ip, r2
 8000e20:	4642      	mov	r2, r8
 8000e22:	4463      	add	r3, ip
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	9b01      	ldr	r3, [sp, #4]
 8000e28:	407a      	eors	r2, r7
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	9302      	str	r3, [sp, #8]
 8000e32:	2e0a      	cmp	r6, #10
 8000e34:	dd00      	ble.n	8000e38 <__aeabi_dmul+0x3c0>
 8000e36:	e667      	b.n	8000b08 <__aeabi_dmul+0x90>
 8000e38:	e683      	b.n	8000b42 <__aeabi_dmul+0xca>
 8000e3a:	465b      	mov	r3, fp
 8000e3c:	4303      	orrs	r3, r0
 8000e3e:	469a      	mov	sl, r3
 8000e40:	d02a      	beq.n	8000e98 <__aeabi_dmul+0x420>
 8000e42:	465b      	mov	r3, fp
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d06d      	beq.n	8000f24 <__aeabi_dmul+0x4ac>
 8000e48:	4658      	mov	r0, fp
 8000e4a:	f000 f98d 	bl	8001168 <__clzsi2>
 8000e4e:	0001      	movs	r1, r0
 8000e50:	0003      	movs	r3, r0
 8000e52:	390b      	subs	r1, #11
 8000e54:	221d      	movs	r2, #29
 8000e56:	1a52      	subs	r2, r2, r1
 8000e58:	0021      	movs	r1, r4
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	465d      	mov	r5, fp
 8000e5e:	40d1      	lsrs	r1, r2
 8000e60:	3808      	subs	r0, #8
 8000e62:	4085      	lsls	r5, r0
 8000e64:	000a      	movs	r2, r1
 8000e66:	4084      	lsls	r4, r0
 8000e68:	432a      	orrs	r2, r5
 8000e6a:	4693      	mov	fp, r2
 8000e6c:	46a2      	mov	sl, r4
 8000e6e:	4d5f      	ldr	r5, [pc, #380]	; (8000fec <__aeabi_dmul+0x574>)
 8000e70:	2600      	movs	r6, #0
 8000e72:	1aed      	subs	r5, r5, r3
 8000e74:	2300      	movs	r3, #0
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	e625      	b.n	8000ac6 <__aeabi_dmul+0x4e>
 8000e7a:	465b      	mov	r3, fp
 8000e7c:	4303      	orrs	r3, r0
 8000e7e:	469a      	mov	sl, r3
 8000e80:	d105      	bne.n	8000e8e <__aeabi_dmul+0x416>
 8000e82:	2300      	movs	r3, #0
 8000e84:	469b      	mov	fp, r3
 8000e86:	3302      	adds	r3, #2
 8000e88:	2608      	movs	r6, #8
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	e61b      	b.n	8000ac6 <__aeabi_dmul+0x4e>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	4682      	mov	sl, r0
 8000e92:	260c      	movs	r6, #12
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	e616      	b.n	8000ac6 <__aeabi_dmul+0x4e>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	469b      	mov	fp, r3
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	2604      	movs	r6, #4
 8000ea0:	2500      	movs	r5, #0
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	e60f      	b.n	8000ac6 <__aeabi_dmul+0x4e>
 8000ea6:	4642      	mov	r2, r8
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	9501      	str	r5, [sp, #4]
 8000eac:	431e      	orrs	r6, r3
 8000eae:	9b01      	ldr	r3, [sp, #4]
 8000eb0:	407a      	eors	r2, r7
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	2400      	movs	r4, #0
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	2101      	movs	r1, #1
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	2e0a      	cmp	r6, #10
 8000ec0:	dd00      	ble.n	8000ec4 <__aeabi_dmul+0x44c>
 8000ec2:	e621      	b.n	8000b08 <__aeabi_dmul+0x90>
 8000ec4:	e63d      	b.n	8000b42 <__aeabi_dmul+0xca>
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	2938      	cmp	r1, #56	; 0x38
 8000ecc:	dd00      	ble.n	8000ed0 <__aeabi_dmul+0x458>
 8000ece:	e642      	b.n	8000b56 <__aeabi_dmul+0xde>
 8000ed0:	291f      	cmp	r1, #31
 8000ed2:	dd47      	ble.n	8000f64 <__aeabi_dmul+0x4ec>
 8000ed4:	261f      	movs	r6, #31
 8000ed6:	0025      	movs	r5, r4
 8000ed8:	4276      	negs	r6, r6
 8000eda:	1af3      	subs	r3, r6, r3
 8000edc:	40dd      	lsrs	r5, r3
 8000ede:	002b      	movs	r3, r5
 8000ee0:	2920      	cmp	r1, #32
 8000ee2:	d005      	beq.n	8000ef0 <__aeabi_dmul+0x478>
 8000ee4:	4942      	ldr	r1, [pc, #264]	; (8000ff0 <__aeabi_dmul+0x578>)
 8000ee6:	9d02      	ldr	r5, [sp, #8]
 8000ee8:	468c      	mov	ip, r1
 8000eea:	4465      	add	r5, ip
 8000eec:	40ac      	lsls	r4, r5
 8000eee:	4320      	orrs	r0, r4
 8000ef0:	1e41      	subs	r1, r0, #1
 8000ef2:	4188      	sbcs	r0, r1
 8000ef4:	4318      	orrs	r0, r3
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	001d      	movs	r5, r3
 8000efa:	2400      	movs	r4, #0
 8000efc:	4005      	ands	r5, r0
 8000efe:	4203      	tst	r3, r0
 8000f00:	d04a      	beq.n	8000f98 <__aeabi_dmul+0x520>
 8000f02:	230f      	movs	r3, #15
 8000f04:	2400      	movs	r4, #0
 8000f06:	4003      	ands	r3, r0
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d042      	beq.n	8000f92 <__aeabi_dmul+0x51a>
 8000f0c:	1d03      	adds	r3, r0, #4
 8000f0e:	4283      	cmp	r3, r0
 8000f10:	4180      	sbcs	r0, r0
 8000f12:	4240      	negs	r0, r0
 8000f14:	1824      	adds	r4, r4, r0
 8000f16:	0018      	movs	r0, r3
 8000f18:	0223      	lsls	r3, r4, #8
 8000f1a:	d53a      	bpl.n	8000f92 <__aeabi_dmul+0x51a>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	2400      	movs	r4, #0
 8000f20:	2500      	movs	r5, #0
 8000f22:	e61b      	b.n	8000b5c <__aeabi_dmul+0xe4>
 8000f24:	f000 f920 	bl	8001168 <__clzsi2>
 8000f28:	0001      	movs	r1, r0
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	3115      	adds	r1, #21
 8000f2e:	3320      	adds	r3, #32
 8000f30:	291c      	cmp	r1, #28
 8000f32:	dd8f      	ble.n	8000e54 <__aeabi_dmul+0x3dc>
 8000f34:	3808      	subs	r0, #8
 8000f36:	2200      	movs	r2, #0
 8000f38:	4084      	lsls	r4, r0
 8000f3a:	4692      	mov	sl, r2
 8000f3c:	46a3      	mov	fp, r4
 8000f3e:	e796      	b.n	8000e6e <__aeabi_dmul+0x3f6>
 8000f40:	f000 f912 	bl	8001168 <__clzsi2>
 8000f44:	0001      	movs	r1, r0
 8000f46:	0003      	movs	r3, r0
 8000f48:	3115      	adds	r1, #21
 8000f4a:	3320      	adds	r3, #32
 8000f4c:	291c      	cmp	r1, #28
 8000f4e:	dc00      	bgt.n	8000f52 <__aeabi_dmul+0x4da>
 8000f50:	e758      	b.n	8000e04 <__aeabi_dmul+0x38c>
 8000f52:	0002      	movs	r2, r0
 8000f54:	464c      	mov	r4, r9
 8000f56:	3a08      	subs	r2, #8
 8000f58:	2000      	movs	r0, #0
 8000f5a:	4094      	lsls	r4, r2
 8000f5c:	e75d      	b.n	8000e1a <__aeabi_dmul+0x3a2>
 8000f5e:	9b01      	ldr	r3, [sp, #4]
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	e711      	b.n	8000d88 <__aeabi_dmul+0x310>
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <__aeabi_dmul+0x57c>)
 8000f66:	0026      	movs	r6, r4
 8000f68:	469c      	mov	ip, r3
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	9d02      	ldr	r5, [sp, #8]
 8000f6e:	40cb      	lsrs	r3, r1
 8000f70:	4465      	add	r5, ip
 8000f72:	40ae      	lsls	r6, r5
 8000f74:	431e      	orrs	r6, r3
 8000f76:	0003      	movs	r3, r0
 8000f78:	40ab      	lsls	r3, r5
 8000f7a:	1e58      	subs	r0, r3, #1
 8000f7c:	4183      	sbcs	r3, r0
 8000f7e:	0030      	movs	r0, r6
 8000f80:	4318      	orrs	r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	0743      	lsls	r3, r0, #29
 8000f86:	d0c7      	beq.n	8000f18 <__aeabi_dmul+0x4a0>
 8000f88:	230f      	movs	r3, #15
 8000f8a:	4003      	ands	r3, r0
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d1bd      	bne.n	8000f0c <__aeabi_dmul+0x494>
 8000f90:	e7c2      	b.n	8000f18 <__aeabi_dmul+0x4a0>
 8000f92:	0765      	lsls	r5, r4, #29
 8000f94:	0264      	lsls	r4, r4, #9
 8000f96:	0b24      	lsrs	r4, r4, #12
 8000f98:	08c0      	lsrs	r0, r0, #3
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	4305      	orrs	r5, r0
 8000f9e:	e5dd      	b.n	8000b5c <__aeabi_dmul+0xe4>
 8000fa0:	2500      	movs	r5, #0
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	2e0f      	cmp	r6, #15
 8000fa6:	d10c      	bne.n	8000fc2 <__aeabi_dmul+0x54a>
 8000fa8:	2480      	movs	r4, #128	; 0x80
 8000faa:	465b      	mov	r3, fp
 8000fac:	0324      	lsls	r4, r4, #12
 8000fae:	4223      	tst	r3, r4
 8000fb0:	d00e      	beq.n	8000fd0 <__aeabi_dmul+0x558>
 8000fb2:	4221      	tst	r1, r4
 8000fb4:	d10c      	bne.n	8000fd0 <__aeabi_dmul+0x558>
 8000fb6:	430c      	orrs	r4, r1
 8000fb8:	0324      	lsls	r4, r4, #12
 8000fba:	003a      	movs	r2, r7
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <__aeabi_dmul+0x580>)
 8000fbe:	0b24      	lsrs	r4, r4, #12
 8000fc0:	e5cc      	b.n	8000b5c <__aeabi_dmul+0xe4>
 8000fc2:	2e0b      	cmp	r6, #11
 8000fc4:	d000      	beq.n	8000fc8 <__aeabi_dmul+0x550>
 8000fc6:	e5a2      	b.n	8000b0e <__aeabi_dmul+0x96>
 8000fc8:	468b      	mov	fp, r1
 8000fca:	46aa      	mov	sl, r5
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	e5f7      	b.n	8000bc0 <__aeabi_dmul+0x148>
 8000fd0:	2480      	movs	r4, #128	; 0x80
 8000fd2:	465b      	mov	r3, fp
 8000fd4:	0324      	lsls	r4, r4, #12
 8000fd6:	431c      	orrs	r4, r3
 8000fd8:	0324      	lsls	r4, r4, #12
 8000fda:	4642      	mov	r2, r8
 8000fdc:	4655      	mov	r5, sl
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <__aeabi_dmul+0x580>)
 8000fe0:	0b24      	lsrs	r4, r4, #12
 8000fe2:	e5bb      	b.n	8000b5c <__aeabi_dmul+0xe4>
 8000fe4:	464d      	mov	r5, r9
 8000fe6:	0021      	movs	r1, r4
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e7db      	b.n	8000fa4 <__aeabi_dmul+0x52c>
 8000fec:	fffffc0d 	.word	0xfffffc0d
 8000ff0:	0000043e 	.word	0x0000043e
 8000ff4:	0000041e 	.word	0x0000041e
 8000ff8:	000007ff 	.word	0x000007ff

08000ffc <__aeabi_i2d>:
 8000ffc:	b570      	push	{r4, r5, r6, lr}
 8000ffe:	2800      	cmp	r0, #0
 8001000:	d016      	beq.n	8001030 <__aeabi_i2d+0x34>
 8001002:	17c3      	asrs	r3, r0, #31
 8001004:	18c5      	adds	r5, r0, r3
 8001006:	405d      	eors	r5, r3
 8001008:	0fc4      	lsrs	r4, r0, #31
 800100a:	0028      	movs	r0, r5
 800100c:	f000 f8ac 	bl	8001168 <__clzsi2>
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <__aeabi_i2d+0x5c>)
 8001012:	1a1b      	subs	r3, r3, r0
 8001014:	280a      	cmp	r0, #10
 8001016:	dc16      	bgt.n	8001046 <__aeabi_i2d+0x4a>
 8001018:	0002      	movs	r2, r0
 800101a:	002e      	movs	r6, r5
 800101c:	3215      	adds	r2, #21
 800101e:	4096      	lsls	r6, r2
 8001020:	220b      	movs	r2, #11
 8001022:	1a12      	subs	r2, r2, r0
 8001024:	40d5      	lsrs	r5, r2
 8001026:	055b      	lsls	r3, r3, #21
 8001028:	032d      	lsls	r5, r5, #12
 800102a:	0b2d      	lsrs	r5, r5, #12
 800102c:	0d5b      	lsrs	r3, r3, #21
 800102e:	e003      	b.n	8001038 <__aeabi_i2d+0x3c>
 8001030:	2400      	movs	r4, #0
 8001032:	2300      	movs	r3, #0
 8001034:	2500      	movs	r5, #0
 8001036:	2600      	movs	r6, #0
 8001038:	051b      	lsls	r3, r3, #20
 800103a:	432b      	orrs	r3, r5
 800103c:	07e4      	lsls	r4, r4, #31
 800103e:	4323      	orrs	r3, r4
 8001040:	0030      	movs	r0, r6
 8001042:	0019      	movs	r1, r3
 8001044:	bd70      	pop	{r4, r5, r6, pc}
 8001046:	380b      	subs	r0, #11
 8001048:	4085      	lsls	r5, r0
 800104a:	055b      	lsls	r3, r3, #21
 800104c:	032d      	lsls	r5, r5, #12
 800104e:	2600      	movs	r6, #0
 8001050:	0b2d      	lsrs	r5, r5, #12
 8001052:	0d5b      	lsrs	r3, r3, #21
 8001054:	e7f0      	b.n	8001038 <__aeabi_i2d+0x3c>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	0000041e 	.word	0x0000041e

0800105c <__aeabi_d2f>:
 800105c:	0002      	movs	r2, r0
 800105e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001060:	004b      	lsls	r3, r1, #1
 8001062:	030d      	lsls	r5, r1, #12
 8001064:	0f40      	lsrs	r0, r0, #29
 8001066:	0d5b      	lsrs	r3, r3, #21
 8001068:	0fcc      	lsrs	r4, r1, #31
 800106a:	0a6d      	lsrs	r5, r5, #9
 800106c:	493a      	ldr	r1, [pc, #232]	; (8001158 <__aeabi_d2f+0xfc>)
 800106e:	4305      	orrs	r5, r0
 8001070:	1c58      	adds	r0, r3, #1
 8001072:	00d7      	lsls	r7, r2, #3
 8001074:	4208      	tst	r0, r1
 8001076:	d00a      	beq.n	800108e <__aeabi_d2f+0x32>
 8001078:	4938      	ldr	r1, [pc, #224]	; (800115c <__aeabi_d2f+0x100>)
 800107a:	1859      	adds	r1, r3, r1
 800107c:	29fe      	cmp	r1, #254	; 0xfe
 800107e:	dd16      	ble.n	80010ae <__aeabi_d2f+0x52>
 8001080:	20ff      	movs	r0, #255	; 0xff
 8001082:	2200      	movs	r2, #0
 8001084:	05c0      	lsls	r0, r0, #23
 8001086:	4310      	orrs	r0, r2
 8001088:	07e4      	lsls	r4, r4, #31
 800108a:	4320      	orrs	r0, r4
 800108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800108e:	2b00      	cmp	r3, #0
 8001090:	d106      	bne.n	80010a0 <__aeabi_d2f+0x44>
 8001092:	433d      	orrs	r5, r7
 8001094:	d026      	beq.n	80010e4 <__aeabi_d2f+0x88>
 8001096:	2205      	movs	r2, #5
 8001098:	0192      	lsls	r2, r2, #6
 800109a:	0a52      	lsrs	r2, r2, #9
 800109c:	b2d8      	uxtb	r0, r3
 800109e:	e7f1      	b.n	8001084 <__aeabi_d2f+0x28>
 80010a0:	432f      	orrs	r7, r5
 80010a2:	d0ed      	beq.n	8001080 <__aeabi_d2f+0x24>
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	03d2      	lsls	r2, r2, #15
 80010a8:	20ff      	movs	r0, #255	; 0xff
 80010aa:	432a      	orrs	r2, r5
 80010ac:	e7ea      	b.n	8001084 <__aeabi_d2f+0x28>
 80010ae:	2900      	cmp	r1, #0
 80010b0:	dd1b      	ble.n	80010ea <__aeabi_d2f+0x8e>
 80010b2:	0192      	lsls	r2, r2, #6
 80010b4:	1e50      	subs	r0, r2, #1
 80010b6:	4182      	sbcs	r2, r0
 80010b8:	00ed      	lsls	r5, r5, #3
 80010ba:	0f7f      	lsrs	r7, r7, #29
 80010bc:	432a      	orrs	r2, r5
 80010be:	433a      	orrs	r2, r7
 80010c0:	0753      	lsls	r3, r2, #29
 80010c2:	d047      	beq.n	8001154 <__aeabi_d2f+0xf8>
 80010c4:	230f      	movs	r3, #15
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d000      	beq.n	80010ce <__aeabi_d2f+0x72>
 80010cc:	3204      	adds	r2, #4
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	04db      	lsls	r3, r3, #19
 80010d2:	4013      	ands	r3, r2
 80010d4:	d03e      	beq.n	8001154 <__aeabi_d2f+0xf8>
 80010d6:	1c48      	adds	r0, r1, #1
 80010d8:	29fe      	cmp	r1, #254	; 0xfe
 80010da:	d0d1      	beq.n	8001080 <__aeabi_d2f+0x24>
 80010dc:	0192      	lsls	r2, r2, #6
 80010de:	0a52      	lsrs	r2, r2, #9
 80010e0:	b2c0      	uxtb	r0, r0
 80010e2:	e7cf      	b.n	8001084 <__aeabi_d2f+0x28>
 80010e4:	2000      	movs	r0, #0
 80010e6:	2200      	movs	r2, #0
 80010e8:	e7cc      	b.n	8001084 <__aeabi_d2f+0x28>
 80010ea:	000a      	movs	r2, r1
 80010ec:	3217      	adds	r2, #23
 80010ee:	db2f      	blt.n	8001150 <__aeabi_d2f+0xf4>
 80010f0:	2680      	movs	r6, #128	; 0x80
 80010f2:	0436      	lsls	r6, r6, #16
 80010f4:	432e      	orrs	r6, r5
 80010f6:	251e      	movs	r5, #30
 80010f8:	1a6d      	subs	r5, r5, r1
 80010fa:	2d1f      	cmp	r5, #31
 80010fc:	dd11      	ble.n	8001122 <__aeabi_d2f+0xc6>
 80010fe:	2202      	movs	r2, #2
 8001100:	4252      	negs	r2, r2
 8001102:	1a52      	subs	r2, r2, r1
 8001104:	0031      	movs	r1, r6
 8001106:	40d1      	lsrs	r1, r2
 8001108:	2d20      	cmp	r5, #32
 800110a:	d004      	beq.n	8001116 <__aeabi_d2f+0xba>
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <__aeabi_d2f+0x104>)
 800110e:	4694      	mov	ip, r2
 8001110:	4463      	add	r3, ip
 8001112:	409e      	lsls	r6, r3
 8001114:	4337      	orrs	r7, r6
 8001116:	003a      	movs	r2, r7
 8001118:	1e53      	subs	r3, r2, #1
 800111a:	419a      	sbcs	r2, r3
 800111c:	430a      	orrs	r2, r1
 800111e:	2100      	movs	r1, #0
 8001120:	e7ce      	b.n	80010c0 <__aeabi_d2f+0x64>
 8001122:	4a10      	ldr	r2, [pc, #64]	; (8001164 <__aeabi_d2f+0x108>)
 8001124:	0038      	movs	r0, r7
 8001126:	4694      	mov	ip, r2
 8001128:	4463      	add	r3, ip
 800112a:	4098      	lsls	r0, r3
 800112c:	003a      	movs	r2, r7
 800112e:	1e41      	subs	r1, r0, #1
 8001130:	4188      	sbcs	r0, r1
 8001132:	409e      	lsls	r6, r3
 8001134:	40ea      	lsrs	r2, r5
 8001136:	4330      	orrs	r0, r6
 8001138:	4302      	orrs	r2, r0
 800113a:	2100      	movs	r1, #0
 800113c:	0753      	lsls	r3, r2, #29
 800113e:	d1c1      	bne.n	80010c4 <__aeabi_d2f+0x68>
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	0013      	movs	r3, r2
 8001144:	04c9      	lsls	r1, r1, #19
 8001146:	2001      	movs	r0, #1
 8001148:	400b      	ands	r3, r1
 800114a:	420a      	tst	r2, r1
 800114c:	d1c6      	bne.n	80010dc <__aeabi_d2f+0x80>
 800114e:	e7a3      	b.n	8001098 <__aeabi_d2f+0x3c>
 8001150:	2300      	movs	r3, #0
 8001152:	e7a0      	b.n	8001096 <__aeabi_d2f+0x3a>
 8001154:	000b      	movs	r3, r1
 8001156:	e79f      	b.n	8001098 <__aeabi_d2f+0x3c>
 8001158:	000007fe 	.word	0x000007fe
 800115c:	fffffc80 	.word	0xfffffc80
 8001160:	fffffca2 	.word	0xfffffca2
 8001164:	fffffc82 	.word	0xfffffc82

08001168 <__clzsi2>:
 8001168:	211c      	movs	r1, #28
 800116a:	2301      	movs	r3, #1
 800116c:	041b      	lsls	r3, r3, #16
 800116e:	4298      	cmp	r0, r3
 8001170:	d301      	bcc.n	8001176 <__clzsi2+0xe>
 8001172:	0c00      	lsrs	r0, r0, #16
 8001174:	3910      	subs	r1, #16
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	4298      	cmp	r0, r3
 800117a:	d301      	bcc.n	8001180 <__clzsi2+0x18>
 800117c:	0a00      	lsrs	r0, r0, #8
 800117e:	3908      	subs	r1, #8
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	4298      	cmp	r0, r3
 8001184:	d301      	bcc.n	800118a <__clzsi2+0x22>
 8001186:	0900      	lsrs	r0, r0, #4
 8001188:	3904      	subs	r1, #4
 800118a:	a202      	add	r2, pc, #8	; (adr r2, 8001194 <__clzsi2+0x2c>)
 800118c:	5c10      	ldrb	r0, [r2, r0]
 800118e:	1840      	adds	r0, r0, r1
 8001190:	4770      	bx	lr
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	02020304 	.word	0x02020304
 8001198:	01010101 	.word	0x01010101
	...

080011a4 <__clzdi2>:
 80011a4:	b510      	push	{r4, lr}
 80011a6:	2900      	cmp	r1, #0
 80011a8:	d103      	bne.n	80011b2 <__clzdi2+0xe>
 80011aa:	f7ff ffdd 	bl	8001168 <__clzsi2>
 80011ae:	3020      	adds	r0, #32
 80011b0:	e002      	b.n	80011b8 <__clzdi2+0x14>
 80011b2:	0008      	movs	r0, r1
 80011b4:	f7ff ffd8 	bl	8001168 <__clzsi2>
 80011b8:	bd10      	pop	{r4, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)

080011bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	240c      	movs	r4, #12
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	0018      	movs	r0, r3
 80011c8:	2314      	movs	r3, #20
 80011ca:	001a      	movs	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f004 fdec 	bl	8005daa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b44      	ldr	r3, [pc, #272]	; (80012e4 <MX_GPIO_Init+0x128>)
 80011d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d6:	4b43      	ldr	r3, [pc, #268]	; (80012e4 <MX_GPIO_Init+0x128>)
 80011d8:	2102      	movs	r1, #2
 80011da:	430a      	orrs	r2, r1
 80011dc:	635a      	str	r2, [r3, #52]	; 0x34
 80011de:	4b41      	ldr	r3, [pc, #260]	; (80012e4 <MX_GPIO_Init+0x128>)
 80011e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e2:	2202      	movs	r2, #2
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <MX_GPIO_Init+0x128>)
 80011ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ee:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <MX_GPIO_Init+0x128>)
 80011f0:	2104      	movs	r1, #4
 80011f2:	430a      	orrs	r2, r1
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <MX_GPIO_Init+0x128>)
 80011f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fa:	2204      	movs	r2, #4
 80011fc:	4013      	ands	r3, r2
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <MX_GPIO_Init+0x128>)
 8001204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001206:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <MX_GPIO_Init+0x128>)
 8001208:	2101      	movs	r1, #1
 800120a:	430a      	orrs	r2, r1
 800120c:	635a      	str	r2, [r3, #52]	; 0x34
 800120e:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <MX_GPIO_Init+0x128>)
 8001210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001212:	2201      	movs	r2, #1
 8001214:	4013      	ands	r3, r2
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4832      	ldr	r0, [pc, #200]	; (80012e8 <MX_GPIO_Init+0x12c>)
 8001220:	2200      	movs	r2, #0
 8001222:	0019      	movs	r1, r3
 8001224:	f000 ff60 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SK6812_OUT_GPIO_Port, SK6812_OUT_Pin, GPIO_PIN_RESET);
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	482f      	ldr	r0, [pc, #188]	; (80012ec <MX_GPIO_Init+0x130>)
 800122e:	2200      	movs	r2, #0
 8001230:	0019      	movs	r1, r3
 8001232:	f000 ff59 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GEN_OUT_Pin|NRF_CE_Pin|SPI1_CSN_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 8001236:	23a0      	movs	r3, #160	; 0xa0
 8001238:	05db      	lsls	r3, r3, #23
 800123a:	2200      	movs	r2, #0
 800123c:	2199      	movs	r1, #153	; 0x99
 800123e:	0018      	movs	r0, r3
 8001240:	f000 ff52 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WP_Pin;
 8001244:	193b      	adds	r3, r7, r4
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	0092      	lsls	r2, r2, #2
 800124a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	193b      	adds	r3, r7, r4
 800124e:	2201      	movs	r2, #1
 8001250:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	193b      	adds	r3, r7, r4
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	193b      	adds	r3, r7, r4
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 800125e:	193b      	adds	r3, r7, r4
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <MX_GPIO_Init+0x12c>)
 8001262:	0019      	movs	r1, r3
 8001264:	0010      	movs	r0, r2
 8001266:	f000 fddb 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SK6812_OUT_Pin;
 800126a:	0021      	movs	r1, r4
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	0212      	lsls	r2, r2, #8
 8001272:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	000c      	movs	r4, r1
 8001276:	193b      	adds	r3, r7, r4
 8001278:	2201      	movs	r2, #1
 800127a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	193b      	adds	r3, r7, r4
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	193b      	adds	r3, r7, r4
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SK6812_OUT_GPIO_Port, &GPIO_InitStruct);
 8001288:	193b      	adds	r3, r7, r4
 800128a:	4a18      	ldr	r2, [pc, #96]	; (80012ec <MX_GPIO_Init+0x130>)
 800128c:	0019      	movs	r1, r3
 800128e:	0010      	movs	r0, r2
 8001290:	f000 fdc6 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = GEN_OUT_Pin|NRF_CE_Pin|SPI1_CSN_Pin|STATUS_LED_Pin;
 8001294:	193b      	adds	r3, r7, r4
 8001296:	2299      	movs	r2, #153	; 0x99
 8001298:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	193b      	adds	r3, r7, r4
 800129c:	2201      	movs	r2, #1
 800129e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	193b      	adds	r3, r7, r4
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	193a      	adds	r2, r7, r4
 80012ae:	23a0      	movs	r3, #160	; 0xa0
 80012b0:	05db      	lsls	r3, r3, #23
 80012b2:	0011      	movs	r1, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	f000 fdb3 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 80012ba:	193b      	adds	r3, r7, r4
 80012bc:	2220      	movs	r2, #32
 80012be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	193b      	adds	r3, r7, r4
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 80012cc:	193a      	adds	r2, r7, r4
 80012ce:	23a0      	movs	r3, #160	; 0xa0
 80012d0:	05db      	lsls	r3, r3, #23
 80012d2:	0011      	movs	r1, r2
 80012d4:	0018      	movs	r0, r3
 80012d6:	f000 fda3 	bl	8001e20 <HAL_GPIO_Init>

}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	b009      	add	sp, #36	; 0x24
 80012e0:	bd90      	pop	{r4, r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	40021000 	.word	0x40021000
 80012e8:	50000400 	.word	0x50000400
 80012ec:	50000800 	.word	0x50000800

080012f0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <MX_I2C2_Init+0x74>)
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <MX_I2C2_Init+0x78>)
 80012f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_I2C2_Init+0x74>)
 80012fc:	4a1b      	ldr	r2, [pc, #108]	; (800136c <MX_I2C2_Init+0x7c>)
 80012fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_I2C2_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_I2C2_Init+0x74>)
 8001308:	2201      	movs	r2, #1
 800130a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_I2C2_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_I2C2_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_I2C2_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_I2C2_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_I2C2_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_I2C2_Init+0x74>)
 800132c:	0018      	movs	r0, r3
 800132e:	f000 ff13 	bl	8002158 <HAL_I2C_Init>
 8001332:	1e03      	subs	r3, r0, #0
 8001334:	d001      	beq.n	800133a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001336:	f000 f94d 	bl	80015d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <MX_I2C2_Init+0x74>)
 800133c:	2100      	movs	r1, #0
 800133e:	0018      	movs	r0, r3
 8001340:	f000 ffb0 	bl	80022a4 <HAL_I2CEx_ConfigAnalogFilter>
 8001344:	1e03      	subs	r3, r0, #0
 8001346:	d001      	beq.n	800134c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001348:	f000 f944 	bl	80015d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <MX_I2C2_Init+0x74>)
 800134e:	2100      	movs	r1, #0
 8001350:	0018      	movs	r0, r3
 8001352:	f000 fff3 	bl	800233c <HAL_I2CEx_ConfigDigitalFilter>
 8001356:	1e03      	subs	r3, r0, #0
 8001358:	d001      	beq.n	800135e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800135a:	f000 f93b 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000030 	.word	0x20000030
 8001368:	40005800 	.word	0x40005800
 800136c:	00303d5b 	.word	0x00303d5b

08001370 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b08b      	sub	sp, #44	; 0x2c
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	2414      	movs	r4, #20
 800137a:	193b      	adds	r3, r7, r4
 800137c:	0018      	movs	r0, r3
 800137e:	2314      	movs	r3, #20
 8001380:	001a      	movs	r2, r3
 8001382:	2100      	movs	r1, #0
 8001384:	f004 fd11 	bl	8005daa <memset>
  if(i2cHandle->Instance==I2C2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <HAL_I2C_MspInit+0x90>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d131      	bne.n	80013f6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <HAL_I2C_MspInit+0x94>)
 8001394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_I2C_MspInit+0x94>)
 8001398:	2101      	movs	r1, #1
 800139a:	430a      	orrs	r2, r1
 800139c:	635a      	str	r2, [r3, #52]	; 0x34
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_I2C_MspInit+0x94>)
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	2201      	movs	r2, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013aa:	193b      	adds	r3, r7, r4
 80013ac:	22c0      	movs	r2, #192	; 0xc0
 80013ae:	0152      	lsls	r2, r2, #5
 80013b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b2:	0021      	movs	r1, r4
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	2212      	movs	r2, #18
 80013b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ba:	187b      	adds	r3, r7, r1
 80013bc:	2201      	movs	r2, #1
 80013be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	2203      	movs	r2, #3
 80013c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	2206      	movs	r2, #6
 80013ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	187a      	adds	r2, r7, r1
 80013ce:	23a0      	movs	r3, #160	; 0xa0
 80013d0:	05db      	lsls	r3, r3, #23
 80013d2:	0011      	movs	r1, r2
 80013d4:	0018      	movs	r0, r3
 80013d6:	f000 fd23 	bl	8001e20 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_I2C_MspInit+0x94>)
 80013dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_I2C_MspInit+0x94>)
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	03c9      	lsls	r1, r1, #15
 80013e4:	430a      	orrs	r2, r1
 80013e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_I2C_MspInit+0x94>)
 80013ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	03db      	lsls	r3, r3, #15
 80013f0:	4013      	ands	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b00b      	add	sp, #44	; 0x2c
 80013fc:	bd90      	pop	{r4, r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	40005800 	.word	0x40005800
 8001404:	40021000 	.word	0x40021000

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140e:	f000 fba9 	bl	8001b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001412:	f000 f897 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001416:	f7ff fed1 	bl	80011bc <MX_GPIO_Init>
  MX_I2C2_Init();
 800141a:	f7ff ff69 	bl	80012f0 <MX_I2C2_Init>
  MX_SPI1_Init();
 800141e:	f000 f8df 	bl	80015e0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001422:	f000 f9a5 	bl	8001770 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001426:	f000 fac3 	bl	80019b0 <MX_USART1_UART_Init>
//	read_reg_multi(0x10, data, 5);
//	if(data[0] == 0xE7)
//	  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET);


  nrf_init();
 800142a:	f004 fa8b 	bl	8005944 <nrf_init>
  nrf_rx_mode(RX_addr, 10);
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <main+0x118>)
 8001430:	210a      	movs	r1, #10
 8001432:	0018      	movs	r0, r3
 8001434:	f004 fab5 	bl	80059a2 <nrf_rx_mode>
//  HAL_I2C_Master_Receive(&hi2c2, 0xA0, rx_buf, 2, HAL_MAX_DELAY);
//
//  tx_buf[2] = rx_buf[1];
//  tx_buf[1] = rx_buf[0];

  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8001438:	23a0      	movs	r3, #160	; 0xa0
 800143a:	05db      	lsls	r3, r3, #23
 800143c:	2200      	movs	r2, #0
 800143e:	2180      	movs	r1, #128	; 0x80
 8001440:	0018      	movs	r0, r3
 8001442:	f000 fe51 	bl	80020e8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001446:	23fa      	movs	r3, #250	; 0xfa
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	0018      	movs	r0, r3
 800144c:	f000 fc10 	bl	8001c70 <HAL_Delay>

  float vesc_current = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  uint16_t adc_read = 3300;
 8001454:	1cbb      	adds	r3, r7, #2
 8001456:	4a33      	ldr	r2, [pc, #204]	; (8001524 <main+0x11c>)
 8001458:	801a      	strh	r2, [r3, #0]

  while (1)
  {

	  if(is_data_availible(1) == 1){
 800145a:	2001      	movs	r0, #1
 800145c:	f004 faf2 	bl	8005a44 <is_data_availible>
 8001460:	0003      	movs	r3, r0
 8001462:	2b01      	cmp	r3, #1
 8001464:	d1f9      	bne.n	800145a <main+0x52>
		  nrf_receive(RX_data);
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <main+0x120>)
 8001468:	0018      	movs	r0, r3
 800146a:	f004 fb0d 	bl	8005a88 <nrf_receive>

		  HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 800146e:	23a0      	movs	r3, #160	; 0xa0
 8001470:	05db      	lsls	r3, r3, #23
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	0018      	movs	r0, r3
 8001476:	f000 fe54 	bl	8002122 <HAL_GPIO_TogglePin>

		  adc_read = (uint16_t)RX_data[1];
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <main+0x120>)
 800147c:	785a      	ldrb	r2, [r3, #1]
 800147e:	1cbb      	adds	r3, r7, #2
 8001480:	801a      	strh	r2, [r3, #0]
		  adc_read = adc_read << 8;
 8001482:	1cbb      	adds	r3, r7, #2
 8001484:	1cba      	adds	r2, r7, #2
 8001486:	8812      	ldrh	r2, [r2, #0]
 8001488:	0212      	lsls	r2, r2, #8
 800148a:	801a      	strh	r2, [r3, #0]
		  adc_read |= (uint16_t)(RX_data[2]) & 0x0F;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <main+0x120>)
 800148e:	789b      	ldrb	r3, [r3, #2]
 8001490:	b21b      	sxth	r3, r3
 8001492:	220f      	movs	r2, #15
 8001494:	4013      	ands	r3, r2
 8001496:	b21a      	sxth	r2, r3
 8001498:	1cbb      	adds	r3, r7, #2
 800149a:	2100      	movs	r1, #0
 800149c:	5e5b      	ldrsh	r3, [r3, r1]
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	1cbb      	adds	r3, r7, #2
 80014a4:	801a      	strh	r2, [r3, #0]

		  if(adc_read <= 2200){
 80014a6:	1cbb      	adds	r3, r7, #2
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	4a20      	ldr	r2, [pc, #128]	; (800152c <main+0x124>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d802      	bhi.n	80014b6 <main+0xae>
			  vesc_current = 0.0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	e020      	b.n	80014f8 <main+0xf0>
		  }
		  else if (adc_read > 2200){
 80014b6:	1cbb      	adds	r3, r7, #2
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <main+0x124>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d914      	bls.n	80014ea <main+0xe2>
			  vesc_current = (float)((adc_read - 2200) * 0.005263158);
 80014c0:	1cbb      	adds	r3, r7, #2
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	4a1a      	ldr	r2, [pc, #104]	; (8001530 <main+0x128>)
 80014c6:	4694      	mov	ip, r2
 80014c8:	4463      	add	r3, ip
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7ff fd96 	bl	8000ffc <__aeabi_i2d>
 80014d0:	4a18      	ldr	r2, [pc, #96]	; (8001534 <main+0x12c>)
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <main+0x130>)
 80014d4:	f7ff fad0 	bl	8000a78 <__aeabi_dmul>
 80014d8:	0002      	movs	r2, r0
 80014da:	000b      	movs	r3, r1
 80014dc:	0010      	movs	r0, r2
 80014de:	0019      	movs	r1, r3
 80014e0:	f7ff fdbc 	bl	800105c <__aeabi_d2f>
 80014e4:	1c03      	adds	r3, r0, #0
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	e006      	b.n	80014f8 <main+0xf0>
		  }
		  else if (adc_read > 3400){
 80014ea:	1cbb      	adds	r3, r7, #2
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	4a13      	ldr	r2, [pc, #76]	; (800153c <main+0x134>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d901      	bls.n	80014f8 <main+0xf0>
			  vesc_current = 0.0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
		  }

		  if(vesc_current > 10){
 80014f8:	4911      	ldr	r1, [pc, #68]	; (8001540 <main+0x138>)
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7fe ff9e 	bl	800043c <__aeabi_fcmpgt>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d001      	beq.n	8001508 <main+0x100>
			  vesc_current = 10;
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <main+0x138>)
 8001506:	607b      	str	r3, [r7, #4]
		  }
		  VESCSetCurrent(vesc_current, 0);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2100      	movs	r1, #0
 800150c:	1c18      	adds	r0, r3, #0
 800150e:	f004 fbd1 	bl	8005cb4 <VESCSetCurrent>
		  VESCSetCurrent(vesc_current, 89);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2159      	movs	r1, #89	; 0x59
 8001516:	1c18      	adds	r0, r3, #0
 8001518:	f004 fbcc 	bl	8005cb4 <VESCSetCurrent>
	  if(is_data_availible(1) == 1){
 800151c:	e79d      	b.n	800145a <main+0x52>
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	20000000 	.word	0x20000000
 8001524:	00000ce4 	.word	0x00000ce4
 8001528:	20000084 	.word	0x20000084
 800152c:	00000898 	.word	0x00000898
 8001530:	fffff768 	.word	0xfffff768
 8001534:	37bd280c 	.word	0x37bd280c
 8001538:	3f758ed2 	.word	0x3f758ed2
 800153c:	00000d48 	.word	0x00000d48
 8001540:	41200000 	.word	0x41200000

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b093      	sub	sp, #76	; 0x4c
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	2410      	movs	r4, #16
 800154c:	193b      	adds	r3, r7, r4
 800154e:	0018      	movs	r0, r3
 8001550:	2338      	movs	r3, #56	; 0x38
 8001552:	001a      	movs	r2, r3
 8001554:	2100      	movs	r1, #0
 8001556:	f004 fc28 	bl	8005daa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155a:	003b      	movs	r3, r7
 800155c:	0018      	movs	r0, r3
 800155e:	2310      	movs	r3, #16
 8001560:	001a      	movs	r2, r3
 8001562:	2100      	movs	r1, #0
 8001564:	f004 fc21 	bl	8005daa <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	0018      	movs	r0, r3
 800156e:	f000 ff31 	bl	80023d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001572:	193b      	adds	r3, r7, r4
 8001574:	2202      	movs	r2, #2
 8001576:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001578:	193b      	adds	r3, r7, r4
 800157a:	2280      	movs	r2, #128	; 0x80
 800157c:	0052      	lsls	r2, r2, #1
 800157e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001580:	193b      	adds	r3, r7, r4
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001586:	193b      	adds	r3, r7, r4
 8001588:	2240      	movs	r2, #64	; 0x40
 800158a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800158c:	193b      	adds	r3, r7, r4
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001592:	193b      	adds	r3, r7, r4
 8001594:	0018      	movs	r0, r3
 8001596:	f000 ff69 	bl	800246c <HAL_RCC_OscConfig>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800159e:	f000 f819 	bl	80015d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a2:	003b      	movs	r3, r7
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015a8:	003b      	movs	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ae:	003b      	movs	r3, r7
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b4:	003b      	movs	r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ba:	003b      	movs	r3, r7
 80015bc:	2100      	movs	r1, #0
 80015be:	0018      	movs	r0, r3
 80015c0:	f001 fa6e 	bl	8002aa0 <HAL_RCC_ClockConfig>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80015c8:	f000 f804 	bl	80015d4 <Error_Handler>
  }
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b013      	add	sp, #76	; 0x4c
 80015d2:	bd90      	pop	{r4, r7, pc}

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	e7fe      	b.n	80015dc <Error_Handler+0x8>
	...

080015e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_SPI1_Init+0x74>)
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <MX_SPI1_Init+0x78>)
 80015e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_SPI1_Init+0x74>)
 80015ec:	2282      	movs	r2, #130	; 0x82
 80015ee:	0052      	lsls	r2, r2, #1
 80015f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_SPI1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_SPI1_Init+0x74>)
 80015fa:	22e0      	movs	r2, #224	; 0xe0
 80015fc:	00d2      	lsls	r2, r2, #3
 80015fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_SPI1_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <MX_SPI1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_SPI1_Init+0x74>)
 800160e:	2280      	movs	r2, #128	; 0x80
 8001610:	0092      	lsls	r2, r2, #2
 8001612:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_SPI1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_SPI1_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_SPI1_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_SPI1_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_SPI1_Init+0x74>)
 800162e:	2207      	movs	r2, #7
 8001630:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_SPI1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_SPI1_Init+0x74>)
 800163a:	2208      	movs	r2, #8
 800163c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <MX_SPI1_Init+0x74>)
 8001640:	0018      	movs	r0, r3
 8001642:	f001 fd51 	bl	80030e8 <HAL_SPI_Init>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d001      	beq.n	800164e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800164a:	f7ff ffc3 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200000a4 	.word	0x200000a4
 8001658:	40013000 	.word	0x40013000

0800165c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b08b      	sub	sp, #44	; 0x2c
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	2414      	movs	r4, #20
 8001666:	193b      	adds	r3, r7, r4
 8001668:	0018      	movs	r0, r3
 800166a:	2314      	movs	r3, #20
 800166c:	001a      	movs	r2, r3
 800166e:	2100      	movs	r1, #0
 8001670:	f004 fb9b 	bl	8005daa <memset>
  if(spiHandle->Instance==SPI1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_SPI_MspInit+0x8c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d130      	bne.n	80016e0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_SPI_MspInit+0x90>)
 8001680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_SPI_MspInit+0x90>)
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	0149      	lsls	r1, r1, #5
 8001688:	430a      	orrs	r2, r1
 800168a:	641a      	str	r2, [r3, #64]	; 0x40
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_SPI_MspInit+0x90>)
 800168e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	015b      	lsls	r3, r3, #5
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_SPI_MspInit+0x90>)
 800169c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_SPI_MspInit+0x90>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_SPI_MspInit+0x90>)
 80016a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016aa:	2201      	movs	r2, #1
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 80016b2:	0021      	movs	r1, r4
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	2246      	movs	r2, #70	; 0x46
 80016b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	187b      	adds	r3, r7, r1
 80016bc:	2202      	movs	r2, #2
 80016be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	187a      	adds	r2, r7, r1
 80016d4:	23a0      	movs	r3, #160	; 0xa0
 80016d6:	05db      	lsls	r3, r3, #23
 80016d8:	0011      	movs	r1, r2
 80016da:	0018      	movs	r0, r3
 80016dc:	f000 fba0 	bl	8001e20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b00b      	add	sp, #44	; 0x2c
 80016e6:	bd90      	pop	{r4, r7, pc}
 80016e8:	40013000 	.word	0x40013000
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_MspInit+0x44>)
 80016f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_MspInit+0x44>)
 80016fc:	2101      	movs	r1, #1
 80016fe:	430a      	orrs	r2, r1
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_MspInit+0x44>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2201      	movs	r2, #1
 8001708:	4013      	ands	r3, r2
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_MspInit+0x44>)
 8001710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_MspInit+0x44>)
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	0549      	lsls	r1, r1, #21
 8001718:	430a      	orrs	r2, r1
 800171a:	63da      	str	r2, [r3, #60]	; 0x3c
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_MspInit+0x44>)
 800171e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	055b      	lsls	r3, r3, #21
 8001724:	4013      	ands	r3, r2
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	40021000 	.word	0x40021000

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175c:	f000 fa6c 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b098      	sub	sp, #96	; 0x60
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001776:	2354      	movs	r3, #84	; 0x54
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	0018      	movs	r0, r3
 800177c:	230c      	movs	r3, #12
 800177e:	001a      	movs	r2, r3
 8001780:	2100      	movs	r1, #0
 8001782:	f004 fb12 	bl	8005daa <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001786:	2338      	movs	r3, #56	; 0x38
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	0018      	movs	r0, r3
 800178c:	231c      	movs	r3, #28
 800178e:	001a      	movs	r2, r3
 8001790:	2100      	movs	r1, #0
 8001792:	f004 fb0a 	bl	8005daa <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	0018      	movs	r0, r3
 800179a:	2334      	movs	r3, #52	; 0x34
 800179c:	001a      	movs	r2, r3
 800179e:	2100      	movs	r1, #0
 80017a0:	f004 fb03 	bl	8005daa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017a4:	4b45      	ldr	r3, [pc, #276]	; (80018bc <MX_TIM1_Init+0x14c>)
 80017a6:	4a46      	ldr	r2, [pc, #280]	; (80018c0 <MX_TIM1_Init+0x150>)
 80017a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017aa:	4b44      	ldr	r3, [pc, #272]	; (80018bc <MX_TIM1_Init+0x14c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b0:	4b42      	ldr	r3, [pc, #264]	; (80018bc <MX_TIM1_Init+0x14c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017b6:	4b41      	ldr	r3, [pc, #260]	; (80018bc <MX_TIM1_Init+0x14c>)
 80017b8:	4a42      	ldr	r2, [pc, #264]	; (80018c4 <MX_TIM1_Init+0x154>)
 80017ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <MX_TIM1_Init+0x14c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017c2:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <MX_TIM1_Init+0x14c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c8:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <MX_TIM1_Init+0x14c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <MX_TIM1_Init+0x14c>)
 80017d0:	0018      	movs	r0, r3
 80017d2:	f002 fba9 	bl	8003f28 <HAL_TIM_PWM_Init>
 80017d6:	1e03      	subs	r3, r0, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80017da:	f7ff fefb 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017de:	2154      	movs	r1, #84	; 0x54
 80017e0:	187b      	adds	r3, r7, r1
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017f2:	187a      	adds	r2, r7, r1
 80017f4:	4b31      	ldr	r3, [pc, #196]	; (80018bc <MX_TIM1_Init+0x14c>)
 80017f6:	0011      	movs	r1, r2
 80017f8:	0018      	movs	r0, r3
 80017fa:	f003 f80d 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	1e03      	subs	r3, r0, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001802:	f7ff fee7 	bl	80015d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001806:	2138      	movs	r1, #56	; 0x38
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2260      	movs	r2, #96	; 0x60
 800180c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800180e:	187b      	adds	r3, r7, r1
 8001810:	2200      	movs	r2, #0
 8001812:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001814:	187b      	adds	r3, r7, r1
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800181a:	187b      	adds	r3, r7, r1
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001820:	187b      	adds	r3, r7, r1
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001826:	187b      	adds	r3, r7, r1
 8001828:	2200      	movs	r2, #0
 800182a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001832:	1879      	adds	r1, r7, r1
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <MX_TIM1_Init+0x14c>)
 8001836:	2200      	movs	r2, #0
 8001838:	0018      	movs	r0, r3
 800183a:	f002 fbcd 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001842:	f7ff fec7 	bl	80015d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2200      	movs	r2, #0
 8001850:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	0192      	lsls	r2, r2, #6
 800186a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	0492      	lsls	r2, r2, #18
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2200      	movs	r2, #0
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001898:	1d3a      	adds	r2, r7, #4
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <MX_TIM1_Init+0x14c>)
 800189c:	0011      	movs	r1, r2
 800189e:	0018      	movs	r0, r3
 80018a0:	f003 f822 	bl	80048e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80018a4:	1e03      	subs	r3, r0, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80018a8:	f7ff fe94 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <MX_TIM1_Init+0x14c>)
 80018ae:	0018      	movs	r0, r3
 80018b0:	f000 f840 	bl	8001934 <HAL_TIM_MspPostInit>

}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b018      	add	sp, #96	; 0x60
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000108 	.word	0x20000108
 80018c0:	40012c00 	.word	0x40012c00
 80018c4:	0000ffff 	.word	0x0000ffff

080018c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b08f      	sub	sp, #60	; 0x3c
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d0:	2410      	movs	r4, #16
 80018d2:	193b      	adds	r3, r7, r4
 80018d4:	0018      	movs	r0, r3
 80018d6:	2328      	movs	r3, #40	; 0x28
 80018d8:	001a      	movs	r2, r3
 80018da:	2100      	movs	r1, #0
 80018dc:	f004 fa65 	bl	8005daa <memset>
  if(tim_pwmHandle->Instance==TIM1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <HAL_TIM_PWM_MspInit+0x64>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d11c      	bne.n	8001924 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80018ea:	193b      	adds	r3, r7, r4
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	0392      	lsls	r2, r2, #14
 80018f0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f8:	193b      	adds	r3, r7, r4
 80018fa:	0018      	movs	r0, r3
 80018fc:	f001 fa7a 	bl	8002df4 <HAL_RCCEx_PeriphCLKConfig>
 8001900:	1e03      	subs	r3, r0, #0
 8001902:	d001      	beq.n	8001908 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8001904:	f7ff fe66 	bl	80015d4 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_TIM_PWM_MspInit+0x68>)
 800190a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_TIM_PWM_MspInit+0x68>)
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	0109      	lsls	r1, r1, #4
 8001912:	430a      	orrs	r2, r1
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_TIM_PWM_MspInit+0x68>)
 8001918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	4013      	ands	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001924:	46c0      	nop			; (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	b00f      	add	sp, #60	; 0x3c
 800192a:	bd90      	pop	{r4, r7, pc}
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	240c      	movs	r4, #12
 800193e:	193b      	adds	r3, r7, r4
 8001940:	0018      	movs	r0, r3
 8001942:	2314      	movs	r3, #20
 8001944:	001a      	movs	r2, r3
 8001946:	2100      	movs	r1, #0
 8001948:	f004 fa2f 	bl	8005daa <memset>
  if(timHandle->Instance==TIM1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <HAL_TIM_MspPostInit+0x74>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d123      	bne.n	800199e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_TIM_MspPostInit+0x78>)
 8001958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_TIM_MspPostInit+0x78>)
 800195c:	2101      	movs	r1, #1
 800195e:	430a      	orrs	r2, r1
 8001960:	635a      	str	r2, [r3, #52]	; 0x34
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_TIM_MspPostInit+0x78>)
 8001964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001966:	2201      	movs	r2, #1
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 800196e:	193b      	adds	r3, r7, r4
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	0052      	lsls	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	0021      	movs	r1, r4
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2202      	movs	r2, #2
 800197c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	187b      	adds	r3, r7, r1
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800198a:	187b      	adds	r3, r7, r1
 800198c:	2202      	movs	r2, #2
 800198e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001990:	187a      	adds	r2, r7, r1
 8001992:	23a0      	movs	r3, #160	; 0xa0
 8001994:	05db      	lsls	r3, r3, #23
 8001996:	0011      	movs	r1, r2
 8001998:	0018      	movs	r0, r3
 800199a:	f000 fa41 	bl	8001e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b009      	add	sp, #36	; 0x24
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40012c00 	.word	0x40012c00
 80019ac:	40021000 	.word	0x40021000

080019b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 80019b6:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <MX_USART1_UART_Init+0x98>)
 80019b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 80019bc:	2296      	movs	r2, #150	; 0x96
 80019be:	01d2      	lsls	r2, r2, #7
 80019c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 80019fa:	0018      	movs	r0, r3
 80019fc:	f003 f810 	bl	8004a20 <HAL_UART_Init>
 8001a00:	1e03      	subs	r3, r0, #0
 8001a02:	d001      	beq.n	8001a08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a04:	f7ff fde6 	bl	80015d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f003 fde7 	bl	80055e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001a12:	1e03      	subs	r3, r0, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a16:	f7ff fddd 	bl	80015d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f003 fe1e 	bl	8005660 <HAL_UARTEx_SetRxFifoThreshold>
 8001a24:	1e03      	subs	r3, r0, #0
 8001a26:	d001      	beq.n	8001a2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a28:	f7ff fdd4 	bl	80015d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <MX_USART1_UART_Init+0x94>)
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f003 fd9c 	bl	800556c <HAL_UARTEx_DisableFifoMode>
 8001a34:	1e03      	subs	r3, r0, #0
 8001a36:	d001      	beq.n	8001a3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a38:	f7ff fdcc 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	20000154 	.word	0x20000154
 8001a48:	40013800 	.word	0x40013800

08001a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b095      	sub	sp, #84	; 0x54
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	233c      	movs	r3, #60	; 0x3c
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	0018      	movs	r0, r3
 8001a5a:	2314      	movs	r3, #20
 8001a5c:	001a      	movs	r2, r3
 8001a5e:	2100      	movs	r1, #0
 8001a60:	f004 f9a3 	bl	8005daa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a64:	2414      	movs	r4, #20
 8001a66:	193b      	adds	r3, r7, r4
 8001a68:	0018      	movs	r0, r3
 8001a6a:	2328      	movs	r3, #40	; 0x28
 8001a6c:	001a      	movs	r2, r3
 8001a6e:	2100      	movs	r1, #0
 8001a70:	f004 f99b 	bl	8005daa <memset>
  if(uartHandle->Instance==USART1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_UART_MspInit+0xb8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d13d      	bne.n	8001afa <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a7e:	193b      	adds	r3, r7, r4
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001a84:	193b      	adds	r3, r7, r4
 8001a86:	2200      	movs	r2, #0
 8001a88:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f001 f9b1 	bl	8002df4 <HAL_RCCEx_PeriphCLKConfig>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a96:	f7ff fd9d 	bl	80015d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_UART_MspInit+0xbc>)
 8001a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_UART_MspInit+0xbc>)
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	01c9      	lsls	r1, r1, #7
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_UART_MspInit+0xbc>)
 8001aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	01db      	lsls	r3, r3, #7
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_UART_MspInit+0xbc>)
 8001ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_UART_MspInit+0xbc>)
 8001abc:	2102      	movs	r1, #2
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_UART_MspInit+0xbc>)
 8001ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001ace:	213c      	movs	r1, #60	; 0x3c
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	22c0      	movs	r2, #192	; 0xc0
 8001ad4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	187b      	adds	r3, r7, r1
 8001ad8:	2202      	movs	r2, #2
 8001ada:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001ae8:	187b      	adds	r3, r7, r1
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	187b      	adds	r3, r7, r1
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_UART_MspInit+0xc0>)
 8001af2:	0019      	movs	r1, r3
 8001af4:	0010      	movs	r0, r2
 8001af6:	f000 f993 	bl	8001e20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b015      	add	sp, #84	; 0x54
 8001b00:	bd90      	pop	{r4, r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	40013800 	.word	0x40013800
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	50000400 	.word	0x50000400

08001b10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b10:	480d      	ldr	r0, [pc, #52]	; (8001b48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b14:	f7ff fe27 	bl	8001766 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b1a:	490d      	ldr	r1, [pc, #52]	; (8001b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <LoopForever+0xe>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b30:	4c0a      	ldr	r4, [pc, #40]	; (8001b5c <LoopForever+0x16>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b3e:	f004 f93d 	bl	8005dbc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001b42:	f7ff fc61 	bl	8001408 <main>

08001b46 <LoopForever>:

LoopForever:
  b LoopForever
 8001b46:	e7fe      	b.n	8001b46 <LoopForever>
  ldr   r0, =_estack
 8001b48:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b50:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b54:	0800611c 	.word	0x0800611c
  ldr r2, =_sbss
 8001b58:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001b5c:	200001ec 	.word	0x200001ec

08001b60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC1_IRQHandler>
	...

08001b64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b6a:	1dfb      	adds	r3, r7, #7
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_Init+0x3c>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_Init+0x3c>)
 8001b76:	2180      	movs	r1, #128	; 0x80
 8001b78:	0049      	lsls	r1, r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b7e:	2003      	movs	r0, #3
 8001b80:	f000 f810 	bl	8001ba4 <HAL_InitTick>
 8001b84:	1e03      	subs	r3, r0, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001b88:	1dfb      	adds	r3, r7, #7
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e001      	b.n	8001b94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fdae 	bl	80016f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b94:	1dfb      	adds	r3, r7, #7
 8001b96:	781b      	ldrb	r3, [r3, #0]
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40022000 	.word	0x40022000

08001ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bac:	230f      	movs	r3, #15
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_InitTick+0x88>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d02b      	beq.n	8001c14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_InitTick+0x8c>)
 8001bbe:	681c      	ldr	r4, [r3, #0]
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <HAL_InitTick+0x88>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	23fa      	movs	r3, #250	; 0xfa
 8001bc8:	0098      	lsls	r0, r3, #2
 8001bca:	f7fe fa9b 	bl	8000104 <__udivsi3>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	0020      	movs	r0, r4
 8001bd4:	f7fe fa96 	bl	8000104 <__udivsi3>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f000 f913 	bl	8001e06 <HAL_SYSTICK_Config>
 8001be0:	1e03      	subs	r3, r0, #0
 8001be2:	d112      	bne.n	8001c0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d80a      	bhi.n	8001c00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	2301      	movs	r3, #1
 8001bee:	425b      	negs	r3, r3
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 f8f2 	bl	8001ddc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_InitTick+0x90>)
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e00d      	b.n	8001c1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c00:	230f      	movs	r3, #15
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	e008      	b.n	8001c1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c0a:	230f      	movs	r3, #15
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	e003      	b.n	8001c1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c14:	230f      	movs	r3, #15
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001c1c:	230f      	movs	r3, #15
 8001c1e:	18fb      	adds	r3, r7, r3
 8001c20:	781b      	ldrb	r3, [r3, #0]
}
 8001c22:	0018      	movs	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b005      	add	sp, #20
 8001c28:	bd90      	pop	{r4, r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	20000010 	.word	0x20000010
 8001c30:	20000008 	.word	0x20000008
 8001c34:	2000000c 	.word	0x2000000c

08001c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_IncTick+0x1c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	001a      	movs	r2, r3
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_IncTick+0x20>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	18d2      	adds	r2, r2, r3
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_IncTick+0x20>)
 8001c4a:	601a      	str	r2, [r3, #0]
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	20000010 	.word	0x20000010
 8001c58:	200001e8 	.word	0x200001e8

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <HAL_GetTick+0x10>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	200001e8 	.word	0x200001e8

08001c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff fff0 	bl	8001c5c <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3301      	adds	r3, #1
 8001c88:	d005      	beq.n	8001c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_Delay+0x44>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	001a      	movs	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	189b      	adds	r3, r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	f7ff ffe0 	bl	8001c5c <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d8f7      	bhi.n	8001c98 <HAL_Delay+0x28>
  {
  }
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b004      	add	sp, #16
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	20000010 	.word	0x20000010

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b7f      	cmp	r3, #127	; 0x7f
 8001ccc:	d828      	bhi.n	8001d20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cce:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <__NVIC_SetPriority+0xd4>)
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b25b      	sxtb	r3, r3
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	33c0      	adds	r3, #192	; 0xc0
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	589b      	ldr	r3, [r3, r2]
 8001cde:	1dfa      	adds	r2, r7, #7
 8001ce0:	7812      	ldrb	r2, [r2, #0]
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	00d2      	lsls	r2, r2, #3
 8001cea:	21ff      	movs	r1, #255	; 0xff
 8001cec:	4091      	lsls	r1, r2
 8001cee:	000a      	movs	r2, r1
 8001cf0:	43d2      	mvns	r2, r2
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	019b      	lsls	r3, r3, #6
 8001cfa:	22ff      	movs	r2, #255	; 0xff
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	0018      	movs	r0, r3
 8001d04:	2303      	movs	r3, #3
 8001d06:	4003      	ands	r3, r0
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d0c:	481f      	ldr	r0, [pc, #124]	; (8001d8c <__NVIC_SetPriority+0xd4>)
 8001d0e:	1dfb      	adds	r3, r7, #7
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	430a      	orrs	r2, r1
 8001d18:	33c0      	adds	r3, #192	; 0xc0
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d1e:	e031      	b.n	8001d84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d20:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <__NVIC_SetPriority+0xd8>)
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	0019      	movs	r1, r3
 8001d28:	230f      	movs	r3, #15
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	3b08      	subs	r3, #8
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3306      	adds	r3, #6
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	18d3      	adds	r3, r2, r3
 8001d36:	3304      	adds	r3, #4
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	1dfa      	adds	r2, r7, #7
 8001d3c:	7812      	ldrb	r2, [r2, #0]
 8001d3e:	0011      	movs	r1, r2
 8001d40:	2203      	movs	r2, #3
 8001d42:	400a      	ands	r2, r1
 8001d44:	00d2      	lsls	r2, r2, #3
 8001d46:	21ff      	movs	r1, #255	; 0xff
 8001d48:	4091      	lsls	r1, r2
 8001d4a:	000a      	movs	r2, r1
 8001d4c:	43d2      	mvns	r2, r2
 8001d4e:	401a      	ands	r2, r3
 8001d50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	22ff      	movs	r2, #255	; 0xff
 8001d58:	401a      	ands	r2, r3
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	2303      	movs	r3, #3
 8001d62:	4003      	ands	r3, r0
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d68:	4809      	ldr	r0, [pc, #36]	; (8001d90 <__NVIC_SetPriority+0xd8>)
 8001d6a:	1dfb      	adds	r3, r7, #7
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	001c      	movs	r4, r3
 8001d70:	230f      	movs	r3, #15
 8001d72:	4023      	ands	r3, r4
 8001d74:	3b08      	subs	r3, #8
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	3306      	adds	r3, #6
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	18c3      	adds	r3, r0, r3
 8001d80:	3304      	adds	r3, #4
 8001d82:	601a      	str	r2, [r3, #0]
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b003      	add	sp, #12
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1e5a      	subs	r2, r3, #1
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	045b      	lsls	r3, r3, #17
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d301      	bcc.n	8001dac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da8:	2301      	movs	r3, #1
 8001daa:	e010      	b.n	8001dce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <SysTick_Config+0x44>)
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	3a01      	subs	r2, #1
 8001db2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db4:	2301      	movs	r3, #1
 8001db6:	425b      	negs	r3, r3
 8001db8:	2103      	movs	r1, #3
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f7ff ff7c 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x44>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x44>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	210f      	movs	r1, #15
 8001de8:	187b      	adds	r3, r7, r1
 8001dea:	1c02      	adds	r2, r0, #0
 8001dec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	187b      	adds	r3, r7, r1
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b25b      	sxtb	r3, r3
 8001df6:	0011      	movs	r1, r2
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff ff5d 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b004      	add	sp, #16
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7ff ffbf 	bl	8001d94 <SysTick_Config>
 8001e16:	0003      	movs	r3, r0
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b002      	add	sp, #8
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2e:	e147      	b.n	80020c0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2101      	movs	r1, #1
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4091      	lsls	r1, r2
 8001e3a:	000a      	movs	r2, r1
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d100      	bne.n	8001e48 <HAL_GPIO_Init+0x28>
 8001e46:	e138      	b.n	80020ba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d005      	beq.n	8001e60 <HAL_GPIO_Init+0x40>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d130      	bne.n	8001ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	0013      	movs	r3, r2
 8001e70:	43da      	mvns	r2, r3
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	409a      	lsls	r2, r3
 8001e82:	0013      	movs	r3, r2
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e96:	2201      	movs	r2, #1
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	2201      	movs	r2, #1
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d017      	beq.n	8001efe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	409a      	lsls	r2, r3
 8001edc:	0013      	movs	r3, r2
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2203      	movs	r2, #3
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d123      	bne.n	8001f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	0092      	lsls	r2, r2, #2
 8001f14:	58d3      	ldr	r3, [r2, r3]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	409a      	lsls	r2, r3
 8001f24:	0013      	movs	r3, r2
 8001f26:	43da      	mvns	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2107      	movs	r1, #7
 8001f36:	400b      	ands	r3, r1
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	0013      	movs	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	08da      	lsrs	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3208      	adds	r2, #8
 8001f4c:	0092      	lsls	r2, r2, #2
 8001f4e:	6939      	ldr	r1, [r7, #16]
 8001f50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	0013      	movs	r3, r2
 8001f62:	43da      	mvns	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2203      	movs	r2, #3
 8001f70:	401a      	ands	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	409a      	lsls	r2, r3
 8001f78:	0013      	movs	r3, r2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	23c0      	movs	r3, #192	; 0xc0
 8001f8c:	029b      	lsls	r3, r3, #10
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d100      	bne.n	8001f94 <HAL_GPIO_Init+0x174>
 8001f92:	e092      	b.n	80020ba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001f94:	4a50      	ldr	r2, [pc, #320]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3318      	adds	r3, #24
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	589b      	ldr	r3, [r3, r2]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	220f      	movs	r2, #15
 8001fac:	409a      	lsls	r2, r3
 8001fae:	0013      	movs	r3, r2
 8001fb0:	43da      	mvns	r2, r3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	23a0      	movs	r3, #160	; 0xa0
 8001fbc:	05db      	lsls	r3, r3, #23
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x1ca>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a45      	ldr	r2, [pc, #276]	; (80020dc <HAL_GPIO_Init+0x2bc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x1c6>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a44      	ldr	r2, [pc, #272]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x1c2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a43      	ldr	r2, [pc, #268]	; (80020e4 <HAL_GPIO_Init+0x2c4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x1be>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x1cc>
 8001fde:	2305      	movs	r3, #5
 8001fe0:	e004      	b.n	8001fec <HAL_GPIO_Init+0x1cc>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e002      	b.n	8001fec <HAL_GPIO_Init+0x1cc>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_GPIO_Init+0x1cc>
 8001fea:	2300      	movs	r3, #0
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	2103      	movs	r1, #3
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	00d2      	lsls	r2, r2, #3
 8001ff4:	4093      	lsls	r3, r2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001ffc:	4936      	ldr	r1, [pc, #216]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3318      	adds	r3, #24
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800200a:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43da      	mvns	r2, r3
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	035b      	lsls	r3, r3, #13
 8002022:	4013      	ands	r3, r2
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800202e:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	43da      	mvns	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	039b      	lsls	r3, r3, #14
 800204c:	4013      	ands	r3, r2
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800205e:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 8002060:	2384      	movs	r3, #132	; 0x84
 8002062:	58d3      	ldr	r3, [r2, r3]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43da      	mvns	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	029b      	lsls	r3, r3, #10
 8002078:	4013      	ands	r3, r2
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002084:	4914      	ldr	r1, [pc, #80]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 8002086:	2284      	movs	r2, #132	; 0x84
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	58d3      	ldr	r3, [r2, r3]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43da      	mvns	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	025b      	lsls	r3, r3, #9
 80020a6:	4013      	ands	r3, r2
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020b2:	4909      	ldr	r1, [pc, #36]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 80020b4:	2280      	movs	r2, #128	; 0x80
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	40da      	lsrs	r2, r3
 80020c8:	1e13      	subs	r3, r2, #0
 80020ca:	d000      	beq.n	80020ce <HAL_GPIO_Init+0x2ae>
 80020cc:	e6b0      	b.n	8001e30 <HAL_GPIO_Init+0x10>
  }
}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b006      	add	sp, #24
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021800 	.word	0x40021800
 80020dc:	50000400 	.word	0x50000400
 80020e0:	50000800 	.word	0x50000800
 80020e4:	50000c00 	.word	0x50000c00

080020e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	0008      	movs	r0, r1
 80020f2:	0011      	movs	r1, r2
 80020f4:	1cbb      	adds	r3, r7, #2
 80020f6:	1c02      	adds	r2, r0, #0
 80020f8:	801a      	strh	r2, [r3, #0]
 80020fa:	1c7b      	adds	r3, r7, #1
 80020fc:	1c0a      	adds	r2, r1, #0
 80020fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002100:	1c7b      	adds	r3, r7, #1
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002108:	1cbb      	adds	r3, r7, #2
 800210a:	881a      	ldrh	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002110:	e003      	b.n	800211a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002112:	1cbb      	adds	r3, r7, #2
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	000a      	movs	r2, r1
 800212c:	1cbb      	adds	r3, r7, #2
 800212e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002136:	1cbb      	adds	r3, r7, #2
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4013      	ands	r3, r2
 800213e:	041a      	lsls	r2, r3, #16
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	1cb9      	adds	r1, r7, #2
 8002146:	8809      	ldrh	r1, [r1, #0]
 8002148:	400b      	ands	r3, r1
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	619a      	str	r2, [r3, #24]
}
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b004      	add	sp, #16
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e08f      	b.n	800228a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2241      	movs	r2, #65	; 0x41
 800216e:	5c9b      	ldrb	r3, [r3, r2]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d107      	bne.n	8002186 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2240      	movs	r2, #64	; 0x40
 800217a:	2100      	movs	r1, #0
 800217c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f7ff f8f5 	bl	8001370 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2241      	movs	r2, #65	; 0x41
 800218a:	2124      	movs	r1, #36	; 0x24
 800218c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	438a      	bics	r2, r1
 800219c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	493b      	ldr	r1, [pc, #236]	; (8002294 <HAL_I2C_Init+0x13c>)
 80021a8:	400a      	ands	r2, r1
 80021aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4938      	ldr	r1, [pc, #224]	; (8002298 <HAL_I2C_Init+0x140>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d108      	bne.n	80021d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	0209      	lsls	r1, r1, #8
 80021d0:	430a      	orrs	r2, r1
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	e007      	b.n	80021e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2184      	movs	r1, #132	; 0x84
 80021e0:	0209      	lsls	r1, r1, #8
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d109      	bne.n	8002202 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	0109      	lsls	r1, r1, #4
 80021fc:	430a      	orrs	r2, r1
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	e007      	b.n	8002212 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4923      	ldr	r1, [pc, #140]	; (800229c <HAL_I2C_Init+0x144>)
 800220e:	400a      	ands	r2, r1
 8002210:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4920      	ldr	r1, [pc, #128]	; (80022a0 <HAL_I2C_Init+0x148>)
 800221e:	430a      	orrs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	491a      	ldr	r1, [pc, #104]	; (8002298 <HAL_I2C_Init+0x140>)
 800222e:	400a      	ands	r2, r1
 8002230:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	431a      	orrs	r2, r3
 800223c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69d9      	ldr	r1, [r3, #28]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1a      	ldr	r2, [r3, #32]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2101      	movs	r1, #1
 8002268:	430a      	orrs	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2241      	movs	r2, #65	; 0x41
 8002276:	2120      	movs	r1, #32
 8002278:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2242      	movs	r2, #66	; 0x42
 8002284:	2100      	movs	r1, #0
 8002286:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b002      	add	sp, #8
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	f0ffffff 	.word	0xf0ffffff
 8002298:	ffff7fff 	.word	0xffff7fff
 800229c:	fffff7ff 	.word	0xfffff7ff
 80022a0:	02008000 	.word	0x02008000

080022a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2241      	movs	r2, #65	; 0x41
 80022b2:	5c9b      	ldrb	r3, [r3, r2]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d138      	bne.n	800232c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2240      	movs	r2, #64	; 0x40
 80022be:	5c9b      	ldrb	r3, [r3, r2]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e032      	b.n	800232e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2240      	movs	r2, #64	; 0x40
 80022cc:	2101      	movs	r1, #1
 80022ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2241      	movs	r2, #65	; 0x41
 80022d4:	2124      	movs	r1, #36	; 0x24
 80022d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2101      	movs	r1, #1
 80022e4:	438a      	bics	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4911      	ldr	r1, [pc, #68]	; (8002338 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6819      	ldr	r1, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2101      	movs	r1, #1
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2241      	movs	r2, #65	; 0x41
 800231c:	2120      	movs	r1, #32
 800231e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	2100      	movs	r1, #0
 8002326:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	e000      	b.n	800232e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800232c:	2302      	movs	r3, #2
  }
}
 800232e:	0018      	movs	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	b002      	add	sp, #8
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	ffffefff 	.word	0xffffefff

0800233c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2241      	movs	r2, #65	; 0x41
 800234a:	5c9b      	ldrb	r3, [r3, r2]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b20      	cmp	r3, #32
 8002350:	d139      	bne.n	80023c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2240      	movs	r2, #64	; 0x40
 8002356:	5c9b      	ldrb	r3, [r3, r2]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800235c:	2302      	movs	r3, #2
 800235e:	e033      	b.n	80023c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2240      	movs	r2, #64	; 0x40
 8002364:	2101      	movs	r1, #1
 8002366:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2241      	movs	r2, #65	; 0x41
 800236c:	2124      	movs	r1, #36	; 0x24
 800236e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2101      	movs	r1, #1
 800237c:	438a      	bics	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800238c:	4013      	ands	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2101      	movs	r1, #1
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2241      	movs	r2, #65	; 0x41
 80023b6:	2120      	movs	r1, #32
 80023b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e000      	b.n	80023c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023c6:	2302      	movs	r3, #2
  }
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b004      	add	sp, #16
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	fffff0ff 	.word	0xfffff0ff

080023d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d11f      	bne.n	8002438 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	0013      	movs	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	189b      	adds	r3, r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4912      	ldr	r1, [pc, #72]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002406:	0018      	movs	r0, r3
 8002408:	f7fd fe7c 	bl	8000104 <__udivsi3>
 800240c:	0003      	movs	r3, r0
 800240e:	3301      	adds	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002412:	e008      	b.n	8002426 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3b01      	subs	r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e001      	b.n	8002426 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e009      	b.n	800243a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	401a      	ands	r2, r3
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	429a      	cmp	r2, r3
 8002436:	d0ed      	beq.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	0018      	movs	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	b004      	add	sp, #16
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	40007000 	.word	0x40007000
 8002448:	fffff9ff 	.word	0xfffff9ff
 800244c:	20000008 	.word	0x20000008
 8002450:	000f4240 	.word	0x000f4240

08002454 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <LL_RCC_GetAPB1Prescaler+0x14>)
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	23e0      	movs	r3, #224	; 0xe0
 800245e:	01db      	lsls	r3, r3, #7
 8002460:	4013      	ands	r3, r2
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000

0800246c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e2fe      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2201      	movs	r2, #1
 8002484:	4013      	ands	r3, r2
 8002486:	d100      	bne.n	800248a <HAL_RCC_OscConfig+0x1e>
 8002488:	e07c      	b.n	8002584 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800248a:	4bc3      	ldr	r3, [pc, #780]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2238      	movs	r2, #56	; 0x38
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002494:	4bc0      	ldr	r3, [pc, #768]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2203      	movs	r2, #3
 800249a:	4013      	ands	r3, r2
 800249c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b10      	cmp	r3, #16
 80024a2:	d102      	bne.n	80024aa <HAL_RCC_OscConfig+0x3e>
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d002      	beq.n	80024b0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d10b      	bne.n	80024c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	4bb9      	ldr	r3, [pc, #740]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	029b      	lsls	r3, r3, #10
 80024b8:	4013      	ands	r3, r2
 80024ba:	d062      	beq.n	8002582 <HAL_RCC_OscConfig+0x116>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d15e      	bne.n	8002582 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e2d9      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	025b      	lsls	r3, r3, #9
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_OscConfig+0x78>
 80024d4:	4bb0      	ldr	r3, [pc, #704]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4baf      	ldr	r3, [pc, #700]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	0249      	lsls	r1, r1, #9
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e020      	b.n	8002526 <HAL_RCC_OscConfig+0xba>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	23a0      	movs	r3, #160	; 0xa0
 80024ea:	02db      	lsls	r3, r3, #11
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d10e      	bne.n	800250e <HAL_RCC_OscConfig+0xa2>
 80024f0:	4ba9      	ldr	r3, [pc, #676]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4ba8      	ldr	r3, [pc, #672]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	02c9      	lsls	r1, r1, #11
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	4ba6      	ldr	r3, [pc, #664]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4ba5      	ldr	r3, [pc, #660]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002504:	2180      	movs	r1, #128	; 0x80
 8002506:	0249      	lsls	r1, r1, #9
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e00b      	b.n	8002526 <HAL_RCC_OscConfig+0xba>
 800250e:	4ba2      	ldr	r3, [pc, #648]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4ba1      	ldr	r3, [pc, #644]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002514:	49a1      	ldr	r1, [pc, #644]	; (800279c <HAL_RCC_OscConfig+0x330>)
 8002516:	400a      	ands	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	4b9f      	ldr	r3, [pc, #636]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b9e      	ldr	r3, [pc, #632]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002520:	499f      	ldr	r1, [pc, #636]	; (80027a0 <HAL_RCC_OscConfig+0x334>)
 8002522:	400a      	ands	r2, r1
 8002524:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d014      	beq.n	8002558 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7ff fb95 	bl	8001c5c <HAL_GetTick>
 8002532:	0003      	movs	r3, r0
 8002534:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7ff fb90 	bl	8001c5c <HAL_GetTick>
 800253c:	0002      	movs	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e298      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254a:	4b93      	ldr	r3, [pc, #588]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	029b      	lsls	r3, r3, #10
 8002552:	4013      	ands	r3, r2
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0xcc>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7ff fb80 	bl	8001c5c <HAL_GetTick>
 800255c:	0003      	movs	r3, r0
 800255e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002562:	f7ff fb7b 	bl	8001c5c <HAL_GetTick>
 8002566:	0002      	movs	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b64      	cmp	r3, #100	; 0x64
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e283      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002574:	4b88      	ldr	r3, [pc, #544]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	029b      	lsls	r3, r3, #10
 800257c:	4013      	ands	r3, r2
 800257e:	d1f0      	bne.n	8002562 <HAL_RCC_OscConfig+0xf6>
 8002580:	e000      	b.n	8002584 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002582:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2202      	movs	r2, #2
 800258a:	4013      	ands	r3, r2
 800258c:	d100      	bne.n	8002590 <HAL_RCC_OscConfig+0x124>
 800258e:	e099      	b.n	80026c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002590:	4b81      	ldr	r3, [pc, #516]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2238      	movs	r2, #56	; 0x38
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800259a:	4b7f      	ldr	r3, [pc, #508]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2203      	movs	r2, #3
 80025a0:	4013      	ands	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2b10      	cmp	r3, #16
 80025a8:	d102      	bne.n	80025b0 <HAL_RCC_OscConfig+0x144>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d002      	beq.n	80025b6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d135      	bne.n	8002622 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b6:	4b78      	ldr	r3, [pc, #480]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4013      	ands	r3, r2
 80025c0:	d005      	beq.n	80025ce <HAL_RCC_OscConfig+0x162>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e256      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ce:	4b72      	ldr	r3, [pc, #456]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4a74      	ldr	r2, [pc, #464]	; (80027a4 <HAL_RCC_OscConfig+0x338>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	021a      	lsls	r2, r3, #8
 80025de:	4b6e      	ldr	r3, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80025e0:	430a      	orrs	r2, r1
 80025e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d112      	bne.n	8002610 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025ea:	4b6b      	ldr	r3, [pc, #428]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a6e      	ldr	r2, [pc, #440]	; (80027a8 <HAL_RCC_OscConfig+0x33c>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	4b67      	ldr	r3, [pc, #412]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80025fe:	4b66      	ldr	r3, [pc, #408]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0adb      	lsrs	r3, r3, #11
 8002604:	2207      	movs	r2, #7
 8002606:	4013      	ands	r3, r2
 8002608:	4a68      	ldr	r2, [pc, #416]	; (80027ac <HAL_RCC_OscConfig+0x340>)
 800260a:	40da      	lsrs	r2, r3
 800260c:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <HAL_RCC_OscConfig+0x344>)
 800260e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002610:	4b68      	ldr	r3, [pc, #416]	; (80027b4 <HAL_RCC_OscConfig+0x348>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0018      	movs	r0, r3
 8002616:	f7ff fac5 	bl	8001ba4 <HAL_InitTick>
 800261a:	1e03      	subs	r3, r0, #0
 800261c:	d051      	beq.n	80026c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e22c      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d030      	beq.n	800268c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800262a:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a5e      	ldr	r2, [pc, #376]	; (80027a8 <HAL_RCC_OscConfig+0x33c>)
 8002630:	4013      	ands	r3, r2
 8002632:	0019      	movs	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	4b57      	ldr	r3, [pc, #348]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800263e:	4b56      	ldr	r3, [pc, #344]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b55      	ldr	r3, [pc, #340]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	0049      	lsls	r1, r1, #1
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7ff fb06 	bl	8001c5c <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002656:	f7ff fb01 	bl	8001c5c <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e209      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002668:	4b4b      	ldr	r3, [pc, #300]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4013      	ands	r3, r2
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002674:	4b48      	ldr	r3, [pc, #288]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a4a      	ldr	r2, [pc, #296]	; (80027a4 <HAL_RCC_OscConfig+0x338>)
 800267a:	4013      	ands	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	021a      	lsls	r2, r3, #8
 8002684:	4b44      	ldr	r3, [pc, #272]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	e01b      	b.n	80026c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800268c:	4b42      	ldr	r3, [pc, #264]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002692:	4949      	ldr	r1, [pc, #292]	; (80027b8 <HAL_RCC_OscConfig+0x34c>)
 8002694:	400a      	ands	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7ff fae0 	bl	8001c5c <HAL_GetTick>
 800269c:	0003      	movs	r3, r0
 800269e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a2:	f7ff fadb 	bl	8001c5c <HAL_GetTick>
 80026a6:	0002      	movs	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e1e3      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b4:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4013      	ands	r3, r2
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x236>
 80026c0:	e000      	b.n	80026c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2208      	movs	r2, #8
 80026ca:	4013      	ands	r3, r2
 80026cc:	d047      	beq.n	800275e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80026ce:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2238      	movs	r2, #56	; 0x38
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b18      	cmp	r3, #24
 80026d8:	d10a      	bne.n	80026f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80026da:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d03c      	beq.n	800275e <HAL_RCC_OscConfig+0x2f2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d138      	bne.n	800275e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e1c5      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d019      	beq.n	800272c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80026fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026fc:	4b26      	ldr	r3, [pc, #152]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 80026fe:	2101      	movs	r1, #1
 8002700:	430a      	orrs	r2, r1
 8002702:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7ff faaa 	bl	8001c5c <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270e:	f7ff faa5 	bl	8001c5c <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1ad      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002724:	2202      	movs	r2, #2
 8002726:	4013      	ands	r3, r2
 8002728:	d0f1      	beq.n	800270e <HAL_RCC_OscConfig+0x2a2>
 800272a:	e018      	b.n	800275e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 800272e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002732:	2101      	movs	r1, #1
 8002734:	438a      	bics	r2, r1
 8002736:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7ff fa90 	bl	8001c5c <HAL_GetTick>
 800273c:	0003      	movs	r3, r0
 800273e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002742:	f7ff fa8b 	bl	8001c5c <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e193      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002758:	2202      	movs	r2, #2
 800275a:	4013      	ands	r3, r2
 800275c:	d1f1      	bne.n	8002742 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2204      	movs	r2, #4
 8002764:	4013      	ands	r3, r2
 8002766:	d100      	bne.n	800276a <HAL_RCC_OscConfig+0x2fe>
 8002768:	e0c6      	b.n	80028f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276a:	231f      	movs	r3, #31
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2238      	movs	r2, #56	; 0x38
 8002778:	4013      	ands	r3, r2
 800277a:	2b20      	cmp	r3, #32
 800277c:	d11e      	bne.n	80027bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_RCC_OscConfig+0x32c>)
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	2202      	movs	r2, #2
 8002784:	4013      	ands	r3, r2
 8002786:	d100      	bne.n	800278a <HAL_RCC_OscConfig+0x31e>
 8002788:	e0b6      	b.n	80028f8 <HAL_RCC_OscConfig+0x48c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d000      	beq.n	8002794 <HAL_RCC_OscConfig+0x328>
 8002792:	e0b1      	b.n	80028f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e171      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
 8002798:	40021000 	.word	0x40021000
 800279c:	fffeffff 	.word	0xfffeffff
 80027a0:	fffbffff 	.word	0xfffbffff
 80027a4:	ffff80ff 	.word	0xffff80ff
 80027a8:	ffffc7ff 	.word	0xffffc7ff
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	20000008 	.word	0x20000008
 80027b4:	2000000c 	.word	0x2000000c
 80027b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027bc:	4bb1      	ldr	r3, [pc, #708]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 80027be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	055b      	lsls	r3, r3, #21
 80027c4:	4013      	ands	r3, r2
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_OscConfig+0x360>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x362>
 80027cc:	2300      	movs	r3, #0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d011      	beq.n	80027f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	4bac      	ldr	r3, [pc, #688]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 80027d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027d6:	4bab      	ldr	r3, [pc, #684]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 80027d8:	2180      	movs	r1, #128	; 0x80
 80027da:	0549      	lsls	r1, r1, #21
 80027dc:	430a      	orrs	r2, r1
 80027de:	63da      	str	r2, [r3, #60]	; 0x3c
 80027e0:	4ba8      	ldr	r3, [pc, #672]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 80027e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	055b      	lsls	r3, r3, #21
 80027e8:	4013      	ands	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80027ee:	231f      	movs	r3, #31
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f6:	4ba4      	ldr	r3, [pc, #656]	; (8002a88 <HAL_RCC_OscConfig+0x61c>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4013      	ands	r3, r2
 8002800:	d11a      	bne.n	8002838 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002802:	4ba1      	ldr	r3, [pc, #644]	; (8002a88 <HAL_RCC_OscConfig+0x61c>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	4ba0      	ldr	r3, [pc, #640]	; (8002a88 <HAL_RCC_OscConfig+0x61c>)
 8002808:	2180      	movs	r1, #128	; 0x80
 800280a:	0049      	lsls	r1, r1, #1
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002810:	f7ff fa24 	bl	8001c5c <HAL_GetTick>
 8002814:	0003      	movs	r3, r0
 8002816:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281a:	f7ff fa1f 	bl	8001c5c <HAL_GetTick>
 800281e:	0002      	movs	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e127      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800282c:	4b96      	ldr	r3, [pc, #600]	; (8002a88 <HAL_RCC_OscConfig+0x61c>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4013      	ands	r3, r2
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x3e2>
 8002840:	4b90      	ldr	r3, [pc, #576]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002842:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002844:	4b8f      	ldr	r3, [pc, #572]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002846:	2101      	movs	r1, #1
 8002848:	430a      	orrs	r2, r1
 800284a:	65da      	str	r2, [r3, #92]	; 0x5c
 800284c:	e01c      	b.n	8002888 <HAL_RCC_OscConfig+0x41c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b05      	cmp	r3, #5
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x404>
 8002856:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002858:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800285a:	4b8a      	ldr	r3, [pc, #552]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 800285c:	2104      	movs	r1, #4
 800285e:	430a      	orrs	r2, r1
 8002860:	65da      	str	r2, [r3, #92]	; 0x5c
 8002862:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002864:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002866:	4b87      	ldr	r3, [pc, #540]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002868:	2101      	movs	r1, #1
 800286a:	430a      	orrs	r2, r1
 800286c:	65da      	str	r2, [r3, #92]	; 0x5c
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0x41c>
 8002870:	4b84      	ldr	r3, [pc, #528]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002872:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002874:	4b83      	ldr	r3, [pc, #524]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002876:	2101      	movs	r1, #1
 8002878:	438a      	bics	r2, r1
 800287a:	65da      	str	r2, [r3, #92]	; 0x5c
 800287c:	4b81      	ldr	r3, [pc, #516]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 800287e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002880:	4b80      	ldr	r3, [pc, #512]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002882:	2104      	movs	r1, #4
 8002884:	438a      	bics	r2, r1
 8002886:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d014      	beq.n	80028ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7ff f9e4 	bl	8001c5c <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002898:	e009      	b.n	80028ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7ff f9df 	bl	8001c5c <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	4a79      	ldr	r2, [pc, #484]	; (8002a8c <HAL_RCC_OscConfig+0x620>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0e6      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ae:	4b75      	ldr	r3, [pc, #468]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	2202      	movs	r2, #2
 80028b4:	4013      	ands	r3, r2
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x42e>
 80028b8:	e013      	b.n	80028e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7ff f9cf 	bl	8001c5c <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c2:	e009      	b.n	80028d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7ff f9ca 	bl	8001c5c <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	4a6f      	ldr	r2, [pc, #444]	; (8002a8c <HAL_RCC_OscConfig+0x620>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e0d1      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d8:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	2202      	movs	r2, #2
 80028de:	4013      	ands	r3, r2
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80028e2:	231f      	movs	r3, #31
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4b65      	ldr	r3, [pc, #404]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 80028ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028f0:	4b64      	ldr	r3, [pc, #400]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 80028f2:	4967      	ldr	r1, [pc, #412]	; (8002a90 <HAL_RCC_OscConfig+0x624>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d100      	bne.n	8002902 <HAL_RCC_OscConfig+0x496>
 8002900:	e0bb      	b.n	8002a7a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002902:	4b60      	ldr	r3, [pc, #384]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2238      	movs	r2, #56	; 0x38
 8002908:	4013      	ands	r3, r2
 800290a:	2b10      	cmp	r3, #16
 800290c:	d100      	bne.n	8002910 <HAL_RCC_OscConfig+0x4a4>
 800290e:	e07b      	b.n	8002a08 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d156      	bne.n	80029c6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002918:	4b5a      	ldr	r3, [pc, #360]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 800291e:	495d      	ldr	r1, [pc, #372]	; (8002a94 <HAL_RCC_OscConfig+0x628>)
 8002920:	400a      	ands	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7ff f99a 	bl	8001c5c <HAL_GetTick>
 8002928:	0003      	movs	r3, r0
 800292a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292e:	f7ff f995 	bl	8001c5c <HAL_GetTick>
 8002932:	0002      	movs	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e09d      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002940:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	049b      	lsls	r3, r3, #18
 8002948:	4013      	ands	r3, r2
 800294a:	d1f0      	bne.n	800292e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294c:	4b4d      	ldr	r3, [pc, #308]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a51      	ldr	r2, [pc, #324]	; (8002a98 <HAL_RCC_OscConfig+0x62c>)
 8002952:	4013      	ands	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1a      	ldr	r2, [r3, #32]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002978:	431a      	orrs	r2, r3
 800297a:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 800297c:	430a      	orrs	r2, r1
 800297e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002980:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	0449      	lsls	r1, r1, #17
 800298a:	430a      	orrs	r2, r1
 800298c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	0549      	lsls	r1, r1, #21
 8002998:	430a      	orrs	r2, r1
 800299a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7ff f95e 	bl	8001c5c <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a6:	f7ff f959 	bl	8001c5c <HAL_GetTick>
 80029aa:	0002      	movs	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e061      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b8:	4b32      	ldr	r3, [pc, #200]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	049b      	lsls	r3, r3, #18
 80029c0:	4013      	ands	r3, r2
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x53a>
 80029c4:	e059      	b.n	8002a7a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c6:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 80029cc:	4931      	ldr	r1, [pc, #196]	; (8002a94 <HAL_RCC_OscConfig+0x628>)
 80029ce:	400a      	ands	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7ff f943 	bl	8001c5c <HAL_GetTick>
 80029d6:	0003      	movs	r3, r0
 80029d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7ff f93e 	bl	8001c5c <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e046      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ee:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	049b      	lsls	r3, r3, #18
 80029f6:	4013      	ands	r3, r2
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002a00:	4926      	ldr	r1, [pc, #152]	; (8002a9c <HAL_RCC_OscConfig+0x630>)
 8002a02:	400a      	ands	r2, r1
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	e038      	b.n	8002a7a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e033      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x618>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	401a      	ands	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d126      	bne.n	8002a76 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2270      	movs	r2, #112	; 0x70
 8002a2c:	401a      	ands	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d11f      	bne.n	8002a76 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	23fe      	movs	r3, #254	; 0xfe
 8002a3a:	01db      	lsls	r3, r3, #7
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d116      	bne.n	8002a76 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	23f8      	movs	r3, #248	; 0xf8
 8002a4c:	039b      	lsls	r3, r3, #14
 8002a4e:	401a      	ands	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d10e      	bne.n	8002a76 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	23e0      	movs	r3, #224	; 0xe0
 8002a5c:	051b      	lsls	r3, r3, #20
 8002a5e:	401a      	ands	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	0f5b      	lsrs	r3, r3, #29
 8002a6c:	075a      	lsls	r2, r3, #29
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b008      	add	sp, #32
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	00001388 	.word	0x00001388
 8002a90:	efffffff 	.word	0xefffffff
 8002a94:	feffffff 	.word	0xfeffffff
 8002a98:	11c1808c 	.word	0x11c1808c
 8002a9c:	eefefffc 	.word	0xeefefffc

08002aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0e9      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2207      	movs	r2, #7
 8002aba:	4013      	ands	r3, r2
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d91e      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b73      	ldr	r3, [pc, #460]	; (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	4393      	bics	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	4b70      	ldr	r3, [pc, #448]	; (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ad4:	f7ff f8c2 	bl	8001c5c <HAL_GetTick>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002adc:	e009      	b.n	8002af2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ade:	f7ff f8bd 	bl	8001c5c <HAL_GetTick>
 8002ae2:	0002      	movs	r2, r0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	4a6a      	ldr	r2, [pc, #424]	; (8002c94 <HAL_RCC_ClockConfig+0x1f4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0ca      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002af2:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2207      	movs	r2, #7
 8002af8:	4013      	ands	r3, r2
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1ee      	bne.n	8002ade <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2202      	movs	r2, #2
 8002b06:	4013      	ands	r3, r2
 8002b08:	d015      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	4013      	ands	r3, r2
 8002b12:	d006      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b14:	4b60      	ldr	r3, [pc, #384]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	4b5f      	ldr	r3, [pc, #380]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1a:	21e0      	movs	r1, #224	; 0xe0
 8002b1c:	01c9      	lsls	r1, r1, #7
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	4a5d      	ldr	r2, [pc, #372]	; (8002c9c <HAL_RCC_ClockConfig+0x1fc>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	4b59      	ldr	r3, [pc, #356]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002b32:	430a      	orrs	r2, r1
 8002b34:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d057      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b48:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	029b      	lsls	r3, r3, #10
 8002b50:	4013      	ands	r3, r2
 8002b52:	d12b      	bne.n	8002bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e097      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d107      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b60:	4b4d      	ldr	r3, [pc, #308]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	049b      	lsls	r3, r3, #18
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d11f      	bne.n	8002bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e08b      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b78:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4013      	ands	r3, r2
 8002b82:	d113      	bne.n	8002bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e07f      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b90:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b94:	2202      	movs	r2, #2
 8002b96:	4013      	ands	r3, r2
 8002b98:	d108      	bne.n	8002bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e074      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b9e:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e06d      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bac:	4b3a      	ldr	r3, [pc, #232]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	4393      	bics	r3, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc0:	f7ff f84c 	bl	8001c5c <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc8:	e009      	b.n	8002bde <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bca:	f7ff f847 	bl	8001c5c <HAL_GetTick>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	4a2f      	ldr	r2, [pc, #188]	; (8002c94 <HAL_RCC_ClockConfig+0x1f4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e054      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2238      	movs	r2, #56	; 0x38
 8002be4:	401a      	ands	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1ec      	bne.n	8002bca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d21e      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2207      	movs	r2, #7
 8002c04:	4393      	bics	r3, r2
 8002c06:	0019      	movs	r1, r3
 8002c08:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c10:	f7ff f824 	bl	8001c5c <HAL_GetTick>
 8002c14:	0003      	movs	r3, r0
 8002c16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c18:	e009      	b.n	8002c2e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1a:	f7ff f81f 	bl	8001c5c <HAL_GetTick>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <HAL_RCC_ClockConfig+0x1f4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e02c      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2207      	movs	r2, #7
 8002c34:	4013      	ands	r3, r2
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1ee      	bne.n	8002c1a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2204      	movs	r2, #4
 8002c42:	4013      	ands	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	4a15      	ldr	r2, [pc, #84]	; (8002ca0 <HAL_RCC_ClockConfig+0x200>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c5a:	f000 f829 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8002c5e:	0001      	movs	r1, r0
 8002c60:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_RCC_ClockConfig+0x1f8>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	220f      	movs	r2, #15
 8002c68:	401a      	ands	r2, r3
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_RCC_ClockConfig+0x204>)
 8002c6c:	0092      	lsls	r2, r2, #2
 8002c6e:	58d3      	ldr	r3, [r2, r3]
 8002c70:	221f      	movs	r2, #31
 8002c72:	4013      	ands	r3, r2
 8002c74:	000a      	movs	r2, r1
 8002c76:	40da      	lsrs	r2, r3
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_ClockConfig+0x208>)
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_RCC_ClockConfig+0x20c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0018      	movs	r0, r3
 8002c82:	f7fe ff8f 	bl	8001ba4 <HAL_InitTick>
 8002c86:	0003      	movs	r3, r0
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b004      	add	sp, #16
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40022000 	.word	0x40022000
 8002c94:	00001388 	.word	0x00001388
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	fffff0ff 	.word	0xfffff0ff
 8002ca0:	ffff8fff 	.word	0xffff8fff
 8002ca4:	08005e30 	.word	0x08005e30
 8002ca8:	20000008 	.word	0x20000008
 8002cac:	2000000c 	.word	0x2000000c

08002cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb6:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2238      	movs	r2, #56	; 0x38
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d10f      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002cc0:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0adb      	lsrs	r3, r3, #11
 8002cc6:	2207      	movs	r2, #7
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2201      	movs	r2, #1
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	0013      	movs	r3, r2
 8002cd0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002cd2:	6839      	ldr	r1, [r7, #0]
 8002cd4:	4835      	ldr	r0, [pc, #212]	; (8002dac <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cd6:	f7fd fa15 	bl	8000104 <__udivsi3>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	e05d      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce0:	4b31      	ldr	r3, [pc, #196]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2238      	movs	r2, #56	; 0x38
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d102      	bne.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cec:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	e054      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2238      	movs	r2, #56	; 0x38
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d138      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2203      	movs	r2, #3
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d08:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	2207      	movs	r2, #7
 8002d10:	4013      	ands	r3, r2
 8002d12:	3301      	adds	r3, #1
 8002d14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d10d      	bne.n	8002d38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	4824      	ldr	r0, [pc, #144]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002d20:	f7fd f9f0 	bl	8000104 <__udivsi3>
 8002d24:	0003      	movs	r3, r0
 8002d26:	0019      	movs	r1, r3
 8002d28:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	227f      	movs	r2, #127	; 0x7f
 8002d30:	4013      	ands	r3, r2
 8002d32:	434b      	muls	r3, r1
 8002d34:	617b      	str	r3, [r7, #20]
        break;
 8002d36:	e00d      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	481c      	ldr	r0, [pc, #112]	; (8002dac <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d3c:	f7fd f9e2 	bl	8000104 <__udivsi3>
 8002d40:	0003      	movs	r3, r0
 8002d42:	0019      	movs	r1, r3
 8002d44:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	227f      	movs	r2, #127	; 0x7f
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	434b      	muls	r3, r1
 8002d50:	617b      	str	r3, [r7, #20]
        break;
 8002d52:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002d54:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0f5b      	lsrs	r3, r3, #29
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	3301      	adds	r3, #1
 8002d60:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	6978      	ldr	r0, [r7, #20]
 8002d66:	f7fd f9cd 	bl	8000104 <__udivsi3>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	e015      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d70:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2238      	movs	r2, #56	; 0x38
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d103      	bne.n	8002d84 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2238      	movs	r2, #56	; 0x38
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b18      	cmp	r3, #24
 8002d8e:	d103      	bne.n	8002d98 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d90:	23fa      	movs	r3, #250	; 0xfa
 8002d92:	01db      	lsls	r3, r3, #7
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	e001      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d9c:	693b      	ldr	r3, [r7, #16]
}
 8002d9e:	0018      	movs	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b006      	add	sp, #24
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	40021000 	.word	0x40021000
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	007a1200 	.word	0x007a1200

08002db4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db8:	4b02      	ldr	r3, [pc, #8]	; (8002dc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	20000008 	.word	0x20000008

08002dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc8:	b5b0      	push	{r4, r5, r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002dcc:	f7ff fff2 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dd0:	0004      	movs	r4, r0
 8002dd2:	f7ff fb3f 	bl	8002454 <LL_RCC_GetAPB1Prescaler>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	0b1a      	lsrs	r2, r3, #12
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ddc:	0092      	lsls	r2, r2, #2
 8002dde:	58d3      	ldr	r3, [r2, r3]
 8002de0:	221f      	movs	r2, #31
 8002de2:	4013      	ands	r3, r2
 8002de4:	40dc      	lsrs	r4, r3
 8002de6:	0023      	movs	r3, r4
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bdb0      	pop	{r4, r5, r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	08005e70 	.word	0x08005e70

08002df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002dfc:	2313      	movs	r3, #19
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e04:	2312      	movs	r3, #18
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	029b      	lsls	r3, r3, #10
 8002e14:	4013      	ands	r3, r2
 8002e16:	d100      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002e18:	e0a3      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2011      	movs	r0, #17
 8002e1c:	183b      	adds	r3, r7, r0
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e22:	4ba5      	ldr	r3, [pc, #660]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	055b      	lsls	r3, r3, #21
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d110      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	4ba2      	ldr	r3, [pc, #648]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e32:	4ba1      	ldr	r3, [pc, #644]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	0549      	lsls	r1, r1, #21
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e3c:	4b9e      	ldr	r3, [pc, #632]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	055b      	lsls	r3, r3, #21
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4a:	183b      	adds	r3, r7, r0
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e50:	4b9a      	ldr	r3, [pc, #616]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b99      	ldr	r3, [pc, #612]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	0049      	lsls	r1, r1, #1
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e5e:	f7fe fefd 	bl	8001c5c <HAL_GetTick>
 8002e62:	0003      	movs	r3, r0
 8002e64:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e66:	e00b      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e68:	f7fe fef8 	bl	8001c5c <HAL_GetTick>
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d904      	bls.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e76:	2313      	movs	r3, #19
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	701a      	strb	r2, [r3, #0]
        break;
 8002e7e:	e005      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e80:	4b8e      	ldr	r3, [pc, #568]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d0ed      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e8c:	2313      	movs	r3, #19
 8002e8e:	18fb      	adds	r3, r7, r3
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d154      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e96:	4b88      	ldr	r3, [pc, #544]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e9a:	23c0      	movs	r3, #192	; 0xc0
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d019      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d014      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eb2:	4b81      	ldr	r3, [pc, #516]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb6:	4a82      	ldr	r2, [pc, #520]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ebc:	4b7e      	ldr	r3, [pc, #504]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ebe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ec0:	4b7d      	ldr	r3, [pc, #500]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ec2:	2180      	movs	r1, #128	; 0x80
 8002ec4:	0249      	lsls	r1, r1, #9
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eca:	4b7b      	ldr	r3, [pc, #492]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ecc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ece:	4b7a      	ldr	r3, [pc, #488]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ed0:	497c      	ldr	r1, [pc, #496]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002ed2:	400a      	ands	r2, r1
 8002ed4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ed6:	4b78      	ldr	r3, [pc, #480]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d016      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe feba 	bl	8001c5c <HAL_GetTick>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eec:	e00c      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fe feb5 	bl	8001c5c <HAL_GetTick>
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	4a73      	ldr	r2, [pc, #460]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d904      	bls.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002efe:	2313      	movs	r3, #19
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	2203      	movs	r2, #3
 8002f04:	701a      	strb	r2, [r3, #0]
            break;
 8002f06:	e004      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f08:	4b6b      	ldr	r3, [pc, #428]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d0ed      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002f12:	2313      	movs	r3, #19
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f1c:	4b66      	ldr	r3, [pc, #408]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	4a67      	ldr	r2, [pc, #412]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f2a:	4b63      	ldr	r3, [pc, #396]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f30:	e00c      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f32:	2312      	movs	r3, #18
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	2213      	movs	r2, #19
 8002f38:	18ba      	adds	r2, r7, r2
 8002f3a:	7812      	ldrb	r2, [r2, #0]
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	e005      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f40:	2312      	movs	r3, #18
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	2213      	movs	r2, #19
 8002f46:	18ba      	adds	r2, r7, r2
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f4c:	2311      	movs	r3, #17
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f56:	4b58      	ldr	r3, [pc, #352]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f5a:	4b57      	ldr	r3, [pc, #348]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f5c:	495b      	ldr	r1, [pc, #364]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002f5e:	400a      	ands	r2, r1
 8002f60:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2201      	movs	r2, #1
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f6c:	4b52      	ldr	r3, [pc, #328]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	2203      	movs	r2, #3
 8002f72:	4393      	bics	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	4b4f      	ldr	r3, [pc, #316]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2210      	movs	r2, #16
 8002f86:	4013      	ands	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f8a:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	4a50      	ldr	r2, [pc, #320]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002faa:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fae:	4a49      	ldr	r2, [pc, #292]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fca:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	4a42      	ldr	r2, [pc, #264]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699a      	ldr	r2, [r3, #24]
 8002fd8:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe8:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	4a3b      	ldr	r2, [pc, #236]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	4b30      	ldr	r3, [pc, #192]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	01db      	lsls	r3, r3, #7
 8003004:	4013      	ands	r3, r2
 8003006:	d015      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003008:	4b2b      	ldr	r3, [pc, #172]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	0899      	lsrs	r1, r3, #2
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003016:	430a      	orrs	r2, r1
 8003018:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	05db      	lsls	r3, r3, #23
 8003022:	429a      	cmp	r2, r3
 8003024:	d106      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003026:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	0249      	lsls	r1, r1, #9
 8003030:	430a      	orrs	r2, r1
 8003032:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	039b      	lsls	r3, r3, #14
 800303c:	4013      	ands	r3, r2
 800303e:	d016      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	4a26      	ldr	r2, [pc, #152]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003046:	4013      	ands	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003050:	430a      	orrs	r2, r1
 8003052:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1a      	ldr	r2, [r3, #32]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	03db      	lsls	r3, r3, #15
 800305c:	429a      	cmp	r2, r3
 800305e:	d106      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003060:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003066:	2180      	movs	r1, #128	; 0x80
 8003068:	0449      	lsls	r1, r1, #17
 800306a:	430a      	orrs	r2, r1
 800306c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	4013      	ands	r3, r2
 8003078:	d016      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	4a19      	ldr	r2, [pc, #100]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003080:	4013      	ands	r3, r2
 8003082:	0019      	movs	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800308a:	430a      	orrs	r2, r1
 800308c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	01db      	lsls	r3, r3, #7
 8003096:	429a      	cmp	r2, r3
 8003098:	d106      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030a0:	2180      	movs	r1, #128	; 0x80
 80030a2:	0249      	lsls	r1, r1, #9
 80030a4:	430a      	orrs	r2, r1
 80030a6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80030a8:	2312      	movs	r3, #18
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	781b      	ldrb	r3, [r3, #0]
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b006      	add	sp, #24
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40007000 	.word	0x40007000
 80030c0:	fffffcff 	.word	0xfffffcff
 80030c4:	fffeffff 	.word	0xfffeffff
 80030c8:	00001388 	.word	0x00001388
 80030cc:	efffffff 	.word	0xefffffff
 80030d0:	fffff3ff 	.word	0xfffff3ff
 80030d4:	fff3ffff 	.word	0xfff3ffff
 80030d8:	ffcfffff 	.word	0xffcfffff
 80030dc:	ffffcfff 	.word	0xffffcfff
 80030e0:	ffbfffff 	.word	0xffbfffff
 80030e4:	ffff3fff 	.word	0xffff3fff

080030e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0a8      	b.n	800324c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	2382      	movs	r3, #130	; 0x82
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	429a      	cmp	r2, r3
 800310c:	d009      	beq.n	8003122 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	61da      	str	r2, [r3, #28]
 8003114:	e005      	b.n	8003122 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	225d      	movs	r2, #93	; 0x5d
 800312c:	5c9b      	ldrb	r3, [r3, r2]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d107      	bne.n	8003144 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	225c      	movs	r2, #92	; 0x5c
 8003138:	2100      	movs	r1, #0
 800313a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	0018      	movs	r0, r3
 8003140:	f7fe fa8c 	bl	800165c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	225d      	movs	r2, #93	; 0x5d
 8003148:	2102      	movs	r1, #2
 800314a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2140      	movs	r1, #64	; 0x40
 8003158:	438a      	bics	r2, r1
 800315a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	23e0      	movs	r3, #224	; 0xe0
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	429a      	cmp	r2, r3
 8003166:	d902      	bls.n	800316e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e002      	b.n	8003174 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	015b      	lsls	r3, r3, #5
 8003172:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	23f0      	movs	r3, #240	; 0xf0
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	429a      	cmp	r2, r3
 800317e:	d008      	beq.n	8003192 <HAL_SPI_Init+0xaa>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	23e0      	movs	r3, #224	; 0xe0
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	429a      	cmp	r2, r3
 800318a:	d002      	beq.n	8003192 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	2382      	movs	r3, #130	; 0x82
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	401a      	ands	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6899      	ldr	r1, [r3, #8]
 80031a0:	2384      	movs	r3, #132	; 0x84
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	400b      	ands	r3, r1
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2102      	movs	r1, #2
 80031ae:	400b      	ands	r3, r1
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	2101      	movs	r1, #1
 80031b8:	400b      	ands	r3, r1
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6999      	ldr	r1, [r3, #24]
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	400b      	ands	r3, r1
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2138      	movs	r1, #56	; 0x38
 80031ce:	400b      	ands	r3, r1
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	2180      	movs	r1, #128	; 0x80
 80031d8:	400b      	ands	r3, r1
 80031da:	431a      	orrs	r2, r3
 80031dc:	0011      	movs	r1, r2
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	019b      	lsls	r3, r3, #6
 80031e6:	401a      	ands	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	2204      	movs	r2, #4
 80031f8:	401a      	ands	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	2110      	movs	r1, #16
 8003200:	400b      	ands	r3, r1
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	2108      	movs	r1, #8
 800320a:	400b      	ands	r3, r1
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68d9      	ldr	r1, [r3, #12]
 8003212:	23f0      	movs	r3, #240	; 0xf0
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	400b      	ands	r3, r1
 8003218:	431a      	orrs	r2, r3
 800321a:	0011      	movs	r1, r2
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	015b      	lsls	r3, r3, #5
 8003222:	401a      	ands	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4907      	ldr	r1, [pc, #28]	; (8003254 <HAL_SPI_Init+0x16c>)
 8003238:	400a      	ands	r2, r1
 800323a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	225d      	movs	r2, #93	; 0x5d
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	b004      	add	sp, #16
 8003252:	bd80      	pop	{r7, pc}
 8003254:	fffff7ff 	.word	0xfffff7ff

08003258 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	1dbb      	adds	r3, r7, #6
 8003266:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003268:	231f      	movs	r3, #31
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	225c      	movs	r2, #92	; 0x5c
 8003274:	5c9b      	ldrb	r3, [r3, r2]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_SPI_Transmit+0x26>
 800327a:	2302      	movs	r3, #2
 800327c:	e147      	b.n	800350e <HAL_SPI_Transmit+0x2b6>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	225c      	movs	r2, #92	; 0x5c
 8003282:	2101      	movs	r1, #1
 8003284:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003286:	f7fe fce9 	bl	8001c5c <HAL_GetTick>
 800328a:	0003      	movs	r3, r0
 800328c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800328e:	2316      	movs	r3, #22
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	1dba      	adds	r2, r7, #6
 8003294:	8812      	ldrh	r2, [r2, #0]
 8003296:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	225d      	movs	r2, #93	; 0x5d
 800329c:	5c9b      	ldrb	r3, [r3, r2]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d004      	beq.n	80032ae <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80032a4:	231f      	movs	r3, #31
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	2202      	movs	r2, #2
 80032aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80032ac:	e128      	b.n	8003500 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_SPI_Transmit+0x64>
 80032b4:	1dbb      	adds	r3, r7, #6
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d104      	bne.n	80032c6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80032bc:	231f      	movs	r3, #31
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	2201      	movs	r2, #1
 80032c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80032c4:	e11c      	b.n	8003500 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	225d      	movs	r2, #93	; 0x5d
 80032ca:	2103      	movs	r1, #3
 80032cc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1dba      	adds	r2, r7, #6
 80032de:	8812      	ldrh	r2, [r2, #0]
 80032e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1dba      	adds	r2, r7, #6
 80032e6:	8812      	ldrh	r2, [r2, #0]
 80032e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2244      	movs	r2, #68	; 0x44
 80032f4:	2100      	movs	r1, #0
 80032f6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2246      	movs	r2, #70	; 0x46
 80032fc:	2100      	movs	r1, #0
 80032fe:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	429a      	cmp	r2, r3
 8003316:	d110      	bne.n	800333a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2140      	movs	r1, #64	; 0x40
 8003324:	438a      	bics	r2, r1
 8003326:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2180      	movs	r1, #128	; 0x80
 8003334:	01c9      	lsls	r1, r1, #7
 8003336:	430a      	orrs	r2, r1
 8003338:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2240      	movs	r2, #64	; 0x40
 8003342:	4013      	ands	r3, r2
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d007      	beq.n	8003358 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2140      	movs	r1, #64	; 0x40
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	23e0      	movs	r3, #224	; 0xe0
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	429a      	cmp	r2, r3
 8003362:	d952      	bls.n	800340a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <HAL_SPI_Transmit+0x11e>
 800336c:	2316      	movs	r3, #22
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d143      	bne.n	80033fe <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	881a      	ldrh	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	1c9a      	adds	r2, r3, #2
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800339a:	e030      	b.n	80033fe <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2202      	movs	r2, #2
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d112      	bne.n	80033d0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	881a      	ldrh	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	1c9a      	adds	r2, r3, #2
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033ce:	e016      	b.n	80033fe <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033d0:	f7fe fc44 	bl	8001c5c <HAL_GetTick>
 80033d4:	0002      	movs	r2, r0
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d802      	bhi.n	80033e6 <HAL_SPI_Transmit+0x18e>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	3301      	adds	r3, #1
 80033e4:	d102      	bne.n	80033ec <HAL_SPI_Transmit+0x194>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d108      	bne.n	80033fe <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80033ec:	231f      	movs	r3, #31
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	2203      	movs	r2, #3
 80033f2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	225d      	movs	r2, #93	; 0x5d
 80033f8:	2101      	movs	r1, #1
 80033fa:	5499      	strb	r1, [r3, r2]
          goto error;
 80033fc:	e080      	b.n	8003500 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1c9      	bne.n	800339c <HAL_SPI_Transmit+0x144>
 8003408:	e053      	b.n	80034b2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <HAL_SPI_Transmit+0x1c4>
 8003412:	2316      	movs	r3, #22
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d145      	bne.n	80034a8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	330c      	adds	r3, #12
 8003426:	7812      	ldrb	r2, [r2, #0]
 8003428:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003442:	e031      	b.n	80034a8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2202      	movs	r2, #2
 800344c:	4013      	ands	r3, r2
 800344e:	2b02      	cmp	r3, #2
 8003450:	d113      	bne.n	800347a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	330c      	adds	r3, #12
 800345c:	7812      	ldrb	r2, [r2, #0]
 800345e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003478:	e016      	b.n	80034a8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800347a:	f7fe fbef 	bl	8001c5c <HAL_GetTick>
 800347e:	0002      	movs	r2, r0
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d802      	bhi.n	8003490 <HAL_SPI_Transmit+0x238>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	3301      	adds	r3, #1
 800348e:	d102      	bne.n	8003496 <HAL_SPI_Transmit+0x23e>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003496:	231f      	movs	r3, #31
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	2203      	movs	r2, #3
 800349c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	225d      	movs	r2, #93	; 0x5d
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]
          goto error;
 80034a6:	e02b      	b.n	8003500 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1c8      	bne.n	8003444 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	6839      	ldr	r1, [r7, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f000 fcef 	bl	8003e9c <SPI_EndRxTxTransaction>
 80034be:	1e03      	subs	r3, r0, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034d0:	2300      	movs	r3, #0
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80034ee:	231f      	movs	r3, #31
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2201      	movs	r2, #1
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	e003      	b.n	8003500 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	225d      	movs	r2, #93	; 0x5d
 80034fc:	2101      	movs	r1, #1
 80034fe:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	225c      	movs	r2, #92	; 0x5c
 8003504:	2100      	movs	r1, #0
 8003506:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003508:	231f      	movs	r3, #31
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	781b      	ldrb	r3, [r3, #0]
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b008      	add	sp, #32
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	1dbb      	adds	r3, r7, #6
 8003526:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003528:	2117      	movs	r1, #23
 800352a:	187b      	adds	r3, r7, r1
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	225d      	movs	r2, #93	; 0x5d
 8003534:	5c9b      	ldrb	r3, [r3, r2]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d003      	beq.n	8003544 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800353c:	187b      	adds	r3, r7, r1
 800353e:	2202      	movs	r2, #2
 8003540:	701a      	strb	r2, [r3, #0]
    goto error;
 8003542:	e12b      	b.n	800379c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	2382      	movs	r3, #130	; 0x82
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	429a      	cmp	r2, r3
 800354e:	d113      	bne.n	8003578 <HAL_SPI_Receive+0x60>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10f      	bne.n	8003578 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	225d      	movs	r2, #93	; 0x5d
 800355c:	2104      	movs	r1, #4
 800355e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003560:	1dbb      	adds	r3, r7, #6
 8003562:	881c      	ldrh	r4, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	0023      	movs	r3, r4
 8003570:	f000 f924 	bl	80037bc <HAL_SPI_TransmitReceive>
 8003574:	0003      	movs	r3, r0
 8003576:	e118      	b.n	80037aa <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	225c      	movs	r2, #92	; 0x5c
 800357c:	5c9b      	ldrb	r3, [r3, r2]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_SPI_Receive+0x6e>
 8003582:	2302      	movs	r3, #2
 8003584:	e111      	b.n	80037aa <HAL_SPI_Receive+0x292>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	225c      	movs	r2, #92	; 0x5c
 800358a:	2101      	movs	r1, #1
 800358c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800358e:	f7fe fb65 	bl	8001c5c <HAL_GetTick>
 8003592:	0003      	movs	r3, r0
 8003594:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_SPI_Receive+0x8c>
 800359c:	1dbb      	adds	r3, r7, #6
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d104      	bne.n	80035ae <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80035a4:	2317      	movs	r3, #23
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80035ac:	e0f6      	b.n	800379c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	225d      	movs	r2, #93	; 0x5d
 80035b2:	2104      	movs	r1, #4
 80035b4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1dba      	adds	r2, r7, #6
 80035c6:	2144      	movs	r1, #68	; 0x44
 80035c8:	8812      	ldrh	r2, [r2, #0]
 80035ca:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1dba      	adds	r2, r7, #6
 80035d0:	2146      	movs	r1, #70	; 0x46
 80035d2:	8812      	ldrh	r2, [r2, #0]
 80035d4:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	23e0      	movs	r3, #224	; 0xe0
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d908      	bls.n	8003612 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	496a      	ldr	r1, [pc, #424]	; (80037b4 <HAL_SPI_Receive+0x29c>)
 800360c:	400a      	ands	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
 8003610:	e008      	b.n	8003624 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	0149      	lsls	r1, r1, #5
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	429a      	cmp	r2, r3
 800362e:	d10f      	bne.n	8003650 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2140      	movs	r1, #64	; 0x40
 800363c:	438a      	bics	r2, r1
 800363e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	495b      	ldr	r1, [pc, #364]	; (80037b8 <HAL_SPI_Receive+0x2a0>)
 800364c:	400a      	ands	r2, r1
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2240      	movs	r2, #64	; 0x40
 8003658:	4013      	ands	r3, r2
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d007      	beq.n	800366e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2140      	movs	r1, #64	; 0x40
 800366a:	430a      	orrs	r2, r1
 800366c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	23e0      	movs	r3, #224	; 0xe0
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	429a      	cmp	r2, r3
 8003678:	d900      	bls.n	800367c <HAL_SPI_Receive+0x164>
 800367a:	e071      	b.n	8003760 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800367c:	e035      	b.n	80036ea <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2201      	movs	r2, #1
 8003686:	4013      	ands	r3, r2
 8003688:	2b01      	cmp	r3, #1
 800368a:	d117      	bne.n	80036bc <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	001a      	movs	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	7812      	ldrb	r2, [r2, #0]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2246      	movs	r2, #70	; 0x46
 80036ac:	5a9b      	ldrh	r3, [r3, r2]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b299      	uxth	r1, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2246      	movs	r2, #70	; 0x46
 80036b8:	5299      	strh	r1, [r3, r2]
 80036ba:	e016      	b.n	80036ea <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036bc:	f7fe face 	bl	8001c5c <HAL_GetTick>
 80036c0:	0002      	movs	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d802      	bhi.n	80036d2 <HAL_SPI_Receive+0x1ba>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	3301      	adds	r3, #1
 80036d0:	d102      	bne.n	80036d8 <HAL_SPI_Receive+0x1c0>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d108      	bne.n	80036ea <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80036d8:	2317      	movs	r3, #23
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	2203      	movs	r2, #3
 80036de:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	225d      	movs	r2, #93	; 0x5d
 80036e4:	2101      	movs	r1, #1
 80036e6:	5499      	strb	r1, [r3, r2]
          goto error;
 80036e8:	e058      	b.n	800379c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2246      	movs	r2, #70	; 0x46
 80036ee:	5a9b      	ldrh	r3, [r3, r2]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1c3      	bne.n	800367e <HAL_SPI_Receive+0x166>
 80036f6:	e039      	b.n	800376c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2201      	movs	r2, #1
 8003700:	4013      	ands	r3, r2
 8003702:	2b01      	cmp	r3, #1
 8003704:	d115      	bne.n	8003732 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	b292      	uxth	r2, r2
 8003712:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	1c9a      	adds	r2, r3, #2
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2246      	movs	r2, #70	; 0x46
 8003722:	5a9b      	ldrh	r3, [r3, r2]
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b299      	uxth	r1, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2246      	movs	r2, #70	; 0x46
 800372e:	5299      	strh	r1, [r3, r2]
 8003730:	e016      	b.n	8003760 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003732:	f7fe fa93 	bl	8001c5c <HAL_GetTick>
 8003736:	0002      	movs	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d802      	bhi.n	8003748 <HAL_SPI_Receive+0x230>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	d102      	bne.n	800374e <HAL_SPI_Receive+0x236>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d108      	bne.n	8003760 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800374e:	2317      	movs	r3, #23
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	2203      	movs	r2, #3
 8003754:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	225d      	movs	r2, #93	; 0x5d
 800375a:	2101      	movs	r1, #1
 800375c:	5499      	strb	r1, [r3, r2]
          goto error;
 800375e:	e01d      	b.n	800379c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2246      	movs	r2, #70	; 0x46
 8003764:	5a9b      	ldrh	r3, [r3, r2]
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1c5      	bne.n	80036f8 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	6839      	ldr	r1, [r7, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	0018      	movs	r0, r3
 8003774:	f000 fb34 	bl	8003de0 <SPI_EndRxTransaction>
 8003778:	1e03      	subs	r3, r0, #0
 800377a:	d002      	beq.n	8003782 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800378a:	2317      	movs	r3, #23
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e003      	b.n	800379c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	225d      	movs	r2, #93	; 0x5d
 8003798:	2101      	movs	r1, #1
 800379a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	225c      	movs	r2, #92	; 0x5c
 80037a0:	2100      	movs	r1, #0
 80037a2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80037a4:	2317      	movs	r3, #23
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	781b      	ldrb	r3, [r3, #0]
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b007      	add	sp, #28
 80037b0:	bd90      	pop	{r4, r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	ffffefff 	.word	0xffffefff
 80037b8:	ffffbfff 	.word	0xffffbfff

080037bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	001a      	movs	r2, r3
 80037ca:	1cbb      	adds	r3, r7, #2
 80037cc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037ce:	2301      	movs	r3, #1
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037d2:	2323      	movs	r3, #35	; 0x23
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	225c      	movs	r2, #92	; 0x5c
 80037de:	5c9b      	ldrb	r3, [r3, r2]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x2c>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e1c4      	b.n	8003b72 <HAL_SPI_TransmitReceive+0x3b6>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	225c      	movs	r2, #92	; 0x5c
 80037ec:	2101      	movs	r1, #1
 80037ee:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037f0:	f7fe fa34 	bl	8001c5c <HAL_GetTick>
 80037f4:	0003      	movs	r3, r0
 80037f6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037f8:	201b      	movs	r0, #27
 80037fa:	183b      	adds	r3, r7, r0
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	215d      	movs	r1, #93	; 0x5d
 8003800:	5c52      	ldrb	r2, [r2, r1]
 8003802:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800380a:	2312      	movs	r3, #18
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	1cba      	adds	r2, r7, #2
 8003810:	8812      	ldrh	r2, [r2, #0]
 8003812:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003814:	183b      	adds	r3, r7, r0
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d011      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x84>
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	2382      	movs	r3, #130	; 0x82
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	429a      	cmp	r2, r3
 8003824:	d107      	bne.n	8003836 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d103      	bne.n	8003836 <HAL_SPI_TransmitReceive+0x7a>
 800382e:	183b      	adds	r3, r7, r0
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b04      	cmp	r3, #4
 8003834:	d004      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003836:	2323      	movs	r3, #35	; 0x23
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	2202      	movs	r2, #2
 800383c:	701a      	strb	r2, [r3, #0]
    goto error;
 800383e:	e191      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d006      	beq.n	8003854 <HAL_SPI_TransmitReceive+0x98>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_SPI_TransmitReceive+0x98>
 800384c:	1cbb      	adds	r3, r7, #2
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003854:	2323      	movs	r3, #35	; 0x23
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
    goto error;
 800385c:	e182      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	225d      	movs	r2, #93	; 0x5d
 8003862:	5c9b      	ldrb	r3, [r3, r2]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b04      	cmp	r3, #4
 8003868:	d003      	beq.n	8003872 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	225d      	movs	r2, #93	; 0x5d
 800386e:	2105      	movs	r1, #5
 8003870:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1cba      	adds	r2, r7, #2
 8003882:	2146      	movs	r1, #70	; 0x46
 8003884:	8812      	ldrh	r2, [r2, #0]
 8003886:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1cba      	adds	r2, r7, #2
 800388c:	2144      	movs	r1, #68	; 0x44
 800388e:	8812      	ldrh	r2, [r2, #0]
 8003890:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1cba      	adds	r2, r7, #2
 800389c:	8812      	ldrh	r2, [r2, #0]
 800389e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1cba      	adds	r2, r7, #2
 80038a4:	8812      	ldrh	r2, [r2, #0]
 80038a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	23e0      	movs	r3, #224	; 0xe0
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	429a      	cmp	r2, r3
 80038be:	d908      	bls.n	80038d2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	49ac      	ldr	r1, [pc, #688]	; (8003b7c <HAL_SPI_TransmitReceive+0x3c0>)
 80038cc:	400a      	ands	r2, r1
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	e008      	b.n	80038e4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	0149      	lsls	r1, r1, #5
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2240      	movs	r2, #64	; 0x40
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b40      	cmp	r3, #64	; 0x40
 80038f0:	d007      	beq.n	8003902 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2140      	movs	r1, #64	; 0x40
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	23e0      	movs	r3, #224	; 0xe0
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	429a      	cmp	r2, r3
 800390c:	d800      	bhi.n	8003910 <HAL_SPI_TransmitReceive+0x154>
 800390e:	e083      	b.n	8003a18 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_SPI_TransmitReceive+0x168>
 8003918:	2312      	movs	r3, #18
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d000      	beq.n	8003924 <HAL_SPI_TransmitReceive+0x168>
 8003922:	e06d      	b.n	8003a00 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	881a      	ldrh	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	1c9a      	adds	r2, r3, #2
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003948:	e05a      	b.n	8003a00 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2202      	movs	r2, #2
 8003952:	4013      	ands	r3, r2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d11b      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x1d4>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d016      	beq.n	8003990 <HAL_SPI_TransmitReceive+0x1d4>
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	2b01      	cmp	r3, #1
 8003966:	d113      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	881a      	ldrh	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	1c9a      	adds	r2, r3, #2
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2201      	movs	r2, #1
 8003998:	4013      	ands	r3, r2
 800399a:	2b01      	cmp	r3, #1
 800399c:	d11c      	bne.n	80039d8 <HAL_SPI_TransmitReceive+0x21c>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2246      	movs	r2, #70	; 0x46
 80039a2:	5a9b      	ldrh	r3, [r3, r2]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d016      	beq.n	80039d8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	b292      	uxth	r2, r2
 80039b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	1c9a      	adds	r2, r3, #2
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2246      	movs	r2, #70	; 0x46
 80039c6:	5a9b      	ldrh	r3, [r3, r2]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b299      	uxth	r1, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2246      	movs	r2, #70	; 0x46
 80039d2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039d4:	2301      	movs	r3, #1
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039d8:	f7fe f940 	bl	8001c5c <HAL_GetTick>
 80039dc:	0002      	movs	r2, r0
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d80b      	bhi.n	8003a00 <HAL_SPI_TransmitReceive+0x244>
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	3301      	adds	r3, #1
 80039ec:	d008      	beq.n	8003a00 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80039ee:	2323      	movs	r3, #35	; 0x23
 80039f0:	18fb      	adds	r3, r7, r3
 80039f2:	2203      	movs	r2, #3
 80039f4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	225d      	movs	r2, #93	; 0x5d
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]
        goto error;
 80039fe:	e0b1      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d19f      	bne.n	800394a <HAL_SPI_TransmitReceive+0x18e>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2246      	movs	r2, #70	; 0x46
 8003a0e:	5a9b      	ldrh	r3, [r3, r2]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d199      	bne.n	800394a <HAL_SPI_TransmitReceive+0x18e>
 8003a16:	e089      	b.n	8003b2c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_SPI_TransmitReceive+0x270>
 8003a20:	2312      	movs	r3, #18
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d000      	beq.n	8003a2c <HAL_SPI_TransmitReceive+0x270>
 8003a2a:	e074      	b.n	8003b16 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	7812      	ldrb	r2, [r2, #0]
 8003a38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a52:	e060      	b.n	8003b16 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d11c      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x2e0>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d017      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x2e0>
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d114      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d11e      	bne.n	8003ae8 <HAL_SPI_TransmitReceive+0x32c>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2246      	movs	r2, #70	; 0x46
 8003aae:	5a9b      	ldrh	r3, [r3, r2]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d018      	beq.n	8003ae8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	001a      	movs	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	7812      	ldrb	r2, [r2, #0]
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2246      	movs	r2, #70	; 0x46
 8003ad6:	5a9b      	ldrh	r3, [r3, r2]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b299      	uxth	r1, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2246      	movs	r2, #70	; 0x46
 8003ae2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ae8:	f7fe f8b8 	bl	8001c5c <HAL_GetTick>
 8003aec:	0002      	movs	r2, r0
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d802      	bhi.n	8003afe <HAL_SPI_TransmitReceive+0x342>
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	3301      	adds	r3, #1
 8003afc:	d102      	bne.n	8003b04 <HAL_SPI_TransmitReceive+0x348>
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003b04:	2323      	movs	r3, #35	; 0x23
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	2203      	movs	r2, #3
 8003b0a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	225d      	movs	r2, #93	; 0x5d
 8003b10:	2101      	movs	r1, #1
 8003b12:	5499      	strb	r1, [r3, r2]
        goto error;
 8003b14:	e026      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d199      	bne.n	8003a54 <HAL_SPI_TransmitReceive+0x298>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2246      	movs	r2, #70	; 0x46
 8003b24:	5a9b      	ldrh	r3, [r3, r2]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d193      	bne.n	8003a54 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 f9b2 	bl	8003e9c <SPI_EndRxTxTransaction>
 8003b38:	1e03      	subs	r3, r0, #0
 8003b3a:	d006      	beq.n	8003b4a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003b3c:	2323      	movs	r3, #35	; 0x23
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d004      	beq.n	8003b5c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003b52:	2323      	movs	r3, #35	; 0x23
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	2201      	movs	r2, #1
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	e003      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	225d      	movs	r2, #93	; 0x5d
 8003b60:	2101      	movs	r1, #1
 8003b62:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	225c      	movs	r2, #92	; 0x5c
 8003b68:	2100      	movs	r1, #0
 8003b6a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003b6c:	2323      	movs	r3, #35	; 0x23
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	781b      	ldrb	r3, [r3, #0]
}
 8003b72:	0018      	movs	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b00a      	add	sp, #40	; 0x28
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	ffffefff 	.word	0xffffefff

08003b80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	1dfb      	adds	r3, r7, #7
 8003b8e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b90:	f7fe f864 	bl	8001c5c <HAL_GetTick>
 8003b94:	0002      	movs	r2, r0
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	18d3      	adds	r3, r2, r3
 8003b9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ba0:	f7fe f85c 	bl	8001c5c <HAL_GetTick>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ba8:	4b3a      	ldr	r3, [pc, #232]	; (8003c94 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	015b      	lsls	r3, r3, #5
 8003bae:	0d1b      	lsrs	r3, r3, #20
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	4353      	muls	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bb6:	e058      	b.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	d055      	beq.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bbe:	f7fe f84d 	bl	8001c5c <HAL_GetTick>
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d902      	bls.n	8003bd4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d142      	bne.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	21e0      	movs	r1, #224	; 0xe0
 8003be0:	438a      	bics	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	2382      	movs	r3, #130	; 0x82
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d113      	bne.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d005      	beq.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d107      	bne.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2140      	movs	r1, #64	; 0x40
 8003c14:	438a      	bics	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	019b      	lsls	r3, r3, #6
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d110      	bne.n	8003c46 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	491a      	ldr	r1, [pc, #104]	; (8003c98 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003c30:	400a      	ands	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2180      	movs	r1, #128	; 0x80
 8003c40:	0189      	lsls	r1, r1, #6
 8003c42:	430a      	orrs	r2, r1
 8003c44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	225d      	movs	r2, #93	; 0x5d
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	225c      	movs	r2, #92	; 0x5c
 8003c52:	2100      	movs	r1, #0
 8003c54:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e017      	b.n	8003c8a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	4013      	ands	r3, r2
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	425a      	negs	r2, r3
 8003c7a:	4153      	adcs	r3, r2
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	001a      	movs	r2, r3
 8003c80:	1dfb      	adds	r3, r7, #7
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d197      	bne.n	8003bb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b008      	add	sp, #32
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	20000008 	.word	0x20000008
 8003c98:	ffffdfff 	.word	0xffffdfff

08003c9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003caa:	2317      	movs	r3, #23
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cb2:	f7fd ffd3 	bl	8001c5c <HAL_GetTick>
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	18d3      	adds	r3, r2, r3
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003cc2:	f7fd ffcb 	bl	8001c5c <HAL_GetTick>
 8003cc6:	0003      	movs	r3, r0
 8003cc8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cd2:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	0013      	movs	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	189b      	adds	r3, r3, r2
 8003cdc:	00da      	lsls	r2, r3, #3
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	0d1b      	lsrs	r3, r3, #20
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	4353      	muls	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ce8:	e068      	b.n	8003dbc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	23c0      	movs	r3, #192	; 0xc0
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d10a      	bne.n	8003d0a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d107      	bne.n	8003d0a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	2117      	movs	r1, #23
 8003d02:	187b      	adds	r3, r7, r1
 8003d04:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d06:	187b      	adds	r3, r7, r1
 8003d08:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	d055      	beq.n	8003dbc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d10:	f7fd ffa4 	bl	8001c5c <HAL_GetTick>
 8003d14:	0002      	movs	r2, r0
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d902      	bls.n	8003d26 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d142      	bne.n	8003dac <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	21e0      	movs	r1, #224	; 0xe0
 8003d32:	438a      	bics	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	2382      	movs	r3, #130	; 0x82
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d113      	bne.n	8003d6a <SPI_WaitFifoStateUntilTimeout+0xce>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d005      	beq.n	8003d5a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d107      	bne.n	8003d6a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2140      	movs	r1, #64	; 0x40
 8003d66:	438a      	bics	r2, r1
 8003d68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	019b      	lsls	r3, r3, #6
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d110      	bne.n	8003d98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4916      	ldr	r1, [pc, #88]	; (8003ddc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003d82:	400a      	ands	r2, r1
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	0189      	lsls	r1, r1, #6
 8003d94:	430a      	orrs	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	225d      	movs	r2, #93	; 0x5d
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	225c      	movs	r2, #92	; 0x5c
 8003da4:	2100      	movs	r1, #0
 8003da6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e010      	b.n	8003dce <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d18e      	bne.n	8003cea <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b00a      	add	sp, #40	; 0x28
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	20000008 	.word	0x20000008
 8003ddc:	ffffdfff 	.word	0xffffdfff

08003de0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	2382      	movs	r3, #130	; 0x82
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d113      	bne.n	8003e20 <SPI_EndRxTransaction+0x40>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d005      	beq.n	8003e10 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	2380      	movs	r3, #128	; 0x80
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d107      	bne.n	8003e20 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2140      	movs	r1, #64	; 0x40
 8003e1c:	438a      	bics	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	0013      	movs	r3, r2
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2180      	movs	r1, #128	; 0x80
 8003e2e:	f7ff fea7 	bl	8003b80 <SPI_WaitFlagStateUntilTimeout>
 8003e32:	1e03      	subs	r3, r0, #0
 8003e34:	d007      	beq.n	8003e46 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e026      	b.n	8003e94 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	2382      	movs	r3, #130	; 0x82
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d11f      	bne.n	8003e92 <SPI_EndRxTransaction+0xb2>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d005      	beq.n	8003e6a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d113      	bne.n	8003e92 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	23c0      	movs	r3, #192	; 0xc0
 8003e6e:	00d9      	lsls	r1, r3, #3
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	0013      	movs	r3, r2
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f7ff ff0f 	bl	8003c9c <SPI_WaitFifoStateUntilTimeout>
 8003e7e:	1e03      	subs	r3, r0, #0
 8003e80:	d007      	beq.n	8003e92 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e86:	2220      	movs	r2, #32
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e000      	b.n	8003e94 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	0018      	movs	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b004      	add	sp, #16
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	23c0      	movs	r3, #192	; 0xc0
 8003eac:	0159      	lsls	r1, r3, #5
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	0013      	movs	r3, r2
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f7ff fef0 	bl	8003c9c <SPI_WaitFifoStateUntilTimeout>
 8003ebc:	1e03      	subs	r3, r0, #0
 8003ebe:	d007      	beq.n	8003ed0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e027      	b.n	8003f20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	0013      	movs	r3, r2
 8003eda:	2200      	movs	r2, #0
 8003edc:	2180      	movs	r1, #128	; 0x80
 8003ede:	f7ff fe4f 	bl	8003b80 <SPI_WaitFlagStateUntilTimeout>
 8003ee2:	1e03      	subs	r3, r0, #0
 8003ee4:	d007      	beq.n	8003ef6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eea:	2220      	movs	r2, #32
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e014      	b.n	8003f20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	23c0      	movs	r3, #192	; 0xc0
 8003efa:	00d9      	lsls	r1, r3, #3
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	0013      	movs	r3, r2
 8003f04:	2200      	movs	r2, #0
 8003f06:	f7ff fec9 	bl	8003c9c <SPI_WaitFifoStateUntilTimeout>
 8003f0a:	1e03      	subs	r3, r0, #0
 8003f0c:	d007      	beq.n	8003f1e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f12:	2220      	movs	r2, #32
 8003f14:	431a      	orrs	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e000      	b.n	8003f20 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b004      	add	sp, #16
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e04a      	b.n	8003fd0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	223d      	movs	r2, #61	; 0x3d
 8003f3e:	5c9b      	ldrb	r3, [r3, r2]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d107      	bne.n	8003f56 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	223c      	movs	r2, #60	; 0x3c
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7fd fcb9 	bl	80018c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	223d      	movs	r2, #61	; 0x3d
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	0019      	movs	r1, r3
 8003f68:	0010      	movs	r0, r2
 8003f6a:	f000 f935 	bl	80041d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2248      	movs	r2, #72	; 0x48
 8003f72:	2101      	movs	r1, #1
 8003f74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	223e      	movs	r2, #62	; 0x3e
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	5499      	strb	r1, [r3, r2]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	223f      	movs	r2, #63	; 0x3f
 8003f82:	2101      	movs	r1, #1
 8003f84:	5499      	strb	r1, [r3, r2]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2240      	movs	r2, #64	; 0x40
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	5499      	strb	r1, [r3, r2]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2241      	movs	r2, #65	; 0x41
 8003f92:	2101      	movs	r1, #1
 8003f94:	5499      	strb	r1, [r3, r2]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2242      	movs	r2, #66	; 0x42
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2243      	movs	r2, #67	; 0x43
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2244      	movs	r2, #68	; 0x44
 8003faa:	2101      	movs	r1, #1
 8003fac:	5499      	strb	r1, [r3, r2]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2245      	movs	r2, #69	; 0x45
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	5499      	strb	r1, [r3, r2]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2246      	movs	r2, #70	; 0x46
 8003fba:	2101      	movs	r1, #1
 8003fbc:	5499      	strb	r1, [r3, r2]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2247      	movs	r2, #71	; 0x47
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	223d      	movs	r2, #61	; 0x3d
 8003fca:	2101      	movs	r1, #1
 8003fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b002      	add	sp, #8
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe4:	2317      	movs	r3, #23
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	2200      	movs	r2, #0
 8003fea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	223c      	movs	r2, #60	; 0x3c
 8003ff0:	5c9b      	ldrb	r3, [r3, r2]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x22>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e0e5      	b.n	80041c6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	223c      	movs	r2, #60	; 0x3c
 8003ffe:	2101      	movs	r1, #1
 8004000:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b14      	cmp	r3, #20
 8004006:	d900      	bls.n	800400a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004008:	e0d1      	b.n	80041ae <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	009a      	lsls	r2, r3, #2
 800400e:	4b70      	ldr	r3, [pc, #448]	; (80041d0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004010:	18d3      	adds	r3, r2, r3
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	0011      	movs	r1, r2
 800401e:	0018      	movs	r0, r3
 8004020:	f000 f95e 	bl	80042e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2108      	movs	r1, #8
 8004030:	430a      	orrs	r2, r1
 8004032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699a      	ldr	r2, [r3, #24]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2104      	movs	r1, #4
 8004040:	438a      	bics	r2, r1
 8004042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6999      	ldr	r1, [r3, #24]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	619a      	str	r2, [r3, #24]
      break;
 8004056:	e0af      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	0011      	movs	r1, r2
 8004060:	0018      	movs	r0, r3
 8004062:	f000 f9bd 	bl	80043e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	0109      	lsls	r1, r1, #4
 8004074:	430a      	orrs	r2, r1
 8004076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4954      	ldr	r1, [pc, #336]	; (80041d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004084:	400a      	ands	r2, r1
 8004086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6999      	ldr	r1, [r3, #24]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	021a      	lsls	r2, r3, #8
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	619a      	str	r2, [r3, #24]
      break;
 800409c:	e08c      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	0011      	movs	r1, r2
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 fa18 	bl	80044dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69da      	ldr	r2, [r3, #28]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2108      	movs	r1, #8
 80040b8:	430a      	orrs	r2, r1
 80040ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2104      	movs	r1, #4
 80040c8:	438a      	bics	r2, r1
 80040ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69d9      	ldr	r1, [r3, #28]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	61da      	str	r2, [r3, #28]
      break;
 80040de:	e06b      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	0011      	movs	r1, r2
 80040e8:	0018      	movs	r0, r3
 80040ea:	f000 fa79 	bl	80045e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2180      	movs	r1, #128	; 0x80
 80040fa:	0109      	lsls	r1, r1, #4
 80040fc:	430a      	orrs	r2, r1
 80040fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69da      	ldr	r2, [r3, #28]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4932      	ldr	r1, [pc, #200]	; (80041d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800410c:	400a      	ands	r2, r1
 800410e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69d9      	ldr	r1, [r3, #28]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	021a      	lsls	r2, r3, #8
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	61da      	str	r2, [r3, #28]
      break;
 8004124:	e048      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	0011      	movs	r1, r2
 800412e:	0018      	movs	r0, r3
 8004130:	f000 faba 	bl	80046a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2108      	movs	r1, #8
 8004140:	430a      	orrs	r2, r1
 8004142:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2104      	movs	r1, #4
 8004150:	438a      	bics	r2, r1
 8004152:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004166:	e027      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	0011      	movs	r1, r2
 8004170:	0018      	movs	r0, r3
 8004172:	f000 faf3 	bl	800475c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2180      	movs	r1, #128	; 0x80
 8004182:	0109      	lsls	r1, r1, #4
 8004184:	430a      	orrs	r2, r1
 8004186:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4910      	ldr	r1, [pc, #64]	; (80041d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004194:	400a      	ands	r2, r1
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	021a      	lsls	r2, r3, #8
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041ac:	e004      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80041ae:	2317      	movs	r3, #23
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	2201      	movs	r2, #1
 80041b4:	701a      	strb	r2, [r3, #0]
      break;
 80041b6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	223c      	movs	r2, #60	; 0x3c
 80041bc:	2100      	movs	r1, #0
 80041be:	5499      	strb	r1, [r3, r2]

  return status;
 80041c0:	2317      	movs	r3, #23
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	781b      	ldrb	r3, [r3, #0]
}
 80041c6:	0018      	movs	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b006      	add	sp, #24
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	08005e90 	.word	0x08005e90
 80041d4:	fffffbff 	.word	0xfffffbff

080041d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a37      	ldr	r2, [pc, #220]	; (80042c8 <TIM_Base_SetConfig+0xf0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d008      	beq.n	8004202 <TIM_Base_SetConfig+0x2a>
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	2380      	movs	r3, #128	; 0x80
 80041f4:	05db      	lsls	r3, r3, #23
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d003      	beq.n	8004202 <TIM_Base_SetConfig+0x2a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a33      	ldr	r2, [pc, #204]	; (80042cc <TIM_Base_SetConfig+0xf4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d108      	bne.n	8004214 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2270      	movs	r2, #112	; 0x70
 8004206:	4393      	bics	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a2c      	ldr	r2, [pc, #176]	; (80042c8 <TIM_Base_SetConfig+0xf0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d014      	beq.n	8004246 <TIM_Base_SetConfig+0x6e>
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	05db      	lsls	r3, r3, #23
 8004222:	429a      	cmp	r2, r3
 8004224:	d00f      	beq.n	8004246 <TIM_Base_SetConfig+0x6e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a28      	ldr	r2, [pc, #160]	; (80042cc <TIM_Base_SetConfig+0xf4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00b      	beq.n	8004246 <TIM_Base_SetConfig+0x6e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a27      	ldr	r2, [pc, #156]	; (80042d0 <TIM_Base_SetConfig+0xf8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d007      	beq.n	8004246 <TIM_Base_SetConfig+0x6e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a26      	ldr	r2, [pc, #152]	; (80042d4 <TIM_Base_SetConfig+0xfc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d003      	beq.n	8004246 <TIM_Base_SetConfig+0x6e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a25      	ldr	r2, [pc, #148]	; (80042d8 <TIM_Base_SetConfig+0x100>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d108      	bne.n	8004258 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4a24      	ldr	r2, [pc, #144]	; (80042dc <TIM_Base_SetConfig+0x104>)
 800424a:	4013      	ands	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2280      	movs	r2, #128	; 0x80
 800425c:	4393      	bics	r3, r2
 800425e:	001a      	movs	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <TIM_Base_SetConfig+0xf0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <TIM_Base_SetConfig+0xbe>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a12      	ldr	r2, [pc, #72]	; (80042d4 <TIM_Base_SetConfig+0xfc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_Base_SetConfig+0xbe>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <TIM_Base_SetConfig+0x100>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d103      	bne.n	800429e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	2201      	movs	r2, #1
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d106      	bne.n	80042be <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	2201      	movs	r2, #1
 80042b6:	4393      	bics	r3, r2
 80042b8:	001a      	movs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	611a      	str	r2, [r3, #16]
  }
}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b004      	add	sp, #16
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40002000 	.word	0x40002000
 80042d4:	40014400 	.word	0x40014400
 80042d8:	40014800 	.word	0x40014800
 80042dc:	fffffcff 	.word	0xfffffcff

080042e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	2201      	movs	r2, #1
 80042f6:	4393      	bics	r3, r2
 80042f8:	001a      	movs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a2e      	ldr	r2, [pc, #184]	; (80043c8 <TIM_OC1_SetConfig+0xe8>)
 800430e:	4013      	ands	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2203      	movs	r2, #3
 8004316:	4393      	bics	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2202      	movs	r2, #2
 8004328:	4393      	bics	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a24      	ldr	r2, [pc, #144]	; (80043cc <TIM_OC1_SetConfig+0xec>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <TIM_OC1_SetConfig+0x6e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a23      	ldr	r2, [pc, #140]	; (80043d0 <TIM_OC1_SetConfig+0xf0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_OC1_SetConfig+0x6e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a22      	ldr	r2, [pc, #136]	; (80043d4 <TIM_OC1_SetConfig+0xf4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d10c      	bne.n	8004368 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2208      	movs	r2, #8
 8004352:	4393      	bics	r3, r2
 8004354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2204      	movs	r2, #4
 8004364:	4393      	bics	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a18      	ldr	r2, [pc, #96]	; (80043cc <TIM_OC1_SetConfig+0xec>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d007      	beq.n	8004380 <TIM_OC1_SetConfig+0xa0>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <TIM_OC1_SetConfig+0xf0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_OC1_SetConfig+0xa0>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a16      	ldr	r2, [pc, #88]	; (80043d4 <TIM_OC1_SetConfig+0xf4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d111      	bne.n	80043a4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <TIM_OC1_SetConfig+0xf8>)
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4a14      	ldr	r2, [pc, #80]	; (80043dc <TIM_OC1_SetConfig+0xfc>)
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	621a      	str	r2, [r3, #32]
}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b006      	add	sp, #24
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	fffeff8f 	.word	0xfffeff8f
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40014400 	.word	0x40014400
 80043d4:	40014800 	.word	0x40014800
 80043d8:	fffffeff 	.word	0xfffffeff
 80043dc:	fffffdff 	.word	0xfffffdff

080043e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	2210      	movs	r2, #16
 80043f6:	4393      	bics	r3, r2
 80043f8:	001a      	movs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4a2c      	ldr	r2, [pc, #176]	; (80044c0 <TIM_OC2_SetConfig+0xe0>)
 800440e:	4013      	ands	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a2b      	ldr	r2, [pc, #172]	; (80044c4 <TIM_OC2_SetConfig+0xe4>)
 8004416:	4013      	ands	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2220      	movs	r2, #32
 800442a:	4393      	bics	r3, r2
 800442c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a22      	ldr	r2, [pc, #136]	; (80044c8 <TIM_OC2_SetConfig+0xe8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d10d      	bne.n	800445e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2280      	movs	r2, #128	; 0x80
 8004446:	4393      	bics	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2240      	movs	r2, #64	; 0x40
 800445a:	4393      	bics	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a19      	ldr	r2, [pc, #100]	; (80044c8 <TIM_OC2_SetConfig+0xe8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <TIM_OC2_SetConfig+0x96>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a18      	ldr	r2, [pc, #96]	; (80044cc <TIM_OC2_SetConfig+0xec>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_OC2_SetConfig+0x96>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a17      	ldr	r2, [pc, #92]	; (80044d0 <TIM_OC2_SetConfig+0xf0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d113      	bne.n	800449e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <TIM_OC2_SetConfig+0xf4>)
 800447a:	4013      	ands	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <TIM_OC2_SetConfig+0xf8>)
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	46c0      	nop			; (mov r8, r8)
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b006      	add	sp, #24
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	feff8fff 	.word	0xfeff8fff
 80044c4:	fffffcff 	.word	0xfffffcff
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	40014400 	.word	0x40014400
 80044d0:	40014800 	.word	0x40014800
 80044d4:	fffffbff 	.word	0xfffffbff
 80044d8:	fffff7ff 	.word	0xfffff7ff

080044dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	4a31      	ldr	r2, [pc, #196]	; (80045b8 <TIM_OC3_SetConfig+0xdc>)
 80044f2:	401a      	ands	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4a2d      	ldr	r2, [pc, #180]	; (80045bc <TIM_OC3_SetConfig+0xe0>)
 8004508:	4013      	ands	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2203      	movs	r2, #3
 8004510:	4393      	bics	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	4a27      	ldr	r2, [pc, #156]	; (80045c0 <TIM_OC3_SetConfig+0xe4>)
 8004522:	4013      	ands	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a23      	ldr	r2, [pc, #140]	; (80045c4 <TIM_OC3_SetConfig+0xe8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10d      	bne.n	8004556 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <TIM_OC3_SetConfig+0xec>)
 800453e:	4013      	ands	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	4a1e      	ldr	r2, [pc, #120]	; (80045cc <TIM_OC3_SetConfig+0xf0>)
 8004552:	4013      	ands	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a1a      	ldr	r2, [pc, #104]	; (80045c4 <TIM_OC3_SetConfig+0xe8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <TIM_OC3_SetConfig+0x92>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a1b      	ldr	r2, [pc, #108]	; (80045d0 <TIM_OC3_SetConfig+0xf4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_OC3_SetConfig+0x92>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1a      	ldr	r2, [pc, #104]	; (80045d4 <TIM_OC3_SetConfig+0xf8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d113      	bne.n	8004596 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4a19      	ldr	r2, [pc, #100]	; (80045d8 <TIM_OC3_SetConfig+0xfc>)
 8004572:	4013      	ands	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4a18      	ldr	r2, [pc, #96]	; (80045dc <TIM_OC3_SetConfig+0x100>)
 800457a:	4013      	ands	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	621a      	str	r2, [r3, #32]
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b006      	add	sp, #24
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	fffffeff 	.word	0xfffffeff
 80045bc:	fffeff8f 	.word	0xfffeff8f
 80045c0:	fffffdff 	.word	0xfffffdff
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	fffff7ff 	.word	0xfffff7ff
 80045cc:	fffffbff 	.word	0xfffffbff
 80045d0:	40014400 	.word	0x40014400
 80045d4:	40014800 	.word	0x40014800
 80045d8:	ffffefff 	.word	0xffffefff
 80045dc:	ffffdfff 	.word	0xffffdfff

080045e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	4a24      	ldr	r2, [pc, #144]	; (8004688 <TIM_OC4_SetConfig+0xa8>)
 80045f6:	401a      	ands	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a20      	ldr	r2, [pc, #128]	; (800468c <TIM_OC4_SetConfig+0xac>)
 800460c:	4013      	ands	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <TIM_OC4_SetConfig+0xb0>)
 8004614:	4013      	ands	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <TIM_OC4_SetConfig+0xb4>)
 8004628:	4013      	ands	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	031b      	lsls	r3, r3, #12
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a17      	ldr	r2, [pc, #92]	; (8004698 <TIM_OC4_SetConfig+0xb8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <TIM_OC4_SetConfig+0x70>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a16      	ldr	r2, [pc, #88]	; (800469c <TIM_OC4_SetConfig+0xbc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_OC4_SetConfig+0x70>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <TIM_OC4_SetConfig+0xc0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d109      	bne.n	8004664 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	4a14      	ldr	r2, [pc, #80]	; (80046a4 <TIM_OC4_SetConfig+0xc4>)
 8004654:	4013      	ands	r3, r2
 8004656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	019b      	lsls	r3, r3, #6
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b006      	add	sp, #24
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	ffffefff 	.word	0xffffefff
 800468c:	feff8fff 	.word	0xfeff8fff
 8004690:	fffffcff 	.word	0xfffffcff
 8004694:	ffffdfff 	.word	0xffffdfff
 8004698:	40012c00 	.word	0x40012c00
 800469c:	40014400 	.word	0x40014400
 80046a0:	40014800 	.word	0x40014800
 80046a4:	ffffbfff 	.word	0xffffbfff

080046a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	4a21      	ldr	r2, [pc, #132]	; (8004744 <TIM_OC5_SetConfig+0x9c>)
 80046be:	401a      	ands	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a1d      	ldr	r2, [pc, #116]	; (8004748 <TIM_OC5_SetConfig+0xa0>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4a19      	ldr	r2, [pc, #100]	; (800474c <TIM_OC5_SetConfig+0xa4>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	041b      	lsls	r3, r3, #16
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a15      	ldr	r2, [pc, #84]	; (8004750 <TIM_OC5_SetConfig+0xa8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d007      	beq.n	800470e <TIM_OC5_SetConfig+0x66>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a14      	ldr	r2, [pc, #80]	; (8004754 <TIM_OC5_SetConfig+0xac>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d003      	beq.n	800470e <TIM_OC5_SetConfig+0x66>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a13      	ldr	r2, [pc, #76]	; (8004758 <TIM_OC5_SetConfig+0xb0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d109      	bne.n	8004722 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <TIM_OC5_SetConfig+0x9c>)
 8004712:	4013      	ands	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	621a      	str	r2, [r3, #32]
}
 800473c:	46c0      	nop			; (mov r8, r8)
 800473e:	46bd      	mov	sp, r7
 8004740:	b006      	add	sp, #24
 8004742:	bd80      	pop	{r7, pc}
 8004744:	fffeffff 	.word	0xfffeffff
 8004748:	fffeff8f 	.word	0xfffeff8f
 800474c:	fffdffff 	.word	0xfffdffff
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40014400 	.word	0x40014400
 8004758:	40014800 	.word	0x40014800

0800475c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4a22      	ldr	r2, [pc, #136]	; (80047fc <TIM_OC6_SetConfig+0xa0>)
 8004772:	401a      	ands	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <TIM_OC6_SetConfig+0xa4>)
 8004788:	4013      	ands	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <TIM_OC6_SetConfig+0xa8>)
 800479c:	4013      	ands	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	051b      	lsls	r3, r3, #20
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a16      	ldr	r2, [pc, #88]	; (8004808 <TIM_OC6_SetConfig+0xac>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d007      	beq.n	80047c4 <TIM_OC6_SetConfig+0x68>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <TIM_OC6_SetConfig+0xb0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d003      	beq.n	80047c4 <TIM_OC6_SetConfig+0x68>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a14      	ldr	r2, [pc, #80]	; (8004810 <TIM_OC6_SetConfig+0xb4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d109      	bne.n	80047d8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	4a13      	ldr	r2, [pc, #76]	; (8004814 <TIM_OC6_SetConfig+0xb8>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	029b      	lsls	r3, r3, #10
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b006      	add	sp, #24
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	ffefffff 	.word	0xffefffff
 8004800:	feff8fff 	.word	0xfeff8fff
 8004804:	ffdfffff 	.word	0xffdfffff
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40014400 	.word	0x40014400
 8004810:	40014800 	.word	0x40014800
 8004814:	fffbffff 	.word	0xfffbffff

08004818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	223c      	movs	r2, #60	; 0x3c
 8004826:	5c9b      	ldrb	r3, [r3, r2]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800482c:	2302      	movs	r3, #2
 800482e:	e050      	b.n	80048d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	223c      	movs	r2, #60	; 0x3c
 8004834:	2101      	movs	r1, #1
 8004836:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	223d      	movs	r2, #61	; 0x3d
 800483c:	2102      	movs	r1, #2
 800483e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a21      	ldr	r2, [pc, #132]	; (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d108      	bne.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800485e:	4013      	ands	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2270      	movs	r2, #112	; 0x70
 8004870:	4393      	bics	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a14      	ldr	r2, [pc, #80]	; (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00a      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	05db      	lsls	r3, r3, #23
 8004898:	429a      	cmp	r2, r3
 800489a:	d004      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a10      	ldr	r2, [pc, #64]	; (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d10c      	bne.n	80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2280      	movs	r2, #128	; 0x80
 80048aa:	4393      	bics	r3, r2
 80048ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	223d      	movs	r2, #61	; 0x3d
 80048c4:	2101      	movs	r1, #1
 80048c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	223c      	movs	r2, #60	; 0x3c
 80048cc:	2100      	movs	r1, #0
 80048ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	0018      	movs	r0, r3
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b004      	add	sp, #16
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	40012c00 	.word	0x40012c00
 80048e0:	ff0fffff 	.word	0xff0fffff
 80048e4:	40000400 	.word	0x40000400

080048e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	223c      	movs	r2, #60	; 0x3c
 80048fa:	5c9b      	ldrb	r3, [r3, r2]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004900:	2302      	movs	r3, #2
 8004902:	e06f      	b.n	80049e4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	223c      	movs	r2, #60	; 0x3c
 8004908:	2101      	movs	r1, #1
 800490a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	22ff      	movs	r2, #255	; 0xff
 8004910:	4393      	bics	r3, r2
 8004912:	001a      	movs	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4a33      	ldr	r2, [pc, #204]	; (80049ec <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004920:	401a      	ands	r2, r3
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a30      	ldr	r2, [pc, #192]	; (80049f0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800492e:	401a      	ands	r2, r3
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4a2e      	ldr	r2, [pc, #184]	; (80049f4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800493c:	401a      	ands	r2, r3
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a2b      	ldr	r2, [pc, #172]	; (80049f8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800494a:	401a      	ands	r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a29      	ldr	r2, [pc, #164]	; (80049fc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004958:	401a      	ands	r2, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004966:	401a      	ands	r2, r3
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4a24      	ldr	r2, [pc, #144]	; (8004a04 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004974:	401a      	ands	r2, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	041b      	lsls	r3, r3, #16
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4a21      	ldr	r2, [pc, #132]	; (8004a08 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004984:	401a      	ands	r2, r3
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1e      	ldr	r2, [pc, #120]	; (8004a0c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d11c      	bne.n	80049d2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4a1d      	ldr	r2, [pc, #116]	; (8004a10 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800499c:	401a      	ands	r2, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	051b      	lsls	r3, r3, #20
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4a1a      	ldr	r2, [pc, #104]	; (8004a14 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80049ac:	401a      	ands	r2, r3
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a17      	ldr	r2, [pc, #92]	; (8004a18 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80049ba:	401a      	ands	r2, r3
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a15      	ldr	r2, [pc, #84]	; (8004a1c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80049c8:	401a      	ands	r2, r3
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	223c      	movs	r2, #60	; 0x3c
 80049de:	2100      	movs	r1, #0
 80049e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	0018      	movs	r0, r3
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b004      	add	sp, #16
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	fffffcff 	.word	0xfffffcff
 80049f0:	fffffbff 	.word	0xfffffbff
 80049f4:	fffff7ff 	.word	0xfffff7ff
 80049f8:	ffffefff 	.word	0xffffefff
 80049fc:	ffffdfff 	.word	0xffffdfff
 8004a00:	ffffbfff 	.word	0xffffbfff
 8004a04:	fff0ffff 	.word	0xfff0ffff
 8004a08:	efffffff 	.word	0xefffffff
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	ff0fffff 	.word	0xff0fffff
 8004a14:	feffffff 	.word	0xfeffffff
 8004a18:	fdffffff 	.word	0xfdffffff
 8004a1c:	dfffffff 	.word	0xdfffffff

08004a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e046      	b.n	8004ac0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2288      	movs	r2, #136	; 0x88
 8004a36:	589b      	ldr	r3, [r3, r2]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2284      	movs	r2, #132	; 0x84
 8004a40:	2100      	movs	r1, #0
 8004a42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	0018      	movs	r0, r3
 8004a48:	f7fd f800 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2288      	movs	r2, #136	; 0x88
 8004a50:	2124      	movs	r1, #36	; 0x24
 8004a52:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2101      	movs	r1, #1
 8004a60:	438a      	bics	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f000 fb48 	bl	8005104 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	0018      	movs	r0, r3
 8004a78:	f000 f8cc 	bl	8004c14 <UART_SetConfig>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e01c      	b.n	8004ac0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	490d      	ldr	r1, [pc, #52]	; (8004ac8 <HAL_UART_Init+0xa8>)
 8004a92:	400a      	ands	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	212a      	movs	r1, #42	; 0x2a
 8004aa2:	438a      	bics	r2, r1
 8004aa4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f000 fbd7 	bl	800526c <UART_CheckIdleState>
 8004abe:	0003      	movs	r3, r0
}
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b002      	add	sp, #8
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	ffffb7ff 	.word	0xffffb7ff

08004acc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	; 0x28
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	1dbb      	adds	r3, r7, #6
 8004ada:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2288      	movs	r2, #136	; 0x88
 8004ae0:	589b      	ldr	r3, [r3, r2]
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d000      	beq.n	8004ae8 <HAL_UART_Transmit+0x1c>
 8004ae6:	e090      	b.n	8004c0a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_UART_Transmit+0x2a>
 8004aee:	1dbb      	adds	r3, r7, #6
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e088      	b.n	8004c0c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	015b      	lsls	r3, r3, #5
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d109      	bne.n	8004b1a <HAL_UART_Transmit+0x4e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d105      	bne.n	8004b1a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2201      	movs	r2, #1
 8004b12:	4013      	ands	r3, r2
 8004b14:	d001      	beq.n	8004b1a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e078      	b.n	8004c0c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2290      	movs	r2, #144	; 0x90
 8004b1e:	2100      	movs	r1, #0
 8004b20:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2288      	movs	r2, #136	; 0x88
 8004b26:	2121      	movs	r1, #33	; 0x21
 8004b28:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b2a:	f7fd f897 	bl	8001c5c <HAL_GetTick>
 8004b2e:	0003      	movs	r3, r0
 8004b30:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1dba      	adds	r2, r7, #6
 8004b36:	2154      	movs	r1, #84	; 0x54
 8004b38:	8812      	ldrh	r2, [r2, #0]
 8004b3a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1dba      	adds	r2, r7, #6
 8004b40:	2156      	movs	r1, #86	; 0x56
 8004b42:	8812      	ldrh	r2, [r2, #0]
 8004b44:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	2380      	movs	r3, #128	; 0x80
 8004b4c:	015b      	lsls	r3, r3, #5
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d108      	bne.n	8004b64 <HAL_UART_Transmit+0x98>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d104      	bne.n	8004b64 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	e003      	b.n	8004b6c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b6c:	e030      	b.n	8004bd0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	0013      	movs	r3, r2
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2180      	movs	r1, #128	; 0x80
 8004b7c:	f000 fc20 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 8004b80:	1e03      	subs	r3, r0, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2288      	movs	r2, #136	; 0x88
 8004b88:	2120      	movs	r1, #32
 8004b8a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e03d      	b.n	8004c0c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10b      	bne.n	8004bae <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	001a      	movs	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	05d2      	lsls	r2, r2, #23
 8004ba2:	0dd2      	lsrs	r2, r2, #23
 8004ba4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	3302      	adds	r3, #2
 8004baa:	61bb      	str	r3, [r7, #24]
 8004bac:	e007      	b.n	8004bbe <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2256      	movs	r2, #86	; 0x56
 8004bc2:	5a9b      	ldrh	r3, [r3, r2]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b299      	uxth	r1, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2256      	movs	r2, #86	; 0x56
 8004bce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2256      	movs	r2, #86	; 0x56
 8004bd4:	5a9b      	ldrh	r3, [r3, r2]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1c8      	bne.n	8004b6e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	0013      	movs	r3, r2
 8004be6:	2200      	movs	r2, #0
 8004be8:	2140      	movs	r1, #64	; 0x40
 8004bea:	f000 fbe9 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 8004bee:	1e03      	subs	r3, r0, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2288      	movs	r2, #136	; 0x88
 8004bf6:	2120      	movs	r1, #32
 8004bf8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e006      	b.n	8004c0c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2288      	movs	r2, #136	; 0x88
 8004c02:	2120      	movs	r1, #32
 8004c04:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e000      	b.n	8004c0c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004c0a:	2302      	movs	r3, #2
  }
}
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b008      	add	sp, #32
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c14:	b5b0      	push	{r4, r5, r7, lr}
 8004c16:	b090      	sub	sp, #64	; 0x40
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c1c:	231a      	movs	r3, #26
 8004c1e:	2220      	movs	r2, #32
 8004c20:	189b      	adds	r3, r3, r2
 8004c22:	19db      	adds	r3, r3, r7
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4ac4      	ldr	r2, [pc, #784]	; (8004f58 <UART_SetConfig+0x344>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c52:	430b      	orrs	r3, r1
 8004c54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	4abf      	ldr	r2, [pc, #764]	; (8004f5c <UART_SetConfig+0x348>)
 8004c5e:	4013      	ands	r3, r2
 8004c60:	0018      	movs	r0, r3
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	68d9      	ldr	r1, [r3, #12]
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	0003      	movs	r3, r0
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4ab9      	ldr	r2, [pc, #740]	; (8004f60 <UART_SetConfig+0x34c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c86:	4313      	orrs	r3, r2
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	4ab4      	ldr	r2, [pc, #720]	; (8004f64 <UART_SetConfig+0x350>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	0019      	movs	r1, r3
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	220f      	movs	r2, #15
 8004ca8:	4393      	bics	r3, r2
 8004caa:	0018      	movs	r0, r3
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4aaa      	ldr	r2, [pc, #680]	; (8004f68 <UART_SetConfig+0x354>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d131      	bne.n	8004d28 <UART_SetConfig+0x114>
 8004cc4:	4ba9      	ldr	r3, [pc, #676]	; (8004f6c <UART_SetConfig+0x358>)
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc8:	2203      	movs	r2, #3
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d01d      	beq.n	8004d0c <UART_SetConfig+0xf8>
 8004cd0:	d823      	bhi.n	8004d1a <UART_SetConfig+0x106>
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d00c      	beq.n	8004cf0 <UART_SetConfig+0xdc>
 8004cd6:	d820      	bhi.n	8004d1a <UART_SetConfig+0x106>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <UART_SetConfig+0xce>
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d00e      	beq.n	8004cfe <UART_SetConfig+0xea>
 8004ce0:	e01b      	b.n	8004d1a <UART_SetConfig+0x106>
 8004ce2:	231b      	movs	r3, #27
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	189b      	adds	r3, r3, r2
 8004ce8:	19db      	adds	r3, r3, r7
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	e071      	b.n	8004dd4 <UART_SetConfig+0x1c0>
 8004cf0:	231b      	movs	r3, #27
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	189b      	adds	r3, r3, r2
 8004cf6:	19db      	adds	r3, r3, r7
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	e06a      	b.n	8004dd4 <UART_SetConfig+0x1c0>
 8004cfe:	231b      	movs	r3, #27
 8004d00:	2220      	movs	r2, #32
 8004d02:	189b      	adds	r3, r3, r2
 8004d04:	19db      	adds	r3, r3, r7
 8004d06:	2204      	movs	r2, #4
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	e063      	b.n	8004dd4 <UART_SetConfig+0x1c0>
 8004d0c:	231b      	movs	r3, #27
 8004d0e:	2220      	movs	r2, #32
 8004d10:	189b      	adds	r3, r3, r2
 8004d12:	19db      	adds	r3, r3, r7
 8004d14:	2208      	movs	r2, #8
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e05c      	b.n	8004dd4 <UART_SetConfig+0x1c0>
 8004d1a:	231b      	movs	r3, #27
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	189b      	adds	r3, r3, r2
 8004d20:	19db      	adds	r3, r3, r7
 8004d22:	2210      	movs	r2, #16
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	e055      	b.n	8004dd4 <UART_SetConfig+0x1c0>
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a90      	ldr	r2, [pc, #576]	; (8004f70 <UART_SetConfig+0x35c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d106      	bne.n	8004d40 <UART_SetConfig+0x12c>
 8004d32:	231b      	movs	r3, #27
 8004d34:	2220      	movs	r2, #32
 8004d36:	189b      	adds	r3, r3, r2
 8004d38:	19db      	adds	r3, r3, r7
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	e049      	b.n	8004dd4 <UART_SetConfig+0x1c0>
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a86      	ldr	r2, [pc, #536]	; (8004f60 <UART_SetConfig+0x34c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d13e      	bne.n	8004dc8 <UART_SetConfig+0x1b4>
 8004d4a:	4b88      	ldr	r3, [pc, #544]	; (8004f6c <UART_SetConfig+0x358>)
 8004d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d4e:	23c0      	movs	r3, #192	; 0xc0
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	4013      	ands	r3, r2
 8004d54:	22c0      	movs	r2, #192	; 0xc0
 8004d56:	0112      	lsls	r2, r2, #4
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d027      	beq.n	8004dac <UART_SetConfig+0x198>
 8004d5c:	22c0      	movs	r2, #192	; 0xc0
 8004d5e:	0112      	lsls	r2, r2, #4
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d82a      	bhi.n	8004dba <UART_SetConfig+0x1a6>
 8004d64:	2280      	movs	r2, #128	; 0x80
 8004d66:	0112      	lsls	r2, r2, #4
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d011      	beq.n	8004d90 <UART_SetConfig+0x17c>
 8004d6c:	2280      	movs	r2, #128	; 0x80
 8004d6e:	0112      	lsls	r2, r2, #4
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d822      	bhi.n	8004dba <UART_SetConfig+0x1a6>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d004      	beq.n	8004d82 <UART_SetConfig+0x16e>
 8004d78:	2280      	movs	r2, #128	; 0x80
 8004d7a:	00d2      	lsls	r2, r2, #3
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00e      	beq.n	8004d9e <UART_SetConfig+0x18a>
 8004d80:	e01b      	b.n	8004dba <UART_SetConfig+0x1a6>
 8004d82:	231b      	movs	r3, #27
 8004d84:	2220      	movs	r2, #32
 8004d86:	189b      	adds	r3, r3, r2
 8004d88:	19db      	adds	r3, r3, r7
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e021      	b.n	8004dd4 <UART_SetConfig+0x1c0>
 8004d90:	231b      	movs	r3, #27
 8004d92:	2220      	movs	r2, #32
 8004d94:	189b      	adds	r3, r3, r2
 8004d96:	19db      	adds	r3, r3, r7
 8004d98:	2202      	movs	r2, #2
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	e01a      	b.n	8004dd4 <UART_SetConfig+0x1c0>
 8004d9e:	231b      	movs	r3, #27
 8004da0:	2220      	movs	r2, #32
 8004da2:	189b      	adds	r3, r3, r2
 8004da4:	19db      	adds	r3, r3, r7
 8004da6:	2204      	movs	r2, #4
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e013      	b.n	8004dd4 <UART_SetConfig+0x1c0>
 8004dac:	231b      	movs	r3, #27
 8004dae:	2220      	movs	r2, #32
 8004db0:	189b      	adds	r3, r3, r2
 8004db2:	19db      	adds	r3, r3, r7
 8004db4:	2208      	movs	r2, #8
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	e00c      	b.n	8004dd4 <UART_SetConfig+0x1c0>
 8004dba:	231b      	movs	r3, #27
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	189b      	adds	r3, r3, r2
 8004dc0:	19db      	adds	r3, r3, r7
 8004dc2:	2210      	movs	r2, #16
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	e005      	b.n	8004dd4 <UART_SetConfig+0x1c0>
 8004dc8:	231b      	movs	r3, #27
 8004dca:	2220      	movs	r2, #32
 8004dcc:	189b      	adds	r3, r3, r2
 8004dce:	19db      	adds	r3, r3, r7
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a61      	ldr	r2, [pc, #388]	; (8004f60 <UART_SetConfig+0x34c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d000      	beq.n	8004de0 <UART_SetConfig+0x1cc>
 8004dde:	e092      	b.n	8004f06 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004de0:	231b      	movs	r3, #27
 8004de2:	2220      	movs	r2, #32
 8004de4:	189b      	adds	r3, r3, r2
 8004de6:	19db      	adds	r3, r3, r7
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d015      	beq.n	8004e1a <UART_SetConfig+0x206>
 8004dee:	dc18      	bgt.n	8004e22 <UART_SetConfig+0x20e>
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d00d      	beq.n	8004e10 <UART_SetConfig+0x1fc>
 8004df4:	dc15      	bgt.n	8004e22 <UART_SetConfig+0x20e>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <UART_SetConfig+0x1ec>
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d005      	beq.n	8004e0a <UART_SetConfig+0x1f6>
 8004dfe:	e010      	b.n	8004e22 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e00:	f7fd ffe2 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8004e04:	0003      	movs	r3, r0
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e08:	e014      	b.n	8004e34 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e0a:	4b5a      	ldr	r3, [pc, #360]	; (8004f74 <UART_SetConfig+0x360>)
 8004e0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e0e:	e011      	b.n	8004e34 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e10:	f7fd ff4e 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8004e14:	0003      	movs	r3, r0
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e18:	e00c      	b.n	8004e34 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e20:	e008      	b.n	8004e34 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004e26:	231a      	movs	r3, #26
 8004e28:	2220      	movs	r2, #32
 8004e2a:	189b      	adds	r3, r3, r2
 8004e2c:	19db      	adds	r3, r3, r7
 8004e2e:	2201      	movs	r2, #1
 8004e30:	701a      	strb	r2, [r3, #0]
        break;
 8004e32:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d100      	bne.n	8004e3c <UART_SetConfig+0x228>
 8004e3a:	e147      	b.n	80050cc <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e40:	4b4d      	ldr	r3, [pc, #308]	; (8004f78 <UART_SetConfig+0x364>)
 8004e42:	0052      	lsls	r2, r2, #1
 8004e44:	5ad3      	ldrh	r3, [r2, r3]
 8004e46:	0019      	movs	r1, r3
 8004e48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e4a:	f7fb f95b 	bl	8000104 <__udivsi3>
 8004e4e:	0003      	movs	r3, r0
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	0013      	movs	r3, r2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d305      	bcc.n	8004e6e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d906      	bls.n	8004e7c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004e6e:	231a      	movs	r3, #26
 8004e70:	2220      	movs	r2, #32
 8004e72:	189b      	adds	r3, r3, r2
 8004e74:	19db      	adds	r3, r3, r7
 8004e76:	2201      	movs	r2, #1
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	e127      	b.n	80050cc <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e88:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <UART_SetConfig+0x364>)
 8004e8a:	0052      	lsls	r2, r2, #1
 8004e8c:	5ad3      	ldrh	r3, [r2, r3]
 8004e8e:	613b      	str	r3, [r7, #16]
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	69b8      	ldr	r0, [r7, #24]
 8004e9a:	69f9      	ldr	r1, [r7, #28]
 8004e9c:	f7fb fae2 	bl	8000464 <__aeabi_uldivmod>
 8004ea0:	0002      	movs	r2, r0
 8004ea2:	000b      	movs	r3, r1
 8004ea4:	0e11      	lsrs	r1, r2, #24
 8004ea6:	021d      	lsls	r5, r3, #8
 8004ea8:	430d      	orrs	r5, r1
 8004eaa:	0214      	lsls	r4, r2, #8
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	085b      	lsrs	r3, r3, #1
 8004eb2:	60bb      	str	r3, [r7, #8]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68b8      	ldr	r0, [r7, #8]
 8004eba:	68f9      	ldr	r1, [r7, #12]
 8004ebc:	1900      	adds	r0, r0, r4
 8004ebe:	4169      	adcs	r1, r5
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	607b      	str	r3, [r7, #4]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f7fb fac9 	bl	8000464 <__aeabi_uldivmod>
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	000b      	movs	r3, r1
 8004ed6:	0013      	movs	r3, r2
 8004ed8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004edc:	23c0      	movs	r3, #192	; 0xc0
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d309      	bcc.n	8004ef8 <UART_SetConfig+0x2e4>
 8004ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	035b      	lsls	r3, r3, #13
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d204      	bcs.n	8004ef8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	e0e9      	b.n	80050cc <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004ef8:	231a      	movs	r3, #26
 8004efa:	2220      	movs	r2, #32
 8004efc:	189b      	adds	r3, r3, r2
 8004efe:	19db      	adds	r3, r3, r7
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	e0e2      	b.n	80050cc <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	69da      	ldr	r2, [r3, #28]
 8004f0a:	2380      	movs	r3, #128	; 0x80
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d000      	beq.n	8004f14 <UART_SetConfig+0x300>
 8004f12:	e083      	b.n	800501c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004f14:	231b      	movs	r3, #27
 8004f16:	2220      	movs	r2, #32
 8004f18:	189b      	adds	r3, r3, r2
 8004f1a:	19db      	adds	r3, r3, r7
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d015      	beq.n	8004f4e <UART_SetConfig+0x33a>
 8004f22:	dc2b      	bgt.n	8004f7c <UART_SetConfig+0x368>
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d00d      	beq.n	8004f44 <UART_SetConfig+0x330>
 8004f28:	dc28      	bgt.n	8004f7c <UART_SetConfig+0x368>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <UART_SetConfig+0x320>
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d005      	beq.n	8004f3e <UART_SetConfig+0x32a>
 8004f32:	e023      	b.n	8004f7c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f34:	f7fd ff48 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f3c:	e027      	b.n	8004f8e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <UART_SetConfig+0x360>)
 8004f40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f42:	e024      	b.n	8004f8e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f44:	f7fd feb4 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f4c:	e01f      	b.n	8004f8e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f4e:	2380      	movs	r3, #128	; 0x80
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f54:	e01b      	b.n	8004f8e <UART_SetConfig+0x37a>
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	cfff69f3 	.word	0xcfff69f3
 8004f5c:	ffffcfff 	.word	0xffffcfff
 8004f60:	40008000 	.word	0x40008000
 8004f64:	11fff4ff 	.word	0x11fff4ff
 8004f68:	40013800 	.word	0x40013800
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40004400 	.word	0x40004400
 8004f74:	00f42400 	.word	0x00f42400
 8004f78:	08005ee4 	.word	0x08005ee4
      default:
        pclk = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004f80:	231a      	movs	r3, #26
 8004f82:	2220      	movs	r2, #32
 8004f84:	189b      	adds	r3, r3, r2
 8004f86:	19db      	adds	r3, r3, r7
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
        break;
 8004f8c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d100      	bne.n	8004f96 <UART_SetConfig+0x382>
 8004f94:	e09a      	b.n	80050cc <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f9a:	4b58      	ldr	r3, [pc, #352]	; (80050fc <UART_SetConfig+0x4e8>)
 8004f9c:	0052      	lsls	r2, r2, #1
 8004f9e:	5ad3      	ldrh	r3, [r2, r3]
 8004fa0:	0019      	movs	r1, r3
 8004fa2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004fa4:	f7fb f8ae 	bl	8000104 <__udivsi3>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	005a      	lsls	r2, r3, #1
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	18d2      	adds	r2, r2, r3
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	0019      	movs	r1, r3
 8004fba:	0010      	movs	r0, r2
 8004fbc:	f7fb f8a2 	bl	8000104 <__udivsi3>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	2b0f      	cmp	r3, #15
 8004fc8:	d921      	bls.n	800500e <UART_SetConfig+0x3fa>
 8004fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	025b      	lsls	r3, r3, #9
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d21c      	bcs.n	800500e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	200e      	movs	r0, #14
 8004fda:	2420      	movs	r4, #32
 8004fdc:	1903      	adds	r3, r0, r4
 8004fde:	19db      	adds	r3, r3, r7
 8004fe0:	210f      	movs	r1, #15
 8004fe2:	438a      	bics	r2, r1
 8004fe4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2207      	movs	r2, #7
 8004fee:	4013      	ands	r3, r2
 8004ff0:	b299      	uxth	r1, r3
 8004ff2:	1903      	adds	r3, r0, r4
 8004ff4:	19db      	adds	r3, r3, r7
 8004ff6:	1902      	adds	r2, r0, r4
 8004ff8:	19d2      	adds	r2, r2, r7
 8004ffa:	8812      	ldrh	r2, [r2, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	1902      	adds	r2, r0, r4
 8005006:	19d2      	adds	r2, r2, r7
 8005008:	8812      	ldrh	r2, [r2, #0]
 800500a:	60da      	str	r2, [r3, #12]
 800500c:	e05e      	b.n	80050cc <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800500e:	231a      	movs	r3, #26
 8005010:	2220      	movs	r2, #32
 8005012:	189b      	adds	r3, r3, r2
 8005014:	19db      	adds	r3, r3, r7
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	e057      	b.n	80050cc <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800501c:	231b      	movs	r3, #27
 800501e:	2220      	movs	r2, #32
 8005020:	189b      	adds	r3, r3, r2
 8005022:	19db      	adds	r3, r3, r7
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b08      	cmp	r3, #8
 8005028:	d015      	beq.n	8005056 <UART_SetConfig+0x442>
 800502a:	dc18      	bgt.n	800505e <UART_SetConfig+0x44a>
 800502c:	2b04      	cmp	r3, #4
 800502e:	d00d      	beq.n	800504c <UART_SetConfig+0x438>
 8005030:	dc15      	bgt.n	800505e <UART_SetConfig+0x44a>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <UART_SetConfig+0x428>
 8005036:	2b02      	cmp	r3, #2
 8005038:	d005      	beq.n	8005046 <UART_SetConfig+0x432>
 800503a:	e010      	b.n	800505e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800503c:	f7fd fec4 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8005040:	0003      	movs	r3, r0
 8005042:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005044:	e014      	b.n	8005070 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005046:	4b2e      	ldr	r3, [pc, #184]	; (8005100 <UART_SetConfig+0x4ec>)
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800504a:	e011      	b.n	8005070 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504c:	f7fd fe30 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8005050:	0003      	movs	r3, r0
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005054:	e00c      	b.n	8005070 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005056:	2380      	movs	r3, #128	; 0x80
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800505c:	e008      	b.n	8005070 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005062:	231a      	movs	r3, #26
 8005064:	2220      	movs	r2, #32
 8005066:	189b      	adds	r3, r3, r2
 8005068:	19db      	adds	r3, r3, r7
 800506a:	2201      	movs	r2, #1
 800506c:	701a      	strb	r2, [r3, #0]
        break;
 800506e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	2b00      	cmp	r3, #0
 8005074:	d02a      	beq.n	80050cc <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800507a:	4b20      	ldr	r3, [pc, #128]	; (80050fc <UART_SetConfig+0x4e8>)
 800507c:	0052      	lsls	r2, r2, #1
 800507e:	5ad3      	ldrh	r3, [r2, r3]
 8005080:	0019      	movs	r1, r3
 8005082:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005084:	f7fb f83e 	bl	8000104 <__udivsi3>
 8005088:	0003      	movs	r3, r0
 800508a:	001a      	movs	r2, r3
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	18d2      	adds	r2, r2, r3
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	0019      	movs	r1, r3
 800509a:	0010      	movs	r0, r2
 800509c:	f7fb f832 	bl	8000104 <__udivsi3>
 80050a0:	0003      	movs	r3, r0
 80050a2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	2b0f      	cmp	r3, #15
 80050a8:	d90a      	bls.n	80050c0 <UART_SetConfig+0x4ac>
 80050aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	025b      	lsls	r3, r3, #9
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d205      	bcs.n	80050c0 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60da      	str	r2, [r3, #12]
 80050be:	e005      	b.n	80050cc <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80050c0:	231a      	movs	r3, #26
 80050c2:	2220      	movs	r2, #32
 80050c4:	189b      	adds	r3, r3, r2
 80050c6:	19db      	adds	r3, r3, r7
 80050c8:	2201      	movs	r2, #1
 80050ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	226a      	movs	r2, #106	; 0x6a
 80050d0:	2101      	movs	r1, #1
 80050d2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	2268      	movs	r2, #104	; 0x68
 80050d8:	2101      	movs	r1, #1
 80050da:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	2200      	movs	r2, #0
 80050e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	2200      	movs	r2, #0
 80050e6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80050e8:	231a      	movs	r3, #26
 80050ea:	2220      	movs	r2, #32
 80050ec:	189b      	adds	r3, r3, r2
 80050ee:	19db      	adds	r3, r3, r7
 80050f0:	781b      	ldrb	r3, [r3, #0]
}
 80050f2:	0018      	movs	r0, r3
 80050f4:	46bd      	mov	sp, r7
 80050f6:	b010      	add	sp, #64	; 0x40
 80050f8:	bdb0      	pop	{r4, r5, r7, pc}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	08005ee4 	.word	0x08005ee4
 8005100:	00f42400 	.word	0x00f42400

08005104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	2208      	movs	r2, #8
 8005112:	4013      	ands	r3, r2
 8005114:	d00b      	beq.n	800512e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	4a4a      	ldr	r2, [pc, #296]	; (8005248 <UART_AdvFeatureConfig+0x144>)
 800511e:	4013      	ands	r3, r2
 8005120:	0019      	movs	r1, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	2201      	movs	r2, #1
 8005134:	4013      	ands	r3, r2
 8005136:	d00b      	beq.n	8005150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4a43      	ldr	r2, [pc, #268]	; (800524c <UART_AdvFeatureConfig+0x148>)
 8005140:	4013      	ands	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	2202      	movs	r2, #2
 8005156:	4013      	ands	r3, r2
 8005158:	d00b      	beq.n	8005172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	4a3b      	ldr	r2, [pc, #236]	; (8005250 <UART_AdvFeatureConfig+0x14c>)
 8005162:	4013      	ands	r3, r2
 8005164:	0019      	movs	r1, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	2204      	movs	r2, #4
 8005178:	4013      	ands	r3, r2
 800517a:	d00b      	beq.n	8005194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	4a34      	ldr	r2, [pc, #208]	; (8005254 <UART_AdvFeatureConfig+0x150>)
 8005184:	4013      	ands	r3, r2
 8005186:	0019      	movs	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	2210      	movs	r2, #16
 800519a:	4013      	ands	r3, r2
 800519c:	d00b      	beq.n	80051b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	4a2c      	ldr	r2, [pc, #176]	; (8005258 <UART_AdvFeatureConfig+0x154>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	0019      	movs	r1, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	2220      	movs	r2, #32
 80051bc:	4013      	ands	r3, r2
 80051be:	d00b      	beq.n	80051d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	4a25      	ldr	r2, [pc, #148]	; (800525c <UART_AdvFeatureConfig+0x158>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	0019      	movs	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	2240      	movs	r2, #64	; 0x40
 80051de:	4013      	ands	r3, r2
 80051e0:	d01d      	beq.n	800521e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a1d      	ldr	r2, [pc, #116]	; (8005260 <UART_AdvFeatureConfig+0x15c>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	0019      	movs	r1, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051fe:	2380      	movs	r3, #128	; 0x80
 8005200:	035b      	lsls	r3, r3, #13
 8005202:	429a      	cmp	r2, r3
 8005204:	d10b      	bne.n	800521e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	4a15      	ldr	r2, [pc, #84]	; (8005264 <UART_AdvFeatureConfig+0x160>)
 800520e:	4013      	ands	r3, r2
 8005210:	0019      	movs	r1, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	2280      	movs	r2, #128	; 0x80
 8005224:	4013      	ands	r3, r2
 8005226:	d00b      	beq.n	8005240 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4a0e      	ldr	r2, [pc, #56]	; (8005268 <UART_AdvFeatureConfig+0x164>)
 8005230:	4013      	ands	r3, r2
 8005232:	0019      	movs	r1, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	605a      	str	r2, [r3, #4]
  }
}
 8005240:	46c0      	nop			; (mov r8, r8)
 8005242:	46bd      	mov	sp, r7
 8005244:	b002      	add	sp, #8
 8005246:	bd80      	pop	{r7, pc}
 8005248:	ffff7fff 	.word	0xffff7fff
 800524c:	fffdffff 	.word	0xfffdffff
 8005250:	fffeffff 	.word	0xfffeffff
 8005254:	fffbffff 	.word	0xfffbffff
 8005258:	ffffefff 	.word	0xffffefff
 800525c:	ffffdfff 	.word	0xffffdfff
 8005260:	ffefffff 	.word	0xffefffff
 8005264:	ff9fffff 	.word	0xff9fffff
 8005268:	fff7ffff 	.word	0xfff7ffff

0800526c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b092      	sub	sp, #72	; 0x48
 8005270:	af02      	add	r7, sp, #8
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2290      	movs	r2, #144	; 0x90
 8005278:	2100      	movs	r1, #0
 800527a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800527c:	f7fc fcee 	bl	8001c5c <HAL_GetTick>
 8005280:	0003      	movs	r3, r0
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2208      	movs	r2, #8
 800528c:	4013      	ands	r3, r2
 800528e:	2b08      	cmp	r3, #8
 8005290:	d12d      	bne.n	80052ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005294:	2280      	movs	r2, #128	; 0x80
 8005296:	0391      	lsls	r1, r2, #14
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	4a47      	ldr	r2, [pc, #284]	; (80053b8 <UART_CheckIdleState+0x14c>)
 800529c:	9200      	str	r2, [sp, #0]
 800529e:	2200      	movs	r2, #0
 80052a0:	f000 f88e 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 80052a4:	1e03      	subs	r3, r0, #0
 80052a6:	d022      	beq.n	80052ee <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a8:	f3ef 8310 	mrs	r3, PRIMASK
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80052b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80052b2:	2301      	movs	r3, #1
 80052b4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	f383 8810 	msr	PRIMASK, r3
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2180      	movs	r1, #128	; 0x80
 80052ca:	438a      	bics	r2, r1
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	f383 8810 	msr	PRIMASK, r3
}
 80052d8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2288      	movs	r2, #136	; 0x88
 80052de:	2120      	movs	r1, #32
 80052e0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2284      	movs	r2, #132	; 0x84
 80052e6:	2100      	movs	r1, #0
 80052e8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e060      	b.n	80053b0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2204      	movs	r2, #4
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d146      	bne.n	800538a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fe:	2280      	movs	r2, #128	; 0x80
 8005300:	03d1      	lsls	r1, r2, #15
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	4a2c      	ldr	r2, [pc, #176]	; (80053b8 <UART_CheckIdleState+0x14c>)
 8005306:	9200      	str	r2, [sp, #0]
 8005308:	2200      	movs	r2, #0
 800530a:	f000 f859 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 800530e:	1e03      	subs	r3, r0, #0
 8005310:	d03b      	beq.n	800538a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005312:	f3ef 8310 	mrs	r3, PRIMASK
 8005316:	60fb      	str	r3, [r7, #12]
  return(result);
 8005318:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800531a:	637b      	str	r3, [r7, #52]	; 0x34
 800531c:	2301      	movs	r3, #1
 800531e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f383 8810 	msr	PRIMASK, r3
}
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4922      	ldr	r1, [pc, #136]	; (80053bc <UART_CheckIdleState+0x150>)
 8005334:	400a      	ands	r2, r1
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f383 8810 	msr	PRIMASK, r3
}
 8005342:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005344:	f3ef 8310 	mrs	r3, PRIMASK
 8005348:	61bb      	str	r3, [r7, #24]
  return(result);
 800534a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534c:	633b      	str	r3, [r7, #48]	; 0x30
 800534e:	2301      	movs	r3, #1
 8005350:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	f383 8810 	msr	PRIMASK, r3
}
 8005358:	46c0      	nop			; (mov r8, r8)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2101      	movs	r1, #1
 8005366:	438a      	bics	r2, r1
 8005368:	609a      	str	r2, [r3, #8]
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	f383 8810 	msr	PRIMASK, r3
}
 8005374:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	228c      	movs	r2, #140	; 0x8c
 800537a:	2120      	movs	r1, #32
 800537c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2284      	movs	r2, #132	; 0x84
 8005382:	2100      	movs	r1, #0
 8005384:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e012      	b.n	80053b0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2288      	movs	r2, #136	; 0x88
 800538e:	2120      	movs	r1, #32
 8005390:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	228c      	movs	r2, #140	; 0x8c
 8005396:	2120      	movs	r1, #32
 8005398:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2284      	movs	r2, #132	; 0x84
 80053aa:	2100      	movs	r1, #0
 80053ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	0018      	movs	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b010      	add	sp, #64	; 0x40
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	01ffffff 	.word	0x01ffffff
 80053bc:	fffffedf 	.word	0xfffffedf

080053c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	1dfb      	adds	r3, r7, #7
 80053ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d0:	e051      	b.n	8005476 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	3301      	adds	r3, #1
 80053d6:	d04e      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d8:	f7fc fc40 	bl	8001c5c <HAL_GetTick>
 80053dc:	0002      	movs	r2, r0
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d302      	bcc.n	80053ee <UART_WaitOnFlagUntilTimeout+0x2e>
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e051      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2204      	movs	r2, #4
 80053fa:	4013      	ands	r3, r2
 80053fc:	d03b      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0xb6>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b80      	cmp	r3, #128	; 0x80
 8005402:	d038      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	d035      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	2208      	movs	r2, #8
 8005412:	4013      	ands	r3, r2
 8005414:	2b08      	cmp	r3, #8
 8005416:	d111      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2208      	movs	r2, #8
 800541e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	0018      	movs	r0, r3
 8005424:	f000 f83c 	bl	80054a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2290      	movs	r2, #144	; 0x90
 800542c:	2108      	movs	r1, #8
 800542e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2284      	movs	r2, #132	; 0x84
 8005434:	2100      	movs	r1, #0
 8005436:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e02c      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	2380      	movs	r3, #128	; 0x80
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	401a      	ands	r2, r3
 8005448:	2380      	movs	r3, #128	; 0x80
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	429a      	cmp	r2, r3
 800544e:	d112      	bne.n	8005476 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2280      	movs	r2, #128	; 0x80
 8005456:	0112      	lsls	r2, r2, #4
 8005458:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	0018      	movs	r0, r3
 800545e:	f000 f81f 	bl	80054a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2290      	movs	r2, #144	; 0x90
 8005466:	2120      	movs	r1, #32
 8005468:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2284      	movs	r2, #132	; 0x84
 800546e:	2100      	movs	r1, #0
 8005470:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e00f      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	4013      	ands	r3, r2
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	425a      	negs	r2, r3
 8005486:	4153      	adcs	r3, r2
 8005488:	b2db      	uxtb	r3, r3
 800548a:	001a      	movs	r2, r3
 800548c:	1dfb      	adds	r3, r7, #7
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d09e      	beq.n	80053d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	0018      	movs	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	b004      	add	sp, #16
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08e      	sub	sp, #56	; 0x38
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a8:	f3ef 8310 	mrs	r3, PRIMASK
 80054ac:	617b      	str	r3, [r7, #20]
  return(result);
 80054ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054b0:	637b      	str	r3, [r7, #52]	; 0x34
 80054b2:	2301      	movs	r3, #1
 80054b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f383 8810 	msr	PRIMASK, r3
}
 80054bc:	46c0      	nop			; (mov r8, r8)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4926      	ldr	r1, [pc, #152]	; (8005564 <UART_EndRxTransfer+0xc4>)
 80054ca:	400a      	ands	r2, r1
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f383 8810 	msr	PRIMASK, r3
}
 80054d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054da:	f3ef 8310 	mrs	r3, PRIMASK
 80054de:	623b      	str	r3, [r7, #32]
  return(result);
 80054e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054e2:	633b      	str	r3, [r7, #48]	; 0x30
 80054e4:	2301      	movs	r3, #1
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	f383 8810 	msr	PRIMASK, r3
}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	491b      	ldr	r1, [pc, #108]	; (8005568 <UART_EndRxTransfer+0xc8>)
 80054fc:	400a      	ands	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	f383 8810 	msr	PRIMASK, r3
}
 800550a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d118      	bne.n	8005546 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005514:	f3ef 8310 	mrs	r3, PRIMASK
 8005518:	60bb      	str	r3, [r7, #8]
  return(result);
 800551a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800551e:	2301      	movs	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f383 8810 	msr	PRIMASK, r3
}
 8005528:	46c0      	nop			; (mov r8, r8)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2110      	movs	r1, #16
 8005536:	438a      	bics	r2, r1
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f383 8810 	msr	PRIMASK, r3
}
 8005544:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	228c      	movs	r2, #140	; 0x8c
 800554a:	2120      	movs	r1, #32
 800554c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	675a      	str	r2, [r3, #116]	; 0x74
}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	46bd      	mov	sp, r7
 800555e:	b00e      	add	sp, #56	; 0x38
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	fffffedf 	.word	0xfffffedf
 8005568:	effffffe 	.word	0xeffffffe

0800556c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2284      	movs	r2, #132	; 0x84
 8005578:	5c9b      	ldrb	r3, [r3, r2]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_UARTEx_DisableFifoMode+0x16>
 800557e:	2302      	movs	r3, #2
 8005580:	e027      	b.n	80055d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2284      	movs	r2, #132	; 0x84
 8005586:	2101      	movs	r1, #1
 8005588:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2288      	movs	r2, #136	; 0x88
 800558e:	2124      	movs	r1, #36	; 0x24
 8005590:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2101      	movs	r1, #1
 80055a6:	438a      	bics	r2, r1
 80055a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a0b      	ldr	r2, [pc, #44]	; (80055dc <HAL_UARTEx_DisableFifoMode+0x70>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2288      	movs	r2, #136	; 0x88
 80055c4:	2120      	movs	r1, #32
 80055c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2284      	movs	r2, #132	; 0x84
 80055cc:	2100      	movs	r1, #0
 80055ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	0018      	movs	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b004      	add	sp, #16
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	dfffffff 	.word	0xdfffffff

080055e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2284      	movs	r2, #132	; 0x84
 80055ee:	5c9b      	ldrb	r3, [r3, r2]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e02e      	b.n	8005656 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2284      	movs	r2, #132	; 0x84
 80055fc:	2101      	movs	r1, #1
 80055fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2288      	movs	r2, #136	; 0x88
 8005604:	2124      	movs	r1, #36	; 0x24
 8005606:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2101      	movs	r1, #1
 800561c:	438a      	bics	r2, r1
 800561e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	08d9      	lsrs	r1, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	0018      	movs	r0, r3
 8005638:	f000 f854 	bl	80056e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2288      	movs	r2, #136	; 0x88
 8005648:	2120      	movs	r1, #32
 800564a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2284      	movs	r2, #132	; 0x84
 8005650:	2100      	movs	r1, #0
 8005652:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b004      	add	sp, #16
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2284      	movs	r2, #132	; 0x84
 800566e:	5c9b      	ldrb	r3, [r3, r2]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005674:	2302      	movs	r3, #2
 8005676:	e02f      	b.n	80056d8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2284      	movs	r2, #132	; 0x84
 800567c:	2101      	movs	r1, #1
 800567e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2288      	movs	r2, #136	; 0x88
 8005684:	2124      	movs	r1, #36	; 0x24
 8005686:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2101      	movs	r1, #1
 800569c:	438a      	bics	r2, r1
 800569e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	4a0e      	ldr	r2, [pc, #56]	; (80056e0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	0019      	movs	r1, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	0018      	movs	r0, r3
 80056ba:	f000 f813 	bl	80056e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2288      	movs	r2, #136	; 0x88
 80056ca:	2120      	movs	r1, #32
 80056cc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2284      	movs	r2, #132	; 0x84
 80056d2:	2100      	movs	r1, #0
 80056d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	0018      	movs	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	b004      	add	sp, #16
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	f1ffffff 	.word	0xf1ffffff

080056e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d108      	bne.n	8005706 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	226a      	movs	r2, #106	; 0x6a
 80056f8:	2101      	movs	r1, #1
 80056fa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2268      	movs	r2, #104	; 0x68
 8005700:	2101      	movs	r1, #1
 8005702:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005704:	e043      	b.n	800578e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005706:	260f      	movs	r6, #15
 8005708:	19bb      	adds	r3, r7, r6
 800570a:	2208      	movs	r2, #8
 800570c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800570e:	200e      	movs	r0, #14
 8005710:	183b      	adds	r3, r7, r0
 8005712:	2208      	movs	r2, #8
 8005714:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	0e5b      	lsrs	r3, r3, #25
 800571e:	b2da      	uxtb	r2, r3
 8005720:	240d      	movs	r4, #13
 8005722:	193b      	adds	r3, r7, r4
 8005724:	2107      	movs	r1, #7
 8005726:	400a      	ands	r2, r1
 8005728:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	0f5b      	lsrs	r3, r3, #29
 8005732:	b2da      	uxtb	r2, r3
 8005734:	250c      	movs	r5, #12
 8005736:	197b      	adds	r3, r7, r5
 8005738:	2107      	movs	r1, #7
 800573a:	400a      	ands	r2, r1
 800573c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800573e:	183b      	adds	r3, r7, r0
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	197a      	adds	r2, r7, r5
 8005744:	7812      	ldrb	r2, [r2, #0]
 8005746:	4914      	ldr	r1, [pc, #80]	; (8005798 <UARTEx_SetNbDataToProcess+0xb4>)
 8005748:	5c8a      	ldrb	r2, [r1, r2]
 800574a:	435a      	muls	r2, r3
 800574c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800574e:	197b      	adds	r3, r7, r5
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	4a12      	ldr	r2, [pc, #72]	; (800579c <UARTEx_SetNbDataToProcess+0xb8>)
 8005754:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005756:	0019      	movs	r1, r3
 8005758:	f7fa fd5e 	bl	8000218 <__divsi3>
 800575c:	0003      	movs	r3, r0
 800575e:	b299      	uxth	r1, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	226a      	movs	r2, #106	; 0x6a
 8005764:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005766:	19bb      	adds	r3, r7, r6
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	193a      	adds	r2, r7, r4
 800576c:	7812      	ldrb	r2, [r2, #0]
 800576e:	490a      	ldr	r1, [pc, #40]	; (8005798 <UARTEx_SetNbDataToProcess+0xb4>)
 8005770:	5c8a      	ldrb	r2, [r1, r2]
 8005772:	435a      	muls	r2, r3
 8005774:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005776:	193b      	adds	r3, r7, r4
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	4a08      	ldr	r2, [pc, #32]	; (800579c <UARTEx_SetNbDataToProcess+0xb8>)
 800577c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800577e:	0019      	movs	r1, r3
 8005780:	f7fa fd4a 	bl	8000218 <__divsi3>
 8005784:	0003      	movs	r3, r0
 8005786:	b299      	uxth	r1, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2268      	movs	r2, #104	; 0x68
 800578c:	5299      	strh	r1, [r3, r2]
}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b005      	add	sp, #20
 8005794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	08005efc 	.word	0x08005efc
 800579c:	08005f04 	.word	0x08005f04

080057a0 <nrf_read_reg>:
 */

#include "NRF24L01.h"

uint8_t nrf_read_reg(uint8_t reg)
{
 80057a0:	b590      	push	{r4, r7, lr}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	0002      	movs	r2, r0
 80057a8:	1dfb      	adds	r3, r7, #7
 80057aa:	701a      	strb	r2, [r3, #0]
//    HAL_SPI_Transmit(&hspi1, &command, 1, 100);
//    HAL_SPI_Receive(&hspi1, &status, 1, 100);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
//
//    return status;
	uint8_t command = NRF24_CMD_R_REGISTER | reg;
 80057ac:	240f      	movs	r4, #15
 80057ae:	193b      	adds	r3, r7, r4
 80057b0:	1dfa      	adds	r2, r7, #7
 80057b2:	7812      	ldrb	r2, [r2, #0]
 80057b4:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t data;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 80057b6:	23a0      	movs	r3, #160	; 0xa0
 80057b8:	05db      	lsls	r3, r3, #23
 80057ba:	2200      	movs	r2, #0
 80057bc:	2110      	movs	r1, #16
 80057be:	0018      	movs	r0, r3
 80057c0:	f7fc fc92 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 80057c4:	230e      	movs	r3, #14
 80057c6:	18fa      	adds	r2, r7, r3
 80057c8:	1939      	adds	r1, r7, r4
 80057ca:	480e      	ldr	r0, [pc, #56]	; (8005804 <nrf_read_reg+0x64>)
 80057cc:	23fa      	movs	r3, #250	; 0xfa
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	2301      	movs	r3, #1
 80057d4:	f7fd fff2 	bl	80037bc <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&hspi1, &data, 1, 2000);
 80057d8:	23fa      	movs	r3, #250	; 0xfa
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	240d      	movs	r4, #13
 80057de:	1939      	adds	r1, r7, r4
 80057e0:	4808      	ldr	r0, [pc, #32]	; (8005804 <nrf_read_reg+0x64>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	f7fd fe98 	bl	8003518 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 80057e8:	23a0      	movs	r3, #160	; 0xa0
 80057ea:	05db      	lsls	r3, r3, #23
 80057ec:	2201      	movs	r2, #1
 80057ee:	2110      	movs	r1, #16
 80057f0:	0018      	movs	r0, r3
 80057f2:	f7fc fc79 	bl	80020e8 <HAL_GPIO_WritePin>
	return data;
 80057f6:	193b      	adds	r3, r7, r4
 80057f8:	781b      	ldrb	r3, [r3, #0]

}
 80057fa:	0018      	movs	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b005      	add	sp, #20
 8005800:	bd90      	pop	{r4, r7, pc}
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	200000a4 	.word	0x200000a4

08005808 <nrf_write_reg>:
		HAL_SPI_Receive(&hspi1, &data[i], 1, 2000);
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
}

void nrf_write_reg(uint8_t reg, uint8_t value)
{
 8005808:	b5b0      	push	{r4, r5, r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af02      	add	r7, sp, #8
 800580e:	0002      	movs	r2, r0
 8005810:	1dfb      	adds	r3, r7, #7
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	1dbb      	adds	r3, r7, #6
 8005816:	1c0a      	adds	r2, r1, #0
 8005818:	701a      	strb	r2, [r3, #0]
//
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);

	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 800581a:	1dfb      	adds	r3, r7, #7
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2220      	movs	r2, #32
 8005820:	4313      	orrs	r3, r2
 8005822:	b2da      	uxtb	r2, r3
 8005824:	240f      	movs	r4, #15
 8005826:	193b      	adds	r3, r7, r4
 8005828:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t write_val = value;
 800582a:	250d      	movs	r5, #13
 800582c:	197b      	adds	r3, r7, r5
 800582e:	1dba      	adds	r2, r7, #6
 8005830:	7812      	ldrb	r2, [r2, #0]
 8005832:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8005834:	23a0      	movs	r3, #160	; 0xa0
 8005836:	05db      	lsls	r3, r3, #23
 8005838:	2200      	movs	r2, #0
 800583a:	2110      	movs	r1, #16
 800583c:	0018      	movs	r0, r3
 800583e:	f7fc fc53 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8005842:	230e      	movs	r3, #14
 8005844:	18fa      	adds	r2, r7, r3
 8005846:	1939      	adds	r1, r7, r4
 8005848:	480c      	ldr	r0, [pc, #48]	; (800587c <nrf_write_reg+0x74>)
 800584a:	23fa      	movs	r3, #250	; 0xfa
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	2301      	movs	r3, #1
 8005852:	f7fd ffb3 	bl	80037bc <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &write_val, 1, 2000);
 8005856:	23fa      	movs	r3, #250	; 0xfa
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	1979      	adds	r1, r7, r5
 800585c:	4807      	ldr	r0, [pc, #28]	; (800587c <nrf_write_reg+0x74>)
 800585e:	2201      	movs	r2, #1
 8005860:	f7fd fcfa 	bl	8003258 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8005864:	23a0      	movs	r3, #160	; 0xa0
 8005866:	05db      	lsls	r3, r3, #23
 8005868:	2201      	movs	r2, #1
 800586a:	2110      	movs	r1, #16
 800586c:	0018      	movs	r0, r3
 800586e:	f7fc fc3b 	bl	80020e8 <HAL_GPIO_WritePin>

}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	46bd      	mov	sp, r7
 8005876:	b004      	add	sp, #16
 8005878:	bdb0      	pop	{r4, r5, r7, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	200000a4 	.word	0x200000a4

08005880 <nrf_write_reg_multi>:

void nrf_write_reg_multi(uint8_t reg, uint8_t *data, int size)
{
 8005880:	b590      	push	{r4, r7, lr}
 8005882:	b089      	sub	sp, #36	; 0x24
 8005884:	af02      	add	r7, sp, #8
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	210f      	movs	r1, #15
 800588c:	187b      	adds	r3, r7, r1
 800588e:	1c02      	adds	r2, r0, #0
 8005890:	701a      	strb	r2, [r3, #0]
	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 8005892:	187b      	adds	r3, r7, r1
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2220      	movs	r2, #32
 8005898:	4313      	orrs	r3, r2
 800589a:	b2da      	uxtb	r2, r3
 800589c:	2413      	movs	r4, #19
 800589e:	193b      	adds	r3, r7, r4
 80058a0:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	//uint8_t write_val = value;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 80058a2:	23a0      	movs	r3, #160	; 0xa0
 80058a4:	05db      	lsls	r3, r3, #23
 80058a6:	2200      	movs	r2, #0
 80058a8:	2110      	movs	r1, #16
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7fc fc1c 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 80058b0:	2312      	movs	r3, #18
 80058b2:	18fa      	adds	r2, r7, r3
 80058b4:	1939      	adds	r1, r7, r4
 80058b6:	4812      	ldr	r0, [pc, #72]	; (8005900 <nrf_write_reg_multi+0x80>)
 80058b8:	23fa      	movs	r3, #250	; 0xfa
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	2301      	movs	r3, #1
 80058c0:	f7fd ff7c 	bl	80037bc <HAL_SPI_TransmitReceive>
	for (int i = 0; i <size; i++)
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	e00b      	b.n	80058e2 <nrf_write_reg_multi+0x62>
		HAL_SPI_Transmit(&hspi1, &data[i], 1, 2000);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	18d1      	adds	r1, r2, r3
 80058d0:	23fa      	movs	r3, #250	; 0xfa
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	480a      	ldr	r0, [pc, #40]	; (8005900 <nrf_write_reg_multi+0x80>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	f7fd fcbe 	bl	8003258 <HAL_SPI_Transmit>
	for (int i = 0; i <size; i++)
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	3301      	adds	r3, #1
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	dbef      	blt.n	80058ca <nrf_write_reg_multi+0x4a>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 80058ea:	23a0      	movs	r3, #160	; 0xa0
 80058ec:	05db      	lsls	r3, r3, #23
 80058ee:	2201      	movs	r2, #1
 80058f0:	2110      	movs	r1, #16
 80058f2:	0018      	movs	r0, r3
 80058f4:	f7fc fbf8 	bl	80020e8 <HAL_GPIO_WritePin>

}
 80058f8:	46c0      	nop			; (mov r8, r8)
 80058fa:	46bd      	mov	sp, r7
 80058fc:	b007      	add	sp, #28
 80058fe:	bd90      	pop	{r4, r7, pc}
 8005900:	200000a4 	.word	0x200000a4

08005904 <nrf_send_cmd>:

void nrf_send_cmd (uint8_t cmd){
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	0002      	movs	r2, r0
 800590c:	1dfb      	adds	r3, r7, #7
 800590e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8005910:	23a0      	movs	r3, #160	; 0xa0
 8005912:	05db      	lsls	r3, r3, #23
 8005914:	2200      	movs	r2, #0
 8005916:	2110      	movs	r1, #16
 8005918:	0018      	movs	r0, r3
 800591a:	f7fc fbe5 	bl	80020e8 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 800591e:	1df9      	adds	r1, r7, #7
 8005920:	4807      	ldr	r0, [pc, #28]	; (8005940 <nrf_send_cmd+0x3c>)
 8005922:	2364      	movs	r3, #100	; 0x64
 8005924:	2201      	movs	r2, #1
 8005926:	f7fd fc97 	bl	8003258 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 800592a:	23a0      	movs	r3, #160	; 0xa0
 800592c:	05db      	lsls	r3, r3, #23
 800592e:	2201      	movs	r2, #1
 8005930:	2110      	movs	r1, #16
 8005932:	0018      	movs	r0, r3
 8005934:	f7fc fbd8 	bl	80020e8 <HAL_GPIO_WritePin>
}
 8005938:	46c0      	nop			; (mov r8, r8)
 800593a:	46bd      	mov	sp, r7
 800593c:	b002      	add	sp, #8
 800593e:	bd80      	pop	{r7, pc}
 8005940:	200000a4 	.word	0x200000a4

08005944 <nrf_init>:

void nrf_init(void){
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8005948:	23a0      	movs	r3, #160	; 0xa0
 800594a:	05db      	lsls	r3, r3, #23
 800594c:	2200      	movs	r2, #0
 800594e:	2108      	movs	r1, #8
 8005950:	0018      	movs	r0, r3
 8005952:	f7fc fbc9 	bl	80020e8 <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_CONFIG, 0);
 8005956:	2100      	movs	r1, #0
 8005958:	2000      	movs	r0, #0
 800595a:	f7ff ff55 	bl	8005808 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_AA, 0); //Turn off auto ack
 800595e:	2100      	movs	r1, #0
 8005960:	2001      	movs	r0, #1
 8005962:	f7ff ff51 	bl	8005808 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_RXADDR, 0); //Not enabling any data pipe
 8005966:	2100      	movs	r1, #0
 8005968:	2002      	movs	r0, #2
 800596a:	f7ff ff4d 	bl	8005808 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_AW, 0x03); //5 bytes for TX/RX address
 800596e:	2103      	movs	r1, #3
 8005970:	2003      	movs	r0, #3
 8005972:	f7ff ff49 	bl	8005808 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_RETR, 0); //No retransmission
 8005976:	2100      	movs	r1, #0
 8005978:	2004      	movs	r0, #4
 800597a:	f7ff ff45 	bl	8005808 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_CH, 0); //
 800597e:	2100      	movs	r1, #0
 8005980:	2005      	movs	r0, #5
 8005982:	f7ff ff41 	bl	8005808 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_SETUP, 0x0E); //Power = 0dB, data rate = 2Mbps
 8005986:	210e      	movs	r1, #14
 8005988:	2006      	movs	r0, #6
 800598a:	f7ff ff3d 	bl	8005808 <nrf_write_reg>

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800598e:	23a0      	movs	r3, #160	; 0xa0
 8005990:	05db      	lsls	r3, r3, #23
 8005992:	2200      	movs	r2, #0
 8005994:	2108      	movs	r1, #8
 8005996:	0018      	movs	r0, r3
 8005998:	f7fc fba6 	bl	80020e8 <HAL_GPIO_WritePin>

}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <nrf_rx_mode>:
    return 0;


}

void nrf_rx_mode(uint8_t *addr, uint8_t channel){
 80059a2:	b5b0      	push	{r4, r5, r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	000a      	movs	r2, r1
 80059ac:	1cfb      	adds	r3, r7, #3
 80059ae:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80059b0:	23a0      	movs	r3, #160	; 0xa0
 80059b2:	05db      	lsls	r3, r3, #23
 80059b4:	2200      	movs	r2, #0
 80059b6:	2108      	movs	r1, #8
 80059b8:	0018      	movs	r0, r3
 80059ba:	f7fc fb95 	bl	80020e8 <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_RF_CH, channel);
 80059be:	1cfb      	adds	r3, r7, #3
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	0019      	movs	r1, r3
 80059c4:	2005      	movs	r0, #5
 80059c6:	f7ff ff1f 	bl	8005808 <nrf_write_reg>

    uint8_t enrxaddr = nrf_read_reg(NRF24_REG_EN_RXADDR);
 80059ca:	250f      	movs	r5, #15
 80059cc:	197c      	adds	r4, r7, r5
 80059ce:	2002      	movs	r0, #2
 80059d0:	f7ff fee6 	bl	80057a0 <nrf_read_reg>
 80059d4:	0003      	movs	r3, r0
 80059d6:	7023      	strb	r3, [r4, #0]
    enrxaddr = enrxaddr | (1<<1);
 80059d8:	0028      	movs	r0, r5
 80059da:	183b      	adds	r3, r7, r0
 80059dc:	183a      	adds	r2, r7, r0
 80059de:	7812      	ldrb	r2, [r2, #0]
 80059e0:	2102      	movs	r1, #2
 80059e2:	430a      	orrs	r2, r1
 80059e4:	701a      	strb	r2, [r3, #0]
    nrf_write_reg(NRF24_REG_EN_RXADDR, enrxaddr); //select data pipe 1
 80059e6:	183b      	adds	r3, r7, r0
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	0019      	movs	r1, r3
 80059ec:	2002      	movs	r0, #2
 80059ee:	f7ff ff0b 	bl	8005808 <nrf_write_reg>
    nrf_write_reg_multi(NRF24_REG_RX_ADDR_P1, addr, 5); //Write the address
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2205      	movs	r2, #5
 80059f6:	0019      	movs	r1, r3
 80059f8:	200b      	movs	r0, #11
 80059fa:	f7ff ff41 	bl	8005880 <nrf_write_reg_multi>

    nrf_write_reg(NRF24_REG_RX_PW_P1, 32); //Set to 32 bit payload
 80059fe:	2120      	movs	r1, #32
 8005a00:	2012      	movs	r0, #18
 8005a02:	f7ff ff01 	bl	8005808 <nrf_write_reg>

    uint8_t config = nrf_read_reg(NRF24_REG_CONFIG);
 8005a06:	250e      	movs	r5, #14
 8005a08:	197c      	adds	r4, r7, r5
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	f7ff fec8 	bl	80057a0 <nrf_read_reg>
 8005a10:	0003      	movs	r3, r0
 8005a12:	7023      	strb	r3, [r4, #0]
    config = config | (1<<1) | (1<<0);
 8005a14:	0028      	movs	r0, r5
 8005a16:	183b      	adds	r3, r7, r0
 8005a18:	183a      	adds	r2, r7, r0
 8005a1a:	7812      	ldrb	r2, [r2, #0]
 8005a1c:	2103      	movs	r1, #3
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	701a      	strb	r2, [r3, #0]
    nrf_write_reg(NRF24_REG_CONFIG, config);
 8005a22:	183b      	adds	r3, r7, r0
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	0019      	movs	r1, r3
 8005a28:	2000      	movs	r0, #0
 8005a2a:	f7ff feed 	bl	8005808 <nrf_write_reg>
//    uint8_t test = 0;
//    test = nrf_read_reg(NRF24_REG_RF_SETUP);
//    uint8_t test2[5] = {0};
//    nrf_read_reg_multi(NRF24_REG_RX_ADDR_P1, test2, 5);

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8005a2e:	23a0      	movs	r3, #160	; 0xa0
 8005a30:	05db      	lsls	r3, r3, #23
 8005a32:	2201      	movs	r2, #1
 8005a34:	2108      	movs	r1, #8
 8005a36:	0018      	movs	r0, r3
 8005a38:	f7fc fb56 	bl	80020e8 <HAL_GPIO_WritePin>
}
 8005a3c:	46c0      	nop			; (mov r8, r8)
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	b004      	add	sp, #16
 8005a42:	bdb0      	pop	{r4, r5, r7, pc}

08005a44 <is_data_availible>:

uint8_t is_data_availible(int pipenum){
 8005a44:	b5b0      	push	{r4, r5, r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf_read_reg(NRF24_REG_STATUS);
 8005a4c:	250f      	movs	r5, #15
 8005a4e:	197c      	adds	r4, r7, r5
 8005a50:	2007      	movs	r0, #7
 8005a52:	f7ff fea5 	bl	80057a0 <nrf_read_reg>
 8005a56:	0003      	movs	r3, r0
 8005a58:	7023      	strb	r3, [r4, #0]

	if((status & (1<<6)) && (status & (pipenum<<1))){
 8005a5a:	0029      	movs	r1, r5
 8005a5c:	187b      	adds	r3, r7, r1
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2240      	movs	r2, #64	; 0x40
 8005a62:	4013      	ands	r3, r2
 8005a64:	d00b      	beq.n	8005a7e <is_data_availible+0x3a>
 8005a66:	187b      	adds	r3, r7, r1
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	0052      	lsls	r2, r2, #1
 8005a6e:	4013      	ands	r3, r2
 8005a70:	d005      	beq.n	8005a7e <is_data_availible+0x3a>
		nrf_write_reg(NRF24_REG_STATUS,(1<<6));
 8005a72:	2140      	movs	r1, #64	; 0x40
 8005a74:	2007      	movs	r0, #7
 8005a76:	f7ff fec7 	bl	8005808 <nrf_write_reg>

		return 1;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <is_data_availible+0x3c>
	}
	return 0;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	0018      	movs	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b004      	add	sp, #16
 8005a86:	bdb0      	pop	{r4, r5, r7, pc}

08005a88 <nrf_receive>:

void nrf_receive(uint8_t *data){
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 8005a90:	240f      	movs	r4, #15
 8005a92:	193b      	adds	r3, r7, r4
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8005a98:	23a0      	movs	r3, #160	; 0xa0
 8005a9a:	05db      	lsls	r3, r3, #23
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2110      	movs	r1, #16
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f7fc fb21 	bl	80020e8 <HAL_GPIO_WritePin>

    //TX command
    cmd = NRF24_CMD_R_RX_PAYLOAD;
 8005aa6:	193b      	adds	r3, r7, r4
 8005aa8:	2261      	movs	r2, #97	; 0x61
 8005aaa:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8005aac:	1939      	adds	r1, r7, r4
 8005aae:	4811      	ldr	r0, [pc, #68]	; (8005af4 <nrf_receive+0x6c>)
 8005ab0:	2364      	movs	r3, #100	; 0x64
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f7fd fbd0 	bl	8003258 <HAL_SPI_Transmit>

    //TX data send
    HAL_SPI_Receive(&hspi1, data, 32, 1000);
 8005ab8:	23fa      	movs	r3, #250	; 0xfa
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	480d      	ldr	r0, [pc, #52]	; (8005af4 <nrf_receive+0x6c>)
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f7fd fd29 	bl	8003518 <HAL_SPI_Receive>


    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8005ac6:	23a0      	movs	r3, #160	; 0xa0
 8005ac8:	05db      	lsls	r3, r3, #23
 8005aca:	2201      	movs	r2, #1
 8005acc:	2110      	movs	r1, #16
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f7fc fb0a 	bl	80020e8 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8005ad4:	2001      	movs	r0, #1
 8005ad6:	f7fc f8cb 	bl	8001c70 <HAL_Delay>

    cmd = NRF24_CMD_FLUSH_RX;
 8005ada:	193b      	adds	r3, r7, r4
 8005adc:	22e2      	movs	r2, #226	; 0xe2
 8005ade:	701a      	strb	r2, [r3, #0]
    nrf_send_cmd(cmd);
 8005ae0:	193b      	adds	r3, r7, r4
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7ff ff0d 	bl	8005904 <nrf_send_cmd>


}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	46bd      	mov	sp, r7
 8005aee:	b005      	add	sp, #20
 8005af0:	bd90      	pop	{r4, r7, pc}
 8005af2:	46c0      	nop			; (mov r8, r8)
 8005af4:	200000a4 	.word	0x200000a4

08005af8 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 8005b02:	230a      	movs	r3, #10
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	2200      	movs	r2, #0
 8005b08:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e01b      	b.n	8005b48 <crc16+0x50>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 8005b10:	200a      	movs	r0, #10
 8005b12:	183b      	adds	r3, r7, r0
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	0a1b      	lsrs	r3, r3, #8
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	607a      	str	r2, [r7, #4]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	404b      	eors	r3, r1
 8005b26:	22ff      	movs	r2, #255	; 0xff
 8005b28:	401a      	ands	r2, r3
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <crc16+0x68>)
 8005b2c:	0052      	lsls	r2, r2, #1
 8005b2e:	5ad3      	ldrh	r3, [r2, r3]
 8005b30:	b21a      	sxth	r2, r3
 8005b32:	183b      	adds	r3, r7, r0
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	b21b      	sxth	r3, r3
 8005b3a:	4053      	eors	r3, r2
 8005b3c:	b21a      	sxth	r2, r3
 8005b3e:	183b      	adds	r3, r7, r0
 8005b40:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3301      	adds	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d3df      	bcc.n	8005b10 <crc16+0x18>
	}
	return cksum;
 8005b50:	230a      	movs	r3, #10
 8005b52:	18fb      	adds	r3, r7, r3
 8005b54:	881b      	ldrh	r3, [r3, #0]
}
 8005b56:	0018      	movs	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	b004      	add	sp, #16
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	08005f0c 	.word	0x08005f0c

08005b64 <VESCSendMessage>:
			return false;
		break;
	}
}

int VESCSendMessage(uint8_t *payload, int payloadSize){
 8005b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b66:	b0c5      	sub	sp, #276	; 0x114
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
	int count = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	2586      	movs	r5, #134	; 0x86
 8005b72:	006d      	lsls	r5, r5, #1
 8005b74:	197a      	adds	r2, r7, r5
 8005b76:	6013      	str	r3, [r2, #0]
	uint8_t messageSend[256];
	uint16_t crcPayload = crc16(payload, payloadSize);
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	2385      	movs	r3, #133	; 0x85
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	18fc      	adds	r4, r7, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	0011      	movs	r1, r2
 8005b84:	0018      	movs	r0, r3
 8005b86:	f7ff ffb7 	bl	8005af8 <crc16>
 8005b8a:	0003      	movs	r3, r0
 8005b8c:	8023      	strh	r3, [r4, #0]

	if(payloadSize <= 256){
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	429a      	cmp	r2, r3
 8005b96:	dc17      	bgt.n	8005bc8 <VESCSendMessage+0x64>
		messageSend[count++] = 2;
 8005b98:	197b      	adds	r3, r7, r5
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	1979      	adds	r1, r7, r5
 8005ba0:	600a      	str	r2, [r1, #0]
 8005ba2:	4a42      	ldr	r2, [pc, #264]	; (8005cac <VESCSendMessage+0x148>)
 8005ba4:	2088      	movs	r0, #136	; 0x88
 8005ba6:	0040      	lsls	r0, r0, #1
 8005ba8:	1812      	adds	r2, r2, r0
 8005baa:	19d2      	adds	r2, r2, r7
 8005bac:	2102      	movs	r1, #2
 8005bae:	54d1      	strb	r1, [r2, r3]
		messageSend[count++] = payloadSize;
 8005bb0:	197b      	adds	r3, r7, r5
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	1979      	adds	r1, r7, r5
 8005bb8:	600a      	str	r2, [r1, #0]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	b2d1      	uxtb	r1, r2
 8005bbe:	4a3b      	ldr	r2, [pc, #236]	; (8005cac <VESCSendMessage+0x148>)
 8005bc0:	1812      	adds	r2, r2, r0
 8005bc2:	19d2      	adds	r2, r2, r7
 8005bc4:	54d1      	strb	r1, [r2, r3]
 8005bc6:	e024      	b.n	8005c12 <VESCSendMessage+0xae>
	}
	else{
		messageSend[count++] = 3;
 8005bc8:	2086      	movs	r0, #134	; 0x86
 8005bca:	0040      	lsls	r0, r0, #1
 8005bcc:	183b      	adds	r3, r7, r0
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	1839      	adds	r1, r7, r0
 8005bd4:	600a      	str	r2, [r1, #0]
 8005bd6:	4a35      	ldr	r2, [pc, #212]	; (8005cac <VESCSendMessage+0x148>)
 8005bd8:	2488      	movs	r4, #136	; 0x88
 8005bda:	0064      	lsls	r4, r4, #1
 8005bdc:	1912      	adds	r2, r2, r4
 8005bde:	19d2      	adds	r2, r2, r7
 8005be0:	2103      	movs	r1, #3
 8005be2:	54d1      	strb	r1, [r2, r3]
		messageSend[count++] = (uint8_t)(payloadSize >> 8);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	1219      	asrs	r1, r3, #8
 8005be8:	183b      	adds	r3, r7, r0
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	183d      	adds	r5, r7, r0
 8005bf0:	602a      	str	r2, [r5, #0]
 8005bf2:	b2c9      	uxtb	r1, r1
 8005bf4:	4a2d      	ldr	r2, [pc, #180]	; (8005cac <VESCSendMessage+0x148>)
 8005bf6:	1912      	adds	r2, r2, r4
 8005bf8:	19d2      	adds	r2, r2, r7
 8005bfa:	54d1      	strb	r1, [r2, r3]
		messageSend[count++] = (uint8_t)(payloadSize & 0xFF);
 8005bfc:	183b      	adds	r3, r7, r0
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	1839      	adds	r1, r7, r0
 8005c04:	600a      	str	r2, [r1, #0]
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	b2d1      	uxtb	r1, r2
 8005c0a:	4a28      	ldr	r2, [pc, #160]	; (8005cac <VESCSendMessage+0x148>)
 8005c0c:	1912      	adds	r2, r2, r4
 8005c0e:	19d2      	adds	r2, r2, r7
 8005c10:	54d1      	strb	r1, [r2, r3]
	}

	memcpy(messageSend + count, payload, payloadSize);
 8005c12:	2486      	movs	r4, #134	; 0x86
 8005c14:	0064      	lsls	r4, r4, #1
 8005c16:	193b      	adds	r3, r7, r4
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2608      	movs	r6, #8
 8005c1c:	19ba      	adds	r2, r7, r6
 8005c1e:	18d3      	adds	r3, r2, r3
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	0018      	movs	r0, r3
 8005c26:	f000 f8ed 	bl	8005e04 <memcpy>
	count += payloadSize;
 8005c2a:	193b      	adds	r3, r7, r4
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	18d3      	adds	r3, r2, r3
 8005c32:	0022      	movs	r2, r4
 8005c34:	1939      	adds	r1, r7, r4
 8005c36:	600b      	str	r3, [r1, #0]

	messageSend[count++] = (uint8_t)(crcPayload >> 8);
 8005c38:	2585      	movs	r5, #133	; 0x85
 8005c3a:	006d      	lsls	r5, r5, #1
 8005c3c:	197b      	adds	r3, r7, r5
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	0a1b      	lsrs	r3, r3, #8
 8005c42:	b299      	uxth	r1, r3
 8005c44:	0010      	movs	r0, r2
 8005c46:	183b      	adds	r3, r7, r0
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	183c      	adds	r4, r7, r0
 8005c4e:	6022      	str	r2, [r4, #0]
 8005c50:	b2c9      	uxtb	r1, r1
 8005c52:	4a16      	ldr	r2, [pc, #88]	; (8005cac <VESCSendMessage+0x148>)
 8005c54:	2488      	movs	r4, #136	; 0x88
 8005c56:	0064      	lsls	r4, r4, #1
 8005c58:	1912      	adds	r2, r2, r4
 8005c5a:	19d2      	adds	r2, r2, r7
 8005c5c:	54d1      	strb	r1, [r2, r3]
	messageSend[count++] = (uint8_t)(crcPayload & 0xFF);
 8005c5e:	183b      	adds	r3, r7, r0
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	1839      	adds	r1, r7, r0
 8005c66:	600a      	str	r2, [r1, #0]
 8005c68:	197a      	adds	r2, r7, r5
 8005c6a:	8812      	ldrh	r2, [r2, #0]
 8005c6c:	b2d1      	uxtb	r1, r2
 8005c6e:	4a0f      	ldr	r2, [pc, #60]	; (8005cac <VESCSendMessage+0x148>)
 8005c70:	0025      	movs	r5, r4
 8005c72:	1912      	adds	r2, r2, r4
 8005c74:	19d2      	adds	r2, r2, r7
 8005c76:	54d1      	strb	r1, [r2, r3]
	messageSend[count++] = 3;
 8005c78:	0004      	movs	r4, r0
 8005c7a:	193b      	adds	r3, r7, r4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	1939      	adds	r1, r7, r4
 8005c82:	600a      	str	r2, [r1, #0]
 8005c84:	4a09      	ldr	r2, [pc, #36]	; (8005cac <VESCSendMessage+0x148>)
 8005c86:	1952      	adds	r2, r2, r5
 8005c88:	19d2      	adds	r2, r2, r7
 8005c8a:	2103      	movs	r1, #3
 8005c8c:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit(&huart1, messageSend, count, HAL_MAX_DELAY);
 8005c8e:	193b      	adds	r3, r7, r4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	2301      	movs	r3, #1
 8005c96:	425b      	negs	r3, r3
 8005c98:	19b9      	adds	r1, r7, r6
 8005c9a:	4805      	ldr	r0, [pc, #20]	; (8005cb0 <VESCSendMessage+0x14c>)
 8005c9c:	f7fe ff16 	bl	8004acc <HAL_UART_Transmit>

	return count;
 8005ca0:	193b      	adds	r3, r7, r4
 8005ca2:	681b      	ldr	r3, [r3, #0]
}
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	b045      	add	sp, #276	; 0x114
 8005caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cac:	fffffef8 	.word	0xfffffef8
 8005cb0:	20000154 	.word	0x20000154

08005cb4 <VESCSetCurrent>:
		return VESCProcessPacket(message);
	}
	return 0;
}

void VESCSetCurrent(float current, uint8_t CAN_ID){
 8005cb4:	b590      	push	{r4, r7, lr}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	000a      	movs	r2, r1
 8005cbe:	1cfb      	adds	r3, r7, #3
 8005cc0:	701a      	strb	r2, [r3, #0]
	int32_t index = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
	int payloadSize = (CAN_ID == 0 ? 5 : 7);
 8005cc6:	1cfb      	adds	r3, r7, #3
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <VESCSetCurrent+0x1e>
 8005cce:	2305      	movs	r3, #5
 8005cd0:	e000      	b.n	8005cd4 <VESCSetCurrent+0x20>
 8005cd2:	2307      	movs	r3, #7
 8005cd4:	617b      	str	r3, [r7, #20]
	uint8_t payload[7];
	if (CAN_ID != 0) {
 8005cd6:	1cfb      	adds	r3, r7, #3
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00d      	beq.n	8005cfa <VESCSetCurrent+0x46>
		payload[index++] = COMM_FORWARD_CAN;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	613a      	str	r2, [r7, #16]
 8005ce4:	2008      	movs	r0, #8
 8005ce6:	183a      	adds	r2, r7, r0
 8005ce8:	2122      	movs	r1, #34	; 0x22
 8005cea:	54d1      	strb	r1, [r2, r3]
		payload[index++] = CAN_ID;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	613a      	str	r2, [r7, #16]
 8005cf2:	183a      	adds	r2, r7, r0
 8005cf4:	1cf9      	adds	r1, r7, #3
 8005cf6:	7809      	ldrb	r1, [r1, #0]
 8005cf8:	54d1      	strb	r1, [r2, r3]
	}
	payload[index++] = COMM_SET_CURRENT;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	613a      	str	r2, [r7, #16]
 8005d00:	2408      	movs	r4, #8
 8005d02:	193a      	adds	r2, r7, r4
 8005d04:	2106      	movs	r1, #6
 8005d06:	54d1      	strb	r1, [r2, r3]
	buffer_append_int32(payload, (int32_t)(current * 1000), &index);
 8005d08:	490c      	ldr	r1, [pc, #48]	; (8005d3c <VESCSetCurrent+0x88>)
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fa fd46 	bl	800079c <__aeabi_fmul>
 8005d10:	1c03      	adds	r3, r0, #0
 8005d12:	1c18      	adds	r0, r3, #0
 8005d14:	f7fa fe90 	bl	8000a38 <__aeabi_f2iz>
 8005d18:	0001      	movs	r1, r0
 8005d1a:	2310      	movs	r3, #16
 8005d1c:	18fa      	adds	r2, r7, r3
 8005d1e:	193b      	adds	r3, r7, r4
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 f80d 	bl	8005d40 <buffer_append_int32>
	VESCSendMessage(payload, payloadSize);
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	193b      	adds	r3, r7, r4
 8005d2a:	0011      	movs	r1, r2
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f7ff ff19 	bl	8005b64 <VESCSendMessage>
}
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b007      	add	sp, #28
 8005d38:	bd90      	pop	{r4, r7, pc}
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	447a0000 	.word	0x447a0000

08005d40 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	1618      	asrs	r0, r3, #24
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	1c51      	adds	r1, r2, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6019      	str	r1, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	189b      	adds	r3, r3, r2
 8005d5e:	b2c2      	uxtb	r2, r0
 8005d60:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	1418      	asrs	r0, r3, #16
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	1c51      	adds	r1, r2, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6019      	str	r1, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	189b      	adds	r3, r3, r2
 8005d74:	b2c2      	uxtb	r2, r0
 8005d76:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	1218      	asrs	r0, r3, #8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	1c51      	adds	r1, r2, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6019      	str	r1, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	189b      	adds	r3, r3, r2
 8005d8a:	b2c2      	uxtb	r2, r0
 8005d8c:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	1c51      	adds	r1, r2, #1
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6019      	str	r1, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	189b      	adds	r3, r3, r2
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b004      	add	sp, #16
 8005da8:	bd80      	pop	{r7, pc}

08005daa <memset>:
 8005daa:	0003      	movs	r3, r0
 8005dac:	1882      	adds	r2, r0, r2
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d100      	bne.n	8005db4 <memset+0xa>
 8005db2:	4770      	bx	lr
 8005db4:	7019      	strb	r1, [r3, #0]
 8005db6:	3301      	adds	r3, #1
 8005db8:	e7f9      	b.n	8005dae <memset+0x4>
	...

08005dbc <__libc_init_array>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	2600      	movs	r6, #0
 8005dc0:	4c0c      	ldr	r4, [pc, #48]	; (8005df4 <__libc_init_array+0x38>)
 8005dc2:	4d0d      	ldr	r5, [pc, #52]	; (8005df8 <__libc_init_array+0x3c>)
 8005dc4:	1b64      	subs	r4, r4, r5
 8005dc6:	10a4      	asrs	r4, r4, #2
 8005dc8:	42a6      	cmp	r6, r4
 8005dca:	d109      	bne.n	8005de0 <__libc_init_array+0x24>
 8005dcc:	2600      	movs	r6, #0
 8005dce:	f000 f823 	bl	8005e18 <_init>
 8005dd2:	4c0a      	ldr	r4, [pc, #40]	; (8005dfc <__libc_init_array+0x40>)
 8005dd4:	4d0a      	ldr	r5, [pc, #40]	; (8005e00 <__libc_init_array+0x44>)
 8005dd6:	1b64      	subs	r4, r4, r5
 8005dd8:	10a4      	asrs	r4, r4, #2
 8005dda:	42a6      	cmp	r6, r4
 8005ddc:	d105      	bne.n	8005dea <__libc_init_array+0x2e>
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
 8005de0:	00b3      	lsls	r3, r6, #2
 8005de2:	58eb      	ldr	r3, [r5, r3]
 8005de4:	4798      	blx	r3
 8005de6:	3601      	adds	r6, #1
 8005de8:	e7ee      	b.n	8005dc8 <__libc_init_array+0xc>
 8005dea:	00b3      	lsls	r3, r6, #2
 8005dec:	58eb      	ldr	r3, [r5, r3]
 8005dee:	4798      	blx	r3
 8005df0:	3601      	adds	r6, #1
 8005df2:	e7f2      	b.n	8005dda <__libc_init_array+0x1e>
 8005df4:	08006114 	.word	0x08006114
 8005df8:	08006114 	.word	0x08006114
 8005dfc:	08006118 	.word	0x08006118
 8005e00:	08006114 	.word	0x08006114

08005e04 <memcpy>:
 8005e04:	2300      	movs	r3, #0
 8005e06:	b510      	push	{r4, lr}
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d100      	bne.n	8005e0e <memcpy+0xa>
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	5ccc      	ldrb	r4, [r1, r3]
 8005e10:	54c4      	strb	r4, [r0, r3]
 8005e12:	3301      	adds	r3, #1
 8005e14:	e7f8      	b.n	8005e08 <memcpy+0x4>
	...

08005e18 <_init>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1e:	bc08      	pop	{r3}
 8005e20:	469e      	mov	lr, r3
 8005e22:	4770      	bx	lr

08005e24 <_fini>:
 8005e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2a:	bc08      	pop	{r3}
 8005e2c:	469e      	mov	lr, r3
 8005e2e:	4770      	bx	lr
