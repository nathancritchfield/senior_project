
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004754  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004810  08004810  00014810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f4  080048f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048fc  080048fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048fc  080048fc  000148fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004900  08004900  00014900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08004910  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004910  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015566  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ee7  00000000  00000000  000355dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  000384c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f20  00000000  00000000  000397f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001786d  00000000  00000000  0003a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b08  00000000  00000000  00051f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094aa2  00000000  00000000  0006ba8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004584  00000000  00000000  00100530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00104ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080047f8 	.word	0x080047f8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080047f8 	.word	0x080047f8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	; 0x24
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	240c      	movs	r4, #12
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f004 f8b7 	bl	80047a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b44      	ldr	r3, [pc, #272]	; (8000744 <MX_GPIO_Init+0x128>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000636:	4b43      	ldr	r3, [pc, #268]	; (8000744 <MX_GPIO_Init+0x128>)
 8000638:	2102      	movs	r1, #2
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
 800063e:	4b41      	ldr	r3, [pc, #260]	; (8000744 <MX_GPIO_Init+0x128>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000642:	2202      	movs	r2, #2
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <MX_GPIO_Init+0x128>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064e:	4b3d      	ldr	r3, [pc, #244]	; (8000744 <MX_GPIO_Init+0x128>)
 8000650:	2104      	movs	r1, #4
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
 8000656:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <MX_GPIO_Init+0x128>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065a:	2204      	movs	r2, #4
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <MX_GPIO_Init+0x128>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000666:	4b37      	ldr	r3, [pc, #220]	; (8000744 <MX_GPIO_Init+0x128>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
 800066e:	4b35      	ldr	r3, [pc, #212]	; (8000744 <MX_GPIO_Init+0x128>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	4832      	ldr	r0, [pc, #200]	; (8000748 <MX_GPIO_Init+0x12c>)
 8000680:	2200      	movs	r2, #0
 8000682:	0019      	movs	r1, r3
 8000684:	f000 ff48 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SK6812_OUT_GPIO_Port, SK6812_OUT_Pin, GPIO_PIN_RESET);
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	482f      	ldr	r0, [pc, #188]	; (800074c <MX_GPIO_Init+0x130>)
 800068e:	2200      	movs	r2, #0
 8000690:	0019      	movs	r1, r3
 8000692:	f000 ff41 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GEN_OUT_Pin|SPI1_CE_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 8000696:	23a0      	movs	r3, #160	; 0xa0
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2200      	movs	r2, #0
 800069c:	2189      	movs	r1, #137	; 0x89
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 ff3a 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WP_Pin;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2201      	movs	r2, #1
 80006b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <MX_GPIO_Init+0x12c>)
 80006c2:	0019      	movs	r1, r3
 80006c4:	0010      	movs	r0, r2
 80006c6:	f000 fdc3 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SK6812_OUT_Pin;
 80006ca:	0021      	movs	r1, r4
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0212      	lsls	r2, r2, #8
 80006d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	000c      	movs	r4, r1
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2201      	movs	r2, #1
 80006da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SK6812_OUT_GPIO_Port, &GPIO_InitStruct);
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <MX_GPIO_Init+0x130>)
 80006ec:	0019      	movs	r1, r3
 80006ee:	0010      	movs	r0, r2
 80006f0:	f000 fdae 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = GEN_OUT_Pin|SPI1_CE_Pin|STATUS_LED_Pin;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2289      	movs	r2, #137	; 0x89
 80006f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2201      	movs	r2, #1
 80006fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	193a      	adds	r2, r7, r4
 800070e:	23a0      	movs	r3, #160	; 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fd9b 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2220      	movs	r2, #32
 800071e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 800072c:	193a      	adds	r2, r7, r4
 800072e:	23a0      	movs	r3, #160	; 0xa0
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fd8b 	bl	8001250 <HAL_GPIO_Init>

}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b009      	add	sp, #36	; 0x24
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40021000 	.word	0x40021000
 8000748:	50000400 	.word	0x50000400
 800074c:	50000800 	.word	0x50000800

08000750 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_I2C2_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_I2C2_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <MX_I2C2_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000768:	2201      	movs	r2, #1
 800076a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_I2C2_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C2_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2C2_Init+0x74>)
 800078c:	0018      	movs	r0, r3
 800078e:	f000 fee1 	bl	8001554 <HAL_I2C_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000796:	f000 f935 	bl	8000a04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2C2_Init+0x74>)
 800079c:	2100      	movs	r1, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 fc8c 	bl	80020bc <HAL_I2CEx_ConfigAnalogFilter>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007a8:	f000 f92c 	bl	8000a04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <MX_I2C2_Init+0x74>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fccf 	bl	8002154 <HAL_I2CEx_ConfigDigitalFilter>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 f923 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000028 	.word	0x20000028
 80007c8:	40005800 	.word	0x40005800
 80007cc:	00303d5b 	.word	0x00303d5b

080007d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b08b      	sub	sp, #44	; 0x2c
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	2414      	movs	r4, #20
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	0018      	movs	r0, r3
 80007de:	2314      	movs	r3, #20
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f003 ffdc 	bl	80047a0 <memset>
  if(i2cHandle->Instance==I2C2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <HAL_I2C_MspInit+0x90>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d131      	bne.n	8000856 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_I2C_MspInit+0x94>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_I2C_MspInit+0x94>)
 80007f8:	2101      	movs	r1, #1
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_I2C_MspInit+0x94>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000802:	2201      	movs	r2, #1
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	22c0      	movs	r2, #192	; 0xc0
 800080e:	0152      	lsls	r2, r2, #5
 8000810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000812:	0021      	movs	r1, r4
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2212      	movs	r2, #18
 8000818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2201      	movs	r2, #1
 800081e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2203      	movs	r2, #3
 8000824:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2206      	movs	r2, #6
 800082a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	187a      	adds	r2, r7, r1
 800082e:	23a0      	movs	r3, #160	; 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fd0b 	bl	8001250 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_I2C_MspInit+0x94>)
 800083c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_I2C_MspInit+0x94>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	03c9      	lsls	r1, r1, #15
 8000844:	430a      	orrs	r2, r1
 8000846:	63da      	str	r2, [r3, #60]	; 0x3c
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_I2C_MspInit+0x94>)
 800084a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	03db      	lsls	r3, r3, #15
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b00b      	add	sp, #44	; 0x2c
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40005800 	.word	0x40005800
 8000864:	40021000 	.word	0x40021000

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b5b0      	push	{r4, r5, r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f000 fb91 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f87f 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f7ff fed1 	bl	800061c <MX_GPIO_Init>
  MX_I2C2_Init();
 800087a:	f7ff ff69 	bl	8000750 <MX_I2C2_Init>
  MX_SPI1_Init();
 800087e:	f000 f8c7 	bl	8000a10 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000882:	f000 f98d 	bl	8000ba0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000886:	f000 faab 	bl	8000de0 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t tx_buf[3] = {0x05, 0x00, 0x00};
 800088a:	240c      	movs	r4, #12
 800088c:	193b      	adds	r3, r7, r4
 800088e:	4a35      	ldr	r2, [pc, #212]	; (8000964 <main+0xfc>)
 8000890:	8811      	ldrh	r1, [r2, #0]
 8000892:	8019      	strh	r1, [r3, #0]
 8000894:	7892      	ldrb	r2, [r2, #2]
 8000896:	709a      	strb	r2, [r3, #2]
  uint8_t offset[1] = {0x05};
 8000898:	2508      	movs	r5, #8
 800089a:	197b      	adds	r3, r7, r5
 800089c:	4a32      	ldr	r2, [pc, #200]	; (8000968 <main+0x100>)
 800089e:	7812      	ldrb	r2, [r2, #0]
 80008a0:	701a      	strb	r2, [r3, #0]
  uint8_t rx_buf[2] = {0x00, 0x00};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	482f      	ldr	r0, [pc, #188]	; (800096c <main+0x104>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	0019      	movs	r1, r3
 80008b2:	f000 fe31 	bl	8001518 <HAL_GPIO_WritePin>

  HAL_I2C_Master_Transmit(&hi2c2, 0xA0, offset, 1, HAL_MAX_DELAY);
 80008b6:	197a      	adds	r2, r7, r5
 80008b8:	482d      	ldr	r0, [pc, #180]	; (8000970 <main+0x108>)
 80008ba:	2301      	movs	r3, #1
 80008bc:	425b      	negs	r3, r3
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2301      	movs	r3, #1
 80008c2:	21a0      	movs	r1, #160	; 0xa0
 80008c4:	f000 feec 	bl	80016a0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, 0xA0, rx_buf, 2, HAL_MAX_DELAY);
 80008c8:	1d3a      	adds	r2, r7, #4
 80008ca:	4829      	ldr	r0, [pc, #164]	; (8000970 <main+0x108>)
 80008cc:	2301      	movs	r3, #1
 80008ce:	425b      	negs	r3, r3
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2302      	movs	r3, #2
 80008d4:	21a0      	movs	r1, #160	; 0xa0
 80008d6:	f001 f80d 	bl	80018f4 <HAL_I2C_Master_Receive>

  tx_buf[2] = rx_buf[1];
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	785a      	ldrb	r2, [r3, #1]
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	709a      	strb	r2, [r3, #2]
  tx_buf[1] = rx_buf[0];
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	705a      	strb	r2, [r3, #1]


  while (1)
  {

	  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET);
 80008ea:	23a0      	movs	r3, #160	; 0xa0
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	2201      	movs	r2, #1
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 fe10 	bl	8001518 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80008f8:	23fa      	movs	r3, #250	; 0xfa
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fbcf 	bl	80010a0 <HAL_Delay>
	  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	2200      	movs	r2, #0
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0018      	movs	r0, r3
 800090c:	f000 fe04 	bl	8001518 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000910:	23fa      	movs	r3, #250	; 0xfa
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fbc3 	bl	80010a0 <HAL_Delay>

	  HAL_I2C_Master_Transmit(&hi2c2, 0xA0, tx_buf, 3, HAL_MAX_DELAY);
 800091a:	240c      	movs	r4, #12
 800091c:	193a      	adds	r2, r7, r4
 800091e:	4814      	ldr	r0, [pc, #80]	; (8000970 <main+0x108>)
 8000920:	2301      	movs	r3, #1
 8000922:	425b      	negs	r3, r3
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2303      	movs	r3, #3
 8000928:	21a0      	movs	r1, #160	; 0xa0
 800092a:	f000 feb9 	bl	80016a0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c2, 0xA0, offset, 1, HAL_MAX_DELAY);
 800092e:	2308      	movs	r3, #8
 8000930:	18fa      	adds	r2, r7, r3
 8000932:	480f      	ldr	r0, [pc, #60]	; (8000970 <main+0x108>)
 8000934:	2301      	movs	r3, #1
 8000936:	425b      	negs	r3, r3
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2301      	movs	r3, #1
 800093c:	21a0      	movs	r1, #160	; 0xa0
 800093e:	f000 feaf 	bl	80016a0 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c2, 0xA0, rx_buf, 2, HAL_MAX_DELAY);
 8000942:	1d3a      	adds	r2, r7, #4
 8000944:	480a      	ldr	r0, [pc, #40]	; (8000970 <main+0x108>)
 8000946:	2301      	movs	r3, #1
 8000948:	425b      	negs	r3, r3
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	2302      	movs	r3, #2
 800094e:	21a0      	movs	r1, #160	; 0xa0
 8000950:	f000 ffd0 	bl	80018f4 <HAL_I2C_Master_Receive>

	  tx_buf[2]++;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	789b      	ldrb	r3, [r3, #2]
 8000958:	3301      	adds	r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	193b      	adds	r3, r7, r4
 800095e:	709a      	strb	r2, [r3, #2]
	  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET);
 8000960:	e7c3      	b.n	80008ea <main+0x82>
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	08004810 	.word	0x08004810
 8000968:	08004814 	.word	0x08004814
 800096c:	50000400 	.word	0x50000400
 8000970:	20000028 	.word	0x20000028

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b093      	sub	sp, #76	; 0x4c
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	2410      	movs	r4, #16
 800097c:	193b      	adds	r3, r7, r4
 800097e:	0018      	movs	r0, r3
 8000980:	2338      	movs	r3, #56	; 0x38
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f003 ff0b 	bl	80047a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098a:	003b      	movs	r3, r7
 800098c:	0018      	movs	r0, r3
 800098e:	2310      	movs	r3, #16
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f003 ff04 	bl	80047a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	0018      	movs	r0, r3
 800099e:	f001 fc25 	bl	80021ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2202      	movs	r2, #2
 80009a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	0052      	lsls	r2, r2, #1
 80009ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2240      	movs	r2, #64	; 0x40
 80009ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 fc5d 	bl	8002284 <HAL_RCC_OscConfig>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80009ce:	f000 f819 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	003b      	movs	r3, r7
 80009d4:	2207      	movs	r2, #7
 80009d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009d8:	003b      	movs	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	003b      	movs	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e4:	003b      	movs	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ea:	003b      	movs	r3, r7
 80009ec:	2100      	movs	r1, #0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 ff62 	bl	80028b8 <HAL_RCC_ClockConfig>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80009f8:	f000 f804 	bl	8000a04 <Error_Handler>
  }
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b013      	add	sp, #76	; 0x4c
 8000a02:	bd90      	pop	{r4, r7, pc}

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a16:	4a1c      	ldr	r2, [pc, #112]	; (8000a88 <MX_SPI1_Init+0x78>)
 8000a18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a1c:	2282      	movs	r2, #130	; 0x82
 8000a1e:	0052      	lsls	r2, r2, #1
 8000a20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a2a:	22e0      	movs	r2, #224	; 0xe0
 8000a2c:	00d2      	lsls	r2, r2, #3
 8000a2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	02d2      	lsls	r2, r2, #11
 8000a42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a5e:	2207      	movs	r2, #7
 8000a60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <MX_SPI1_Init+0x74>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f002 fa45 	bl	8002f00 <HAL_SPI_Init>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d001      	beq.n	8000a7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a7a:	f7ff ffc3 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000007c 	.word	0x2000007c
 8000a88:	40013000 	.word	0x40013000

08000a8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b08b      	sub	sp, #44	; 0x2c
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	2414      	movs	r4, #20
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f003 fe7e 	bl	80047a0 <memset>
  if(spiHandle->Instance==SPI1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <HAL_SPI_MspInit+0x8c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d130      	bne.n	8000b10 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <HAL_SPI_MspInit+0x90>)
 8000ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <HAL_SPI_MspInit+0x90>)
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	0149      	lsls	r1, r1, #5
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	641a      	str	r2, [r3, #64]	; 0x40
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_SPI_MspInit+0x90>)
 8000abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	015b      	lsls	r3, r3, #5
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_SPI_MspInit+0x90>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <HAL_SPI_MspInit+0x90>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_SPI_MspInit+0x90>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	2201      	movs	r2, #1
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8000ae2:	0021      	movs	r1, r4
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2256      	movs	r2, #86	; 0x56
 8000ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2202      	movs	r2, #2
 8000aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	187a      	adds	r2, r7, r1
 8000b04:	23a0      	movs	r3, #160	; 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 fba0 	bl	8001250 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b00b      	add	sp, #44	; 0x2c
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	40013000 	.word	0x40013000
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_MspInit+0x44>)
 8000b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_MspInit+0x44>)
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	641a      	str	r2, [r3, #64]	; 0x40
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_MspInit+0x44>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	2201      	movs	r2, #1
 8000b38:	4013      	ands	r3, r2
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_MspInit+0x44>)
 8000b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_MspInit+0x44>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	0549      	lsls	r1, r1, #21
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_MspInit+0x44>)
 8000b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	055b      	lsls	r3, r3, #21
 8000b54:	4013      	ands	r3, r2
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	40021000 	.word	0x40021000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 fa6c 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b098      	sub	sp, #96	; 0x60
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba6:	2354      	movs	r3, #84	; 0x54
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	0018      	movs	r0, r3
 8000bac:	230c      	movs	r3, #12
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f003 fdf5 	bl	80047a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb6:	2338      	movs	r3, #56	; 0x38
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	0018      	movs	r0, r3
 8000bbc:	231c      	movs	r3, #28
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f003 fded 	bl	80047a0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	0018      	movs	r0, r3
 8000bca:	2334      	movs	r3, #52	; 0x34
 8000bcc:	001a      	movs	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f003 fde6 	bl	80047a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bd4:	4b45      	ldr	r3, [pc, #276]	; (8000cec <MX_TIM1_Init+0x14c>)
 8000bd6:	4a46      	ldr	r2, [pc, #280]	; (8000cf0 <MX_TIM1_Init+0x150>)
 8000bd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bda:	4b44      	ldr	r3, [pc, #272]	; (8000cec <MX_TIM1_Init+0x14c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b42      	ldr	r3, [pc, #264]	; (8000cec <MX_TIM1_Init+0x14c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000be6:	4b41      	ldr	r3, [pc, #260]	; (8000cec <MX_TIM1_Init+0x14c>)
 8000be8:	4a42      	ldr	r2, [pc, #264]	; (8000cf4 <MX_TIM1_Init+0x154>)
 8000bea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b3f      	ldr	r3, [pc, #252]	; (8000cec <MX_TIM1_Init+0x14c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bf2:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <MX_TIM1_Init+0x14c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf8:	4b3c      	ldr	r3, [pc, #240]	; (8000cec <MX_TIM1_Init+0x14c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bfe:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <MX_TIM1_Init+0x14c>)
 8000c00:	0018      	movs	r0, r3
 8000c02:	f002 fa35 	bl	8003070 <HAL_TIM_PWM_Init>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c0a:	f7ff fefb 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0e:	2154      	movs	r1, #84	; 0x54
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c22:	187a      	adds	r2, r7, r1
 8000c24:	4b31      	ldr	r3, [pc, #196]	; (8000cec <MX_TIM1_Init+0x14c>)
 8000c26:	0011      	movs	r1, r2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f002 fe99 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c32:	f7ff fee7 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c36:	2138      	movs	r1, #56	; 0x38
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2260      	movs	r2, #96	; 0x60
 8000c3c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c62:	1879      	adds	r1, r7, r1
 8000c64:	4b21      	ldr	r3, [pc, #132]	; (8000cec <MX_TIM1_Init+0x14c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f002 fa59 	bl	8003120 <HAL_TIM_PWM_ConfigChannel>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000c72:	f7ff fec7 	bl	8000a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	0192      	lsls	r2, r2, #6
 8000c9a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0492      	lsls	r2, r2, #18
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cc8:	1d3a      	adds	r2, r7, #4
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_TIM1_Init+0x14c>)
 8000ccc:	0011      	movs	r1, r2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f002 feae 	bl	8003a30 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000cd8:	f7ff fe94 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <MX_TIM1_Init+0x14c>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 f840 	bl	8000d64 <HAL_TIM_MspPostInit>

}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b018      	add	sp, #96	; 0x60
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200000e0 	.word	0x200000e0
 8000cf0:	40012c00 	.word	0x40012c00
 8000cf4:	0000ffff 	.word	0x0000ffff

08000cf8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b08f      	sub	sp, #60	; 0x3c
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d00:	2410      	movs	r4, #16
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	0018      	movs	r0, r3
 8000d06:	2328      	movs	r3, #40	; 0x28
 8000d08:	001a      	movs	r2, r3
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	f003 fd48 	bl	80047a0 <memset>
  if(tim_pwmHandle->Instance==TIM1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <HAL_TIM_PWM_MspInit+0x64>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d11c      	bne.n	8000d54 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	0392      	lsls	r2, r2, #14
 8000d20:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f001 ff6e 	bl	8002c0c <HAL_RCCEx_PeriphCLKConfig>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000d34:	f7ff fe66 	bl	8000a04 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_TIM_PWM_MspInit+0x68>)
 8000d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_TIM_PWM_MspInit+0x68>)
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	0109      	lsls	r1, r1, #4
 8000d42:	430a      	orrs	r2, r1
 8000d44:	641a      	str	r2, [r3, #64]	; 0x40
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_TIM_PWM_MspInit+0x68>)
 8000d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b00f      	add	sp, #60	; 0x3c
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	40012c00 	.word	0x40012c00
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	240c      	movs	r4, #12
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	0018      	movs	r0, r3
 8000d72:	2314      	movs	r3, #20
 8000d74:	001a      	movs	r2, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	f003 fd12 	bl	80047a0 <memset>
  if(timHandle->Instance==TIM1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <HAL_TIM_MspPostInit+0x74>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d123      	bne.n	8000dce <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_TIM_MspPostInit+0x78>)
 8000d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_TIM_MspPostInit+0x78>)
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	635a      	str	r2, [r3, #52]	; 0x34
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_TIM_MspPostInit+0x78>)
 8000d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d96:	2201      	movs	r2, #1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	0052      	lsls	r2, r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	0021      	movs	r1, r4
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2202      	movs	r2, #2
 8000dac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	187a      	adds	r2, r7, r1
 8000dc2:	23a0      	movs	r3, #160	; 0xa0
 8000dc4:	05db      	lsls	r3, r3, #23
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f000 fa41 	bl	8001250 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b009      	add	sp, #36	; 0x24
 8000dd4:	bd90      	pop	{r4, r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	40012c00 	.word	0x40012c00
 8000ddc:	40021000 	.word	0x40021000

08000de0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000de6:	4a24      	ldr	r2, [pc, #144]	; (8000e78 <MX_USART1_UART_Init+0x98>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dea:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000dec:	22e1      	movs	r2, #225	; 0xe1
 8000dee:	0252      	lsls	r2, r2, #9
 8000df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f002 fe9c 	bl	8003b68 <HAL_UART_Init>
 8000e30:	1e03      	subs	r3, r0, #0
 8000e32:	d001      	beq.n	8000e38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e34:	f7ff fde6 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f003 fbcf 	bl	80045e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000e42:	1e03      	subs	r3, r0, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e46:	f7ff fddd 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f003 fc06 	bl	8004660 <HAL_UARTEx_SetRxFifoThreshold>
 8000e54:	1e03      	subs	r3, r0, #0
 8000e56:	d001      	beq.n	8000e5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e58:	f7ff fdd4 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <MX_USART1_UART_Init+0x94>)
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f003 fb84 	bl	800456c <HAL_UARTEx_DisableFifoMode>
 8000e64:	1e03      	subs	r3, r0, #0
 8000e66:	d001      	beq.n	8000e6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e68:	f7ff fdcc 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	2000012c 	.word	0x2000012c
 8000e78:	40013800 	.word	0x40013800

08000e7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b095      	sub	sp, #84	; 0x54
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	233c      	movs	r3, #60	; 0x3c
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	0018      	movs	r0, r3
 8000e8a:	2314      	movs	r3, #20
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	2100      	movs	r1, #0
 8000e90:	f003 fc86 	bl	80047a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e94:	2414      	movs	r4, #20
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	0018      	movs	r0, r3
 8000e9a:	2328      	movs	r3, #40	; 0x28
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f003 fc7e 	bl	80047a0 <memset>
  if(uartHandle->Instance==USART1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a22      	ldr	r2, [pc, #136]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d13d      	bne.n	8000f2a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000eb4:	193b      	adds	r3, r7, r4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f001 fea5 	bl	8002c0c <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ec6:	f7ff fd9d 	bl	8000a04 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_UART_MspInit+0xbc>)
 8000ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <HAL_UART_MspInit+0xbc>)
 8000ed0:	2180      	movs	r1, #128	; 0x80
 8000ed2:	01c9      	lsls	r1, r1, #7
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_UART_MspInit+0xbc>)
 8000eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	01db      	lsls	r3, r3, #7
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_UART_MspInit+0xbc>)
 8000ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_UART_MspInit+0xbc>)
 8000eec:	2102      	movs	r1, #2
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_UART_MspInit+0xbc>)
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000efe:	213c      	movs	r1, #60	; 0x3c
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	22c0      	movs	r2, #192	; 0xc0
 8000f04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2202      	movs	r2, #2
 8000f0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_UART_MspInit+0xc0>)
 8000f22:	0019      	movs	r1, r3
 8000f24:	0010      	movs	r0, r2
 8000f26:	f000 f993 	bl	8001250 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b015      	add	sp, #84	; 0x54
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	40013800 	.word	0x40013800
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	50000400 	.word	0x50000400

08000f40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f44:	f7ff fe27 	bl	8000b96 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	; (8000f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <LoopForever+0xe>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <LoopForever+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f6e:	f003 fc1f 	bl	80047b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f72:	f7ff fc79 	bl	8000868 <main>

08000f76 <LoopForever>:

LoopForever:
  b LoopForever
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
  ldr   r0, =_estack
 8000f78:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f84:	08004904 	.word	0x08004904
  ldr r2, =_sbss
 8000f88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f8c:	200001c4 	.word	0x200001c4

08000f90 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x3c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_Init+0x3c>)
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	0049      	lsls	r1, r1, #1
 8000faa:	430a      	orrs	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f000 f810 	bl	8000fd4 <HAL_InitTick>
 8000fb4:	1e03      	subs	r3, r0, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e001      	b.n	8000fc4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fdae 	bl	8000b20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	781b      	ldrb	r3, [r3, #0]
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40022000 	.word	0x40022000

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fdc:	230f      	movs	r3, #15
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HAL_InitTick+0x88>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d02b      	beq.n	8001044 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <HAL_InitTick+0x8c>)
 8000fee:	681c      	ldr	r4, [r3, #0]
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_InitTick+0x88>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	23fa      	movs	r3, #250	; 0xfa
 8000ff8:	0098      	lsls	r0, r3, #2
 8000ffa:	f7ff f883 	bl	8000104 <__udivsi3>
 8000ffe:	0003      	movs	r3, r0
 8001000:	0019      	movs	r1, r3
 8001002:	0020      	movs	r0, r4
 8001004:	f7ff f87e 	bl	8000104 <__udivsi3>
 8001008:	0003      	movs	r3, r0
 800100a:	0018      	movs	r0, r3
 800100c:	f000 f913 	bl	8001236 <HAL_SYSTICK_Config>
 8001010:	1e03      	subs	r3, r0, #0
 8001012:	d112      	bne.n	800103a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d80a      	bhi.n	8001030 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	2301      	movs	r3, #1
 800101e:	425b      	negs	r3, r3
 8001020:	2200      	movs	r2, #0
 8001022:	0018      	movs	r0, r3
 8001024:	f000 f8f2 	bl	800120c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_InitTick+0x90>)
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e00d      	b.n	800104c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001030:	230f      	movs	r3, #15
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	e008      	b.n	800104c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800103a:	230f      	movs	r3, #15
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	e003      	b.n	800104c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001044:	230f      	movs	r3, #15
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800104c:	230f      	movs	r3, #15
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	781b      	ldrb	r3, [r3, #0]
}
 8001052:	0018      	movs	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	b005      	add	sp, #20
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	20000008 	.word	0x20000008
 8001060:	20000000 	.word	0x20000000
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_IncTick+0x1c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	001a      	movs	r2, r3
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <HAL_IncTick+0x20>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	18d2      	adds	r2, r2, r3
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_IncTick+0x20>)
 800107a:	601a      	str	r2, [r3, #0]
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	20000008 	.word	0x20000008
 8001088:	200001c0 	.word	0x200001c0

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <HAL_GetTick+0x10>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	200001c0 	.word	0x200001c0

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff fff0 	bl	800108c <HAL_GetTick>
 80010ac:	0003      	movs	r3, r0
 80010ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	001a      	movs	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	189b      	adds	r3, r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	f7ff ffe0 	bl	800108c <HAL_GetTick>
 80010cc:	0002      	movs	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	20000008 	.word	0x20000008

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	0002      	movs	r2, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b7f      	cmp	r3, #127	; 0x7f
 80010fc:	d828      	bhi.n	8001150 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010fe:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <__NVIC_SetPriority+0xd4>)
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b25b      	sxtb	r3, r3
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	33c0      	adds	r3, #192	; 0xc0
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	589b      	ldr	r3, [r3, r2]
 800110e:	1dfa      	adds	r2, r7, #7
 8001110:	7812      	ldrb	r2, [r2, #0]
 8001112:	0011      	movs	r1, r2
 8001114:	2203      	movs	r2, #3
 8001116:	400a      	ands	r2, r1
 8001118:	00d2      	lsls	r2, r2, #3
 800111a:	21ff      	movs	r1, #255	; 0xff
 800111c:	4091      	lsls	r1, r2
 800111e:	000a      	movs	r2, r1
 8001120:	43d2      	mvns	r2, r2
 8001122:	401a      	ands	r2, r3
 8001124:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	019b      	lsls	r3, r3, #6
 800112a:	22ff      	movs	r2, #255	; 0xff
 800112c:	401a      	ands	r2, r3
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	0018      	movs	r0, r3
 8001134:	2303      	movs	r3, #3
 8001136:	4003      	ands	r3, r0
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800113c:	481f      	ldr	r0, [pc, #124]	; (80011bc <__NVIC_SetPriority+0xd4>)
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b25b      	sxtb	r3, r3
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	430a      	orrs	r2, r1
 8001148:	33c0      	adds	r3, #192	; 0xc0
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800114e:	e031      	b.n	80011b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <__NVIC_SetPriority+0xd8>)
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	0019      	movs	r1, r3
 8001158:	230f      	movs	r3, #15
 800115a:	400b      	ands	r3, r1
 800115c:	3b08      	subs	r3, #8
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3306      	adds	r3, #6
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	18d3      	adds	r3, r2, r3
 8001166:	3304      	adds	r3, #4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1dfa      	adds	r2, r7, #7
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	0011      	movs	r1, r2
 8001170:	2203      	movs	r2, #3
 8001172:	400a      	ands	r2, r1
 8001174:	00d2      	lsls	r2, r2, #3
 8001176:	21ff      	movs	r1, #255	; 0xff
 8001178:	4091      	lsls	r1, r2
 800117a:	000a      	movs	r2, r1
 800117c:	43d2      	mvns	r2, r2
 800117e:	401a      	ands	r2, r3
 8001180:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	019b      	lsls	r3, r3, #6
 8001186:	22ff      	movs	r2, #255	; 0xff
 8001188:	401a      	ands	r2, r3
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	0018      	movs	r0, r3
 8001190:	2303      	movs	r3, #3
 8001192:	4003      	ands	r3, r0
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001198:	4809      	ldr	r0, [pc, #36]	; (80011c0 <__NVIC_SetPriority+0xd8>)
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	001c      	movs	r4, r3
 80011a0:	230f      	movs	r3, #15
 80011a2:	4023      	ands	r3, r4
 80011a4:	3b08      	subs	r3, #8
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	430a      	orrs	r2, r1
 80011aa:	3306      	adds	r3, #6
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	18c3      	adds	r3, r0, r3
 80011b0:	3304      	adds	r3, #4
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b003      	add	sp, #12
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	1e5a      	subs	r2, r3, #1
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	045b      	lsls	r3, r3, #17
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d301      	bcc.n	80011dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d8:	2301      	movs	r3, #1
 80011da:	e010      	b.n	80011fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <SysTick_Config+0x44>)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	3a01      	subs	r2, #1
 80011e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e4:	2301      	movs	r3, #1
 80011e6:	425b      	negs	r3, r3
 80011e8:	2103      	movs	r1, #3
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff ff7c 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SysTick_Config+0x44>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SysTick_Config+0x44>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b002      	add	sp, #8
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	210f      	movs	r1, #15
 8001218:	187b      	adds	r3, r7, r1
 800121a:	1c02      	adds	r2, r0, #0
 800121c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	187b      	adds	r3, r7, r1
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b25b      	sxtb	r3, r3
 8001226:	0011      	movs	r1, r2
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b004      	add	sp, #16
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	0018      	movs	r0, r3
 8001242:	f7ff ffbf 	bl	80011c4 <SysTick_Config>
 8001246:	0003      	movs	r3, r0
}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125e:	e147      	b.n	80014f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2101      	movs	r1, #1
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4091      	lsls	r1, r2
 800126a:	000a      	movs	r2, r1
 800126c:	4013      	ands	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d100      	bne.n	8001278 <HAL_GPIO_Init+0x28>
 8001276:	e138      	b.n	80014ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2203      	movs	r2, #3
 800127e:	4013      	ands	r3, r2
 8001280:	2b01      	cmp	r3, #1
 8001282:	d005      	beq.n	8001290 <HAL_GPIO_Init+0x40>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	4013      	ands	r3, r2
 800128c:	2b02      	cmp	r3, #2
 800128e:	d130      	bne.n	80012f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	43da      	mvns	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	409a      	lsls	r2, r3
 80012b2:	0013      	movs	r3, r2
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012c6:	2201      	movs	r2, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	2201      	movs	r2, #1
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2203      	movs	r2, #3
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d017      	beq.n	800132e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	43da      	mvns	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	4013      	ands	r3, r2
 8001336:	2b02      	cmp	r3, #2
 8001338:	d123      	bne.n	8001382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	58d3      	ldr	r3, [r2, r3]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2207      	movs	r2, #7
 800134c:	4013      	ands	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	43da      	mvns	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2107      	movs	r1, #7
 8001366:	400b      	ands	r3, r1
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	409a      	lsls	r2, r3
 800136c:	0013      	movs	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	08da      	lsrs	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3208      	adds	r2, #8
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	6939      	ldr	r1, [r7, #16]
 8001380:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	43da      	mvns	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	401a      	ands	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	23c0      	movs	r3, #192	; 0xc0
 80013bc:	029b      	lsls	r3, r3, #10
 80013be:	4013      	ands	r3, r2
 80013c0:	d100      	bne.n	80013c4 <HAL_GPIO_Init+0x174>
 80013c2:	e092      	b.n	80014ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013c4:	4a50      	ldr	r2, [pc, #320]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3318      	adds	r3, #24
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	589b      	ldr	r3, [r3, r2]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2203      	movs	r2, #3
 80013d6:	4013      	ands	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	220f      	movs	r2, #15
 80013dc:	409a      	lsls	r2, r3
 80013de:	0013      	movs	r3, r2
 80013e0:	43da      	mvns	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	23a0      	movs	r3, #160	; 0xa0
 80013ec:	05db      	lsls	r3, r3, #23
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x1ca>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a45      	ldr	r2, [pc, #276]	; (800150c <HAL_GPIO_Init+0x2bc>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x1c6>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a44      	ldr	r2, [pc, #272]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x1c2>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a43      	ldr	r2, [pc, #268]	; (8001514 <HAL_GPIO_Init+0x2c4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x1be>
 800140a:	2303      	movs	r3, #3
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x1cc>
 800140e:	2305      	movs	r3, #5
 8001410:	e004      	b.n	800141c <HAL_GPIO_Init+0x1cc>
 8001412:	2302      	movs	r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x1cc>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x1cc>
 800141a:	2300      	movs	r3, #0
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	2103      	movs	r1, #3
 8001420:	400a      	ands	r2, r1
 8001422:	00d2      	lsls	r2, r2, #3
 8001424:	4093      	lsls	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800142c:	4936      	ldr	r1, [pc, #216]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3318      	adds	r3, #24
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800143a:	4b33      	ldr	r3, [pc, #204]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43da      	mvns	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	035b      	lsls	r3, r3, #13
 8001452:	4013      	ands	r3, r2
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800145e:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43da      	mvns	r2, r3
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	039b      	lsls	r3, r3, #14
 800147c:	4013      	ands	r3, r2
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800148e:	4a1e      	ldr	r2, [pc, #120]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 8001490:	2384      	movs	r3, #132	; 0x84
 8001492:	58d3      	ldr	r3, [r2, r3]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43da      	mvns	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	029b      	lsls	r3, r3, #10
 80014a8:	4013      	ands	r3, r2
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014b4:	4914      	ldr	r1, [pc, #80]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 80014b6:	2284      	movs	r2, #132	; 0x84
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014bc:	4a12      	ldr	r2, [pc, #72]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	58d3      	ldr	r3, [r2, r3]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43da      	mvns	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	025b      	lsls	r3, r3, #9
 80014d6:	4013      	ands	r3, r2
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014e2:	4909      	ldr	r1, [pc, #36]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	40da      	lsrs	r2, r3
 80014f8:	1e13      	subs	r3, r2, #0
 80014fa:	d000      	beq.n	80014fe <HAL_GPIO_Init+0x2ae>
 80014fc:	e6b0      	b.n	8001260 <HAL_GPIO_Init+0x10>
  }
}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b006      	add	sp, #24
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021800 	.word	0x40021800
 800150c:	50000400 	.word	0x50000400
 8001510:	50000800 	.word	0x50000800
 8001514:	50000c00 	.word	0x50000c00

08001518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	0008      	movs	r0, r1
 8001522:	0011      	movs	r1, r2
 8001524:	1cbb      	adds	r3, r7, #2
 8001526:	1c02      	adds	r2, r0, #0
 8001528:	801a      	strh	r2, [r3, #0]
 800152a:	1c7b      	adds	r3, r7, #1
 800152c:	1c0a      	adds	r2, r1, #0
 800152e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001530:	1c7b      	adds	r3, r7, #1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001538:	1cbb      	adds	r3, r7, #2
 800153a:	881a      	ldrh	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001540:	e003      	b.n	800154a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001542:	1cbb      	adds	r3, r7, #2
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b002      	add	sp, #8
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e08f      	b.n	8001686 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2241      	movs	r2, #65	; 0x41
 800156a:	5c9b      	ldrb	r3, [r3, r2]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d107      	bne.n	8001582 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2240      	movs	r2, #64	; 0x40
 8001576:	2100      	movs	r1, #0
 8001578:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff f927 	bl	80007d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2241      	movs	r2, #65	; 0x41
 8001586:	2124      	movs	r1, #36	; 0x24
 8001588:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	438a      	bics	r2, r1
 8001598:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	493b      	ldr	r1, [pc, #236]	; (8001690 <HAL_I2C_Init+0x13c>)
 80015a4:	400a      	ands	r2, r1
 80015a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4938      	ldr	r1, [pc, #224]	; (8001694 <HAL_I2C_Init+0x140>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d108      	bne.n	80015d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0209      	lsls	r1, r1, #8
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	e007      	b.n	80015e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2184      	movs	r1, #132	; 0x84
 80015dc:	0209      	lsls	r1, r1, #8
 80015de:	430a      	orrs	r2, r1
 80015e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d109      	bne.n	80015fe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	0109      	lsls	r1, r1, #4
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	e007      	b.n	800160e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4923      	ldr	r1, [pc, #140]	; (8001698 <HAL_I2C_Init+0x144>)
 800160a:	400a      	ands	r2, r1
 800160c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4920      	ldr	r1, [pc, #128]	; (800169c <HAL_I2C_Init+0x148>)
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	491a      	ldr	r1, [pc, #104]	; (8001694 <HAL_I2C_Init+0x140>)
 800162a:	400a      	ands	r2, r1
 800162c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	431a      	orrs	r2, r3
 8001638:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69d9      	ldr	r1, [r3, #28]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1a      	ldr	r2, [r3, #32]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2101      	movs	r1, #1
 8001664:	430a      	orrs	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2241      	movs	r2, #65	; 0x41
 8001672:	2120      	movs	r1, #32
 8001674:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2242      	movs	r2, #66	; 0x42
 8001680:	2100      	movs	r1, #0
 8001682:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b002      	add	sp, #8
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	f0ffffff 	.word	0xf0ffffff
 8001694:	ffff7fff 	.word	0xffff7fff
 8001698:	fffff7ff 	.word	0xfffff7ff
 800169c:	02008000 	.word	0x02008000

080016a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	0008      	movs	r0, r1
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	0019      	movs	r1, r3
 80016ae:	230a      	movs	r3, #10
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	1c02      	adds	r2, r0, #0
 80016b4:	801a      	strh	r2, [r3, #0]
 80016b6:	2308      	movs	r3, #8
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	1c0a      	adds	r2, r1, #0
 80016bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2241      	movs	r2, #65	; 0x41
 80016c2:	5c9b      	ldrb	r3, [r3, r2]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	d000      	beq.n	80016cc <HAL_I2C_Master_Transmit+0x2c>
 80016ca:	e10a      	b.n	80018e2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2240      	movs	r2, #64	; 0x40
 80016d0:	5c9b      	ldrb	r3, [r3, r2]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_I2C_Master_Transmit+0x3a>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e104      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x244>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2240      	movs	r2, #64	; 0x40
 80016de:	2101      	movs	r1, #1
 80016e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016e2:	f7ff fcd3 	bl	800108c <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	0219      	lsls	r1, r3, #8
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2319      	movs	r3, #25
 80016f6:	2201      	movs	r2, #1
 80016f8:	f000 fa26 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 80016fc:	1e03      	subs	r3, r0, #0
 80016fe:	d001      	beq.n	8001704 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0ef      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2241      	movs	r2, #65	; 0x41
 8001708:	2121      	movs	r1, #33	; 0x21
 800170a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2242      	movs	r2, #66	; 0x42
 8001710:	2110      	movs	r1, #16
 8001712:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2208      	movs	r2, #8
 8001724:	18ba      	adds	r2, r7, r2
 8001726:	8812      	ldrh	r2, [r2, #0]
 8001728:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29b      	uxth	r3, r3
 8001736:	2bff      	cmp	r3, #255	; 0xff
 8001738:	d906      	bls.n	8001748 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	22ff      	movs	r2, #255	; 0xff
 800173e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	045b      	lsls	r3, r3, #17
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e007      	b.n	8001758 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	049b      	lsls	r3, r3, #18
 8001756:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175c:	2b00      	cmp	r3, #0
 800175e:	d027      	beq.n	80017b0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b01      	subs	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001788:	3b01      	subs	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001794:	b2db      	uxtb	r3, r3
 8001796:	3301      	adds	r3, #1
 8001798:	b2da      	uxtb	r2, r3
 800179a:	697c      	ldr	r4, [r7, #20]
 800179c:	230a      	movs	r3, #10
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	8819      	ldrh	r1, [r3, #0]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	4b51      	ldr	r3, [pc, #324]	; (80018ec <HAL_I2C_Master_Transmit+0x24c>)
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	0023      	movs	r3, r4
 80017aa:	f000 fc4d 	bl	8002048 <I2C_TransferConfig>
 80017ae:	e06f      	b.n	8001890 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	697c      	ldr	r4, [r7, #20]
 80017b8:	230a      	movs	r3, #10
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	8819      	ldrh	r1, [r3, #0]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	4b4a      	ldr	r3, [pc, #296]	; (80018ec <HAL_I2C_Master_Transmit+0x24c>)
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	0023      	movs	r3, r4
 80017c6:	f000 fc3f 	bl	8002048 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80017ca:	e061      	b.n	8001890 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 fa10 	bl	8001bf8 <I2C_WaitOnTXISFlagUntilTimeout>
 80017d8:	1e03      	subs	r3, r0, #0
 80017da:	d001      	beq.n	80017e0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e081      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	781a      	ldrb	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001808:	3b01      	subs	r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001814:	b29b      	uxth	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d03a      	beq.n	8001890 <HAL_I2C_Master_Transmit+0x1f0>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181e:	2b00      	cmp	r3, #0
 8001820:	d136      	bne.n	8001890 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	0013      	movs	r3, r2
 800182c:	2200      	movs	r2, #0
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	f000 f98a 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d001      	beq.n	800183c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e053      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	2bff      	cmp	r3, #255	; 0xff
 8001844:	d911      	bls.n	800186a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	22ff      	movs	r2, #255	; 0xff
 800184a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001850:	b2da      	uxtb	r2, r3
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	045c      	lsls	r4, r3, #17
 8001856:	230a      	movs	r3, #10
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	8819      	ldrh	r1, [r3, #0]
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	2300      	movs	r3, #0
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	0023      	movs	r3, r4
 8001864:	f000 fbf0 	bl	8002048 <I2C_TransferConfig>
 8001868:	e012      	b.n	8001890 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	b2da      	uxtb	r2, r3
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	049c      	lsls	r4, r3, #18
 800187e:	230a      	movs	r3, #10
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	8819      	ldrh	r1, [r3, #0]
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	2300      	movs	r3, #0
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	0023      	movs	r3, r4
 800188c:	f000 fbdc 	bl	8002048 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d198      	bne.n	80017cc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f000 f9ef 	bl	8001c84 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e01a      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2220      	movs	r2, #32
 80018b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	490b      	ldr	r1, [pc, #44]	; (80018f0 <HAL_I2C_Master_Transmit+0x250>)
 80018c2:	400a      	ands	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2241      	movs	r2, #65	; 0x41
 80018ca:	2120      	movs	r1, #32
 80018cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2242      	movs	r2, #66	; 0x42
 80018d2:	2100      	movs	r1, #0
 80018d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2240      	movs	r2, #64	; 0x40
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
  }
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b007      	add	sp, #28
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	80002000 	.word	0x80002000
 80018f0:	fe00e800 	.word	0xfe00e800

080018f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	0008      	movs	r0, r1
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	0019      	movs	r1, r3
 8001902:	230a      	movs	r3, #10
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	1c02      	adds	r2, r0, #0
 8001908:	801a      	strh	r2, [r3, #0]
 800190a:	2308      	movs	r3, #8
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	1c0a      	adds	r2, r1, #0
 8001910:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2241      	movs	r2, #65	; 0x41
 8001916:	5c9b      	ldrb	r3, [r3, r2]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b20      	cmp	r3, #32
 800191c:	d000      	beq.n	8001920 <HAL_I2C_Master_Receive+0x2c>
 800191e:	e0e8      	b.n	8001af2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2240      	movs	r2, #64	; 0x40
 8001924:	5c9b      	ldrb	r3, [r3, r2]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_I2C_Master_Receive+0x3a>
 800192a:	2302      	movs	r3, #2
 800192c:	e0e2      	b.n	8001af4 <HAL_I2C_Master_Receive+0x200>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2240      	movs	r2, #64	; 0x40
 8001932:	2101      	movs	r1, #1
 8001934:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001936:	f7ff fba9 	bl	800108c <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	0219      	lsls	r1, r3, #8
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2319      	movs	r3, #25
 800194a:	2201      	movs	r2, #1
 800194c:	f000 f8fc 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 8001950:	1e03      	subs	r3, r0, #0
 8001952:	d001      	beq.n	8001958 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0cd      	b.n	8001af4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2241      	movs	r2, #65	; 0x41
 800195c:	2122      	movs	r1, #34	; 0x22
 800195e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2242      	movs	r2, #66	; 0x42
 8001964:	2110      	movs	r1, #16
 8001966:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2208      	movs	r2, #8
 8001978:	18ba      	adds	r2, r7, r2
 800197a:	8812      	ldrh	r2, [r2, #0]
 800197c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001988:	b29b      	uxth	r3, r3
 800198a:	2bff      	cmp	r3, #255	; 0xff
 800198c:	d911      	bls.n	80019b2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	22ff      	movs	r2, #255	; 0xff
 8001992:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001998:	b2da      	uxtb	r2, r3
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	045c      	lsls	r4, r3, #17
 800199e:	230a      	movs	r3, #10
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	8819      	ldrh	r1, [r3, #0]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	4b55      	ldr	r3, [pc, #340]	; (8001afc <HAL_I2C_Master_Receive+0x208>)
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	0023      	movs	r3, r4
 80019ac:	f000 fb4c 	bl	8002048 <I2C_TransferConfig>
 80019b0:	e076      	b.n	8001aa0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	049c      	lsls	r4, r3, #18
 80019c6:	230a      	movs	r3, #10
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	8819      	ldrh	r1, [r3, #0]
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	4b4b      	ldr	r3, [pc, #300]	; (8001afc <HAL_I2C_Master_Receive+0x208>)
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	0023      	movs	r3, r4
 80019d4:	f000 fb38 	bl	8002048 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80019d8:	e062      	b.n	8001aa0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	0018      	movs	r0, r3
 80019e2:	f000 f993 	bl	8001d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80019e6:	1e03      	subs	r3, r0, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e082      	b.n	8001af4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d03a      	beq.n	8001aa0 <HAL_I2C_Master_Receive+0x1ac>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d136      	bne.n	8001aa0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	f000 f882 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e053      	b.n	8001af4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2bff      	cmp	r3, #255	; 0xff
 8001a54:	d911      	bls.n	8001a7a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	22ff      	movs	r2, #255	; 0xff
 8001a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	045c      	lsls	r4, r3, #17
 8001a66:	230a      	movs	r3, #10
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	8819      	ldrh	r1, [r3, #0]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	0023      	movs	r3, r4
 8001a74:	f000 fae8 	bl	8002048 <I2C_TransferConfig>
 8001a78:	e012      	b.n	8001aa0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	049c      	lsls	r4, r3, #18
 8001a8e:	230a      	movs	r3, #10
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	8819      	ldrh	r1, [r3, #0]
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	2300      	movs	r3, #0
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	0023      	movs	r3, r4
 8001a9c:	f000 fad4 	bl	8002048 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d197      	bne.n	80019da <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 f8e7 	bl	8001c84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ab6:	1e03      	subs	r3, r0, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e01a      	b.n	8001af4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	490b      	ldr	r1, [pc, #44]	; (8001b00 <HAL_I2C_Master_Receive+0x20c>)
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2241      	movs	r2, #65	; 0x41
 8001ada:	2120      	movs	r1, #32
 8001adc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2242      	movs	r2, #66	; 0x42
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	2100      	movs	r1, #0
 8001aec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001af2:	2302      	movs	r3, #2
  }
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b007      	add	sp, #28
 8001afa:	bd90      	pop	{r4, r7, pc}
 8001afc:	80002400 	.word	0x80002400
 8001b00:	fe00e800 	.word	0xfe00e800

08001b04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2202      	movs	r2, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d103      	bne.n	8001b22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d007      	beq.n	8001b40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	619a      	str	r2, [r3, #24]
  }
}
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b002      	add	sp, #8
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b58:	e03a      	b.n	8001bd0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	6839      	ldr	r1, [r7, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f000 f971 	bl	8001e48 <I2C_IsErrorOccurred>
 8001b66:	1e03      	subs	r3, r0, #0
 8001b68:	d001      	beq.n	8001b6e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e040      	b.n	8001bf0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	d02d      	beq.n	8001bd0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b74:	f7ff fa8a 	bl	800108c <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d302      	bcc.n	8001b8a <I2C_WaitOnFlagUntilTimeout+0x42>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d122      	bne.n	8001bd0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	4013      	ands	r3, r2
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	425a      	negs	r2, r3
 8001b9a:	4153      	adcs	r3, r2
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	1dfb      	adds	r3, r7, #7
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d113      	bne.n	8001bd0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	2220      	movs	r2, #32
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2241      	movs	r2, #65	; 0x41
 8001bb8:	2120      	movs	r1, #32
 8001bba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2242      	movs	r2, #66	; 0x42
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2240      	movs	r2, #64	; 0x40
 8001bc8:	2100      	movs	r1, #0
 8001bca:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e00f      	b.n	8001bf0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	425a      	negs	r2, r3
 8001be0:	4153      	adcs	r3, r2
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	001a      	movs	r2, r3
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d0b5      	beq.n	8001b5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b004      	add	sp, #16
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c04:	e032      	b.n	8001c6c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f000 f91b 	bl	8001e48 <I2C_IsErrorOccurred>
 8001c12:	1e03      	subs	r3, r0, #0
 8001c14:	d001      	beq.n	8001c1a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e030      	b.n	8001c7c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	d025      	beq.n	8001c6c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c20:	f7ff fa34 	bl	800108c <HAL_GetTick>
 8001c24:	0002      	movs	r2, r0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d302      	bcc.n	8001c36 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d11a      	bne.n	8001c6c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d013      	beq.n	8001c6c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	2220      	movs	r2, #32
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2241      	movs	r2, #65	; 0x41
 8001c54:	2120      	movs	r1, #32
 8001c56:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2242      	movs	r2, #66	; 0x42
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	2100      	movs	r1, #0
 8001c66:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e007      	b.n	8001c7c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d1c5      	bne.n	8001c06 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b004      	add	sp, #16
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c90:	e02f      	b.n	8001cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f000 f8d5 	bl	8001e48 <I2C_IsErrorOccurred>
 8001c9e:	1e03      	subs	r3, r0, #0
 8001ca0:	d001      	beq.n	8001ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e02d      	b.n	8001d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca6:	f7ff f9f1 	bl	800108c <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d302      	bcc.n	8001cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d11a      	bne.n	8001cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d013      	beq.n	8001cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	2220      	movs	r2, #32
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2241      	movs	r2, #65	; 0x41
 8001cda:	2120      	movs	r1, #32
 8001cdc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2242      	movs	r2, #66	; 0x42
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2240      	movs	r2, #64	; 0x40
 8001cea:	2100      	movs	r1, #0
 8001cec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e007      	b.n	8001d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d1c8      	bne.n	8001c92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	0018      	movs	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b004      	add	sp, #16
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d18:	2317      	movs	r3, #23
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001d20:	e07b      	b.n	8001e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f000 f88d 	bl	8001e48 <I2C_IsErrorOccurred>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d003      	beq.n	8001d3a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8001d32:	2317      	movs	r3, #23
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2220      	movs	r2, #32
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d140      	bne.n	8001dca <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8001d48:	2117      	movs	r1, #23
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d13b      	bne.n	8001dca <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2204      	movs	r2, #4
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d106      	bne.n	8001d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2210      	movs	r2, #16
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b10      	cmp	r3, #16
 8001d7a:	d123      	bne.n	8001dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2210      	movs	r2, #16
 8001d82:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2204      	movs	r2, #4
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4929      	ldr	r1, [pc, #164]	; (8001e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8001d9e:	400a      	ands	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2241      	movs	r2, #65	; 0x41
 8001da6:	2120      	movs	r1, #32
 8001da8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2242      	movs	r2, #66	; 0x42
 8001dae:	2100      	movs	r1, #0
 8001db0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	2100      	movs	r1, #0
 8001db8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8001dba:	2317      	movs	r3, #23
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e002      	b.n	8001dca <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001dca:	f7ff f95f 	bl	800108c <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d302      	bcc.n	8001de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d11c      	bne.n	8001e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8001de0:	2017      	movs	r0, #23
 8001de2:	183b      	adds	r3, r7, r0
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d117      	bne.n	8001e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	2204      	movs	r2, #4
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d010      	beq.n	8001e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2241      	movs	r2, #65	; 0x41
 8001e08:	2120      	movs	r1, #32
 8001e0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	2100      	movs	r1, #0
 8001e12:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8001e14:	183b      	adds	r3, r7, r0
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	2204      	movs	r2, #4
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d005      	beq.n	8001e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8001e28:	2317      	movs	r3, #23
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d100      	bne.n	8001e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8001e32:	e776      	b.n	8001d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8001e34:	2317      	movs	r3, #23
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	781b      	ldrb	r3, [r3, #0]
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b006      	add	sp, #24
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	fe00e800 	.word	0xfe00e800

08001e48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b08b      	sub	sp, #44	; 0x2c
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e54:	2327      	movs	r3, #39	; 0x27
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2210      	movs	r2, #16
 8001e70:	4013      	ands	r3, r2
 8001e72:	d100      	bne.n	8001e76 <I2C_IsErrorOccurred+0x2e>
 8001e74:	e082      	b.n	8001f7c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e7e:	e060      	b.n	8001f42 <I2C_IsErrorOccurred+0xfa>
 8001e80:	2427      	movs	r4, #39	; 0x27
 8001e82:	193b      	adds	r3, r7, r4
 8001e84:	193a      	adds	r2, r7, r4
 8001e86:	7812      	ldrb	r2, [r2, #0]
 8001e88:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	d058      	beq.n	8001f42 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e90:	f7ff f8fc 	bl	800108c <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d306      	bcc.n	8001eae <I2C_IsErrorOccurred+0x66>
 8001ea0:	193b      	adds	r3, r7, r4
 8001ea2:	193a      	adds	r2, r7, r4
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d149      	bne.n	8001f42 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	01db      	lsls	r3, r3, #7
 8001eb8:	4013      	ands	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ebc:	2013      	movs	r0, #19
 8001ebe:	183b      	adds	r3, r7, r0
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	2142      	movs	r1, #66	; 0x42
 8001ec4:	5c52      	ldrb	r2, [r2, r1]
 8001ec6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d126      	bne.n	8001f2a <I2C_IsErrorOccurred+0xe2>
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	01db      	lsls	r3, r3, #7
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d021      	beq.n	8001f2a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001ee6:	183b      	adds	r3, r7, r0
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	d01d      	beq.n	8001f2a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2180      	movs	r1, #128	; 0x80
 8001efa:	01c9      	lsls	r1, r1, #7
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f00:	f7ff f8c4 	bl	800108c <HAL_GetTick>
 8001f04:	0003      	movs	r3, r0
 8001f06:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f08:	e00f      	b.n	8001f2a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f0a:	f7ff f8bf 	bl	800108c <HAL_GetTick>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b19      	cmp	r3, #25
 8001f16:	d908      	bls.n	8001f2a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f20:	2327      	movs	r3, #39	; 0x27
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]

              break;
 8001f28:	e00b      	b.n	8001f42 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2220      	movs	r2, #32
 8001f32:	4013      	ands	r3, r2
 8001f34:	2127      	movs	r1, #39	; 0x27
 8001f36:	187a      	adds	r2, r7, r1
 8001f38:	1879      	adds	r1, r7, r1
 8001f3a:	7809      	ldrb	r1, [r1, #0]
 8001f3c:	7011      	strb	r1, [r2, #0]
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d1e3      	bne.n	8001f0a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	d004      	beq.n	8001f5a <I2C_IsErrorOccurred+0x112>
 8001f50:	2327      	movs	r3, #39	; 0x27
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d092      	beq.n	8001e80 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f5a:	2327      	movs	r3, #39	; 0x27
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	2204      	movs	r2, #4
 8001f70:	4313      	orrs	r3, r2
 8001f72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f74:	2327      	movs	r3, #39	; 0x27
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d00c      	beq.n	8001fa8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	2201      	movs	r2, #1
 8001f92:	4313      	orrs	r3, r2
 8001f94:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	0052      	lsls	r2, r2, #1
 8001f9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fa0:	2327      	movs	r3, #39	; 0x27
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d00c      	beq.n	8001fcc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	00d2      	lsls	r2, r2, #3
 8001fc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fc4:	2327      	movs	r3, #39	; 0x27
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d00c      	beq.n	8001ff0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fe8:	2327      	movs	r3, #39	; 0x27
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001ff0:	2327      	movs	r3, #39	; 0x27
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d01d      	beq.n	8002036 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7ff fd81 	bl	8001b04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	490d      	ldr	r1, [pc, #52]	; (8002044 <I2C_IsErrorOccurred+0x1fc>)
 800200e:	400a      	ands	r2, r1
 8002010:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	431a      	orrs	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2241      	movs	r2, #65	; 0x41
 8002022:	2120      	movs	r1, #32
 8002024:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2242      	movs	r2, #66	; 0x42
 800202a:	2100      	movs	r1, #0
 800202c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2240      	movs	r2, #64	; 0x40
 8002032:	2100      	movs	r1, #0
 8002034:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002036:	2327      	movs	r3, #39	; 0x27
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	781b      	ldrb	r3, [r3, #0]
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b00b      	add	sp, #44	; 0x2c
 8002042:	bd90      	pop	{r4, r7, pc}
 8002044:	fe00e800 	.word	0xfe00e800

08002048 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	0008      	movs	r0, r1
 8002052:	0011      	movs	r1, r2
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	240a      	movs	r4, #10
 8002058:	193b      	adds	r3, r7, r4
 800205a:	1c02      	adds	r2, r0, #0
 800205c:	801a      	strh	r2, [r3, #0]
 800205e:	2009      	movs	r0, #9
 8002060:	183b      	adds	r3, r7, r0
 8002062:	1c0a      	adds	r2, r1, #0
 8002064:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002066:	193b      	adds	r3, r7, r4
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	059b      	lsls	r3, r3, #22
 800206c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800206e:	183b      	adds	r3, r7, r0
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	0419      	lsls	r1, r3, #16
 8002074:	23ff      	movs	r3, #255	; 0xff
 8002076:	041b      	lsls	r3, r3, #16
 8002078:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800207a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002082:	4313      	orrs	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002092:	0d51      	lsrs	r1, r2, #21
 8002094:	2280      	movs	r2, #128	; 0x80
 8002096:	00d2      	lsls	r2, r2, #3
 8002098:	400a      	ands	r2, r1
 800209a:	4907      	ldr	r1, [pc, #28]	; (80020b8 <I2C_TransferConfig+0x70>)
 800209c:	430a      	orrs	r2, r1
 800209e:	43d2      	mvns	r2, r2
 80020a0:	401a      	ands	r2, r3
 80020a2:	0011      	movs	r1, r2
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b007      	add	sp, #28
 80020b4:	bd90      	pop	{r4, r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	03ff63ff 	.word	0x03ff63ff

080020bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2241      	movs	r2, #65	; 0x41
 80020ca:	5c9b      	ldrb	r3, [r3, r2]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	d138      	bne.n	8002144 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2240      	movs	r2, #64	; 0x40
 80020d6:	5c9b      	ldrb	r3, [r3, r2]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020dc:	2302      	movs	r3, #2
 80020de:	e032      	b.n	8002146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2240      	movs	r2, #64	; 0x40
 80020e4:	2101      	movs	r1, #1
 80020e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2241      	movs	r2, #65	; 0x41
 80020ec:	2124      	movs	r1, #36	; 0x24
 80020ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2101      	movs	r1, #1
 80020fc:	438a      	bics	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4911      	ldr	r1, [pc, #68]	; (8002150 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800210c:	400a      	ands	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6819      	ldr	r1, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2101      	movs	r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2241      	movs	r2, #65	; 0x41
 8002134:	2120      	movs	r1, #32
 8002136:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2240      	movs	r2, #64	; 0x40
 800213c:	2100      	movs	r1, #0
 800213e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002144:	2302      	movs	r3, #2
  }
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b002      	add	sp, #8
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	ffffefff 	.word	0xffffefff

08002154 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2241      	movs	r2, #65	; 0x41
 8002162:	5c9b      	ldrb	r3, [r3, r2]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b20      	cmp	r3, #32
 8002168:	d139      	bne.n	80021de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2240      	movs	r2, #64	; 0x40
 800216e:	5c9b      	ldrb	r3, [r3, r2]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002174:	2302      	movs	r3, #2
 8002176:	e033      	b.n	80021e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2240      	movs	r2, #64	; 0x40
 800217c:	2101      	movs	r1, #1
 800217e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2241      	movs	r2, #65	; 0x41
 8002184:	2124      	movs	r1, #36	; 0x24
 8002186:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2101      	movs	r1, #1
 8002194:	438a      	bics	r2, r1
 8002196:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2101      	movs	r1, #1
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2241      	movs	r2, #65	; 0x41
 80021ce:	2120      	movs	r1, #32
 80021d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2240      	movs	r2, #64	; 0x40
 80021d6:	2100      	movs	r1, #0
 80021d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021de:	2302      	movs	r3, #2
  }
}
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b004      	add	sp, #16
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	fffff0ff 	.word	0xfffff0ff

080021ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	429a      	cmp	r2, r3
 800220e:	d11f      	bne.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	0013      	movs	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	189b      	adds	r3, r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4912      	ldr	r1, [pc, #72]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800221e:	0018      	movs	r0, r3
 8002220:	f7fd ff70 	bl	8000104 <__udivsi3>
 8002224:	0003      	movs	r3, r0
 8002226:	3301      	adds	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800222a:	e008      	b.n	800223e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3b01      	subs	r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e001      	b.n	800223e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e009      	b.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	401a      	ands	r2, r3
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	429a      	cmp	r2, r3
 800224e:	d0ed      	beq.n	800222c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b004      	add	sp, #16
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	40007000 	.word	0x40007000
 8002260:	fffff9ff 	.word	0xfffff9ff
 8002264:	20000000 	.word	0x20000000
 8002268:	000f4240 	.word	0x000f4240

0800226c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	23e0      	movs	r3, #224	; 0xe0
 8002276:	01db      	lsls	r3, r3, #7
 8002278:	4013      	ands	r3, r2
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000

08002284 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e2fe      	b.n	8002894 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2201      	movs	r2, #1
 800229c:	4013      	ands	r3, r2
 800229e:	d100      	bne.n	80022a2 <HAL_RCC_OscConfig+0x1e>
 80022a0:	e07c      	b.n	800239c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a2:	4bc3      	ldr	r3, [pc, #780]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2238      	movs	r2, #56	; 0x38
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ac:	4bc0      	ldr	r3, [pc, #768]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2203      	movs	r2, #3
 80022b2:	4013      	ands	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	2b10      	cmp	r3, #16
 80022ba:	d102      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3e>
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d002      	beq.n	80022c8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d10b      	bne.n	80022e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	4bb9      	ldr	r3, [pc, #740]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	029b      	lsls	r3, r3, #10
 80022d0:	4013      	ands	r3, r2
 80022d2:	d062      	beq.n	800239a <HAL_RCC_OscConfig+0x116>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d15e      	bne.n	800239a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e2d9      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	025b      	lsls	r3, r3, #9
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x78>
 80022ec:	4bb0      	ldr	r3, [pc, #704]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4baf      	ldr	r3, [pc, #700]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	0249      	lsls	r1, r1, #9
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e020      	b.n	800233e <HAL_RCC_OscConfig+0xba>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	23a0      	movs	r3, #160	; 0xa0
 8002302:	02db      	lsls	r3, r3, #11
 8002304:	429a      	cmp	r2, r3
 8002306:	d10e      	bne.n	8002326 <HAL_RCC_OscConfig+0xa2>
 8002308:	4ba9      	ldr	r3, [pc, #676]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4ba8      	ldr	r3, [pc, #672]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	02c9      	lsls	r1, r1, #11
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	4ba6      	ldr	r3, [pc, #664]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4ba5      	ldr	r3, [pc, #660]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	0249      	lsls	r1, r1, #9
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e00b      	b.n	800233e <HAL_RCC_OscConfig+0xba>
 8002326:	4ba2      	ldr	r3, [pc, #648]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4ba1      	ldr	r3, [pc, #644]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800232c:	49a1      	ldr	r1, [pc, #644]	; (80025b4 <HAL_RCC_OscConfig+0x330>)
 800232e:	400a      	ands	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	4b9f      	ldr	r3, [pc, #636]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b9e      	ldr	r3, [pc, #632]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002338:	499f      	ldr	r1, [pc, #636]	; (80025b8 <HAL_RCC_OscConfig+0x334>)
 800233a:	400a      	ands	r2, r1
 800233c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d014      	beq.n	8002370 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe fea1 	bl	800108c <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe fe9c 	bl	800108c <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e298      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002362:	4b93      	ldr	r3, [pc, #588]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	029b      	lsls	r3, r3, #10
 800236a:	4013      	ands	r3, r2
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xcc>
 800236e:	e015      	b.n	800239c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe fe8c 	bl	800108c <HAL_GetTick>
 8002374:	0003      	movs	r3, r0
 8002376:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237a:	f7fe fe87 	bl	800108c <HAL_GetTick>
 800237e:	0002      	movs	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e283      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800238c:	4b88      	ldr	r3, [pc, #544]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	029b      	lsls	r3, r3, #10
 8002394:	4013      	ands	r3, r2
 8002396:	d1f0      	bne.n	800237a <HAL_RCC_OscConfig+0xf6>
 8002398:	e000      	b.n	800239c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2202      	movs	r2, #2
 80023a2:	4013      	ands	r3, r2
 80023a4:	d100      	bne.n	80023a8 <HAL_RCC_OscConfig+0x124>
 80023a6:	e099      	b.n	80024dc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a8:	4b81      	ldr	r3, [pc, #516]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2238      	movs	r2, #56	; 0x38
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b2:	4b7f      	ldr	r3, [pc, #508]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2203      	movs	r2, #3
 80023b8:	4013      	ands	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2b10      	cmp	r3, #16
 80023c0:	d102      	bne.n	80023c8 <HAL_RCC_OscConfig+0x144>
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d002      	beq.n	80023ce <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d135      	bne.n	800243a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ce:	4b78      	ldr	r3, [pc, #480]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4013      	ands	r3, r2
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x162>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e256      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e6:	4b72      	ldr	r3, [pc, #456]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a74      	ldr	r2, [pc, #464]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	021a      	lsls	r2, r3, #8
 80023f6:	4b6e      	ldr	r3, [pc, #440]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d112      	bne.n	8002428 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002402:	4b6b      	ldr	r3, [pc, #428]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6e      	ldr	r2, [pc, #440]	; (80025c0 <HAL_RCC_OscConfig+0x33c>)
 8002408:	4013      	ands	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002412:	430a      	orrs	r2, r1
 8002414:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002416:	4b66      	ldr	r3, [pc, #408]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	0adb      	lsrs	r3, r3, #11
 800241c:	2207      	movs	r2, #7
 800241e:	4013      	ands	r3, r2
 8002420:	4a68      	ldr	r2, [pc, #416]	; (80025c4 <HAL_RCC_OscConfig+0x340>)
 8002422:	40da      	lsrs	r2, r3
 8002424:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <HAL_RCC_OscConfig+0x344>)
 8002426:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002428:	4b68      	ldr	r3, [pc, #416]	; (80025cc <HAL_RCC_OscConfig+0x348>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0018      	movs	r0, r3
 800242e:	f7fe fdd1 	bl	8000fd4 <HAL_InitTick>
 8002432:	1e03      	subs	r3, r0, #0
 8002434:	d051      	beq.n	80024da <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e22c      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d030      	beq.n	80024a4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002442:	4b5b      	ldr	r3, [pc, #364]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a5e      	ldr	r2, [pc, #376]	; (80025c0 <HAL_RCC_OscConfig+0x33c>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002456:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b55      	ldr	r3, [pc, #340]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800245c:	2180      	movs	r1, #128	; 0x80
 800245e:	0049      	lsls	r1, r1, #1
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fe12 	bl	800108c <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246e:	f7fe fe0d 	bl	800108c <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e209      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002480:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4013      	ands	r3, r2
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b48      	ldr	r3, [pc, #288]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a4a      	ldr	r2, [pc, #296]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002492:	4013      	ands	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	021a      	lsls	r2, r3, #8
 800249c:	4b44      	ldr	r3, [pc, #272]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	e01b      	b.n	80024dc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80024a4:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80024aa:	4949      	ldr	r1, [pc, #292]	; (80025d0 <HAL_RCC_OscConfig+0x34c>)
 80024ac:	400a      	ands	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe fdec 	bl	800108c <HAL_GetTick>
 80024b4:	0003      	movs	r3, r0
 80024b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ba:	f7fe fde7 	bl	800108c <HAL_GetTick>
 80024be:	0002      	movs	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e1e3      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024cc:	4b38      	ldr	r3, [pc, #224]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4013      	ands	r3, r2
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x236>
 80024d8:	e000      	b.n	80024dc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2208      	movs	r2, #8
 80024e2:	4013      	ands	r3, r2
 80024e4:	d047      	beq.n	8002576 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024e6:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2238      	movs	r2, #56	; 0x38
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b18      	cmp	r3, #24
 80024f0:	d10a      	bne.n	8002508 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024f2:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80024f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f6:	2202      	movs	r2, #2
 80024f8:	4013      	ands	r3, r2
 80024fa:	d03c      	beq.n	8002576 <HAL_RCC_OscConfig+0x2f2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d138      	bne.n	8002576 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e1c5      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d019      	beq.n	8002544 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002512:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002514:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002516:	2101      	movs	r1, #1
 8002518:	430a      	orrs	r2, r1
 800251a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7fe fdb6 	bl	800108c <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002526:	f7fe fdb1 	bl	800108c <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e1ad      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800253a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253c:	2202      	movs	r2, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d0f1      	beq.n	8002526 <HAL_RCC_OscConfig+0x2a2>
 8002542:	e018      	b.n	8002576 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002546:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800254a:	2101      	movs	r1, #1
 800254c:	438a      	bics	r2, r1
 800254e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fd9c 	bl	800108c <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255a:	f7fe fd97 	bl	800108c <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e193      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800256c:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800256e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002570:	2202      	movs	r2, #2
 8002572:	4013      	ands	r3, r2
 8002574:	d1f1      	bne.n	800255a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2204      	movs	r2, #4
 800257c:	4013      	ands	r3, r2
 800257e:	d100      	bne.n	8002582 <HAL_RCC_OscConfig+0x2fe>
 8002580:	e0c6      	b.n	8002710 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002582:	231f      	movs	r3, #31
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2238      	movs	r2, #56	; 0x38
 8002590:	4013      	ands	r3, r2
 8002592:	2b20      	cmp	r3, #32
 8002594:	d11e      	bne.n	80025d4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259a:	2202      	movs	r2, #2
 800259c:	4013      	ands	r3, r2
 800259e:	d100      	bne.n	80025a2 <HAL_RCC_OscConfig+0x31e>
 80025a0:	e0b6      	b.n	8002710 <HAL_RCC_OscConfig+0x48c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d000      	beq.n	80025ac <HAL_RCC_OscConfig+0x328>
 80025aa:	e0b1      	b.n	8002710 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e171      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
 80025b0:	40021000 	.word	0x40021000
 80025b4:	fffeffff 	.word	0xfffeffff
 80025b8:	fffbffff 	.word	0xfffbffff
 80025bc:	ffff80ff 	.word	0xffff80ff
 80025c0:	ffffc7ff 	.word	0xffffc7ff
 80025c4:	00f42400 	.word	0x00f42400
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000004 	.word	0x20000004
 80025d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025d4:	4bb1      	ldr	r3, [pc, #708]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80025d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	055b      	lsls	r3, r3, #21
 80025dc:	4013      	ands	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_OscConfig+0x360>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x362>
 80025e4:	2300      	movs	r3, #0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d011      	beq.n	800260e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	4bac      	ldr	r3, [pc, #688]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80025ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ee:	4bab      	ldr	r3, [pc, #684]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	0549      	lsls	r1, r1, #21
 80025f4:	430a      	orrs	r2, r1
 80025f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80025f8:	4ba8      	ldr	r3, [pc, #672]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80025fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	055b      	lsls	r3, r3, #21
 8002600:	4013      	ands	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002606:	231f      	movs	r3, #31
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800260e:	4ba4      	ldr	r3, [pc, #656]	; (80028a0 <HAL_RCC_OscConfig+0x61c>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4013      	ands	r3, r2
 8002618:	d11a      	bne.n	8002650 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800261a:	4ba1      	ldr	r3, [pc, #644]	; (80028a0 <HAL_RCC_OscConfig+0x61c>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4ba0      	ldr	r3, [pc, #640]	; (80028a0 <HAL_RCC_OscConfig+0x61c>)
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	0049      	lsls	r1, r1, #1
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002628:	f7fe fd30 	bl	800108c <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7fe fd2b 	bl	800108c <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e127      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002644:	4b96      	ldr	r3, [pc, #600]	; (80028a0 <HAL_RCC_OscConfig+0x61c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4013      	ands	r3, r2
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x3e2>
 8002658:	4b90      	ldr	r3, [pc, #576]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800265a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800265c:	4b8f      	ldr	r3, [pc, #572]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800265e:	2101      	movs	r1, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	65da      	str	r2, [r3, #92]	; 0x5c
 8002664:	e01c      	b.n	80026a0 <HAL_RCC_OscConfig+0x41c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b05      	cmp	r3, #5
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x404>
 800266e:	4b8b      	ldr	r3, [pc, #556]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002670:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002672:	4b8a      	ldr	r3, [pc, #552]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002674:	2104      	movs	r1, #4
 8002676:	430a      	orrs	r2, r1
 8002678:	65da      	str	r2, [r3, #92]	; 0x5c
 800267a:	4b88      	ldr	r3, [pc, #544]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800267c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800267e:	4b87      	ldr	r3, [pc, #540]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002680:	2101      	movs	r1, #1
 8002682:	430a      	orrs	r2, r1
 8002684:	65da      	str	r2, [r3, #92]	; 0x5c
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0x41c>
 8002688:	4b84      	ldr	r3, [pc, #528]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800268a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800268c:	4b83      	ldr	r3, [pc, #524]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800268e:	2101      	movs	r1, #1
 8002690:	438a      	bics	r2, r1
 8002692:	65da      	str	r2, [r3, #92]	; 0x5c
 8002694:	4b81      	ldr	r3, [pc, #516]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002696:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002698:	4b80      	ldr	r3, [pc, #512]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800269a:	2104      	movs	r1, #4
 800269c:	438a      	bics	r2, r1
 800269e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d014      	beq.n	80026d2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fcf0 	bl	800108c <HAL_GetTick>
 80026ac:	0003      	movs	r3, r0
 80026ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b0:	e009      	b.n	80026c6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7fe fceb 	bl	800108c <HAL_GetTick>
 80026b6:	0002      	movs	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	4a79      	ldr	r2, [pc, #484]	; (80028a4 <HAL_RCC_OscConfig+0x620>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e0e6      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c6:	4b75      	ldr	r3, [pc, #468]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80026c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ca:	2202      	movs	r2, #2
 80026cc:	4013      	ands	r3, r2
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x42e>
 80026d0:	e013      	b.n	80026fa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d2:	f7fe fcdb 	bl	800108c <HAL_GetTick>
 80026d6:	0003      	movs	r3, r0
 80026d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026da:	e009      	b.n	80026f0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fcd6 	bl	800108c <HAL_GetTick>
 80026e0:	0002      	movs	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	4a6f      	ldr	r2, [pc, #444]	; (80028a4 <HAL_RCC_OscConfig+0x620>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0d1      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	2202      	movs	r2, #2
 80026f6:	4013      	ands	r3, r2
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026fa:	231f      	movs	r3, #31
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d105      	bne.n	8002710 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002704:	4b65      	ldr	r3, [pc, #404]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002708:	4b64      	ldr	r3, [pc, #400]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800270a:	4967      	ldr	r1, [pc, #412]	; (80028a8 <HAL_RCC_OscConfig+0x624>)
 800270c:	400a      	ands	r2, r1
 800270e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <HAL_RCC_OscConfig+0x496>
 8002718:	e0bb      	b.n	8002892 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800271a:	4b60      	ldr	r3, [pc, #384]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2238      	movs	r2, #56	; 0x38
 8002720:	4013      	ands	r3, r2
 8002722:	2b10      	cmp	r3, #16
 8002724:	d100      	bne.n	8002728 <HAL_RCC_OscConfig+0x4a4>
 8002726:	e07b      	b.n	8002820 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d156      	bne.n	80027de <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002730:	4b5a      	ldr	r3, [pc, #360]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b59      	ldr	r3, [pc, #356]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002736:	495d      	ldr	r1, [pc, #372]	; (80028ac <HAL_RCC_OscConfig+0x628>)
 8002738:	400a      	ands	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7fe fca6 	bl	800108c <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe fca1 	bl	800108c <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e09d      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002758:	4b50      	ldr	r3, [pc, #320]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	049b      	lsls	r3, r3, #18
 8002760:	4013      	ands	r3, r2
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002764:	4b4d      	ldr	r3, [pc, #308]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a51      	ldr	r2, [pc, #324]	; (80028b0 <HAL_RCC_OscConfig+0x62c>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1a      	ldr	r2, [r3, #32]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	431a      	orrs	r2, r3
 8002792:	4b42      	ldr	r3, [pc, #264]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002794:	430a      	orrs	r2, r1
 8002796:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002798:	4b40      	ldr	r3, [pc, #256]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b3f      	ldr	r3, [pc, #252]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800279e:	2180      	movs	r1, #128	; 0x80
 80027a0:	0449      	lsls	r1, r1, #17
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80027a6:	4b3d      	ldr	r3, [pc, #244]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	4b3c      	ldr	r3, [pc, #240]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	0549      	lsls	r1, r1, #21
 80027b0:	430a      	orrs	r2, r1
 80027b2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fc6a 	bl	800108c <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027be:	f7fe fc65 	bl	800108c <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e061      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d0:	4b32      	ldr	r3, [pc, #200]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	049b      	lsls	r3, r3, #18
 80027d8:	4013      	ands	r3, r2
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x53a>
 80027dc:	e059      	b.n	8002892 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	4b2f      	ldr	r3, [pc, #188]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4b2e      	ldr	r3, [pc, #184]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80027e4:	4931      	ldr	r1, [pc, #196]	; (80028ac <HAL_RCC_OscConfig+0x628>)
 80027e6:	400a      	ands	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe fc4f 	bl	800108c <HAL_GetTick>
 80027ee:	0003      	movs	r3, r0
 80027f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe fc4a 	bl	800108c <HAL_GetTick>
 80027f8:	0002      	movs	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e046      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002806:	4b25      	ldr	r3, [pc, #148]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	049b      	lsls	r3, r3, #18
 800280e:	4013      	ands	r3, r2
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002818:	4926      	ldr	r1, [pc, #152]	; (80028b4 <HAL_RCC_OscConfig+0x630>)
 800281a:	400a      	ands	r2, r1
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	e038      	b.n	8002892 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e033      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2203      	movs	r2, #3
 8002836:	401a      	ands	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	429a      	cmp	r2, r3
 800283e:	d126      	bne.n	800288e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2270      	movs	r2, #112	; 0x70
 8002844:	401a      	ands	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d11f      	bne.n	800288e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	23fe      	movs	r3, #254	; 0xfe
 8002852:	01db      	lsls	r3, r3, #7
 8002854:	401a      	ands	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d116      	bne.n	800288e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	23f8      	movs	r3, #248	; 0xf8
 8002864:	039b      	lsls	r3, r3, #14
 8002866:	401a      	ands	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d10e      	bne.n	800288e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	23e0      	movs	r3, #224	; 0xe0
 8002874:	051b      	lsls	r3, r3, #20
 8002876:	401a      	ands	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	0f5b      	lsrs	r3, r3, #29
 8002884:	075a      	lsls	r2, r3, #29
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b008      	add	sp, #32
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	40007000 	.word	0x40007000
 80028a4:	00001388 	.word	0x00001388
 80028a8:	efffffff 	.word	0xefffffff
 80028ac:	feffffff 	.word	0xfeffffff
 80028b0:	11c1808c 	.word	0x11c1808c
 80028b4:	eefefffc 	.word	0xeefefffc

080028b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0e9      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028cc:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2207      	movs	r2, #7
 80028d2:	4013      	ands	r3, r2
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d91e      	bls.n	8002918 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b73      	ldr	r3, [pc, #460]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2207      	movs	r2, #7
 80028e0:	4393      	bics	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	4b70      	ldr	r3, [pc, #448]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028ec:	f7fe fbce 	bl	800108c <HAL_GetTick>
 80028f0:	0003      	movs	r3, r0
 80028f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028f4:	e009      	b.n	800290a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f6:	f7fe fbc9 	bl	800108c <HAL_GetTick>
 80028fa:	0002      	movs	r2, r0
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	4a6a      	ldr	r2, [pc, #424]	; (8002aac <HAL_RCC_ClockConfig+0x1f4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e0ca      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800290a:	4b67      	ldr	r3, [pc, #412]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2207      	movs	r2, #7
 8002910:	4013      	ands	r3, r2
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d1ee      	bne.n	80028f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2202      	movs	r2, #2
 800291e:	4013      	ands	r3, r2
 8002920:	d015      	beq.n	800294e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2204      	movs	r2, #4
 8002928:	4013      	ands	r3, r2
 800292a:	d006      	beq.n	800293a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800292c:	4b60      	ldr	r3, [pc, #384]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	4b5f      	ldr	r3, [pc, #380]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8002932:	21e0      	movs	r1, #224	; 0xe0
 8002934:	01c9      	lsls	r1, r1, #7
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293a:	4b5d      	ldr	r3, [pc, #372]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	4a5d      	ldr	r2, [pc, #372]	; (8002ab4 <HAL_RCC_ClockConfig+0x1fc>)
 8002940:	4013      	ands	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2201      	movs	r2, #1
 8002954:	4013      	ands	r3, r2
 8002956:	d057      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d107      	bne.n	8002970 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	029b      	lsls	r3, r3, #10
 8002968:	4013      	ands	r3, r2
 800296a:	d12b      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e097      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d107      	bne.n	8002988 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002978:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	049b      	lsls	r3, r3, #18
 8002980:	4013      	ands	r3, r2
 8002982:	d11f      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e08b      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002990:	4b47      	ldr	r3, [pc, #284]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4013      	ands	r3, r2
 800299a:	d113      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e07f      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a8:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80029aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ac:	2202      	movs	r2, #2
 80029ae:	4013      	ands	r3, r2
 80029b0:	d108      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e074      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b6:	4b3e      	ldr	r3, [pc, #248]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e06d      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029c4:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2207      	movs	r2, #7
 80029ca:	4393      	bics	r3, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	4b37      	ldr	r3, [pc, #220]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80029d4:	430a      	orrs	r2, r1
 80029d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d8:	f7fe fb58 	bl	800108c <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e0:	e009      	b.n	80029f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e2:	f7fe fb53 	bl	800108c <HAL_GetTick>
 80029e6:	0002      	movs	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	4a2f      	ldr	r2, [pc, #188]	; (8002aac <HAL_RCC_ClockConfig+0x1f4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e054      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2238      	movs	r2, #56	; 0x38
 80029fc:	401a      	ands	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1ec      	bne.n	80029e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	4013      	ands	r3, r2
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d21e      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	4393      	bics	r3, r2
 8002a1e:	0019      	movs	r1, r3
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a28:	f7fe fb30 	bl	800108c <HAL_GetTick>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a30:	e009      	b.n	8002a46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a32:	f7fe fb2b 	bl	800108c <HAL_GetTick>
 8002a36:	0002      	movs	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_RCC_ClockConfig+0x1f4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e02c      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a46:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2207      	movs	r2, #7
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d1ee      	bne.n	8002a32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	4a15      	ldr	r2, [pc, #84]	; (8002ab8 <HAL_RCC_ClockConfig+0x200>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a72:	f000 f829 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a76:	0001      	movs	r1, r0
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	220f      	movs	r2, #15
 8002a80:	401a      	ands	r2, r3
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_RCC_ClockConfig+0x204>)
 8002a84:	0092      	lsls	r2, r2, #2
 8002a86:	58d3      	ldr	r3, [r2, r3]
 8002a88:	221f      	movs	r2, #31
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	000a      	movs	r2, r1
 8002a8e:	40da      	lsrs	r2, r3
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_ClockConfig+0x208>)
 8002a92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_ClockConfig+0x20c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7fe fa9b 	bl	8000fd4 <HAL_InitTick>
 8002a9e:	0003      	movs	r3, r0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b004      	add	sp, #16
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40022000 	.word	0x40022000
 8002aac:	00001388 	.word	0x00001388
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	fffff0ff 	.word	0xfffff0ff
 8002ab8:	ffff8fff 	.word	0xffff8fff
 8002abc:	08004818 	.word	0x08004818
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	20000004 	.word	0x20000004

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ace:	4b3c      	ldr	r3, [pc, #240]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2238      	movs	r2, #56	; 0x38
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d10f      	bne.n	8002af8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ad8:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0adb      	lsrs	r3, r3, #11
 8002ade:	2207      	movs	r2, #7
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	0013      	movs	r3, r2
 8002ae8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002aea:	6839      	ldr	r1, [r7, #0]
 8002aec:	4835      	ldr	r0, [pc, #212]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002aee:	f7fd fb09 	bl	8000104 <__udivsi3>
 8002af2:	0003      	movs	r3, r0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	e05d      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002af8:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2238      	movs	r2, #56	; 0x38
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d102      	bne.n	8002b0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b04:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	e054      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2238      	movs	r2, #56	; 0x38
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d138      	bne.n	8002b88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b16:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b20:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	2207      	movs	r2, #7
 8002b28:	4013      	ands	r3, r2
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d10d      	bne.n	8002b50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	4824      	ldr	r0, [pc, #144]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b38:	f7fd fae4 	bl	8000104 <__udivsi3>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	0019      	movs	r1, r3
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	227f      	movs	r2, #127	; 0x7f
 8002b48:	4013      	ands	r3, r2
 8002b4a:	434b      	muls	r3, r1
 8002b4c:	617b      	str	r3, [r7, #20]
        break;
 8002b4e:	e00d      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	481c      	ldr	r0, [pc, #112]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b54:	f7fd fad6 	bl	8000104 <__udivsi3>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	227f      	movs	r2, #127	; 0x7f
 8002b64:	4013      	ands	r3, r2
 8002b66:	434b      	muls	r3, r1
 8002b68:	617b      	str	r3, [r7, #20]
        break;
 8002b6a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	0f5b      	lsrs	r3, r3, #29
 8002b72:	2207      	movs	r2, #7
 8002b74:	4013      	ands	r3, r2
 8002b76:	3301      	adds	r3, #1
 8002b78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	6978      	ldr	r0, [r7, #20]
 8002b7e:	f7fd fac1 	bl	8000104 <__udivsi3>
 8002b82:	0003      	movs	r3, r0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	e015      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2238      	movs	r2, #56	; 0x38
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d103      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2238      	movs	r2, #56	; 0x38
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b18      	cmp	r3, #24
 8002ba6:	d103      	bne.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ba8:	23fa      	movs	r3, #250	; 0xfa
 8002baa:	01db      	lsls	r3, r3, #7
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	e001      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bb4:	693b      	ldr	r3, [r7, #16]
}
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b006      	add	sp, #24
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	00f42400 	.word	0x00f42400
 8002bc8:	007a1200 	.word	0x007a1200

08002bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd0:	4b02      	ldr	r3, [pc, #8]	; (8002bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	20000000 	.word	0x20000000

08002be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be0:	b5b0      	push	{r4, r5, r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002be4:	f7ff fff2 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002be8:	0004      	movs	r4, r0
 8002bea:	f7ff fb3f 	bl	800226c <LL_RCC_GetAPB1Prescaler>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	0b1a      	lsrs	r2, r3, #12
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	58d3      	ldr	r3, [r2, r3]
 8002bf8:	221f      	movs	r2, #31
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	40dc      	lsrs	r4, r3
 8002bfe:	0023      	movs	r3, r4
}
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bdb0      	pop	{r4, r5, r7, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	08004858 	.word	0x08004858

08002c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c14:	2313      	movs	r3, #19
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c1c:	2312      	movs	r3, #18
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	029b      	lsls	r3, r3, #10
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d100      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c30:	e0a3      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c32:	2011      	movs	r0, #17
 8002c34:	183b      	adds	r3, r7, r0
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4ba5      	ldr	r3, [pc, #660]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	055b      	lsls	r3, r3, #21
 8002c42:	4013      	ands	r3, r2
 8002c44:	d110      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	4ba2      	ldr	r3, [pc, #648]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c4a:	4ba1      	ldr	r3, [pc, #644]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	0549      	lsls	r1, r1, #21
 8002c50:	430a      	orrs	r2, r1
 8002c52:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c54:	4b9e      	ldr	r3, [pc, #632]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	055b      	lsls	r3, r3, #21
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c68:	4b9a      	ldr	r3, [pc, #616]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b99      	ldr	r3, [pc, #612]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	0049      	lsls	r1, r1, #1
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c76:	f7fe fa09 	bl	800108c <HAL_GetTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c80:	f7fe fa04 	bl	800108c <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d904      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c8e:	2313      	movs	r3, #19
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	2203      	movs	r2, #3
 8002c94:	701a      	strb	r2, [r3, #0]
        break;
 8002c96:	e005      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c98:	4b8e      	ldr	r3, [pc, #568]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d0ed      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002ca4:	2313      	movs	r3, #19
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d154      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cae:	4b88      	ldr	r3, [pc, #544]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cb2:	23c0      	movs	r3, #192	; 0xc0
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d019      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d014      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cca:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	4a82      	ldr	r2, [pc, #520]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd4:	4b7e      	ldr	r3, [pc, #504]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cd8:	4b7d      	ldr	r3, [pc, #500]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cda:	2180      	movs	r1, #128	; 0x80
 8002cdc:	0249      	lsls	r1, r1, #9
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce2:	4b7b      	ldr	r3, [pc, #492]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ce4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ce6:	4b7a      	ldr	r3, [pc, #488]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ce8:	497c      	ldr	r1, [pc, #496]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cee:	4b78      	ldr	r3, [pc, #480]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d016      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe f9c6 	bl	800108c <HAL_GetTick>
 8002d00:	0003      	movs	r3, r0
 8002d02:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d04:	e00c      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fe f9c1 	bl	800108c <HAL_GetTick>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	4a73      	ldr	r2, [pc, #460]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d904      	bls.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d16:	2313      	movs	r3, #19
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	701a      	strb	r2, [r3, #0]
            break;
 8002d1e:	e004      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d20:	4b6b      	ldr	r3, [pc, #428]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	2202      	movs	r2, #2
 8002d26:	4013      	ands	r3, r2
 8002d28:	d0ed      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d2a:	2313      	movs	r3, #19
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d34:	4b66      	ldr	r3, [pc, #408]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	4a67      	ldr	r2, [pc, #412]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d42:	4b63      	ldr	r3, [pc, #396]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d44:	430a      	orrs	r2, r1
 8002d46:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d48:	e00c      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d4a:	2312      	movs	r3, #18
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	2213      	movs	r2, #19
 8002d50:	18ba      	adds	r2, r7, r2
 8002d52:	7812      	ldrb	r2, [r2, #0]
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e005      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	2312      	movs	r3, #18
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2213      	movs	r2, #19
 8002d5e:	18ba      	adds	r2, r7, r2
 8002d60:	7812      	ldrb	r2, [r2, #0]
 8002d62:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d64:	2311      	movs	r3, #17
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6e:	4b58      	ldr	r3, [pc, #352]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d72:	4b57      	ldr	r3, [pc, #348]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d74:	495b      	ldr	r1, [pc, #364]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d84:	4b52      	ldr	r3, [pc, #328]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	2203      	movs	r2, #3
 8002d8a:	4393      	bics	r3, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	4b4f      	ldr	r3, [pc, #316]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d94:	430a      	orrs	r2, r1
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d009      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002da2:	4b4b      	ldr	r3, [pc, #300]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	4a50      	ldr	r2, [pc, #320]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002db2:	430a      	orrs	r2, r1
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dc2:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	4a49      	ldr	r2, [pc, #292]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	4b3f      	ldr	r3, [pc, #252]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4013      	ands	r3, r2
 8002de0:	d009      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002de2:	4b3b      	ldr	r3, [pc, #236]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	4a42      	ldr	r2, [pc, #264]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699a      	ldr	r2, [r3, #24]
 8002df0:	4b37      	ldr	r3, [pc, #220]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002df2:	430a      	orrs	r2, r1
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d009      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e00:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	0019      	movs	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	4b30      	ldr	r3, [pc, #192]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e10:	430a      	orrs	r2, r1
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	01db      	lsls	r3, r3, #7
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d015      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e20:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	0899      	lsrs	r1, r3, #2
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69da      	ldr	r2, [r3, #28]
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	05db      	lsls	r3, r3, #23
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d106      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	0249      	lsls	r1, r1, #9
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	039b      	lsls	r3, r3, #14
 8002e54:	4013      	ands	r3, r2
 8002e56:	d016      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	0019      	movs	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1a      	ldr	r2, [r3, #32]
 8002e66:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1a      	ldr	r2, [r3, #32]
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	03db      	lsls	r3, r3, #15
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d106      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	0449      	lsls	r1, r1, #17
 8002e82:	430a      	orrs	r2, r1
 8002e84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d016      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	4a19      	ldr	r2, [pc, #100]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	01db      	lsls	r3, r3, #7
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002eb2:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	0249      	lsls	r1, r1, #9
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ec0:	2312      	movs	r3, #18
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	781b      	ldrb	r3, [r3, #0]
}
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b006      	add	sp, #24
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	fffffcff 	.word	0xfffffcff
 8002edc:	fffeffff 	.word	0xfffeffff
 8002ee0:	00001388 	.word	0x00001388
 8002ee4:	efffffff 	.word	0xefffffff
 8002ee8:	fffff3ff 	.word	0xfffff3ff
 8002eec:	fff3ffff 	.word	0xfff3ffff
 8002ef0:	ffcfffff 	.word	0xffcfffff
 8002ef4:	ffffcfff 	.word	0xffffcfff
 8002ef8:	ffbfffff 	.word	0xffbfffff
 8002efc:	ffff3fff 	.word	0xffff3fff

08002f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0a8      	b.n	8003064 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	2382      	movs	r3, #130	; 0x82
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d009      	beq.n	8002f3a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	61da      	str	r2, [r3, #28]
 8002f2c:	e005      	b.n	8002f3a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	225d      	movs	r2, #93	; 0x5d
 8002f44:	5c9b      	ldrb	r3, [r3, r2]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	225c      	movs	r2, #92	; 0x5c
 8002f50:	2100      	movs	r1, #0
 8002f52:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7fd fd98 	bl	8000a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	225d      	movs	r2, #93	; 0x5d
 8002f60:	2102      	movs	r1, #2
 8002f62:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2140      	movs	r1, #64	; 0x40
 8002f70:	438a      	bics	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	23e0      	movs	r3, #224	; 0xe0
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d902      	bls.n	8002f86 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e002      	b.n	8002f8c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	015b      	lsls	r3, r3, #5
 8002f8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	23f0      	movs	r3, #240	; 0xf0
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d008      	beq.n	8002faa <HAL_SPI_Init+0xaa>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	23e0      	movs	r3, #224	; 0xe0
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d002      	beq.n	8002faa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	2382      	movs	r3, #130	; 0x82
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6899      	ldr	r1, [r3, #8]
 8002fb8:	2384      	movs	r3, #132	; 0x84
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	400b      	ands	r3, r1
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2102      	movs	r1, #2
 8002fc6:	400b      	ands	r3, r1
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	2101      	movs	r1, #1
 8002fd0:	400b      	ands	r3, r1
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6999      	ldr	r1, [r3, #24]
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	400b      	ands	r3, r1
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	2138      	movs	r1, #56	; 0x38
 8002fe6:	400b      	ands	r3, r1
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	400b      	ands	r3, r1
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	0011      	movs	r1, r2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	019b      	lsls	r3, r3, #6
 8002ffe:	401a      	ands	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	2204      	movs	r2, #4
 8003010:	401a      	ands	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2110      	movs	r1, #16
 8003018:	400b      	ands	r3, r1
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003020:	2108      	movs	r1, #8
 8003022:	400b      	ands	r3, r1
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68d9      	ldr	r1, [r3, #12]
 800302a:	23f0      	movs	r3, #240	; 0xf0
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	400b      	ands	r3, r1
 8003030:	431a      	orrs	r2, r3
 8003032:	0011      	movs	r1, r2
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	015b      	lsls	r3, r3, #5
 800303a:	401a      	ands	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4907      	ldr	r1, [pc, #28]	; (800306c <HAL_SPI_Init+0x16c>)
 8003050:	400a      	ands	r2, r1
 8003052:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	225d      	movs	r2, #93	; 0x5d
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b004      	add	sp, #16
 800306a:	bd80      	pop	{r7, pc}
 800306c:	fffff7ff 	.word	0xfffff7ff

08003070 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e04a      	b.n	8003118 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	223d      	movs	r2, #61	; 0x3d
 8003086:	5c9b      	ldrb	r3, [r3, r2]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d107      	bne.n	800309e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	223c      	movs	r2, #60	; 0x3c
 8003092:	2100      	movs	r1, #0
 8003094:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0018      	movs	r0, r3
 800309a:	f7fd fe2d 	bl	8000cf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	223d      	movs	r2, #61	; 0x3d
 80030a2:	2102      	movs	r1, #2
 80030a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	0019      	movs	r1, r3
 80030b0:	0010      	movs	r0, r2
 80030b2:	f000 f935 	bl	8003320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2248      	movs	r2, #72	; 0x48
 80030ba:	2101      	movs	r1, #1
 80030bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	223e      	movs	r2, #62	; 0x3e
 80030c2:	2101      	movs	r1, #1
 80030c4:	5499      	strb	r1, [r3, r2]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	223f      	movs	r2, #63	; 0x3f
 80030ca:	2101      	movs	r1, #1
 80030cc:	5499      	strb	r1, [r3, r2]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2240      	movs	r2, #64	; 0x40
 80030d2:	2101      	movs	r1, #1
 80030d4:	5499      	strb	r1, [r3, r2]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2241      	movs	r2, #65	; 0x41
 80030da:	2101      	movs	r1, #1
 80030dc:	5499      	strb	r1, [r3, r2]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2242      	movs	r2, #66	; 0x42
 80030e2:	2101      	movs	r1, #1
 80030e4:	5499      	strb	r1, [r3, r2]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2243      	movs	r2, #67	; 0x43
 80030ea:	2101      	movs	r1, #1
 80030ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2244      	movs	r2, #68	; 0x44
 80030f2:	2101      	movs	r1, #1
 80030f4:	5499      	strb	r1, [r3, r2]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2245      	movs	r2, #69	; 0x45
 80030fa:	2101      	movs	r1, #1
 80030fc:	5499      	strb	r1, [r3, r2]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2246      	movs	r2, #70	; 0x46
 8003102:	2101      	movs	r1, #1
 8003104:	5499      	strb	r1, [r3, r2]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2247      	movs	r2, #71	; 0x47
 800310a:	2101      	movs	r1, #1
 800310c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	223d      	movs	r2, #61	; 0x3d
 8003112:	2101      	movs	r1, #1
 8003114:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800312c:	2317      	movs	r3, #23
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	223c      	movs	r2, #60	; 0x3c
 8003138:	5c9b      	ldrb	r3, [r3, r2]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_TIM_PWM_ConfigChannel+0x22>
 800313e:	2302      	movs	r3, #2
 8003140:	e0e5      	b.n	800330e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	223c      	movs	r2, #60	; 0x3c
 8003146:	2101      	movs	r1, #1
 8003148:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b14      	cmp	r3, #20
 800314e:	d900      	bls.n	8003152 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003150:	e0d1      	b.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	009a      	lsls	r2, r3, #2
 8003156:	4b70      	ldr	r3, [pc, #448]	; (8003318 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003158:	18d3      	adds	r3, r2, r3
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	0011      	movs	r1, r2
 8003166:	0018      	movs	r0, r3
 8003168:	f000 f95e 	bl	8003428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2108      	movs	r1, #8
 8003178:	430a      	orrs	r2, r1
 800317a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2104      	movs	r1, #4
 8003188:	438a      	bics	r2, r1
 800318a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6999      	ldr	r1, [r3, #24]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	619a      	str	r2, [r3, #24]
      break;
 800319e:	e0af      	b.n	8003300 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	0011      	movs	r1, r2
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 f9bd 	bl	8003528 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	0109      	lsls	r1, r1, #4
 80031bc:	430a      	orrs	r2, r1
 80031be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4954      	ldr	r1, [pc, #336]	; (800331c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80031cc:	400a      	ands	r2, r1
 80031ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	021a      	lsls	r2, r3, #8
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	619a      	str	r2, [r3, #24]
      break;
 80031e4:	e08c      	b.n	8003300 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	0011      	movs	r1, r2
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 fa18 	bl	8003624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69da      	ldr	r2, [r3, #28]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2108      	movs	r1, #8
 8003200:	430a      	orrs	r2, r1
 8003202:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2104      	movs	r1, #4
 8003210:	438a      	bics	r2, r1
 8003212:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69d9      	ldr	r1, [r3, #28]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	691a      	ldr	r2, [r3, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	61da      	str	r2, [r3, #28]
      break;
 8003226:	e06b      	b.n	8003300 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	0011      	movs	r1, r2
 8003230:	0018      	movs	r0, r3
 8003232:	f000 fa79 	bl	8003728 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	0109      	lsls	r1, r1, #4
 8003244:	430a      	orrs	r2, r1
 8003246:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4932      	ldr	r1, [pc, #200]	; (800331c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003254:	400a      	ands	r2, r1
 8003256:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69d9      	ldr	r1, [r3, #28]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	021a      	lsls	r2, r3, #8
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	61da      	str	r2, [r3, #28]
      break;
 800326c:	e048      	b.n	8003300 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	0011      	movs	r1, r2
 8003276:	0018      	movs	r0, r3
 8003278:	f000 faba 	bl	80037f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2108      	movs	r1, #8
 8003288:	430a      	orrs	r2, r1
 800328a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2104      	movs	r1, #4
 8003298:	438a      	bics	r2, r1
 800329a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80032ae:	e027      	b.n	8003300 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	0011      	movs	r1, r2
 80032b8:	0018      	movs	r0, r3
 80032ba:	f000 faf3 	bl	80038a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	0109      	lsls	r1, r1, #4
 80032cc:	430a      	orrs	r2, r1
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4910      	ldr	r1, [pc, #64]	; (800331c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80032dc:	400a      	ands	r2, r1
 80032de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	021a      	lsls	r2, r3, #8
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80032f4:	e004      	b.n	8003300 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80032f6:	2317      	movs	r3, #23
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	2201      	movs	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]
      break;
 80032fe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	223c      	movs	r2, #60	; 0x3c
 8003304:	2100      	movs	r1, #0
 8003306:	5499      	strb	r1, [r3, r2]

  return status;
 8003308:	2317      	movs	r3, #23
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	781b      	ldrb	r3, [r3, #0]
}
 800330e:	0018      	movs	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	b006      	add	sp, #24
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	08004878 	.word	0x08004878
 800331c:	fffffbff 	.word	0xfffffbff

08003320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a37      	ldr	r2, [pc, #220]	; (8003410 <TIM_Base_SetConfig+0xf0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d008      	beq.n	800334a <TIM_Base_SetConfig+0x2a>
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	05db      	lsls	r3, r3, #23
 800333e:	429a      	cmp	r2, r3
 8003340:	d003      	beq.n	800334a <TIM_Base_SetConfig+0x2a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a33      	ldr	r2, [pc, #204]	; (8003414 <TIM_Base_SetConfig+0xf4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d108      	bne.n	800335c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2270      	movs	r2, #112	; 0x70
 800334e:	4393      	bics	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a2c      	ldr	r2, [pc, #176]	; (8003410 <TIM_Base_SetConfig+0xf0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d014      	beq.n	800338e <TIM_Base_SetConfig+0x6e>
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	05db      	lsls	r3, r3, #23
 800336a:	429a      	cmp	r2, r3
 800336c:	d00f      	beq.n	800338e <TIM_Base_SetConfig+0x6e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a28      	ldr	r2, [pc, #160]	; (8003414 <TIM_Base_SetConfig+0xf4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00b      	beq.n	800338e <TIM_Base_SetConfig+0x6e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a27      	ldr	r2, [pc, #156]	; (8003418 <TIM_Base_SetConfig+0xf8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <TIM_Base_SetConfig+0x6e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a26      	ldr	r2, [pc, #152]	; (800341c <TIM_Base_SetConfig+0xfc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d003      	beq.n	800338e <TIM_Base_SetConfig+0x6e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a25      	ldr	r2, [pc, #148]	; (8003420 <TIM_Base_SetConfig+0x100>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d108      	bne.n	80033a0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a24      	ldr	r2, [pc, #144]	; (8003424 <TIM_Base_SetConfig+0x104>)
 8003392:	4013      	ands	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	4393      	bics	r3, r2
 80033a6:	001a      	movs	r2, r3
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a11      	ldr	r2, [pc, #68]	; (8003410 <TIM_Base_SetConfig+0xf0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <TIM_Base_SetConfig+0xbe>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a12      	ldr	r2, [pc, #72]	; (800341c <TIM_Base_SetConfig+0xfc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d003      	beq.n	80033de <TIM_Base_SetConfig+0xbe>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a11      	ldr	r2, [pc, #68]	; (8003420 <TIM_Base_SetConfig+0x100>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d103      	bne.n	80033e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2201      	movs	r2, #1
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d106      	bne.n	8003406 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2201      	movs	r2, #1
 80033fe:	4393      	bics	r3, r2
 8003400:	001a      	movs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	611a      	str	r2, [r3, #16]
  }
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b004      	add	sp, #16
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40000400 	.word	0x40000400
 8003418:	40002000 	.word	0x40002000
 800341c:	40014400 	.word	0x40014400
 8003420:	40014800 	.word	0x40014800
 8003424:	fffffcff 	.word	0xfffffcff

08003428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	2201      	movs	r2, #1
 800343e:	4393      	bics	r3, r2
 8003440:	001a      	movs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a2e      	ldr	r2, [pc, #184]	; (8003510 <TIM_OC1_SetConfig+0xe8>)
 8003456:	4013      	ands	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2203      	movs	r2, #3
 800345e:	4393      	bics	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2202      	movs	r2, #2
 8003470:	4393      	bics	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a24      	ldr	r2, [pc, #144]	; (8003514 <TIM_OC1_SetConfig+0xec>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <TIM_OC1_SetConfig+0x6e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a23      	ldr	r2, [pc, #140]	; (8003518 <TIM_OC1_SetConfig+0xf0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d003      	beq.n	8003496 <TIM_OC1_SetConfig+0x6e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a22      	ldr	r2, [pc, #136]	; (800351c <TIM_OC1_SetConfig+0xf4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d10c      	bne.n	80034b0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2208      	movs	r2, #8
 800349a:	4393      	bics	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2204      	movs	r2, #4
 80034ac:	4393      	bics	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a18      	ldr	r2, [pc, #96]	; (8003514 <TIM_OC1_SetConfig+0xec>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d007      	beq.n	80034c8 <TIM_OC1_SetConfig+0xa0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a17      	ldr	r2, [pc, #92]	; (8003518 <TIM_OC1_SetConfig+0xf0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <TIM_OC1_SetConfig+0xa0>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a16      	ldr	r2, [pc, #88]	; (800351c <TIM_OC1_SetConfig+0xf4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d111      	bne.n	80034ec <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4a15      	ldr	r2, [pc, #84]	; (8003520 <TIM_OC1_SetConfig+0xf8>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4a14      	ldr	r2, [pc, #80]	; (8003524 <TIM_OC1_SetConfig+0xfc>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b006      	add	sp, #24
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	fffeff8f 	.word	0xfffeff8f
 8003514:	40012c00 	.word	0x40012c00
 8003518:	40014400 	.word	0x40014400
 800351c:	40014800 	.word	0x40014800
 8003520:	fffffeff 	.word	0xfffffeff
 8003524:	fffffdff 	.word	0xfffffdff

08003528 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	2210      	movs	r2, #16
 800353e:	4393      	bics	r3, r2
 8003540:	001a      	movs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a2c      	ldr	r2, [pc, #176]	; (8003608 <TIM_OC2_SetConfig+0xe0>)
 8003556:	4013      	ands	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4a2b      	ldr	r2, [pc, #172]	; (800360c <TIM_OC2_SetConfig+0xe4>)
 800355e:	4013      	ands	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2220      	movs	r2, #32
 8003572:	4393      	bics	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a22      	ldr	r2, [pc, #136]	; (8003610 <TIM_OC2_SetConfig+0xe8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10d      	bne.n	80035a6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	4393      	bics	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2240      	movs	r2, #64	; 0x40
 80035a2:	4393      	bics	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a19      	ldr	r2, [pc, #100]	; (8003610 <TIM_OC2_SetConfig+0xe8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <TIM_OC2_SetConfig+0x96>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a18      	ldr	r2, [pc, #96]	; (8003614 <TIM_OC2_SetConfig+0xec>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_OC2_SetConfig+0x96>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a17      	ldr	r2, [pc, #92]	; (8003618 <TIM_OC2_SetConfig+0xf0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d113      	bne.n	80035e6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4a16      	ldr	r2, [pc, #88]	; (800361c <TIM_OC2_SetConfig+0xf4>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4a15      	ldr	r2, [pc, #84]	; (8003620 <TIM_OC2_SetConfig+0xf8>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	621a      	str	r2, [r3, #32]
}
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b006      	add	sp, #24
 8003606:	bd80      	pop	{r7, pc}
 8003608:	feff8fff 	.word	0xfeff8fff
 800360c:	fffffcff 	.word	0xfffffcff
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40014400 	.word	0x40014400
 8003618:	40014800 	.word	0x40014800
 800361c:	fffffbff 	.word	0xfffffbff
 8003620:	fffff7ff 	.word	0xfffff7ff

08003624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4a31      	ldr	r2, [pc, #196]	; (8003700 <TIM_OC3_SetConfig+0xdc>)
 800363a:	401a      	ands	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a2d      	ldr	r2, [pc, #180]	; (8003704 <TIM_OC3_SetConfig+0xe0>)
 8003650:	4013      	ands	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2203      	movs	r2, #3
 8003658:	4393      	bics	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	4a27      	ldr	r2, [pc, #156]	; (8003708 <TIM_OC3_SetConfig+0xe4>)
 800366a:	4013      	ands	r3, r2
 800366c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a23      	ldr	r2, [pc, #140]	; (800370c <TIM_OC3_SetConfig+0xe8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10d      	bne.n	800369e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	4a22      	ldr	r2, [pc, #136]	; (8003710 <TIM_OC3_SetConfig+0xec>)
 8003686:	4013      	ands	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	4a1e      	ldr	r2, [pc, #120]	; (8003714 <TIM_OC3_SetConfig+0xf0>)
 800369a:	4013      	ands	r3, r2
 800369c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a1a      	ldr	r2, [pc, #104]	; (800370c <TIM_OC3_SetConfig+0xe8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d007      	beq.n	80036b6 <TIM_OC3_SetConfig+0x92>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <TIM_OC3_SetConfig+0xf4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d003      	beq.n	80036b6 <TIM_OC3_SetConfig+0x92>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a1a      	ldr	r2, [pc, #104]	; (800371c <TIM_OC3_SetConfig+0xf8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d113      	bne.n	80036de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4a19      	ldr	r2, [pc, #100]	; (8003720 <TIM_OC3_SetConfig+0xfc>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4a18      	ldr	r2, [pc, #96]	; (8003724 <TIM_OC3_SetConfig+0x100>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	621a      	str	r2, [r3, #32]
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b006      	add	sp, #24
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	fffffeff 	.word	0xfffffeff
 8003704:	fffeff8f 	.word	0xfffeff8f
 8003708:	fffffdff 	.word	0xfffffdff
 800370c:	40012c00 	.word	0x40012c00
 8003710:	fffff7ff 	.word	0xfffff7ff
 8003714:	fffffbff 	.word	0xfffffbff
 8003718:	40014400 	.word	0x40014400
 800371c:	40014800 	.word	0x40014800
 8003720:	ffffefff 	.word	0xffffefff
 8003724:	ffffdfff 	.word	0xffffdfff

08003728 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4a24      	ldr	r2, [pc, #144]	; (80037d0 <TIM_OC4_SetConfig+0xa8>)
 800373e:	401a      	ands	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a20      	ldr	r2, [pc, #128]	; (80037d4 <TIM_OC4_SetConfig+0xac>)
 8003754:	4013      	ands	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <TIM_OC4_SetConfig+0xb0>)
 800375c:	4013      	ands	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <TIM_OC4_SetConfig+0xb4>)
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	031b      	lsls	r3, r3, #12
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <TIM_OC4_SetConfig+0xb8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d007      	beq.n	8003798 <TIM_OC4_SetConfig+0x70>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <TIM_OC4_SetConfig+0xbc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d003      	beq.n	8003798 <TIM_OC4_SetConfig+0x70>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a15      	ldr	r2, [pc, #84]	; (80037e8 <TIM_OC4_SetConfig+0xc0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d109      	bne.n	80037ac <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	4a14      	ldr	r2, [pc, #80]	; (80037ec <TIM_OC4_SetConfig+0xc4>)
 800379c:	4013      	ands	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	019b      	lsls	r3, r3, #6
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b006      	add	sp, #24
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	ffffefff 	.word	0xffffefff
 80037d4:	feff8fff 	.word	0xfeff8fff
 80037d8:	fffffcff 	.word	0xfffffcff
 80037dc:	ffffdfff 	.word	0xffffdfff
 80037e0:	40012c00 	.word	0x40012c00
 80037e4:	40014400 	.word	0x40014400
 80037e8:	40014800 	.word	0x40014800
 80037ec:	ffffbfff 	.word	0xffffbfff

080037f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4a21      	ldr	r2, [pc, #132]	; (800388c <TIM_OC5_SetConfig+0x9c>)
 8003806:	401a      	ands	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <TIM_OC5_SetConfig+0xa0>)
 800381c:	4013      	ands	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <TIM_OC5_SetConfig+0xa4>)
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	041b      	lsls	r3, r3, #16
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a15      	ldr	r2, [pc, #84]	; (8003898 <TIM_OC5_SetConfig+0xa8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <TIM_OC5_SetConfig+0x66>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a14      	ldr	r2, [pc, #80]	; (800389c <TIM_OC5_SetConfig+0xac>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d003      	beq.n	8003856 <TIM_OC5_SetConfig+0x66>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <TIM_OC5_SetConfig+0xb0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d109      	bne.n	800386a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	4a0c      	ldr	r2, [pc, #48]	; (800388c <TIM_OC5_SetConfig+0x9c>)
 800385a:	4013      	ands	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	621a      	str	r2, [r3, #32]
}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b006      	add	sp, #24
 800388a:	bd80      	pop	{r7, pc}
 800388c:	fffeffff 	.word	0xfffeffff
 8003890:	fffeff8f 	.word	0xfffeff8f
 8003894:	fffdffff 	.word	0xfffdffff
 8003898:	40012c00 	.word	0x40012c00
 800389c:	40014400 	.word	0x40014400
 80038a0:	40014800 	.word	0x40014800

080038a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	4a22      	ldr	r2, [pc, #136]	; (8003944 <TIM_OC6_SetConfig+0xa0>)
 80038ba:	401a      	ands	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <TIM_OC6_SetConfig+0xa4>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4a1a      	ldr	r2, [pc, #104]	; (800394c <TIM_OC6_SetConfig+0xa8>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	051b      	lsls	r3, r3, #20
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a16      	ldr	r2, [pc, #88]	; (8003950 <TIM_OC6_SetConfig+0xac>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d007      	beq.n	800390c <TIM_OC6_SetConfig+0x68>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a15      	ldr	r2, [pc, #84]	; (8003954 <TIM_OC6_SetConfig+0xb0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_OC6_SetConfig+0x68>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a14      	ldr	r2, [pc, #80]	; (8003958 <TIM_OC6_SetConfig+0xb4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d109      	bne.n	8003920 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	4a13      	ldr	r2, [pc, #76]	; (800395c <TIM_OC6_SetConfig+0xb8>)
 8003910:	4013      	ands	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	029b      	lsls	r3, r3, #10
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	621a      	str	r2, [r3, #32]
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	46bd      	mov	sp, r7
 800393e:	b006      	add	sp, #24
 8003940:	bd80      	pop	{r7, pc}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	ffefffff 	.word	0xffefffff
 8003948:	feff8fff 	.word	0xfeff8fff
 800394c:	ffdfffff 	.word	0xffdfffff
 8003950:	40012c00 	.word	0x40012c00
 8003954:	40014400 	.word	0x40014400
 8003958:	40014800 	.word	0x40014800
 800395c:	fffbffff 	.word	0xfffbffff

08003960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	223c      	movs	r2, #60	; 0x3c
 800396e:	5c9b      	ldrb	r3, [r3, r2]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003974:	2302      	movs	r3, #2
 8003976:	e050      	b.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	223c      	movs	r2, #60	; 0x3c
 800397c:	2101      	movs	r1, #1
 800397e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	223d      	movs	r2, #61	; 0x3d
 8003984:	2102      	movs	r1, #2
 8003986:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d108      	bne.n	80039b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4a20      	ldr	r2, [pc, #128]	; (8003a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2270      	movs	r2, #112	; 0x70
 80039b8:	4393      	bics	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00a      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	05db      	lsls	r3, r3, #23
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d004      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10c      	bne.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2280      	movs	r2, #128	; 0x80
 80039f2:	4393      	bics	r3, r2
 80039f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	223d      	movs	r2, #61	; 0x3d
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	223c      	movs	r2, #60	; 0x3c
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b004      	add	sp, #16
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	ff0fffff 	.word	0xff0fffff
 8003a2c:	40000400 	.word	0x40000400

08003a30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	223c      	movs	r2, #60	; 0x3c
 8003a42:	5c9b      	ldrb	r3, [r3, r2]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e06f      	b.n	8003b2c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	223c      	movs	r2, #60	; 0x3c
 8003a50:	2101      	movs	r1, #1
 8003a52:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	22ff      	movs	r2, #255	; 0xff
 8003a58:	4393      	bics	r3, r2
 8003a5a:	001a      	movs	r2, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a33      	ldr	r2, [pc, #204]	; (8003b34 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003a68:	401a      	ands	r2, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4a30      	ldr	r2, [pc, #192]	; (8003b38 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003a76:	401a      	ands	r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a2e      	ldr	r2, [pc, #184]	; (8003b3c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003a84:	401a      	ands	r2, r3
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4a2b      	ldr	r2, [pc, #172]	; (8003b40 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003a92:	401a      	ands	r2, r3
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a29      	ldr	r2, [pc, #164]	; (8003b44 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003aa0:	401a      	ands	r2, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a26      	ldr	r2, [pc, #152]	; (8003b48 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003aae:	401a      	ands	r2, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4a24      	ldr	r2, [pc, #144]	; (8003b4c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003abc:	401a      	ands	r2, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	041b      	lsls	r3, r3, #16
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a21      	ldr	r2, [pc, #132]	; (8003b50 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003acc:	401a      	ands	r2, r3
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d11c      	bne.n	8003b1a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003ae4:	401a      	ands	r2, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	051b      	lsls	r3, r3, #20
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a1a      	ldr	r2, [pc, #104]	; (8003b5c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003af4:	401a      	ands	r2, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4a17      	ldr	r2, [pc, #92]	; (8003b60 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003b02:	401a      	ands	r2, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003b10:	401a      	ands	r2, r3
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	223c      	movs	r2, #60	; 0x3c
 8003b26:	2100      	movs	r1, #0
 8003b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b004      	add	sp, #16
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	fffffcff 	.word	0xfffffcff
 8003b38:	fffffbff 	.word	0xfffffbff
 8003b3c:	fffff7ff 	.word	0xfffff7ff
 8003b40:	ffffefff 	.word	0xffffefff
 8003b44:	ffffdfff 	.word	0xffffdfff
 8003b48:	ffffbfff 	.word	0xffffbfff
 8003b4c:	fff0ffff 	.word	0xfff0ffff
 8003b50:	efffffff 	.word	0xefffffff
 8003b54:	40012c00 	.word	0x40012c00
 8003b58:	ff0fffff 	.word	0xff0fffff
 8003b5c:	feffffff 	.word	0xfeffffff
 8003b60:	fdffffff 	.word	0xfdffffff
 8003b64:	dfffffff 	.word	0xdfffffff

08003b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e046      	b.n	8003c08 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2288      	movs	r2, #136	; 0x88
 8003b7e:	589b      	ldr	r3, [r3, r2]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d107      	bne.n	8003b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2284      	movs	r2, #132	; 0x84
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f7fd f974 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2288      	movs	r2, #136	; 0x88
 8003b98:	2124      	movs	r1, #36	; 0x24
 8003b9a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	438a      	bics	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f000 faa4 	bl	8004104 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 f828 	bl	8003c14 <UART_SetConfig>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e01c      	b.n	8003c08 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	490d      	ldr	r1, [pc, #52]	; (8003c10 <HAL_UART_Init+0xa8>)
 8003bda:	400a      	ands	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	212a      	movs	r1, #42	; 0x2a
 8003bea:	438a      	bics	r2, r1
 8003bec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 fb33 	bl	800426c <UART_CheckIdleState>
 8003c06:	0003      	movs	r3, r0
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b002      	add	sp, #8
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	ffffb7ff 	.word	0xffffb7ff

08003c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c14:	b5b0      	push	{r4, r5, r7, lr}
 8003c16:	b090      	sub	sp, #64	; 0x40
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c1c:	231a      	movs	r3, #26
 8003c1e:	2220      	movs	r2, #32
 8003c20:	189b      	adds	r3, r3, r2
 8003c22:	19db      	adds	r3, r3, r7
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4ac4      	ldr	r2, [pc, #784]	; (8003f58 <UART_SetConfig+0x344>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c52:	430b      	orrs	r3, r1
 8003c54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4abf      	ldr	r2, [pc, #764]	; (8003f5c <UART_SetConfig+0x348>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	0018      	movs	r0, r3
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	68d9      	ldr	r1, [r3, #12]
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4ab9      	ldr	r2, [pc, #740]	; (8003f60 <UART_SetConfig+0x34c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c86:	4313      	orrs	r3, r2
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4ab4      	ldr	r2, [pc, #720]	; (8003f64 <UART_SetConfig+0x350>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	0019      	movs	r1, r3
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	220f      	movs	r2, #15
 8003ca8:	4393      	bics	r3, r2
 8003caa:	0018      	movs	r0, r3
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4aaa      	ldr	r2, [pc, #680]	; (8003f68 <UART_SetConfig+0x354>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d131      	bne.n	8003d28 <UART_SetConfig+0x114>
 8003cc4:	4ba9      	ldr	r3, [pc, #676]	; (8003f6c <UART_SetConfig+0x358>)
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	2203      	movs	r2, #3
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d01d      	beq.n	8003d0c <UART_SetConfig+0xf8>
 8003cd0:	d823      	bhi.n	8003d1a <UART_SetConfig+0x106>
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d00c      	beq.n	8003cf0 <UART_SetConfig+0xdc>
 8003cd6:	d820      	bhi.n	8003d1a <UART_SetConfig+0x106>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <UART_SetConfig+0xce>
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d00e      	beq.n	8003cfe <UART_SetConfig+0xea>
 8003ce0:	e01b      	b.n	8003d1a <UART_SetConfig+0x106>
 8003ce2:	231b      	movs	r3, #27
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	189b      	adds	r3, r3, r2
 8003ce8:	19db      	adds	r3, r3, r7
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]
 8003cee:	e071      	b.n	8003dd4 <UART_SetConfig+0x1c0>
 8003cf0:	231b      	movs	r3, #27
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	189b      	adds	r3, r3, r2
 8003cf6:	19db      	adds	r3, r3, r7
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	e06a      	b.n	8003dd4 <UART_SetConfig+0x1c0>
 8003cfe:	231b      	movs	r3, #27
 8003d00:	2220      	movs	r2, #32
 8003d02:	189b      	adds	r3, r3, r2
 8003d04:	19db      	adds	r3, r3, r7
 8003d06:	2204      	movs	r2, #4
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e063      	b.n	8003dd4 <UART_SetConfig+0x1c0>
 8003d0c:	231b      	movs	r3, #27
 8003d0e:	2220      	movs	r2, #32
 8003d10:	189b      	adds	r3, r3, r2
 8003d12:	19db      	adds	r3, r3, r7
 8003d14:	2208      	movs	r2, #8
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	e05c      	b.n	8003dd4 <UART_SetConfig+0x1c0>
 8003d1a:	231b      	movs	r3, #27
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	189b      	adds	r3, r3, r2
 8003d20:	19db      	adds	r3, r3, r7
 8003d22:	2210      	movs	r2, #16
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	e055      	b.n	8003dd4 <UART_SetConfig+0x1c0>
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a90      	ldr	r2, [pc, #576]	; (8003f70 <UART_SetConfig+0x35c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d106      	bne.n	8003d40 <UART_SetConfig+0x12c>
 8003d32:	231b      	movs	r3, #27
 8003d34:	2220      	movs	r2, #32
 8003d36:	189b      	adds	r3, r3, r2
 8003d38:	19db      	adds	r3, r3, r7
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	e049      	b.n	8003dd4 <UART_SetConfig+0x1c0>
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a86      	ldr	r2, [pc, #536]	; (8003f60 <UART_SetConfig+0x34c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d13e      	bne.n	8003dc8 <UART_SetConfig+0x1b4>
 8003d4a:	4b88      	ldr	r3, [pc, #544]	; (8003f6c <UART_SetConfig+0x358>)
 8003d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d4e:	23c0      	movs	r3, #192	; 0xc0
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	4013      	ands	r3, r2
 8003d54:	22c0      	movs	r2, #192	; 0xc0
 8003d56:	0112      	lsls	r2, r2, #4
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d027      	beq.n	8003dac <UART_SetConfig+0x198>
 8003d5c:	22c0      	movs	r2, #192	; 0xc0
 8003d5e:	0112      	lsls	r2, r2, #4
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d82a      	bhi.n	8003dba <UART_SetConfig+0x1a6>
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	0112      	lsls	r2, r2, #4
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d011      	beq.n	8003d90 <UART_SetConfig+0x17c>
 8003d6c:	2280      	movs	r2, #128	; 0x80
 8003d6e:	0112      	lsls	r2, r2, #4
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d822      	bhi.n	8003dba <UART_SetConfig+0x1a6>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <UART_SetConfig+0x16e>
 8003d78:	2280      	movs	r2, #128	; 0x80
 8003d7a:	00d2      	lsls	r2, r2, #3
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00e      	beq.n	8003d9e <UART_SetConfig+0x18a>
 8003d80:	e01b      	b.n	8003dba <UART_SetConfig+0x1a6>
 8003d82:	231b      	movs	r3, #27
 8003d84:	2220      	movs	r2, #32
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	19db      	adds	r3, r3, r7
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e021      	b.n	8003dd4 <UART_SetConfig+0x1c0>
 8003d90:	231b      	movs	r3, #27
 8003d92:	2220      	movs	r2, #32
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	19db      	adds	r3, r3, r7
 8003d98:	2202      	movs	r2, #2
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e01a      	b.n	8003dd4 <UART_SetConfig+0x1c0>
 8003d9e:	231b      	movs	r3, #27
 8003da0:	2220      	movs	r2, #32
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	19db      	adds	r3, r3, r7
 8003da6:	2204      	movs	r2, #4
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e013      	b.n	8003dd4 <UART_SetConfig+0x1c0>
 8003dac:	231b      	movs	r3, #27
 8003dae:	2220      	movs	r2, #32
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	19db      	adds	r3, r3, r7
 8003db4:	2208      	movs	r2, #8
 8003db6:	701a      	strb	r2, [r3, #0]
 8003db8:	e00c      	b.n	8003dd4 <UART_SetConfig+0x1c0>
 8003dba:	231b      	movs	r3, #27
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	189b      	adds	r3, r3, r2
 8003dc0:	19db      	adds	r3, r3, r7
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e005      	b.n	8003dd4 <UART_SetConfig+0x1c0>
 8003dc8:	231b      	movs	r3, #27
 8003dca:	2220      	movs	r2, #32
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	19db      	adds	r3, r3, r7
 8003dd0:	2210      	movs	r2, #16
 8003dd2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a61      	ldr	r2, [pc, #388]	; (8003f60 <UART_SetConfig+0x34c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d000      	beq.n	8003de0 <UART_SetConfig+0x1cc>
 8003dde:	e092      	b.n	8003f06 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003de0:	231b      	movs	r3, #27
 8003de2:	2220      	movs	r2, #32
 8003de4:	189b      	adds	r3, r3, r2
 8003de6:	19db      	adds	r3, r3, r7
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d015      	beq.n	8003e1a <UART_SetConfig+0x206>
 8003dee:	dc18      	bgt.n	8003e22 <UART_SetConfig+0x20e>
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d00d      	beq.n	8003e10 <UART_SetConfig+0x1fc>
 8003df4:	dc15      	bgt.n	8003e22 <UART_SetConfig+0x20e>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <UART_SetConfig+0x1ec>
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d005      	beq.n	8003e0a <UART_SetConfig+0x1f6>
 8003dfe:	e010      	b.n	8003e22 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e00:	f7fe feee 	bl	8002be0 <HAL_RCC_GetPCLK1Freq>
 8003e04:	0003      	movs	r3, r0
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e08:	e014      	b.n	8003e34 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e0a:	4b5a      	ldr	r3, [pc, #360]	; (8003f74 <UART_SetConfig+0x360>)
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e0e:	e011      	b.n	8003e34 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e10:	f7fe fe5a 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8003e14:	0003      	movs	r3, r0
 8003e16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e18:	e00c      	b.n	8003e34 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e20:	e008      	b.n	8003e34 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003e26:	231a      	movs	r3, #26
 8003e28:	2220      	movs	r2, #32
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	19db      	adds	r3, r3, r7
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
        break;
 8003e32:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d100      	bne.n	8003e3c <UART_SetConfig+0x228>
 8003e3a:	e147      	b.n	80040cc <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e40:	4b4d      	ldr	r3, [pc, #308]	; (8003f78 <UART_SetConfig+0x364>)
 8003e42:	0052      	lsls	r2, r2, #1
 8003e44:	5ad3      	ldrh	r3, [r2, r3]
 8003e46:	0019      	movs	r1, r3
 8003e48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e4a:	f7fc f95b 	bl	8000104 <__udivsi3>
 8003e4e:	0003      	movs	r3, r0
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	0013      	movs	r3, r2
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d305      	bcc.n	8003e6e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d906      	bls.n	8003e7c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003e6e:	231a      	movs	r3, #26
 8003e70:	2220      	movs	r2, #32
 8003e72:	189b      	adds	r3, r3, r2
 8003e74:	19db      	adds	r3, r3, r7
 8003e76:	2201      	movs	r2, #1
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	e127      	b.n	80040cc <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	2300      	movs	r3, #0
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e88:	4b3b      	ldr	r3, [pc, #236]	; (8003f78 <UART_SetConfig+0x364>)
 8003e8a:	0052      	lsls	r2, r2, #1
 8003e8c:	5ad3      	ldrh	r3, [r2, r3]
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	69b8      	ldr	r0, [r7, #24]
 8003e9a:	69f9      	ldr	r1, [r7, #28]
 8003e9c:	f7fc faa8 	bl	80003f0 <__aeabi_uldivmod>
 8003ea0:	0002      	movs	r2, r0
 8003ea2:	000b      	movs	r3, r1
 8003ea4:	0e11      	lsrs	r1, r2, #24
 8003ea6:	021d      	lsls	r5, r3, #8
 8003ea8:	430d      	orrs	r5, r1
 8003eaa:	0214      	lsls	r4, r2, #8
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68b8      	ldr	r0, [r7, #8]
 8003eba:	68f9      	ldr	r1, [r7, #12]
 8003ebc:	1900      	adds	r0, r0, r4
 8003ebe:	4169      	adcs	r1, r5
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f7fc fa8f 	bl	80003f0 <__aeabi_uldivmod>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	000b      	movs	r3, r1
 8003ed6:	0013      	movs	r3, r2
 8003ed8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003edc:	23c0      	movs	r3, #192	; 0xc0
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d309      	bcc.n	8003ef8 <UART_SetConfig+0x2e4>
 8003ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	035b      	lsls	r3, r3, #13
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d204      	bcs.n	8003ef8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef4:	60da      	str	r2, [r3, #12]
 8003ef6:	e0e9      	b.n	80040cc <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003ef8:	231a      	movs	r3, #26
 8003efa:	2220      	movs	r2, #32
 8003efc:	189b      	adds	r3, r3, r2
 8003efe:	19db      	adds	r3, r3, r7
 8003f00:	2201      	movs	r2, #1
 8003f02:	701a      	strb	r2, [r3, #0]
 8003f04:	e0e2      	b.n	80040cc <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	69da      	ldr	r2, [r3, #28]
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d000      	beq.n	8003f14 <UART_SetConfig+0x300>
 8003f12:	e083      	b.n	800401c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003f14:	231b      	movs	r3, #27
 8003f16:	2220      	movs	r2, #32
 8003f18:	189b      	adds	r3, r3, r2
 8003f1a:	19db      	adds	r3, r3, r7
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d015      	beq.n	8003f4e <UART_SetConfig+0x33a>
 8003f22:	dc2b      	bgt.n	8003f7c <UART_SetConfig+0x368>
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d00d      	beq.n	8003f44 <UART_SetConfig+0x330>
 8003f28:	dc28      	bgt.n	8003f7c <UART_SetConfig+0x368>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <UART_SetConfig+0x320>
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d005      	beq.n	8003f3e <UART_SetConfig+0x32a>
 8003f32:	e023      	b.n	8003f7c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f34:	f7fe fe54 	bl	8002be0 <HAL_RCC_GetPCLK1Freq>
 8003f38:	0003      	movs	r3, r0
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f3c:	e027      	b.n	8003f8e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <UART_SetConfig+0x360>)
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f42:	e024      	b.n	8003f8e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f44:	f7fe fdc0 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f4c:	e01f      	b.n	8003f8e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f54:	e01b      	b.n	8003f8e <UART_SetConfig+0x37a>
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	cfff69f3 	.word	0xcfff69f3
 8003f5c:	ffffcfff 	.word	0xffffcfff
 8003f60:	40008000 	.word	0x40008000
 8003f64:	11fff4ff 	.word	0x11fff4ff
 8003f68:	40013800 	.word	0x40013800
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40004400 	.word	0x40004400
 8003f74:	00f42400 	.word	0x00f42400
 8003f78:	080048cc 	.word	0x080048cc
      default:
        pclk = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003f80:	231a      	movs	r3, #26
 8003f82:	2220      	movs	r2, #32
 8003f84:	189b      	adds	r3, r3, r2
 8003f86:	19db      	adds	r3, r3, r7
 8003f88:	2201      	movs	r2, #1
 8003f8a:	701a      	strb	r2, [r3, #0]
        break;
 8003f8c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d100      	bne.n	8003f96 <UART_SetConfig+0x382>
 8003f94:	e09a      	b.n	80040cc <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f9a:	4b58      	ldr	r3, [pc, #352]	; (80040fc <UART_SetConfig+0x4e8>)
 8003f9c:	0052      	lsls	r2, r2, #1
 8003f9e:	5ad3      	ldrh	r3, [r2, r3]
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fa4:	f7fc f8ae 	bl	8000104 <__udivsi3>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	005a      	lsls	r2, r3, #1
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	18d2      	adds	r2, r2, r3
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	0019      	movs	r1, r3
 8003fba:	0010      	movs	r0, r2
 8003fbc:	f7fc f8a2 	bl	8000104 <__udivsi3>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	2b0f      	cmp	r3, #15
 8003fc8:	d921      	bls.n	800400e <UART_SetConfig+0x3fa>
 8003fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	025b      	lsls	r3, r3, #9
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d21c      	bcs.n	800400e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	200e      	movs	r0, #14
 8003fda:	2420      	movs	r4, #32
 8003fdc:	1903      	adds	r3, r0, r4
 8003fde:	19db      	adds	r3, r3, r7
 8003fe0:	210f      	movs	r1, #15
 8003fe2:	438a      	bics	r2, r1
 8003fe4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	085b      	lsrs	r3, r3, #1
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2207      	movs	r2, #7
 8003fee:	4013      	ands	r3, r2
 8003ff0:	b299      	uxth	r1, r3
 8003ff2:	1903      	adds	r3, r0, r4
 8003ff4:	19db      	adds	r3, r3, r7
 8003ff6:	1902      	adds	r2, r0, r4
 8003ff8:	19d2      	adds	r2, r2, r7
 8003ffa:	8812      	ldrh	r2, [r2, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	1902      	adds	r2, r0, r4
 8004006:	19d2      	adds	r2, r2, r7
 8004008:	8812      	ldrh	r2, [r2, #0]
 800400a:	60da      	str	r2, [r3, #12]
 800400c:	e05e      	b.n	80040cc <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800400e:	231a      	movs	r3, #26
 8004010:	2220      	movs	r2, #32
 8004012:	189b      	adds	r3, r3, r2
 8004014:	19db      	adds	r3, r3, r7
 8004016:	2201      	movs	r2, #1
 8004018:	701a      	strb	r2, [r3, #0]
 800401a:	e057      	b.n	80040cc <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800401c:	231b      	movs	r3, #27
 800401e:	2220      	movs	r2, #32
 8004020:	189b      	adds	r3, r3, r2
 8004022:	19db      	adds	r3, r3, r7
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b08      	cmp	r3, #8
 8004028:	d015      	beq.n	8004056 <UART_SetConfig+0x442>
 800402a:	dc18      	bgt.n	800405e <UART_SetConfig+0x44a>
 800402c:	2b04      	cmp	r3, #4
 800402e:	d00d      	beq.n	800404c <UART_SetConfig+0x438>
 8004030:	dc15      	bgt.n	800405e <UART_SetConfig+0x44a>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <UART_SetConfig+0x428>
 8004036:	2b02      	cmp	r3, #2
 8004038:	d005      	beq.n	8004046 <UART_SetConfig+0x432>
 800403a:	e010      	b.n	800405e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800403c:	f7fe fdd0 	bl	8002be0 <HAL_RCC_GetPCLK1Freq>
 8004040:	0003      	movs	r3, r0
 8004042:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004044:	e014      	b.n	8004070 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004046:	4b2e      	ldr	r3, [pc, #184]	; (8004100 <UART_SetConfig+0x4ec>)
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800404a:	e011      	b.n	8004070 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404c:	f7fe fd3c 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8004050:	0003      	movs	r3, r0
 8004052:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004054:	e00c      	b.n	8004070 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800405c:	e008      	b.n	8004070 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004062:	231a      	movs	r3, #26
 8004064:	2220      	movs	r2, #32
 8004066:	189b      	adds	r3, r3, r2
 8004068:	19db      	adds	r3, r3, r7
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
        break;
 800406e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004072:	2b00      	cmp	r3, #0
 8004074:	d02a      	beq.n	80040cc <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800407a:	4b20      	ldr	r3, [pc, #128]	; (80040fc <UART_SetConfig+0x4e8>)
 800407c:	0052      	lsls	r2, r2, #1
 800407e:	5ad3      	ldrh	r3, [r2, r3]
 8004080:	0019      	movs	r1, r3
 8004082:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004084:	f7fc f83e 	bl	8000104 <__udivsi3>
 8004088:	0003      	movs	r3, r0
 800408a:	001a      	movs	r2, r3
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	18d2      	adds	r2, r2, r3
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	0019      	movs	r1, r3
 800409a:	0010      	movs	r0, r2
 800409c:	f7fc f832 	bl	8000104 <__udivsi3>
 80040a0:	0003      	movs	r3, r0
 80040a2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	2b0f      	cmp	r3, #15
 80040a8:	d90a      	bls.n	80040c0 <UART_SetConfig+0x4ac>
 80040aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	025b      	lsls	r3, r3, #9
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d205      	bcs.n	80040c0 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	e005      	b.n	80040cc <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80040c0:	231a      	movs	r3, #26
 80040c2:	2220      	movs	r2, #32
 80040c4:	189b      	adds	r3, r3, r2
 80040c6:	19db      	adds	r3, r3, r7
 80040c8:	2201      	movs	r2, #1
 80040ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	226a      	movs	r2, #106	; 0x6a
 80040d0:	2101      	movs	r1, #1
 80040d2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	2268      	movs	r2, #104	; 0x68
 80040d8:	2101      	movs	r1, #1
 80040da:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	2200      	movs	r2, #0
 80040e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	2200      	movs	r2, #0
 80040e6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80040e8:	231a      	movs	r3, #26
 80040ea:	2220      	movs	r2, #32
 80040ec:	189b      	adds	r3, r3, r2
 80040ee:	19db      	adds	r3, r3, r7
 80040f0:	781b      	ldrb	r3, [r3, #0]
}
 80040f2:	0018      	movs	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b010      	add	sp, #64	; 0x40
 80040f8:	bdb0      	pop	{r4, r5, r7, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	080048cc 	.word	0x080048cc
 8004100:	00f42400 	.word	0x00f42400

08004104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	2208      	movs	r2, #8
 8004112:	4013      	ands	r3, r2
 8004114:	d00b      	beq.n	800412e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a4a      	ldr	r2, [pc, #296]	; (8004248 <UART_AdvFeatureConfig+0x144>)
 800411e:	4013      	ands	r3, r2
 8004120:	0019      	movs	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	2201      	movs	r2, #1
 8004134:	4013      	ands	r3, r2
 8004136:	d00b      	beq.n	8004150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4a43      	ldr	r2, [pc, #268]	; (800424c <UART_AdvFeatureConfig+0x148>)
 8004140:	4013      	ands	r3, r2
 8004142:	0019      	movs	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	2202      	movs	r2, #2
 8004156:	4013      	ands	r3, r2
 8004158:	d00b      	beq.n	8004172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4a3b      	ldr	r2, [pc, #236]	; (8004250 <UART_AdvFeatureConfig+0x14c>)
 8004162:	4013      	ands	r3, r2
 8004164:	0019      	movs	r1, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	2204      	movs	r2, #4
 8004178:	4013      	ands	r3, r2
 800417a:	d00b      	beq.n	8004194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	4a34      	ldr	r2, [pc, #208]	; (8004254 <UART_AdvFeatureConfig+0x150>)
 8004184:	4013      	ands	r3, r2
 8004186:	0019      	movs	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	2210      	movs	r2, #16
 800419a:	4013      	ands	r3, r2
 800419c:	d00b      	beq.n	80041b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a2c      	ldr	r2, [pc, #176]	; (8004258 <UART_AdvFeatureConfig+0x154>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	0019      	movs	r1, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	2220      	movs	r2, #32
 80041bc:	4013      	ands	r3, r2
 80041be:	d00b      	beq.n	80041d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	4a25      	ldr	r2, [pc, #148]	; (800425c <UART_AdvFeatureConfig+0x158>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	0019      	movs	r1, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	2240      	movs	r2, #64	; 0x40
 80041de:	4013      	ands	r3, r2
 80041e0:	d01d      	beq.n	800421e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <UART_AdvFeatureConfig+0x15c>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	0019      	movs	r1, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	035b      	lsls	r3, r3, #13
 8004202:	429a      	cmp	r2, r3
 8004204:	d10b      	bne.n	800421e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4a15      	ldr	r2, [pc, #84]	; (8004264 <UART_AdvFeatureConfig+0x160>)
 800420e:	4013      	ands	r3, r2
 8004210:	0019      	movs	r1, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	2280      	movs	r2, #128	; 0x80
 8004224:	4013      	ands	r3, r2
 8004226:	d00b      	beq.n	8004240 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4a0e      	ldr	r2, [pc, #56]	; (8004268 <UART_AdvFeatureConfig+0x164>)
 8004230:	4013      	ands	r3, r2
 8004232:	0019      	movs	r1, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
  }
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}
 8004248:	ffff7fff 	.word	0xffff7fff
 800424c:	fffdffff 	.word	0xfffdffff
 8004250:	fffeffff 	.word	0xfffeffff
 8004254:	fffbffff 	.word	0xfffbffff
 8004258:	ffffefff 	.word	0xffffefff
 800425c:	ffffdfff 	.word	0xffffdfff
 8004260:	ffefffff 	.word	0xffefffff
 8004264:	ff9fffff 	.word	0xff9fffff
 8004268:	fff7ffff 	.word	0xfff7ffff

0800426c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b092      	sub	sp, #72	; 0x48
 8004270:	af02      	add	r7, sp, #8
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2290      	movs	r2, #144	; 0x90
 8004278:	2100      	movs	r1, #0
 800427a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800427c:	f7fc ff06 	bl	800108c <HAL_GetTick>
 8004280:	0003      	movs	r3, r0
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2208      	movs	r2, #8
 800428c:	4013      	ands	r3, r2
 800428e:	2b08      	cmp	r3, #8
 8004290:	d12d      	bne.n	80042ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004294:	2280      	movs	r2, #128	; 0x80
 8004296:	0391      	lsls	r1, r2, #14
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4a47      	ldr	r2, [pc, #284]	; (80043b8 <UART_CheckIdleState+0x14c>)
 800429c:	9200      	str	r2, [sp, #0]
 800429e:	2200      	movs	r2, #0
 80042a0:	f000 f88e 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 80042a4:	1e03      	subs	r3, r0, #0
 80042a6:	d022      	beq.n	80042ee <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a8:	f3ef 8310 	mrs	r3, PRIMASK
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80042b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80042b2:	2301      	movs	r3, #1
 80042b4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	f383 8810 	msr	PRIMASK, r3
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2180      	movs	r1, #128	; 0x80
 80042ca:	438a      	bics	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d4:	f383 8810 	msr	PRIMASK, r3
}
 80042d8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2288      	movs	r2, #136	; 0x88
 80042de:	2120      	movs	r1, #32
 80042e0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2284      	movs	r2, #132	; 0x84
 80042e6:	2100      	movs	r1, #0
 80042e8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e060      	b.n	80043b0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2204      	movs	r2, #4
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d146      	bne.n	800438a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fe:	2280      	movs	r2, #128	; 0x80
 8004300:	03d1      	lsls	r1, r2, #15
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4a2c      	ldr	r2, [pc, #176]	; (80043b8 <UART_CheckIdleState+0x14c>)
 8004306:	9200      	str	r2, [sp, #0]
 8004308:	2200      	movs	r2, #0
 800430a:	f000 f859 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 800430e:	1e03      	subs	r3, r0, #0
 8004310:	d03b      	beq.n	800438a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004312:	f3ef 8310 	mrs	r3, PRIMASK
 8004316:	60fb      	str	r3, [r7, #12]
  return(result);
 8004318:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800431a:	637b      	str	r3, [r7, #52]	; 0x34
 800431c:	2301      	movs	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f383 8810 	msr	PRIMASK, r3
}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4922      	ldr	r1, [pc, #136]	; (80043bc <UART_CheckIdleState+0x150>)
 8004334:	400a      	ands	r2, r1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f383 8810 	msr	PRIMASK, r3
}
 8004342:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004344:	f3ef 8310 	mrs	r3, PRIMASK
 8004348:	61bb      	str	r3, [r7, #24]
  return(result);
 800434a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434c:	633b      	str	r3, [r7, #48]	; 0x30
 800434e:	2301      	movs	r3, #1
 8004350:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f383 8810 	msr	PRIMASK, r3
}
 8004358:	46c0      	nop			; (mov r8, r8)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2101      	movs	r1, #1
 8004366:	438a      	bics	r2, r1
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	f383 8810 	msr	PRIMASK, r3
}
 8004374:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	228c      	movs	r2, #140	; 0x8c
 800437a:	2120      	movs	r1, #32
 800437c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2284      	movs	r2, #132	; 0x84
 8004382:	2100      	movs	r1, #0
 8004384:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e012      	b.n	80043b0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2288      	movs	r2, #136	; 0x88
 800438e:	2120      	movs	r1, #32
 8004390:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	228c      	movs	r2, #140	; 0x8c
 8004396:	2120      	movs	r1, #32
 8004398:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2284      	movs	r2, #132	; 0x84
 80043aa:	2100      	movs	r1, #0
 80043ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	0018      	movs	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b010      	add	sp, #64	; 0x40
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	01ffffff 	.word	0x01ffffff
 80043bc:	fffffedf 	.word	0xfffffedf

080043c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	1dfb      	adds	r3, r7, #7
 80043ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d0:	e051      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	3301      	adds	r3, #1
 80043d6:	d04e      	beq.n	8004476 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d8:	f7fc fe58 	bl	800108c <HAL_GetTick>
 80043dc:	0002      	movs	r2, r0
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d302      	bcc.n	80043ee <UART_WaitOnFlagUntilTimeout+0x2e>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e051      	b.n	8004496 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2204      	movs	r2, #4
 80043fa:	4013      	ands	r3, r2
 80043fc:	d03b      	beq.n	8004476 <UART_WaitOnFlagUntilTimeout+0xb6>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d038      	beq.n	8004476 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b40      	cmp	r3, #64	; 0x40
 8004408:	d035      	beq.n	8004476 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	2208      	movs	r2, #8
 8004412:	4013      	ands	r3, r2
 8004414:	2b08      	cmp	r3, #8
 8004416:	d111      	bne.n	800443c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2208      	movs	r2, #8
 800441e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	0018      	movs	r0, r3
 8004424:	f000 f83c 	bl	80044a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2290      	movs	r2, #144	; 0x90
 800442c:	2108      	movs	r1, #8
 800442e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2284      	movs	r2, #132	; 0x84
 8004434:	2100      	movs	r1, #0
 8004436:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e02c      	b.n	8004496 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	401a      	ands	r2, r3
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	429a      	cmp	r2, r3
 800444e:	d112      	bne.n	8004476 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2280      	movs	r2, #128	; 0x80
 8004456:	0112      	lsls	r2, r2, #4
 8004458:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	0018      	movs	r0, r3
 800445e:	f000 f81f 	bl	80044a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2290      	movs	r2, #144	; 0x90
 8004466:	2120      	movs	r1, #32
 8004468:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2284      	movs	r2, #132	; 0x84
 800446e:	2100      	movs	r1, #0
 8004470:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e00f      	b.n	8004496 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	4013      	ands	r3, r2
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	425a      	negs	r2, r3
 8004486:	4153      	adcs	r3, r2
 8004488:	b2db      	uxtb	r3, r3
 800448a:	001a      	movs	r2, r3
 800448c:	1dfb      	adds	r3, r7, #7
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d09e      	beq.n	80043d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	0018      	movs	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	b004      	add	sp, #16
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08e      	sub	sp, #56	; 0x38
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a8:	f3ef 8310 	mrs	r3, PRIMASK
 80044ac:	617b      	str	r3, [r7, #20]
  return(result);
 80044ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
 80044b2:	2301      	movs	r3, #1
 80044b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	f383 8810 	msr	PRIMASK, r3
}
 80044bc:	46c0      	nop			; (mov r8, r8)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4926      	ldr	r1, [pc, #152]	; (8004564 <UART_EndRxTransfer+0xc4>)
 80044ca:	400a      	ands	r2, r1
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f383 8810 	msr	PRIMASK, r3
}
 80044d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044da:	f3ef 8310 	mrs	r3, PRIMASK
 80044de:	623b      	str	r3, [r7, #32]
  return(result);
 80044e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044e2:	633b      	str	r3, [r7, #48]	; 0x30
 80044e4:	2301      	movs	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	f383 8810 	msr	PRIMASK, r3
}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	491b      	ldr	r1, [pc, #108]	; (8004568 <UART_EndRxTransfer+0xc8>)
 80044fc:	400a      	ands	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	f383 8810 	msr	PRIMASK, r3
}
 800450a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d118      	bne.n	8004546 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004514:	f3ef 8310 	mrs	r3, PRIMASK
 8004518:	60bb      	str	r3, [r7, #8]
  return(result);
 800451a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800451e:	2301      	movs	r3, #1
 8004520:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f383 8810 	msr	PRIMASK, r3
}
 8004528:	46c0      	nop			; (mov r8, r8)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2110      	movs	r1, #16
 8004536:	438a      	bics	r2, r1
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f383 8810 	msr	PRIMASK, r3
}
 8004544:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	228c      	movs	r2, #140	; 0x8c
 800454a:	2120      	movs	r1, #32
 800454c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	675a      	str	r2, [r3, #116]	; 0x74
}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	46bd      	mov	sp, r7
 800455e:	b00e      	add	sp, #56	; 0x38
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	fffffedf 	.word	0xfffffedf
 8004568:	effffffe 	.word	0xeffffffe

0800456c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2284      	movs	r2, #132	; 0x84
 8004578:	5c9b      	ldrb	r3, [r3, r2]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_UARTEx_DisableFifoMode+0x16>
 800457e:	2302      	movs	r3, #2
 8004580:	e027      	b.n	80045d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2284      	movs	r2, #132	; 0x84
 8004586:	2101      	movs	r1, #1
 8004588:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2288      	movs	r2, #136	; 0x88
 800458e:	2124      	movs	r1, #36	; 0x24
 8004590:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2101      	movs	r1, #1
 80045a6:	438a      	bics	r2, r1
 80045a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4a0b      	ldr	r2, [pc, #44]	; (80045dc <HAL_UARTEx_DisableFifoMode+0x70>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2288      	movs	r2, #136	; 0x88
 80045c4:	2120      	movs	r1, #32
 80045c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2284      	movs	r2, #132	; 0x84
 80045cc:	2100      	movs	r1, #0
 80045ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	0018      	movs	r0, r3
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b004      	add	sp, #16
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	dfffffff 	.word	0xdfffffff

080045e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2284      	movs	r2, #132	; 0x84
 80045ee:	5c9b      	ldrb	r3, [r3, r2]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e02e      	b.n	8004656 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2284      	movs	r2, #132	; 0x84
 80045fc:	2101      	movs	r1, #1
 80045fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2288      	movs	r2, #136	; 0x88
 8004604:	2124      	movs	r1, #36	; 0x24
 8004606:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2101      	movs	r1, #1
 800461c:	438a      	bics	r2, r1
 800461e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	08d9      	lsrs	r1, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	0018      	movs	r0, r3
 8004638:	f000 f854 	bl	80046e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2288      	movs	r2, #136	; 0x88
 8004648:	2120      	movs	r1, #32
 800464a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2284      	movs	r2, #132	; 0x84
 8004650:	2100      	movs	r1, #0
 8004652:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	0018      	movs	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	b004      	add	sp, #16
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2284      	movs	r2, #132	; 0x84
 800466e:	5c9b      	ldrb	r3, [r3, r2]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004674:	2302      	movs	r3, #2
 8004676:	e02f      	b.n	80046d8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2284      	movs	r2, #132	; 0x84
 800467c:	2101      	movs	r1, #1
 800467e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2288      	movs	r2, #136	; 0x88
 8004684:	2124      	movs	r1, #36	; 0x24
 8004686:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2101      	movs	r1, #1
 800469c:	438a      	bics	r2, r1
 800469e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	0019      	movs	r1, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f000 f813 	bl	80046e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2288      	movs	r2, #136	; 0x88
 80046ca:	2120      	movs	r1, #32
 80046cc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2284      	movs	r2, #132	; 0x84
 80046d2:	2100      	movs	r1, #0
 80046d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	0018      	movs	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	b004      	add	sp, #16
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	f1ffffff 	.word	0xf1ffffff

080046e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d108      	bne.n	8004706 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	226a      	movs	r2, #106	; 0x6a
 80046f8:	2101      	movs	r1, #1
 80046fa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2268      	movs	r2, #104	; 0x68
 8004700:	2101      	movs	r1, #1
 8004702:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004704:	e043      	b.n	800478e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004706:	260f      	movs	r6, #15
 8004708:	19bb      	adds	r3, r7, r6
 800470a:	2208      	movs	r2, #8
 800470c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800470e:	200e      	movs	r0, #14
 8004710:	183b      	adds	r3, r7, r0
 8004712:	2208      	movs	r2, #8
 8004714:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	0e5b      	lsrs	r3, r3, #25
 800471e:	b2da      	uxtb	r2, r3
 8004720:	240d      	movs	r4, #13
 8004722:	193b      	adds	r3, r7, r4
 8004724:	2107      	movs	r1, #7
 8004726:	400a      	ands	r2, r1
 8004728:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	0f5b      	lsrs	r3, r3, #29
 8004732:	b2da      	uxtb	r2, r3
 8004734:	250c      	movs	r5, #12
 8004736:	197b      	adds	r3, r7, r5
 8004738:	2107      	movs	r1, #7
 800473a:	400a      	ands	r2, r1
 800473c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800473e:	183b      	adds	r3, r7, r0
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	197a      	adds	r2, r7, r5
 8004744:	7812      	ldrb	r2, [r2, #0]
 8004746:	4914      	ldr	r1, [pc, #80]	; (8004798 <UARTEx_SetNbDataToProcess+0xb4>)
 8004748:	5c8a      	ldrb	r2, [r1, r2]
 800474a:	435a      	muls	r2, r3
 800474c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800474e:	197b      	adds	r3, r7, r5
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	4a12      	ldr	r2, [pc, #72]	; (800479c <UARTEx_SetNbDataToProcess+0xb8>)
 8004754:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004756:	0019      	movs	r1, r3
 8004758:	f7fb fd5e 	bl	8000218 <__divsi3>
 800475c:	0003      	movs	r3, r0
 800475e:	b299      	uxth	r1, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	226a      	movs	r2, #106	; 0x6a
 8004764:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004766:	19bb      	adds	r3, r7, r6
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	193a      	adds	r2, r7, r4
 800476c:	7812      	ldrb	r2, [r2, #0]
 800476e:	490a      	ldr	r1, [pc, #40]	; (8004798 <UARTEx_SetNbDataToProcess+0xb4>)
 8004770:	5c8a      	ldrb	r2, [r1, r2]
 8004772:	435a      	muls	r2, r3
 8004774:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004776:	193b      	adds	r3, r7, r4
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	4a08      	ldr	r2, [pc, #32]	; (800479c <UARTEx_SetNbDataToProcess+0xb8>)
 800477c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800477e:	0019      	movs	r1, r3
 8004780:	f7fb fd4a 	bl	8000218 <__divsi3>
 8004784:	0003      	movs	r3, r0
 8004786:	b299      	uxth	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2268      	movs	r2, #104	; 0x68
 800478c:	5299      	strh	r1, [r3, r2]
}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	46bd      	mov	sp, r7
 8004792:	b005      	add	sp, #20
 8004794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	080048e4 	.word	0x080048e4
 800479c:	080048ec 	.word	0x080048ec

080047a0 <memset>:
 80047a0:	0003      	movs	r3, r0
 80047a2:	1882      	adds	r2, r0, r2
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d100      	bne.n	80047aa <memset+0xa>
 80047a8:	4770      	bx	lr
 80047aa:	7019      	strb	r1, [r3, #0]
 80047ac:	3301      	adds	r3, #1
 80047ae:	e7f9      	b.n	80047a4 <memset+0x4>

080047b0 <__libc_init_array>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	2600      	movs	r6, #0
 80047b4:	4c0c      	ldr	r4, [pc, #48]	; (80047e8 <__libc_init_array+0x38>)
 80047b6:	4d0d      	ldr	r5, [pc, #52]	; (80047ec <__libc_init_array+0x3c>)
 80047b8:	1b64      	subs	r4, r4, r5
 80047ba:	10a4      	asrs	r4, r4, #2
 80047bc:	42a6      	cmp	r6, r4
 80047be:	d109      	bne.n	80047d4 <__libc_init_array+0x24>
 80047c0:	2600      	movs	r6, #0
 80047c2:	f000 f819 	bl	80047f8 <_init>
 80047c6:	4c0a      	ldr	r4, [pc, #40]	; (80047f0 <__libc_init_array+0x40>)
 80047c8:	4d0a      	ldr	r5, [pc, #40]	; (80047f4 <__libc_init_array+0x44>)
 80047ca:	1b64      	subs	r4, r4, r5
 80047cc:	10a4      	asrs	r4, r4, #2
 80047ce:	42a6      	cmp	r6, r4
 80047d0:	d105      	bne.n	80047de <__libc_init_array+0x2e>
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	00b3      	lsls	r3, r6, #2
 80047d6:	58eb      	ldr	r3, [r5, r3]
 80047d8:	4798      	blx	r3
 80047da:	3601      	adds	r6, #1
 80047dc:	e7ee      	b.n	80047bc <__libc_init_array+0xc>
 80047de:	00b3      	lsls	r3, r6, #2
 80047e0:	58eb      	ldr	r3, [r5, r3]
 80047e2:	4798      	blx	r3
 80047e4:	3601      	adds	r6, #1
 80047e6:	e7f2      	b.n	80047ce <__libc_init_array+0x1e>
 80047e8:	080048fc 	.word	0x080048fc
 80047ec:	080048fc 	.word	0x080048fc
 80047f0:	08004900 	.word	0x08004900
 80047f4:	080048fc 	.word	0x080048fc

080047f8 <_init>:
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fe:	bc08      	pop	{r3}
 8004800:	469e      	mov	lr, r3
 8004802:	4770      	bx	lr

08004804 <_fini>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480a:	bc08      	pop	{r3}
 800480c:	469e      	mov	lr, r3
 800480e:	4770      	bx	lr
