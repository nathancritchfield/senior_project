
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005268  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08005324  08005324  00015324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005600  08005600  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005600  08005600  00015600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005608  08005608  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005608  08005608  00015608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800560c  0800560c  0001560c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000014  08005624  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08005624  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000162e4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031a8  00000000  00000000  00036363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00039510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f79  00000000  00000000  0003a8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184f7  00000000  00000000  0003b831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a73d  00000000  00000000  00053d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097fdb  00000000  00000000  0006e465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000474c  00000000  00000000  00106440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0010ab8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800530c 	.word	0x0800530c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	0800530c 	.word	0x0800530c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	; 0x24
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	240c      	movs	r4, #12
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f004 fe37 	bl	80052a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b44      	ldr	r3, [pc, #272]	; (8000744 <MX_GPIO_Init+0x128>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000636:	4b43      	ldr	r3, [pc, #268]	; (8000744 <MX_GPIO_Init+0x128>)
 8000638:	2102      	movs	r1, #2
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
 800063e:	4b41      	ldr	r3, [pc, #260]	; (8000744 <MX_GPIO_Init+0x128>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000642:	2202      	movs	r2, #2
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <MX_GPIO_Init+0x128>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064e:	4b3d      	ldr	r3, [pc, #244]	; (8000744 <MX_GPIO_Init+0x128>)
 8000650:	2104      	movs	r1, #4
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
 8000656:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <MX_GPIO_Init+0x128>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065a:	2204      	movs	r2, #4
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <MX_GPIO_Init+0x128>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000666:	4b37      	ldr	r3, [pc, #220]	; (8000744 <MX_GPIO_Init+0x128>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
 800066e:	4b35      	ldr	r3, [pc, #212]	; (8000744 <MX_GPIO_Init+0x128>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	4832      	ldr	r0, [pc, #200]	; (8000748 <MX_GPIO_Init+0x12c>)
 8000680:	2200      	movs	r2, #0
 8000682:	0019      	movs	r1, r3
 8000684:	f000 ffdc 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SK6812_OUT_GPIO_Port, SK6812_OUT_Pin, GPIO_PIN_RESET);
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	482f      	ldr	r0, [pc, #188]	; (800074c <MX_GPIO_Init+0x130>)
 800068e:	2200      	movs	r2, #0
 8000690:	0019      	movs	r1, r3
 8000692:	f000 ffd5 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GEN_OUT_Pin|NRF_CE_Pin|SPI1_CSN_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 8000696:	23a0      	movs	r3, #160	; 0xa0
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2200      	movs	r2, #0
 800069c:	2199      	movs	r1, #153	; 0x99
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 ffce 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WP_Pin;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2201      	movs	r2, #1
 80006b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <MX_GPIO_Init+0x12c>)
 80006c2:	0019      	movs	r1, r3
 80006c4:	0010      	movs	r0, r2
 80006c6:	f000 fe57 	bl	8001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SK6812_OUT_Pin;
 80006ca:	0021      	movs	r1, r4
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0212      	lsls	r2, r2, #8
 80006d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	000c      	movs	r4, r1
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2201      	movs	r2, #1
 80006da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SK6812_OUT_GPIO_Port, &GPIO_InitStruct);
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <MX_GPIO_Init+0x130>)
 80006ec:	0019      	movs	r1, r3
 80006ee:	0010      	movs	r0, r2
 80006f0:	f000 fe42 	bl	8001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = GEN_OUT_Pin|NRF_CE_Pin|SPI1_CSN_Pin|STATUS_LED_Pin;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2299      	movs	r2, #153	; 0x99
 80006f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2201      	movs	r2, #1
 80006fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	193a      	adds	r2, r7, r4
 800070e:	23a0      	movs	r3, #160	; 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fe2f 	bl	8001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2220      	movs	r2, #32
 800071e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 800072c:	193a      	adds	r2, r7, r4
 800072e:	23a0      	movs	r3, #160	; 0xa0
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fe1f 	bl	8001378 <HAL_GPIO_Init>

}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b009      	add	sp, #36	; 0x24
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40021000 	.word	0x40021000
 8000748:	50000400 	.word	0x50000400
 800074c:	50000800 	.word	0x50000800

08000750 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_I2C2_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_I2C2_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <MX_I2C2_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000768:	2201      	movs	r2, #1
 800076a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_I2C2_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C2_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2C2_Init+0x74>)
 800078c:	0018      	movs	r0, r3
 800078e:	f000 ff75 	bl	800167c <HAL_I2C_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000796:	f000 f9c9 	bl	8000b2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2C2_Init+0x74>)
 800079c:	2100      	movs	r1, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 f812 	bl	80017c8 <HAL_I2CEx_ConfigAnalogFilter>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007a8:	f000 f9c0 	bl	8000b2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <MX_I2C2_Init+0x74>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 f855 	bl	8001860 <HAL_I2CEx_ConfigDigitalFilter>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 f9b7 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000030 	.word	0x20000030
 80007c8:	40005800 	.word	0x40005800
 80007cc:	00303d5b 	.word	0x00303d5b

080007d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b08b      	sub	sp, #44	; 0x2c
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	2414      	movs	r4, #20
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	0018      	movs	r0, r3
 80007de:	2314      	movs	r3, #20
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f004 fd5c 	bl	80052a0 <memset>
  if(i2cHandle->Instance==I2C2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <HAL_I2C_MspInit+0x90>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d131      	bne.n	8000856 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_I2C_MspInit+0x94>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_I2C_MspInit+0x94>)
 80007f8:	2101      	movs	r1, #1
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_I2C_MspInit+0x94>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000802:	2201      	movs	r2, #1
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	22c0      	movs	r2, #192	; 0xc0
 800080e:	0152      	lsls	r2, r2, #5
 8000810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000812:	0021      	movs	r1, r4
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2212      	movs	r2, #18
 8000818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2201      	movs	r2, #1
 800081e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2203      	movs	r2, #3
 8000824:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2206      	movs	r2, #6
 800082a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	187a      	adds	r2, r7, r1
 800082e:	23a0      	movs	r3, #160	; 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fd9f 	bl	8001378 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_I2C_MspInit+0x94>)
 800083c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_I2C_MspInit+0x94>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	03c9      	lsls	r1, r1, #15
 8000844:	430a      	orrs	r2, r1
 8000846:	63da      	str	r2, [r3, #60]	; 0x3c
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_I2C_MspInit+0x94>)
 800084a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	03db      	lsls	r3, r3, #15
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b00b      	add	sp, #44	; 0x2c
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40005800 	.word	0x40005800
 8000864:	40021000 	.word	0x40021000

08000868 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 8000872:	230a      	movs	r3, #10
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	2200      	movs	r2, #0
 8000878:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e01b      	b.n	80008b8 <crc16+0x50>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 8000880:	200a      	movs	r0, #10
 8000882:	183b      	adds	r3, r7, r0
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	0a1b      	lsrs	r3, r3, #8
 8000888:	b29b      	uxth	r3, r3
 800088a:	0019      	movs	r1, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	404b      	eors	r3, r1
 8000896:	22ff      	movs	r2, #255	; 0xff
 8000898:	401a      	ands	r2, r3
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <crc16+0x68>)
 800089c:	0052      	lsls	r2, r2, #1
 800089e:	5ad3      	ldrh	r3, [r2, r3]
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	183b      	adds	r3, r7, r0
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4053      	eors	r3, r2
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	183b      	adds	r3, r7, r0
 80008b0:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d3df      	bcc.n	8000880 <crc16+0x18>
	}
	return cksum;
 80008c0:	230a      	movs	r3, #10
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	881b      	ldrh	r3, [r3, #0]
}
 80008c6:	0018      	movs	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b004      	add	sp, #16
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	08005324 	.word	0x08005324

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	4c6a      	ldr	r4, [pc, #424]	; (8000a80 <main+0x1ac>)
 80008d8:	44a5      	add	sp, r4
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008dc:	f000 fbee 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f8dc 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f7ff fe9a 	bl	800061c <MX_GPIO_Init>
  MX_I2C2_Init();
 80008e8:	f7ff ff32 	bl	8000750 <MX_I2C2_Init>
  MX_SPI1_Init();
 80008ec:	f000 f924 	bl	8000b38 <MX_SPI1_Init>
  MX_TIM1_Init();
 80008f0:	f000 f9ea 	bl	8000cc8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80008f4:	f000 fb08 	bl	8000f08 <MX_USART1_UART_Init>
//	read_reg_multi(0x10, data, 5);
//	if(data[0] == 0xE7)
//	  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET);


  nrf_init();
 80008f8:	f004 fbe2 	bl	80050c0 <nrf_init>
  nrf_rx_mode(RX_addr, 10);
 80008fc:	4b61      	ldr	r3, [pc, #388]	; (8000a84 <main+0x1b0>)
 80008fe:	210a      	movs	r1, #10
 8000900:	0018      	movs	r0, r3
 8000902:	f004 fc0c 	bl	800511e <nrf_rx_mode>
//  HAL_I2C_Master_Receive(&hi2c2, 0xA0, rx_buf, 2, HAL_MAX_DELAY);
//
//  tx_buf[2] = rx_buf[1];
//  tx_buf[1] = rx_buf[0];

  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET);
 8000906:	23a0      	movs	r3, #160	; 0xa0
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	2201      	movs	r2, #1
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fe96 	bl	8001640 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000914:	23fa      	movs	r3, #250	; 0xfa
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 fc55 	bl	80011c8 <HAL_Delay>


  while (1)
  {

	  if(is_data_availible(1) == 1){
 800091e:	2001      	movs	r0, #1
 8000920:	f004 fc64 	bl	80051ec <is_data_availible>
 8000924:	0003      	movs	r3, r0
 8000926:	2b01      	cmp	r3, #1
 8000928:	d103      	bne.n	8000932 <main+0x5e>
		  nrf_receive(RX_data);
 800092a:	4b57      	ldr	r3, [pc, #348]	; (8000a88 <main+0x1b4>)
 800092c:	0018      	movs	r0, r3
 800092e:	f004 fc7f 	bl	8005230 <nrf_receive>
//	  tx_buf[2]++;



	  //Variables for writing to VESC
	  int32_t index = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	2283      	movs	r2, #131	; 0x83
 8000936:	0092      	lsls	r2, r2, #2
 8000938:	18b9      	adds	r1, r7, r2
 800093a:	600b      	str	r3, [r1, #0]
	  int payloadSize = 1;
 800093c:	2301      	movs	r3, #1
 800093e:	2682      	movs	r6, #130	; 0x82
 8000940:	00b6      	lsls	r6, r6, #2
 8000942:	19b9      	adds	r1, r7, r6
 8000944:	600b      	str	r3, [r1, #0]
	  uint8_t payload[1];

	  int count = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	2581      	movs	r5, #129	; 0x81
 800094a:	00ad      	lsls	r5, r5, #2
 800094c:	1979      	adds	r1, r7, r5
 800094e:	600b      	str	r3, [r1, #0]



	  /************Sending the command to get the firmware***********/
	  //Set communication type to get firmware
	  payload[index++] = 0;
 8000950:	0011      	movs	r1, r2
 8000952:	18bb      	adds	r3, r7, r2
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	1879      	adds	r1, r7, r1
 800095a:	600a      	str	r2, [r1, #0]
 800095c:	2080      	movs	r0, #128	; 0x80
 800095e:	0080      	lsls	r0, r0, #2
 8000960:	183a      	adds	r2, r7, r0
 8000962:	2100      	movs	r1, #0
 8000964:	54d1      	strb	r1, [r2, r3]

	  uint16_t crcPayload = crc16(payload, payloadSize);
 8000966:	19bb      	adds	r3, r7, r6
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	4c48      	ldr	r4, [pc, #288]	; (8000a8c <main+0x1b8>)
 800096c:	193c      	adds	r4, r7, r4
 800096e:	183b      	adds	r3, r7, r0
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff ff78 	bl	8000868 <crc16>
 8000978:	0003      	movs	r3, r0
 800097a:	8023      	strh	r3, [r4, #0]

	  messageSend[count++] = 2;
 800097c:	0028      	movs	r0, r5
 800097e:	183b      	adds	r3, r7, r0
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	1839      	adds	r1, r7, r0
 8000986:	600a      	str	r2, [r1, #0]
 8000988:	4a41      	ldr	r2, [pc, #260]	; (8000a90 <main+0x1bc>)
 800098a:	2584      	movs	r5, #132	; 0x84
 800098c:	00ad      	lsls	r5, r5, #2
 800098e:	1952      	adds	r2, r2, r5
 8000990:	19d2      	adds	r2, r2, r7
 8000992:	2102      	movs	r1, #2
 8000994:	54d1      	strb	r1, [r2, r3]
	  messageSend[count++] = payloadSize;
 8000996:	183b      	adds	r3, r7, r0
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1c5a      	adds	r2, r3, #1
 800099c:	1839      	adds	r1, r7, r0
 800099e:	600a      	str	r2, [r1, #0]
 80009a0:	19ba      	adds	r2, r7, r6
 80009a2:	6812      	ldr	r2, [r2, #0]
 80009a4:	b2d1      	uxtb	r1, r2
 80009a6:	4a3a      	ldr	r2, [pc, #232]	; (8000a90 <main+0x1bc>)
 80009a8:	1952      	adds	r2, r2, r5
 80009aa:	19d2      	adds	r2, r2, r7
 80009ac:	54d1      	strb	r1, [r2, r3]

	  memcpy(messageSend + count, payload, payloadSize);
 80009ae:	0004      	movs	r4, r0
 80009b0:	183b      	adds	r3, r7, r0
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	003a      	movs	r2, r7
 80009b6:	18d3      	adds	r3, r2, r3
 80009b8:	19ba      	adds	r2, r7, r6
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	2080      	movs	r0, #128	; 0x80
 80009be:	0080      	lsls	r0, r0, #2
 80009c0:	1839      	adds	r1, r7, r0
 80009c2:	0018      	movs	r0, r3
 80009c4:	f004 fc98 	bl	80052f8 <memcpy>
	  count += payloadSize;
 80009c8:	0020      	movs	r0, r4
 80009ca:	183b      	adds	r3, r7, r0
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	19bb      	adds	r3, r7, r6
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	18d3      	adds	r3, r2, r3
 80009d4:	183a      	adds	r2, r7, r0
 80009d6:	6013      	str	r3, [r2, #0]

	  messageSend[count++] = (uint8_t)(crcPayload >> 8);
 80009d8:	4c2c      	ldr	r4, [pc, #176]	; (8000a8c <main+0x1b8>)
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	b299      	uxth	r1, r3
 80009e2:	183b      	adds	r3, r7, r0
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	183e      	adds	r6, r7, r0
 80009ea:	6032      	str	r2, [r6, #0]
 80009ec:	b2c9      	uxtb	r1, r1
 80009ee:	4a28      	ldr	r2, [pc, #160]	; (8000a90 <main+0x1bc>)
 80009f0:	1952      	adds	r2, r2, r5
 80009f2:	19d2      	adds	r2, r2, r7
 80009f4:	54d1      	strb	r1, [r2, r3]
	  messageSend[count++] = (uint8_t)(crcPayload & 0xFF);
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	1839      	adds	r1, r7, r0
 80009fe:	600a      	str	r2, [r1, #0]
 8000a00:	193a      	adds	r2, r7, r4
 8000a02:	8812      	ldrh	r2, [r2, #0]
 8000a04:	b2d1      	uxtb	r1, r2
 8000a06:	4a22      	ldr	r2, [pc, #136]	; (8000a90 <main+0x1bc>)
 8000a08:	1952      	adds	r2, r2, r5
 8000a0a:	19d2      	adds	r2, r2, r7
 8000a0c:	54d1      	strb	r1, [r2, r3]
	  messageSend[count++] = 3;
 8000a0e:	183b      	adds	r3, r7, r0
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	1839      	adds	r1, r7, r0
 8000a16:	600a      	str	r2, [r1, #0]
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <main+0x1bc>)
 8000a1a:	1952      	adds	r2, r2, r5
 8000a1c:	19d2      	adds	r2, r2, r7
 8000a1e:	2103      	movs	r1, #3
 8000a20:	54d1      	strb	r1, [r2, r3]

	  HAL_UART_Transmit(&huart1, messageSend, count, HAL_MAX_DELAY);
 8000a22:	183b      	adds	r3, r7, r0
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	2301      	movs	r3, #1
 8000a2a:	425b      	negs	r3, r3
 8000a2c:	0039      	movs	r1, r7
 8000a2e:	4819      	ldr	r0, [pc, #100]	; (8000a94 <main+0x1c0>)
 8000a30:	f003 fade 	bl	8003ff0 <HAL_UART_Transmit>


	  //uint16_t counter = 0;
	  //uint16_t endMessage = 256;
	  //bool messageRead = false;
	  uint8_t messageReceived[256] = {0};
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <main+0x1c4>)
 8000a36:	195b      	adds	r3, r3, r5
 8000a38:	19db      	adds	r3, r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	3304      	adds	r3, #4
 8000a40:	22fc      	movs	r2, #252	; 0xfc
 8000a42:	2100      	movs	r1, #0
 8000a44:	0018      	movs	r0, r3
 8000a46:	f004 fc2b 	bl	80052a0 <memset>
	  //uint16_t lenPayload = 0;

	  //uint32_t timeout = HAL_GetTick() + 100; // Defining the timestamp for timeout (100ms before timeout)

	  HAL_UART_Receive(&huart1, messageReceived, 33, HAL_MAX_DELAY);
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	425b      	negs	r3, r3
 8000a4e:	1c79      	adds	r1, r7, #1
 8000a50:	31ff      	adds	r1, #255	; 0xff
 8000a52:	4810      	ldr	r0, [pc, #64]	; (8000a94 <main+0x1c0>)
 8000a54:	2221      	movs	r2, #33	; 0x21
 8000a56:	f003 fb6f 	bl	8004138 <HAL_UART_Receive>

	  if(messageReceived[0] == 2)
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <main+0x1c4>)
 8000a5c:	195b      	adds	r3, r3, r5
 8000a5e:	19db      	adds	r3, r3, r7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d106      	bne.n	8000a74 <main+0x1a0>
		  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8000a66:	23a0      	movs	r3, #160	; 0xa0
 8000a68:	05db      	lsls	r3, r3, #23
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 fde6 	bl	8001640 <HAL_GPIO_WritePin>


	  HAL_Delay(1000);
 8000a74:	23fa      	movs	r3, #250	; 0xfa
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fba5 	bl	80011c8 <HAL_Delay>
  {
 8000a7e:	e74e      	b.n	800091e <main+0x4a>
 8000a80:	fffffdec 	.word	0xfffffdec
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000084 	.word	0x20000084
 8000a8c:	00000202 	.word	0x00000202
 8000a90:	fffffdf0 	.word	0xfffffdf0
 8000a94:	20000154 	.word	0x20000154
 8000a98:	fffffef0 	.word	0xfffffef0

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b093      	sub	sp, #76	; 0x4c
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	2410      	movs	r4, #16
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	2338      	movs	r3, #56	; 0x38
 8000aaa:	001a      	movs	r2, r3
 8000aac:	2100      	movs	r1, #0
 8000aae:	f004 fbf7 	bl	80052a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	2310      	movs	r3, #16
 8000ab8:	001a      	movs	r2, r3
 8000aba:	2100      	movs	r1, #0
 8000abc:	f004 fbf0 	bl	80052a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f000 ff17 	bl	80018f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	2202      	movs	r2, #2
 8000ace:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	0052      	lsls	r2, r2, #1
 8000ad6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2240      	movs	r2, #64	; 0x40
 8000ae2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 ff4f 	bl	8001990 <HAL_RCC_OscConfig>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000af6:	f000 f819 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	003b      	movs	r3, r7
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b00:	003b      	movs	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b06:	003b      	movs	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	003b      	movs	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b12:	003b      	movs	r3, r7
 8000b14:	2100      	movs	r1, #0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 fa54 	bl	8001fc4 <HAL_RCC_ClockConfig>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b20:	f000 f804 	bl	8000b2c <Error_Handler>
  }
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b013      	add	sp, #76	; 0x4c
 8000b2a:	bd90      	pop	{r4, r7, pc}

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b3e:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <MX_SPI1_Init+0x78>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b44:	2282      	movs	r2, #130	; 0x82
 8000b46:	0052      	lsls	r2, r2, #1
 8000b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b52:	22e0      	movs	r2, #224	; 0xe0
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b86:	2207      	movs	r2, #7
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b92:	2208      	movs	r2, #8
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 fd37 	bl	800260c <HAL_SPI_Init>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ba2:	f7ff ffc3 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200000a4 	.word	0x200000a4
 8000bb0:	40013000 	.word	0x40013000

08000bb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b08b      	sub	sp, #44	; 0x2c
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	2414      	movs	r4, #20
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	2314      	movs	r3, #20
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	f004 fb6a 	bl	80052a0 <memset>
  if(spiHandle->Instance==SPI1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <HAL_SPI_MspInit+0x8c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d130      	bne.n	8000c38 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <HAL_SPI_MspInit+0x90>)
 8000bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <HAL_SPI_MspInit+0x90>)
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	0149      	lsls	r1, r1, #5
 8000be0:	430a      	orrs	r2, r1
 8000be2:	641a      	str	r2, [r3, #64]	; 0x40
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_SPI_MspInit+0x90>)
 8000be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	015b      	lsls	r3, r3, #5
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_SPI_MspInit+0x90>)
 8000bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <HAL_SPI_MspInit+0x90>)
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_SPI_MspInit+0x90>)
 8000c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c02:	2201      	movs	r2, #1
 8000c04:	4013      	ands	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2246      	movs	r2, #70	; 0x46
 8000c10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2202      	movs	r2, #2
 8000c16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	187a      	adds	r2, r7, r1
 8000c2c:	23a0      	movs	r3, #160	; 0xa0
 8000c2e:	05db      	lsls	r3, r3, #23
 8000c30:	0011      	movs	r1, r2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 fba0 	bl	8001378 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b00b      	add	sp, #44	; 0x2c
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	40013000 	.word	0x40013000
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_MspInit+0x44>)
 8000c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_MspInit+0x44>)
 8000c54:	2101      	movs	r1, #1
 8000c56:	430a      	orrs	r2, r1
 8000c58:	641a      	str	r2, [r3, #64]	; 0x40
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4013      	ands	r3, r2
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x44>)
 8000c68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	0549      	lsls	r1, r1, #21
 8000c70:	430a      	orrs	r2, r1
 8000c72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_MspInit+0x44>)
 8000c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	055b      	lsls	r3, r3, #21
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40021000 	.word	0x40021000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 fa6c 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b098      	sub	sp, #96	; 0x60
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	2354      	movs	r3, #84	; 0x54
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f004 fae1 	bl	80052a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cde:	2338      	movs	r3, #56	; 0x38
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	231c      	movs	r3, #28
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f004 fad9 	bl	80052a0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	2334      	movs	r3, #52	; 0x34
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	f004 fad2 	bl	80052a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cfc:	4b45      	ldr	r3, [pc, #276]	; (8000e14 <MX_TIM1_Init+0x14c>)
 8000cfe:	4a46      	ldr	r2, [pc, #280]	; (8000e18 <MX_TIM1_Init+0x150>)
 8000d00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d02:	4b44      	ldr	r3, [pc, #272]	; (8000e14 <MX_TIM1_Init+0x14c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <MX_TIM1_Init+0x14c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d0e:	4b41      	ldr	r3, [pc, #260]	; (8000e14 <MX_TIM1_Init+0x14c>)
 8000d10:	4a42      	ldr	r2, [pc, #264]	; (8000e1c <MX_TIM1_Init+0x154>)
 8000d12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d14:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <MX_TIM1_Init+0x14c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d1a:	4b3e      	ldr	r3, [pc, #248]	; (8000e14 <MX_TIM1_Init+0x14c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d20:	4b3c      	ldr	r3, [pc, #240]	; (8000e14 <MX_TIM1_Init+0x14c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d26:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <MX_TIM1_Init+0x14c>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f002 fb8f 	bl	800344c <HAL_TIM_PWM_Init>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d32:	f7ff fefb 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d36:	2154      	movs	r1, #84	; 0x54
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d4a:	187a      	adds	r2, r7, r1
 8000d4c:	4b31      	ldr	r3, [pc, #196]	; (8000e14 <MX_TIM1_Init+0x14c>)
 8000d4e:	0011      	movs	r1, r2
 8000d50:	0018      	movs	r0, r3
 8000d52:	f002 fff3 	bl	8003d3c <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	1e03      	subs	r3, r0, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d5a:	f7ff fee7 	bl	8000b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5e:	2138      	movs	r1, #56	; 0x38
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2260      	movs	r2, #96	; 0x60
 8000d64:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8a:	1879      	adds	r1, r7, r1
 8000d8c:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <MX_TIM1_Init+0x14c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	0018      	movs	r0, r3
 8000d92:	f002 fbb3 	bl	80034fc <HAL_TIM_PWM_ConfigChannel>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000d9a:	f7ff fec7 	bl	8000b2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	0192      	lsls	r2, r2, #6
 8000dc2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	0492      	lsls	r2, r2, #18
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2200      	movs	r2, #0
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000df0:	1d3a      	adds	r2, r7, #4
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_TIM1_Init+0x14c>)
 8000df4:	0011      	movs	r1, r2
 8000df6:	0018      	movs	r0, r3
 8000df8:	f003 f808 	bl	8003e0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000e00:	f7ff fe94 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <MX_TIM1_Init+0x14c>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 f840 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b018      	add	sp, #96	; 0x60
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000108 	.word	0x20000108
 8000e18:	40012c00 	.word	0x40012c00
 8000e1c:	0000ffff 	.word	0x0000ffff

08000e20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b08f      	sub	sp, #60	; 0x3c
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e28:	2410      	movs	r4, #16
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	2328      	movs	r3, #40	; 0x28
 8000e30:	001a      	movs	r2, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	f004 fa34 	bl	80052a0 <memset>
  if(tim_pwmHandle->Instance==TIM1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <HAL_TIM_PWM_MspInit+0x64>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d11c      	bne.n	8000e7c <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	0392      	lsls	r2, r2, #14
 8000e48:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	0018      	movs	r0, r3
 8000e54:	f001 fa60 	bl	8002318 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000e5c:	f7ff fe66 	bl	8000b2c <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_TIM_PWM_MspInit+0x68>)
 8000e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_TIM_PWM_MspInit+0x68>)
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	0109      	lsls	r1, r1, #4
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_TIM_PWM_MspInit+0x68>)
 8000e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	4013      	ands	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b00f      	add	sp, #60	; 0x3c
 8000e82:	bd90      	pop	{r4, r7, pc}
 8000e84:	40012c00 	.word	0x40012c00
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	240c      	movs	r4, #12
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	0018      	movs	r0, r3
 8000e9a:	2314      	movs	r3, #20
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f004 f9fe 	bl	80052a0 <memset>
  if(timHandle->Instance==TIM1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a15      	ldr	r2, [pc, #84]	; (8000f00 <HAL_TIM_MspPostInit+0x74>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d123      	bne.n	8000ef6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_TIM_MspPostInit+0x78>)
 8000eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_TIM_MspPostInit+0x78>)
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_TIM_MspPostInit+0x78>)
 8000ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	0052      	lsls	r2, r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	0021      	movs	r1, r4
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	187a      	adds	r2, r7, r1
 8000eea:	23a0      	movs	r3, #160	; 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f000 fa41 	bl	8001378 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b009      	add	sp, #36	; 0x24
 8000efc:	bd90      	pop	{r4, r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	40012c00 	.word	0x40012c00
 8000f04:	40021000 	.word	0x40021000

08000f08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f0e:	4a24      	ldr	r2, [pc, #144]	; (8000fa0 <MX_USART1_UART_Init+0x98>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000f12:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f14:	2296      	movs	r2, #150	; 0x96
 8000f16:	01d2      	lsls	r2, r2, #7
 8000f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f52:	0018      	movs	r0, r3
 8000f54:	f002 fff6 	bl	8003f44 <HAL_UART_Init>
 8000f58:	1e03      	subs	r3, r0, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f5c:	f7ff fde6 	bl	8000b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f62:	2100      	movs	r1, #0
 8000f64:	0018      	movs	r0, r3
 8000f66:	f003 feb3 	bl	8004cd0 <HAL_UARTEx_SetTxFifoThreshold>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f6e:	f7ff fddd 	bl	8000b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	0018      	movs	r0, r3
 8000f78:	f003 feea 	bl	8004d50 <HAL_UARTEx_SetRxFifoThreshold>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f80:	f7ff fdd4 	bl	8000b2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f003 fe68 	bl	8004c5c <HAL_UARTEx_DisableFifoMode>
 8000f8c:	1e03      	subs	r3, r0, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f90:	f7ff fdcc 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	20000154 	.word	0x20000154
 8000fa0:	40013800 	.word	0x40013800

08000fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b095      	sub	sp, #84	; 0x54
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	233c      	movs	r3, #60	; 0x3c
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	2314      	movs	r3, #20
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	f004 f972 	bl	80052a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	2414      	movs	r4, #20
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	2328      	movs	r3, #40	; 0x28
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f004 f96a 	bl	80052a0 <memset>
  if(uartHandle->Instance==USART1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a22      	ldr	r2, [pc, #136]	; (800105c <HAL_UART_MspInit+0xb8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d13d      	bne.n	8001052 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	2201      	movs	r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000fdc:	193b      	adds	r3, r7, r4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f001 f997 	bl	8002318 <HAL_RCCEx_PeriphCLKConfig>
 8000fea:	1e03      	subs	r3, r0, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fee:	f7ff fd9d 	bl	8000b2c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_UART_MspInit+0xbc>)
 8000ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <HAL_UART_MspInit+0xbc>)
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	01c9      	lsls	r1, r1, #7
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	641a      	str	r2, [r3, #64]	; 0x40
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <HAL_UART_MspInit+0xbc>)
 8001002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	01db      	lsls	r3, r3, #7
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <HAL_UART_MspInit+0xbc>)
 8001010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_UART_MspInit+0xbc>)
 8001014:	2102      	movs	r1, #2
 8001016:	430a      	orrs	r2, r1
 8001018:	635a      	str	r2, [r3, #52]	; 0x34
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_UART_MspInit+0xbc>)
 800101c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800101e:	2202      	movs	r2, #2
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001026:	213c      	movs	r1, #60	; 0x3c
 8001028:	187b      	adds	r3, r7, r1
 800102a:	22c0      	movs	r2, #192	; 0xc0
 800102c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2202      	movs	r2, #2
 8001032:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001046:	187b      	adds	r3, r7, r1
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_UART_MspInit+0xc0>)
 800104a:	0019      	movs	r1, r3
 800104c:	0010      	movs	r0, r2
 800104e:	f000 f993 	bl	8001378 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b015      	add	sp, #84	; 0x54
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	40013800 	.word	0x40013800
 8001060:	40021000 	.word	0x40021000
 8001064:	50000400 	.word	0x50000400

08001068 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800106c:	f7ff fe27 	bl	8000cbe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	; (80010a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	; (80010b4 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001096:	f004 f90b 	bl	80052b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800109a:	f7ff fc1b 	bl	80008d4 <main>

0800109e <LoopForever>:

LoopForever:
  b LoopForever
 800109e:	e7fe      	b.n	800109e <LoopForever>
  ldr   r0, =_estack
 80010a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010ac:	08005610 	.word	0x08005610
  ldr r2, =_sbss
 80010b0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80010b4:	200001ec 	.word	0x200001ec

080010b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_IRQHandler>
	...

080010bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_Init+0x3c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_Init+0x3c>)
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	0049      	lsls	r1, r1, #1
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d6:	2003      	movs	r0, #3
 80010d8:	f000 f810 	bl	80010fc <HAL_InitTick>
 80010dc:	1e03      	subs	r3, r0, #0
 80010de:	d003      	beq.n	80010e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010e0:	1dfb      	adds	r3, r7, #7
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e001      	b.n	80010ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fdae 	bl	8000c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	781b      	ldrb	r3, [r3, #0]
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40022000 	.word	0x40022000

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001104:	230f      	movs	r3, #15
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_InitTick+0x88>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d02b      	beq.n	800116c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001114:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <HAL_InitTick+0x8c>)
 8001116:	681c      	ldr	r4, [r3, #0]
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_InitTick+0x88>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	0019      	movs	r1, r3
 800111e:	23fa      	movs	r3, #250	; 0xfa
 8001120:	0098      	lsls	r0, r3, #2
 8001122:	f7fe ffef 	bl	8000104 <__udivsi3>
 8001126:	0003      	movs	r3, r0
 8001128:	0019      	movs	r1, r3
 800112a:	0020      	movs	r0, r4
 800112c:	f7fe ffea 	bl	8000104 <__udivsi3>
 8001130:	0003      	movs	r3, r0
 8001132:	0018      	movs	r0, r3
 8001134:	f000 f913 	bl	800135e <HAL_SYSTICK_Config>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d112      	bne.n	8001162 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d80a      	bhi.n	8001158 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	2301      	movs	r3, #1
 8001146:	425b      	negs	r3, r3
 8001148:	2200      	movs	r2, #0
 800114a:	0018      	movs	r0, r3
 800114c:	f000 f8f2 	bl	8001334 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_InitTick+0x90>)
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	e00d      	b.n	8001174 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001158:	230f      	movs	r3, #15
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e008      	b.n	8001174 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001162:	230f      	movs	r3, #15
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e003      	b.n	8001174 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800116c:	230f      	movs	r3, #15
 800116e:	18fb      	adds	r3, r7, r3
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001174:	230f      	movs	r3, #15
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	781b      	ldrb	r3, [r3, #0]
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	b005      	add	sp, #20
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	20000010 	.word	0x20000010
 8001188:	20000008 	.word	0x20000008
 800118c:	2000000c 	.word	0x2000000c

08001190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_IncTick+0x1c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	001a      	movs	r2, r3
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <HAL_IncTick+0x20>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	18d2      	adds	r2, r2, r3
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_IncTick+0x20>)
 80011a2:	601a      	str	r2, [r3, #0]
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	20000010 	.word	0x20000010
 80011b0:	200001e8 	.word	0x200001e8

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <HAL_GetTick+0x10>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	200001e8 	.word	0x200001e8

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff fff0 	bl	80011b4 <HAL_GetTick>
 80011d4:	0003      	movs	r3, r0
 80011d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	001a      	movs	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	189b      	adds	r3, r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	f7ff ffe0 	bl	80011b4 <HAL_GetTick>
 80011f4:	0002      	movs	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b004      	add	sp, #16
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	20000010 	.word	0x20000010

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	0002      	movs	r2, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b7f      	cmp	r3, #127	; 0x7f
 8001224:	d828      	bhi.n	8001278 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001226:	4a2f      	ldr	r2, [pc, #188]	; (80012e4 <__NVIC_SetPriority+0xd4>)
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	33c0      	adds	r3, #192	; 0xc0
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	589b      	ldr	r3, [r3, r2]
 8001236:	1dfa      	adds	r2, r7, #7
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	0011      	movs	r1, r2
 800123c:	2203      	movs	r2, #3
 800123e:	400a      	ands	r2, r1
 8001240:	00d2      	lsls	r2, r2, #3
 8001242:	21ff      	movs	r1, #255	; 0xff
 8001244:	4091      	lsls	r1, r2
 8001246:	000a      	movs	r2, r1
 8001248:	43d2      	mvns	r2, r2
 800124a:	401a      	ands	r2, r3
 800124c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	019b      	lsls	r3, r3, #6
 8001252:	22ff      	movs	r2, #255	; 0xff
 8001254:	401a      	ands	r2, r3
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	0018      	movs	r0, r3
 800125c:	2303      	movs	r3, #3
 800125e:	4003      	ands	r3, r0
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001264:	481f      	ldr	r0, [pc, #124]	; (80012e4 <__NVIC_SetPriority+0xd4>)
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b25b      	sxtb	r3, r3
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	430a      	orrs	r2, r1
 8001270:	33c0      	adds	r3, #192	; 0xc0
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001276:	e031      	b.n	80012dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <__NVIC_SetPriority+0xd8>)
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	0019      	movs	r1, r3
 8001280:	230f      	movs	r3, #15
 8001282:	400b      	ands	r3, r1
 8001284:	3b08      	subs	r3, #8
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3306      	adds	r3, #6
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	18d3      	adds	r3, r2, r3
 800128e:	3304      	adds	r3, #4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1dfa      	adds	r2, r7, #7
 8001294:	7812      	ldrb	r2, [r2, #0]
 8001296:	0011      	movs	r1, r2
 8001298:	2203      	movs	r2, #3
 800129a:	400a      	ands	r2, r1
 800129c:	00d2      	lsls	r2, r2, #3
 800129e:	21ff      	movs	r1, #255	; 0xff
 80012a0:	4091      	lsls	r1, r2
 80012a2:	000a      	movs	r2, r1
 80012a4:	43d2      	mvns	r2, r2
 80012a6:	401a      	ands	r2, r3
 80012a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	22ff      	movs	r2, #255	; 0xff
 80012b0:	401a      	ands	r2, r3
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	0018      	movs	r0, r3
 80012b8:	2303      	movs	r3, #3
 80012ba:	4003      	ands	r3, r0
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <__NVIC_SetPriority+0xd8>)
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	001c      	movs	r4, r3
 80012c8:	230f      	movs	r3, #15
 80012ca:	4023      	ands	r3, r4
 80012cc:	3b08      	subs	r3, #8
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	430a      	orrs	r2, r1
 80012d2:	3306      	adds	r3, #6
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	18c3      	adds	r3, r0, r3
 80012d8:	3304      	adds	r3, #4
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b003      	add	sp, #12
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1e5a      	subs	r2, r3, #1
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	045b      	lsls	r3, r3, #17
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d301      	bcc.n	8001304 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001300:	2301      	movs	r3, #1
 8001302:	e010      	b.n	8001326 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <SysTick_Config+0x44>)
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	3a01      	subs	r2, #1
 800130a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130c:	2301      	movs	r3, #1
 800130e:	425b      	negs	r3, r3
 8001310:	2103      	movs	r1, #3
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff ff7c 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x44>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x44>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b002      	add	sp, #8
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	210f      	movs	r1, #15
 8001340:	187b      	adds	r3, r7, r1
 8001342:	1c02      	adds	r2, r0, #0
 8001344:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	187b      	adds	r3, r7, r1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b004      	add	sp, #16
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff ffbf 	bl	80012ec <SysTick_Config>
 800136e:	0003      	movs	r3, r0
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001386:	e147      	b.n	8001618 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2101      	movs	r1, #1
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4091      	lsls	r1, r2
 8001392:	000a      	movs	r2, r1
 8001394:	4013      	ands	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d100      	bne.n	80013a0 <HAL_GPIO_Init+0x28>
 800139e:	e138      	b.n	8001612 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2203      	movs	r2, #3
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d005      	beq.n	80013b8 <HAL_GPIO_Init+0x40>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2203      	movs	r2, #3
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d130      	bne.n	800141a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	409a      	lsls	r2, r3
 80013c6:	0013      	movs	r3, r2
 80013c8:	43da      	mvns	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	409a      	lsls	r2, r3
 80013da:	0013      	movs	r3, r2
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ee:	2201      	movs	r2, #1
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	43da      	mvns	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	2201      	movs	r2, #1
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2203      	movs	r2, #3
 8001420:	4013      	ands	r3, r2
 8001422:	2b03      	cmp	r3, #3
 8001424:	d017      	beq.n	8001456 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	409a      	lsls	r2, r3
 8001434:	0013      	movs	r3, r2
 8001436:	43da      	mvns	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2203      	movs	r2, #3
 800145c:	4013      	ands	r3, r2
 800145e:	2b02      	cmp	r3, #2
 8001460:	d123      	bne.n	80014aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	08da      	lsrs	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3208      	adds	r2, #8
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	58d3      	ldr	r3, [r2, r3]
 800146e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2207      	movs	r2, #7
 8001474:	4013      	ands	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	409a      	lsls	r2, r3
 800147c:	0013      	movs	r3, r2
 800147e:	43da      	mvns	r2, r3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	691a      	ldr	r2, [r3, #16]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2107      	movs	r1, #7
 800148e:	400b      	ands	r3, r1
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	409a      	lsls	r2, r3
 8001494:	0013      	movs	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	6939      	ldr	r1, [r7, #16]
 80014a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	43da      	mvns	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2203      	movs	r2, #3
 80014c8:	401a      	ands	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	409a      	lsls	r2, r3
 80014d0:	0013      	movs	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	23c0      	movs	r3, #192	; 0xc0
 80014e4:	029b      	lsls	r3, r3, #10
 80014e6:	4013      	ands	r3, r2
 80014e8:	d100      	bne.n	80014ec <HAL_GPIO_Init+0x174>
 80014ea:	e092      	b.n	8001612 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014ec:	4a50      	ldr	r2, [pc, #320]	; (8001630 <HAL_GPIO_Init+0x2b8>)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3318      	adds	r3, #24
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	589b      	ldr	r3, [r3, r2]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2203      	movs	r2, #3
 80014fe:	4013      	ands	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	220f      	movs	r2, #15
 8001504:	409a      	lsls	r2, r3
 8001506:	0013      	movs	r3, r2
 8001508:	43da      	mvns	r2, r3
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	23a0      	movs	r3, #160	; 0xa0
 8001514:	05db      	lsls	r3, r3, #23
 8001516:	429a      	cmp	r2, r3
 8001518:	d013      	beq.n	8001542 <HAL_GPIO_Init+0x1ca>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a45      	ldr	r2, [pc, #276]	; (8001634 <HAL_GPIO_Init+0x2bc>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00d      	beq.n	800153e <HAL_GPIO_Init+0x1c6>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a44      	ldr	r2, [pc, #272]	; (8001638 <HAL_GPIO_Init+0x2c0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d007      	beq.n	800153a <HAL_GPIO_Init+0x1c2>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a43      	ldr	r2, [pc, #268]	; (800163c <HAL_GPIO_Init+0x2c4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_GPIO_Init+0x1be>
 8001532:	2303      	movs	r3, #3
 8001534:	e006      	b.n	8001544 <HAL_GPIO_Init+0x1cc>
 8001536:	2305      	movs	r3, #5
 8001538:	e004      	b.n	8001544 <HAL_GPIO_Init+0x1cc>
 800153a:	2302      	movs	r3, #2
 800153c:	e002      	b.n	8001544 <HAL_GPIO_Init+0x1cc>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_GPIO_Init+0x1cc>
 8001542:	2300      	movs	r3, #0
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	2103      	movs	r1, #3
 8001548:	400a      	ands	r2, r1
 800154a:	00d2      	lsls	r2, r2, #3
 800154c:	4093      	lsls	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001554:	4936      	ldr	r1, [pc, #216]	; (8001630 <HAL_GPIO_Init+0x2b8>)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3318      	adds	r3, #24
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001562:	4b33      	ldr	r3, [pc, #204]	; (8001630 <HAL_GPIO_Init+0x2b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	43da      	mvns	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	035b      	lsls	r3, r3, #13
 800157a:	4013      	ands	r3, r2
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_GPIO_Init+0x2b8>)
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <HAL_GPIO_Init+0x2b8>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43da      	mvns	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	039b      	lsls	r3, r3, #14
 80015a4:	4013      	ands	r3, r2
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_GPIO_Init+0x2b8>)
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015b6:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <HAL_GPIO_Init+0x2b8>)
 80015b8:	2384      	movs	r3, #132	; 0x84
 80015ba:	58d3      	ldr	r3, [r2, r3]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43da      	mvns	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	029b      	lsls	r3, r3, #10
 80015d0:	4013      	ands	r3, r2
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015dc:	4914      	ldr	r1, [pc, #80]	; (8001630 <HAL_GPIO_Init+0x2b8>)
 80015de:	2284      	movs	r2, #132	; 0x84
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <HAL_GPIO_Init+0x2b8>)
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	58d3      	ldr	r3, [r2, r3]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43da      	mvns	r2, r3
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	025b      	lsls	r3, r3, #9
 80015fe:	4013      	ands	r3, r2
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800160a:	4909      	ldr	r1, [pc, #36]	; (8001630 <HAL_GPIO_Init+0x2b8>)
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	40da      	lsrs	r2, r3
 8001620:	1e13      	subs	r3, r2, #0
 8001622:	d000      	beq.n	8001626 <HAL_GPIO_Init+0x2ae>
 8001624:	e6b0      	b.n	8001388 <HAL_GPIO_Init+0x10>
  }
}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b006      	add	sp, #24
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021800 	.word	0x40021800
 8001634:	50000400 	.word	0x50000400
 8001638:	50000800 	.word	0x50000800
 800163c:	50000c00 	.word	0x50000c00

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	0008      	movs	r0, r1
 800164a:	0011      	movs	r1, r2
 800164c:	1cbb      	adds	r3, r7, #2
 800164e:	1c02      	adds	r2, r0, #0
 8001650:	801a      	strh	r2, [r3, #0]
 8001652:	1c7b      	adds	r3, r7, #1
 8001654:	1c0a      	adds	r2, r1, #0
 8001656:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001658:	1c7b      	adds	r3, r7, #1
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001660:	1cbb      	adds	r3, r7, #2
 8001662:	881a      	ldrh	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800166a:	1cbb      	adds	r3, r7, #2
 800166c:	881a      	ldrh	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	b002      	add	sp, #8
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e08f      	b.n	80017ae <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2241      	movs	r2, #65	; 0x41
 8001692:	5c9b      	ldrb	r3, [r3, r2]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d107      	bne.n	80016aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2240      	movs	r2, #64	; 0x40
 800169e:	2100      	movs	r1, #0
 80016a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff f893 	bl	80007d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2241      	movs	r2, #65	; 0x41
 80016ae:	2124      	movs	r1, #36	; 0x24
 80016b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	438a      	bics	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	493b      	ldr	r1, [pc, #236]	; (80017b8 <HAL_I2C_Init+0x13c>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4938      	ldr	r1, [pc, #224]	; (80017bc <HAL_I2C_Init+0x140>)
 80016dc:	400a      	ands	r2, r1
 80016de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d108      	bne.n	80016fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	0209      	lsls	r1, r1, #8
 80016f4:	430a      	orrs	r2, r1
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	e007      	b.n	800170a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2184      	movs	r1, #132	; 0x84
 8001704:	0209      	lsls	r1, r1, #8
 8001706:	430a      	orrs	r2, r1
 8001708:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d109      	bne.n	8001726 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	0109      	lsls	r1, r1, #4
 8001720:	430a      	orrs	r2, r1
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	e007      	b.n	8001736 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4923      	ldr	r1, [pc, #140]	; (80017c0 <HAL_I2C_Init+0x144>)
 8001732:	400a      	ands	r2, r1
 8001734:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4920      	ldr	r1, [pc, #128]	; (80017c4 <HAL_I2C_Init+0x148>)
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	491a      	ldr	r1, [pc, #104]	; (80017bc <HAL_I2C_Init+0x140>)
 8001752:	400a      	ands	r2, r1
 8001754:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	431a      	orrs	r2, r3
 8001760:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69d9      	ldr	r1, [r3, #28]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1a      	ldr	r2, [r3, #32]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2101      	movs	r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2241      	movs	r2, #65	; 0x41
 800179a:	2120      	movs	r1, #32
 800179c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2242      	movs	r2, #66	; 0x42
 80017a8:	2100      	movs	r1, #0
 80017aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	0018      	movs	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b002      	add	sp, #8
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	f0ffffff 	.word	0xf0ffffff
 80017bc:	ffff7fff 	.word	0xffff7fff
 80017c0:	fffff7ff 	.word	0xfffff7ff
 80017c4:	02008000 	.word	0x02008000

080017c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2241      	movs	r2, #65	; 0x41
 80017d6:	5c9b      	ldrb	r3, [r3, r2]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b20      	cmp	r3, #32
 80017dc:	d138      	bne.n	8001850 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2240      	movs	r2, #64	; 0x40
 80017e2:	5c9b      	ldrb	r3, [r3, r2]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e032      	b.n	8001852 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2240      	movs	r2, #64	; 0x40
 80017f0:	2101      	movs	r1, #1
 80017f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2241      	movs	r2, #65	; 0x41
 80017f8:	2124      	movs	r1, #36	; 0x24
 80017fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2101      	movs	r1, #1
 8001808:	438a      	bics	r2, r1
 800180a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4911      	ldr	r1, [pc, #68]	; (800185c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001818:	400a      	ands	r2, r1
 800181a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6819      	ldr	r1, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2101      	movs	r1, #1
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2241      	movs	r2, #65	; 0x41
 8001840:	2120      	movs	r1, #32
 8001842:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	2100      	movs	r1, #0
 800184a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	e000      	b.n	8001852 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001850:	2302      	movs	r3, #2
  }
}
 8001852:	0018      	movs	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	b002      	add	sp, #8
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	ffffefff 	.word	0xffffefff

08001860 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2241      	movs	r2, #65	; 0x41
 800186e:	5c9b      	ldrb	r3, [r3, r2]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b20      	cmp	r3, #32
 8001874:	d139      	bne.n	80018ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2240      	movs	r2, #64	; 0x40
 800187a:	5c9b      	ldrb	r3, [r3, r2]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001880:	2302      	movs	r3, #2
 8001882:	e033      	b.n	80018ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2240      	movs	r2, #64	; 0x40
 8001888:	2101      	movs	r1, #1
 800188a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2241      	movs	r2, #65	; 0x41
 8001890:	2124      	movs	r1, #36	; 0x24
 8001892:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2101      	movs	r1, #1
 80018a0:	438a      	bics	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2101      	movs	r1, #1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2241      	movs	r2, #65	; 0x41
 80018da:	2120      	movs	r1, #32
 80018dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2240      	movs	r2, #64	; 0x40
 80018e2:	2100      	movs	r1, #0
 80018e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018ea:	2302      	movs	r3, #2
  }
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b004      	add	sp, #16
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	fffff0ff 	.word	0xfffff0ff

080018f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a19      	ldr	r2, [pc, #100]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001906:	4013      	ands	r3, r2
 8001908:	0019      	movs	r1, r3
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	429a      	cmp	r2, r3
 800191a:	d11f      	bne.n	800195c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	0013      	movs	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	189b      	adds	r3, r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4912      	ldr	r1, [pc, #72]	; (8001974 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800192a:	0018      	movs	r0, r3
 800192c:	f7fe fbea 	bl	8000104 <__udivsi3>
 8001930:	0003      	movs	r3, r0
 8001932:	3301      	adds	r3, #1
 8001934:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001936:	e008      	b.n	800194a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3b01      	subs	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e001      	b.n	800194a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e009      	b.n	800195e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	401a      	ands	r2, r3
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	429a      	cmp	r2, r3
 800195a:	d0ed      	beq.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b004      	add	sp, #16
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	40007000 	.word	0x40007000
 800196c:	fffff9ff 	.word	0xfffff9ff
 8001970:	20000008 	.word	0x20000008
 8001974:	000f4240 	.word	0x000f4240

08001978 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <LL_RCC_GetAPB1Prescaler+0x14>)
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	23e0      	movs	r3, #224	; 0xe0
 8001982:	01db      	lsls	r3, r3, #7
 8001984:	4013      	ands	r3, r2
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000

08001990 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e2fe      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2201      	movs	r2, #1
 80019a8:	4013      	ands	r3, r2
 80019aa:	d100      	bne.n	80019ae <HAL_RCC_OscConfig+0x1e>
 80019ac:	e07c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ae:	4bc3      	ldr	r3, [pc, #780]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2238      	movs	r2, #56	; 0x38
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019b8:	4bc0      	ldr	r3, [pc, #768]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2203      	movs	r2, #3
 80019be:	4013      	ands	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	2b10      	cmp	r3, #16
 80019c6:	d102      	bne.n	80019ce <HAL_RCC_OscConfig+0x3e>
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d002      	beq.n	80019d4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d10b      	bne.n	80019ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	4bb9      	ldr	r3, [pc, #740]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	4013      	ands	r3, r2
 80019de:	d062      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x116>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d15e      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e2d9      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	025b      	lsls	r3, r3, #9
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_OscConfig+0x78>
 80019f8:	4bb0      	ldr	r3, [pc, #704]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4baf      	ldr	r3, [pc, #700]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	0249      	lsls	r1, r1, #9
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e020      	b.n	8001a4a <HAL_RCC_OscConfig+0xba>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	23a0      	movs	r3, #160	; 0xa0
 8001a0e:	02db      	lsls	r3, r3, #11
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d10e      	bne.n	8001a32 <HAL_RCC_OscConfig+0xa2>
 8001a14:	4ba9      	ldr	r3, [pc, #676]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4ba8      	ldr	r3, [pc, #672]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	2180      	movs	r1, #128	; 0x80
 8001a1c:	02c9      	lsls	r1, r1, #11
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	4ba6      	ldr	r3, [pc, #664]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4ba5      	ldr	r3, [pc, #660]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0249      	lsls	r1, r1, #9
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e00b      	b.n	8001a4a <HAL_RCC_OscConfig+0xba>
 8001a32:	4ba2      	ldr	r3, [pc, #648]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4ba1      	ldr	r3, [pc, #644]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001a38:	49a1      	ldr	r1, [pc, #644]	; (8001cc0 <HAL_RCC_OscConfig+0x330>)
 8001a3a:	400a      	ands	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	4b9f      	ldr	r3, [pc, #636]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b9e      	ldr	r3, [pc, #632]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001a44:	499f      	ldr	r1, [pc, #636]	; (8001cc4 <HAL_RCC_OscConfig+0x334>)
 8001a46:	400a      	ands	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d014      	beq.n	8001a7c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7ff fbaf 	bl	80011b4 <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fbaa 	bl	80011b4 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e298      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6e:	4b93      	ldr	r3, [pc, #588]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	029b      	lsls	r3, r3, #10
 8001a76:	4013      	ands	r3, r2
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0xcc>
 8001a7a:	e015      	b.n	8001aa8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fb9a 	bl	80011b4 <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a86:	f7ff fb95 	bl	80011b4 <HAL_GetTick>
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b64      	cmp	r3, #100	; 0x64
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e283      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a98:	4b88      	ldr	r3, [pc, #544]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	029b      	lsls	r3, r3, #10
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0xf6>
 8001aa4:	e000      	b.n	8001aa8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2202      	movs	r2, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d100      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x124>
 8001ab2:	e099      	b.n	8001be8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab4:	4b81      	ldr	r3, [pc, #516]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2238      	movs	r2, #56	; 0x38
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001abe:	4b7f      	ldr	r3, [pc, #508]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2b10      	cmp	r3, #16
 8001acc:	d102      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x144>
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d002      	beq.n	8001ada <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d135      	bne.n	8001b46 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ada:	4b78      	ldr	r3, [pc, #480]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x162>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e256      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af2:	4b72      	ldr	r3, [pc, #456]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a74      	ldr	r2, [pc, #464]	; (8001cc8 <HAL_RCC_OscConfig+0x338>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	021a      	lsls	r2, r3, #8
 8001b02:	4b6e      	ldr	r3, [pc, #440]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001b04:	430a      	orrs	r2, r1
 8001b06:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d112      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b0e:	4b6b      	ldr	r3, [pc, #428]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6e      	ldr	r2, [pc, #440]	; (8001ccc <HAL_RCC_OscConfig+0x33c>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	4b67      	ldr	r3, [pc, #412]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b22:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	0adb      	lsrs	r3, r3, #11
 8001b28:	2207      	movs	r2, #7
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	4a68      	ldr	r2, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x340>)
 8001b2e:	40da      	lsrs	r2, r3
 8001b30:	4b68      	ldr	r3, [pc, #416]	; (8001cd4 <HAL_RCC_OscConfig+0x344>)
 8001b32:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b34:	4b68      	ldr	r3, [pc, #416]	; (8001cd8 <HAL_RCC_OscConfig+0x348>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff fadf 	bl	80010fc <HAL_InitTick>
 8001b3e:	1e03      	subs	r3, r0, #0
 8001b40:	d051      	beq.n	8001be6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e22c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d030      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b4e:	4b5b      	ldr	r3, [pc, #364]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a5e      	ldr	r2, [pc, #376]	; (8001ccc <HAL_RCC_OscConfig+0x33c>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	0019      	movs	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	4b57      	ldr	r3, [pc, #348]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001b62:	4b56      	ldr	r3, [pc, #344]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b55      	ldr	r3, [pc, #340]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	0049      	lsls	r1, r1, #1
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff fb20 	bl	80011b4 <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fb1b 	bl	80011b4 <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e209      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8c:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4013      	ands	r3, r2
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b48      	ldr	r3, [pc, #288]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4a4a      	ldr	r2, [pc, #296]	; (8001cc8 <HAL_RCC_OscConfig+0x338>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	021a      	lsls	r2, r3, #8
 8001ba8:	4b44      	ldr	r3, [pc, #272]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001baa:	430a      	orrs	r2, r1
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	e01b      	b.n	8001be8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001bb0:	4b42      	ldr	r3, [pc, #264]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b41      	ldr	r3, [pc, #260]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001bb6:	4949      	ldr	r1, [pc, #292]	; (8001cdc <HAL_RCC_OscConfig+0x34c>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fafa 	bl	80011b4 <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff faf5 	bl	80011b4 <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e1e3      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bd8:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4013      	ands	r3, r2
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x236>
 8001be4:	e000      	b.n	8001be8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001be6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2208      	movs	r2, #8
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d047      	beq.n	8001c82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bf2:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2238      	movs	r2, #56	; 0x38
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b18      	cmp	r3, #24
 8001bfc:	d10a      	bne.n	8001c14 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	2202      	movs	r2, #2
 8001c04:	4013      	ands	r3, r2
 8001c06:	d03c      	beq.n	8001c82 <HAL_RCC_OscConfig+0x2f2>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d138      	bne.n	8001c82 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e1c5      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d019      	beq.n	8001c50 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c20:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	430a      	orrs	r2, r1
 8001c26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff fac4 	bl	80011b4 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c32:	f7ff fabf 	bl	80011b4 <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1ad      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c48:	2202      	movs	r2, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d0f1      	beq.n	8001c32 <HAL_RCC_OscConfig+0x2a2>
 8001c4e:	e018      	b.n	8001c82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001c52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001c56:	2101      	movs	r1, #1
 8001c58:	438a      	bics	r2, r1
 8001c5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff faaa 	bl	80011b4 <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c66:	f7ff faa5 	bl	80011b4 <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e193      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d1f1      	bne.n	8001c66 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2204      	movs	r2, #4
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d100      	bne.n	8001c8e <HAL_RCC_OscConfig+0x2fe>
 8001c8c:	e0c6      	b.n	8001e1c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8e:	231f      	movs	r3, #31
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2238      	movs	r2, #56	; 0x38
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d11e      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_RCC_OscConfig+0x32c>)
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d100      	bne.n	8001cae <HAL_RCC_OscConfig+0x31e>
 8001cac:	e0b6      	b.n	8001e1c <HAL_RCC_OscConfig+0x48c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d000      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x328>
 8001cb6:	e0b1      	b.n	8001e1c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e171      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	fffeffff 	.word	0xfffeffff
 8001cc4:	fffbffff 	.word	0xfffbffff
 8001cc8:	ffff80ff 	.word	0xffff80ff
 8001ccc:	ffffc7ff 	.word	0xffffc7ff
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	2000000c 	.word	0x2000000c
 8001cdc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ce0:	4bb1      	ldr	r3, [pc, #708]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	055b      	lsls	r3, r3, #21
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x360>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x362>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d011      	beq.n	8001d1a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	4bac      	ldr	r3, [pc, #688]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cfa:	4bab      	ldr	r3, [pc, #684]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	0549      	lsls	r1, r1, #21
 8001d00:	430a      	orrs	r2, r1
 8001d02:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d04:	4ba8      	ldr	r3, [pc, #672]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	055b      	lsls	r3, r3, #21
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001d12:	231f      	movs	r3, #31
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1a:	4ba4      	ldr	r3, [pc, #656]	; (8001fac <HAL_RCC_OscConfig+0x61c>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4013      	ands	r3, r2
 8001d24:	d11a      	bne.n	8001d5c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d26:	4ba1      	ldr	r3, [pc, #644]	; (8001fac <HAL_RCC_OscConfig+0x61c>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4ba0      	ldr	r3, [pc, #640]	; (8001fac <HAL_RCC_OscConfig+0x61c>)
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	0049      	lsls	r1, r1, #1
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fa3e 	bl	80011b4 <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7ff fa39 	bl	80011b4 <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e127      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d50:	4b96      	ldr	r3, [pc, #600]	; (8001fac <HAL_RCC_OscConfig+0x61c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3e2>
 8001d64:	4b90      	ldr	r3, [pc, #576]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001d66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d68:	4b8f      	ldr	r3, [pc, #572]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d70:	e01c      	b.n	8001dac <HAL_RCC_OscConfig+0x41c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x404>
 8001d7a:	4b8b      	ldr	r3, [pc, #556]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001d7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d7e:	4b8a      	ldr	r3, [pc, #552]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001d80:	2104      	movs	r1, #4
 8001d82:	430a      	orrs	r2, r1
 8001d84:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d86:	4b88      	ldr	r3, [pc, #544]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001d88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d8a:	4b87      	ldr	r3, [pc, #540]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d92:	e00b      	b.n	8001dac <HAL_RCC_OscConfig+0x41c>
 8001d94:	4b84      	ldr	r3, [pc, #528]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001d96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d98:	4b83      	ldr	r3, [pc, #524]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	438a      	bics	r2, r1
 8001d9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001da0:	4b81      	ldr	r3, [pc, #516]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001da2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001da4:	4b80      	ldr	r3, [pc, #512]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001da6:	2104      	movs	r1, #4
 8001da8:	438a      	bics	r2, r1
 8001daa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d014      	beq.n	8001dde <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f9fe 	bl	80011b4 <HAL_GetTick>
 8001db8:	0003      	movs	r3, r0
 8001dba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dbc:	e009      	b.n	8001dd2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7ff f9f9 	bl	80011b4 <HAL_GetTick>
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	4a79      	ldr	r2, [pc, #484]	; (8001fb0 <HAL_RCC_OscConfig+0x620>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0e6      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd2:	4b75      	ldr	r3, [pc, #468]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x42e>
 8001ddc:	e013      	b.n	8001e06 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff f9e9 	bl	80011b4 <HAL_GetTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de6:	e009      	b.n	8001dfc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de8:	f7ff f9e4 	bl	80011b4 <HAL_GetTick>
 8001dec:	0002      	movs	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	4a6f      	ldr	r2, [pc, #444]	; (8001fb0 <HAL_RCC_OscConfig+0x620>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0d1      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dfc:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	2202      	movs	r2, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e06:	231f      	movs	r3, #31
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d105      	bne.n	8001e1c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e10:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e14:	4b64      	ldr	r3, [pc, #400]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001e16:	4967      	ldr	r1, [pc, #412]	; (8001fb4 <HAL_RCC_OscConfig+0x624>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d100      	bne.n	8001e26 <HAL_RCC_OscConfig+0x496>
 8001e24:	e0bb      	b.n	8001f9e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e26:	4b60      	ldr	r3, [pc, #384]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2238      	movs	r2, #56	; 0x38
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d100      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4a4>
 8001e32:	e07b      	b.n	8001f2c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d156      	bne.n	8001eea <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3c:	4b5a      	ldr	r3, [pc, #360]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001e42:	495d      	ldr	r1, [pc, #372]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff f9b4 	bl	80011b4 <HAL_GetTick>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff f9af 	bl	80011b4 <HAL_GetTick>
 8001e56:	0002      	movs	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e09d      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e64:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	049b      	lsls	r3, r3, #18
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e70:	4b4d      	ldr	r3, [pc, #308]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a51      	ldr	r2, [pc, #324]	; (8001fbc <HAL_RCC_OscConfig+0x62c>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	0019      	movs	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1a      	ldr	r2, [r3, #32]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	4b42      	ldr	r3, [pc, #264]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	0449      	lsls	r1, r1, #17
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	4b3c      	ldr	r3, [pc, #240]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	0549      	lsls	r1, r1, #21
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f978 	bl	80011b4 <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eca:	f7ff f973 	bl	80011b4 <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e061      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001edc:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	049b      	lsls	r3, r3, #18
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x53a>
 8001ee8:	e059      	b.n	8001f9e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eea:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	4b2e      	ldr	r3, [pc, #184]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001ef0:	4931      	ldr	r1, [pc, #196]	; (8001fb8 <HAL_RCC_OscConfig+0x628>)
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7ff f95d 	bl	80011b4 <HAL_GetTick>
 8001efa:	0003      	movs	r3, r0
 8001efc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff f958 	bl	80011b4 <HAL_GetTick>
 8001f04:	0002      	movs	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e046      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f12:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	049b      	lsls	r3, r3, #18
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001f24:	4926      	ldr	r1, [pc, #152]	; (8001fc0 <HAL_RCC_OscConfig+0x630>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	e038      	b.n	8001f9e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e033      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x618>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2203      	movs	r2, #3
 8001f42:	401a      	ands	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d126      	bne.n	8001f9a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2270      	movs	r2, #112	; 0x70
 8001f50:	401a      	ands	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d11f      	bne.n	8001f9a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	23fe      	movs	r3, #254	; 0xfe
 8001f5e:	01db      	lsls	r3, r3, #7
 8001f60:	401a      	ands	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d116      	bne.n	8001f9a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	23f8      	movs	r3, #248	; 0xf8
 8001f70:	039b      	lsls	r3, r3, #14
 8001f72:	401a      	ands	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d10e      	bne.n	8001f9a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	23e0      	movs	r3, #224	; 0xe0
 8001f80:	051b      	lsls	r3, r3, #20
 8001f82:	401a      	ands	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d106      	bne.n	8001f9a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	0f5b      	lsrs	r3, r3, #29
 8001f90:	075a      	lsls	r2, r3, #29
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b008      	add	sp, #32
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40007000 	.word	0x40007000
 8001fb0:	00001388 	.word	0x00001388
 8001fb4:	efffffff 	.word	0xefffffff
 8001fb8:	feffffff 	.word	0xfeffffff
 8001fbc:	11c1808c 	.word	0x11c1808c
 8001fc0:	eefefffc 	.word	0xeefefffc

08001fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0e9      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2207      	movs	r2, #7
 8001fde:	4013      	ands	r3, r2
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d91e      	bls.n	8002024 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b73      	ldr	r3, [pc, #460]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2207      	movs	r2, #7
 8001fec:	4393      	bics	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	4b70      	ldr	r3, [pc, #448]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ff8:	f7ff f8dc 	bl	80011b4 <HAL_GetTick>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002000:	e009      	b.n	8002016 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002002:	f7ff f8d7 	bl	80011b4 <HAL_GetTick>
 8002006:	0002      	movs	r2, r0
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	4a6a      	ldr	r2, [pc, #424]	; (80021b8 <HAL_RCC_ClockConfig+0x1f4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e0ca      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002016:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2207      	movs	r2, #7
 800201c:	4013      	ands	r3, r2
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d1ee      	bne.n	8002002 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2202      	movs	r2, #2
 800202a:	4013      	ands	r3, r2
 800202c:	d015      	beq.n	800205a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2204      	movs	r2, #4
 8002034:	4013      	ands	r3, r2
 8002036:	d006      	beq.n	8002046 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002038:	4b60      	ldr	r3, [pc, #384]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	4b5f      	ldr	r3, [pc, #380]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 800203e:	21e0      	movs	r1, #224	; 0xe0
 8002040:	01c9      	lsls	r1, r1, #7
 8002042:	430a      	orrs	r2, r1
 8002044:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002046:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	4a5d      	ldr	r2, [pc, #372]	; (80021c0 <HAL_RCC_ClockConfig+0x1fc>)
 800204c:	4013      	ands	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 8002056:	430a      	orrs	r2, r1
 8002058:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2201      	movs	r2, #1
 8002060:	4013      	ands	r3, r2
 8002062:	d057      	beq.n	8002114 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	029b      	lsls	r3, r3, #10
 8002074:	4013      	ands	r3, r2
 8002076:	d12b      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e097      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d107      	bne.n	8002094 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002084:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	049b      	lsls	r3, r3, #18
 800208c:	4013      	ands	r3, r2
 800208e:	d11f      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e08b      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d107      	bne.n	80020ac <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209c:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4013      	ands	r3, r2
 80020a6:	d113      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e07f      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020b4:	4b41      	ldr	r3, [pc, #260]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 80020b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b8:	2202      	movs	r2, #2
 80020ba:	4013      	ands	r3, r2
 80020bc:	d108      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e074      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c2:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e06d      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020d0:	4b3a      	ldr	r3, [pc, #232]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2207      	movs	r2, #7
 80020d6:	4393      	bics	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4b37      	ldr	r3, [pc, #220]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 80020e0:	430a      	orrs	r2, r1
 80020e2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e4:	f7ff f866 	bl	80011b4 <HAL_GetTick>
 80020e8:	0003      	movs	r3, r0
 80020ea:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ec:	e009      	b.n	8002102 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ee:	f7ff f861 	bl	80011b4 <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	4a2f      	ldr	r2, [pc, #188]	; (80021b8 <HAL_RCC_ClockConfig+0x1f4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e054      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2238      	movs	r2, #56	; 0x38
 8002108:	401a      	ands	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	429a      	cmp	r2, r3
 8002112:	d1ec      	bne.n	80020ee <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2207      	movs	r2, #7
 800211a:	4013      	ands	r3, r2
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d21e      	bcs.n	8002160 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2207      	movs	r2, #7
 8002128:	4393      	bics	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002134:	f7ff f83e 	bl	80011b4 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800213c:	e009      	b.n	8002152 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213e:	f7ff f839 	bl	80011b4 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	4a1b      	ldr	r2, [pc, #108]	; (80021b8 <HAL_RCC_ClockConfig+0x1f4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e02c      	b.n	80021ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2207      	movs	r2, #7
 8002158:	4013      	ands	r3, r2
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d1ee      	bne.n	800213e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2204      	movs	r2, #4
 8002166:	4013      	ands	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <HAL_RCC_ClockConfig+0x200>)
 8002170:	4013      	ands	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 800217a:	430a      	orrs	r2, r1
 800217c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800217e:	f000 f829 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8002182:	0001      	movs	r1, r0
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_RCC_ClockConfig+0x1f8>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	220f      	movs	r2, #15
 800218c:	401a      	ands	r2, r3
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_RCC_ClockConfig+0x204>)
 8002190:	0092      	lsls	r2, r2, #2
 8002192:	58d3      	ldr	r3, [r2, r3]
 8002194:	221f      	movs	r2, #31
 8002196:	4013      	ands	r3, r2
 8002198:	000a      	movs	r2, r1
 800219a:	40da      	lsrs	r2, r3
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_ClockConfig+0x208>)
 800219e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_ClockConfig+0x20c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7fe ffa9 	bl	80010fc <HAL_InitTick>
 80021aa:	0003      	movs	r3, r0
}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b004      	add	sp, #16
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40022000 	.word	0x40022000
 80021b8:	00001388 	.word	0x00001388
 80021bc:	40021000 	.word	0x40021000
 80021c0:	fffff0ff 	.word	0xfffff0ff
 80021c4:	ffff8fff 	.word	0xffff8fff
 80021c8:	08005524 	.word	0x08005524
 80021cc:	20000008 	.word	0x20000008
 80021d0:	2000000c 	.word	0x2000000c

080021d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021da:	4b3c      	ldr	r3, [pc, #240]	; (80022cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2238      	movs	r2, #56	; 0x38
 80021e0:	4013      	ands	r3, r2
 80021e2:	d10f      	bne.n	8002204 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80021e4:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0adb      	lsrs	r3, r3, #11
 80021ea:	2207      	movs	r2, #7
 80021ec:	4013      	ands	r3, r2
 80021ee:	2201      	movs	r2, #1
 80021f0:	409a      	lsls	r2, r3
 80021f2:	0013      	movs	r3, r2
 80021f4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80021f6:	6839      	ldr	r1, [r7, #0]
 80021f8:	4835      	ldr	r0, [pc, #212]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021fa:	f7fd ff83 	bl	8000104 <__udivsi3>
 80021fe:	0003      	movs	r3, r0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	e05d      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2238      	movs	r2, #56	; 0x38
 800220a:	4013      	ands	r3, r2
 800220c:	2b08      	cmp	r3, #8
 800220e:	d102      	bne.n	8002216 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002210:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e054      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002216:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2238      	movs	r2, #56	; 0x38
 800221c:	4013      	ands	r3, r2
 800221e:	2b10      	cmp	r3, #16
 8002220:	d138      	bne.n	8002294 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2203      	movs	r2, #3
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	2207      	movs	r2, #7
 8002234:	4013      	ands	r3, r2
 8002236:	3301      	adds	r3, #1
 8002238:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b03      	cmp	r3, #3
 800223e:	d10d      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	4824      	ldr	r0, [pc, #144]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002244:	f7fd ff5e 	bl	8000104 <__udivsi3>
 8002248:	0003      	movs	r3, r0
 800224a:	0019      	movs	r1, r3
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	227f      	movs	r2, #127	; 0x7f
 8002254:	4013      	ands	r3, r2
 8002256:	434b      	muls	r3, r1
 8002258:	617b      	str	r3, [r7, #20]
        break;
 800225a:	e00d      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	481c      	ldr	r0, [pc, #112]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002260:	f7fd ff50 	bl	8000104 <__udivsi3>
 8002264:	0003      	movs	r3, r0
 8002266:	0019      	movs	r1, r3
 8002268:	4b18      	ldr	r3, [pc, #96]	; (80022cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	227f      	movs	r2, #127	; 0x7f
 8002270:	4013      	ands	r3, r2
 8002272:	434b      	muls	r3, r1
 8002274:	617b      	str	r3, [r7, #20]
        break;
 8002276:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0f5b      	lsrs	r3, r3, #29
 800227e:	2207      	movs	r2, #7
 8002280:	4013      	ands	r3, r2
 8002282:	3301      	adds	r3, #1
 8002284:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	6978      	ldr	r0, [r7, #20]
 800228a:	f7fd ff3b 	bl	8000104 <__udivsi3>
 800228e:	0003      	movs	r3, r0
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	e015      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002294:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2238      	movs	r2, #56	; 0x38
 800229a:	4013      	ands	r3, r2
 800229c:	2b20      	cmp	r3, #32
 800229e:	d103      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2238      	movs	r2, #56	; 0x38
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b18      	cmp	r3, #24
 80022b2:	d103      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80022b4:	23fa      	movs	r3, #250	; 0xfa
 80022b6:	01db      	lsls	r3, r3, #7
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	e001      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022c0:	693b      	ldr	r3, [r7, #16]
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b006      	add	sp, #24
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	40021000 	.word	0x40021000
 80022d0:	00f42400 	.word	0x00f42400
 80022d4:	007a1200 	.word	0x007a1200

080022d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	20000008 	.word	0x20000008

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80022f0:	f7ff fff2 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 80022f4:	0004      	movs	r4, r0
 80022f6:	f7ff fb3f 	bl	8001978 <LL_RCC_GetAPB1Prescaler>
 80022fa:	0003      	movs	r3, r0
 80022fc:	0b1a      	lsrs	r2, r3, #12
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002300:	0092      	lsls	r2, r2, #2
 8002302:	58d3      	ldr	r3, [r2, r3]
 8002304:	221f      	movs	r2, #31
 8002306:	4013      	ands	r3, r2
 8002308:	40dc      	lsrs	r4, r3
 800230a:	0023      	movs	r3, r4
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	bdb0      	pop	{r4, r5, r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	08005564 	.word	0x08005564

08002318 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002320:	2313      	movs	r3, #19
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002328:	2312      	movs	r3, #18
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	029b      	lsls	r3, r3, #10
 8002338:	4013      	ands	r3, r2
 800233a:	d100      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800233c:	e0a3      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233e:	2011      	movs	r0, #17
 8002340:	183b      	adds	r3, r7, r0
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4ba5      	ldr	r3, [pc, #660]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	055b      	lsls	r3, r3, #21
 800234e:	4013      	ands	r3, r2
 8002350:	d110      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	4ba2      	ldr	r3, [pc, #648]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002356:	4ba1      	ldr	r3, [pc, #644]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	0549      	lsls	r1, r1, #21
 800235c:	430a      	orrs	r2, r1
 800235e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002360:	4b9e      	ldr	r3, [pc, #632]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	055b      	lsls	r3, r3, #21
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236e:	183b      	adds	r3, r7, r0
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002374:	4b9a      	ldr	r3, [pc, #616]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b99      	ldr	r3, [pc, #612]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	0049      	lsls	r1, r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002382:	f7fe ff17 	bl	80011b4 <HAL_GetTick>
 8002386:	0003      	movs	r3, r0
 8002388:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800238a:	e00b      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238c:	f7fe ff12 	bl	80011b4 <HAL_GetTick>
 8002390:	0002      	movs	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d904      	bls.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800239a:	2313      	movs	r3, #19
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	2203      	movs	r2, #3
 80023a0:	701a      	strb	r2, [r3, #0]
        break;
 80023a2:	e005      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023a4:	4b8e      	ldr	r3, [pc, #568]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4013      	ands	r3, r2
 80023ae:	d0ed      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80023b0:	2313      	movs	r3, #19
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d154      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023ba:	4b88      	ldr	r3, [pc, #544]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023be:	23c0      	movs	r3, #192	; 0xc0
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4013      	ands	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d019      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d014      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023d6:	4b81      	ldr	r3, [pc, #516]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	4a82      	ldr	r2, [pc, #520]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80023dc:	4013      	ands	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023e0:	4b7e      	ldr	r3, [pc, #504]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023e4:	4b7d      	ldr	r3, [pc, #500]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023e6:	2180      	movs	r1, #128	; 0x80
 80023e8:	0249      	lsls	r1, r1, #9
 80023ea:	430a      	orrs	r2, r1
 80023ec:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023ee:	4b7b      	ldr	r3, [pc, #492]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023f2:	4b7a      	ldr	r3, [pc, #488]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023f4:	497c      	ldr	r1, [pc, #496]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80023f6:	400a      	ands	r2, r1
 80023f8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023fa:	4b78      	ldr	r3, [pc, #480]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2201      	movs	r2, #1
 8002404:	4013      	ands	r3, r2
 8002406:	d016      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe fed4 	bl	80011b4 <HAL_GetTick>
 800240c:	0003      	movs	r3, r0
 800240e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002410:	e00c      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe fecf 	bl	80011b4 <HAL_GetTick>
 8002416:	0002      	movs	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	4a73      	ldr	r2, [pc, #460]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d904      	bls.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002422:	2313      	movs	r3, #19
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	2203      	movs	r2, #3
 8002428:	701a      	strb	r2, [r3, #0]
            break;
 800242a:	e004      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800242c:	4b6b      	ldr	r3, [pc, #428]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	2202      	movs	r2, #2
 8002432:	4013      	ands	r3, r2
 8002434:	d0ed      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002436:	2313      	movs	r3, #19
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10a      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002440:	4b66      	ldr	r3, [pc, #408]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	4a67      	ldr	r2, [pc, #412]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002446:	4013      	ands	r3, r2
 8002448:	0019      	movs	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800244e:	4b63      	ldr	r3, [pc, #396]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002450:	430a      	orrs	r2, r1
 8002452:	65da      	str	r2, [r3, #92]	; 0x5c
 8002454:	e00c      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002456:	2312      	movs	r3, #18
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	2213      	movs	r2, #19
 800245c:	18ba      	adds	r2, r7, r2
 800245e:	7812      	ldrb	r2, [r2, #0]
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	e005      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002464:	2312      	movs	r3, #18
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	2213      	movs	r2, #19
 800246a:	18ba      	adds	r2, r7, r2
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002470:	2311      	movs	r3, #17
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247a:	4b58      	ldr	r3, [pc, #352]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800247c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800247e:	4b57      	ldr	r3, [pc, #348]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002480:	495b      	ldr	r1, [pc, #364]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002482:	400a      	ands	r2, r1
 8002484:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2201      	movs	r2, #1
 800248c:	4013      	ands	r3, r2
 800248e:	d009      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002490:	4b52      	ldr	r3, [pc, #328]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002494:	2203      	movs	r2, #3
 8002496:	4393      	bics	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024a0:	430a      	orrs	r2, r1
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2210      	movs	r2, #16
 80024aa:	4013      	ands	r3, r2
 80024ac:	d009      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024ae:	4b4b      	ldr	r3, [pc, #300]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b2:	4a50      	ldr	r2, [pc, #320]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024be:	430a      	orrs	r2, r1
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4013      	ands	r3, r2
 80024cc:	d009      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ce:	4b43      	ldr	r3, [pc, #268]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	4a49      	ldr	r2, [pc, #292]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	4b3f      	ldr	r3, [pc, #252]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024de:	430a      	orrs	r2, r1
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4013      	ands	r3, r2
 80024ec:	d009      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	4a42      	ldr	r2, [pc, #264]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	0019      	movs	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	4b37      	ldr	r3, [pc, #220]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024fe:	430a      	orrs	r2, r1
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2220      	movs	r2, #32
 8002508:	4013      	ands	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800250c:	4b33      	ldr	r3, [pc, #204]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	4a3b      	ldr	r2, [pc, #236]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002512:	4013      	ands	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	4b30      	ldr	r3, [pc, #192]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800251c:	430a      	orrs	r2, r1
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	01db      	lsls	r3, r3, #7
 8002528:	4013      	ands	r3, r2
 800252a:	d015      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	0899      	lsrs	r1, r3, #2
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800253a:	430a      	orrs	r2, r1
 800253c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	05db      	lsls	r3, r3, #23
 8002546:	429a      	cmp	r2, r3
 8002548:	d106      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800254a:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	4b23      	ldr	r3, [pc, #140]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	0249      	lsls	r1, r1, #9
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	039b      	lsls	r3, r3, #14
 8002560:	4013      	ands	r3, r2
 8002562:	d016      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	4a26      	ldr	r2, [pc, #152]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800256a:	4013      	ands	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002574:	430a      	orrs	r2, r1
 8002576:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1a      	ldr	r2, [r3, #32]
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	03db      	lsls	r3, r3, #15
 8002580:	429a      	cmp	r2, r3
 8002582:	d106      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002584:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	0449      	lsls	r1, r1, #17
 800258e:	430a      	orrs	r2, r1
 8002590:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	4013      	ands	r3, r2
 800259c:	d016      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a2:	4a19      	ldr	r2, [pc, #100]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025ae:	430a      	orrs	r2, r1
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	01db      	lsls	r3, r3, #7
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d106      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	0249      	lsls	r1, r1, #9
 80025c8:	430a      	orrs	r2, r1
 80025ca:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80025cc:	2312      	movs	r3, #18
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	781b      	ldrb	r3, [r3, #0]
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b006      	add	sp, #24
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40007000 	.word	0x40007000
 80025e4:	fffffcff 	.word	0xfffffcff
 80025e8:	fffeffff 	.word	0xfffeffff
 80025ec:	00001388 	.word	0x00001388
 80025f0:	efffffff 	.word	0xefffffff
 80025f4:	fffff3ff 	.word	0xfffff3ff
 80025f8:	fff3ffff 	.word	0xfff3ffff
 80025fc:	ffcfffff 	.word	0xffcfffff
 8002600:	ffffcfff 	.word	0xffffcfff
 8002604:	ffbfffff 	.word	0xffbfffff
 8002608:	ffff3fff 	.word	0xffff3fff

0800260c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0a8      	b.n	8002770 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	2382      	movs	r3, #130	; 0x82
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	429a      	cmp	r2, r3
 8002630:	d009      	beq.n	8002646 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	61da      	str	r2, [r3, #28]
 8002638:	e005      	b.n	8002646 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	225d      	movs	r2, #93	; 0x5d
 8002650:	5c9b      	ldrb	r3, [r3, r2]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d107      	bne.n	8002668 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	225c      	movs	r2, #92	; 0x5c
 800265c:	2100      	movs	r1, #0
 800265e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	0018      	movs	r0, r3
 8002664:	f7fe faa6 	bl	8000bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	225d      	movs	r2, #93	; 0x5d
 800266c:	2102      	movs	r1, #2
 800266e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2140      	movs	r1, #64	; 0x40
 800267c:	438a      	bics	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	23e0      	movs	r3, #224	; 0xe0
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	429a      	cmp	r2, r3
 800268a:	d902      	bls.n	8002692 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	e002      	b.n	8002698 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	015b      	lsls	r3, r3, #5
 8002696:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	23f0      	movs	r3, #240	; 0xf0
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d008      	beq.n	80026b6 <HAL_SPI_Init+0xaa>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	23e0      	movs	r3, #224	; 0xe0
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d002      	beq.n	80026b6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	2382      	movs	r3, #130	; 0x82
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	401a      	ands	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6899      	ldr	r1, [r3, #8]
 80026c4:	2384      	movs	r3, #132	; 0x84
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	400b      	ands	r3, r1
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2102      	movs	r1, #2
 80026d2:	400b      	ands	r3, r1
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	2101      	movs	r1, #1
 80026dc:	400b      	ands	r3, r1
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6999      	ldr	r1, [r3, #24]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	400b      	ands	r3, r1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	2138      	movs	r1, #56	; 0x38
 80026f2:	400b      	ands	r3, r1
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	2180      	movs	r1, #128	; 0x80
 80026fc:	400b      	ands	r3, r1
 80026fe:	431a      	orrs	r2, r3
 8002700:	0011      	movs	r1, r2
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	019b      	lsls	r3, r3, #6
 800270a:	401a      	ands	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	0c1b      	lsrs	r3, r3, #16
 800271a:	2204      	movs	r2, #4
 800271c:	401a      	ands	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	2110      	movs	r1, #16
 8002724:	400b      	ands	r3, r1
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272c:	2108      	movs	r1, #8
 800272e:	400b      	ands	r3, r1
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68d9      	ldr	r1, [r3, #12]
 8002736:	23f0      	movs	r3, #240	; 0xf0
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	400b      	ands	r3, r1
 800273c:	431a      	orrs	r2, r3
 800273e:	0011      	movs	r1, r2
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	015b      	lsls	r3, r3, #5
 8002746:	401a      	ands	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4907      	ldr	r1, [pc, #28]	; (8002778 <HAL_SPI_Init+0x16c>)
 800275c:	400a      	ands	r2, r1
 800275e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	225d      	movs	r2, #93	; 0x5d
 800276a:	2101      	movs	r1, #1
 800276c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b004      	add	sp, #16
 8002776:	bd80      	pop	{r7, pc}
 8002778:	fffff7ff 	.word	0xfffff7ff

0800277c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	1dbb      	adds	r3, r7, #6
 800278a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800278c:	231f      	movs	r3, #31
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	225c      	movs	r2, #92	; 0x5c
 8002798:	5c9b      	ldrb	r3, [r3, r2]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_SPI_Transmit+0x26>
 800279e:	2302      	movs	r3, #2
 80027a0:	e147      	b.n	8002a32 <HAL_SPI_Transmit+0x2b6>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	225c      	movs	r2, #92	; 0x5c
 80027a6:	2101      	movs	r1, #1
 80027a8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027aa:	f7fe fd03 	bl	80011b4 <HAL_GetTick>
 80027ae:	0003      	movs	r3, r0
 80027b0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80027b2:	2316      	movs	r3, #22
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	1dba      	adds	r2, r7, #6
 80027b8:	8812      	ldrh	r2, [r2, #0]
 80027ba:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	225d      	movs	r2, #93	; 0x5d
 80027c0:	5c9b      	ldrb	r3, [r3, r2]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d004      	beq.n	80027d2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80027c8:	231f      	movs	r3, #31
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	2202      	movs	r2, #2
 80027ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80027d0:	e128      	b.n	8002a24 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_SPI_Transmit+0x64>
 80027d8:	1dbb      	adds	r3, r7, #6
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d104      	bne.n	80027ea <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80027e0:	231f      	movs	r3, #31
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80027e8:	e11c      	b.n	8002a24 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	225d      	movs	r2, #93	; 0x5d
 80027ee:	2103      	movs	r1, #3
 80027f0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1dba      	adds	r2, r7, #6
 8002802:	8812      	ldrh	r2, [r2, #0]
 8002804:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1dba      	adds	r2, r7, #6
 800280a:	8812      	ldrh	r2, [r2, #0]
 800280c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2244      	movs	r2, #68	; 0x44
 8002818:	2100      	movs	r1, #0
 800281a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2246      	movs	r2, #70	; 0x46
 8002820:	2100      	movs	r1, #0
 8002822:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	429a      	cmp	r2, r3
 800283a:	d110      	bne.n	800285e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2140      	movs	r1, #64	; 0x40
 8002848:	438a      	bics	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2180      	movs	r1, #128	; 0x80
 8002858:	01c9      	lsls	r1, r1, #7
 800285a:	430a      	orrs	r2, r1
 800285c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2240      	movs	r2, #64	; 0x40
 8002866:	4013      	ands	r3, r2
 8002868:	2b40      	cmp	r3, #64	; 0x40
 800286a:	d007      	beq.n	800287c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2140      	movs	r1, #64	; 0x40
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	23e0      	movs	r3, #224	; 0xe0
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	429a      	cmp	r2, r3
 8002886:	d952      	bls.n	800292e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <HAL_SPI_Transmit+0x11e>
 8002890:	2316      	movs	r3, #22
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d143      	bne.n	8002922 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	881a      	ldrh	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	1c9a      	adds	r2, r3, #2
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028be:	e030      	b.n	8002922 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2202      	movs	r2, #2
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d112      	bne.n	80028f4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	881a      	ldrh	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	1c9a      	adds	r2, r3, #2
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028f2:	e016      	b.n	8002922 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028f4:	f7fe fc5e 	bl	80011b4 <HAL_GetTick>
 80028f8:	0002      	movs	r2, r0
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d802      	bhi.n	800290a <HAL_SPI_Transmit+0x18e>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	d102      	bne.n	8002910 <HAL_SPI_Transmit+0x194>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d108      	bne.n	8002922 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002910:	231f      	movs	r3, #31
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	2203      	movs	r2, #3
 8002916:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	225d      	movs	r2, #93	; 0x5d
 800291c:	2101      	movs	r1, #1
 800291e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002920:	e080      	b.n	8002a24 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1c9      	bne.n	80028c0 <HAL_SPI_Transmit+0x144>
 800292c:	e053      	b.n	80029d6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <HAL_SPI_Transmit+0x1c4>
 8002936:	2316      	movs	r3, #22
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d145      	bne.n	80029cc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	7812      	ldrb	r2, [r2, #0]
 800294c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002966:	e031      	b.n	80029cc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2202      	movs	r2, #2
 8002970:	4013      	ands	r3, r2
 8002972:	2b02      	cmp	r3, #2
 8002974:	d113      	bne.n	800299e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	330c      	adds	r3, #12
 8002980:	7812      	ldrb	r2, [r2, #0]
 8002982:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800299c:	e016      	b.n	80029cc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800299e:	f7fe fc09 	bl	80011b4 <HAL_GetTick>
 80029a2:	0002      	movs	r2, r0
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d802      	bhi.n	80029b4 <HAL_SPI_Transmit+0x238>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	d102      	bne.n	80029ba <HAL_SPI_Transmit+0x23e>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d108      	bne.n	80029cc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80029ba:	231f      	movs	r3, #31
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	2203      	movs	r2, #3
 80029c0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	225d      	movs	r2, #93	; 0x5d
 80029c6:	2101      	movs	r1, #1
 80029c8:	5499      	strb	r1, [r3, r2]
          goto error;
 80029ca:	e02b      	b.n	8002a24 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1c8      	bne.n	8002968 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	6839      	ldr	r1, [r7, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	0018      	movs	r0, r3
 80029de:	f000 fcef 	bl	80033c0 <SPI_EndRxTxTransaction>
 80029e2:	1e03      	subs	r3, r0, #0
 80029e4:	d002      	beq.n	80029ec <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002a12:	231f      	movs	r3, #31
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e003      	b.n	8002a24 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	225d      	movs	r2, #93	; 0x5d
 8002a20:	2101      	movs	r1, #1
 8002a22:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	225c      	movs	r2, #92	; 0x5c
 8002a28:	2100      	movs	r1, #0
 8002a2a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a2c:	231f      	movs	r3, #31
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	781b      	ldrb	r3, [r3, #0]
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b008      	add	sp, #32
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	1dbb      	adds	r3, r7, #6
 8002a4a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a4c:	2117      	movs	r1, #23
 8002a4e:	187b      	adds	r3, r7, r1
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	225d      	movs	r2, #93	; 0x5d
 8002a58:	5c9b      	ldrb	r3, [r3, r2]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d003      	beq.n	8002a68 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	2202      	movs	r2, #2
 8002a64:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a66:	e12b      	b.n	8002cc0 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	2382      	movs	r3, #130	; 0x82
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d113      	bne.n	8002a9c <HAL_SPI_Receive+0x60>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10f      	bne.n	8002a9c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	225d      	movs	r2, #93	; 0x5d
 8002a80:	2104      	movs	r1, #4
 8002a82:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a84:	1dbb      	adds	r3, r7, #6
 8002a86:	881c      	ldrh	r4, [r3, #0]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	0023      	movs	r3, r4
 8002a94:	f000 f924 	bl	8002ce0 <HAL_SPI_TransmitReceive>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	e118      	b.n	8002cce <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	225c      	movs	r2, #92	; 0x5c
 8002aa0:	5c9b      	ldrb	r3, [r3, r2]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_SPI_Receive+0x6e>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e111      	b.n	8002cce <HAL_SPI_Receive+0x292>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	225c      	movs	r2, #92	; 0x5c
 8002aae:	2101      	movs	r1, #1
 8002ab0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ab2:	f7fe fb7f 	bl	80011b4 <HAL_GetTick>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_SPI_Receive+0x8c>
 8002ac0:	1dbb      	adds	r3, r7, #6
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d104      	bne.n	8002ad2 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002ac8:	2317      	movs	r3, #23
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ad0:	e0f6      	b.n	8002cc0 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	225d      	movs	r2, #93	; 0x5d
 8002ad6:	2104      	movs	r1, #4
 8002ad8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1dba      	adds	r2, r7, #6
 8002aea:	2144      	movs	r1, #68	; 0x44
 8002aec:	8812      	ldrh	r2, [r2, #0]
 8002aee:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1dba      	adds	r2, r7, #6
 8002af4:	2146      	movs	r1, #70	; 0x46
 8002af6:	8812      	ldrh	r2, [r2, #0]
 8002af8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	23e0      	movs	r3, #224	; 0xe0
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d908      	bls.n	8002b36 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	496a      	ldr	r1, [pc, #424]	; (8002cd8 <HAL_SPI_Receive+0x29c>)
 8002b30:	400a      	ands	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	e008      	b.n	8002b48 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	0149      	lsls	r1, r1, #5
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d10f      	bne.n	8002b74 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2140      	movs	r1, #64	; 0x40
 8002b60:	438a      	bics	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	495b      	ldr	r1, [pc, #364]	; (8002cdc <HAL_SPI_Receive+0x2a0>)
 8002b70:	400a      	ands	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2240      	movs	r2, #64	; 0x40
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d007      	beq.n	8002b92 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2140      	movs	r1, #64	; 0x40
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	23e0      	movs	r3, #224	; 0xe0
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d900      	bls.n	8002ba0 <HAL_SPI_Receive+0x164>
 8002b9e:	e071      	b.n	8002c84 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ba0:	e035      	b.n	8002c0e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d117      	bne.n	8002be0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	7812      	ldrb	r2, [r2, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2246      	movs	r2, #70	; 0x46
 8002bd0:	5a9b      	ldrh	r3, [r3, r2]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b299      	uxth	r1, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2246      	movs	r2, #70	; 0x46
 8002bdc:	5299      	strh	r1, [r3, r2]
 8002bde:	e016      	b.n	8002c0e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be0:	f7fe fae8 	bl	80011b4 <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d802      	bhi.n	8002bf6 <HAL_SPI_Receive+0x1ba>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_SPI_Receive+0x1c0>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d108      	bne.n	8002c0e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002bfc:	2317      	movs	r3, #23
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	2203      	movs	r2, #3
 8002c02:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	225d      	movs	r2, #93	; 0x5d
 8002c08:	2101      	movs	r1, #1
 8002c0a:	5499      	strb	r1, [r3, r2]
          goto error;
 8002c0c:	e058      	b.n	8002cc0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2246      	movs	r2, #70	; 0x46
 8002c12:	5a9b      	ldrh	r3, [r3, r2]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1c3      	bne.n	8002ba2 <HAL_SPI_Receive+0x166>
 8002c1a:	e039      	b.n	8002c90 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2201      	movs	r2, #1
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d115      	bne.n	8002c56 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	b292      	uxth	r2, r2
 8002c36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	1c9a      	adds	r2, r3, #2
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2246      	movs	r2, #70	; 0x46
 8002c46:	5a9b      	ldrh	r3, [r3, r2]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b299      	uxth	r1, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2246      	movs	r2, #70	; 0x46
 8002c52:	5299      	strh	r1, [r3, r2]
 8002c54:	e016      	b.n	8002c84 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c56:	f7fe faad 	bl	80011b4 <HAL_GetTick>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d802      	bhi.n	8002c6c <HAL_SPI_Receive+0x230>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	d102      	bne.n	8002c72 <HAL_SPI_Receive+0x236>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002c72:	2317      	movs	r3, #23
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	2203      	movs	r2, #3
 8002c78:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	225d      	movs	r2, #93	; 0x5d
 8002c7e:	2101      	movs	r1, #1
 8002c80:	5499      	strb	r1, [r3, r2]
          goto error;
 8002c82:	e01d      	b.n	8002cc0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2246      	movs	r2, #70	; 0x46
 8002c88:	5a9b      	ldrh	r3, [r3, r2]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1c5      	bne.n	8002c1c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	6839      	ldr	r1, [r7, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	0018      	movs	r0, r3
 8002c98:	f000 fb34 	bl	8003304 <SPI_EndRxTransaction>
 8002c9c:	1e03      	subs	r3, r0, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002cae:	2317      	movs	r3, #23
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e003      	b.n	8002cc0 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	225d      	movs	r2, #93	; 0x5d
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	225c      	movs	r2, #92	; 0x5c
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002cc8:	2317      	movs	r3, #23
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	781b      	ldrb	r3, [r3, #0]
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b007      	add	sp, #28
 8002cd4:	bd90      	pop	{r4, r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	ffffefff 	.word	0xffffefff
 8002cdc:	ffffbfff 	.word	0xffffbfff

08002ce0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	; 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	001a      	movs	r2, r3
 8002cee:	1cbb      	adds	r3, r7, #2
 8002cf0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cf6:	2323      	movs	r3, #35	; 0x23
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	225c      	movs	r2, #92	; 0x5c
 8002d02:	5c9b      	ldrb	r3, [r3, r2]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_SPI_TransmitReceive+0x2c>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e1c4      	b.n	8003096 <HAL_SPI_TransmitReceive+0x3b6>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	225c      	movs	r2, #92	; 0x5c
 8002d10:	2101      	movs	r1, #1
 8002d12:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d14:	f7fe fa4e 	bl	80011b4 <HAL_GetTick>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d1c:	201b      	movs	r0, #27
 8002d1e:	183b      	adds	r3, r7, r0
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	215d      	movs	r1, #93	; 0x5d
 8002d24:	5c52      	ldrb	r2, [r2, r1]
 8002d26:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d2e:	2312      	movs	r3, #18
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	1cba      	adds	r2, r7, #2
 8002d34:	8812      	ldrh	r2, [r2, #0]
 8002d36:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d38:	183b      	adds	r3, r7, r0
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d011      	beq.n	8002d64 <HAL_SPI_TransmitReceive+0x84>
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	2382      	movs	r3, #130	; 0x82
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d107      	bne.n	8002d5a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d103      	bne.n	8002d5a <HAL_SPI_TransmitReceive+0x7a>
 8002d52:	183b      	adds	r3, r7, r0
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d004      	beq.n	8002d64 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002d5a:	2323      	movs	r3, #35	; 0x23
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	2202      	movs	r2, #2
 8002d60:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d62:	e191      	b.n	8003088 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d006      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x98>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x98>
 8002d70:	1cbb      	adds	r3, r7, #2
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002d78:	2323      	movs	r3, #35	; 0x23
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d80:	e182      	b.n	8003088 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	225d      	movs	r2, #93	; 0x5d
 8002d86:	5c9b      	ldrb	r3, [r3, r2]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d003      	beq.n	8002d96 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	225d      	movs	r2, #93	; 0x5d
 8002d92:	2105      	movs	r1, #5
 8002d94:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1cba      	adds	r2, r7, #2
 8002da6:	2146      	movs	r1, #70	; 0x46
 8002da8:	8812      	ldrh	r2, [r2, #0]
 8002daa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1cba      	adds	r2, r7, #2
 8002db0:	2144      	movs	r1, #68	; 0x44
 8002db2:	8812      	ldrh	r2, [r2, #0]
 8002db4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1cba      	adds	r2, r7, #2
 8002dc0:	8812      	ldrh	r2, [r2, #0]
 8002dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1cba      	adds	r2, r7, #2
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	23e0      	movs	r3, #224	; 0xe0
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d908      	bls.n	8002df6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	49ac      	ldr	r1, [pc, #688]	; (80030a0 <HAL_SPI_TransmitReceive+0x3c0>)
 8002df0:	400a      	ands	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	e008      	b.n	8002e08 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2180      	movs	r1, #128	; 0x80
 8002e02:	0149      	lsls	r1, r1, #5
 8002e04:	430a      	orrs	r2, r1
 8002e06:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2240      	movs	r2, #64	; 0x40
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d007      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2140      	movs	r1, #64	; 0x40
 8002e22:	430a      	orrs	r2, r1
 8002e24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	23e0      	movs	r3, #224	; 0xe0
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d800      	bhi.n	8002e34 <HAL_SPI_TransmitReceive+0x154>
 8002e32:	e083      	b.n	8002f3c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_SPI_TransmitReceive+0x168>
 8002e3c:	2312      	movs	r3, #18
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d000      	beq.n	8002e48 <HAL_SPI_TransmitReceive+0x168>
 8002e46:	e06d      	b.n	8002f24 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	881a      	ldrh	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	1c9a      	adds	r2, r3, #2
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e6c:	e05a      	b.n	8002f24 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2202      	movs	r2, #2
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_SPI_TransmitReceive+0x1d4>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d016      	beq.n	8002eb4 <HAL_SPI_TransmitReceive+0x1d4>
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d113      	bne.n	8002eb4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	881a      	ldrh	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	1c9a      	adds	r2, r3, #2
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d11c      	bne.n	8002efc <HAL_SPI_TransmitReceive+0x21c>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2246      	movs	r2, #70	; 0x46
 8002ec6:	5a9b      	ldrh	r3, [r3, r2]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d016      	beq.n	8002efc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	b292      	uxth	r2, r2
 8002eda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	1c9a      	adds	r2, r3, #2
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2246      	movs	r2, #70	; 0x46
 8002eea:	5a9b      	ldrh	r3, [r3, r2]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b299      	uxth	r1, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2246      	movs	r2, #70	; 0x46
 8002ef6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002efc:	f7fe f95a 	bl	80011b4 <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d80b      	bhi.n	8002f24 <HAL_SPI_TransmitReceive+0x244>
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	3301      	adds	r3, #1
 8002f10:	d008      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002f12:	2323      	movs	r3, #35	; 0x23
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	2203      	movs	r2, #3
 8002f18:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	225d      	movs	r2, #93	; 0x5d
 8002f1e:	2101      	movs	r1, #1
 8002f20:	5499      	strb	r1, [r3, r2]
        goto error;
 8002f22:	e0b1      	b.n	8003088 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d19f      	bne.n	8002e6e <HAL_SPI_TransmitReceive+0x18e>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2246      	movs	r2, #70	; 0x46
 8002f32:	5a9b      	ldrh	r3, [r3, r2]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d199      	bne.n	8002e6e <HAL_SPI_TransmitReceive+0x18e>
 8002f3a:	e089      	b.n	8003050 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x270>
 8002f44:	2312      	movs	r3, #18
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d000      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x270>
 8002f4e:	e074      	b.n	800303a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	7812      	ldrb	r2, [r2, #0]
 8002f5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f76:	e060      	b.n	800303a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d11c      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x2e0>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d017      	beq.n	8002fc0 <HAL_SPI_TransmitReceive+0x2e0>
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d114      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	330c      	adds	r3, #12
 8002fa0:	7812      	ldrb	r2, [r2, #0]
 8002fa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d11e      	bne.n	800300c <HAL_SPI_TransmitReceive+0x32c>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2246      	movs	r2, #70	; 0x46
 8002fd2:	5a9b      	ldrh	r3, [r3, r2]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d018      	beq.n	800300c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	330c      	adds	r3, #12
 8002fe0:	001a      	movs	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2246      	movs	r2, #70	; 0x46
 8002ffa:	5a9b      	ldrh	r3, [r3, r2]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b299      	uxth	r1, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2246      	movs	r2, #70	; 0x46
 8003006:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003008:	2301      	movs	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800300c:	f7fe f8d2 	bl	80011b4 <HAL_GetTick>
 8003010:	0002      	movs	r2, r0
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003018:	429a      	cmp	r2, r3
 800301a:	d802      	bhi.n	8003022 <HAL_SPI_TransmitReceive+0x342>
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	3301      	adds	r3, #1
 8003020:	d102      	bne.n	8003028 <HAL_SPI_TransmitReceive+0x348>
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	2b00      	cmp	r3, #0
 8003026:	d108      	bne.n	800303a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003028:	2323      	movs	r3, #35	; 0x23
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2203      	movs	r2, #3
 800302e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	225d      	movs	r2, #93	; 0x5d
 8003034:	2101      	movs	r1, #1
 8003036:	5499      	strb	r1, [r3, r2]
        goto error;
 8003038:	e026      	b.n	8003088 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d199      	bne.n	8002f78 <HAL_SPI_TransmitReceive+0x298>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2246      	movs	r2, #70	; 0x46
 8003048:	5a9b      	ldrh	r3, [r3, r2]
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d193      	bne.n	8002f78 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	0018      	movs	r0, r3
 8003058:	f000 f9b2 	bl	80033c0 <SPI_EndRxTxTransaction>
 800305c:	1e03      	subs	r3, r0, #0
 800305e:	d006      	beq.n	800306e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003060:	2323      	movs	r3, #35	; 0x23
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003072:	2b00      	cmp	r3, #0
 8003074:	d004      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003076:	2323      	movs	r3, #35	; 0x23
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e003      	b.n	8003088 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	225d      	movs	r2, #93	; 0x5d
 8003084:	2101      	movs	r1, #1
 8003086:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	225c      	movs	r2, #92	; 0x5c
 800308c:	2100      	movs	r1, #0
 800308e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003090:	2323      	movs	r3, #35	; 0x23
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	781b      	ldrb	r3, [r3, #0]
}
 8003096:	0018      	movs	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	b00a      	add	sp, #40	; 0x28
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	ffffefff 	.word	0xffffefff

080030a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	1dfb      	adds	r3, r7, #7
 80030b2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030b4:	f7fe f87e 	bl	80011b4 <HAL_GetTick>
 80030b8:	0002      	movs	r2, r0
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	18d3      	adds	r3, r2, r3
 80030c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030c4:	f7fe f876 	bl	80011b4 <HAL_GetTick>
 80030c8:	0003      	movs	r3, r0
 80030ca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030cc:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	015b      	lsls	r3, r3, #5
 80030d2:	0d1b      	lsrs	r3, r3, #20
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	4353      	muls	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030da:	e058      	b.n	800318e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	3301      	adds	r3, #1
 80030e0:	d055      	beq.n	800318e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030e2:	f7fe f867 	bl	80011b4 <HAL_GetTick>
 80030e6:	0002      	movs	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d142      	bne.n	800317e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	21e0      	movs	r1, #224	; 0xe0
 8003104:	438a      	bics	r2, r1
 8003106:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	2382      	movs	r3, #130	; 0x82
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	429a      	cmp	r2, r3
 8003112:	d113      	bne.n	800313c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	429a      	cmp	r2, r3
 800311e:	d005      	beq.n	800312c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	429a      	cmp	r2, r3
 800312a:	d107      	bne.n	800313c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2140      	movs	r1, #64	; 0x40
 8003138:	438a      	bics	r2, r1
 800313a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	019b      	lsls	r3, r3, #6
 8003144:	429a      	cmp	r2, r3
 8003146:	d110      	bne.n	800316a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	491a      	ldr	r1, [pc, #104]	; (80031bc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003154:	400a      	ands	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	0189      	lsls	r1, r1, #6
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	225d      	movs	r2, #93	; 0x5d
 800316e:	2101      	movs	r1, #1
 8003170:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	225c      	movs	r2, #92	; 0x5c
 8003176:	2100      	movs	r1, #0
 8003178:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e017      	b.n	80031ae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	3b01      	subs	r3, #1
 800318c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	4013      	ands	r3, r2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	425a      	negs	r2, r3
 800319e:	4153      	adcs	r3, r2
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	001a      	movs	r2, r3
 80031a4:	1dfb      	adds	r3, r7, #7
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d197      	bne.n	80030dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	0018      	movs	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b008      	add	sp, #32
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	20000008 	.word	0x20000008
 80031bc:	ffffdfff 	.word	0xffffdfff

080031c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	; 0x28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80031ce:	2317      	movs	r3, #23
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031d6:	f7fd ffed 	bl	80011b4 <HAL_GetTick>
 80031da:	0002      	movs	r2, r0
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	18d3      	adds	r3, r2, r3
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80031e6:	f7fd ffe5 	bl	80011b4 <HAL_GetTick>
 80031ea:	0003      	movs	r3, r0
 80031ec:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	330c      	adds	r3, #12
 80031f4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031f6:	4b41      	ldr	r3, [pc, #260]	; (80032fc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	0013      	movs	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	189b      	adds	r3, r3, r2
 8003200:	00da      	lsls	r2, r3, #3
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	0d1b      	lsrs	r3, r3, #20
 8003206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003208:	4353      	muls	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800320c:	e068      	b.n	80032e0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	23c0      	movs	r3, #192	; 0xc0
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	429a      	cmp	r2, r3
 8003216:	d10a      	bne.n	800322e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d107      	bne.n	800322e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	2117      	movs	r1, #23
 8003226:	187b      	adds	r3, r7, r1
 8003228:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800322a:	187b      	adds	r3, r7, r1
 800322c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	d055      	beq.n	80032e0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003234:	f7fd ffbe 	bl	80011b4 <HAL_GetTick>
 8003238:	0002      	movs	r2, r0
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003240:	429a      	cmp	r2, r3
 8003242:	d902      	bls.n	800324a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	2b00      	cmp	r3, #0
 8003248:	d142      	bne.n	80032d0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	21e0      	movs	r1, #224	; 0xe0
 8003256:	438a      	bics	r2, r1
 8003258:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	2382      	movs	r3, #130	; 0x82
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	429a      	cmp	r2, r3
 8003264:	d113      	bne.n	800328e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	429a      	cmp	r2, r3
 8003270:	d005      	beq.n	800327e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	429a      	cmp	r2, r3
 800327c:	d107      	bne.n	800328e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2140      	movs	r1, #64	; 0x40
 800328a:	438a      	bics	r2, r1
 800328c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	019b      	lsls	r3, r3, #6
 8003296:	429a      	cmp	r2, r3
 8003298:	d110      	bne.n	80032bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4916      	ldr	r1, [pc, #88]	; (8003300 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80032a6:	400a      	ands	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2180      	movs	r1, #128	; 0x80
 80032b6:	0189      	lsls	r1, r1, #6
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	225d      	movs	r2, #93	; 0x5d
 80032c0:	2101      	movs	r1, #1
 80032c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	225c      	movs	r2, #92	; 0x5c
 80032c8:	2100      	movs	r1, #0
 80032ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e010      	b.n	80032f2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	3b01      	subs	r3, #1
 80032de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	4013      	ands	r3, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d18e      	bne.n	800320e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b00a      	add	sp, #40	; 0x28
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	20000008 	.word	0x20000008
 8003300:	ffffdfff 	.word	0xffffdfff

08003304 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	2382      	movs	r3, #130	; 0x82
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	429a      	cmp	r2, r3
 800331a:	d113      	bne.n	8003344 <SPI_EndRxTransaction+0x40>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	429a      	cmp	r2, r3
 8003326:	d005      	beq.n	8003334 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	429a      	cmp	r2, r3
 8003332:	d107      	bne.n	8003344 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2140      	movs	r1, #64	; 0x40
 8003340:	438a      	bics	r2, r1
 8003342:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	0013      	movs	r3, r2
 800334e:	2200      	movs	r2, #0
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	f7ff fea7 	bl	80030a4 <SPI_WaitFlagStateUntilTimeout>
 8003356:	1e03      	subs	r3, r0, #0
 8003358:	d007      	beq.n	800336a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335e:	2220      	movs	r2, #32
 8003360:	431a      	orrs	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e026      	b.n	80033b8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	2382      	movs	r3, #130	; 0x82
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	429a      	cmp	r2, r3
 8003374:	d11f      	bne.n	80033b6 <SPI_EndRxTransaction+0xb2>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	429a      	cmp	r2, r3
 8003380:	d005      	beq.n	800338e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	429a      	cmp	r2, r3
 800338c:	d113      	bne.n	80033b6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	23c0      	movs	r3, #192	; 0xc0
 8003392:	00d9      	lsls	r1, r3, #3
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	0013      	movs	r3, r2
 800339c:	2200      	movs	r2, #0
 800339e:	f7ff ff0f 	bl	80031c0 <SPI_WaitFifoStateUntilTimeout>
 80033a2:	1e03      	subs	r3, r0, #0
 80033a4:	d007      	beq.n	80033b6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033aa:	2220      	movs	r2, #32
 80033ac:	431a      	orrs	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e000      	b.n	80033b8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b004      	add	sp, #16
 80033be:	bd80      	pop	{r7, pc}

080033c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	23c0      	movs	r3, #192	; 0xc0
 80033d0:	0159      	lsls	r1, r3, #5
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	0013      	movs	r3, r2
 80033da:	2200      	movs	r2, #0
 80033dc:	f7ff fef0 	bl	80031c0 <SPI_WaitFifoStateUntilTimeout>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d007      	beq.n	80033f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e8:	2220      	movs	r2, #32
 80033ea:	431a      	orrs	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e027      	b.n	8003444 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	0013      	movs	r3, r2
 80033fe:	2200      	movs	r2, #0
 8003400:	2180      	movs	r1, #128	; 0x80
 8003402:	f7ff fe4f 	bl	80030a4 <SPI_WaitFlagStateUntilTimeout>
 8003406:	1e03      	subs	r3, r0, #0
 8003408:	d007      	beq.n	800341a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340e:	2220      	movs	r2, #32
 8003410:	431a      	orrs	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e014      	b.n	8003444 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	23c0      	movs	r3, #192	; 0xc0
 800341e:	00d9      	lsls	r1, r3, #3
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	0013      	movs	r3, r2
 8003428:	2200      	movs	r2, #0
 800342a:	f7ff fec9 	bl	80031c0 <SPI_WaitFifoStateUntilTimeout>
 800342e:	1e03      	subs	r3, r0, #0
 8003430:	d007      	beq.n	8003442 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003436:	2220      	movs	r2, #32
 8003438:	431a      	orrs	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e000      	b.n	8003444 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b004      	add	sp, #16
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e04a      	b.n	80034f4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	223d      	movs	r2, #61	; 0x3d
 8003462:	5c9b      	ldrb	r3, [r3, r2]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d107      	bne.n	800347a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	223c      	movs	r2, #60	; 0x3c
 800346e:	2100      	movs	r1, #0
 8003470:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	0018      	movs	r0, r3
 8003476:	f7fd fcd3 	bl	8000e20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	223d      	movs	r2, #61	; 0x3d
 800347e:	2102      	movs	r1, #2
 8003480:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	0019      	movs	r1, r3
 800348c:	0010      	movs	r0, r2
 800348e:	f000 f935 	bl	80036fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2248      	movs	r2, #72	; 0x48
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	223e      	movs	r2, #62	; 0x3e
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	223f      	movs	r2, #63	; 0x3f
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2240      	movs	r2, #64	; 0x40
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2241      	movs	r2, #65	; 0x41
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2242      	movs	r2, #66	; 0x42
 80034be:	2101      	movs	r1, #1
 80034c0:	5499      	strb	r1, [r3, r2]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2243      	movs	r2, #67	; 0x43
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2244      	movs	r2, #68	; 0x44
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2245      	movs	r2, #69	; 0x45
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2246      	movs	r2, #70	; 0x46
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2247      	movs	r2, #71	; 0x47
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	223d      	movs	r2, #61	; 0x3d
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b002      	add	sp, #8
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003508:	2317      	movs	r3, #23
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	223c      	movs	r2, #60	; 0x3c
 8003514:	5c9b      	ldrb	r3, [r3, r2]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_TIM_PWM_ConfigChannel+0x22>
 800351a:	2302      	movs	r3, #2
 800351c:	e0e5      	b.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	223c      	movs	r2, #60	; 0x3c
 8003522:	2101      	movs	r1, #1
 8003524:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b14      	cmp	r3, #20
 800352a:	d900      	bls.n	800352e <HAL_TIM_PWM_ConfigChannel+0x32>
 800352c:	e0d1      	b.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	009a      	lsls	r2, r3, #2
 8003532:	4b70      	ldr	r3, [pc, #448]	; (80036f4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003534:	18d3      	adds	r3, r2, r3
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	0011      	movs	r1, r2
 8003542:	0018      	movs	r0, r3
 8003544:	f000 f95e 	bl	8003804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2108      	movs	r1, #8
 8003554:	430a      	orrs	r2, r1
 8003556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2104      	movs	r1, #4
 8003564:	438a      	bics	r2, r1
 8003566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6999      	ldr	r1, [r3, #24]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	619a      	str	r2, [r3, #24]
      break;
 800357a:	e0af      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	0011      	movs	r1, r2
 8003584:	0018      	movs	r0, r3
 8003586:	f000 f9bd 	bl	8003904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2180      	movs	r1, #128	; 0x80
 8003596:	0109      	lsls	r1, r1, #4
 8003598:	430a      	orrs	r2, r1
 800359a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4954      	ldr	r1, [pc, #336]	; (80036f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6999      	ldr	r1, [r3, #24]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	021a      	lsls	r2, r3, #8
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	619a      	str	r2, [r3, #24]
      break;
 80035c0:	e08c      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	0011      	movs	r1, r2
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 fa18 	bl	8003a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2108      	movs	r1, #8
 80035dc:	430a      	orrs	r2, r1
 80035de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2104      	movs	r1, #4
 80035ec:	438a      	bics	r2, r1
 80035ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69d9      	ldr	r1, [r3, #28]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	61da      	str	r2, [r3, #28]
      break;
 8003602:	e06b      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	0011      	movs	r1, r2
 800360c:	0018      	movs	r0, r3
 800360e:	f000 fa79 	bl	8003b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	0109      	lsls	r1, r1, #4
 8003620:	430a      	orrs	r2, r1
 8003622:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4932      	ldr	r1, [pc, #200]	; (80036f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003630:	400a      	ands	r2, r1
 8003632:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69d9      	ldr	r1, [r3, #28]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	021a      	lsls	r2, r3, #8
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	61da      	str	r2, [r3, #28]
      break;
 8003648:	e048      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	0011      	movs	r1, r2
 8003652:	0018      	movs	r0, r3
 8003654:	f000 faba 	bl	8003bcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2108      	movs	r1, #8
 8003664:	430a      	orrs	r2, r1
 8003666:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2104      	movs	r1, #4
 8003674:	438a      	bics	r2, r1
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800368a:	e027      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	0011      	movs	r1, r2
 8003694:	0018      	movs	r0, r3
 8003696:	f000 faf3 	bl	8003c80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2180      	movs	r1, #128	; 0x80
 80036a6:	0109      	lsls	r1, r1, #4
 80036a8:	430a      	orrs	r2, r1
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4910      	ldr	r1, [pc, #64]	; (80036f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80036b8:	400a      	ands	r2, r1
 80036ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	021a      	lsls	r2, r3, #8
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036d0:	e004      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80036d2:	2317      	movs	r3, #23
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
      break;
 80036da:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	223c      	movs	r2, #60	; 0x3c
 80036e0:	2100      	movs	r1, #0
 80036e2:	5499      	strb	r1, [r3, r2]

  return status;
 80036e4:	2317      	movs	r3, #23
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	781b      	ldrb	r3, [r3, #0]
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b006      	add	sp, #24
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	08005584 	.word	0x08005584
 80036f8:	fffffbff 	.word	0xfffffbff

080036fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a37      	ldr	r2, [pc, #220]	; (80037ec <TIM_Base_SetConfig+0xf0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d008      	beq.n	8003726 <TIM_Base_SetConfig+0x2a>
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	05db      	lsls	r3, r3, #23
 800371a:	429a      	cmp	r2, r3
 800371c:	d003      	beq.n	8003726 <TIM_Base_SetConfig+0x2a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a33      	ldr	r2, [pc, #204]	; (80037f0 <TIM_Base_SetConfig+0xf4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d108      	bne.n	8003738 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2270      	movs	r2, #112	; 0x70
 800372a:	4393      	bics	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a2c      	ldr	r2, [pc, #176]	; (80037ec <TIM_Base_SetConfig+0xf0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d014      	beq.n	800376a <TIM_Base_SetConfig+0x6e>
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	05db      	lsls	r3, r3, #23
 8003746:	429a      	cmp	r2, r3
 8003748:	d00f      	beq.n	800376a <TIM_Base_SetConfig+0x6e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a28      	ldr	r2, [pc, #160]	; (80037f0 <TIM_Base_SetConfig+0xf4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00b      	beq.n	800376a <TIM_Base_SetConfig+0x6e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a27      	ldr	r2, [pc, #156]	; (80037f4 <TIM_Base_SetConfig+0xf8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d007      	beq.n	800376a <TIM_Base_SetConfig+0x6e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a26      	ldr	r2, [pc, #152]	; (80037f8 <TIM_Base_SetConfig+0xfc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d003      	beq.n	800376a <TIM_Base_SetConfig+0x6e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a25      	ldr	r2, [pc, #148]	; (80037fc <TIM_Base_SetConfig+0x100>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d108      	bne.n	800377c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a24      	ldr	r2, [pc, #144]	; (8003800 <TIM_Base_SetConfig+0x104>)
 800376e:	4013      	ands	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	4393      	bics	r3, r2
 8003782:	001a      	movs	r2, r3
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a11      	ldr	r2, [pc, #68]	; (80037ec <TIM_Base_SetConfig+0xf0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d007      	beq.n	80037ba <TIM_Base_SetConfig+0xbe>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <TIM_Base_SetConfig+0xfc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d003      	beq.n	80037ba <TIM_Base_SetConfig+0xbe>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a11      	ldr	r2, [pc, #68]	; (80037fc <TIM_Base_SetConfig+0x100>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d103      	bne.n	80037c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2201      	movs	r2, #1
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d106      	bne.n	80037e2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2201      	movs	r2, #1
 80037da:	4393      	bics	r3, r2
 80037dc:	001a      	movs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	611a      	str	r2, [r3, #16]
  }
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b004      	add	sp, #16
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40002000 	.word	0x40002000
 80037f8:	40014400 	.word	0x40014400
 80037fc:	40014800 	.word	0x40014800
 8003800:	fffffcff 	.word	0xfffffcff

08003804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	2201      	movs	r2, #1
 800381a:	4393      	bics	r3, r2
 800381c:	001a      	movs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a2e      	ldr	r2, [pc, #184]	; (80038ec <TIM_OC1_SetConfig+0xe8>)
 8003832:	4013      	ands	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2203      	movs	r2, #3
 800383a:	4393      	bics	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2202      	movs	r2, #2
 800384c:	4393      	bics	r3, r2
 800384e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a24      	ldr	r2, [pc, #144]	; (80038f0 <TIM_OC1_SetConfig+0xec>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d007      	beq.n	8003872 <TIM_OC1_SetConfig+0x6e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a23      	ldr	r2, [pc, #140]	; (80038f4 <TIM_OC1_SetConfig+0xf0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d003      	beq.n	8003872 <TIM_OC1_SetConfig+0x6e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a22      	ldr	r2, [pc, #136]	; (80038f8 <TIM_OC1_SetConfig+0xf4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d10c      	bne.n	800388c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2208      	movs	r2, #8
 8003876:	4393      	bics	r3, r2
 8003878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2204      	movs	r2, #4
 8003888:	4393      	bics	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <TIM_OC1_SetConfig+0xec>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d007      	beq.n	80038a4 <TIM_OC1_SetConfig+0xa0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <TIM_OC1_SetConfig+0xf0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_OC1_SetConfig+0xa0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <TIM_OC1_SetConfig+0xf4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d111      	bne.n	80038c8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4a15      	ldr	r2, [pc, #84]	; (80038fc <TIM_OC1_SetConfig+0xf8>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4a14      	ldr	r2, [pc, #80]	; (8003900 <TIM_OC1_SetConfig+0xfc>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	621a      	str	r2, [r3, #32]
}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b006      	add	sp, #24
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	fffeff8f 	.word	0xfffeff8f
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	40014400 	.word	0x40014400
 80038f8:	40014800 	.word	0x40014800
 80038fc:	fffffeff 	.word	0xfffffeff
 8003900:	fffffdff 	.word	0xfffffdff

08003904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	2210      	movs	r2, #16
 800391a:	4393      	bics	r3, r2
 800391c:	001a      	movs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4a2c      	ldr	r2, [pc, #176]	; (80039e4 <TIM_OC2_SetConfig+0xe0>)
 8003932:	4013      	ands	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4a2b      	ldr	r2, [pc, #172]	; (80039e8 <TIM_OC2_SetConfig+0xe4>)
 800393a:	4013      	ands	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2220      	movs	r2, #32
 800394e:	4393      	bics	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a22      	ldr	r2, [pc, #136]	; (80039ec <TIM_OC2_SetConfig+0xe8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d10d      	bne.n	8003982 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2280      	movs	r2, #128	; 0x80
 800396a:	4393      	bics	r3, r2
 800396c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2240      	movs	r2, #64	; 0x40
 800397e:	4393      	bics	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a19      	ldr	r2, [pc, #100]	; (80039ec <TIM_OC2_SetConfig+0xe8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d007      	beq.n	800399a <TIM_OC2_SetConfig+0x96>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a18      	ldr	r2, [pc, #96]	; (80039f0 <TIM_OC2_SetConfig+0xec>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_OC2_SetConfig+0x96>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a17      	ldr	r2, [pc, #92]	; (80039f4 <TIM_OC2_SetConfig+0xf0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d113      	bne.n	80039c2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <TIM_OC2_SetConfig+0xf4>)
 800399e:	4013      	ands	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4a15      	ldr	r2, [pc, #84]	; (80039fc <TIM_OC2_SetConfig+0xf8>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	621a      	str	r2, [r3, #32]
}
 80039dc:	46c0      	nop			; (mov r8, r8)
 80039de:	46bd      	mov	sp, r7
 80039e0:	b006      	add	sp, #24
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	feff8fff 	.word	0xfeff8fff
 80039e8:	fffffcff 	.word	0xfffffcff
 80039ec:	40012c00 	.word	0x40012c00
 80039f0:	40014400 	.word	0x40014400
 80039f4:	40014800 	.word	0x40014800
 80039f8:	fffffbff 	.word	0xfffffbff
 80039fc:	fffff7ff 	.word	0xfffff7ff

08003a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	4a31      	ldr	r2, [pc, #196]	; (8003adc <TIM_OC3_SetConfig+0xdc>)
 8003a16:	401a      	ands	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a2d      	ldr	r2, [pc, #180]	; (8003ae0 <TIM_OC3_SetConfig+0xe0>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2203      	movs	r2, #3
 8003a34:	4393      	bics	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	4a27      	ldr	r2, [pc, #156]	; (8003ae4 <TIM_OC3_SetConfig+0xe4>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a23      	ldr	r2, [pc, #140]	; (8003ae8 <TIM_OC3_SetConfig+0xe8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d10d      	bne.n	8003a7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	4a22      	ldr	r2, [pc, #136]	; (8003aec <TIM_OC3_SetConfig+0xec>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <TIM_OC3_SetConfig+0xf0>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ae8 <TIM_OC3_SetConfig+0xe8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_OC3_SetConfig+0x92>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <TIM_OC3_SetConfig+0xf4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_OC3_SetConfig+0x92>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1a      	ldr	r2, [pc, #104]	; (8003af8 <TIM_OC3_SetConfig+0xf8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d113      	bne.n	8003aba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4a19      	ldr	r2, [pc, #100]	; (8003afc <TIM_OC3_SetConfig+0xfc>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4a18      	ldr	r2, [pc, #96]	; (8003b00 <TIM_OC3_SetConfig+0x100>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	621a      	str	r2, [r3, #32]
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b006      	add	sp, #24
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	fffffeff 	.word	0xfffffeff
 8003ae0:	fffeff8f 	.word	0xfffeff8f
 8003ae4:	fffffdff 	.word	0xfffffdff
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	fffff7ff 	.word	0xfffff7ff
 8003af0:	fffffbff 	.word	0xfffffbff
 8003af4:	40014400 	.word	0x40014400
 8003af8:	40014800 	.word	0x40014800
 8003afc:	ffffefff 	.word	0xffffefff
 8003b00:	ffffdfff 	.word	0xffffdfff

08003b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4a24      	ldr	r2, [pc, #144]	; (8003bac <TIM_OC4_SetConfig+0xa8>)
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <TIM_OC4_SetConfig+0xac>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <TIM_OC4_SetConfig+0xb0>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4a1b      	ldr	r2, [pc, #108]	; (8003bb8 <TIM_OC4_SetConfig+0xb4>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	031b      	lsls	r3, r3, #12
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <TIM_OC4_SetConfig+0xb8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d007      	beq.n	8003b74 <TIM_OC4_SetConfig+0x70>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a16      	ldr	r2, [pc, #88]	; (8003bc0 <TIM_OC4_SetConfig+0xbc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_OC4_SetConfig+0x70>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a15      	ldr	r2, [pc, #84]	; (8003bc4 <TIM_OC4_SetConfig+0xc0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d109      	bne.n	8003b88 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	4a14      	ldr	r2, [pc, #80]	; (8003bc8 <TIM_OC4_SetConfig+0xc4>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	019b      	lsls	r3, r3, #6
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b006      	add	sp, #24
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	ffffefff 	.word	0xffffefff
 8003bb0:	feff8fff 	.word	0xfeff8fff
 8003bb4:	fffffcff 	.word	0xfffffcff
 8003bb8:	ffffdfff 	.word	0xffffdfff
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800
 8003bc8:	ffffbfff 	.word	0xffffbfff

08003bcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <TIM_OC5_SetConfig+0x9c>)
 8003be2:	401a      	ands	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <TIM_OC5_SetConfig+0xa0>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <TIM_OC5_SetConfig+0xa4>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <TIM_OC5_SetConfig+0xa8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d007      	beq.n	8003c32 <TIM_OC5_SetConfig+0x66>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <TIM_OC5_SetConfig+0xac>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d003      	beq.n	8003c32 <TIM_OC5_SetConfig+0x66>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <TIM_OC5_SetConfig+0xb0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d109      	bne.n	8003c46 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <TIM_OC5_SetConfig+0x9c>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	621a      	str	r2, [r3, #32]
}
 8003c60:	46c0      	nop			; (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b006      	add	sp, #24
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	fffeffff 	.word	0xfffeffff
 8003c6c:	fffeff8f 	.word	0xfffeff8f
 8003c70:	fffdffff 	.word	0xfffdffff
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40014400 	.word	0x40014400
 8003c7c:	40014800 	.word	0x40014800

08003c80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <TIM_OC6_SetConfig+0xa0>)
 8003c96:	401a      	ands	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a1e      	ldr	r2, [pc, #120]	; (8003d24 <TIM_OC6_SetConfig+0xa4>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4a1a      	ldr	r2, [pc, #104]	; (8003d28 <TIM_OC6_SetConfig+0xa8>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	051b      	lsls	r3, r3, #20
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a16      	ldr	r2, [pc, #88]	; (8003d2c <TIM_OC6_SetConfig+0xac>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d007      	beq.n	8003ce8 <TIM_OC6_SetConfig+0x68>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <TIM_OC6_SetConfig+0xb0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC6_SetConfig+0x68>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <TIM_OC6_SetConfig+0xb4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d109      	bne.n	8003cfc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <TIM_OC6_SetConfig+0xb8>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	029b      	lsls	r3, r3, #10
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b006      	add	sp, #24
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	ffefffff 	.word	0xffefffff
 8003d24:	feff8fff 	.word	0xfeff8fff
 8003d28:	ffdfffff 	.word	0xffdfffff
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40014800 	.word	0x40014800
 8003d38:	fffbffff 	.word	0xfffbffff

08003d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	223c      	movs	r2, #60	; 0x3c
 8003d4a:	5c9b      	ldrb	r3, [r3, r2]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e050      	b.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	223c      	movs	r2, #60	; 0x3c
 8003d58:	2101      	movs	r1, #1
 8003d5a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	223d      	movs	r2, #61	; 0x3d
 8003d60:	2102      	movs	r1, #2
 8003d62:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d108      	bne.n	8003d90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4a20      	ldr	r2, [pc, #128]	; (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2270      	movs	r2, #112	; 0x70
 8003d94:	4393      	bics	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00a      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	05db      	lsls	r3, r3, #23
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d004      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a10      	ldr	r2, [pc, #64]	; (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d10c      	bne.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2280      	movs	r2, #128	; 0x80
 8003dce:	4393      	bics	r3, r2
 8003dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	223d      	movs	r2, #61	; 0x3d
 8003de8:	2101      	movs	r1, #1
 8003dea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	223c      	movs	r2, #60	; 0x3c
 8003df0:	2100      	movs	r1, #0
 8003df2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	0018      	movs	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b004      	add	sp, #16
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	ff0fffff 	.word	0xff0fffff
 8003e08:	40000400 	.word	0x40000400

08003e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	223c      	movs	r2, #60	; 0x3c
 8003e1e:	5c9b      	ldrb	r3, [r3, r2]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e06f      	b.n	8003f08 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	223c      	movs	r2, #60	; 0x3c
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	22ff      	movs	r2, #255	; 0xff
 8003e34:	4393      	bics	r3, r2
 8003e36:	001a      	movs	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a33      	ldr	r2, [pc, #204]	; (8003f10 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003e44:	401a      	ands	r2, r3
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4a30      	ldr	r2, [pc, #192]	; (8003f14 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003e52:	401a      	ands	r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a2e      	ldr	r2, [pc, #184]	; (8003f18 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003e60:	401a      	ands	r2, r3
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4a2b      	ldr	r2, [pc, #172]	; (8003f1c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003e6e:	401a      	ands	r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a29      	ldr	r2, [pc, #164]	; (8003f20 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003e7c:	401a      	ands	r2, r3
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4a26      	ldr	r2, [pc, #152]	; (8003f24 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a24      	ldr	r2, [pc, #144]	; (8003f28 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003e98:	401a      	ands	r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a21      	ldr	r2, [pc, #132]	; (8003f2c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003ea8:	401a      	ands	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d11c      	bne.n	8003ef6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	051b      	lsls	r3, r3, #20
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a1a      	ldr	r2, [pc, #104]	; (8003f38 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003ed0:	401a      	ands	r2, r3
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4a17      	ldr	r2, [pc, #92]	; (8003f3c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003ede:	401a      	ands	r2, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003eec:	401a      	ands	r2, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	223c      	movs	r2, #60	; 0x3c
 8003f02:	2100      	movs	r1, #0
 8003f04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	0018      	movs	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b004      	add	sp, #16
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	fffffcff 	.word	0xfffffcff
 8003f14:	fffffbff 	.word	0xfffffbff
 8003f18:	fffff7ff 	.word	0xfffff7ff
 8003f1c:	ffffefff 	.word	0xffffefff
 8003f20:	ffffdfff 	.word	0xffffdfff
 8003f24:	ffffbfff 	.word	0xffffbfff
 8003f28:	fff0ffff 	.word	0xfff0ffff
 8003f2c:	efffffff 	.word	0xefffffff
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	ff0fffff 	.word	0xff0fffff
 8003f38:	feffffff 	.word	0xfeffffff
 8003f3c:	fdffffff 	.word	0xfdffffff
 8003f40:	dfffffff 	.word	0xdfffffff

08003f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e046      	b.n	8003fe4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2288      	movs	r2, #136	; 0x88
 8003f5a:	589b      	ldr	r3, [r3, r2]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d107      	bne.n	8003f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2284      	movs	r2, #132	; 0x84
 8003f64:	2100      	movs	r1, #0
 8003f66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7fd f81a 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2288      	movs	r2, #136	; 0x88
 8003f74:	2124      	movs	r1, #36	; 0x24
 8003f76:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2101      	movs	r1, #1
 8003f84:	438a      	bics	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 fc2e 	bl	80047f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f000 f9b2 	bl	8004304 <UART_SetConfig>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e01c      	b.n	8003fe4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	490d      	ldr	r1, [pc, #52]	; (8003fec <HAL_UART_Init+0xa8>)
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	212a      	movs	r1, #42	; 0x2a
 8003fc6:	438a      	bics	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f000 fcbd 	bl	800495c <UART_CheckIdleState>
 8003fe2:	0003      	movs	r3, r0
}
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	ffffb7ff 	.word	0xffffb7ff

08003ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	; 0x28
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	1dbb      	adds	r3, r7, #6
 8003ffe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2288      	movs	r2, #136	; 0x88
 8004004:	589b      	ldr	r3, [r3, r2]
 8004006:	2b20      	cmp	r3, #32
 8004008:	d000      	beq.n	800400c <HAL_UART_Transmit+0x1c>
 800400a:	e090      	b.n	800412e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_UART_Transmit+0x2a>
 8004012:	1dbb      	adds	r3, r7, #6
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e088      	b.n	8004130 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	015b      	lsls	r3, r3, #5
 8004026:	429a      	cmp	r2, r3
 8004028:	d109      	bne.n	800403e <HAL_UART_Transmit+0x4e>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d105      	bne.n	800403e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2201      	movs	r2, #1
 8004036:	4013      	ands	r3, r2
 8004038:	d001      	beq.n	800403e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e078      	b.n	8004130 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2290      	movs	r2, #144	; 0x90
 8004042:	2100      	movs	r1, #0
 8004044:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2288      	movs	r2, #136	; 0x88
 800404a:	2121      	movs	r1, #33	; 0x21
 800404c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800404e:	f7fd f8b1 	bl	80011b4 <HAL_GetTick>
 8004052:	0003      	movs	r3, r0
 8004054:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1dba      	adds	r2, r7, #6
 800405a:	2154      	movs	r1, #84	; 0x54
 800405c:	8812      	ldrh	r2, [r2, #0]
 800405e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1dba      	adds	r2, r7, #6
 8004064:	2156      	movs	r1, #86	; 0x56
 8004066:	8812      	ldrh	r2, [r2, #0]
 8004068:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	2380      	movs	r3, #128	; 0x80
 8004070:	015b      	lsls	r3, r3, #5
 8004072:	429a      	cmp	r2, r3
 8004074:	d108      	bne.n	8004088 <HAL_UART_Transmit+0x98>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	e003      	b.n	8004090 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800408c:	2300      	movs	r3, #0
 800408e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004090:	e030      	b.n	80040f4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	0013      	movs	r3, r2
 800409c:	2200      	movs	r2, #0
 800409e:	2180      	movs	r1, #128	; 0x80
 80040a0:	f000 fd06 	bl	8004ab0 <UART_WaitOnFlagUntilTimeout>
 80040a4:	1e03      	subs	r3, r0, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2288      	movs	r2, #136	; 0x88
 80040ac:	2120      	movs	r1, #32
 80040ae:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e03d      	b.n	8004130 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	001a      	movs	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	05d2      	lsls	r2, r2, #23
 80040c6:	0dd2      	lsrs	r2, r2, #23
 80040c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	3302      	adds	r3, #2
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e007      	b.n	80040e2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	3301      	adds	r3, #1
 80040e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2256      	movs	r2, #86	; 0x56
 80040e6:	5a9b      	ldrh	r3, [r3, r2]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b299      	uxth	r1, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2256      	movs	r2, #86	; 0x56
 80040f2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2256      	movs	r2, #86	; 0x56
 80040f8:	5a9b      	ldrh	r3, [r3, r2]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1c8      	bne.n	8004092 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	0013      	movs	r3, r2
 800410a:	2200      	movs	r2, #0
 800410c:	2140      	movs	r1, #64	; 0x40
 800410e:	f000 fccf 	bl	8004ab0 <UART_WaitOnFlagUntilTimeout>
 8004112:	1e03      	subs	r3, r0, #0
 8004114:	d005      	beq.n	8004122 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2288      	movs	r2, #136	; 0x88
 800411a:	2120      	movs	r1, #32
 800411c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e006      	b.n	8004130 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2288      	movs	r2, #136	; 0x88
 8004126:	2120      	movs	r1, #32
 8004128:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e000      	b.n	8004130 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
  }
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b008      	add	sp, #32
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	1dbb      	adds	r3, r7, #6
 8004146:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	228c      	movs	r2, #140	; 0x8c
 800414c:	589b      	ldr	r3, [r3, r2]
 800414e:	2b20      	cmp	r3, #32
 8004150:	d000      	beq.n	8004154 <HAL_UART_Receive+0x1c>
 8004152:	e0d0      	b.n	80042f6 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_UART_Receive+0x2a>
 800415a:	1dbb      	adds	r3, r7, #6
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e0c8      	b.n	80042f8 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	015b      	lsls	r3, r3, #5
 800416e:	429a      	cmp	r2, r3
 8004170:	d109      	bne.n	8004186 <HAL_UART_Receive+0x4e>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d105      	bne.n	8004186 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2201      	movs	r2, #1
 800417e:	4013      	ands	r3, r2
 8004180:	d001      	beq.n	8004186 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e0b8      	b.n	80042f8 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2290      	movs	r2, #144	; 0x90
 800418a:	2100      	movs	r1, #0
 800418c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	228c      	movs	r2, #140	; 0x8c
 8004192:	2122      	movs	r1, #34	; 0x22
 8004194:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800419c:	f7fd f80a 	bl	80011b4 <HAL_GetTick>
 80041a0:	0003      	movs	r3, r0
 80041a2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1dba      	adds	r2, r7, #6
 80041a8:	215c      	movs	r1, #92	; 0x5c
 80041aa:	8812      	ldrh	r2, [r2, #0]
 80041ac:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1dba      	adds	r2, r7, #6
 80041b2:	215e      	movs	r1, #94	; 0x5e
 80041b4:	8812      	ldrh	r2, [r2, #0]
 80041b6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	015b      	lsls	r3, r3, #5
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d10d      	bne.n	80041e0 <HAL_UART_Receive+0xa8>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d104      	bne.n	80041d6 <HAL_UART_Receive+0x9e>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2260      	movs	r2, #96	; 0x60
 80041d0:	494b      	ldr	r1, [pc, #300]	; (8004300 <HAL_UART_Receive+0x1c8>)
 80041d2:	5299      	strh	r1, [r3, r2]
 80041d4:	e02e      	b.n	8004234 <HAL_UART_Receive+0xfc>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2260      	movs	r2, #96	; 0x60
 80041da:	21ff      	movs	r1, #255	; 0xff
 80041dc:	5299      	strh	r1, [r3, r2]
 80041de:	e029      	b.n	8004234 <HAL_UART_Receive+0xfc>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10d      	bne.n	8004204 <HAL_UART_Receive+0xcc>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d104      	bne.n	80041fa <HAL_UART_Receive+0xc2>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2260      	movs	r2, #96	; 0x60
 80041f4:	21ff      	movs	r1, #255	; 0xff
 80041f6:	5299      	strh	r1, [r3, r2]
 80041f8:	e01c      	b.n	8004234 <HAL_UART_Receive+0xfc>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2260      	movs	r2, #96	; 0x60
 80041fe:	217f      	movs	r1, #127	; 0x7f
 8004200:	5299      	strh	r1, [r3, r2]
 8004202:	e017      	b.n	8004234 <HAL_UART_Receive+0xfc>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	055b      	lsls	r3, r3, #21
 800420c:	429a      	cmp	r2, r3
 800420e:	d10d      	bne.n	800422c <HAL_UART_Receive+0xf4>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d104      	bne.n	8004222 <HAL_UART_Receive+0xea>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2260      	movs	r2, #96	; 0x60
 800421c:	217f      	movs	r1, #127	; 0x7f
 800421e:	5299      	strh	r1, [r3, r2]
 8004220:	e008      	b.n	8004234 <HAL_UART_Receive+0xfc>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2260      	movs	r2, #96	; 0x60
 8004226:	213f      	movs	r1, #63	; 0x3f
 8004228:	5299      	strh	r1, [r3, r2]
 800422a:	e003      	b.n	8004234 <HAL_UART_Receive+0xfc>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2260      	movs	r2, #96	; 0x60
 8004230:	2100      	movs	r1, #0
 8004232:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004234:	2312      	movs	r3, #18
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	2160      	movs	r1, #96	; 0x60
 800423c:	5a52      	ldrh	r2, [r2, r1]
 800423e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	015b      	lsls	r3, r3, #5
 8004248:	429a      	cmp	r2, r3
 800424a:	d108      	bne.n	800425e <HAL_UART_Receive+0x126>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d104      	bne.n	800425e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	e003      	b.n	8004266 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004262:	2300      	movs	r3, #0
 8004264:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004266:	e03a      	b.n	80042de <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	0013      	movs	r3, r2
 8004272:	2200      	movs	r2, #0
 8004274:	2120      	movs	r1, #32
 8004276:	f000 fc1b 	bl	8004ab0 <UART_WaitOnFlagUntilTimeout>
 800427a:	1e03      	subs	r3, r0, #0
 800427c:	d005      	beq.n	800428a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	228c      	movs	r2, #140	; 0x8c
 8004282:	2120      	movs	r1, #32
 8004284:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e036      	b.n	80042f8 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10e      	bne.n	80042ae <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	b29b      	uxth	r3, r3
 8004298:	2212      	movs	r2, #18
 800429a:	18ba      	adds	r2, r7, r2
 800429c:	8812      	ldrh	r2, [r2, #0]
 800429e:	4013      	ands	r3, r2
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	3302      	adds	r3, #2
 80042aa:	61bb      	str	r3, [r7, #24]
 80042ac:	e00e      	b.n	80042cc <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2212      	movs	r2, #18
 80042b8:	18ba      	adds	r2, r7, r2
 80042ba:	8812      	ldrh	r2, [r2, #0]
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	4013      	ands	r3, r2
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	225e      	movs	r2, #94	; 0x5e
 80042d0:	5a9b      	ldrh	r3, [r3, r2]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b299      	uxth	r1, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	225e      	movs	r2, #94	; 0x5e
 80042dc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	225e      	movs	r2, #94	; 0x5e
 80042e2:	5a9b      	ldrh	r3, [r3, r2]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1be      	bne.n	8004268 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	228c      	movs	r2, #140	; 0x8c
 80042ee:	2120      	movs	r1, #32
 80042f0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e000      	b.n	80042f8 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
  }
}
 80042f8:	0018      	movs	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b008      	add	sp, #32
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	000001ff 	.word	0x000001ff

08004304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004304:	b5b0      	push	{r4, r5, r7, lr}
 8004306:	b090      	sub	sp, #64	; 0x40
 8004308:	af00      	add	r7, sp, #0
 800430a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800430c:	231a      	movs	r3, #26
 800430e:	2220      	movs	r2, #32
 8004310:	189b      	adds	r3, r3, r2
 8004312:	19db      	adds	r3, r3, r7
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	431a      	orrs	r2, r3
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	431a      	orrs	r2, r3
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	4313      	orrs	r3, r2
 800432e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4ac4      	ldr	r2, [pc, #784]	; (8004648 <UART_SetConfig+0x344>)
 8004338:	4013      	ands	r3, r2
 800433a:	0019      	movs	r1, r3
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004342:	430b      	orrs	r3, r1
 8004344:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4abf      	ldr	r2, [pc, #764]	; (800464c <UART_SetConfig+0x348>)
 800434e:	4013      	ands	r3, r2
 8004350:	0018      	movs	r0, r3
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	68d9      	ldr	r1, [r3, #12]
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	0003      	movs	r3, r0
 800435c:	430b      	orrs	r3, r1
 800435e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4ab9      	ldr	r2, [pc, #740]	; (8004650 <UART_SetConfig+0x34c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d004      	beq.n	800437a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004376:	4313      	orrs	r3, r2
 8004378:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4ab4      	ldr	r2, [pc, #720]	; (8004654 <UART_SetConfig+0x350>)
 8004382:	4013      	ands	r3, r2
 8004384:	0019      	movs	r1, r3
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438c:	430b      	orrs	r3, r1
 800438e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	220f      	movs	r2, #15
 8004398:	4393      	bics	r3, r2
 800439a:	0018      	movs	r0, r3
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	0003      	movs	r3, r0
 80043a6:	430b      	orrs	r3, r1
 80043a8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4aaa      	ldr	r2, [pc, #680]	; (8004658 <UART_SetConfig+0x354>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d131      	bne.n	8004418 <UART_SetConfig+0x114>
 80043b4:	4ba9      	ldr	r3, [pc, #676]	; (800465c <UART_SetConfig+0x358>)
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	2203      	movs	r2, #3
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d01d      	beq.n	80043fc <UART_SetConfig+0xf8>
 80043c0:	d823      	bhi.n	800440a <UART_SetConfig+0x106>
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d00c      	beq.n	80043e0 <UART_SetConfig+0xdc>
 80043c6:	d820      	bhi.n	800440a <UART_SetConfig+0x106>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <UART_SetConfig+0xce>
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d00e      	beq.n	80043ee <UART_SetConfig+0xea>
 80043d0:	e01b      	b.n	800440a <UART_SetConfig+0x106>
 80043d2:	231b      	movs	r3, #27
 80043d4:	2220      	movs	r2, #32
 80043d6:	189b      	adds	r3, r3, r2
 80043d8:	19db      	adds	r3, r3, r7
 80043da:	2200      	movs	r2, #0
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e071      	b.n	80044c4 <UART_SetConfig+0x1c0>
 80043e0:	231b      	movs	r3, #27
 80043e2:	2220      	movs	r2, #32
 80043e4:	189b      	adds	r3, r3, r2
 80043e6:	19db      	adds	r3, r3, r7
 80043e8:	2202      	movs	r2, #2
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e06a      	b.n	80044c4 <UART_SetConfig+0x1c0>
 80043ee:	231b      	movs	r3, #27
 80043f0:	2220      	movs	r2, #32
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	19db      	adds	r3, r3, r7
 80043f6:	2204      	movs	r2, #4
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	e063      	b.n	80044c4 <UART_SetConfig+0x1c0>
 80043fc:	231b      	movs	r3, #27
 80043fe:	2220      	movs	r2, #32
 8004400:	189b      	adds	r3, r3, r2
 8004402:	19db      	adds	r3, r3, r7
 8004404:	2208      	movs	r2, #8
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	e05c      	b.n	80044c4 <UART_SetConfig+0x1c0>
 800440a:	231b      	movs	r3, #27
 800440c:	2220      	movs	r2, #32
 800440e:	189b      	adds	r3, r3, r2
 8004410:	19db      	adds	r3, r3, r7
 8004412:	2210      	movs	r2, #16
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	e055      	b.n	80044c4 <UART_SetConfig+0x1c0>
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a90      	ldr	r2, [pc, #576]	; (8004660 <UART_SetConfig+0x35c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d106      	bne.n	8004430 <UART_SetConfig+0x12c>
 8004422:	231b      	movs	r3, #27
 8004424:	2220      	movs	r2, #32
 8004426:	189b      	adds	r3, r3, r2
 8004428:	19db      	adds	r3, r3, r7
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e049      	b.n	80044c4 <UART_SetConfig+0x1c0>
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a86      	ldr	r2, [pc, #536]	; (8004650 <UART_SetConfig+0x34c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d13e      	bne.n	80044b8 <UART_SetConfig+0x1b4>
 800443a:	4b88      	ldr	r3, [pc, #544]	; (800465c <UART_SetConfig+0x358>)
 800443c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800443e:	23c0      	movs	r3, #192	; 0xc0
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	4013      	ands	r3, r2
 8004444:	22c0      	movs	r2, #192	; 0xc0
 8004446:	0112      	lsls	r2, r2, #4
 8004448:	4293      	cmp	r3, r2
 800444a:	d027      	beq.n	800449c <UART_SetConfig+0x198>
 800444c:	22c0      	movs	r2, #192	; 0xc0
 800444e:	0112      	lsls	r2, r2, #4
 8004450:	4293      	cmp	r3, r2
 8004452:	d82a      	bhi.n	80044aa <UART_SetConfig+0x1a6>
 8004454:	2280      	movs	r2, #128	; 0x80
 8004456:	0112      	lsls	r2, r2, #4
 8004458:	4293      	cmp	r3, r2
 800445a:	d011      	beq.n	8004480 <UART_SetConfig+0x17c>
 800445c:	2280      	movs	r2, #128	; 0x80
 800445e:	0112      	lsls	r2, r2, #4
 8004460:	4293      	cmp	r3, r2
 8004462:	d822      	bhi.n	80044aa <UART_SetConfig+0x1a6>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d004      	beq.n	8004472 <UART_SetConfig+0x16e>
 8004468:	2280      	movs	r2, #128	; 0x80
 800446a:	00d2      	lsls	r2, r2, #3
 800446c:	4293      	cmp	r3, r2
 800446e:	d00e      	beq.n	800448e <UART_SetConfig+0x18a>
 8004470:	e01b      	b.n	80044aa <UART_SetConfig+0x1a6>
 8004472:	231b      	movs	r3, #27
 8004474:	2220      	movs	r2, #32
 8004476:	189b      	adds	r3, r3, r2
 8004478:	19db      	adds	r3, r3, r7
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e021      	b.n	80044c4 <UART_SetConfig+0x1c0>
 8004480:	231b      	movs	r3, #27
 8004482:	2220      	movs	r2, #32
 8004484:	189b      	adds	r3, r3, r2
 8004486:	19db      	adds	r3, r3, r7
 8004488:	2202      	movs	r2, #2
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e01a      	b.n	80044c4 <UART_SetConfig+0x1c0>
 800448e:	231b      	movs	r3, #27
 8004490:	2220      	movs	r2, #32
 8004492:	189b      	adds	r3, r3, r2
 8004494:	19db      	adds	r3, r3, r7
 8004496:	2204      	movs	r2, #4
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e013      	b.n	80044c4 <UART_SetConfig+0x1c0>
 800449c:	231b      	movs	r3, #27
 800449e:	2220      	movs	r2, #32
 80044a0:	189b      	adds	r3, r3, r2
 80044a2:	19db      	adds	r3, r3, r7
 80044a4:	2208      	movs	r2, #8
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	e00c      	b.n	80044c4 <UART_SetConfig+0x1c0>
 80044aa:	231b      	movs	r3, #27
 80044ac:	2220      	movs	r2, #32
 80044ae:	189b      	adds	r3, r3, r2
 80044b0:	19db      	adds	r3, r3, r7
 80044b2:	2210      	movs	r2, #16
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	e005      	b.n	80044c4 <UART_SetConfig+0x1c0>
 80044b8:	231b      	movs	r3, #27
 80044ba:	2220      	movs	r2, #32
 80044bc:	189b      	adds	r3, r3, r2
 80044be:	19db      	adds	r3, r3, r7
 80044c0:	2210      	movs	r2, #16
 80044c2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a61      	ldr	r2, [pc, #388]	; (8004650 <UART_SetConfig+0x34c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d000      	beq.n	80044d0 <UART_SetConfig+0x1cc>
 80044ce:	e092      	b.n	80045f6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044d0:	231b      	movs	r3, #27
 80044d2:	2220      	movs	r2, #32
 80044d4:	189b      	adds	r3, r3, r2
 80044d6:	19db      	adds	r3, r3, r7
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d015      	beq.n	800450a <UART_SetConfig+0x206>
 80044de:	dc18      	bgt.n	8004512 <UART_SetConfig+0x20e>
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d00d      	beq.n	8004500 <UART_SetConfig+0x1fc>
 80044e4:	dc15      	bgt.n	8004512 <UART_SetConfig+0x20e>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <UART_SetConfig+0x1ec>
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d005      	beq.n	80044fa <UART_SetConfig+0x1f6>
 80044ee:	e010      	b.n	8004512 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7fd fefc 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 80044f4:	0003      	movs	r3, r0
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044f8:	e014      	b.n	8004524 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044fa:	4b5a      	ldr	r3, [pc, #360]	; (8004664 <UART_SetConfig+0x360>)
 80044fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044fe:	e011      	b.n	8004524 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004500:	f7fd fe68 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8004504:	0003      	movs	r3, r0
 8004506:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004508:	e00c      	b.n	8004524 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004510:	e008      	b.n	8004524 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004516:	231a      	movs	r3, #26
 8004518:	2220      	movs	r2, #32
 800451a:	189b      	adds	r3, r3, r2
 800451c:	19db      	adds	r3, r3, r7
 800451e:	2201      	movs	r2, #1
 8004520:	701a      	strb	r2, [r3, #0]
        break;
 8004522:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004526:	2b00      	cmp	r3, #0
 8004528:	d100      	bne.n	800452c <UART_SetConfig+0x228>
 800452a:	e147      	b.n	80047bc <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004530:	4b4d      	ldr	r3, [pc, #308]	; (8004668 <UART_SetConfig+0x364>)
 8004532:	0052      	lsls	r2, r2, #1
 8004534:	5ad3      	ldrh	r3, [r2, r3]
 8004536:	0019      	movs	r1, r3
 8004538:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800453a:	f7fb fde3 	bl	8000104 <__udivsi3>
 800453e:	0003      	movs	r3, r0
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	0013      	movs	r3, r2
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	189b      	adds	r3, r3, r2
 800454c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800454e:	429a      	cmp	r2, r3
 8004550:	d305      	bcc.n	800455e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800455a:	429a      	cmp	r2, r3
 800455c:	d906      	bls.n	800456c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800455e:	231a      	movs	r3, #26
 8004560:	2220      	movs	r2, #32
 8004562:	189b      	adds	r3, r3, r2
 8004564:	19db      	adds	r3, r3, r7
 8004566:	2201      	movs	r2, #1
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	e127      	b.n	80047bc <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800456c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004578:	4b3b      	ldr	r3, [pc, #236]	; (8004668 <UART_SetConfig+0x364>)
 800457a:	0052      	lsls	r2, r2, #1
 800457c:	5ad3      	ldrh	r3, [r2, r3]
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	69b8      	ldr	r0, [r7, #24]
 800458a:	69f9      	ldr	r1, [r7, #28]
 800458c:	f7fb ff30 	bl	80003f0 <__aeabi_uldivmod>
 8004590:	0002      	movs	r2, r0
 8004592:	000b      	movs	r3, r1
 8004594:	0e11      	lsrs	r1, r2, #24
 8004596:	021d      	lsls	r5, r3, #8
 8004598:	430d      	orrs	r5, r1
 800459a:	0214      	lsls	r4, r2, #8
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	085b      	lsrs	r3, r3, #1
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68b8      	ldr	r0, [r7, #8]
 80045aa:	68f9      	ldr	r1, [r7, #12]
 80045ac:	1900      	adds	r0, r0, r4
 80045ae:	4169      	adcs	r1, r5
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	2300      	movs	r3, #0
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f7fb ff17 	bl	80003f0 <__aeabi_uldivmod>
 80045c2:	0002      	movs	r2, r0
 80045c4:	000b      	movs	r3, r1
 80045c6:	0013      	movs	r3, r2
 80045c8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045cc:	23c0      	movs	r3, #192	; 0xc0
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d309      	bcc.n	80045e8 <UART_SetConfig+0x2e4>
 80045d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	035b      	lsls	r3, r3, #13
 80045da:	429a      	cmp	r2, r3
 80045dc:	d204      	bcs.n	80045e8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e4:	60da      	str	r2, [r3, #12]
 80045e6:	e0e9      	b.n	80047bc <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80045e8:	231a      	movs	r3, #26
 80045ea:	2220      	movs	r2, #32
 80045ec:	189b      	adds	r3, r3, r2
 80045ee:	19db      	adds	r3, r3, r7
 80045f0:	2201      	movs	r2, #1
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e0e2      	b.n	80047bc <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	69da      	ldr	r2, [r3, #28]
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	429a      	cmp	r2, r3
 8004600:	d000      	beq.n	8004604 <UART_SetConfig+0x300>
 8004602:	e083      	b.n	800470c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004604:	231b      	movs	r3, #27
 8004606:	2220      	movs	r2, #32
 8004608:	189b      	adds	r3, r3, r2
 800460a:	19db      	adds	r3, r3, r7
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b08      	cmp	r3, #8
 8004610:	d015      	beq.n	800463e <UART_SetConfig+0x33a>
 8004612:	dc2b      	bgt.n	800466c <UART_SetConfig+0x368>
 8004614:	2b04      	cmp	r3, #4
 8004616:	d00d      	beq.n	8004634 <UART_SetConfig+0x330>
 8004618:	dc28      	bgt.n	800466c <UART_SetConfig+0x368>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <UART_SetConfig+0x320>
 800461e:	2b02      	cmp	r3, #2
 8004620:	d005      	beq.n	800462e <UART_SetConfig+0x32a>
 8004622:	e023      	b.n	800466c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004624:	f7fd fe62 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8004628:	0003      	movs	r3, r0
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800462c:	e027      	b.n	800467e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800462e:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <UART_SetConfig+0x360>)
 8004630:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004632:	e024      	b.n	800467e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004634:	f7fd fdce 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8004638:	0003      	movs	r3, r0
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800463c:	e01f      	b.n	800467e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004644:	e01b      	b.n	800467e <UART_SetConfig+0x37a>
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	cfff69f3 	.word	0xcfff69f3
 800464c:	ffffcfff 	.word	0xffffcfff
 8004650:	40008000 	.word	0x40008000
 8004654:	11fff4ff 	.word	0x11fff4ff
 8004658:	40013800 	.word	0x40013800
 800465c:	40021000 	.word	0x40021000
 8004660:	40004400 	.word	0x40004400
 8004664:	00f42400 	.word	0x00f42400
 8004668:	080055d8 	.word	0x080055d8
      default:
        pclk = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004670:	231a      	movs	r3, #26
 8004672:	2220      	movs	r2, #32
 8004674:	189b      	adds	r3, r3, r2
 8004676:	19db      	adds	r3, r3, r7
 8004678:	2201      	movs	r2, #1
 800467a:	701a      	strb	r2, [r3, #0]
        break;
 800467c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004680:	2b00      	cmp	r3, #0
 8004682:	d100      	bne.n	8004686 <UART_SetConfig+0x382>
 8004684:	e09a      	b.n	80047bc <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800468a:	4b58      	ldr	r3, [pc, #352]	; (80047ec <UART_SetConfig+0x4e8>)
 800468c:	0052      	lsls	r2, r2, #1
 800468e:	5ad3      	ldrh	r3, [r2, r3]
 8004690:	0019      	movs	r1, r3
 8004692:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004694:	f7fb fd36 	bl	8000104 <__udivsi3>
 8004698:	0003      	movs	r3, r0
 800469a:	005a      	lsls	r2, r3, #1
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	085b      	lsrs	r3, r3, #1
 80046a2:	18d2      	adds	r2, r2, r3
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	0019      	movs	r1, r3
 80046aa:	0010      	movs	r0, r2
 80046ac:	f7fb fd2a 	bl	8000104 <__udivsi3>
 80046b0:	0003      	movs	r3, r0
 80046b2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	d921      	bls.n	80046fe <UART_SetConfig+0x3fa>
 80046ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	025b      	lsls	r3, r3, #9
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d21c      	bcs.n	80046fe <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	200e      	movs	r0, #14
 80046ca:	2420      	movs	r4, #32
 80046cc:	1903      	adds	r3, r0, r4
 80046ce:	19db      	adds	r3, r3, r7
 80046d0:	210f      	movs	r1, #15
 80046d2:	438a      	bics	r2, r1
 80046d4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2207      	movs	r2, #7
 80046de:	4013      	ands	r3, r2
 80046e0:	b299      	uxth	r1, r3
 80046e2:	1903      	adds	r3, r0, r4
 80046e4:	19db      	adds	r3, r3, r7
 80046e6:	1902      	adds	r2, r0, r4
 80046e8:	19d2      	adds	r2, r2, r7
 80046ea:	8812      	ldrh	r2, [r2, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	1902      	adds	r2, r0, r4
 80046f6:	19d2      	adds	r2, r2, r7
 80046f8:	8812      	ldrh	r2, [r2, #0]
 80046fa:	60da      	str	r2, [r3, #12]
 80046fc:	e05e      	b.n	80047bc <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80046fe:	231a      	movs	r3, #26
 8004700:	2220      	movs	r2, #32
 8004702:	189b      	adds	r3, r3, r2
 8004704:	19db      	adds	r3, r3, r7
 8004706:	2201      	movs	r2, #1
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	e057      	b.n	80047bc <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800470c:	231b      	movs	r3, #27
 800470e:	2220      	movs	r2, #32
 8004710:	189b      	adds	r3, r3, r2
 8004712:	19db      	adds	r3, r3, r7
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b08      	cmp	r3, #8
 8004718:	d015      	beq.n	8004746 <UART_SetConfig+0x442>
 800471a:	dc18      	bgt.n	800474e <UART_SetConfig+0x44a>
 800471c:	2b04      	cmp	r3, #4
 800471e:	d00d      	beq.n	800473c <UART_SetConfig+0x438>
 8004720:	dc15      	bgt.n	800474e <UART_SetConfig+0x44a>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <UART_SetConfig+0x428>
 8004726:	2b02      	cmp	r3, #2
 8004728:	d005      	beq.n	8004736 <UART_SetConfig+0x432>
 800472a:	e010      	b.n	800474e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800472c:	f7fd fdde 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8004730:	0003      	movs	r3, r0
 8004732:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004734:	e014      	b.n	8004760 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004736:	4b2e      	ldr	r3, [pc, #184]	; (80047f0 <UART_SetConfig+0x4ec>)
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800473a:	e011      	b.n	8004760 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473c:	f7fd fd4a 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8004740:	0003      	movs	r3, r0
 8004742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004744:	e00c      	b.n	8004760 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004746:	2380      	movs	r3, #128	; 0x80
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800474c:	e008      	b.n	8004760 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004752:	231a      	movs	r3, #26
 8004754:	2220      	movs	r2, #32
 8004756:	189b      	adds	r3, r3, r2
 8004758:	19db      	adds	r3, r3, r7
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
        break;
 800475e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004762:	2b00      	cmp	r3, #0
 8004764:	d02a      	beq.n	80047bc <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <UART_SetConfig+0x4e8>)
 800476c:	0052      	lsls	r2, r2, #1
 800476e:	5ad3      	ldrh	r3, [r2, r3]
 8004770:	0019      	movs	r1, r3
 8004772:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004774:	f7fb fcc6 	bl	8000104 <__udivsi3>
 8004778:	0003      	movs	r3, r0
 800477a:	001a      	movs	r2, r3
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	18d2      	adds	r2, r2, r3
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	0019      	movs	r1, r3
 800478a:	0010      	movs	r0, r2
 800478c:	f7fb fcba 	bl	8000104 <__udivsi3>
 8004790:	0003      	movs	r3, r0
 8004792:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	2b0f      	cmp	r3, #15
 8004798:	d90a      	bls.n	80047b0 <UART_SetConfig+0x4ac>
 800479a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	025b      	lsls	r3, r3, #9
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d205      	bcs.n	80047b0 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	e005      	b.n	80047bc <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80047b0:	231a      	movs	r3, #26
 80047b2:	2220      	movs	r2, #32
 80047b4:	189b      	adds	r3, r3, r2
 80047b6:	19db      	adds	r3, r3, r7
 80047b8:	2201      	movs	r2, #1
 80047ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	226a      	movs	r2, #106	; 0x6a
 80047c0:	2101      	movs	r1, #1
 80047c2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	2268      	movs	r2, #104	; 0x68
 80047c8:	2101      	movs	r1, #1
 80047ca:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	2200      	movs	r2, #0
 80047d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	2200      	movs	r2, #0
 80047d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80047d8:	231a      	movs	r3, #26
 80047da:	2220      	movs	r2, #32
 80047dc:	189b      	adds	r3, r3, r2
 80047de:	19db      	adds	r3, r3, r7
 80047e0:	781b      	ldrb	r3, [r3, #0]
}
 80047e2:	0018      	movs	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b010      	add	sp, #64	; 0x40
 80047e8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	080055d8 	.word	0x080055d8
 80047f0:	00f42400 	.word	0x00f42400

080047f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	2208      	movs	r2, #8
 8004802:	4013      	ands	r3, r2
 8004804:	d00b      	beq.n	800481e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4a4a      	ldr	r2, [pc, #296]	; (8004938 <UART_AdvFeatureConfig+0x144>)
 800480e:	4013      	ands	r3, r2
 8004810:	0019      	movs	r1, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	2201      	movs	r2, #1
 8004824:	4013      	ands	r3, r2
 8004826:	d00b      	beq.n	8004840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4a43      	ldr	r2, [pc, #268]	; (800493c <UART_AdvFeatureConfig+0x148>)
 8004830:	4013      	ands	r3, r2
 8004832:	0019      	movs	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	2202      	movs	r2, #2
 8004846:	4013      	ands	r3, r2
 8004848:	d00b      	beq.n	8004862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4a3b      	ldr	r2, [pc, #236]	; (8004940 <UART_AdvFeatureConfig+0x14c>)
 8004852:	4013      	ands	r3, r2
 8004854:	0019      	movs	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	2204      	movs	r2, #4
 8004868:	4013      	ands	r3, r2
 800486a:	d00b      	beq.n	8004884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4a34      	ldr	r2, [pc, #208]	; (8004944 <UART_AdvFeatureConfig+0x150>)
 8004874:	4013      	ands	r3, r2
 8004876:	0019      	movs	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	2210      	movs	r2, #16
 800488a:	4013      	ands	r3, r2
 800488c:	d00b      	beq.n	80048a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4a2c      	ldr	r2, [pc, #176]	; (8004948 <UART_AdvFeatureConfig+0x154>)
 8004896:	4013      	ands	r3, r2
 8004898:	0019      	movs	r1, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	2220      	movs	r2, #32
 80048ac:	4013      	ands	r3, r2
 80048ae:	d00b      	beq.n	80048c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	4a25      	ldr	r2, [pc, #148]	; (800494c <UART_AdvFeatureConfig+0x158>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	0019      	movs	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	2240      	movs	r2, #64	; 0x40
 80048ce:	4013      	ands	r3, r2
 80048d0:	d01d      	beq.n	800490e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <UART_AdvFeatureConfig+0x15c>)
 80048da:	4013      	ands	r3, r2
 80048dc:	0019      	movs	r1, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ee:	2380      	movs	r3, #128	; 0x80
 80048f0:	035b      	lsls	r3, r3, #13
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d10b      	bne.n	800490e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4a15      	ldr	r2, [pc, #84]	; (8004954 <UART_AdvFeatureConfig+0x160>)
 80048fe:	4013      	ands	r3, r2
 8004900:	0019      	movs	r1, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	2280      	movs	r2, #128	; 0x80
 8004914:	4013      	ands	r3, r2
 8004916:	d00b      	beq.n	8004930 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4a0e      	ldr	r2, [pc, #56]	; (8004958 <UART_AdvFeatureConfig+0x164>)
 8004920:	4013      	ands	r3, r2
 8004922:	0019      	movs	r1, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	605a      	str	r2, [r3, #4]
  }
}
 8004930:	46c0      	nop			; (mov r8, r8)
 8004932:	46bd      	mov	sp, r7
 8004934:	b002      	add	sp, #8
 8004936:	bd80      	pop	{r7, pc}
 8004938:	ffff7fff 	.word	0xffff7fff
 800493c:	fffdffff 	.word	0xfffdffff
 8004940:	fffeffff 	.word	0xfffeffff
 8004944:	fffbffff 	.word	0xfffbffff
 8004948:	ffffefff 	.word	0xffffefff
 800494c:	ffffdfff 	.word	0xffffdfff
 8004950:	ffefffff 	.word	0xffefffff
 8004954:	ff9fffff 	.word	0xff9fffff
 8004958:	fff7ffff 	.word	0xfff7ffff

0800495c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b092      	sub	sp, #72	; 0x48
 8004960:	af02      	add	r7, sp, #8
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2290      	movs	r2, #144	; 0x90
 8004968:	2100      	movs	r1, #0
 800496a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800496c:	f7fc fc22 	bl	80011b4 <HAL_GetTick>
 8004970:	0003      	movs	r3, r0
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2208      	movs	r2, #8
 800497c:	4013      	ands	r3, r2
 800497e:	2b08      	cmp	r3, #8
 8004980:	d12d      	bne.n	80049de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004984:	2280      	movs	r2, #128	; 0x80
 8004986:	0391      	lsls	r1, r2, #14
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4a47      	ldr	r2, [pc, #284]	; (8004aa8 <UART_CheckIdleState+0x14c>)
 800498c:	9200      	str	r2, [sp, #0]
 800498e:	2200      	movs	r2, #0
 8004990:	f000 f88e 	bl	8004ab0 <UART_WaitOnFlagUntilTimeout>
 8004994:	1e03      	subs	r3, r0, #0
 8004996:	d022      	beq.n	80049de <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004998:	f3ef 8310 	mrs	r3, PRIMASK
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80049a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80049a2:	2301      	movs	r3, #1
 80049a4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	f383 8810 	msr	PRIMASK, r3
}
 80049ac:	46c0      	nop			; (mov r8, r8)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2180      	movs	r1, #128	; 0x80
 80049ba:	438a      	bics	r2, r1
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	f383 8810 	msr	PRIMASK, r3
}
 80049c8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2288      	movs	r2, #136	; 0x88
 80049ce:	2120      	movs	r1, #32
 80049d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2284      	movs	r2, #132	; 0x84
 80049d6:	2100      	movs	r1, #0
 80049d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e060      	b.n	8004aa0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2204      	movs	r2, #4
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d146      	bne.n	8004a7a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ee:	2280      	movs	r2, #128	; 0x80
 80049f0:	03d1      	lsls	r1, r2, #15
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	4a2c      	ldr	r2, [pc, #176]	; (8004aa8 <UART_CheckIdleState+0x14c>)
 80049f6:	9200      	str	r2, [sp, #0]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f000 f859 	bl	8004ab0 <UART_WaitOnFlagUntilTimeout>
 80049fe:	1e03      	subs	r3, r0, #0
 8004a00:	d03b      	beq.n	8004a7a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a02:	f3ef 8310 	mrs	r3, PRIMASK
 8004a06:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a08:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f383 8810 	msr	PRIMASK, r3
}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4922      	ldr	r1, [pc, #136]	; (8004aac <UART_CheckIdleState+0x150>)
 8004a24:	400a      	ands	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f383 8810 	msr	PRIMASK, r3
}
 8004a32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a34:	f3ef 8310 	mrs	r3, PRIMASK
 8004a38:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a3a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a3e:	2301      	movs	r3, #1
 8004a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f383 8810 	msr	PRIMASK, r3
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2101      	movs	r1, #1
 8004a56:	438a      	bics	r2, r1
 8004a58:	609a      	str	r2, [r3, #8]
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	f383 8810 	msr	PRIMASK, r3
}
 8004a64:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	228c      	movs	r2, #140	; 0x8c
 8004a6a:	2120      	movs	r1, #32
 8004a6c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2284      	movs	r2, #132	; 0x84
 8004a72:	2100      	movs	r1, #0
 8004a74:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e012      	b.n	8004aa0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2288      	movs	r2, #136	; 0x88
 8004a7e:	2120      	movs	r1, #32
 8004a80:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	228c      	movs	r2, #140	; 0x8c
 8004a86:	2120      	movs	r1, #32
 8004a88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2284      	movs	r2, #132	; 0x84
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b010      	add	sp, #64	; 0x40
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	01ffffff 	.word	0x01ffffff
 8004aac:	fffffedf 	.word	0xfffffedf

08004ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	1dfb      	adds	r3, r7, #7
 8004abe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac0:	e051      	b.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	d04e      	beq.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac8:	f7fc fb74 	bl	80011b4 <HAL_GetTick>
 8004acc:	0002      	movs	r2, r0
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d302      	bcc.n	8004ade <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e051      	b.n	8004b86 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	4013      	ands	r3, r2
 8004aec:	d03b      	beq.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b80      	cmp	r3, #128	; 0x80
 8004af2:	d038      	beq.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d035      	beq.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	2208      	movs	r2, #8
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d111      	bne.n	8004b2c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2208      	movs	r2, #8
 8004b0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f000 f83c 	bl	8004b90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2290      	movs	r2, #144	; 0x90
 8004b1c:	2108      	movs	r1, #8
 8004b1e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2284      	movs	r2, #132	; 0x84
 8004b24:	2100      	movs	r1, #0
 8004b26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e02c      	b.n	8004b86 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69da      	ldr	r2, [r3, #28]
 8004b32:	2380      	movs	r3, #128	; 0x80
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	401a      	ands	r2, r3
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d112      	bne.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2280      	movs	r2, #128	; 0x80
 8004b46:	0112      	lsls	r2, r2, #4
 8004b48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f000 f81f 	bl	8004b90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2290      	movs	r2, #144	; 0x90
 8004b56:	2120      	movs	r1, #32
 8004b58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2284      	movs	r2, #132	; 0x84
 8004b5e:	2100      	movs	r1, #0
 8004b60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e00f      	b.n	8004b86 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	425a      	negs	r2, r3
 8004b76:	4153      	adcs	r3, r2
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	001a      	movs	r2, r3
 8004b7c:	1dfb      	adds	r3, r7, #7
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d09e      	beq.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	0018      	movs	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b004      	add	sp, #16
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08e      	sub	sp, #56	; 0x38
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b98:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9c:	617b      	str	r3, [r7, #20]
  return(result);
 8004b9e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	f383 8810 	msr	PRIMASK, r3
}
 8004bac:	46c0      	nop			; (mov r8, r8)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4926      	ldr	r1, [pc, #152]	; (8004c54 <UART_EndRxTransfer+0xc4>)
 8004bba:	400a      	ands	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	f383 8810 	msr	PRIMASK, r3
}
 8004bc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bca:	f3ef 8310 	mrs	r3, PRIMASK
 8004bce:	623b      	str	r3, [r7, #32]
  return(result);
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bd2:	633b      	str	r3, [r7, #48]	; 0x30
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	f383 8810 	msr	PRIMASK, r3
}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	491b      	ldr	r1, [pc, #108]	; (8004c58 <UART_EndRxTransfer+0xc8>)
 8004bec:	400a      	ands	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	f383 8810 	msr	PRIMASK, r3
}
 8004bfa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d118      	bne.n	8004c36 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c04:	f3ef 8310 	mrs	r3, PRIMASK
 8004c08:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0e:	2301      	movs	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f383 8810 	msr	PRIMASK, r3
}
 8004c18:	46c0      	nop			; (mov r8, r8)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2110      	movs	r1, #16
 8004c26:	438a      	bics	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f383 8810 	msr	PRIMASK, r3
}
 8004c34:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	228c      	movs	r2, #140	; 0x8c
 8004c3a:	2120      	movs	r1, #32
 8004c3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b00e      	add	sp, #56	; 0x38
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	fffffedf 	.word	0xfffffedf
 8004c58:	effffffe 	.word	0xeffffffe

08004c5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2284      	movs	r2, #132	; 0x84
 8004c68:	5c9b      	ldrb	r3, [r3, r2]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_UARTEx_DisableFifoMode+0x16>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e027      	b.n	8004cc2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2284      	movs	r2, #132	; 0x84
 8004c76:	2101      	movs	r1, #1
 8004c78:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2288      	movs	r2, #136	; 0x88
 8004c7e:	2124      	movs	r1, #36	; 0x24
 8004c80:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2101      	movs	r1, #1
 8004c96:	438a      	bics	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a0b      	ldr	r2, [pc, #44]	; (8004ccc <HAL_UARTEx_DisableFifoMode+0x70>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2288      	movs	r2, #136	; 0x88
 8004cb4:	2120      	movs	r1, #32
 8004cb6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2284      	movs	r2, #132	; 0x84
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	b004      	add	sp, #16
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	dfffffff 	.word	0xdfffffff

08004cd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2284      	movs	r2, #132	; 0x84
 8004cde:	5c9b      	ldrb	r3, [r3, r2]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e02e      	b.n	8004d46 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2284      	movs	r2, #132	; 0x84
 8004cec:	2101      	movs	r1, #1
 8004cee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2288      	movs	r2, #136	; 0x88
 8004cf4:	2124      	movs	r1, #36	; 0x24
 8004cf6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	438a      	bics	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	08d9      	lsrs	r1, r3, #3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	0018      	movs	r0, r3
 8004d28:	f000 f854 	bl	8004dd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2288      	movs	r2, #136	; 0x88
 8004d38:	2120      	movs	r1, #32
 8004d3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2284      	movs	r2, #132	; 0x84
 8004d40:	2100      	movs	r1, #0
 8004d42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	0018      	movs	r0, r3
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b004      	add	sp, #16
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2284      	movs	r2, #132	; 0x84
 8004d5e:	5c9b      	ldrb	r3, [r3, r2]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e02f      	b.n	8004dc8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2284      	movs	r2, #132	; 0x84
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2288      	movs	r2, #136	; 0x88
 8004d74:	2124      	movs	r1, #36	; 0x24
 8004d76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	438a      	bics	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	4a0e      	ldr	r2, [pc, #56]	; (8004dd0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	0018      	movs	r0, r3
 8004daa:	f000 f813 	bl	8004dd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2288      	movs	r2, #136	; 0x88
 8004dba:	2120      	movs	r1, #32
 8004dbc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2284      	movs	r2, #132	; 0x84
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	0018      	movs	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b004      	add	sp, #16
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	f1ffffff 	.word	0xf1ffffff

08004dd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d108      	bne.n	8004df6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	226a      	movs	r2, #106	; 0x6a
 8004de8:	2101      	movs	r1, #1
 8004dea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2268      	movs	r2, #104	; 0x68
 8004df0:	2101      	movs	r1, #1
 8004df2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004df4:	e043      	b.n	8004e7e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004df6:	260f      	movs	r6, #15
 8004df8:	19bb      	adds	r3, r7, r6
 8004dfa:	2208      	movs	r2, #8
 8004dfc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004dfe:	200e      	movs	r0, #14
 8004e00:	183b      	adds	r3, r7, r0
 8004e02:	2208      	movs	r2, #8
 8004e04:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	0e5b      	lsrs	r3, r3, #25
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	240d      	movs	r4, #13
 8004e12:	193b      	adds	r3, r7, r4
 8004e14:	2107      	movs	r1, #7
 8004e16:	400a      	ands	r2, r1
 8004e18:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	0f5b      	lsrs	r3, r3, #29
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	250c      	movs	r5, #12
 8004e26:	197b      	adds	r3, r7, r5
 8004e28:	2107      	movs	r1, #7
 8004e2a:	400a      	ands	r2, r1
 8004e2c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e2e:	183b      	adds	r3, r7, r0
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	197a      	adds	r2, r7, r5
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	4914      	ldr	r1, [pc, #80]	; (8004e88 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e38:	5c8a      	ldrb	r2, [r1, r2]
 8004e3a:	435a      	muls	r2, r3
 8004e3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e3e:	197b      	adds	r3, r7, r5
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <UARTEx_SetNbDataToProcess+0xb8>)
 8004e44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e46:	0019      	movs	r1, r3
 8004e48:	f7fb f9e6 	bl	8000218 <__divsi3>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	b299      	uxth	r1, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	226a      	movs	r2, #106	; 0x6a
 8004e54:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e56:	19bb      	adds	r3, r7, r6
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	193a      	adds	r2, r7, r4
 8004e5c:	7812      	ldrb	r2, [r2, #0]
 8004e5e:	490a      	ldr	r1, [pc, #40]	; (8004e88 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e60:	5c8a      	ldrb	r2, [r1, r2]
 8004e62:	435a      	muls	r2, r3
 8004e64:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e66:	193b      	adds	r3, r7, r4
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <UARTEx_SetNbDataToProcess+0xb8>)
 8004e6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e6e:	0019      	movs	r1, r3
 8004e70:	f7fb f9d2 	bl	8000218 <__divsi3>
 8004e74:	0003      	movs	r3, r0
 8004e76:	b299      	uxth	r1, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2268      	movs	r2, #104	; 0x68
 8004e7c:	5299      	strh	r1, [r3, r2]
}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b005      	add	sp, #20
 8004e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	080055f0 	.word	0x080055f0
 8004e8c:	080055f8 	.word	0x080055f8

08004e90 <nrf_read_reg>:
 */

#include "NRF24L01.h"

uint8_t nrf_read_reg(uint8_t reg)
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	0002      	movs	r2, r0
 8004e98:	1dfb      	adds	r3, r7, #7
 8004e9a:	701a      	strb	r2, [r3, #0]
//    HAL_SPI_Transmit(&hspi1, &command, 1, 100);
//    HAL_SPI_Receive(&hspi1, &status, 1, 100);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
//
//    return status;
	uint8_t command = NRF24_CMD_R_REGISTER | reg;
 8004e9c:	240f      	movs	r4, #15
 8004e9e:	193b      	adds	r3, r7, r4
 8004ea0:	1dfa      	adds	r2, r7, #7
 8004ea2:	7812      	ldrb	r2, [r2, #0]
 8004ea4:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t data;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004ea6:	23a0      	movs	r3, #160	; 0xa0
 8004ea8:	05db      	lsls	r3, r3, #23
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2110      	movs	r1, #16
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f7fc fbc6 	bl	8001640 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8004eb4:	230e      	movs	r3, #14
 8004eb6:	18fa      	adds	r2, r7, r3
 8004eb8:	1939      	adds	r1, r7, r4
 8004eba:	480e      	ldr	r0, [pc, #56]	; (8004ef4 <nrf_read_reg+0x64>)
 8004ebc:	23fa      	movs	r3, #250	; 0xfa
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f7fd ff0c 	bl	8002ce0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&hspi1, &data, 1, 2000);
 8004ec8:	23fa      	movs	r3, #250	; 0xfa
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	240d      	movs	r4, #13
 8004ece:	1939      	adds	r1, r7, r4
 8004ed0:	4808      	ldr	r0, [pc, #32]	; (8004ef4 <nrf_read_reg+0x64>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f7fd fdb2 	bl	8002a3c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004ed8:	23a0      	movs	r3, #160	; 0xa0
 8004eda:	05db      	lsls	r3, r3, #23
 8004edc:	2201      	movs	r2, #1
 8004ede:	2110      	movs	r1, #16
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7fc fbad 	bl	8001640 <HAL_GPIO_WritePin>
	return data;
 8004ee6:	193b      	adds	r3, r7, r4
 8004ee8:	781b      	ldrb	r3, [r3, #0]

}
 8004eea:	0018      	movs	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b005      	add	sp, #20
 8004ef0:	bd90      	pop	{r4, r7, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	200000a4 	.word	0x200000a4

08004ef8 <nrf_read_reg_multi>:

void nrf_read_reg_multi (uint8_t reg, uint8_t *data, int size){
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b089      	sub	sp, #36	; 0x24
 8004efc:	af02      	add	r7, sp, #8
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	210f      	movs	r1, #15
 8004f04:	187b      	adds	r3, r7, r1
 8004f06:	1c02      	adds	r2, r0, #0
 8004f08:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Receive(&hspi1, data, size, 1000);

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
    */

	uint8_t command = NRF24_CMD_R_REGISTER | reg;
 8004f0a:	2413      	movs	r4, #19
 8004f0c:	193b      	adds	r3, r7, r4
 8004f0e:	187a      	adds	r2, r7, r1
 8004f10:	7812      	ldrb	r2, [r2, #0]
 8004f12:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004f14:	23a0      	movs	r3, #160	; 0xa0
 8004f16:	05db      	lsls	r3, r3, #23
 8004f18:	2201      	movs	r2, #1
 8004f1a:	2110      	movs	r1, #16
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f7fc fb8f 	bl	8001640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004f22:	23a0      	movs	r3, #160	; 0xa0
 8004f24:	05db      	lsls	r3, r3, #23
 8004f26:	2200      	movs	r2, #0
 8004f28:	2110      	movs	r1, #16
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f7fc fb88 	bl	8001640 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8004f30:	2312      	movs	r3, #18
 8004f32:	18fa      	adds	r2, r7, r3
 8004f34:	1939      	adds	r1, r7, r4
 8004f36:	4812      	ldr	r0, [pc, #72]	; (8004f80 <nrf_read_reg_multi+0x88>)
 8004f38:	23fa      	movs	r3, #250	; 0xfa
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f7fd fece 	bl	8002ce0 <HAL_SPI_TransmitReceive>
	for(int i = 0; i<size; i++)
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	e00b      	b.n	8004f62 <nrf_read_reg_multi+0x6a>
		HAL_SPI_Receive(&hspi1, &data[i], 1, 2000);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	18d1      	adds	r1, r2, r3
 8004f50:	23fa      	movs	r3, #250	; 0xfa
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	480a      	ldr	r0, [pc, #40]	; (8004f80 <nrf_read_reg_multi+0x88>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	f7fd fd70 	bl	8002a3c <HAL_SPI_Receive>
	for(int i = 0; i<size; i++)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	dbef      	blt.n	8004f4a <nrf_read_reg_multi+0x52>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004f6a:	23a0      	movs	r3, #160	; 0xa0
 8004f6c:	05db      	lsls	r3, r3, #23
 8004f6e:	2201      	movs	r2, #1
 8004f70:	2110      	movs	r1, #16
 8004f72:	0018      	movs	r0, r3
 8004f74:	f7fc fb64 	bl	8001640 <HAL_GPIO_WritePin>
}
 8004f78:	46c0      	nop			; (mov r8, r8)
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	b007      	add	sp, #28
 8004f7e:	bd90      	pop	{r4, r7, pc}
 8004f80:	200000a4 	.word	0x200000a4

08004f84 <nrf_write_reg>:

void nrf_write_reg(uint8_t reg, uint8_t value)
{
 8004f84:	b5b0      	push	{r4, r5, r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	1dfb      	adds	r3, r7, #7
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	1dbb      	adds	r3, r7, #6
 8004f92:	1c0a      	adds	r2, r1, #0
 8004f94:	701a      	strb	r2, [r3, #0]
//
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);

	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 8004f96:	1dfb      	adds	r3, r7, #7
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	240f      	movs	r4, #15
 8004fa2:	193b      	adds	r3, r7, r4
 8004fa4:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t write_val = value;
 8004fa6:	250d      	movs	r5, #13
 8004fa8:	197b      	adds	r3, r7, r5
 8004faa:	1dba      	adds	r2, r7, #6
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004fb0:	23a0      	movs	r3, #160	; 0xa0
 8004fb2:	05db      	lsls	r3, r3, #23
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2110      	movs	r1, #16
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7fc fb41 	bl	8001640 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8004fbe:	230e      	movs	r3, #14
 8004fc0:	18fa      	adds	r2, r7, r3
 8004fc2:	1939      	adds	r1, r7, r4
 8004fc4:	480c      	ldr	r0, [pc, #48]	; (8004ff8 <nrf_write_reg+0x74>)
 8004fc6:	23fa      	movs	r3, #250	; 0xfa
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f7fd fe87 	bl	8002ce0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &write_val, 1, 2000);
 8004fd2:	23fa      	movs	r3, #250	; 0xfa
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	1979      	adds	r1, r7, r5
 8004fd8:	4807      	ldr	r0, [pc, #28]	; (8004ff8 <nrf_write_reg+0x74>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f7fd fbce 	bl	800277c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004fe0:	23a0      	movs	r3, #160	; 0xa0
 8004fe2:	05db      	lsls	r3, r3, #23
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	2110      	movs	r1, #16
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f7fc fb29 	bl	8001640 <HAL_GPIO_WritePin>

}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b004      	add	sp, #16
 8004ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	200000a4 	.word	0x200000a4

08004ffc <nrf_write_reg_multi>:

void nrf_write_reg_multi(uint8_t reg, uint8_t *data, int size)
{
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b089      	sub	sp, #36	; 0x24
 8005000:	af02      	add	r7, sp, #8
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	210f      	movs	r1, #15
 8005008:	187b      	adds	r3, r7, r1
 800500a:	1c02      	adds	r2, r0, #0
 800500c:	701a      	strb	r2, [r3, #0]
	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 800500e:	187b      	adds	r3, r7, r1
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2220      	movs	r2, #32
 8005014:	4313      	orrs	r3, r2
 8005016:	b2da      	uxtb	r2, r3
 8005018:	2413      	movs	r4, #19
 800501a:	193b      	adds	r3, r7, r4
 800501c:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	//uint8_t write_val = value;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 800501e:	23a0      	movs	r3, #160	; 0xa0
 8005020:	05db      	lsls	r3, r3, #23
 8005022:	2200      	movs	r2, #0
 8005024:	2110      	movs	r1, #16
 8005026:	0018      	movs	r0, r3
 8005028:	f7fc fb0a 	bl	8001640 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 800502c:	2312      	movs	r3, #18
 800502e:	18fa      	adds	r2, r7, r3
 8005030:	1939      	adds	r1, r7, r4
 8005032:	4812      	ldr	r0, [pc, #72]	; (800507c <nrf_write_reg_multi+0x80>)
 8005034:	23fa      	movs	r3, #250	; 0xfa
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	2301      	movs	r3, #1
 800503c:	f7fd fe50 	bl	8002ce0 <HAL_SPI_TransmitReceive>
	for (int i = 0; i <size; i++)
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	e00b      	b.n	800505e <nrf_write_reg_multi+0x62>
		HAL_SPI_Transmit(&hspi1, &data[i], 1, 2000);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	18d1      	adds	r1, r2, r3
 800504c:	23fa      	movs	r3, #250	; 0xfa
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	480a      	ldr	r0, [pc, #40]	; (800507c <nrf_write_reg_multi+0x80>)
 8005052:	2201      	movs	r2, #1
 8005054:	f7fd fb92 	bl	800277c <HAL_SPI_Transmit>
	for (int i = 0; i <size; i++)
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	3301      	adds	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	429a      	cmp	r2, r3
 8005064:	dbef      	blt.n	8005046 <nrf_write_reg_multi+0x4a>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8005066:	23a0      	movs	r3, #160	; 0xa0
 8005068:	05db      	lsls	r3, r3, #23
 800506a:	2201      	movs	r2, #1
 800506c:	2110      	movs	r1, #16
 800506e:	0018      	movs	r0, r3
 8005070:	f7fc fae6 	bl	8001640 <HAL_GPIO_WritePin>

}
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b007      	add	sp, #28
 800507a:	bd90      	pop	{r4, r7, pc}
 800507c:	200000a4 	.word	0x200000a4

08005080 <nrf_send_cmd>:

void nrf_send_cmd (uint8_t cmd){
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	0002      	movs	r2, r0
 8005088:	1dfb      	adds	r3, r7, #7
 800508a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 800508c:	23a0      	movs	r3, #160	; 0xa0
 800508e:	05db      	lsls	r3, r3, #23
 8005090:	2200      	movs	r2, #0
 8005092:	2110      	movs	r1, #16
 8005094:	0018      	movs	r0, r3
 8005096:	f7fc fad3 	bl	8001640 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 800509a:	1df9      	adds	r1, r7, #7
 800509c:	4807      	ldr	r0, [pc, #28]	; (80050bc <nrf_send_cmd+0x3c>)
 800509e:	2364      	movs	r3, #100	; 0x64
 80050a0:	2201      	movs	r2, #1
 80050a2:	f7fd fb6b 	bl	800277c <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 80050a6:	23a0      	movs	r3, #160	; 0xa0
 80050a8:	05db      	lsls	r3, r3, #23
 80050aa:	2201      	movs	r2, #1
 80050ac:	2110      	movs	r1, #16
 80050ae:	0018      	movs	r0, r3
 80050b0:	f7fc fac6 	bl	8001640 <HAL_GPIO_WritePin>
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b002      	add	sp, #8
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	200000a4 	.word	0x200000a4

080050c0 <nrf_init>:

void nrf_init(void){
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80050c4:	23a0      	movs	r3, #160	; 0xa0
 80050c6:	05db      	lsls	r3, r3, #23
 80050c8:	2200      	movs	r2, #0
 80050ca:	2108      	movs	r1, #8
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7fc fab7 	bl	8001640 <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_CONFIG, 0);
 80050d2:	2100      	movs	r1, #0
 80050d4:	2000      	movs	r0, #0
 80050d6:	f7ff ff55 	bl	8004f84 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_AA, 0); //Turn off auto ack
 80050da:	2100      	movs	r1, #0
 80050dc:	2001      	movs	r0, #1
 80050de:	f7ff ff51 	bl	8004f84 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_RXADDR, 0); //Not enabling any data pipe
 80050e2:	2100      	movs	r1, #0
 80050e4:	2002      	movs	r0, #2
 80050e6:	f7ff ff4d 	bl	8004f84 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_AW, 0x03); //5 bytes for TX/RX address
 80050ea:	2103      	movs	r1, #3
 80050ec:	2003      	movs	r0, #3
 80050ee:	f7ff ff49 	bl	8004f84 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_RETR, 0); //No retransmission
 80050f2:	2100      	movs	r1, #0
 80050f4:	2004      	movs	r0, #4
 80050f6:	f7ff ff45 	bl	8004f84 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_CH, 0); //
 80050fa:	2100      	movs	r1, #0
 80050fc:	2005      	movs	r0, #5
 80050fe:	f7ff ff41 	bl	8004f84 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_SETUP, 0x0E); //Power = 0dB, data rate = 2Mbps
 8005102:	210e      	movs	r1, #14
 8005104:	2006      	movs	r0, #6
 8005106:	f7ff ff3d 	bl	8004f84 <nrf_write_reg>

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800510a:	23a0      	movs	r3, #160	; 0xa0
 800510c:	05db      	lsls	r3, r3, #23
 800510e:	2200      	movs	r2, #0
 8005110:	2108      	movs	r1, #8
 8005112:	0018      	movs	r0, r3
 8005114:	f7fc fa94 	bl	8001640 <HAL_GPIO_WritePin>

}
 8005118:	46c0      	nop			; (mov r8, r8)
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <nrf_rx_mode>:
    return 0;


}

void nrf_rx_mode(uint8_t *addr, uint8_t channel){
 800511e:	b5b0      	push	{r4, r5, r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	000a      	movs	r2, r1
 8005128:	1cfb      	adds	r3, r7, #3
 800512a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800512c:	23a0      	movs	r3, #160	; 0xa0
 800512e:	05db      	lsls	r3, r3, #23
 8005130:	2200      	movs	r2, #0
 8005132:	2108      	movs	r1, #8
 8005134:	0018      	movs	r0, r3
 8005136:	f7fc fa83 	bl	8001640 <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_RF_CH, channel);
 800513a:	1cfb      	adds	r3, r7, #3
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	0019      	movs	r1, r3
 8005140:	2005      	movs	r0, #5
 8005142:	f7ff ff1f 	bl	8004f84 <nrf_write_reg>

    uint8_t enrxaddr = nrf_read_reg(NRF24_REG_EN_RXADDR);
 8005146:	250f      	movs	r5, #15
 8005148:	197c      	adds	r4, r7, r5
 800514a:	2002      	movs	r0, #2
 800514c:	f7ff fea0 	bl	8004e90 <nrf_read_reg>
 8005150:	0003      	movs	r3, r0
 8005152:	7023      	strb	r3, [r4, #0]
    enrxaddr = enrxaddr | (1<<1);
 8005154:	0028      	movs	r0, r5
 8005156:	183b      	adds	r3, r7, r0
 8005158:	183a      	adds	r2, r7, r0
 800515a:	7812      	ldrb	r2, [r2, #0]
 800515c:	2102      	movs	r1, #2
 800515e:	430a      	orrs	r2, r1
 8005160:	701a      	strb	r2, [r3, #0]
    nrf_write_reg(NRF24_REG_EN_RXADDR, enrxaddr); //select data pipe 1
 8005162:	183b      	adds	r3, r7, r0
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	0019      	movs	r1, r3
 8005168:	2002      	movs	r0, #2
 800516a:	f7ff ff0b 	bl	8004f84 <nrf_write_reg>
    nrf_write_reg_multi(NRF24_REG_RX_ADDR_P1, addr, 5); //Write the address
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2205      	movs	r2, #5
 8005172:	0019      	movs	r1, r3
 8005174:	200b      	movs	r0, #11
 8005176:	f7ff ff41 	bl	8004ffc <nrf_write_reg_multi>

    nrf_write_reg(NRF24_REG_RX_PW_P1, 32); //Set to 32 bit payload
 800517a:	2120      	movs	r1, #32
 800517c:	2012      	movs	r0, #18
 800517e:	f7ff ff01 	bl	8004f84 <nrf_write_reg>

    uint8_t config = nrf_read_reg(NRF24_REG_CONFIG);
 8005182:	250e      	movs	r5, #14
 8005184:	197c      	adds	r4, r7, r5
 8005186:	2000      	movs	r0, #0
 8005188:	f7ff fe82 	bl	8004e90 <nrf_read_reg>
 800518c:	0003      	movs	r3, r0
 800518e:	7023      	strb	r3, [r4, #0]
    config = config | (1<<1) | (1<<0);
 8005190:	0028      	movs	r0, r5
 8005192:	183b      	adds	r3, r7, r0
 8005194:	183a      	adds	r2, r7, r0
 8005196:	7812      	ldrb	r2, [r2, #0]
 8005198:	2103      	movs	r1, #3
 800519a:	430a      	orrs	r2, r1
 800519c:	701a      	strb	r2, [r3, #0]
    nrf_write_reg(NRF24_REG_CONFIG, config);
 800519e:	183b      	adds	r3, r7, r0
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	0019      	movs	r1, r3
 80051a4:	2000      	movs	r0, #0
 80051a6:	f7ff feed 	bl	8004f84 <nrf_write_reg>

    //testing that I added
    uint8_t test = 0;
 80051aa:	210d      	movs	r1, #13
 80051ac:	187b      	adds	r3, r7, r1
 80051ae:	2200      	movs	r2, #0
 80051b0:	701a      	strb	r2, [r3, #0]
    test = nrf_read_reg(NRF24_REG_RF_SETUP);
 80051b2:	187c      	adds	r4, r7, r1
 80051b4:	2006      	movs	r0, #6
 80051b6:	f7ff fe6b 	bl	8004e90 <nrf_read_reg>
 80051ba:	0003      	movs	r3, r0
 80051bc:	7023      	strb	r3, [r4, #0]
    uint8_t test2[5] = {0};
 80051be:	2108      	movs	r1, #8
 80051c0:	187b      	adds	r3, r7, r1
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	2200      	movs	r2, #0
 80051c8:	711a      	strb	r2, [r3, #4]
    nrf_read_reg_multi(NRF24_REG_RX_ADDR_P1, test2, 5);
 80051ca:	187b      	adds	r3, r7, r1
 80051cc:	2205      	movs	r2, #5
 80051ce:	0019      	movs	r1, r3
 80051d0:	200b      	movs	r0, #11
 80051d2:	f7ff fe91 	bl	8004ef8 <nrf_read_reg_multi>

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80051d6:	23a0      	movs	r3, #160	; 0xa0
 80051d8:	05db      	lsls	r3, r3, #23
 80051da:	2201      	movs	r2, #1
 80051dc:	2108      	movs	r1, #8
 80051de:	0018      	movs	r0, r3
 80051e0:	f7fc fa2e 	bl	8001640 <HAL_GPIO_WritePin>
}
 80051e4:	46c0      	nop			; (mov r8, r8)
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b004      	add	sp, #16
 80051ea:	bdb0      	pop	{r4, r5, r7, pc}

080051ec <is_data_availible>:

uint8_t is_data_availible(int pipenum){
 80051ec:	b5b0      	push	{r4, r5, r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf_read_reg(NRF24_REG_STATUS);
 80051f4:	250f      	movs	r5, #15
 80051f6:	197c      	adds	r4, r7, r5
 80051f8:	2007      	movs	r0, #7
 80051fa:	f7ff fe49 	bl	8004e90 <nrf_read_reg>
 80051fe:	0003      	movs	r3, r0
 8005200:	7023      	strb	r3, [r4, #0]

	if((status & (1<<6)) && (status & (pipenum<<1))){
 8005202:	0029      	movs	r1, r5
 8005204:	187b      	adds	r3, r7, r1
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2240      	movs	r2, #64	; 0x40
 800520a:	4013      	ands	r3, r2
 800520c:	d00b      	beq.n	8005226 <is_data_availible+0x3a>
 800520e:	187b      	adds	r3, r7, r1
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	0052      	lsls	r2, r2, #1
 8005216:	4013      	ands	r3, r2
 8005218:	d005      	beq.n	8005226 <is_data_availible+0x3a>
		nrf_write_reg(NRF24_REG_STATUS,(1<<6));
 800521a:	2140      	movs	r1, #64	; 0x40
 800521c:	2007      	movs	r0, #7
 800521e:	f7ff feb1 	bl	8004f84 <nrf_write_reg>

		return 1;
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <is_data_availible+0x3c>
	}
	return 0;
 8005226:	2300      	movs	r3, #0
}
 8005228:	0018      	movs	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	b004      	add	sp, #16
 800522e:	bdb0      	pop	{r4, r5, r7, pc}

08005230 <nrf_receive>:

void nrf_receive(uint8_t *data){
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 8005238:	240f      	movs	r4, #15
 800523a:	193b      	adds	r3, r7, r4
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8005240:	23a0      	movs	r3, #160	; 0xa0
 8005242:	05db      	lsls	r3, r3, #23
 8005244:	2200      	movs	r2, #0
 8005246:	2110      	movs	r1, #16
 8005248:	0018      	movs	r0, r3
 800524a:	f7fc f9f9 	bl	8001640 <HAL_GPIO_WritePin>

    //TX command
    cmd = NRF24_CMD_R_RX_PAYLOAD;
 800524e:	193b      	adds	r3, r7, r4
 8005250:	2261      	movs	r2, #97	; 0x61
 8005252:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8005254:	1939      	adds	r1, r7, r4
 8005256:	4811      	ldr	r0, [pc, #68]	; (800529c <nrf_receive+0x6c>)
 8005258:	2364      	movs	r3, #100	; 0x64
 800525a:	2201      	movs	r2, #1
 800525c:	f7fd fa8e 	bl	800277c <HAL_SPI_Transmit>

    //TX data send
    HAL_SPI_Receive(&hspi1, data, 32, 1000);
 8005260:	23fa      	movs	r3, #250	; 0xfa
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	480d      	ldr	r0, [pc, #52]	; (800529c <nrf_receive+0x6c>)
 8005268:	2220      	movs	r2, #32
 800526a:	f7fd fbe7 	bl	8002a3c <HAL_SPI_Receive>


    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 800526e:	23a0      	movs	r3, #160	; 0xa0
 8005270:	05db      	lsls	r3, r3, #23
 8005272:	2201      	movs	r2, #1
 8005274:	2110      	movs	r1, #16
 8005276:	0018      	movs	r0, r3
 8005278:	f7fc f9e2 	bl	8001640 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 800527c:	2001      	movs	r0, #1
 800527e:	f7fb ffa3 	bl	80011c8 <HAL_Delay>

    cmd = NRF24_CMD_FLUSH_RX;
 8005282:	193b      	adds	r3, r7, r4
 8005284:	22e2      	movs	r2, #226	; 0xe2
 8005286:	701a      	strb	r2, [r3, #0]
    nrf_send_cmd(cmd);
 8005288:	193b      	adds	r3, r7, r4
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	0018      	movs	r0, r3
 800528e:	f7ff fef7 	bl	8005080 <nrf_send_cmd>


}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	46bd      	mov	sp, r7
 8005296:	b005      	add	sp, #20
 8005298:	bd90      	pop	{r4, r7, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	200000a4 	.word	0x200000a4

080052a0 <memset>:
 80052a0:	0003      	movs	r3, r0
 80052a2:	1882      	adds	r2, r0, r2
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d100      	bne.n	80052aa <memset+0xa>
 80052a8:	4770      	bx	lr
 80052aa:	7019      	strb	r1, [r3, #0]
 80052ac:	3301      	adds	r3, #1
 80052ae:	e7f9      	b.n	80052a4 <memset+0x4>

080052b0 <__libc_init_array>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	2600      	movs	r6, #0
 80052b4:	4c0c      	ldr	r4, [pc, #48]	; (80052e8 <__libc_init_array+0x38>)
 80052b6:	4d0d      	ldr	r5, [pc, #52]	; (80052ec <__libc_init_array+0x3c>)
 80052b8:	1b64      	subs	r4, r4, r5
 80052ba:	10a4      	asrs	r4, r4, #2
 80052bc:	42a6      	cmp	r6, r4
 80052be:	d109      	bne.n	80052d4 <__libc_init_array+0x24>
 80052c0:	2600      	movs	r6, #0
 80052c2:	f000 f823 	bl	800530c <_init>
 80052c6:	4c0a      	ldr	r4, [pc, #40]	; (80052f0 <__libc_init_array+0x40>)
 80052c8:	4d0a      	ldr	r5, [pc, #40]	; (80052f4 <__libc_init_array+0x44>)
 80052ca:	1b64      	subs	r4, r4, r5
 80052cc:	10a4      	asrs	r4, r4, #2
 80052ce:	42a6      	cmp	r6, r4
 80052d0:	d105      	bne.n	80052de <__libc_init_array+0x2e>
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	00b3      	lsls	r3, r6, #2
 80052d6:	58eb      	ldr	r3, [r5, r3]
 80052d8:	4798      	blx	r3
 80052da:	3601      	adds	r6, #1
 80052dc:	e7ee      	b.n	80052bc <__libc_init_array+0xc>
 80052de:	00b3      	lsls	r3, r6, #2
 80052e0:	58eb      	ldr	r3, [r5, r3]
 80052e2:	4798      	blx	r3
 80052e4:	3601      	adds	r6, #1
 80052e6:	e7f2      	b.n	80052ce <__libc_init_array+0x1e>
 80052e8:	08005608 	.word	0x08005608
 80052ec:	08005608 	.word	0x08005608
 80052f0:	0800560c 	.word	0x0800560c
 80052f4:	08005608 	.word	0x08005608

080052f8 <memcpy>:
 80052f8:	2300      	movs	r3, #0
 80052fa:	b510      	push	{r4, lr}
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d100      	bne.n	8005302 <memcpy+0xa>
 8005300:	bd10      	pop	{r4, pc}
 8005302:	5ccc      	ldrb	r4, [r1, r3]
 8005304:	54c4      	strb	r4, [r0, r3]
 8005306:	3301      	adds	r3, #1
 8005308:	e7f8      	b.n	80052fc <memcpy+0x4>
	...

0800530c <_init>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005312:	bc08      	pop	{r3}
 8005314:	469e      	mov	lr, r3
 8005316:	4770      	bx	lr

08005318 <_fini>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531e:	bc08      	pop	{r3}
 8005320:	469e      	mov	lr, r3
 8005322:	4770      	bx	lr
