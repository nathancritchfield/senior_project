
Remote_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f00  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc8  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c80  08006c80  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006c80  08006c80  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c80  08006c80  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000014  08006c9c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08006c9c  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c9c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000339a  00000000  00000000  00035d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  000390b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eef  00000000  00000000  0003a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189fd  00000000  00000000  0003b2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a052  00000000  00000000  00053cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097318  00000000  00000000  0006dd2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004494  00000000  00000000  00105048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001094dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000014 	.word	0x20000014
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005fa0 	.word	0x08005fa0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000018 	.word	0x20000018
 80000fc:	08005fa0 	.word	0x08005fa0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	230c      	movs	r3, #12
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f005 fda4 	bl	8005f48 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000400:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000402:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <MX_ADC1_Init+0xd0>)
 8000404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000406:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	05d2      	lsls	r2, r2, #23
 800040c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000414:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041a:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000422:	2204      	movs	r2, #4
 8000424:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000426:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000428:	2200      	movs	r2, #0
 800042a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800042c:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800042e:	2200      	movs	r2, #0
 8000430:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000434:	2200      	movs	r2, #0
 8000436:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000438:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800043a:	2201      	movs	r2, #1
 800043c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000440:	2220      	movs	r2, #32
 8000442:	2100      	movs	r1, #0
 8000444:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800044e:	2200      	movs	r2, #0
 8000450:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000454:	222c      	movs	r2, #44	; 0x2c
 8000456:	2100      	movs	r1, #0
 8000458:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800045c:	2200      	movs	r2, #0
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000462:	2200      	movs	r2, #0
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000468:	2200      	movs	r2, #0
 800046a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800046e:	223c      	movs	r2, #60	; 0x3c
 8000470:	2100      	movs	r1, #0
 8000472:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000476:	2200      	movs	r2, #0
 8000478:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800047c:	0018      	movs	r0, r3
 800047e:	f000 fee7 	bl	8001250 <HAL_ADC_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000486:	f000 f9e5 	bl	8000854 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <MX_ADC1_Init+0xd4>)
 800048e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049c:	1d3a      	adds	r2, r7, #4
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_ADC1_Init+0xcc>)
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 f96a 	bl	800177c <HAL_ADC_ConfigChannel>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004ac:	f000 f9d2 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000030 	.word	0x20000030
 80004bc:	40012400 	.word	0x40012400
 80004c0:	04000002 	.word	0x04000002

080004c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b08b      	sub	sp, #44	; 0x2c
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	2414      	movs	r4, #20
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	0018      	movs	r0, r3
 80004d2:	2314      	movs	r3, #20
 80004d4:	001a      	movs	r2, r3
 80004d6:	2100      	movs	r1, #0
 80004d8:	f005 fd36 	bl	8005f48 <memset>
  if(adcHandle->Instance==ADC1)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a18      	ldr	r2, [pc, #96]	; (8000544 <HAL_ADC_MspInit+0x80>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d129      	bne.n	800053a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004e6:	4b18      	ldr	r3, [pc, #96]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0349      	lsls	r1, r1, #13
 80004f0:	430a      	orrs	r2, r1
 80004f2:	641a      	str	r2, [r3, #64]	; 0x40
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	035b      	lsls	r3, r3, #13
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000508:	2101      	movs	r1, #1
 800050a:	430a      	orrs	r2, r1
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000512:	2201      	movs	r2, #1
 8000514:	4013      	ands	r3, r2
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Analog_In_Pin;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2202      	movs	r2, #2
 800051e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2203      	movs	r2, #3
 8000524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Analog_In_GPIO_Port, &GPIO_InitStruct);
 800052c:	193a      	adds	r2, r7, r4
 800052e:	23a0      	movs	r3, #160	; 0xa0
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fc33 	bl	8001da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b00b      	add	sp, #44	; 0x2c
 8000540:	bd90      	pop	{r4, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40012400 	.word	0x40012400
 8000548:	40021000 	.word	0x40021000

0800054c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b089      	sub	sp, #36	; 0x24
 8000550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	240c      	movs	r4, #12
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	2314      	movs	r3, #20
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f005 fcf3 	bl	8005f48 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b44      	ldr	r3, [pc, #272]	; (8000674 <MX_GPIO_Init+0x128>)
 8000564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000566:	4b43      	ldr	r3, [pc, #268]	; (8000674 <MX_GPIO_Init+0x128>)
 8000568:	2102      	movs	r1, #2
 800056a:	430a      	orrs	r2, r1
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
 800056e:	4b41      	ldr	r3, [pc, #260]	; (8000674 <MX_GPIO_Init+0x128>)
 8000570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000572:	2202      	movs	r2, #2
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b3e      	ldr	r3, [pc, #248]	; (8000674 <MX_GPIO_Init+0x128>)
 800057c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <MX_GPIO_Init+0x128>)
 8000580:	2104      	movs	r1, #4
 8000582:	430a      	orrs	r2, r1
 8000584:	635a      	str	r2, [r3, #52]	; 0x34
 8000586:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <MX_GPIO_Init+0x128>)
 8000588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058a:	2204      	movs	r2, #4
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b38      	ldr	r3, [pc, #224]	; (8000674 <MX_GPIO_Init+0x128>)
 8000594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000596:	4b37      	ldr	r3, [pc, #220]	; (8000674 <MX_GPIO_Init+0x128>)
 8000598:	2101      	movs	r1, #1
 800059a:	430a      	orrs	r2, r1
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
 800059e:	4b35      	ldr	r3, [pc, #212]	; (8000674 <MX_GPIO_Init+0x128>)
 80005a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a2:	2201      	movs	r2, #1
 80005a4:	4013      	ands	r3, r2
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|SPI1_CSN_Pin, GPIO_PIN_RESET);
 80005aa:	4933      	ldr	r1, [pc, #204]	; (8000678 <MX_GPIO_Init+0x12c>)
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <MX_GPIO_Init+0x130>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fd59 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	021b      	lsls	r3, r3, #8
 80005ba:	4831      	ldr	r0, [pc, #196]	; (8000680 <MX_GPIO_Init+0x134>)
 80005bc:	2200      	movs	r2, #0
 80005be:	0019      	movs	r1, r3
 80005c0:	f001 fd52 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80005c4:	492f      	ldr	r1, [pc, #188]	; (8000684 <MX_GPIO_Init+0x138>)
 80005c6:	23a0      	movs	r3, #160	; 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2200      	movs	r2, #0
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fd4b 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_Pin|SPI1_CSN_Pin;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <MX_GPIO_Init+0x12c>)
 80005d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2201      	movs	r2, #1
 80005dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	4a23      	ldr	r2, [pc, #140]	; (800067c <MX_GPIO_Init+0x130>)
 80005ee:	0019      	movs	r1, r3
 80005f0:	0010      	movs	r0, r2
 80005f2:	f001 fbd5 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DC_Pin;
 80005f6:	0021      	movs	r1, r4
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	0212      	lsls	r2, r2, #8
 80005fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	000c      	movs	r4, r1
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2201      	movs	r2, #1
 8000606:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000614:	193b      	adds	r3, r7, r4
 8000616:	4a1a      	ldr	r2, [pc, #104]	; (8000680 <MX_GPIO_Init+0x134>)
 8000618:	0019      	movs	r1, r3
 800061a:	0010      	movs	r0, r2
 800061c:	f001 fbc0 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RST_Pin|LED_Pin|NRF_CE_Pin;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <MX_GPIO_Init+0x138>)
 8000624:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	2201      	movs	r2, #1
 800062a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	193a      	adds	r2, r7, r4
 800063a:	23a0      	movs	r3, #160	; 0xa0
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fbad 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_In_Pin;
 8000646:	0021      	movs	r1, r4
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	0152      	lsls	r2, r2, #5
 800064e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_In_GPIO_Port, &GPIO_InitStruct);
 800065c:	187a      	adds	r2, r7, r1
 800065e:	23a0      	movs	r3, #160	; 0xa0
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fb9b 	bl	8001da0 <HAL_GPIO_Init>

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b009      	add	sp, #36	; 0x24
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000
 8000678:	00000201 	.word	0x00000201
 800067c:	50000400 	.word	0x50000400
 8000680:	50000800 	.word	0x50000800
 8000684:	00000888 	.word	0x00000888

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fbff 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f897 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f7ff ff59 	bl	800054c <MX_GPIO_Init>
  MX_ADC1_Init();
 800069a:	f7ff fea7 	bl	80003ec <MX_ADC1_Init>
  MX_SPI1_Init();
 800069e:	f000 f8df 	bl	8000860 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006a2:	f000 f91b 	bl	80008dc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80006a6:	f000 fb19 	bl	8000cdc <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80006aa:	f000 fa2f 	bl	8000b0c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //LCD1in28works();
  //LCD_1in28_test();

  uint64_t counter = 0;
 80006ae:	2200      	movs	r2, #0
 80006b0:	2300      	movs	r3, #0
 80006b2:	60ba      	str	r2, [r7, #8]
 80006b4:	60fb      	str	r3, [r7, #12]
  uint16_t raw = 0;
 80006b6:	1dbb      	adds	r3, r7, #6
 80006b8:	2200      	movs	r2, #0
 80006ba:	801a      	strh	r2, [r3, #0]


  	DEV_Module_Init();
 80006bc:	f004 fa3c 	bl	8004b38 <DEV_Module_Init>

  	LCD_1IN28_SetBackLight(1000);
 80006c0:	23fa      	movs	r3, #250	; 0xfa
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f005 fc2f 	bl	8005f28 <LCD_1IN28_SetBackLight>
  	LCD_1IN28_Init(VERTICAL);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f005 fb7c 	bl	8005dc8 <LCD_1IN28_Init>
   	//LCD_1IN28_Clear(BLACK);

  	Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, BLACK);
 80006d0:	2300      	movs	r3, #0
 80006d2:	2200      	movs	r2, #0
 80006d4:	21f0      	movs	r1, #240	; 0xf0
 80006d6:	20f0      	movs	r0, #240	; 0xf0
 80006d8:	f004 fa54 	bl	8004b84 <Paint_NewImage>

  	Paint_SetClearFuntion(LCD_1IN28_Clear);
 80006dc:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <main+0x118>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f004 fa9e 	bl	8004c20 <Paint_SetClearFuntion>
  	Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 80006e4:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <main+0x11c>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f004 faa8 	bl	8004c3c <Paint_SetDisplayFuntion>
  	Paint_DrawString_EN(70, 100, "LOADING...", &Font16, BLACK, DARKORANGE);
 80006ec:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <main+0x120>)
 80006ee:	4a2f      	ldr	r2, [pc, #188]	; (80007ac <main+0x124>)
 80006f0:	492f      	ldr	r1, [pc, #188]	; (80007b0 <main+0x128>)
 80006f2:	9101      	str	r1, [sp, #4]
 80006f4:	2100      	movs	r1, #0
 80006f6:	9100      	str	r1, [sp, #0]
 80006f8:	2164      	movs	r1, #100	; 0x64
 80006fa:	2046      	movs	r0, #70	; 0x46
 80006fc:	f004 ff06 	bl	800550c <Paint_DrawString_EN>

  	Paint_Clear(DARKBLUE);
 8000700:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <main+0x12c>)
 8000702:	0018      	movs	r0, r3
 8000704:	f004 fb88 	bl	8004e18 <Paint_Clear>
  	DEV_Delay_ms(100);
 8000708:	2064      	movs	r0, #100	; 0x64
 800070a:	f000 fc47 	bl	8000f9c <HAL_Delay>

  	Paint_DrawRectangle(115, 115, 136, 141, DARKRED, 2, 0);
 800070e:	2300      	movs	r3, #0
 8000710:	9302      	str	r3, [sp, #8]
 8000712:	2302      	movs	r3, #2
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <main+0x130>)
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	238d      	movs	r3, #141	; 0x8d
 800071c:	2288      	movs	r2, #136	; 0x88
 800071e:	2173      	movs	r1, #115	; 0x73
 8000720:	2073      	movs	r0, #115	; 0x73
 8000722:	f004 fd43 	bl	80051ac <Paint_DrawRectangle>
	  Paint_DrawNum(120, 120, counter, &Font16, DARKBLUE, DARKGREEN);
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <main+0x120>)
 800072a:	4924      	ldr	r1, [pc, #144]	; (80007bc <main+0x134>)
 800072c:	9101      	str	r1, [sp, #4]
 800072e:	4921      	ldr	r1, [pc, #132]	; (80007b4 <main+0x12c>)
 8000730:	9100      	str	r1, [sp, #0]
 8000732:	2178      	movs	r1, #120	; 0x78
 8000734:	2078      	movs	r0, #120	; 0x78
 8000736:	f004 ff67 	bl	8005608 <Paint_DrawNum>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //if(HAL_GPIO_ReadPin (Button_In_GPIO_Port, Button_In_Pin) == GPIO_PIN_RESET){
  	  	  HAL_ADC_Start(&hadc1);
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <main+0x138>)
 800073c:	0018      	movs	r0, r3
 800073e:	f000 ff2f 	bl	80015a0 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000742:	2301      	movs	r3, #1
 8000744:	425a      	negs	r2, r3
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <main+0x138>)
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f000 ff76 	bl	800163c <HAL_ADC_PollForConversion>
	      raw = HAL_ADC_GetValue(&hadc1);
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <main+0x138>)
 8000752:	0018      	movs	r0, r3
 8000754:	f001 f806 	bl	8001764 <HAL_ADC_GetValue>
 8000758:	0002      	movs	r2, r0
 800075a:	1dbb      	adds	r3, r7, #6
 800075c:	801a      	strh	r2, [r3, #0]
		  counter++;
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2001      	movs	r0, #1
 8000764:	2100      	movs	r1, #0
 8000766:	1812      	adds	r2, r2, r0
 8000768:	414b      	adcs	r3, r1
 800076a:	60ba      	str	r2, [r7, #8]
 800076c:	60fb      	str	r3, [r7, #12]
		  Paint_DrawNum(120, 100, raw, &Font16, DARKBLUE, DARKGREEN);
 800076e:	1dbb      	adds	r3, r7, #6
 8000770:	881a      	ldrh	r2, [r3, #0]
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <main+0x120>)
 8000774:	4911      	ldr	r1, [pc, #68]	; (80007bc <main+0x134>)
 8000776:	9101      	str	r1, [sp, #4]
 8000778:	490e      	ldr	r1, [pc, #56]	; (80007b4 <main+0x12c>)
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	2164      	movs	r1, #100	; 0x64
 800077e:	2078      	movs	r0, #120	; 0x78
 8000780:	f004 ff42 	bl	8005608 <Paint_DrawNum>
		  Paint_DrawNum(120, 120, counter, &Font16, DARKBLUE, DARKGREEN);
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <main+0x120>)
 8000788:	490c      	ldr	r1, [pc, #48]	; (80007bc <main+0x134>)
 800078a:	9101      	str	r1, [sp, #4]
 800078c:	4909      	ldr	r1, [pc, #36]	; (80007b4 <main+0x12c>)
 800078e:	9100      	str	r1, [sp, #0]
 8000790:	2178      	movs	r1, #120	; 0x78
 8000792:	2078      	movs	r0, #120	; 0x78
 8000794:	f004 ff38 	bl	8005608 <Paint_DrawNum>
		  HAL_Delay(250);
 8000798:	20fa      	movs	r0, #250	; 0xfa
 800079a:	f000 fbff 	bl	8000f9c <HAL_Delay>
  	  	  HAL_ADC_Start(&hadc1);
 800079e:	e7cc      	b.n	800073a <main+0xb2>
 80007a0:	08005e77 	.word	0x08005e77
 80007a4:	08005ee3 	.word	0x08005ee3
 80007a8:	2000000c 	.word	0x2000000c
 80007ac:	08005fb8 	.word	0x08005fb8
 80007b0:	0000ab84 	.word	0x0000ab84
 80007b4:	00000908 	.word	0x00000908
 80007b8:	00006862 	.word	0x00006862
 80007bc:	00004c42 	.word	0x00004c42
 80007c0:	20000030 	.word	0x20000030

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b093      	sub	sp, #76	; 0x4c
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	2414      	movs	r4, #20
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	0018      	movs	r0, r3
 80007d0:	2334      	movs	r3, #52	; 0x34
 80007d2:	001a      	movs	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f005 fbb7 	bl	8005f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	0018      	movs	r0, r3
 80007de:	2310      	movs	r3, #16
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f005 fbb0 	bl	8005f48 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 fc59 	bl	80020a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2202      	movs	r2, #2
 80007f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	0052      	lsls	r2, r2, #1
 80007fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	193b      	adds	r3, r7, r4
 8000808:	2240      	movs	r2, #64	; 0x40
 800080a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	193b      	adds	r3, r7, r4
 8000814:	0018      	movs	r0, r3
 8000816:	f001 fc91 	bl	800213c <HAL_RCC_OscConfig>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800081e:	f000 f819 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2100      	movs	r1, #0
 800083e:	0018      	movs	r0, r3
 8000840:	f001 ff8c 	bl	800275c <HAL_RCC_ClockConfig>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000848:	f000 f804 	bl	8000854 <Error_Handler>
  }
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b013      	add	sp, #76	; 0x4c
 8000852:	bd90      	pop	{r4, r7, pc}

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_SPI1_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_SPI1_Init+0x74>)
 800086c:	2282      	movs	r2, #130	; 0x82
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI1_Init+0x74>)
 800087a:	22e0      	movs	r2, #224	; 0xe0
 800087c:	00d2      	lsls	r2, r2, #3
 800087e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI1_Init+0x74>)
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0092      	lsls	r2, r2, #2
 8000892:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008ae:	2207      	movs	r2, #7
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008ba:	2208      	movs	r2, #8
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <MX_SPI1_Init+0x74>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f002 fa1b 	bl	8002cfc <HAL_SPI_Init>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f7ff ffc3 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000094 	.word	0x20000094
 80008d8:	40013000 	.word	0x40013000

080008dc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_SPI2_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_SPI2_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_SPI2_Init+0x74>)
 80008e8:	2282      	movs	r2, #130	; 0x82
 80008ea:	0052      	lsls	r2, r2, #1
 80008ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_SPI2_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI2_Init+0x74>)
 80008f6:	22e0      	movs	r2, #224	; 0xe0
 80008f8:	00d2      	lsls	r2, r2, #3
 80008fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI2_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_SPI2_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI2_Init+0x74>)
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	0092      	lsls	r2, r2, #2
 800090e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI2_Init+0x74>)
 8000912:	2208      	movs	r2, #8
 8000914:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI2_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI2_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_SPI2_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI2_Init+0x74>)
 800092a:	2207      	movs	r2, #7
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_SPI2_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI2_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <MX_SPI2_Init+0x74>)
 800093c:	0018      	movs	r0, r3
 800093e:	f002 f9dd 	bl	8002cfc <HAL_SPI_Init>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000946:	f7ff ff85 	bl	8000854 <Error_Handler>
  /* USER CODE BEGIN SPI2_Init 2 */
//ALways change line 77 to
  //hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  /* USER CODE END SPI2_Init 2 */

}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200000f8 	.word	0x200000f8
 8000954:	40003800 	.word	0x40003800

08000958 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b08d      	sub	sp, #52	; 0x34
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	241c      	movs	r4, #28
 8000962:	193b      	adds	r3, r7, r4
 8000964:	0018      	movs	r0, r3
 8000966:	2314      	movs	r3, #20
 8000968:	001a      	movs	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f005 faec 	bl	8005f48 <memset>
  if(spiHandle->Instance==SPI1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a42      	ldr	r2, [pc, #264]	; (8000a80 <HAL_SPI_MspInit+0x128>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d131      	bne.n	80009de <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800097a:	4b42      	ldr	r3, [pc, #264]	; (8000a84 <HAL_SPI_MspInit+0x12c>)
 800097c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800097e:	4b41      	ldr	r3, [pc, #260]	; (8000a84 <HAL_SPI_MspInit+0x12c>)
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	0149      	lsls	r1, r1, #5
 8000984:	430a      	orrs	r2, r1
 8000986:	641a      	str	r2, [r3, #64]	; 0x40
 8000988:	4b3e      	ldr	r3, [pc, #248]	; (8000a84 <HAL_SPI_MspInit+0x12c>)
 800098a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	015b      	lsls	r3, r3, #5
 8000990:	4013      	ands	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
 8000994:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <HAL_SPI_MspInit+0x12c>)
 8000998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800099a:	4b3a      	ldr	r3, [pc, #232]	; (8000a84 <HAL_SPI_MspInit+0x12c>)
 800099c:	2101      	movs	r1, #1
 800099e:	430a      	orrs	r2, r1
 80009a0:	635a      	str	r2, [r3, #52]	; 0x34
 80009a2:	4b38      	ldr	r3, [pc, #224]	; (8000a84 <HAL_SPI_MspInit+0x12c>)
 80009a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a6:	2201      	movs	r2, #1
 80009a8:	4013      	ands	r3, r2
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80009ae:	0021      	movs	r1, r4
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2264      	movs	r2, #100	; 0x64
 80009b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2202      	movs	r2, #2
 80009ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	187a      	adds	r2, r7, r1
 80009d0:	23a0      	movs	r3, #160	; 0xa0
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 f9e2 	bl	8001da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80009dc:	e04c      	b.n	8000a78 <HAL_SPI_MspInit+0x120>
  else if(spiHandle->Instance==SPI2)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a29      	ldr	r2, [pc, #164]	; (8000a88 <HAL_SPI_MspInit+0x130>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d147      	bne.n	8000a78 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <HAL_SPI_MspInit+0x12c>)
 80009ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009ec:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <HAL_SPI_MspInit+0x12c>)
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	01c9      	lsls	r1, r1, #7
 80009f2:	430a      	orrs	r2, r1
 80009f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <HAL_SPI_MspInit+0x12c>)
 80009f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	01db      	lsls	r3, r3, #7
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <HAL_SPI_MspInit+0x12c>)
 8000a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <HAL_SPI_MspInit+0x12c>)
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_SPI_MspInit+0x12c>)
 8000a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a14:	2201      	movs	r2, #1
 8000a16:	4013      	ands	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a1c:	241c      	movs	r4, #28
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2202      	movs	r2, #2
 8000a28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2202      	movs	r2, #2
 8000a34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	193a      	adds	r2, r7, r4
 8000a3e:	23a0      	movs	r3, #160	; 0xa0
 8000a40:	05db      	lsls	r3, r3, #23
 8000a42:	0011      	movs	r1, r2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 f9ab 	bl	8001da0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a4a:	0021      	movs	r1, r4
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2210      	movs	r2, #16
 8000a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2202      	movs	r2, #2
 8000a56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2202      	movs	r2, #2
 8000a62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2201      	movs	r2, #1
 8000a68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	187a      	adds	r2, r7, r1
 8000a6c:	23a0      	movs	r3, #160	; 0xa0
 8000a6e:	05db      	lsls	r3, r3, #23
 8000a70:	0011      	movs	r1, r2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 f994 	bl	8001da0 <HAL_GPIO_Init>
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b00d      	add	sp, #52	; 0x34
 8000a7e:	bd90      	pop	{r4, r7, pc}
 8000a80:	40013000 	.word	0x40013000
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40003800 	.word	0x40003800

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_MspInit+0x44>)
 8000a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_MspInit+0x44>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_MspInit+0x44>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_MspInit+0x44>)
 8000aac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_MspInit+0x44>)
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	0549      	lsls	r1, r1, #21
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_MspInit+0x44>)
 8000aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	055b      	lsls	r3, r3, #21
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b002      	add	sp, #8
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 fa34 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b094      	sub	sp, #80	; 0x50
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b12:	2334      	movs	r3, #52	; 0x34
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	0018      	movs	r0, r3
 8000b18:	231c      	movs	r3, #28
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f005 fa13 	bl	8005f48 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b22:	003b      	movs	r3, r7
 8000b24:	0018      	movs	r0, r3
 8000b26:	2334      	movs	r3, #52	; 0x34
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f005 fa0c 	bl	8005f48 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b30:	4b38      	ldr	r3, [pc, #224]	; (8000c14 <MX_TIM16_Init+0x108>)
 8000b32:	4a39      	ldr	r2, [pc, #228]	; (8000c18 <MX_TIM16_Init+0x10c>)
 8000b34:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 300-1;
 8000b36:	4b37      	ldr	r3, [pc, #220]	; (8000c14 <MX_TIM16_Init+0x108>)
 8000b38:	222c      	movs	r2, #44	; 0x2c
 8000b3a:	32ff      	adds	r2, #255	; 0xff
 8000b3c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b35      	ldr	r3, [pc, #212]	; (8000c14 <MX_TIM16_Init+0x108>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <MX_TIM16_Init+0x108>)
 8000b46:	4a35      	ldr	r2, [pc, #212]	; (8000c1c <MX_TIM16_Init+0x110>)
 8000b48:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4a:	4b32      	ldr	r3, [pc, #200]	; (8000c14 <MX_TIM16_Init+0x108>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b50:	4b30      	ldr	r3, [pc, #192]	; (8000c14 <MX_TIM16_Init+0x108>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b56:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <MX_TIM16_Init+0x108>)
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b5c:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <MX_TIM16_Init+0x108>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f002 fc5a 	bl	8003418 <HAL_TIM_Base_Init>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000b68:	f7ff fe74 	bl	8000854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b6c:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <MX_TIM16_Init+0x108>)
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f002 fcaa 	bl	80034c8 <HAL_TIM_PWM_Init>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000b78:	f7ff fe6c 	bl	8000854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7c:	2134      	movs	r1, #52	; 0x34
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2260      	movs	r2, #96	; 0x60
 8000b82:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba8:	1879      	adds	r1, r7, r1
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_TIM16_Init+0x108>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f002 fdc2 	bl	8003738 <HAL_TIM_PWM_ConfigChannel>
 8000bb4:	1e03      	subs	r3, r0, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8000bb8:	f7ff fe4c 	bl	8000854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bbc:	003b      	movs	r3, r7
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc8:	003b      	movs	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bce:	003b      	movs	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd4:	003b      	movs	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bda:	003b      	movs	r3, r7
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	0192      	lsls	r2, r2, #6
 8000be0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000be2:	003b      	movs	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000be8:	003b      	movs	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000bee:	003a      	movs	r2, r7
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_TIM16_Init+0x108>)
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f003 f9d9 	bl	8003fac <HAL_TIMEx_ConfigBreakDeadTime>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM16_Init+0xf6>
  {
    Error_Handler();
 8000bfe:	f7ff fe29 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <MX_TIM16_Init+0x108>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f000 f82b 	bl	8000c60 <HAL_TIM_MspPostInit>

}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b014      	add	sp, #80	; 0x50
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	2000015c 	.word	0x2000015c
 8000c18:	40014400 	.word	0x40014400
 8000c1c:	000003e7 	.word	0x000003e7

08000c20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_TIM_Base_MspInit+0x38>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d10d      	bne.n	8000c4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_TIM_Base_MspInit+0x3c>)
 8000c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_TIM_Base_MspInit+0x3c>)
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	0289      	lsls	r1, r1, #10
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_TIM_Base_MspInit+0x3c>)
 8000c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	029b      	lsls	r3, r3, #10
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b004      	add	sp, #16
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	40014400 	.word	0x40014400
 8000c5c:	40021000 	.word	0x40021000

08000c60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	240c      	movs	r4, #12
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	2314      	movs	r3, #20
 8000c70:	001a      	movs	r2, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	f005 f968 	bl	8005f48 <memset>
  if(timHandle->Instance==TIM16)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <HAL_TIM_MspPostInit+0x70>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d122      	bne.n	8000cc8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_TIM_MspPostInit+0x74>)
 8000c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_TIM_MspPostInit+0x74>)
 8000c88:	2102      	movs	r1, #2
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_TIM_MspPostInit+0x74>)
 8000c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c92:	2202      	movs	r2, #2
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BL_Pin;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	0052      	lsls	r2, r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	0021      	movs	r1, r4
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2202      	movs	r2, #2
 8000cba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BL_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_TIM_MspPostInit+0x78>)
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	0010      	movs	r0, r2
 8000cc4:	f001 f86c 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b009      	add	sp, #36	; 0x24
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	40014400 	.word	0x40014400
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	50000400 	.word	0x50000400

08000cdc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000ce2:	4a24      	ldr	r2, [pc, #144]	; (8000d74 <MX_USART1_UART_Init+0x98>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000ce8:	22e1      	movs	r2, #225	; 0xe1
 8000cea:	0252      	lsls	r2, r2, #9
 8000cec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f003 f9dc 	bl	80040e4 <HAL_HalfDuplex_Init>
 8000d2c:	1e03      	subs	r3, r0, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d30:	f7ff fd90 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000d36:	2100      	movs	r1, #0
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f003 fe09 	bl	8004950 <HAL_UARTEx_SetTxFifoThreshold>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d42:	f7ff fd87 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f003 fe40 	bl	80049d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d54:	f7ff fd7e 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <MX_USART1_UART_Init+0x94>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f003 fdbe 	bl	80048dc <HAL_UARTEx_DisableFifoMode>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d001      	beq.n	8000d68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d64:	f7ff fd76 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	200001a8 	.word	0x200001a8
 8000d74:	40013800 	.word	0x40013800

08000d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b091      	sub	sp, #68	; 0x44
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	232c      	movs	r3, #44	; 0x2c
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	0018      	movs	r0, r3
 8000d86:	2314      	movs	r3, #20
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f005 f8dc 	bl	8005f48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	2414      	movs	r4, #20
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	0018      	movs	r0, r3
 8000d96:	2318      	movs	r3, #24
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f005 f8d4 	bl	8005f48 <memset>
  if(uartHandle->Instance==USART1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <HAL_UART_MspInit+0xb8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d13d      	bne.n	8000e26 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	0018      	movs	r0, r3
 8000dba:	f001 fe79 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dc2:	f7ff fd47 	bl	8000854 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_UART_MspInit+0xbc>)
 8000dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <HAL_UART_MspInit+0xbc>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	01c9      	lsls	r1, r1, #7
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	641a      	str	r2, [r3, #64]	; 0x40
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_UART_MspInit+0xbc>)
 8000dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	01db      	lsls	r3, r3, #7
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_UART_MspInit+0xbc>)
 8000de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_UART_MspInit+0xbc>)
 8000de8:	2102      	movs	r1, #2
 8000dea:	430a      	orrs	r2, r1
 8000dec:	635a      	str	r2, [r3, #52]	; 0x34
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_UART_MspInit+0xbc>)
 8000df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df2:	2202      	movs	r2, #2
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dfa:	212c      	movs	r1, #44	; 0x2c
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2240      	movs	r2, #64	; 0x40
 8000e00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2212      	movs	r2, #18
 8000e06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <HAL_UART_MspInit+0xc0>)
 8000e1e:	0019      	movs	r1, r3
 8000e20:	0010      	movs	r0, r2
 8000e22:	f000 ffbd 	bl	8001da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b011      	add	sp, #68	; 0x44
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	40013800 	.word	0x40013800
 8000e34:	40021000 	.word	0x40021000
 8000e38:	50000400 	.word	0x50000400

08000e3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e40:	f7ff fe5f 	bl	8000b02 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e46:	490d      	ldr	r1, [pc, #52]	; (8000e7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <LoopForever+0xe>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e5c:	4c0a      	ldr	r4, [pc, #40]	; (8000e88 <LoopForever+0x16>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e6a:	f005 f875 	bl	8005f58 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e6e:	f7ff fc0b 	bl	8000688 <main>

08000e72 <LoopForever>:

LoopForever:
  b LoopForever
 8000e72:	e7fe      	b.n	8000e72 <LoopForever>
  ldr   r0, =_estack
 8000e74:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e80:	08006c88 	.word	0x08006c88
  ldr r2, =_sbss
 8000e84:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e88:	20000268 	.word	0x20000268

08000e8c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC1_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_Init+0x3c>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_Init+0x3c>)
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	0049      	lsls	r1, r1, #1
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eaa:	2003      	movs	r0, #3
 8000eac:	f000 f810 	bl	8000ed0 <HAL_InitTick>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
 8000eba:	e001      	b.n	8000ec0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ebc:	f7ff fde6 	bl	8000a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	781b      	ldrb	r3, [r3, #0]
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b002      	add	sp, #8
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed8:	230f      	movs	r3, #15
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_InitTick+0x88>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d02b      	beq.n	8000f40 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_InitTick+0x8c>)
 8000eea:	681c      	ldr	r4, [r3, #0]
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_InitTick+0x88>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	23fa      	movs	r3, #250	; 0xfa
 8000ef4:	0098      	lsls	r0, r3, #2
 8000ef6:	f7ff f903 	bl	8000100 <__udivsi3>
 8000efa:	0003      	movs	r3, r0
 8000efc:	0019      	movs	r1, r3
 8000efe:	0020      	movs	r0, r4
 8000f00:	f7ff f8fe 	bl	8000100 <__udivsi3>
 8000f04:	0003      	movs	r3, r0
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 ff3d 	bl	8001d86 <HAL_SYSTICK_Config>
 8000f0c:	1e03      	subs	r3, r0, #0
 8000f0e:	d112      	bne.n	8000f36 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d80a      	bhi.n	8000f2c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	425b      	negs	r3, r3
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 ff1c 	bl	8001d5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_InitTick+0x90>)
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	e00d      	b.n	8000f48 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	e008      	b.n	8000f48 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f36:	230f      	movs	r3, #15
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	e003      	b.n	8000f48 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f40:	230f      	movs	r3, #15
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f48:	230f      	movs	r3, #15
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	781b      	ldrb	r3, [r3, #0]
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b005      	add	sp, #20
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_IncTick+0x1c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_IncTick+0x20>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	18d2      	adds	r2, r2, r3
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_IncTick+0x20>)
 8000f76:	601a      	str	r2, [r3, #0]
}
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	20000008 	.word	0x20000008
 8000f84:	2000023c 	.word	0x2000023c

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b02      	ldr	r3, [pc, #8]	; (8000f98 <HAL_GetTick+0x10>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	0018      	movs	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	2000023c 	.word	0x2000023c

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff fff0 	bl	8000f88 <HAL_GetTick>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	001a      	movs	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	189b      	adds	r3, r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	f7ff ffe0 	bl	8000f88 <HAL_GetTick>
 8000fc8:	0002      	movs	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b004      	add	sp, #16
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]
}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b002      	add	sp, #8
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	fe3fffff 	.word	0xfe3fffff

0800100c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	23e0      	movs	r3, #224	; 0xe0
 800101a:	045b      	lsls	r3, r3, #17
 800101c:	4013      	ands	r3, r2
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}

08001026 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	2104      	movs	r1, #4
 800103a:	400a      	ands	r2, r1
 800103c:	2107      	movs	r1, #7
 800103e:	4091      	lsls	r1, r2
 8001040:	000a      	movs	r2, r1
 8001042:	43d2      	mvns	r2, r2
 8001044:	401a      	ands	r2, r3
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	2104      	movs	r1, #4
 800104a:	400b      	ands	r3, r1
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4099      	lsls	r1, r3
 8001050:	000b      	movs	r3, r1
 8001052:	431a      	orrs	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b004      	add	sp, #16
 800105e:	bd80      	pop	{r7, pc}

08001060 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	2104      	movs	r1, #4
 8001072:	400a      	ands	r2, r1
 8001074:	2107      	movs	r1, #7
 8001076:	4091      	lsls	r1, r2
 8001078:	000a      	movs	r2, r1
 800107a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	2104      	movs	r1, #4
 8001080:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001082:	40da      	lsrs	r2, r3
 8001084:	0013      	movs	r3, r2
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}

0800108e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	23c0      	movs	r3, #192	; 0xc0
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	4013      	ands	r3, r2
 80010a0:	d101      	bne.n	80010a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	211f      	movs	r1, #31
 80010c4:	400a      	ands	r2, r1
 80010c6:	210f      	movs	r1, #15
 80010c8:	4091      	lsls	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	43d2      	mvns	r2, r2
 80010ce:	401a      	ands	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	0e9b      	lsrs	r3, r3, #26
 80010d4:	210f      	movs	r1, #15
 80010d6:	4019      	ands	r1, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	201f      	movs	r0, #31
 80010dc:	4003      	ands	r3, r0
 80010de:	4099      	lsls	r1, r3
 80010e0:	000b      	movs	r3, r1
 80010e2:	431a      	orrs	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b004      	add	sp, #16
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	035b      	lsls	r3, r3, #13
 8001102:	0b5b      	lsrs	r3, r3, #13
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}

08001112 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	0352      	lsls	r2, r2, #13
 8001124:	0b52      	lsrs	r2, r2, #13
 8001126:	43d2      	mvns	r2, r2
 8001128:	401a      	ands	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b002      	add	sp, #8
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	0212      	lsls	r2, r2, #8
 800114c:	43d2      	mvns	r2, r2
 800114e:	401a      	ands	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	400b      	ands	r3, r1
 8001158:	4904      	ldr	r1, [pc, #16]	; (800116c <LL_ADC_SetChannelSamplingTime+0x34>)
 800115a:	400b      	ands	r3, r1
 800115c:	431a      	orrs	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b004      	add	sp, #16
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	07ffff00 	.word	0x07ffff00

08001170 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4a05      	ldr	r2, [pc, #20]	; (8001194 <LL_ADC_EnableInternalRegulator+0x24>)
 800117e:	4013      	ands	r3, r2
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	0552      	lsls	r2, r2, #21
 8001184:	431a      	orrs	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	6fffffe8 	.word	0x6fffffe8

08001198 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	055b      	lsls	r3, r3, #21
 80011a8:	401a      	ands	r2, r3
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	055b      	lsls	r3, r3, #21
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d101      	bne.n	80011b6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b002      	add	sp, #8
 80011be:	bd80      	pop	{r7, pc}

080011c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <LL_ADC_Enable+0x20>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	2201      	movs	r2, #1
 80011d2:	431a      	orrs	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	7fffffe8 	.word	0x7fffffe8

080011e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <LL_ADC_IsEnabled+0x18>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <LL_ADC_IsEnabled+0x1a>
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b002      	add	sp, #8
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <LL_ADC_REG_StartConversion+0x20>)
 8001216:	4013      	ands	r3, r2
 8001218:	2204      	movs	r2, #4
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}
 8001228:	7fffffe8 	.word	0x7fffffe8

0800122c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2204      	movs	r2, #4
 800123a:	4013      	ands	r3, r2
 800123c:	2b04      	cmp	r3, #4
 800123e:	d101      	bne.n	8001244 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001244:	2300      	movs	r3, #0
}
 8001246:	0018      	movs	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	b002      	add	sp, #8
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001258:	231f      	movs	r3, #31
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e17f      	b.n	8001576 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10a      	bne.n	8001294 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff f91f 	bl	80004c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2254      	movs	r2, #84	; 0x54
 8001290:	2100      	movs	r1, #0
 8001292:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff ff7d 	bl	8001198 <LL_ADC_IsInternalRegulatorEnabled>
 800129e:	1e03      	subs	r3, r0, #0
 80012a0:	d115      	bne.n	80012ce <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	0018      	movs	r0, r3
 80012a8:	f7ff ff62 	bl	8001170 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012ac:	4bb4      	ldr	r3, [pc, #720]	; (8001580 <HAL_ADC_Init+0x330>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	49b4      	ldr	r1, [pc, #720]	; (8001584 <HAL_ADC_Init+0x334>)
 80012b2:	0018      	movs	r0, r3
 80012b4:	f7fe ff24 	bl	8000100 <__udivsi3>
 80012b8:	0003      	movs	r3, r0
 80012ba:	3301      	adds	r3, #1
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012c0:	e002      	b.n	80012c8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f9      	bne.n	80012c2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff ff60 	bl	8001198 <LL_ADC_IsInternalRegulatorEnabled>
 80012d8:	1e03      	subs	r3, r0, #0
 80012da:	d10f      	bne.n	80012fc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	2210      	movs	r2, #16
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ec:	2201      	movs	r2, #1
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80012f4:	231f      	movs	r3, #31
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff ff93 	bl	800122c <LL_ADC_REG_IsConversionOngoing>
 8001306:	0003      	movs	r3, r0
 8001308:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	2210      	movs	r2, #16
 8001310:	4013      	ands	r3, r2
 8001312:	d000      	beq.n	8001316 <HAL_ADC_Init+0xc6>
 8001314:	e122      	b.n	800155c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d000      	beq.n	800131e <HAL_ADC_Init+0xce>
 800131c:	e11e      	b.n	800155c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	4a99      	ldr	r2, [pc, #612]	; (8001588 <HAL_ADC_Init+0x338>)
 8001324:	4013      	ands	r3, r2
 8001326:	2202      	movs	r2, #2
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff ff56 	bl	80011e4 <LL_ADC_IsEnabled>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d000      	beq.n	800133e <HAL_ADC_Init+0xee>
 800133c:	e0ad      	b.n	800149a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7e1b      	ldrb	r3, [r3, #24]
 8001346:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001348:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7e5b      	ldrb	r3, [r3, #25]
 800134e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001350:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7e9b      	ldrb	r3, [r3, #26]
 8001356:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001358:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <HAL_ADC_Init+0x118>
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	015b      	lsls	r3, r3, #5
 8001366:	e000      	b.n	800136a <HAL_ADC_Init+0x11a>
 8001368:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800136a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001370:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	2b00      	cmp	r3, #0
 8001378:	da04      	bge.n	8001384 <HAL_ADC_Init+0x134>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	085b      	lsrs	r3, r3, #1
 8001382:	e001      	b.n	8001388 <HAL_ADC_Init+0x138>
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001388:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	212c      	movs	r1, #44	; 0x2c
 800138e:	5c5b      	ldrb	r3, [r3, r1]
 8001390:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001392:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2220      	movs	r2, #32
 800139e:	5c9b      	ldrb	r3, [r3, r2]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d115      	bne.n	80013d0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7e9b      	ldrb	r3, [r3, #26]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d105      	bne.n	80013b8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	0252      	lsls	r2, r2, #9
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	e00b      	b.n	80013d0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013bc:	2220      	movs	r2, #32
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c8:	2201      	movs	r2, #1
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00a      	beq.n	80013ee <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013dc:	23e0      	movs	r3, #224	; 0xe0
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013e6:	4313      	orrs	r3, r2
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	4a65      	ldr	r2, [pc, #404]	; (800158c <HAL_ADC_Init+0x33c>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	430a      	orrs	r2, r1
 8001402:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	0f9b      	lsrs	r3, r3, #30
 800140a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001410:	4313      	orrs	r3, r2
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	223c      	movs	r2, #60	; 0x3c
 800141c:	5c9b      	ldrb	r3, [r3, r2]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d111      	bne.n	8001446 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	0f9b      	lsrs	r3, r3, #30
 8001428:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800142e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001434:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800143a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	4313      	orrs	r3, r2
 8001440:	2201      	movs	r2, #1
 8001442:	4313      	orrs	r3, r2
 8001444:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	4a50      	ldr	r2, [pc, #320]	; (8001590 <HAL_ADC_Init+0x340>)
 800144e:	4013      	ands	r3, r2
 8001450:	0019      	movs	r1, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	430a      	orrs	r2, r1
 800145a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	23c0      	movs	r3, #192	; 0xc0
 8001462:	061b      	lsls	r3, r3, #24
 8001464:	429a      	cmp	r2, r3
 8001466:	d018      	beq.n	800149a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	05db      	lsls	r3, r3, #23
 8001470:	429a      	cmp	r2, r3
 8001472:	d012      	beq.n	800149a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	061b      	lsls	r3, r3, #24
 800147c:	429a      	cmp	r2, r3
 800147e:	d00c      	beq.n	800149a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001480:	4b44      	ldr	r3, [pc, #272]	; (8001594 <HAL_ADC_Init+0x344>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a44      	ldr	r2, [pc, #272]	; (8001598 <HAL_ADC_Init+0x348>)
 8001486:	4013      	ands	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	23f0      	movs	r3, #240	; 0xf0
 8001490:	039b      	lsls	r3, r3, #14
 8001492:	401a      	ands	r2, r3
 8001494:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <HAL_ADC_Init+0x344>)
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a2:	001a      	movs	r2, r3
 80014a4:	2100      	movs	r1, #0
 80014a6:	f7ff fdbe 	bl	8001026 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b2:	493a      	ldr	r1, [pc, #232]	; (800159c <HAL_ADC_Init+0x34c>)
 80014b4:	001a      	movs	r2, r3
 80014b6:	f7ff fdb6 	bl	8001026 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2110      	movs	r1, #16
 80014ce:	4249      	negs	r1, r1
 80014d0:	430a      	orrs	r2, r1
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
 80014d4:	e018      	b.n	8001508 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	039b      	lsls	r3, r3, #14
 80014de:	429a      	cmp	r2, r3
 80014e0:	d112      	bne.n	8001508 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	221c      	movs	r2, #28
 80014f2:	4013      	ands	r3, r2
 80014f4:	2210      	movs	r2, #16
 80014f6:	4252      	negs	r2, r2
 80014f8:	409a      	lsls	r2, r3
 80014fa:	0011      	movs	r1, r2
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2100      	movs	r1, #0
 800150e:	0018      	movs	r0, r3
 8001510:	f7ff fda6 	bl	8001060 <LL_ADC_GetSamplingTimeCommonChannels>
 8001514:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800151a:	429a      	cmp	r2, r3
 800151c:	d10b      	bne.n	8001536 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	2203      	movs	r2, #3
 800152a:	4393      	bics	r3, r2
 800152c:	2201      	movs	r2, #1
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001534:	e01c      	b.n	8001570 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	2212      	movs	r2, #18
 800153c:	4393      	bics	r3, r2
 800153e:	2210      	movs	r2, #16
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154a:	2201      	movs	r2, #1
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001552:	231f      	movs	r3, #31
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800155a:	e009      	b.n	8001570 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	2210      	movs	r2, #16
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001568:	231f      	movs	r3, #31
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001570:	231f      	movs	r3, #31
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	781b      	ldrb	r3, [r3, #0]
}
 8001576:	0018      	movs	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	b008      	add	sp, #32
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	20000000 	.word	0x20000000
 8001584:	00030d40 	.word	0x00030d40
 8001588:	fffffefd 	.word	0xfffffefd
 800158c:	ffde0201 	.word	0xffde0201
 8001590:	1ffffc02 	.word	0x1ffffc02
 8001594:	40012708 	.word	0x40012708
 8001598:	ffc3ffff 	.word	0xffc3ffff
 800159c:	07ffff04 	.word	0x07ffff04

080015a0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff fe3d 	bl	800122c <LL_ADC_REG_IsConversionOngoing>
 80015b2:	1e03      	subs	r3, r0, #0
 80015b4:	d135      	bne.n	8001622 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2254      	movs	r2, #84	; 0x54
 80015ba:	5c9b      	ldrb	r3, [r3, r2]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_ADC_Start+0x24>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e035      	b.n	8001630 <HAL_ADC_Start+0x90>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2254      	movs	r2, #84	; 0x54
 80015c8:	2101      	movs	r1, #1
 80015ca:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015cc:	250f      	movs	r5, #15
 80015ce:	197c      	adds	r4, r7, r5
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	0018      	movs	r0, r3
 80015d4:	f000 faaa 	bl	8001b2c <ADC_Enable>
 80015d8:	0003      	movs	r3, r0
 80015da:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015dc:	197b      	adds	r3, r7, r5
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d119      	bne.n	8001618 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	4a13      	ldr	r2, [pc, #76]	; (8001638 <HAL_ADC_Start+0x98>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	0052      	lsls	r2, r2, #1
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	221c      	movs	r2, #28
 8001602:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2254      	movs	r2, #84	; 0x54
 8001608:	2100      	movs	r1, #0
 800160a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff fdf9 	bl	8001208 <LL_ADC_REG_StartConversion>
 8001616:	e008      	b.n	800162a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2254      	movs	r2, #84	; 0x54
 800161c:	2100      	movs	r1, #0
 800161e:	5499      	strb	r1, [r3, r2]
 8001620:	e003      	b.n	800162a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001622:	230f      	movs	r3, #15
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	2202      	movs	r2, #2
 8001628:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800162a:	230f      	movs	r3, #15
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	781b      	ldrb	r3, [r3, #0]
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	b004      	add	sp, #16
 8001636:	bdb0      	pop	{r4, r5, r7, pc}
 8001638:	fffff0fe 	.word	0xfffff0fe

0800163c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	2b08      	cmp	r3, #8
 800164c:	d102      	bne.n	8001654 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800164e:	2308      	movs	r3, #8
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	e00f      	b.n	8001674 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2201      	movs	r2, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d007      	beq.n	8001670 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	2220      	movs	r2, #32
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e072      	b.n	8001756 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001670:	2304      	movs	r3, #4
 8001672:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001674:	f7ff fc88 	bl	8000f88 <HAL_GetTick>
 8001678:	0003      	movs	r3, r0
 800167a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800167c:	e01f      	b.n	80016be <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	d01c      	beq.n	80016be <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001684:	f7ff fc80 	bl	8000f88 <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d302      	bcc.n	800169a <HAL_ADC_PollForConversion+0x5e>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d111      	bne.n	80016be <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4013      	ands	r3, r2
 80016a4:	d10b      	bne.n	80016be <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	2204      	movs	r2, #4
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2254      	movs	r2, #84	; 0x54
 80016b6:	2100      	movs	r1, #0
 80016b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e04b      	b.n	8001756 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4013      	ands	r3, r2
 80016c8:	d0d9      	beq.n	800167e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ce:	2280      	movs	r2, #128	; 0x80
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff fcd6 	bl	800108e <LL_ADC_REG_IsTriggerSourceSWStart>
 80016e2:	1e03      	subs	r3, r0, #0
 80016e4:	d02e      	beq.n	8001744 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7e9b      	ldrb	r3, [r3, #26]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d12a      	bne.n	8001744 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2208      	movs	r2, #8
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d123      	bne.n	8001744 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff fd93 	bl	800122c <LL_ADC_REG_IsConversionOngoing>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d110      	bne.n	800172c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	210c      	movs	r1, #12
 8001716:	438a      	bics	r2, r1
 8001718:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <HAL_ADC_PollForConversion+0x124>)
 8001720:	4013      	ands	r3, r2
 8001722:	2201      	movs	r2, #1
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	659a      	str	r2, [r3, #88]	; 0x58
 800172a:	e00b      	b.n	8001744 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001730:	2220      	movs	r2, #32
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173c:	2201      	movs	r2, #1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7e1b      	ldrb	r3, [r3, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d103      	bne.n	8001754 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	220c      	movs	r2, #12
 8001752:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b004      	add	sp, #16
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	fffffefe 	.word	0xfffffefe

08001764 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001772:	0018      	movs	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	b002      	add	sp, #8
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001786:	2317      	movs	r3, #23
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2254      	movs	r2, #84	; 0x54
 8001796:	5c9b      	ldrb	r3, [r3, r2]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x24>
 800179c:	2302      	movs	r3, #2
 800179e:	e1c0      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x3a6>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2254      	movs	r2, #84	; 0x54
 80017a4:	2101      	movs	r1, #1
 80017a6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7ff fd3d 	bl	800122c <LL_ADC_REG_IsConversionOngoing>
 80017b2:	1e03      	subs	r3, r0, #0
 80017b4:	d000      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x3c>
 80017b6:	e1a3      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d100      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x46>
 80017c0:	e143      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	061b      	lsls	r3, r3, #24
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d004      	beq.n	80017d8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017d2:	4ac1      	ldr	r2, [pc, #772]	; (8001ad8 <HAL_ADC_ConfigChannel+0x35c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d108      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0019      	movs	r1, r3
 80017e2:	0010      	movs	r0, r2
 80017e4:	f7ff fc84 	bl	80010f0 <LL_ADC_REG_SetSequencerChAdd>
 80017e8:	e0c9      	b.n	800197e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	211f      	movs	r1, #31
 80017f4:	400b      	ands	r3, r1
 80017f6:	210f      	movs	r1, #15
 80017f8:	4099      	lsls	r1, r3
 80017fa:	000b      	movs	r3, r1
 80017fc:	43db      	mvns	r3, r3
 80017fe:	4013      	ands	r3, r2
 8001800:	0019      	movs	r1, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	035b      	lsls	r3, r3, #13
 8001808:	0b5b      	lsrs	r3, r3, #13
 800180a:	d105      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x9c>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0e9b      	lsrs	r3, r3, #26
 8001812:	221f      	movs	r2, #31
 8001814:	4013      	ands	r3, r2
 8001816:	e098      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2201      	movs	r2, #1
 800181e:	4013      	ands	r3, r2
 8001820:	d000      	beq.n	8001824 <HAL_ADC_ConfigChannel+0xa8>
 8001822:	e091      	b.n	8001948 <HAL_ADC_ConfigChannel+0x1cc>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d000      	beq.n	8001830 <HAL_ADC_ConfigChannel+0xb4>
 800182e:	e089      	b.n	8001944 <HAL_ADC_ConfigChannel+0x1c8>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2204      	movs	r2, #4
 8001836:	4013      	ands	r3, r2
 8001838:	d000      	beq.n	800183c <HAL_ADC_ConfigChannel+0xc0>
 800183a:	e081      	b.n	8001940 <HAL_ADC_ConfigChannel+0x1c4>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2208      	movs	r2, #8
 8001842:	4013      	ands	r3, r2
 8001844:	d000      	beq.n	8001848 <HAL_ADC_ConfigChannel+0xcc>
 8001846:	e079      	b.n	800193c <HAL_ADC_ConfigChannel+0x1c0>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2210      	movs	r2, #16
 800184e:	4013      	ands	r3, r2
 8001850:	d000      	beq.n	8001854 <HAL_ADC_ConfigChannel+0xd8>
 8001852:	e071      	b.n	8001938 <HAL_ADC_ConfigChannel+0x1bc>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2220      	movs	r2, #32
 800185a:	4013      	ands	r3, r2
 800185c:	d000      	beq.n	8001860 <HAL_ADC_ConfigChannel+0xe4>
 800185e:	e069      	b.n	8001934 <HAL_ADC_ConfigChannel+0x1b8>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2240      	movs	r2, #64	; 0x40
 8001866:	4013      	ands	r3, r2
 8001868:	d000      	beq.n	800186c <HAL_ADC_ConfigChannel+0xf0>
 800186a:	e061      	b.n	8001930 <HAL_ADC_ConfigChannel+0x1b4>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	4013      	ands	r3, r2
 8001874:	d000      	beq.n	8001878 <HAL_ADC_ConfigChannel+0xfc>
 8001876:	e059      	b.n	800192c <HAL_ADC_ConfigChannel+0x1b0>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4013      	ands	r3, r2
 8001882:	d151      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1ac>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d149      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x1a8>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4013      	ands	r3, r2
 800189a:	d141      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x1a4>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	d139      	bne.n	800191c <HAL_ADC_ConfigChannel+0x1a0>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	015b      	lsls	r3, r3, #5
 80018b0:	4013      	ands	r3, r2
 80018b2:	d131      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x19c>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	019b      	lsls	r3, r3, #6
 80018bc:	4013      	ands	r3, r2
 80018be:	d129      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x198>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	01db      	lsls	r3, r3, #7
 80018c8:	4013      	ands	r3, r2
 80018ca:	d121      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x194>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	4013      	ands	r3, r2
 80018d6:	d119      	bne.n	800190c <HAL_ADC_ConfigChannel+0x190>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	025b      	lsls	r3, r3, #9
 80018e0:	4013      	ands	r3, r2
 80018e2:	d111      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x18c>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	029b      	lsls	r3, r3, #10
 80018ec:	4013      	ands	r3, r2
 80018ee:	d109      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x188>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	02db      	lsls	r3, r3, #11
 80018f8:	4013      	ands	r3, r2
 80018fa:	d001      	beq.n	8001900 <HAL_ADC_ConfigChannel+0x184>
 80018fc:	2312      	movs	r3, #18
 80018fe:	e024      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001900:	2300      	movs	r3, #0
 8001902:	e022      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001904:	2311      	movs	r3, #17
 8001906:	e020      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001908:	2310      	movs	r3, #16
 800190a:	e01e      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 800190c:	230f      	movs	r3, #15
 800190e:	e01c      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001910:	230e      	movs	r3, #14
 8001912:	e01a      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001914:	230d      	movs	r3, #13
 8001916:	e018      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001918:	230c      	movs	r3, #12
 800191a:	e016      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 800191c:	230b      	movs	r3, #11
 800191e:	e014      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001920:	230a      	movs	r3, #10
 8001922:	e012      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001924:	2309      	movs	r3, #9
 8001926:	e010      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001928:	2308      	movs	r3, #8
 800192a:	e00e      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 800192c:	2307      	movs	r3, #7
 800192e:	e00c      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001930:	2306      	movs	r3, #6
 8001932:	e00a      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001934:	2305      	movs	r3, #5
 8001936:	e008      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001938:	2304      	movs	r3, #4
 800193a:	e006      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 800193c:	2303      	movs	r3, #3
 800193e:	e004      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001940:	2302      	movs	r3, #2
 8001942:	e002      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 8001948:	2300      	movs	r3, #0
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	6852      	ldr	r2, [r2, #4]
 800194e:	201f      	movs	r0, #31
 8001950:	4002      	ands	r2, r0
 8001952:	4093      	lsls	r3, r2
 8001954:	000a      	movs	r2, r1
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	429a      	cmp	r2, r3
 800196a:	d808      	bhi.n	800197e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	001a      	movs	r2, r3
 800197a:	f7ff fb99 	bl	80010b0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	001a      	movs	r2, r3
 800198c:	f7ff fbd4 	bl	8001138 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db00      	blt.n	800199a <HAL_ADC_ConfigChannel+0x21e>
 8001998:	e0bc      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800199a:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_ADC_ConfigChannel+0x360>)
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff fb35 	bl	800100c <LL_ADC_GetCommonPathInternalCh>
 80019a2:	0003      	movs	r3, r0
 80019a4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a4d      	ldr	r2, [pc, #308]	; (8001ae0 <HAL_ADC_ConfigChannel+0x364>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d122      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	041b      	lsls	r3, r3, #16
 80019b6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019b8:	d11d      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	0412      	lsls	r2, r2, #16
 80019c0:	4313      	orrs	r3, r2
 80019c2:	4a46      	ldr	r2, [pc, #280]	; (8001adc <HAL_ADC_ConfigChannel+0x360>)
 80019c4:	0019      	movs	r1, r3
 80019c6:	0010      	movs	r0, r2
 80019c8:	f7ff fb0c 	bl	8000fe4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019cc:	4b45      	ldr	r3, [pc, #276]	; (8001ae4 <HAL_ADC_ConfigChannel+0x368>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4945      	ldr	r1, [pc, #276]	; (8001ae8 <HAL_ADC_ConfigChannel+0x36c>)
 80019d2:	0018      	movs	r0, r3
 80019d4:	f7fe fb94 	bl	8000100 <__udivsi3>
 80019d8:	0003      	movs	r3, r0
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	0013      	movs	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	189b      	adds	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019e6:	e002      	b.n	80019ee <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f9      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019f4:	e08e      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a3c      	ldr	r2, [pc, #240]	; (8001aec <HAL_ADC_ConfigChannel+0x370>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d10e      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	045b      	lsls	r3, r3, #17
 8001a06:	4013      	ands	r3, r2
 8001a08:	d109      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	0452      	lsls	r2, r2, #17
 8001a10:	4313      	orrs	r3, r2
 8001a12:	4a32      	ldr	r2, [pc, #200]	; (8001adc <HAL_ADC_ConfigChannel+0x360>)
 8001a14:	0019      	movs	r1, r3
 8001a16:	0010      	movs	r0, r2
 8001a18:	f7ff fae4 	bl	8000fe4 <LL_ADC_SetCommonPathInternalCh>
 8001a1c:	e07a      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a33      	ldr	r2, [pc, #204]	; (8001af0 <HAL_ADC_ConfigChannel+0x374>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d000      	beq.n	8001a2a <HAL_ADC_ConfigChannel+0x2ae>
 8001a28:	e074      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	03db      	lsls	r3, r3, #15
 8001a30:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a32:	d000      	beq.n	8001a36 <HAL_ADC_ConfigChannel+0x2ba>
 8001a34:	e06e      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2280      	movs	r2, #128	; 0x80
 8001a3a:	03d2      	lsls	r2, r2, #15
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	4a27      	ldr	r2, [pc, #156]	; (8001adc <HAL_ADC_ConfigChannel+0x360>)
 8001a40:	0019      	movs	r1, r3
 8001a42:	0010      	movs	r0, r2
 8001a44:	f7ff face 	bl	8000fe4 <LL_ADC_SetCommonPathInternalCh>
 8001a48:	e064      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	061b      	lsls	r3, r3, #24
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d004      	beq.n	8001a60 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <HAL_ADC_ConfigChannel+0x35c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d107      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0019      	movs	r1, r3
 8001a6a:	0010      	movs	r0, r2
 8001a6c:	f7ff fb51 	bl	8001112 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	da4d      	bge.n	8001b14 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_ADC_ConfigChannel+0x360>)
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7ff fac6 	bl	800100c <LL_ADC_GetCommonPathInternalCh>
 8001a80:	0003      	movs	r3, r0
 8001a82:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <HAL_ADC_ConfigChannel+0x364>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d108      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <HAL_ADC_ConfigChannel+0x378>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	4a11      	ldr	r2, [pc, #68]	; (8001adc <HAL_ADC_ConfigChannel+0x360>)
 8001a96:	0019      	movs	r1, r3
 8001a98:	0010      	movs	r0, r2
 8001a9a:	f7ff faa3 	bl	8000fe4 <LL_ADC_SetCommonPathInternalCh>
 8001a9e:	e039      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_ADC_ConfigChannel+0x370>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d108      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <HAL_ADC_ConfigChannel+0x37c>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <HAL_ADC_ConfigChannel+0x360>)
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	0010      	movs	r0, r2
 8001ab6:	f7ff fa95 	bl	8000fe4 <LL_ADC_SetCommonPathInternalCh>
 8001aba:	e02b      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <HAL_ADC_ConfigChannel+0x374>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d126      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <HAL_ADC_ConfigChannel+0x380>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	4a03      	ldr	r2, [pc, #12]	; (8001adc <HAL_ADC_ConfigChannel+0x360>)
 8001ace:	0019      	movs	r1, r3
 8001ad0:	0010      	movs	r0, r2
 8001ad2:	f7ff fa87 	bl	8000fe4 <LL_ADC_SetCommonPathInternalCh>
 8001ad6:	e01d      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x398>
 8001ad8:	80000004 	.word	0x80000004
 8001adc:	40012708 	.word	0x40012708
 8001ae0:	b0001000 	.word	0xb0001000
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	00030d40 	.word	0x00030d40
 8001aec:	b8004000 	.word	0xb8004000
 8001af0:	b4002000 	.word	0xb4002000
 8001af4:	ff7fffff 	.word	0xff7fffff
 8001af8:	feffffff 	.word	0xfeffffff
 8001afc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b04:	2220      	movs	r2, #32
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b0c:	2317      	movs	r3, #23
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2254      	movs	r2, #84	; 0x54
 8001b18:	2100      	movs	r1, #0
 8001b1a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001b1c:	2317      	movs	r3, #23
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	781b      	ldrb	r3, [r3, #0]
}
 8001b22:	0018      	movs	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b006      	add	sp, #24
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)

08001b2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7ff fb51 	bl	80011e4 <LL_ADC_IsEnabled>
 8001b42:	1e03      	subs	r3, r0, #0
 8001b44:	d000      	beq.n	8001b48 <ADC_Enable+0x1c>
 8001b46:	e069      	b.n	8001c1c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	4a36      	ldr	r2, [pc, #216]	; (8001c28 <ADC_Enable+0xfc>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	d00d      	beq.n	8001b70 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	2210      	movs	r2, #16
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b64:	2201      	movs	r2, #1
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e056      	b.n	8001c1e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7ff fb23 	bl	80011c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <ADC_Enable+0x100>)
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f7ff fa45 	bl	800100c <LL_ADC_GetCommonPathInternalCh>
 8001b82:	0002      	movs	r2, r0
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	041b      	lsls	r3, r3, #16
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d00f      	beq.n	8001bac <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <ADC_Enable+0x104>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4928      	ldr	r1, [pc, #160]	; (8001c34 <ADC_Enable+0x108>)
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7fe fab4 	bl	8000100 <__udivsi3>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001b9c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b9e:	e002      	b.n	8001ba6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f9      	bne.n	8001ba0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7e5b      	ldrb	r3, [r3, #25]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d033      	beq.n	8001c1c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f9e8 	bl	8000f88 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bbc:	e027      	b.n	8001c0e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f7ff fb0e 	bl	80011e4 <LL_ADC_IsEnabled>
 8001bc8:	1e03      	subs	r3, r0, #0
 8001bca:	d104      	bne.n	8001bd6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7ff faf5 	bl	80011c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bd6:	f7ff f9d7 	bl	8000f88 <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d914      	bls.n	8001c0e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2201      	movs	r2, #1
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d00d      	beq.n	8001c0e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c02:	2201      	movs	r2, #1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e007      	b.n	8001c1e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2201      	movs	r2, #1
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d1d0      	bne.n	8001bbe <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b004      	add	sp, #16
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	80000017 	.word	0x80000017
 8001c2c:	40012708 	.word	0x40012708
 8001c30:	20000000 	.word	0x20000000
 8001c34:	00030d40 	.word	0x00030d40

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	0002      	movs	r2, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c46:	1dfb      	adds	r3, r7, #7
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8001c4c:	d828      	bhi.n	8001ca0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c4e:	4a2f      	ldr	r2, [pc, #188]	; (8001d0c <__NVIC_SetPriority+0xd4>)
 8001c50:	1dfb      	adds	r3, r7, #7
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b25b      	sxtb	r3, r3
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	33c0      	adds	r3, #192	; 0xc0
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	589b      	ldr	r3, [r3, r2]
 8001c5e:	1dfa      	adds	r2, r7, #7
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	0011      	movs	r1, r2
 8001c64:	2203      	movs	r2, #3
 8001c66:	400a      	ands	r2, r1
 8001c68:	00d2      	lsls	r2, r2, #3
 8001c6a:	21ff      	movs	r1, #255	; 0xff
 8001c6c:	4091      	lsls	r1, r2
 8001c6e:	000a      	movs	r2, r1
 8001c70:	43d2      	mvns	r2, r2
 8001c72:	401a      	ands	r2, r3
 8001c74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	019b      	lsls	r3, r3, #6
 8001c7a:	22ff      	movs	r2, #255	; 0xff
 8001c7c:	401a      	ands	r2, r3
 8001c7e:	1dfb      	adds	r3, r7, #7
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	0018      	movs	r0, r3
 8001c84:	2303      	movs	r3, #3
 8001c86:	4003      	ands	r3, r0
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c8c:	481f      	ldr	r0, [pc, #124]	; (8001d0c <__NVIC_SetPriority+0xd4>)
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	430a      	orrs	r2, r1
 8001c98:	33c0      	adds	r3, #192	; 0xc0
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c9e:	e031      	b.n	8001d04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ca0:	4a1b      	ldr	r2, [pc, #108]	; (8001d10 <__NVIC_SetPriority+0xd8>)
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	230f      	movs	r3, #15
 8001caa:	400b      	ands	r3, r1
 8001cac:	3b08      	subs	r3, #8
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3306      	adds	r3, #6
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	18d3      	adds	r3, r2, r3
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	1dfa      	adds	r2, r7, #7
 8001cbc:	7812      	ldrb	r2, [r2, #0]
 8001cbe:	0011      	movs	r1, r2
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	00d2      	lsls	r2, r2, #3
 8001cc6:	21ff      	movs	r1, #255	; 0xff
 8001cc8:	4091      	lsls	r1, r2
 8001cca:	000a      	movs	r2, r1
 8001ccc:	43d2      	mvns	r2, r2
 8001cce:	401a      	ands	r2, r3
 8001cd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	019b      	lsls	r3, r3, #6
 8001cd6:	22ff      	movs	r2, #255	; 0xff
 8001cd8:	401a      	ands	r2, r3
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	0018      	movs	r0, r3
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	4003      	ands	r3, r0
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ce8:	4809      	ldr	r0, [pc, #36]	; (8001d10 <__NVIC_SetPriority+0xd8>)
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	001c      	movs	r4, r3
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	4023      	ands	r3, r4
 8001cf4:	3b08      	subs	r3, #8
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	3306      	adds	r3, #6
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	18c3      	adds	r3, r0, r3
 8001d00:	3304      	adds	r3, #4
 8001d02:	601a      	str	r2, [r3, #0]
}
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b003      	add	sp, #12
 8001d0a:	bd90      	pop	{r4, r7, pc}
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	1e5a      	subs	r2, r3, #1
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	045b      	lsls	r3, r3, #17
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d301      	bcc.n	8001d2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e010      	b.n	8001d4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <SysTick_Config+0x44>)
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	3a01      	subs	r2, #1
 8001d32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d34:	2301      	movs	r3, #1
 8001d36:	425b      	negs	r3, r3
 8001d38:	2103      	movs	r1, #3
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff ff7c 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SysTick_Config+0x44>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SysTick_Config+0x44>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b002      	add	sp, #8
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	210f      	movs	r1, #15
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	1c02      	adds	r2, r0, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	187b      	adds	r3, r7, r1
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	0011      	movs	r1, r2
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff ff5d 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b004      	add	sp, #16
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0018      	movs	r0, r3
 8001d92:	f7ff ffbf 	bl	8001d14 <SysTick_Config>
 8001d96:	0003      	movs	r3, r0
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b002      	add	sp, #8
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dae:	e147      	b.n	8002040 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2101      	movs	r1, #1
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4091      	lsls	r1, r2
 8001dba:	000a      	movs	r2, r1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d100      	bne.n	8001dc8 <HAL_GPIO_Init+0x28>
 8001dc6:	e138      	b.n	800203a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2203      	movs	r2, #3
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d005      	beq.n	8001de0 <HAL_GPIO_Init+0x40>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d130      	bne.n	8001e42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	409a      	lsls	r2, r3
 8001dee:	0013      	movs	r3, r2
 8001df0:	43da      	mvns	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	409a      	lsls	r2, r3
 8001e02:	0013      	movs	r3, r2
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e16:	2201      	movs	r2, #1
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	091b      	lsrs	r3, r3, #4
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
 8001e34:	0013      	movs	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2203      	movs	r2, #3
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d017      	beq.n	8001e7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2203      	movs	r2, #3
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	0013      	movs	r3, r2
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	0013      	movs	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2203      	movs	r2, #3
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d123      	bne.n	8001ed2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	58d3      	ldr	r3, [r2, r3]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2107      	movs	r1, #7
 8001eb6:	400b      	ands	r3, r1
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	0092      	lsls	r2, r2, #2
 8001ece:	6939      	ldr	r1, [r7, #16]
 8001ed0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2203      	movs	r2, #3
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	0013      	movs	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	23c0      	movs	r3, #192	; 0xc0
 8001f0c:	029b      	lsls	r3, r3, #10
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d100      	bne.n	8001f14 <HAL_GPIO_Init+0x174>
 8001f12:	e092      	b.n	800203a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001f14:	4a50      	ldr	r2, [pc, #320]	; (8002058 <HAL_GPIO_Init+0x2b8>)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3318      	adds	r3, #24
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	589b      	ldr	r3, [r3, r2]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2203      	movs	r2, #3
 8001f26:	4013      	ands	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	0013      	movs	r3, r2
 8001f30:	43da      	mvns	r2, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	23a0      	movs	r3, #160	; 0xa0
 8001f3c:	05db      	lsls	r3, r3, #23
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d013      	beq.n	8001f6a <HAL_GPIO_Init+0x1ca>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a45      	ldr	r2, [pc, #276]	; (800205c <HAL_GPIO_Init+0x2bc>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00d      	beq.n	8001f66 <HAL_GPIO_Init+0x1c6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a44      	ldr	r2, [pc, #272]	; (8002060 <HAL_GPIO_Init+0x2c0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x1c2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a43      	ldr	r2, [pc, #268]	; (8002064 <HAL_GPIO_Init+0x2c4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_GPIO_Init+0x1be>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x1cc>
 8001f5e:	2305      	movs	r3, #5
 8001f60:	e004      	b.n	8001f6c <HAL_GPIO_Init+0x1cc>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_Init+0x1cc>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x1cc>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	2103      	movs	r1, #3
 8001f70:	400a      	ands	r2, r1
 8001f72:	00d2      	lsls	r2, r2, #3
 8001f74:	4093      	lsls	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f7c:	4936      	ldr	r1, [pc, #216]	; (8002058 <HAL_GPIO_Init+0x2b8>)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3318      	adds	r3, #24
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f8a:	4b33      	ldr	r3, [pc, #204]	; (8002058 <HAL_GPIO_Init+0x2b8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43da      	mvns	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	035b      	lsls	r3, r3, #13
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fae:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_GPIO_Init+0x2b8>)
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <HAL_GPIO_Init+0x2b8>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	039b      	lsls	r3, r3, #14
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	; (8002058 <HAL_GPIO_Init+0x2b8>)
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fde:	4a1e      	ldr	r2, [pc, #120]	; (8002058 <HAL_GPIO_Init+0x2b8>)
 8001fe0:	2384      	movs	r3, #132	; 0x84
 8001fe2:	58d3      	ldr	r3, [r2, r3]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43da      	mvns	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	029b      	lsls	r3, r3, #10
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002004:	4914      	ldr	r1, [pc, #80]	; (8002058 <HAL_GPIO_Init+0x2b8>)
 8002006:	2284      	movs	r2, #132	; 0x84
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800200c:	4a12      	ldr	r2, [pc, #72]	; (8002058 <HAL_GPIO_Init+0x2b8>)
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	58d3      	ldr	r3, [r2, r3]
 8002012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43da      	mvns	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	025b      	lsls	r3, r3, #9
 8002026:	4013      	ands	r3, r2
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002032:	4909      	ldr	r1, [pc, #36]	; (8002058 <HAL_GPIO_Init+0x2b8>)
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	40da      	lsrs	r2, r3
 8002048:	1e13      	subs	r3, r2, #0
 800204a:	d000      	beq.n	800204e <HAL_GPIO_Init+0x2ae>
 800204c:	e6b0      	b.n	8001db0 <HAL_GPIO_Init+0x10>
  }
}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b006      	add	sp, #24
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021800 	.word	0x40021800
 800205c:	50000400 	.word	0x50000400
 8002060:	50000800 	.word	0x50000800
 8002064:	50000c00 	.word	0x50000c00

08002068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	0008      	movs	r0, r1
 8002072:	0011      	movs	r1, r2
 8002074:	1cbb      	adds	r3, r7, #2
 8002076:	1c02      	adds	r2, r0, #0
 8002078:	801a      	strh	r2, [r3, #0]
 800207a:	1c7b      	adds	r3, r7, #1
 800207c:	1c0a      	adds	r2, r1, #0
 800207e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002080:	1c7b      	adds	r3, r7, #1
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d004      	beq.n	8002092 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002088:	1cbb      	adds	r3, r7, #2
 800208a:	881a      	ldrh	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002090:	e003      	b.n	800209a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002092:	1cbb      	adds	r3, r7, #2
 8002094:	881a      	ldrh	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	b002      	add	sp, #8
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d11f      	bne.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80020c8:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	0013      	movs	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	189b      	adds	r3, r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4912      	ldr	r1, [pc, #72]	; (8002120 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80020d6:	0018      	movs	r0, r3
 80020d8:	f7fe f812 	bl	8000100 <__udivsi3>
 80020dc:	0003      	movs	r3, r0
 80020de:	3301      	adds	r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020e2:	e008      	b.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	e001      	b.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e009      	b.n	800210a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	401a      	ands	r2, r3
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	429a      	cmp	r2, r3
 8002106:	d0ed      	beq.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	0018      	movs	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	b004      	add	sp, #16
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	40007000 	.word	0x40007000
 8002118:	fffff9ff 	.word	0xfffff9ff
 800211c:	20000000 	.word	0x20000000
 8002120:	000f4240 	.word	0x000f4240

08002124 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <LL_RCC_GetAPB1Prescaler+0x14>)
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	23e0      	movs	r3, #224	; 0xe0
 800212e:	01db      	lsls	r3, r3, #7
 8002130:	4013      	ands	r3, r2
}
 8002132:	0018      	movs	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e2f3      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2201      	movs	r2, #1
 8002154:	4013      	ands	r3, r2
 8002156:	d100      	bne.n	800215a <HAL_RCC_OscConfig+0x1e>
 8002158:	e07c      	b.n	8002254 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215a:	4bc3      	ldr	r3, [pc, #780]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2238      	movs	r2, #56	; 0x38
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002164:	4bc0      	ldr	r3, [pc, #768]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2203      	movs	r2, #3
 800216a:	4013      	ands	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	2b10      	cmp	r3, #16
 8002172:	d102      	bne.n	800217a <HAL_RCC_OscConfig+0x3e>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d002      	beq.n	8002180 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	2b08      	cmp	r3, #8
 800217e:	d10b      	bne.n	8002198 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	4bb9      	ldr	r3, [pc, #740]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	029b      	lsls	r3, r3, #10
 8002188:	4013      	ands	r3, r2
 800218a:	d062      	beq.n	8002252 <HAL_RCC_OscConfig+0x116>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d15e      	bne.n	8002252 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e2ce      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	025b      	lsls	r3, r3, #9
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_OscConfig+0x78>
 80021a4:	4bb0      	ldr	r3, [pc, #704]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4baf      	ldr	r3, [pc, #700]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021aa:	2180      	movs	r1, #128	; 0x80
 80021ac:	0249      	lsls	r1, r1, #9
 80021ae:	430a      	orrs	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e020      	b.n	80021f6 <HAL_RCC_OscConfig+0xba>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	23a0      	movs	r3, #160	; 0xa0
 80021ba:	02db      	lsls	r3, r3, #11
 80021bc:	429a      	cmp	r2, r3
 80021be:	d10e      	bne.n	80021de <HAL_RCC_OscConfig+0xa2>
 80021c0:	4ba9      	ldr	r3, [pc, #676]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4ba8      	ldr	r3, [pc, #672]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	02c9      	lsls	r1, r1, #11
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	4ba6      	ldr	r3, [pc, #664]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4ba5      	ldr	r3, [pc, #660]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	0249      	lsls	r1, r1, #9
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e00b      	b.n	80021f6 <HAL_RCC_OscConfig+0xba>
 80021de:	4ba2      	ldr	r3, [pc, #648]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4ba1      	ldr	r3, [pc, #644]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021e4:	49a1      	ldr	r1, [pc, #644]	; (800246c <HAL_RCC_OscConfig+0x330>)
 80021e6:	400a      	ands	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	4b9f      	ldr	r3, [pc, #636]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b9e      	ldr	r3, [pc, #632]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021f0:	499f      	ldr	r1, [pc, #636]	; (8002470 <HAL_RCC_OscConfig+0x334>)
 80021f2:	400a      	ands	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d014      	beq.n	8002228 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7fe fec3 	bl	8000f88 <HAL_GetTick>
 8002202:	0003      	movs	r3, r0
 8002204:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002208:	f7fe febe 	bl	8000f88 <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	; 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e28d      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800221a:	4b93      	ldr	r3, [pc, #588]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	029b      	lsls	r3, r3, #10
 8002222:	4013      	ands	r3, r2
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0xcc>
 8002226:	e015      	b.n	8002254 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe feae 	bl	8000f88 <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002232:	f7fe fea9 	bl	8000f88 <HAL_GetTick>
 8002236:	0002      	movs	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b64      	cmp	r3, #100	; 0x64
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e278      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002244:	4b88      	ldr	r3, [pc, #544]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	029b      	lsls	r3, r3, #10
 800224c:	4013      	ands	r3, r2
 800224e:	d1f0      	bne.n	8002232 <HAL_RCC_OscConfig+0xf6>
 8002250:	e000      	b.n	8002254 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002252:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2202      	movs	r2, #2
 800225a:	4013      	ands	r3, r2
 800225c:	d100      	bne.n	8002260 <HAL_RCC_OscConfig+0x124>
 800225e:	e099      	b.n	8002394 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002260:	4b81      	ldr	r3, [pc, #516]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2238      	movs	r2, #56	; 0x38
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800226a:	4b7f      	ldr	r3, [pc, #508]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2203      	movs	r2, #3
 8002270:	4013      	ands	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b10      	cmp	r3, #16
 8002278:	d102      	bne.n	8002280 <HAL_RCC_OscConfig+0x144>
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d002      	beq.n	8002286 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d135      	bne.n	80022f2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002286:	4b78      	ldr	r3, [pc, #480]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4013      	ands	r3, r2
 8002290:	d005      	beq.n	800229e <HAL_RCC_OscConfig+0x162>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e24b      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229e:	4b72      	ldr	r3, [pc, #456]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a74      	ldr	r2, [pc, #464]	; (8002474 <HAL_RCC_OscConfig+0x338>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	0019      	movs	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	021a      	lsls	r2, r3, #8
 80022ae:	4b6e      	ldr	r3, [pc, #440]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80022b0:	430a      	orrs	r2, r1
 80022b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d112      	bne.n	80022e0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022ba:	4b6b      	ldr	r3, [pc, #428]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a6e      	ldr	r2, [pc, #440]	; (8002478 <HAL_RCC_OscConfig+0x33c>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	4b67      	ldr	r3, [pc, #412]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80022ce:	4b66      	ldr	r3, [pc, #408]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0adb      	lsrs	r3, r3, #11
 80022d4:	2207      	movs	r2, #7
 80022d6:	4013      	ands	r3, r2
 80022d8:	4a68      	ldr	r2, [pc, #416]	; (800247c <HAL_RCC_OscConfig+0x340>)
 80022da:	40da      	lsrs	r2, r3
 80022dc:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_OscConfig+0x344>)
 80022de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022e0:	4b68      	ldr	r3, [pc, #416]	; (8002484 <HAL_RCC_OscConfig+0x348>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7fe fdf3 	bl	8000ed0 <HAL_InitTick>
 80022ea:	1e03      	subs	r3, r0, #0
 80022ec:	d051      	beq.n	8002392 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e221      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d030      	beq.n	800235c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022fa:	4b5b      	ldr	r3, [pc, #364]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a5e      	ldr	r2, [pc, #376]	; (8002478 <HAL_RCC_OscConfig+0x33c>)
 8002300:	4013      	ands	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	4b57      	ldr	r3, [pc, #348]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800230e:	4b56      	ldr	r3, [pc, #344]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	4b55      	ldr	r3, [pc, #340]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	0049      	lsls	r1, r1, #1
 8002318:	430a      	orrs	r2, r1
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fe34 	bl	8000f88 <HAL_GetTick>
 8002320:	0003      	movs	r3, r0
 8002322:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002326:	f7fe fe2f 	bl	8000f88 <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e1fe      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002338:	4b4b      	ldr	r3, [pc, #300]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4013      	ands	r3, r2
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b48      	ldr	r3, [pc, #288]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a4a      	ldr	r2, [pc, #296]	; (8002474 <HAL_RCC_OscConfig+0x338>)
 800234a:	4013      	ands	r3, r2
 800234c:	0019      	movs	r1, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	021a      	lsls	r2, r3, #8
 8002354:	4b44      	ldr	r3, [pc, #272]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002356:	430a      	orrs	r2, r1
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	e01b      	b.n	8002394 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800235c:	4b42      	ldr	r3, [pc, #264]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b41      	ldr	r3, [pc, #260]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002362:	4949      	ldr	r1, [pc, #292]	; (8002488 <HAL_RCC_OscConfig+0x34c>)
 8002364:	400a      	ands	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fe0e 	bl	8000f88 <HAL_GetTick>
 800236c:	0003      	movs	r3, r0
 800236e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002372:	f7fe fe09 	bl	8000f88 <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e1d8      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002384:	4b38      	ldr	r3, [pc, #224]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4013      	ands	r3, r2
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x236>
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002392:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2208      	movs	r2, #8
 800239a:	4013      	ands	r3, r2
 800239c:	d047      	beq.n	800242e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800239e:	4b32      	ldr	r3, [pc, #200]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2238      	movs	r2, #56	; 0x38
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b18      	cmp	r3, #24
 80023a8:	d10a      	bne.n	80023c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80023aa:	4b2f      	ldr	r3, [pc, #188]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80023ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ae:	2202      	movs	r2, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	d03c      	beq.n	800242e <HAL_RCC_OscConfig+0x2f2>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d138      	bne.n	800242e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e1ba      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d019      	beq.n	80023fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80023ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80023ce:	2101      	movs	r1, #1
 80023d0:	430a      	orrs	r2, r1
 80023d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fe fdd8 	bl	8000f88 <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023de:	f7fe fdd3 	bl	8000f88 <HAL_GetTick>
 80023e2:	0002      	movs	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e1a2      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80023f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	d0f1      	beq.n	80023de <HAL_RCC_OscConfig+0x2a2>
 80023fa:	e018      	b.n	800242e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80023fc:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 80023fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002402:	2101      	movs	r1, #1
 8002404:	438a      	bics	r2, r1
 8002406:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe fdbe 	bl	8000f88 <HAL_GetTick>
 800240c:	0003      	movs	r3, r0
 800240e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002412:	f7fe fdb9 	bl	8000f88 <HAL_GetTick>
 8002416:	0002      	movs	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e188      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002424:	4b10      	ldr	r3, [pc, #64]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002428:	2202      	movs	r2, #2
 800242a:	4013      	ands	r3, r2
 800242c:	d1f1      	bne.n	8002412 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2204      	movs	r2, #4
 8002434:	4013      	ands	r3, r2
 8002436:	d100      	bne.n	800243a <HAL_RCC_OscConfig+0x2fe>
 8002438:	e0c6      	b.n	80025c8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243a:	231f      	movs	r3, #31
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2238      	movs	r2, #56	; 0x38
 8002448:	4013      	ands	r3, r2
 800244a:	2b20      	cmp	r3, #32
 800244c:	d11e      	bne.n	800248c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	2202      	movs	r2, #2
 8002454:	4013      	ands	r3, r2
 8002456:	d100      	bne.n	800245a <HAL_RCC_OscConfig+0x31e>
 8002458:	e0b6      	b.n	80025c8 <HAL_RCC_OscConfig+0x48c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d000      	beq.n	8002464 <HAL_RCC_OscConfig+0x328>
 8002462:	e0b1      	b.n	80025c8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e166      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
 8002468:	40021000 	.word	0x40021000
 800246c:	fffeffff 	.word	0xfffeffff
 8002470:	fffbffff 	.word	0xfffbffff
 8002474:	ffff80ff 	.word	0xffff80ff
 8002478:	ffffc7ff 	.word	0xffffc7ff
 800247c:	00f42400 	.word	0x00f42400
 8002480:	20000000 	.word	0x20000000
 8002484:	20000004 	.word	0x20000004
 8002488:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800248c:	4bac      	ldr	r3, [pc, #688]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 800248e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	055b      	lsls	r3, r3, #21
 8002494:	4013      	ands	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_RCC_OscConfig+0x360>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x362>
 800249c:	2300      	movs	r3, #0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d011      	beq.n	80024c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	4ba7      	ldr	r3, [pc, #668]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 80024a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024a6:	4ba6      	ldr	r3, [pc, #664]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	0549      	lsls	r1, r1, #21
 80024ac:	430a      	orrs	r2, r1
 80024ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80024b0:	4ba3      	ldr	r3, [pc, #652]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 80024b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	055b      	lsls	r3, r3, #21
 80024b8:	4013      	ands	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80024be:	231f      	movs	r3, #31
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c6:	4b9f      	ldr	r3, [pc, #636]	; (8002744 <HAL_RCC_OscConfig+0x608>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4013      	ands	r3, r2
 80024d0:	d11a      	bne.n	8002508 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d2:	4b9c      	ldr	r3, [pc, #624]	; (8002744 <HAL_RCC_OscConfig+0x608>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4b9b      	ldr	r3, [pc, #620]	; (8002744 <HAL_RCC_OscConfig+0x608>)
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	0049      	lsls	r1, r1, #1
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80024e0:	f7fe fd52 	bl	8000f88 <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ea:	f7fe fd4d 	bl	8000f88 <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e11c      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fc:	4b91      	ldr	r3, [pc, #580]	; (8002744 <HAL_RCC_OscConfig+0x608>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4013      	ands	r3, r2
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x3e2>
 8002510:	4b8b      	ldr	r3, [pc, #556]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002512:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002514:	4b8a      	ldr	r3, [pc, #552]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002516:	2101      	movs	r1, #1
 8002518:	430a      	orrs	r2, r1
 800251a:	65da      	str	r2, [r3, #92]	; 0x5c
 800251c:	e01c      	b.n	8002558 <HAL_RCC_OscConfig+0x41c>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b05      	cmp	r3, #5
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x404>
 8002526:	4b86      	ldr	r3, [pc, #536]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002528:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800252a:	4b85      	ldr	r3, [pc, #532]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 800252c:	2104      	movs	r1, #4
 800252e:	430a      	orrs	r2, r1
 8002530:	65da      	str	r2, [r3, #92]	; 0x5c
 8002532:	4b83      	ldr	r3, [pc, #524]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002534:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002536:	4b82      	ldr	r3, [pc, #520]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002538:	2101      	movs	r1, #1
 800253a:	430a      	orrs	r2, r1
 800253c:	65da      	str	r2, [r3, #92]	; 0x5c
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0x41c>
 8002540:	4b7f      	ldr	r3, [pc, #508]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002542:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002544:	4b7e      	ldr	r3, [pc, #504]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002546:	2101      	movs	r1, #1
 8002548:	438a      	bics	r2, r1
 800254a:	65da      	str	r2, [r3, #92]	; 0x5c
 800254c:	4b7c      	ldr	r3, [pc, #496]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 800254e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002550:	4b7b      	ldr	r3, [pc, #492]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002552:	2104      	movs	r1, #4
 8002554:	438a      	bics	r2, r1
 8002556:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d014      	beq.n	800258a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fd12 	bl	8000f88 <HAL_GetTick>
 8002564:	0003      	movs	r3, r0
 8002566:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002568:	e009      	b.n	800257e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7fe fd0d 	bl	8000f88 <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	4a74      	ldr	r2, [pc, #464]	; (8002748 <HAL_RCC_OscConfig+0x60c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0db      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257e:	4b70      	ldr	r3, [pc, #448]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	2202      	movs	r2, #2
 8002584:	4013      	ands	r3, r2
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x42e>
 8002588:	e013      	b.n	80025b2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fcfd 	bl	8000f88 <HAL_GetTick>
 800258e:	0003      	movs	r3, r0
 8002590:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002592:	e009      	b.n	80025a8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002594:	f7fe fcf8 	bl	8000f88 <HAL_GetTick>
 8002598:	0002      	movs	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	4a6a      	ldr	r2, [pc, #424]	; (8002748 <HAL_RCC_OscConfig+0x60c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0c6      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a8:	4b65      	ldr	r3, [pc, #404]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	2202      	movs	r2, #2
 80025ae:	4013      	ands	r3, r2
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80025b2:	231f      	movs	r3, #31
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4b60      	ldr	r3, [pc, #384]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 80025be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025c0:	4b5f      	ldr	r3, [pc, #380]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 80025c2:	4962      	ldr	r1, [pc, #392]	; (800274c <HAL_RCC_OscConfig+0x610>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d100      	bne.n	80025d2 <HAL_RCC_OscConfig+0x496>
 80025d0:	e0b0      	b.n	8002734 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d2:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2238      	movs	r2, #56	; 0x38
 80025d8:	4013      	ands	r3, r2
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d100      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4a4>
 80025de:	e078      	b.n	80026d2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d153      	bne.n	8002690 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e8:	4b55      	ldr	r3, [pc, #340]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b54      	ldr	r3, [pc, #336]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 80025ee:	4958      	ldr	r1, [pc, #352]	; (8002750 <HAL_RCC_OscConfig+0x614>)
 80025f0:	400a      	ands	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fcc8 	bl	8000f88 <HAL_GetTick>
 80025f8:	0003      	movs	r3, r0
 80025fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fe:	f7fe fcc3 	bl	8000f88 <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e092      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002610:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	049b      	lsls	r3, r3, #18
 8002618:	4013      	ands	r3, r2
 800261a:	d1f0      	bne.n	80025fe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261c:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a4c      	ldr	r2, [pc, #304]	; (8002754 <HAL_RCC_OscConfig+0x618>)
 8002622:	4013      	ands	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1a      	ldr	r2, [r3, #32]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	431a      	orrs	r2, r3
 8002644:	4b3e      	ldr	r3, [pc, #248]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002646:	430a      	orrs	r2, r1
 8002648:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b3c      	ldr	r3, [pc, #240]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	0449      	lsls	r1, r1, #17
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002658:	4b39      	ldr	r3, [pc, #228]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 800265e:	2180      	movs	r1, #128	; 0x80
 8002660:	0549      	lsls	r1, r1, #21
 8002662:	430a      	orrs	r2, r1
 8002664:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe fc8f 	bl	8000f88 <HAL_GetTick>
 800266a:	0003      	movs	r3, r0
 800266c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fc8a 	bl	8000f88 <HAL_GetTick>
 8002674:	0002      	movs	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e059      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	049b      	lsls	r3, r3, #18
 800268a:	4013      	ands	r3, r2
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x534>
 800268e:	e051      	b.n	8002734 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 8002696:	492e      	ldr	r1, [pc, #184]	; (8002750 <HAL_RCC_OscConfig+0x614>)
 8002698:	400a      	ands	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fc74 	bl	8000f88 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe fc6f 	bl	8000f88 <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e03e      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b8:	4b21      	ldr	r3, [pc, #132]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	049b      	lsls	r3, r3, #18
 80026c0:	4013      	ands	r3, r2
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 80026ca:	4923      	ldr	r1, [pc, #140]	; (8002758 <HAL_RCC_OscConfig+0x61c>)
 80026cc:	400a      	ands	r2, r1
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	e030      	b.n	8002734 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e02b      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_RCC_OscConfig+0x604>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2203      	movs	r2, #3
 80026e8:	401a      	ands	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d11e      	bne.n	8002730 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2270      	movs	r2, #112	; 0x70
 80026f6:	401a      	ands	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d117      	bne.n	8002730 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	23fe      	movs	r3, #254	; 0xfe
 8002704:	01db      	lsls	r3, r3, #7
 8002706:	401a      	ands	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d10e      	bne.n	8002730 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	23f8      	movs	r3, #248	; 0xf8
 8002716:	039b      	lsls	r3, r3, #14
 8002718:	401a      	ands	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d106      	bne.n	8002730 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	0f5b      	lsrs	r3, r3, #29
 8002726:	075a      	lsls	r2, r3, #29
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	0018      	movs	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	b008      	add	sp, #32
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	40021000 	.word	0x40021000
 8002744:	40007000 	.word	0x40007000
 8002748:	00001388 	.word	0x00001388
 800274c:	efffffff 	.word	0xefffffff
 8002750:	feffffff 	.word	0xfeffffff
 8002754:	1fc1808c 	.word	0x1fc1808c
 8002758:	effefffc 	.word	0xeffefffc

0800275c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0e9      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002770:	4b76      	ldr	r3, [pc, #472]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2207      	movs	r2, #7
 8002776:	4013      	ands	r3, r2
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d91e      	bls.n	80027bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b73      	ldr	r3, [pc, #460]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2207      	movs	r2, #7
 8002784:	4393      	bics	r3, r2
 8002786:	0019      	movs	r1, r3
 8002788:	4b70      	ldr	r3, [pc, #448]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002790:	f7fe fbfa 	bl	8000f88 <HAL_GetTick>
 8002794:	0003      	movs	r3, r0
 8002796:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002798:	e009      	b.n	80027ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279a:	f7fe fbf5 	bl	8000f88 <HAL_GetTick>
 800279e:	0002      	movs	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	4a6a      	ldr	r2, [pc, #424]	; (8002950 <HAL_RCC_ClockConfig+0x1f4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0ca      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027ae:	4b67      	ldr	r3, [pc, #412]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2207      	movs	r2, #7
 80027b4:	4013      	ands	r3, r2
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2202      	movs	r2, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	d015      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2204      	movs	r2, #4
 80027cc:	4013      	ands	r3, r2
 80027ce:	d006      	beq.n	80027de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027d0:	4b60      	ldr	r3, [pc, #384]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	4b5f      	ldr	r3, [pc, #380]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 80027d6:	21e0      	movs	r1, #224	; 0xe0
 80027d8:	01c9      	lsls	r1, r1, #7
 80027da:	430a      	orrs	r2, r1
 80027dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027de:	4b5d      	ldr	r3, [pc, #372]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	4a5d      	ldr	r2, [pc, #372]	; (8002958 <HAL_RCC_ClockConfig+0x1fc>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	0019      	movs	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	4b59      	ldr	r3, [pc, #356]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2201      	movs	r2, #1
 80027f8:	4013      	ands	r3, r2
 80027fa:	d057      	beq.n	80028ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d107      	bne.n	8002814 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002804:	4b53      	ldr	r3, [pc, #332]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	029b      	lsls	r3, r3, #10
 800280c:	4013      	ands	r3, r2
 800280e:	d12b      	bne.n	8002868 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e097      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d107      	bne.n	800282c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281c:	4b4d      	ldr	r3, [pc, #308]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	049b      	lsls	r3, r3, #18
 8002824:	4013      	ands	r3, r2
 8002826:	d11f      	bne.n	8002868 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e08b      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d107      	bne.n	8002844 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002834:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4013      	ands	r3, r2
 800283e:	d113      	bne.n	8002868 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e07f      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d106      	bne.n	800285a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800284c:	4b41      	ldr	r3, [pc, #260]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 800284e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002850:	2202      	movs	r2, #2
 8002852:	4013      	ands	r3, r2
 8002854:	d108      	bne.n	8002868 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e074      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285a:	4b3e      	ldr	r3, [pc, #248]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	2202      	movs	r2, #2
 8002860:	4013      	ands	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e06d      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002868:	4b3a      	ldr	r3, [pc, #232]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2207      	movs	r2, #7
 800286e:	4393      	bics	r3, r2
 8002870:	0019      	movs	r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4b37      	ldr	r3, [pc, #220]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 8002878:	430a      	orrs	r2, r1
 800287a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800287c:	f7fe fb84 	bl	8000f88 <HAL_GetTick>
 8002880:	0003      	movs	r3, r0
 8002882:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002884:	e009      	b.n	800289a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002886:	f7fe fb7f 	bl	8000f88 <HAL_GetTick>
 800288a:	0002      	movs	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	4a2f      	ldr	r2, [pc, #188]	; (8002950 <HAL_RCC_ClockConfig+0x1f4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e054      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2238      	movs	r2, #56	; 0x38
 80028a0:	401a      	ands	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d1ec      	bne.n	8002886 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2207      	movs	r2, #7
 80028b2:	4013      	ands	r3, r2
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d21e      	bcs.n	80028f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2207      	movs	r2, #7
 80028c0:	4393      	bics	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	4b21      	ldr	r3, [pc, #132]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028cc:	f7fe fb5c 	bl	8000f88 <HAL_GetTick>
 80028d0:	0003      	movs	r3, r0
 80028d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028d4:	e009      	b.n	80028ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d6:	f7fe fb57 	bl	8000f88 <HAL_GetTick>
 80028da:	0002      	movs	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <HAL_RCC_ClockConfig+0x1f4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e02c      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028ea:	4b18      	ldr	r3, [pc, #96]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2207      	movs	r2, #7
 80028f0:	4013      	ands	r3, r2
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1ee      	bne.n	80028d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2204      	movs	r2, #4
 80028fe:	4013      	ands	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	4a15      	ldr	r2, [pc, #84]	; (800295c <HAL_RCC_ClockConfig+0x200>)
 8002908:	4013      	ands	r3, r2
 800290a:	0019      	movs	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 8002912:	430a      	orrs	r2, r1
 8002914:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002916:	f000 f829 	bl	800296c <HAL_RCC_GetSysClockFreq>
 800291a:	0001      	movs	r1, r0
 800291c:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	220f      	movs	r2, #15
 8002924:	401a      	ands	r2, r3
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <HAL_RCC_ClockConfig+0x204>)
 8002928:	0092      	lsls	r2, r2, #2
 800292a:	58d3      	ldr	r3, [r2, r3]
 800292c:	221f      	movs	r2, #31
 800292e:	4013      	ands	r3, r2
 8002930:	000a      	movs	r2, r1
 8002932:	40da      	lsrs	r2, r3
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_ClockConfig+0x208>)
 8002936:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_ClockConfig+0x20c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0018      	movs	r0, r3
 800293e:	f7fe fac7 	bl	8000ed0 <HAL_InitTick>
 8002942:	0003      	movs	r3, r0
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	b004      	add	sp, #16
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40022000 	.word	0x40022000
 8002950:	00001388 	.word	0x00001388
 8002954:	40021000 	.word	0x40021000
 8002958:	fffff0ff 	.word	0xfffff0ff
 800295c:	ffff8fff 	.word	0xffff8fff
 8002960:	08005fc4 	.word	0x08005fc4
 8002964:	20000000 	.word	0x20000000
 8002968:	20000004 	.word	0x20000004

0800296c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002972:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2238      	movs	r2, #56	; 0x38
 8002978:	4013      	ands	r3, r2
 800297a:	d10f      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800297c:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0adb      	lsrs	r3, r3, #11
 8002982:	2207      	movs	r2, #7
 8002984:	4013      	ands	r3, r2
 8002986:	2201      	movs	r2, #1
 8002988:	409a      	lsls	r2, r3
 800298a:	0013      	movs	r3, r2
 800298c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800298e:	6839      	ldr	r1, [r7, #0]
 8002990:	4835      	ldr	r0, [pc, #212]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002992:	f7fd fbb5 	bl	8000100 <__udivsi3>
 8002996:	0003      	movs	r3, r0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	e05d      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800299c:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2238      	movs	r2, #56	; 0x38
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029a8:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x100>)
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	e054      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ae:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2238      	movs	r2, #56	; 0x38
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d138      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80029ba:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2203      	movs	r2, #3
 80029c0:	4013      	ands	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029c4:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	2207      	movs	r2, #7
 80029cc:	4013      	ands	r3, r2
 80029ce:	3301      	adds	r3, #1
 80029d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d10d      	bne.n	80029f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	4824      	ldr	r0, [pc, #144]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x100>)
 80029dc:	f7fd fb90 	bl	8000100 <__udivsi3>
 80029e0:	0003      	movs	r3, r0
 80029e2:	0019      	movs	r1, r3
 80029e4:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	227f      	movs	r2, #127	; 0x7f
 80029ec:	4013      	ands	r3, r2
 80029ee:	434b      	muls	r3, r1
 80029f0:	617b      	str	r3, [r7, #20]
        break;
 80029f2:	e00d      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	481c      	ldr	r0, [pc, #112]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029f8:	f7fd fb82 	bl	8000100 <__udivsi3>
 80029fc:	0003      	movs	r3, r0
 80029fe:	0019      	movs	r1, r3
 8002a00:	4b18      	ldr	r3, [pc, #96]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	227f      	movs	r2, #127	; 0x7f
 8002a08:	4013      	ands	r3, r2
 8002a0a:	434b      	muls	r3, r1
 8002a0c:	617b      	str	r3, [r7, #20]
        break;
 8002a0e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	0f5b      	lsrs	r3, r3, #29
 8002a16:	2207      	movs	r2, #7
 8002a18:	4013      	ands	r3, r2
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	6978      	ldr	r0, [r7, #20]
 8002a22:	f7fd fb6d 	bl	8000100 <__udivsi3>
 8002a26:	0003      	movs	r3, r0
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e015      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2238      	movs	r2, #56	; 0x38
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d103      	bne.n	8002a40 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2238      	movs	r2, #56	; 0x38
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b18      	cmp	r3, #24
 8002a4a:	d103      	bne.n	8002a54 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a4c:	23fa      	movs	r3, #250	; 0xfa
 8002a4e:	01db      	lsls	r3, r3, #7
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	e001      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a58:	693b      	ldr	r3, [r7, #16]
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b006      	add	sp, #24
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	40021000 	.word	0x40021000
 8002a68:	00f42400 	.word	0x00f42400
 8002a6c:	007a1200 	.word	0x007a1200

08002a70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a74:	4b02      	ldr	r3, [pc, #8]	; (8002a80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a76:	681b      	ldr	r3, [r3, #0]
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	20000000 	.word	0x20000000

08002a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a84:	b5b0      	push	{r4, r5, r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a88:	f7ff fff2 	bl	8002a70 <HAL_RCC_GetHCLKFreq>
 8002a8c:	0004      	movs	r4, r0
 8002a8e:	f7ff fb49 	bl	8002124 <LL_RCC_GetAPB1Prescaler>
 8002a92:	0003      	movs	r3, r0
 8002a94:	0b1a      	lsrs	r2, r3, #12
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a98:	0092      	lsls	r2, r2, #2
 8002a9a:	58d3      	ldr	r3, [r2, r3]
 8002a9c:	221f      	movs	r2, #31
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	40dc      	lsrs	r4, r3
 8002aa2:	0023      	movs	r3, r4
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	08006004 	.word	0x08006004

08002ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ab8:	2313      	movs	r3, #19
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ac0:	2312      	movs	r3, #18
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	029b      	lsls	r3, r3, #10
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d100      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002ad4:	e0a3      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad6:	2011      	movs	r0, #17
 8002ad8:	183b      	adds	r3, r7, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ade:	4b7f      	ldr	r3, [pc, #508]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ae0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	055b      	lsls	r3, r3, #21
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d110      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	4b7c      	ldr	r3, [pc, #496]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002aec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aee:	4b7b      	ldr	r3, [pc, #492]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	0549      	lsls	r1, r1, #21
 8002af4:	430a      	orrs	r2, r1
 8002af6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002af8:	4b78      	ldr	r3, [pc, #480]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	055b      	lsls	r3, r3, #21
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b06:	183b      	adds	r3, r7, r0
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b0c:	4b74      	ldr	r3, [pc, #464]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b73      	ldr	r3, [pc, #460]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	0049      	lsls	r1, r1, #1
 8002b16:	430a      	orrs	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b1a:	f7fe fa35 	bl	8000f88 <HAL_GetTick>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b22:	e00b      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b24:	f7fe fa30 	bl	8000f88 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d904      	bls.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002b32:	2313      	movs	r3, #19
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2203      	movs	r2, #3
 8002b38:	701a      	strb	r2, [r3, #0]
        break;
 8002b3a:	e005      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b3c:	4b68      	ldr	r3, [pc, #416]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	d0ed      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002b48:	2313      	movs	r3, #19
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d154      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b52:	4b62      	ldr	r3, [pc, #392]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b56:	23c0      	movs	r3, #192	; 0xc0
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d019      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d014      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b6e:	4b5b      	ldr	r3, [pc, #364]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	4a5c      	ldr	r2, [pc, #368]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b78:	4b58      	ldr	r3, [pc, #352]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b7c:	4b57      	ldr	r3, [pc, #348]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	0249      	lsls	r1, r1, #9
 8002b82:	430a      	orrs	r2, r1
 8002b84:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b86:	4b55      	ldr	r3, [pc, #340]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b8a:	4b54      	ldr	r3, [pc, #336]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b8c:	4956      	ldr	r1, [pc, #344]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002b8e:	400a      	ands	r2, r1
 8002b90:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b92:	4b52      	ldr	r3, [pc, #328]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d016      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe f9f2 	bl	8000f88 <HAL_GetTick>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba8:	e00c      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe f9ed 	bl	8000f88 <HAL_GetTick>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	4a4d      	ldr	r2, [pc, #308]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d904      	bls.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002bba:	2313      	movs	r3, #19
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	701a      	strb	r2, [r3, #0]
            break;
 8002bc2:	e004      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc4:	4b45      	ldr	r3, [pc, #276]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	2202      	movs	r2, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d0ed      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002bce:	2313      	movs	r3, #19
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10a      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd8:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	4a41      	ldr	r2, [pc, #260]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	0019      	movs	r1, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002be8:	430a      	orrs	r2, r1
 8002bea:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bec:	e00c      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bee:	2312      	movs	r3, #18
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	2213      	movs	r2, #19
 8002bf4:	18ba      	adds	r2, r7, r2
 8002bf6:	7812      	ldrb	r2, [r2, #0]
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e005      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfc:	2312      	movs	r3, #18
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	2213      	movs	r2, #19
 8002c02:	18ba      	adds	r2, r7, r2
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c08:	2311      	movs	r3, #17
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d105      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c12:	4b32      	ldr	r3, [pc, #200]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c16:	4b31      	ldr	r3, [pc, #196]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c18:	4935      	ldr	r1, [pc, #212]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2201      	movs	r2, #1
 8002c24:	4013      	ands	r3, r2
 8002c26:	d009      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c28:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	4393      	bics	r3, r2
 8002c30:	0019      	movs	r1, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2220      	movs	r2, #32
 8002c42:	4013      	ands	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	4a2a      	ldr	r2, [pc, #168]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	01db      	lsls	r3, r3, #7
 8002c62:	4013      	ands	r3, r2
 8002c64:	d015      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	0899      	lsrs	r1, r3, #2
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c74:	430a      	orrs	r2, r1
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	05db      	lsls	r3, r3, #23
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d106      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	0249      	lsls	r1, r1, #9
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d016      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	4a15      	ldr	r2, [pc, #84]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	01db      	lsls	r3, r3, #7
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d106      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	0249      	lsls	r1, r1, #9
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ccc:	2312      	movs	r3, #18
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	781b      	ldrb	r3, [r3, #0]
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b006      	add	sp, #24
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	fffffcff 	.word	0xfffffcff
 8002ce8:	fffeffff 	.word	0xfffeffff
 8002cec:	00001388 	.word	0x00001388
 8002cf0:	efffffff 	.word	0xefffffff
 8002cf4:	ffffcfff 	.word	0xffffcfff
 8002cf8:	ffff3fff 	.word	0xffff3fff

08002cfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0a8      	b.n	8002e60 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	2382      	movs	r3, #130	; 0x82
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d009      	beq.n	8002d36 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	61da      	str	r2, [r3, #28]
 8002d28:	e005      	b.n	8002d36 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	225d      	movs	r2, #93	; 0x5d
 8002d40:	5c9b      	ldrb	r3, [r3, r2]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	225c      	movs	r2, #92	; 0x5c
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	0018      	movs	r0, r3
 8002d54:	f7fd fe00 	bl	8000958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	225d      	movs	r2, #93	; 0x5d
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2140      	movs	r1, #64	; 0x40
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	23e0      	movs	r3, #224	; 0xe0
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d902      	bls.n	8002d82 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	e002      	b.n	8002d88 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	015b      	lsls	r3, r3, #5
 8002d86:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	23f0      	movs	r3, #240	; 0xf0
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d008      	beq.n	8002da6 <HAL_SPI_Init+0xaa>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	23e0      	movs	r3, #224	; 0xe0
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d002      	beq.n	8002da6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	2382      	movs	r3, #130	; 0x82
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	401a      	ands	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6899      	ldr	r1, [r3, #8]
 8002db4:	2384      	movs	r3, #132	; 0x84
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	400b      	ands	r3, r1
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	400b      	ands	r3, r1
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	2101      	movs	r1, #1
 8002dcc:	400b      	ands	r3, r1
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6999      	ldr	r1, [r3, #24]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	400b      	ands	r3, r1
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	2138      	movs	r1, #56	; 0x38
 8002de2:	400b      	ands	r3, r1
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	2180      	movs	r1, #128	; 0x80
 8002dec:	400b      	ands	r3, r1
 8002dee:	431a      	orrs	r2, r3
 8002df0:	0011      	movs	r1, r2
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	019b      	lsls	r3, r3, #6
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	401a      	ands	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	2110      	movs	r1, #16
 8002e14:	400b      	ands	r3, r1
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	2108      	movs	r1, #8
 8002e1e:	400b      	ands	r3, r1
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68d9      	ldr	r1, [r3, #12]
 8002e26:	23f0      	movs	r3, #240	; 0xf0
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	400b      	ands	r3, r1
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	0011      	movs	r1, r2
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	015b      	lsls	r3, r3, #5
 8002e36:	401a      	ands	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4907      	ldr	r1, [pc, #28]	; (8002e68 <HAL_SPI_Init+0x16c>)
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	225d      	movs	r2, #93	; 0x5d
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b004      	add	sp, #16
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	fffff7ff 	.word	0xfffff7ff

08002e6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	1dbb      	adds	r3, r7, #6
 8002e7a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e7c:	231f      	movs	r3, #31
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	225c      	movs	r2, #92	; 0x5c
 8002e88:	5c9b      	ldrb	r3, [r3, r2]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_SPI_Transmit+0x26>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e147      	b.n	8003122 <HAL_SPI_Transmit+0x2b6>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	225c      	movs	r2, #92	; 0x5c
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e9a:	f7fe f875 	bl	8000f88 <HAL_GetTick>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002ea2:	2316      	movs	r3, #22
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	1dba      	adds	r2, r7, #6
 8002ea8:	8812      	ldrh	r2, [r2, #0]
 8002eaa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	225d      	movs	r2, #93	; 0x5d
 8002eb0:	5c9b      	ldrb	r3, [r3, r2]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d004      	beq.n	8002ec2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002eb8:	231f      	movs	r3, #31
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ec0:	e128      	b.n	8003114 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_SPI_Transmit+0x64>
 8002ec8:	1dbb      	adds	r3, r7, #6
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d104      	bne.n	8002eda <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002ed0:	231f      	movs	r3, #31
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ed8:	e11c      	b.n	8003114 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	225d      	movs	r2, #93	; 0x5d
 8002ede:	2103      	movs	r1, #3
 8002ee0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1dba      	adds	r2, r7, #6
 8002ef2:	8812      	ldrh	r2, [r2, #0]
 8002ef4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1dba      	adds	r2, r7, #6
 8002efa:	8812      	ldrh	r2, [r2, #0]
 8002efc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2244      	movs	r2, #68	; 0x44
 8002f08:	2100      	movs	r1, #0
 8002f0a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2246      	movs	r2, #70	; 0x46
 8002f10:	2100      	movs	r1, #0
 8002f12:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d110      	bne.n	8002f4e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2140      	movs	r1, #64	; 0x40
 8002f38:	438a      	bics	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2180      	movs	r1, #128	; 0x80
 8002f48:	01c9      	lsls	r1, r1, #7
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2240      	movs	r2, #64	; 0x40
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d007      	beq.n	8002f6c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2140      	movs	r1, #64	; 0x40
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	23e0      	movs	r3, #224	; 0xe0
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d952      	bls.n	800301e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d004      	beq.n	8002f8a <HAL_SPI_Transmit+0x11e>
 8002f80:	2316      	movs	r3, #22
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d143      	bne.n	8003012 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	881a      	ldrh	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	1c9a      	adds	r2, r3, #2
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fae:	e030      	b.n	8003012 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d112      	bne.n	8002fe4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	881a      	ldrh	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	1c9a      	adds	r2, r3, #2
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fe2:	e016      	b.n	8003012 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe4:	f7fd ffd0 	bl	8000f88 <HAL_GetTick>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d802      	bhi.n	8002ffa <HAL_SPI_Transmit+0x18e>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	d102      	bne.n	8003000 <HAL_SPI_Transmit+0x194>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d108      	bne.n	8003012 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003000:	231f      	movs	r3, #31
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2203      	movs	r2, #3
 8003006:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	225d      	movs	r2, #93	; 0x5d
 800300c:	2101      	movs	r1, #1
 800300e:	5499      	strb	r1, [r3, r2]
          goto error;
 8003010:	e080      	b.n	8003114 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1c9      	bne.n	8002fb0 <HAL_SPI_Transmit+0x144>
 800301c:	e053      	b.n	80030c6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d004      	beq.n	8003030 <HAL_SPI_Transmit+0x1c4>
 8003026:	2316      	movs	r3, #22
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d145      	bne.n	80030bc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	7812      	ldrb	r2, [r2, #0]
 800303c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003056:	e031      	b.n	80030bc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2202      	movs	r2, #2
 8003060:	4013      	ands	r3, r2
 8003062:	2b02      	cmp	r3, #2
 8003064:	d113      	bne.n	800308e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	7812      	ldrb	r2, [r2, #0]
 8003072:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800308c:	e016      	b.n	80030bc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800308e:	f7fd ff7b 	bl	8000f88 <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d802      	bhi.n	80030a4 <HAL_SPI_Transmit+0x238>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	d102      	bne.n	80030aa <HAL_SPI_Transmit+0x23e>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80030aa:	231f      	movs	r3, #31
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	2203      	movs	r2, #3
 80030b0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	225d      	movs	r2, #93	; 0x5d
 80030b6:	2101      	movs	r1, #1
 80030b8:	5499      	strb	r1, [r3, r2]
          goto error;
 80030ba:	e02b      	b.n	8003114 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1c8      	bne.n	8003058 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	6839      	ldr	r1, [r7, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f000 f95d 	bl	800338c <SPI_EndRxTxTransaction>
 80030d2:	1e03      	subs	r3, r0, #0
 80030d4:	d002      	beq.n	80030dc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030e4:	2300      	movs	r3, #0
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003102:	231f      	movs	r3, #31
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e003      	b.n	8003114 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	225d      	movs	r2, #93	; 0x5d
 8003110:	2101      	movs	r1, #1
 8003112:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	225c      	movs	r2, #92	; 0x5c
 8003118:	2100      	movs	r1, #0
 800311a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800311c:	231f      	movs	r3, #31
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	781b      	ldrb	r3, [r3, #0]
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b008      	add	sp, #32
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	1dfb      	adds	r3, r7, #7
 800313a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800313c:	f7fd ff24 	bl	8000f88 <HAL_GetTick>
 8003140:	0002      	movs	r2, r0
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	18d3      	adds	r3, r2, r3
 800314a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800314c:	f7fd ff1c 	bl	8000f88 <HAL_GetTick>
 8003150:	0003      	movs	r3, r0
 8003152:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003154:	4b3a      	ldr	r3, [pc, #232]	; (8003240 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	015b      	lsls	r3, r3, #5
 800315a:	0d1b      	lsrs	r3, r3, #20
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	4353      	muls	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003162:	e058      	b.n	8003216 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	3301      	adds	r3, #1
 8003168:	d055      	beq.n	8003216 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800316a:	f7fd ff0d 	bl	8000f88 <HAL_GetTick>
 800316e:	0002      	movs	r2, r0
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	429a      	cmp	r2, r3
 8003178:	d902      	bls.n	8003180 <SPI_WaitFlagStateUntilTimeout+0x54>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d142      	bne.n	8003206 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	21e0      	movs	r1, #224	; 0xe0
 800318c:	438a      	bics	r2, r1
 800318e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	2382      	movs	r3, #130	; 0x82
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	429a      	cmp	r2, r3
 800319a:	d113      	bne.n	80031c4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d005      	beq.n	80031b4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d107      	bne.n	80031c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2140      	movs	r1, #64	; 0x40
 80031c0:	438a      	bics	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	019b      	lsls	r3, r3, #6
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d110      	bne.n	80031f2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	491a      	ldr	r1, [pc, #104]	; (8003244 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80031dc:	400a      	ands	r2, r1
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2180      	movs	r1, #128	; 0x80
 80031ec:	0189      	lsls	r1, r1, #6
 80031ee:	430a      	orrs	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	225d      	movs	r2, #93	; 0x5d
 80031f6:	2101      	movs	r1, #1
 80031f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	225c      	movs	r2, #92	; 0x5c
 80031fe:	2100      	movs	r1, #0
 8003200:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e017      	b.n	8003236 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	3b01      	subs	r3, #1
 8003214:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	4013      	ands	r3, r2
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	425a      	negs	r2, r3
 8003226:	4153      	adcs	r3, r2
 8003228:	b2db      	uxtb	r3, r3
 800322a:	001a      	movs	r2, r3
 800322c:	1dfb      	adds	r3, r7, #7
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d197      	bne.n	8003164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	0018      	movs	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	b008      	add	sp, #32
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	20000000 	.word	0x20000000
 8003244:	ffffdfff 	.word	0xffffdfff

08003248 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003256:	2317      	movs	r3, #23
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800325e:	f7fd fe93 	bl	8000f88 <HAL_GetTick>
 8003262:	0002      	movs	r2, r0
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	18d3      	adds	r3, r2, r3
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800326e:	f7fd fe8b 	bl	8000f88 <HAL_GetTick>
 8003272:	0003      	movs	r3, r0
 8003274:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	330c      	adds	r3, #12
 800327c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800327e:	4b41      	ldr	r3, [pc, #260]	; (8003384 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	0013      	movs	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	189b      	adds	r3, r3, r2
 8003288:	00da      	lsls	r2, r3, #3
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	0d1b      	lsrs	r3, r3, #20
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	4353      	muls	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003294:	e068      	b.n	8003368 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	23c0      	movs	r3, #192	; 0xc0
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	429a      	cmp	r2, r3
 800329e:	d10a      	bne.n	80032b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d107      	bne.n	80032b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	2117      	movs	r1, #23
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	d055      	beq.n	8003368 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032bc:	f7fd fe64 	bl	8000f88 <HAL_GetTick>
 80032c0:	0002      	movs	r2, r0
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d902      	bls.n	80032d2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d142      	bne.n	8003358 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	21e0      	movs	r1, #224	; 0xe0
 80032de:	438a      	bics	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	2382      	movs	r3, #130	; 0x82
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d113      	bne.n	8003316 <SPI_WaitFifoStateUntilTimeout+0xce>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d005      	beq.n	8003306 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	429a      	cmp	r2, r3
 8003304:	d107      	bne.n	8003316 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2140      	movs	r1, #64	; 0x40
 8003312:	438a      	bics	r2, r1
 8003314:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	019b      	lsls	r3, r3, #6
 800331e:	429a      	cmp	r2, r3
 8003320:	d110      	bne.n	8003344 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4916      	ldr	r1, [pc, #88]	; (8003388 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800332e:	400a      	ands	r2, r1
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2180      	movs	r1, #128	; 0x80
 800333e:	0189      	lsls	r1, r1, #6
 8003340:	430a      	orrs	r2, r1
 8003342:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	225d      	movs	r2, #93	; 0x5d
 8003348:	2101      	movs	r1, #1
 800334a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	225c      	movs	r2, #92	; 0x5c
 8003350:	2100      	movs	r1, #0
 8003352:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e010      	b.n	800337a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	3b01      	subs	r3, #1
 8003366:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	4013      	ands	r3, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d18e      	bne.n	8003296 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b00a      	add	sp, #40	; 0x28
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	20000000 	.word	0x20000000
 8003388:	ffffdfff 	.word	0xffffdfff

0800338c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	23c0      	movs	r3, #192	; 0xc0
 800339c:	0159      	lsls	r1, r3, #5
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	0013      	movs	r3, r2
 80033a6:	2200      	movs	r2, #0
 80033a8:	f7ff ff4e 	bl	8003248 <SPI_WaitFifoStateUntilTimeout>
 80033ac:	1e03      	subs	r3, r0, #0
 80033ae:	d007      	beq.n	80033c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b4:	2220      	movs	r2, #32
 80033b6:	431a      	orrs	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e027      	b.n	8003410 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	0013      	movs	r3, r2
 80033ca:	2200      	movs	r2, #0
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	f7ff fead 	bl	800312c <SPI_WaitFlagStateUntilTimeout>
 80033d2:	1e03      	subs	r3, r0, #0
 80033d4:	d007      	beq.n	80033e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033da:	2220      	movs	r2, #32
 80033dc:	431a      	orrs	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e014      	b.n	8003410 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	23c0      	movs	r3, #192	; 0xc0
 80033ea:	00d9      	lsls	r1, r3, #3
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	0013      	movs	r3, r2
 80033f4:	2200      	movs	r2, #0
 80033f6:	f7ff ff27 	bl	8003248 <SPI_WaitFifoStateUntilTimeout>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d007      	beq.n	800340e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003402:	2220      	movs	r2, #32
 8003404:	431a      	orrs	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e000      	b.n	8003410 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b004      	add	sp, #16
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e04a      	b.n	80034c0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	223d      	movs	r2, #61	; 0x3d
 800342e:	5c9b      	ldrb	r3, [r3, r2]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d107      	bne.n	8003446 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	223c      	movs	r2, #60	; 0x3c
 800343a:	2100      	movs	r1, #0
 800343c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0018      	movs	r0, r3
 8003442:	f7fd fbed 	bl	8000c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	223d      	movs	r2, #61	; 0x3d
 800344a:	2102      	movs	r1, #2
 800344c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	0019      	movs	r1, r3
 8003458:	0010      	movs	r0, r2
 800345a:	f000 fa6d 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2248      	movs	r2, #72	; 0x48
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	223e      	movs	r2, #62	; 0x3e
 800346a:	2101      	movs	r1, #1
 800346c:	5499      	strb	r1, [r3, r2]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	223f      	movs	r2, #63	; 0x3f
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2240      	movs	r2, #64	; 0x40
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2241      	movs	r2, #65	; 0x41
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2242      	movs	r2, #66	; 0x42
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2243      	movs	r2, #67	; 0x43
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2244      	movs	r2, #68	; 0x44
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2245      	movs	r2, #69	; 0x45
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2246      	movs	r2, #70	; 0x46
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2247      	movs	r2, #71	; 0x47
 80034b2:	2101      	movs	r1, #1
 80034b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	223d      	movs	r2, #61	; 0x3d
 80034ba:	2101      	movs	r1, #1
 80034bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e04a      	b.n	8003570 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	223d      	movs	r2, #61	; 0x3d
 80034de:	5c9b      	ldrb	r3, [r3, r2]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d107      	bne.n	80034f6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	223c      	movs	r2, #60	; 0x3c
 80034ea:	2100      	movs	r1, #0
 80034ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 f841 	bl	8003578 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	223d      	movs	r2, #61	; 0x3d
 80034fa:	2102      	movs	r1, #2
 80034fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3304      	adds	r3, #4
 8003506:	0019      	movs	r1, r3
 8003508:	0010      	movs	r0, r2
 800350a:	f000 fa15 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2248      	movs	r2, #72	; 0x48
 8003512:	2101      	movs	r1, #1
 8003514:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	223e      	movs	r2, #62	; 0x3e
 800351a:	2101      	movs	r1, #1
 800351c:	5499      	strb	r1, [r3, r2]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	223f      	movs	r2, #63	; 0x3f
 8003522:	2101      	movs	r1, #1
 8003524:	5499      	strb	r1, [r3, r2]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	2101      	movs	r1, #1
 800352c:	5499      	strb	r1, [r3, r2]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2241      	movs	r2, #65	; 0x41
 8003532:	2101      	movs	r1, #1
 8003534:	5499      	strb	r1, [r3, r2]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2242      	movs	r2, #66	; 0x42
 800353a:	2101      	movs	r1, #1
 800353c:	5499      	strb	r1, [r3, r2]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2243      	movs	r2, #67	; 0x43
 8003542:	2101      	movs	r1, #1
 8003544:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2244      	movs	r2, #68	; 0x44
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2245      	movs	r2, #69	; 0x45
 8003552:	2101      	movs	r1, #1
 8003554:	5499      	strb	r1, [r3, r2]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2246      	movs	r2, #70	; 0x46
 800355a:	2101      	movs	r1, #1
 800355c:	5499      	strb	r1, [r3, r2]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2247      	movs	r2, #71	; 0x47
 8003562:	2101      	movs	r1, #1
 8003564:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	223d      	movs	r2, #61	; 0x3d
 800356a:	2101      	movs	r1, #1
 800356c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b002      	add	sp, #8
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b002      	add	sp, #8
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d108      	bne.n	80035aa <HAL_TIM_PWM_Start+0x22>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	223e      	movs	r2, #62	; 0x3e
 800359c:	5c9b      	ldrb	r3, [r3, r2]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	1e5a      	subs	r2, r3, #1
 80035a4:	4193      	sbcs	r3, r2
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	e037      	b.n	800361a <HAL_TIM_PWM_Start+0x92>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d108      	bne.n	80035c2 <HAL_TIM_PWM_Start+0x3a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	223f      	movs	r2, #63	; 0x3f
 80035b4:	5c9b      	ldrb	r3, [r3, r2]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	1e5a      	subs	r2, r3, #1
 80035bc:	4193      	sbcs	r3, r2
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	e02b      	b.n	800361a <HAL_TIM_PWM_Start+0x92>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d108      	bne.n	80035da <HAL_TIM_PWM_Start+0x52>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2240      	movs	r2, #64	; 0x40
 80035cc:	5c9b      	ldrb	r3, [r3, r2]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	1e5a      	subs	r2, r3, #1
 80035d4:	4193      	sbcs	r3, r2
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	e01f      	b.n	800361a <HAL_TIM_PWM_Start+0x92>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b0c      	cmp	r3, #12
 80035de:	d108      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x6a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2241      	movs	r2, #65	; 0x41
 80035e4:	5c9b      	ldrb	r3, [r3, r2]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	1e5a      	subs	r2, r3, #1
 80035ec:	4193      	sbcs	r3, r2
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	e013      	b.n	800361a <HAL_TIM_PWM_Start+0x92>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d108      	bne.n	800360a <HAL_TIM_PWM_Start+0x82>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2242      	movs	r2, #66	; 0x42
 80035fc:	5c9b      	ldrb	r3, [r3, r2]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	1e5a      	subs	r2, r3, #1
 8003604:	4193      	sbcs	r3, r2
 8003606:	b2db      	uxtb	r3, r3
 8003608:	e007      	b.n	800361a <HAL_TIM_PWM_Start+0x92>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2243      	movs	r2, #67	; 0x43
 800360e:	5c9b      	ldrb	r3, [r3, r2]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	1e5a      	subs	r2, r3, #1
 8003616:	4193      	sbcs	r3, r2
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e07b      	b.n	800371a <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d104      	bne.n	8003632 <HAL_TIM_PWM_Start+0xaa>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	223e      	movs	r2, #62	; 0x3e
 800362c:	2102      	movs	r1, #2
 800362e:	5499      	strb	r1, [r3, r2]
 8003630:	e023      	b.n	800367a <HAL_TIM_PWM_Start+0xf2>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d104      	bne.n	8003642 <HAL_TIM_PWM_Start+0xba>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	223f      	movs	r2, #63	; 0x3f
 800363c:	2102      	movs	r1, #2
 800363e:	5499      	strb	r1, [r3, r2]
 8003640:	e01b      	b.n	800367a <HAL_TIM_PWM_Start+0xf2>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d104      	bne.n	8003652 <HAL_TIM_PWM_Start+0xca>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2240      	movs	r2, #64	; 0x40
 800364c:	2102      	movs	r1, #2
 800364e:	5499      	strb	r1, [r3, r2]
 8003650:	e013      	b.n	800367a <HAL_TIM_PWM_Start+0xf2>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d104      	bne.n	8003662 <HAL_TIM_PWM_Start+0xda>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2241      	movs	r2, #65	; 0x41
 800365c:	2102      	movs	r1, #2
 800365e:	5499      	strb	r1, [r3, r2]
 8003660:	e00b      	b.n	800367a <HAL_TIM_PWM_Start+0xf2>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b10      	cmp	r3, #16
 8003666:	d104      	bne.n	8003672 <HAL_TIM_PWM_Start+0xea>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2242      	movs	r2, #66	; 0x42
 800366c:	2102      	movs	r1, #2
 800366e:	5499      	strb	r1, [r3, r2]
 8003670:	e003      	b.n	800367a <HAL_TIM_PWM_Start+0xf2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2243      	movs	r2, #67	; 0x43
 8003676:	2102      	movs	r1, #2
 8003678:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6839      	ldr	r1, [r7, #0]
 8003680:	2201      	movs	r2, #1
 8003682:	0018      	movs	r0, r3
 8003684:	f000 fc6e 	bl	8003f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a25      	ldr	r2, [pc, #148]	; (8003724 <HAL_TIM_PWM_Start+0x19c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d009      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x11e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a24      	ldr	r2, [pc, #144]	; (8003728 <HAL_TIM_PWM_Start+0x1a0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x11e>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a22      	ldr	r2, [pc, #136]	; (800372c <HAL_TIM_PWM_Start+0x1a4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <HAL_TIM_PWM_Start+0x122>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <HAL_TIM_PWM_Start+0x124>
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2180      	movs	r1, #128	; 0x80
 80036bc:	0209      	lsls	r1, r1, #8
 80036be:	430a      	orrs	r2, r1
 80036c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a17      	ldr	r2, [pc, #92]	; (8003724 <HAL_TIM_PWM_Start+0x19c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x14e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a17      	ldr	r2, [pc, #92]	; (8003730 <HAL_TIM_PWM_Start+0x1a8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d116      	bne.n	8003704 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a15      	ldr	r2, [pc, #84]	; (8003734 <HAL_TIM_PWM_Start+0x1ac>)
 80036de:	4013      	ands	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b06      	cmp	r3, #6
 80036e6:	d016      	beq.n	8003716 <HAL_TIM_PWM_Start+0x18e>
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	2380      	movs	r3, #128	; 0x80
 80036ec:	025b      	lsls	r3, r3, #9
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d011      	beq.n	8003716 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2101      	movs	r1, #1
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003702:	e008      	b.n	8003716 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2101      	movs	r1, #1
 8003710:	430a      	orrs	r2, r1
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e000      	b.n	8003718 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003716:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b004      	add	sp, #16
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40014400 	.word	0x40014400
 800372c:	40014800 	.word	0x40014800
 8003730:	40000400 	.word	0x40000400
 8003734:	00010007 	.word	0x00010007

08003738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003744:	2317      	movs	r3, #23
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	223c      	movs	r2, #60	; 0x3c
 8003750:	5c9b      	ldrb	r3, [r3, r2]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003756:	2302      	movs	r3, #2
 8003758:	e0e5      	b.n	8003926 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	223c      	movs	r2, #60	; 0x3c
 800375e:	2101      	movs	r1, #1
 8003760:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b14      	cmp	r3, #20
 8003766:	d900      	bls.n	800376a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003768:	e0d1      	b.n	800390e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	009a      	lsls	r2, r3, #2
 800376e:	4b70      	ldr	r3, [pc, #448]	; (8003930 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003770:	18d3      	adds	r3, r2, r3
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	0011      	movs	r1, r2
 800377e:	0018      	movs	r0, r3
 8003780:	f000 f954 	bl	8003a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2108      	movs	r1, #8
 8003790:	430a      	orrs	r2, r1
 8003792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2104      	movs	r1, #4
 80037a0:	438a      	bics	r2, r1
 80037a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6999      	ldr	r1, [r3, #24]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	619a      	str	r2, [r3, #24]
      break;
 80037b6:	e0af      	b.n	8003918 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	0011      	movs	r1, r2
 80037c0:	0018      	movs	r0, r3
 80037c2:	f000 f9b3 	bl	8003b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699a      	ldr	r2, [r3, #24]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2180      	movs	r1, #128	; 0x80
 80037d2:	0109      	lsls	r1, r1, #4
 80037d4:	430a      	orrs	r2, r1
 80037d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4954      	ldr	r1, [pc, #336]	; (8003934 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80037e4:	400a      	ands	r2, r1
 80037e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6999      	ldr	r1, [r3, #24]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	021a      	lsls	r2, r3, #8
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	619a      	str	r2, [r3, #24]
      break;
 80037fc:	e08c      	b.n	8003918 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	0011      	movs	r1, r2
 8003806:	0018      	movs	r0, r3
 8003808:	f000 fa0e 	bl	8003c28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2108      	movs	r1, #8
 8003818:	430a      	orrs	r2, r1
 800381a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2104      	movs	r1, #4
 8003828:	438a      	bics	r2, r1
 800382a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69d9      	ldr	r1, [r3, #28]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	61da      	str	r2, [r3, #28]
      break;
 800383e:	e06b      	b.n	8003918 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	0011      	movs	r1, r2
 8003848:	0018      	movs	r0, r3
 800384a:	f000 fa6f 	bl	8003d2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2180      	movs	r1, #128	; 0x80
 800385a:	0109      	lsls	r1, r1, #4
 800385c:	430a      	orrs	r2, r1
 800385e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4932      	ldr	r1, [pc, #200]	; (8003934 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800386c:	400a      	ands	r2, r1
 800386e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69d9      	ldr	r1, [r3, #28]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	021a      	lsls	r2, r3, #8
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	61da      	str	r2, [r3, #28]
      break;
 8003884:	e048      	b.n	8003918 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	0011      	movs	r1, r2
 800388e:	0018      	movs	r0, r3
 8003890:	f000 fab0 	bl	8003df4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2108      	movs	r1, #8
 80038a0:	430a      	orrs	r2, r1
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2104      	movs	r1, #4
 80038b0:	438a      	bics	r2, r1
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038c6:	e027      	b.n	8003918 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	0011      	movs	r1, r2
 80038d0:	0018      	movs	r0, r3
 80038d2:	f000 fae9 	bl	8003ea8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2180      	movs	r1, #128	; 0x80
 80038e2:	0109      	lsls	r1, r1, #4
 80038e4:	430a      	orrs	r2, r1
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4910      	ldr	r1, [pc, #64]	; (8003934 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80038f4:	400a      	ands	r2, r1
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	021a      	lsls	r2, r3, #8
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800390c:	e004      	b.n	8003918 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800390e:	2317      	movs	r3, #23
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
      break;
 8003916:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	223c      	movs	r2, #60	; 0x3c
 800391c:	2100      	movs	r1, #0
 800391e:	5499      	strb	r1, [r3, r2]

  return status;
 8003920:	2317      	movs	r3, #23
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	781b      	ldrb	r3, [r3, #0]
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b006      	add	sp, #24
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	08006024 	.word	0x08006024
 8003934:	fffffbff 	.word	0xfffffbff

08003938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a32      	ldr	r2, [pc, #200]	; (8003a14 <TIM_Base_SetConfig+0xdc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0x20>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a31      	ldr	r2, [pc, #196]	; (8003a18 <TIM_Base_SetConfig+0xe0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d108      	bne.n	800396a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2270      	movs	r2, #112	; 0x70
 800395c:	4393      	bics	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a29      	ldr	r2, [pc, #164]	; (8003a14 <TIM_Base_SetConfig+0xdc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00f      	beq.n	8003992 <TIM_Base_SetConfig+0x5a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a28      	ldr	r2, [pc, #160]	; (8003a18 <TIM_Base_SetConfig+0xe0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00b      	beq.n	8003992 <TIM_Base_SetConfig+0x5a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a27      	ldr	r2, [pc, #156]	; (8003a1c <TIM_Base_SetConfig+0xe4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d007      	beq.n	8003992 <TIM_Base_SetConfig+0x5a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a26      	ldr	r2, [pc, #152]	; (8003a20 <TIM_Base_SetConfig+0xe8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d003      	beq.n	8003992 <TIM_Base_SetConfig+0x5a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a25      	ldr	r2, [pc, #148]	; (8003a24 <TIM_Base_SetConfig+0xec>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d108      	bne.n	80039a4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a24      	ldr	r2, [pc, #144]	; (8003a28 <TIM_Base_SetConfig+0xf0>)
 8003996:	4013      	ands	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2280      	movs	r2, #128	; 0x80
 80039a8:	4393      	bics	r3, r2
 80039aa:	001a      	movs	r2, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a11      	ldr	r2, [pc, #68]	; (8003a14 <TIM_Base_SetConfig+0xdc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <TIM_Base_SetConfig+0xaa>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <TIM_Base_SetConfig+0xe8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <TIM_Base_SetConfig+0xaa>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a11      	ldr	r2, [pc, #68]	; (8003a24 <TIM_Base_SetConfig+0xec>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d103      	bne.n	80039ea <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	2201      	movs	r2, #1
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d106      	bne.n	8003a0a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	2201      	movs	r2, #1
 8003a02:	4393      	bics	r3, r2
 8003a04:	001a      	movs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	611a      	str	r2, [r3, #16]
  }
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b004      	add	sp, #16
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40000400 	.word	0x40000400
 8003a1c:	40002000 	.word	0x40002000
 8003a20:	40014400 	.word	0x40014400
 8003a24:	40014800 	.word	0x40014800
 8003a28:	fffffcff 	.word	0xfffffcff

08003a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	2201      	movs	r2, #1
 8003a42:	4393      	bics	r3, r2
 8003a44:	001a      	movs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a2e      	ldr	r2, [pc, #184]	; (8003b14 <TIM_OC1_SetConfig+0xe8>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2203      	movs	r2, #3
 8003a62:	4393      	bics	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2202      	movs	r2, #2
 8003a74:	4393      	bics	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a24      	ldr	r2, [pc, #144]	; (8003b18 <TIM_OC1_SetConfig+0xec>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d007      	beq.n	8003a9a <TIM_OC1_SetConfig+0x6e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a23      	ldr	r2, [pc, #140]	; (8003b1c <TIM_OC1_SetConfig+0xf0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d003      	beq.n	8003a9a <TIM_OC1_SetConfig+0x6e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <TIM_OC1_SetConfig+0xf4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10c      	bne.n	8003ab4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	4393      	bics	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2204      	movs	r2, #4
 8003ab0:	4393      	bics	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <TIM_OC1_SetConfig+0xec>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d007      	beq.n	8003acc <TIM_OC1_SetConfig+0xa0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <TIM_OC1_SetConfig+0xf0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_OC1_SetConfig+0xa0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <TIM_OC1_SetConfig+0xf4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d111      	bne.n	8003af0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <TIM_OC1_SetConfig+0xf8>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4a14      	ldr	r2, [pc, #80]	; (8003b28 <TIM_OC1_SetConfig+0xfc>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b006      	add	sp, #24
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	fffeff8f 	.word	0xfffeff8f
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40014400 	.word	0x40014400
 8003b20:	40014800 	.word	0x40014800
 8003b24:	fffffeff 	.word	0xfffffeff
 8003b28:	fffffdff 	.word	0xfffffdff

08003b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	2210      	movs	r2, #16
 8003b42:	4393      	bics	r3, r2
 8003b44:	001a      	movs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a2c      	ldr	r2, [pc, #176]	; (8003c0c <TIM_OC2_SetConfig+0xe0>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <TIM_OC2_SetConfig+0xe4>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2220      	movs	r2, #32
 8003b76:	4393      	bics	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <TIM_OC2_SetConfig+0xe8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d10d      	bne.n	8003baa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	4393      	bics	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2240      	movs	r2, #64	; 0x40
 8003ba6:	4393      	bics	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <TIM_OC2_SetConfig+0xe8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <TIM_OC2_SetConfig+0x96>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <TIM_OC2_SetConfig+0xec>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_OC2_SetConfig+0x96>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a17      	ldr	r2, [pc, #92]	; (8003c1c <TIM_OC2_SetConfig+0xf0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d113      	bne.n	8003bea <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <TIM_OC2_SetConfig+0xf4>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <TIM_OC2_SetConfig+0xf8>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	621a      	str	r2, [r3, #32]
}
 8003c04:	46c0      	nop			; (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b006      	add	sp, #24
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	feff8fff 	.word	0xfeff8fff
 8003c10:	fffffcff 	.word	0xfffffcff
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40014400 	.word	0x40014400
 8003c1c:	40014800 	.word	0x40014800
 8003c20:	fffffbff 	.word	0xfffffbff
 8003c24:	fffff7ff 	.word	0xfffff7ff

08003c28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	4a31      	ldr	r2, [pc, #196]	; (8003d04 <TIM_OC3_SetConfig+0xdc>)
 8003c3e:	401a      	ands	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <TIM_OC3_SetConfig+0xe0>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	4393      	bics	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <TIM_OC3_SetConfig+0xe4>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a23      	ldr	r2, [pc, #140]	; (8003d10 <TIM_OC3_SetConfig+0xe8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d10d      	bne.n	8003ca2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	4a22      	ldr	r2, [pc, #136]	; (8003d14 <TIM_OC3_SetConfig+0xec>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <TIM_OC3_SetConfig+0xf0>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a1a      	ldr	r2, [pc, #104]	; (8003d10 <TIM_OC3_SetConfig+0xe8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <TIM_OC3_SetConfig+0x92>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a1b      	ldr	r2, [pc, #108]	; (8003d1c <TIM_OC3_SetConfig+0xf4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_OC3_SetConfig+0x92>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a1a      	ldr	r2, [pc, #104]	; (8003d20 <TIM_OC3_SetConfig+0xf8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d113      	bne.n	8003ce2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4a19      	ldr	r2, [pc, #100]	; (8003d24 <TIM_OC3_SetConfig+0xfc>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <TIM_OC3_SetConfig+0x100>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	621a      	str	r2, [r3, #32]
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b006      	add	sp, #24
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	fffffeff 	.word	0xfffffeff
 8003d08:	fffeff8f 	.word	0xfffeff8f
 8003d0c:	fffffdff 	.word	0xfffffdff
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	fffff7ff 	.word	0xfffff7ff
 8003d18:	fffffbff 	.word	0xfffffbff
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800
 8003d24:	ffffefff 	.word	0xffffefff
 8003d28:	ffffdfff 	.word	0xffffdfff

08003d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	4a24      	ldr	r2, [pc, #144]	; (8003dd4 <TIM_OC4_SetConfig+0xa8>)
 8003d42:	401a      	ands	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a20      	ldr	r2, [pc, #128]	; (8003dd8 <TIM_OC4_SetConfig+0xac>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4a1f      	ldr	r2, [pc, #124]	; (8003ddc <TIM_OC4_SetConfig+0xb0>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4a1b      	ldr	r2, [pc, #108]	; (8003de0 <TIM_OC4_SetConfig+0xb4>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	031b      	lsls	r3, r3, #12
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <TIM_OC4_SetConfig+0xb8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <TIM_OC4_SetConfig+0x70>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <TIM_OC4_SetConfig+0xbc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d003      	beq.n	8003d9c <TIM_OC4_SetConfig+0x70>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a15      	ldr	r2, [pc, #84]	; (8003dec <TIM_OC4_SetConfig+0xc0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d109      	bne.n	8003db0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <TIM_OC4_SetConfig+0xc4>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	019b      	lsls	r3, r3, #6
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b006      	add	sp, #24
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	ffffefff 	.word	0xffffefff
 8003dd8:	feff8fff 	.word	0xfeff8fff
 8003ddc:	fffffcff 	.word	0xfffffcff
 8003de0:	ffffdfff 	.word	0xffffdfff
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40014400 	.word	0x40014400
 8003dec:	40014800 	.word	0x40014800
 8003df0:	ffffbfff 	.word	0xffffbfff

08003df4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <TIM_OC5_SetConfig+0x9c>)
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <TIM_OC5_SetConfig+0xa0>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <TIM_OC5_SetConfig+0xa4>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	041b      	lsls	r3, r3, #16
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <TIM_OC5_SetConfig+0xa8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d007      	beq.n	8003e5a <TIM_OC5_SetConfig+0x66>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a14      	ldr	r2, [pc, #80]	; (8003ea0 <TIM_OC5_SetConfig+0xac>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d003      	beq.n	8003e5a <TIM_OC5_SetConfig+0x66>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a13      	ldr	r2, [pc, #76]	; (8003ea4 <TIM_OC5_SetConfig+0xb0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d109      	bne.n	8003e6e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	4a0c      	ldr	r2, [pc, #48]	; (8003e90 <TIM_OC5_SetConfig+0x9c>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	621a      	str	r2, [r3, #32]
}
 8003e88:	46c0      	nop			; (mov r8, r8)
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b006      	add	sp, #24
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	fffeffff 	.word	0xfffeffff
 8003e94:	fffeff8f 	.word	0xfffeff8f
 8003e98:	fffdffff 	.word	0xfffdffff
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40014400 	.word	0x40014400
 8003ea4:	40014800 	.word	0x40014800

08003ea8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	4a22      	ldr	r2, [pc, #136]	; (8003f48 <TIM_OC6_SetConfig+0xa0>)
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4a1e      	ldr	r2, [pc, #120]	; (8003f4c <TIM_OC6_SetConfig+0xa4>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4a1a      	ldr	r2, [pc, #104]	; (8003f50 <TIM_OC6_SetConfig+0xa8>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	051b      	lsls	r3, r3, #20
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <TIM_OC6_SetConfig+0xac>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <TIM_OC6_SetConfig+0x68>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <TIM_OC6_SetConfig+0xb0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_OC6_SetConfig+0x68>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <TIM_OC6_SetConfig+0xb4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d109      	bne.n	8003f24 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <TIM_OC6_SetConfig+0xb8>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	029b      	lsls	r3, r3, #10
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b006      	add	sp, #24
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	ffefffff 	.word	0xffefffff
 8003f4c:	feff8fff 	.word	0xfeff8fff
 8003f50:	ffdfffff 	.word	0xffdfffff
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40014400 	.word	0x40014400
 8003f5c:	40014800 	.word	0x40014800
 8003f60:	fffbffff 	.word	0xfffbffff

08003f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	221f      	movs	r2, #31
 8003f74:	4013      	ands	r3, r2
 8003f76:	2201      	movs	r2, #1
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	0013      	movs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	43d2      	mvns	r2, r2
 8003f86:	401a      	ands	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	211f      	movs	r1, #31
 8003f94:	400b      	ands	r3, r1
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4099      	lsls	r1, r3
 8003f9a:	000b      	movs	r3, r1
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	621a      	str	r2, [r3, #32]
}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b006      	add	sp, #24
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	223c      	movs	r2, #60	; 0x3c
 8003fbe:	5c9b      	ldrb	r3, [r3, r2]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e06f      	b.n	80040a8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	223c      	movs	r2, #60	; 0x3c
 8003fcc:	2101      	movs	r1, #1
 8003fce:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	22ff      	movs	r2, #255	; 0xff
 8003fd4:	4393      	bics	r3, r2
 8003fd6:	001a      	movs	r2, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a33      	ldr	r2, [pc, #204]	; (80040b0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003fe4:	401a      	ands	r2, r3
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4a30      	ldr	r2, [pc, #192]	; (80040b4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003ff2:	401a      	ands	r2, r3
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a2e      	ldr	r2, [pc, #184]	; (80040b8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004000:	401a      	ands	r2, r3
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a2b      	ldr	r2, [pc, #172]	; (80040bc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800400e:	401a      	ands	r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a29      	ldr	r2, [pc, #164]	; (80040c0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800401c:	401a      	ands	r2, r3
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800402a:	401a      	ands	r2, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4a24      	ldr	r2, [pc, #144]	; (80040c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004038:	401a      	ands	r2, r3
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	041b      	lsls	r3, r3, #16
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4a21      	ldr	r2, [pc, #132]	; (80040cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004048:	401a      	ands	r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1e      	ldr	r2, [pc, #120]	; (80040d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d11c      	bne.n	8004096 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a1d      	ldr	r2, [pc, #116]	; (80040d4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004060:	401a      	ands	r2, r3
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	051b      	lsls	r3, r3, #20
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004070:	401a      	ands	r2, r3
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800407e:	401a      	ands	r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800408c:	401a      	ands	r2, r3
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	223c      	movs	r2, #60	; 0x3c
 80040a2:	2100      	movs	r1, #0
 80040a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b004      	add	sp, #16
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	fffffcff 	.word	0xfffffcff
 80040b4:	fffffbff 	.word	0xfffffbff
 80040b8:	fffff7ff 	.word	0xfffff7ff
 80040bc:	ffffefff 	.word	0xffffefff
 80040c0:	ffffdfff 	.word	0xffffdfff
 80040c4:	ffffbfff 	.word	0xffffbfff
 80040c8:	fff0ffff 	.word	0xfff0ffff
 80040cc:	efffffff 	.word	0xefffffff
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	ff0fffff 	.word	0xff0fffff
 80040d8:	feffffff 	.word	0xfeffffff
 80040dc:	fdffffff 	.word	0xfdffffff
 80040e0:	dfffffff 	.word	0xdfffffff

080040e4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e04e      	b.n	8004194 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2288      	movs	r2, #136	; 0x88
 80040fa:	589b      	ldr	r3, [r3, r2]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d107      	bne.n	8004110 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2284      	movs	r2, #132	; 0x84
 8004104:	2100      	movs	r1, #0
 8004106:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	0018      	movs	r0, r3
 800410c:	f7fc fe34 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2288      	movs	r2, #136	; 0x88
 8004114:	2124      	movs	r1, #36	; 0x24
 8004116:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2101      	movs	r1, #1
 8004124:	438a      	bics	r2, r1
 8004126:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	0018      	movs	r0, r3
 8004134:	f000 f99e 	bl	8004474 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	0018      	movs	r0, r3
 800413c:	f000 f830 	bl	80041a0 <UART_SetConfig>
 8004140:	0003      	movs	r3, r0
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e024      	b.n	8004194 <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4911      	ldr	r1, [pc, #68]	; (800419c <HAL_HalfDuplex_Init+0xb8>)
 8004156:	400a      	ands	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2122      	movs	r1, #34	; 0x22
 8004166:	438a      	bics	r2, r1
 8004168:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2108      	movs	r1, #8
 8004176:	430a      	orrs	r2, r1
 8004178:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2101      	movs	r1, #1
 8004186:	430a      	orrs	r2, r1
 8004188:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0018      	movs	r0, r3
 800418e:	f000 fa25 	bl	80045dc <UART_CheckIdleState>
 8004192:	0003      	movs	r3, r0
}
 8004194:	0018      	movs	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	b002      	add	sp, #8
 800419a:	bd80      	pop	{r7, pc}
 800419c:	ffffb7ff 	.word	0xffffb7ff

080041a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041a8:	231a      	movs	r3, #26
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4aa1      	ldr	r2, [pc, #644]	; (8004454 <UART_SetConfig+0x2b4>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	0019      	movs	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4a9c      	ldr	r2, [pc, #624]	; (8004458 <UART_SetConfig+0x2b8>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	0019      	movs	r1, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	4313      	orrs	r3, r2
 8004204:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4a93      	ldr	r2, [pc, #588]	; (800445c <UART_SetConfig+0x2bc>)
 800420e:	4013      	ands	r3, r2
 8004210:	0019      	movs	r1, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	430a      	orrs	r2, r1
 800421a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	220f      	movs	r2, #15
 8004224:	4393      	bics	r3, r2
 8004226:	0019      	movs	r1, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a89      	ldr	r2, [pc, #548]	; (8004460 <UART_SetConfig+0x2c0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d127      	bne.n	800428e <UART_SetConfig+0xee>
 800423e:	4b89      	ldr	r3, [pc, #548]	; (8004464 <UART_SetConfig+0x2c4>)
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	2203      	movs	r2, #3
 8004244:	4013      	ands	r3, r2
 8004246:	2b03      	cmp	r3, #3
 8004248:	d017      	beq.n	800427a <UART_SetConfig+0xda>
 800424a:	d81b      	bhi.n	8004284 <UART_SetConfig+0xe4>
 800424c:	2b02      	cmp	r3, #2
 800424e:	d00a      	beq.n	8004266 <UART_SetConfig+0xc6>
 8004250:	d818      	bhi.n	8004284 <UART_SetConfig+0xe4>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <UART_SetConfig+0xbc>
 8004256:	2b01      	cmp	r3, #1
 8004258:	d00a      	beq.n	8004270 <UART_SetConfig+0xd0>
 800425a:	e013      	b.n	8004284 <UART_SetConfig+0xe4>
 800425c:	231b      	movs	r3, #27
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	e021      	b.n	80042aa <UART_SetConfig+0x10a>
 8004266:	231b      	movs	r3, #27
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	2202      	movs	r2, #2
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	e01c      	b.n	80042aa <UART_SetConfig+0x10a>
 8004270:	231b      	movs	r3, #27
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	2204      	movs	r2, #4
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	e017      	b.n	80042aa <UART_SetConfig+0x10a>
 800427a:	231b      	movs	r3, #27
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	2208      	movs	r2, #8
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e012      	b.n	80042aa <UART_SetConfig+0x10a>
 8004284:	231b      	movs	r3, #27
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	2210      	movs	r2, #16
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e00d      	b.n	80042aa <UART_SetConfig+0x10a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a75      	ldr	r2, [pc, #468]	; (8004468 <UART_SetConfig+0x2c8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d104      	bne.n	80042a2 <UART_SetConfig+0x102>
 8004298:	231b      	movs	r3, #27
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	e003      	b.n	80042aa <UART_SetConfig+0x10a>
 80042a2:	231b      	movs	r3, #27
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	2210      	movs	r2, #16
 80042a8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69da      	ldr	r2, [r3, #28]
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d000      	beq.n	80042b8 <UART_SetConfig+0x118>
 80042b6:	e065      	b.n	8004384 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80042b8:	231b      	movs	r3, #27
 80042ba:	18fb      	adds	r3, r7, r3
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d015      	beq.n	80042ee <UART_SetConfig+0x14e>
 80042c2:	dc18      	bgt.n	80042f6 <UART_SetConfig+0x156>
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d00d      	beq.n	80042e4 <UART_SetConfig+0x144>
 80042c8:	dc15      	bgt.n	80042f6 <UART_SetConfig+0x156>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <UART_SetConfig+0x134>
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d005      	beq.n	80042de <UART_SetConfig+0x13e>
 80042d2:	e010      	b.n	80042f6 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d4:	f7fe fbd6 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 80042d8:	0003      	movs	r3, r0
 80042da:	617b      	str	r3, [r7, #20]
        break;
 80042dc:	e012      	b.n	8004304 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042de:	4b63      	ldr	r3, [pc, #396]	; (800446c <UART_SetConfig+0x2cc>)
 80042e0:	617b      	str	r3, [r7, #20]
        break;
 80042e2:	e00f      	b.n	8004304 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e4:	f7fe fb42 	bl	800296c <HAL_RCC_GetSysClockFreq>
 80042e8:	0003      	movs	r3, r0
 80042ea:	617b      	str	r3, [r7, #20]
        break;
 80042ec:	e00a      	b.n	8004304 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	617b      	str	r3, [r7, #20]
        break;
 80042f4:	e006      	b.n	8004304 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042fa:	231a      	movs	r3, #26
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
        break;
 8004302:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d100      	bne.n	800430c <UART_SetConfig+0x16c>
 800430a:	e08d      	b.n	8004428 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004310:	4b57      	ldr	r3, [pc, #348]	; (8004470 <UART_SetConfig+0x2d0>)
 8004312:	0052      	lsls	r2, r2, #1
 8004314:	5ad3      	ldrh	r3, [r2, r3]
 8004316:	0019      	movs	r1, r3
 8004318:	6978      	ldr	r0, [r7, #20]
 800431a:	f7fb fef1 	bl	8000100 <__udivsi3>
 800431e:	0003      	movs	r3, r0
 8004320:	005a      	lsls	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	18d2      	adds	r2, r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	0019      	movs	r1, r3
 8004330:	0010      	movs	r0, r2
 8004332:	f7fb fee5 	bl	8000100 <__udivsi3>
 8004336:	0003      	movs	r3, r0
 8004338:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b0f      	cmp	r3, #15
 800433e:	d91c      	bls.n	800437a <UART_SetConfig+0x1da>
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	025b      	lsls	r3, r3, #9
 8004346:	429a      	cmp	r2, r3
 8004348:	d217      	bcs.n	800437a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	b29a      	uxth	r2, r3
 800434e:	200e      	movs	r0, #14
 8004350:	183b      	adds	r3, r7, r0
 8004352:	210f      	movs	r1, #15
 8004354:	438a      	bics	r2, r1
 8004356:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	b29b      	uxth	r3, r3
 800435e:	2207      	movs	r2, #7
 8004360:	4013      	ands	r3, r2
 8004362:	b299      	uxth	r1, r3
 8004364:	183b      	adds	r3, r7, r0
 8004366:	183a      	adds	r2, r7, r0
 8004368:	8812      	ldrh	r2, [r2, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	183a      	adds	r2, r7, r0
 8004374:	8812      	ldrh	r2, [r2, #0]
 8004376:	60da      	str	r2, [r3, #12]
 8004378:	e056      	b.n	8004428 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800437a:	231a      	movs	r3, #26
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	e051      	b.n	8004428 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004384:	231b      	movs	r3, #27
 8004386:	18fb      	adds	r3, r7, r3
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b08      	cmp	r3, #8
 800438c:	d015      	beq.n	80043ba <UART_SetConfig+0x21a>
 800438e:	dc18      	bgt.n	80043c2 <UART_SetConfig+0x222>
 8004390:	2b04      	cmp	r3, #4
 8004392:	d00d      	beq.n	80043b0 <UART_SetConfig+0x210>
 8004394:	dc15      	bgt.n	80043c2 <UART_SetConfig+0x222>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <UART_SetConfig+0x200>
 800439a:	2b02      	cmp	r3, #2
 800439c:	d005      	beq.n	80043aa <UART_SetConfig+0x20a>
 800439e:	e010      	b.n	80043c2 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a0:	f7fe fb70 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 80043a4:	0003      	movs	r3, r0
 80043a6:	617b      	str	r3, [r7, #20]
        break;
 80043a8:	e012      	b.n	80043d0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043aa:	4b30      	ldr	r3, [pc, #192]	; (800446c <UART_SetConfig+0x2cc>)
 80043ac:	617b      	str	r3, [r7, #20]
        break;
 80043ae:	e00f      	b.n	80043d0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b0:	f7fe fadc 	bl	800296c <HAL_RCC_GetSysClockFreq>
 80043b4:	0003      	movs	r3, r0
 80043b6:	617b      	str	r3, [r7, #20]
        break;
 80043b8:	e00a      	b.n	80043d0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	617b      	str	r3, [r7, #20]
        break;
 80043c0:	e006      	b.n	80043d0 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043c6:	231a      	movs	r3, #26
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	2201      	movs	r2, #1
 80043cc:	701a      	strb	r2, [r3, #0]
        break;
 80043ce:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d028      	beq.n	8004428 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043da:	4b25      	ldr	r3, [pc, #148]	; (8004470 <UART_SetConfig+0x2d0>)
 80043dc:	0052      	lsls	r2, r2, #1
 80043de:	5ad3      	ldrh	r3, [r2, r3]
 80043e0:	0019      	movs	r1, r3
 80043e2:	6978      	ldr	r0, [r7, #20]
 80043e4:	f7fb fe8c 	bl	8000100 <__udivsi3>
 80043e8:	0003      	movs	r3, r0
 80043ea:	001a      	movs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	18d2      	adds	r2, r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	0019      	movs	r1, r3
 80043fa:	0010      	movs	r0, r2
 80043fc:	f7fb fe80 	bl	8000100 <__udivsi3>
 8004400:	0003      	movs	r3, r0
 8004402:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b0f      	cmp	r3, #15
 8004408:	d90a      	bls.n	8004420 <UART_SetConfig+0x280>
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	025b      	lsls	r3, r3, #9
 8004410:	429a      	cmp	r2, r3
 8004412:	d205      	bcs.n	8004420 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	b29a      	uxth	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	e003      	b.n	8004428 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004420:	231a      	movs	r3, #26
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	2201      	movs	r2, #1
 8004426:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	226a      	movs	r2, #106	; 0x6a
 800442c:	2101      	movs	r1, #1
 800442e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2268      	movs	r2, #104	; 0x68
 8004434:	2101      	movs	r1, #1
 8004436:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004444:	231a      	movs	r3, #26
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	781b      	ldrb	r3, [r3, #0]
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b008      	add	sp, #32
 8004450:	bd80      	pop	{r7, pc}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	cfff69f3 	.word	0xcfff69f3
 8004458:	ffffcfff 	.word	0xffffcfff
 800445c:	11fff4ff 	.word	0x11fff4ff
 8004460:	40013800 	.word	0x40013800
 8004464:	40021000 	.word	0x40021000
 8004468:	40004400 	.word	0x40004400
 800446c:	00f42400 	.word	0x00f42400
 8004470:	08006078 	.word	0x08006078

08004474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	2208      	movs	r2, #8
 8004482:	4013      	ands	r3, r2
 8004484:	d00b      	beq.n	800449e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a4a      	ldr	r2, [pc, #296]	; (80045b8 <UART_AdvFeatureConfig+0x144>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	2201      	movs	r2, #1
 80044a4:	4013      	ands	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4a43      	ldr	r2, [pc, #268]	; (80045bc <UART_AdvFeatureConfig+0x148>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	2202      	movs	r2, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4a3b      	ldr	r2, [pc, #236]	; (80045c0 <UART_AdvFeatureConfig+0x14c>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	2204      	movs	r2, #4
 80044e8:	4013      	ands	r3, r2
 80044ea:	d00b      	beq.n	8004504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4a34      	ldr	r2, [pc, #208]	; (80045c4 <UART_AdvFeatureConfig+0x150>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	2210      	movs	r2, #16
 800450a:	4013      	ands	r3, r2
 800450c:	d00b      	beq.n	8004526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <UART_AdvFeatureConfig+0x154>)
 8004516:	4013      	ands	r3, r2
 8004518:	0019      	movs	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	2220      	movs	r2, #32
 800452c:	4013      	ands	r3, r2
 800452e:	d00b      	beq.n	8004548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	4a25      	ldr	r2, [pc, #148]	; (80045cc <UART_AdvFeatureConfig+0x158>)
 8004538:	4013      	ands	r3, r2
 800453a:	0019      	movs	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	2240      	movs	r2, #64	; 0x40
 800454e:	4013      	ands	r3, r2
 8004550:	d01d      	beq.n	800458e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <UART_AdvFeatureConfig+0x15c>)
 800455a:	4013      	ands	r3, r2
 800455c:	0019      	movs	r1, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456e:	2380      	movs	r3, #128	; 0x80
 8004570:	035b      	lsls	r3, r3, #13
 8004572:	429a      	cmp	r2, r3
 8004574:	d10b      	bne.n	800458e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <UART_AdvFeatureConfig+0x160>)
 800457e:	4013      	ands	r3, r2
 8004580:	0019      	movs	r1, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	2280      	movs	r2, #128	; 0x80
 8004594:	4013      	ands	r3, r2
 8004596:	d00b      	beq.n	80045b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4a0e      	ldr	r2, [pc, #56]	; (80045d8 <UART_AdvFeatureConfig+0x164>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	0019      	movs	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
  }
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	ffff7fff 	.word	0xffff7fff
 80045bc:	fffdffff 	.word	0xfffdffff
 80045c0:	fffeffff 	.word	0xfffeffff
 80045c4:	fffbffff 	.word	0xfffbffff
 80045c8:	ffffefff 	.word	0xffffefff
 80045cc:	ffffdfff 	.word	0xffffdfff
 80045d0:	ffefffff 	.word	0xffefffff
 80045d4:	ff9fffff 	.word	0xff9fffff
 80045d8:	fff7ffff 	.word	0xfff7ffff

080045dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b092      	sub	sp, #72	; 0x48
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2290      	movs	r2, #144	; 0x90
 80045e8:	2100      	movs	r1, #0
 80045ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045ec:	f7fc fccc 	bl	8000f88 <HAL_GetTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2208      	movs	r2, #8
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d12d      	bne.n	800465e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004604:	2280      	movs	r2, #128	; 0x80
 8004606:	0391      	lsls	r1, r2, #14
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	4a47      	ldr	r2, [pc, #284]	; (8004728 <UART_CheckIdleState+0x14c>)
 800460c:	9200      	str	r2, [sp, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	f000 f88e 	bl	8004730 <UART_WaitOnFlagUntilTimeout>
 8004614:	1e03      	subs	r3, r0, #0
 8004616:	d022      	beq.n	800465e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004618:	f3ef 8310 	mrs	r3, PRIMASK
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004620:	63bb      	str	r3, [r7, #56]	; 0x38
 8004622:	2301      	movs	r3, #1
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	f383 8810 	msr	PRIMASK, r3
}
 800462c:	46c0      	nop			; (mov r8, r8)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2180      	movs	r1, #128	; 0x80
 800463a:	438a      	bics	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2288      	movs	r2, #136	; 0x88
 800464e:	2120      	movs	r1, #32
 8004650:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2284      	movs	r2, #132	; 0x84
 8004656:	2100      	movs	r1, #0
 8004658:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e060      	b.n	8004720 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2204      	movs	r2, #4
 8004666:	4013      	ands	r3, r2
 8004668:	2b04      	cmp	r3, #4
 800466a:	d146      	bne.n	80046fa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800466c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466e:	2280      	movs	r2, #128	; 0x80
 8004670:	03d1      	lsls	r1, r2, #15
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <UART_CheckIdleState+0x14c>)
 8004676:	9200      	str	r2, [sp, #0]
 8004678:	2200      	movs	r2, #0
 800467a:	f000 f859 	bl	8004730 <UART_WaitOnFlagUntilTimeout>
 800467e:	1e03      	subs	r3, r0, #0
 8004680:	d03b      	beq.n	80046fa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004682:	f3ef 8310 	mrs	r3, PRIMASK
 8004686:	60fb      	str	r3, [r7, #12]
  return(result);
 8004688:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800468a:	637b      	str	r3, [r7, #52]	; 0x34
 800468c:	2301      	movs	r3, #1
 800468e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f383 8810 	msr	PRIMASK, r3
}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4922      	ldr	r1, [pc, #136]	; (800472c <UART_CheckIdleState+0x150>)
 80046a4:	400a      	ands	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f383 8810 	msr	PRIMASK, r3
}
 80046b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b4:	f3ef 8310 	mrs	r3, PRIMASK
 80046b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80046ba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046bc:	633b      	str	r3, [r7, #48]	; 0x30
 80046be:	2301      	movs	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f383 8810 	msr	PRIMASK, r3
}
 80046c8:	46c0      	nop			; (mov r8, r8)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2101      	movs	r1, #1
 80046d6:	438a      	bics	r2, r1
 80046d8:	609a      	str	r2, [r3, #8]
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	f383 8810 	msr	PRIMASK, r3
}
 80046e4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	228c      	movs	r2, #140	; 0x8c
 80046ea:	2120      	movs	r1, #32
 80046ec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2284      	movs	r2, #132	; 0x84
 80046f2:	2100      	movs	r1, #0
 80046f4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e012      	b.n	8004720 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2288      	movs	r2, #136	; 0x88
 80046fe:	2120      	movs	r1, #32
 8004700:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	228c      	movs	r2, #140	; 0x8c
 8004706:	2120      	movs	r1, #32
 8004708:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2284      	movs	r2, #132	; 0x84
 800471a:	2100      	movs	r1, #0
 800471c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	0018      	movs	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	b010      	add	sp, #64	; 0x40
 8004726:	bd80      	pop	{r7, pc}
 8004728:	01ffffff 	.word	0x01ffffff
 800472c:	fffffedf 	.word	0xfffffedf

08004730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	1dfb      	adds	r3, r7, #7
 800473e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004740:	e051      	b.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	3301      	adds	r3, #1
 8004746:	d04e      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004748:	f7fc fc1e 	bl	8000f88 <HAL_GetTick>
 800474c:	0002      	movs	r2, r0
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	429a      	cmp	r2, r3
 8004756:	d302      	bcc.n	800475e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e051      	b.n	8004806 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2204      	movs	r2, #4
 800476a:	4013      	ands	r3, r2
 800476c:	d03b      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d038      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d035      	beq.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	2208      	movs	r2, #8
 8004782:	4013      	ands	r3, r2
 8004784:	2b08      	cmp	r3, #8
 8004786:	d111      	bne.n	80047ac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2208      	movs	r2, #8
 800478e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	0018      	movs	r0, r3
 8004794:	f000 f83c 	bl	8004810 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2290      	movs	r2, #144	; 0x90
 800479c:	2108      	movs	r1, #8
 800479e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2284      	movs	r2, #132	; 0x84
 80047a4:	2100      	movs	r1, #0
 80047a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e02c      	b.n	8004806 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	401a      	ands	r2, r3
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	429a      	cmp	r2, r3
 80047be:	d112      	bne.n	80047e6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2280      	movs	r2, #128	; 0x80
 80047c6:	0112      	lsls	r2, r2, #4
 80047c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f000 f81f 	bl	8004810 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2290      	movs	r2, #144	; 0x90
 80047d6:	2120      	movs	r1, #32
 80047d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2284      	movs	r2, #132	; 0x84
 80047de:	2100      	movs	r1, #0
 80047e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e00f      	b.n	8004806 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	4013      	ands	r3, r2
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	425a      	negs	r2, r3
 80047f6:	4153      	adcs	r3, r2
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	001a      	movs	r2, r3
 80047fc:	1dfb      	adds	r3, r7, #7
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d09e      	beq.n	8004742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b004      	add	sp, #16
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b08e      	sub	sp, #56	; 0x38
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004818:	f3ef 8310 	mrs	r3, PRIMASK
 800481c:	617b      	str	r3, [r7, #20]
  return(result);
 800481e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004820:	637b      	str	r3, [r7, #52]	; 0x34
 8004822:	2301      	movs	r3, #1
 8004824:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f383 8810 	msr	PRIMASK, r3
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4926      	ldr	r1, [pc, #152]	; (80048d4 <UART_EndRxTransfer+0xc4>)
 800483a:	400a      	ands	r2, r1
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f383 8810 	msr	PRIMASK, r3
}
 8004848:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800484a:	f3ef 8310 	mrs	r3, PRIMASK
 800484e:	623b      	str	r3, [r7, #32]
  return(result);
 8004850:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004852:	633b      	str	r3, [r7, #48]	; 0x30
 8004854:	2301      	movs	r3, #1
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	f383 8810 	msr	PRIMASK, r3
}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	491b      	ldr	r1, [pc, #108]	; (80048d8 <UART_EndRxTransfer+0xc8>)
 800486c:	400a      	ands	r2, r1
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	f383 8810 	msr	PRIMASK, r3
}
 800487a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d118      	bne.n	80048b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004884:	f3ef 8310 	mrs	r3, PRIMASK
 8004888:	60bb      	str	r3, [r7, #8]
  return(result);
 800488a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488e:	2301      	movs	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f383 8810 	msr	PRIMASK, r3
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2110      	movs	r1, #16
 80048a6:	438a      	bics	r2, r1
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f383 8810 	msr	PRIMASK, r3
}
 80048b4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	228c      	movs	r2, #140	; 0x8c
 80048ba:	2120      	movs	r1, #32
 80048bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b00e      	add	sp, #56	; 0x38
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	fffffedf 	.word	0xfffffedf
 80048d8:	effffffe 	.word	0xeffffffe

080048dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2284      	movs	r2, #132	; 0x84
 80048e8:	5c9b      	ldrb	r3, [r3, r2]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e027      	b.n	8004942 <HAL_UARTEx_DisableFifoMode+0x66>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2284      	movs	r2, #132	; 0x84
 80048f6:	2101      	movs	r1, #1
 80048f8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2288      	movs	r2, #136	; 0x88
 80048fe:	2124      	movs	r1, #36	; 0x24
 8004900:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2101      	movs	r1, #1
 8004916:	438a      	bics	r2, r1
 8004918:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a0b      	ldr	r2, [pc, #44]	; (800494c <HAL_UARTEx_DisableFifoMode+0x70>)
 800491e:	4013      	ands	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2288      	movs	r2, #136	; 0x88
 8004934:	2120      	movs	r1, #32
 8004936:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2284      	movs	r2, #132	; 0x84
 800493c:	2100      	movs	r1, #0
 800493e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b004      	add	sp, #16
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	dfffffff 	.word	0xdfffffff

08004950 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2284      	movs	r2, #132	; 0x84
 800495e:	5c9b      	ldrb	r3, [r3, r2]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004964:	2302      	movs	r3, #2
 8004966:	e02e      	b.n	80049c6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2284      	movs	r2, #132	; 0x84
 800496c:	2101      	movs	r1, #1
 800496e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2288      	movs	r2, #136	; 0x88
 8004974:	2124      	movs	r1, #36	; 0x24
 8004976:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2101      	movs	r1, #1
 800498c:	438a      	bics	r2, r1
 800498e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	08d9      	lsrs	r1, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	0018      	movs	r0, r3
 80049a8:	f000 f854 	bl	8004a54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2288      	movs	r2, #136	; 0x88
 80049b8:	2120      	movs	r1, #32
 80049ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2284      	movs	r2, #132	; 0x84
 80049c0:	2100      	movs	r1, #0
 80049c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	0018      	movs	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b004      	add	sp, #16
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2284      	movs	r2, #132	; 0x84
 80049de:	5c9b      	ldrb	r3, [r3, r2]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e02f      	b.n	8004a48 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2284      	movs	r2, #132	; 0x84
 80049ec:	2101      	movs	r1, #1
 80049ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2288      	movs	r2, #136	; 0x88
 80049f4:	2124      	movs	r1, #36	; 0x24
 80049f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	438a      	bics	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	4a0e      	ldr	r2, [pc, #56]	; (8004a50 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	0019      	movs	r1, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f000 f813 	bl	8004a54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2288      	movs	r2, #136	; 0x88
 8004a3a:	2120      	movs	r1, #32
 8004a3c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2284      	movs	r2, #132	; 0x84
 8004a42:	2100      	movs	r1, #0
 8004a44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	0018      	movs	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b004      	add	sp, #16
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	f1ffffff 	.word	0xf1ffffff

08004a54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d108      	bne.n	8004a76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	226a      	movs	r2, #106	; 0x6a
 8004a68:	2101      	movs	r1, #1
 8004a6a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2268      	movs	r2, #104	; 0x68
 8004a70:	2101      	movs	r1, #1
 8004a72:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a74:	e043      	b.n	8004afe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a76:	260f      	movs	r6, #15
 8004a78:	19bb      	adds	r3, r7, r6
 8004a7a:	2208      	movs	r2, #8
 8004a7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a7e:	200e      	movs	r0, #14
 8004a80:	183b      	adds	r3, r7, r0
 8004a82:	2208      	movs	r2, #8
 8004a84:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	0e5b      	lsrs	r3, r3, #25
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	240d      	movs	r4, #13
 8004a92:	193b      	adds	r3, r7, r4
 8004a94:	2107      	movs	r1, #7
 8004a96:	400a      	ands	r2, r1
 8004a98:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	0f5b      	lsrs	r3, r3, #29
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	250c      	movs	r5, #12
 8004aa6:	197b      	adds	r3, r7, r5
 8004aa8:	2107      	movs	r1, #7
 8004aaa:	400a      	ands	r2, r1
 8004aac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004aae:	183b      	adds	r3, r7, r0
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	197a      	adds	r2, r7, r5
 8004ab4:	7812      	ldrb	r2, [r2, #0]
 8004ab6:	4914      	ldr	r1, [pc, #80]	; (8004b08 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ab8:	5c8a      	ldrb	r2, [r1, r2]
 8004aba:	435a      	muls	r2, r3
 8004abc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004abe:	197b      	adds	r3, r7, r5
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	4a12      	ldr	r2, [pc, #72]	; (8004b0c <UARTEx_SetNbDataToProcess+0xb8>)
 8004ac4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	f7fb fba4 	bl	8000214 <__divsi3>
 8004acc:	0003      	movs	r3, r0
 8004ace:	b299      	uxth	r1, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	226a      	movs	r2, #106	; 0x6a
 8004ad4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ad6:	19bb      	adds	r3, r7, r6
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	193a      	adds	r2, r7, r4
 8004adc:	7812      	ldrb	r2, [r2, #0]
 8004ade:	490a      	ldr	r1, [pc, #40]	; (8004b08 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ae0:	5c8a      	ldrb	r2, [r1, r2]
 8004ae2:	435a      	muls	r2, r3
 8004ae4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ae6:	193b      	adds	r3, r7, r4
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <UARTEx_SetNbDataToProcess+0xb8>)
 8004aec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004aee:	0019      	movs	r1, r3
 8004af0:	f7fb fb90 	bl	8000214 <__divsi3>
 8004af4:	0003      	movs	r3, r0
 8004af6:	b299      	uxth	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2268      	movs	r2, #104	; 0x68
 8004afc:	5299      	strh	r1, [r3, r2]
}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b005      	add	sp, #20
 8004b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	08006090 	.word	0x08006090
 8004b0c:	08006098 	.word	0x08006098

08004b10 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	0002      	movs	r2, r0
 8004b18:	1dfb      	adds	r3, r7, #7
 8004b1a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 8004b1c:	23fa      	movs	r3, #250	; 0xfa
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	1df9      	adds	r1, r7, #7
 8004b22:	4804      	ldr	r0, [pc, #16]	; (8004b34 <DEV_SPI_WRite+0x24>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	f7fe f9a1 	bl	8002e6c <HAL_SPI_Transmit>
}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	b002      	add	sp, #8
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	200000f8 	.word	0x200000f8

08004b38 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8004b3c:	2380      	movs	r3, #128	; 0x80
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	480d      	ldr	r0, [pc, #52]	; (8004b78 <DEV_Module_Init+0x40>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	0019      	movs	r1, r3
 8004b46:	f7fd fa8f 	bl	8002068 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8004b4a:	2380      	movs	r3, #128	; 0x80
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	480b      	ldr	r0, [pc, #44]	; (8004b7c <DEV_Module_Init+0x44>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	0019      	movs	r1, r3
 8004b54:	f7fd fa88 	bl	8002068 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8004b58:	23a0      	movs	r3, #160	; 0xa0
 8004b5a:	05db      	lsls	r3, r3, #23
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	2108      	movs	r1, #8
 8004b60:	0018      	movs	r0, r3
 8004b62:	f7fd fa81 	bl	8002068 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <DEV_Module_Init+0x48>)
 8004b68:	2100      	movs	r1, #0
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f7fe fd0c 	bl	8003588 <HAL_TIM_PWM_Start>
		return 0;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	50000800 	.word	0x50000800
 8004b7c:	50000400 	.word	0x50000400
 8004b80:	2000015c 	.word	0x2000015c

08004b84 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8004b84:	b5b0      	push	{r4, r5, r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	0005      	movs	r5, r0
 8004b8c:	000c      	movs	r4, r1
 8004b8e:	0010      	movs	r0, r2
 8004b90:	0019      	movs	r1, r3
 8004b92:	1dbb      	adds	r3, r7, #6
 8004b94:	1c2a      	adds	r2, r5, #0
 8004b96:	801a      	strh	r2, [r3, #0]
 8004b98:	1d3b      	adds	r3, r7, #4
 8004b9a:	1c22      	adds	r2, r4, #0
 8004b9c:	801a      	strh	r2, [r3, #0]
 8004b9e:	1cbb      	adds	r3, r7, #2
 8004ba0:	1c02      	adds	r2, r0, #0
 8004ba2:	801a      	strh	r2, [r3, #0]
 8004ba4:	003b      	movs	r3, r7
 8004ba6:	1c0a      	adds	r2, r1, #0
 8004ba8:	801a      	strh	r2, [r3, #0]
    Paint.WidthMemory = Width;
 8004baa:	4b1c      	ldr	r3, [pc, #112]	; (8004c1c <Paint_NewImage+0x98>)
 8004bac:	1dba      	adds	r2, r7, #6
 8004bae:	8812      	ldrh	r2, [r2, #0]
 8004bb0:	811a      	strh	r2, [r3, #8]
    Paint.HeightMemory = Height;
 8004bb2:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <Paint_NewImage+0x98>)
 8004bb4:	1d3a      	adds	r2, r7, #4
 8004bb6:	8812      	ldrh	r2, [r2, #0]
 8004bb8:	815a      	strh	r2, [r3, #10]
    Paint.Color = Color;    
 8004bba:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <Paint_NewImage+0x98>)
 8004bbc:	003a      	movs	r2, r7
 8004bbe:	8812      	ldrh	r2, [r2, #0]
 8004bc0:	819a      	strh	r2, [r3, #12]
    Paint.WidthByte = Width;
 8004bc2:	4b16      	ldr	r3, [pc, #88]	; (8004c1c <Paint_NewImage+0x98>)
 8004bc4:	1dba      	adds	r2, r7, #6
 8004bc6:	8812      	ldrh	r2, [r2, #0]
 8004bc8:	825a      	strh	r2, [r3, #18]
    Paint.HeightByte = Height;    
 8004bca:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <Paint_NewImage+0x98>)
 8004bcc:	1d3a      	adds	r2, r7, #4
 8004bce:	8812      	ldrh	r2, [r2, #0]
 8004bd0:	829a      	strh	r2, [r3, #20]
   
    Paint.Rotate = Rotate;
 8004bd2:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <Paint_NewImage+0x98>)
 8004bd4:	1cba      	adds	r2, r7, #2
 8004bd6:	8812      	ldrh	r2, [r2, #0]
 8004bd8:	81da      	strh	r2, [r3, #14]
    Paint.Mirror = MIRROR_NONE;
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <Paint_NewImage+0x98>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8004be0:	1cbb      	adds	r3, r7, #2
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <Paint_NewImage+0x6c>
 8004be8:	1cbb      	adds	r3, r7, #2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	2bb4      	cmp	r3, #180	; 0xb4
 8004bee:	d108      	bne.n	8004c02 <Paint_NewImage+0x7e>
        Paint.Width = Width;
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <Paint_NewImage+0x98>)
 8004bf2:	1dba      	adds	r2, r7, #6
 8004bf4:	8812      	ldrh	r2, [r2, #0]
 8004bf6:	809a      	strh	r2, [r3, #4]
        Paint.Height = Height;
 8004bf8:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <Paint_NewImage+0x98>)
 8004bfa:	1d3a      	adds	r2, r7, #4
 8004bfc:	8812      	ldrh	r2, [r2, #0]
 8004bfe:	80da      	strh	r2, [r3, #6]
 8004c00:	e008      	b.n	8004c14 <Paint_NewImage+0x90>
    } else {
        Paint.Width = Height;
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <Paint_NewImage+0x98>)
 8004c04:	1d3a      	adds	r2, r7, #4
 8004c06:	8812      	ldrh	r2, [r2, #0]
 8004c08:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 8004c0a:	4b04      	ldr	r3, [pc, #16]	; (8004c1c <Paint_NewImage+0x98>)
 8004c0c:	1dba      	adds	r2, r7, #6
 8004c0e:	8812      	ldrh	r2, [r2, #0]
 8004c10:	80da      	strh	r2, [r3, #6]
    }
}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	46c0      	nop			; (mov r8, r8)
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b002      	add	sp, #8
 8004c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c1c:	20000240 	.word	0x20000240

08004c20 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8004c28:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <Paint_SetClearFuntion+0x18>)
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b002      	add	sp, #8
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	2000025c 	.word	0x2000025c

08004c3c <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <Paint_SetDisplayFuntion+0x18>)
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]
}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b002      	add	sp, #8
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	20000258 	.word	0x20000258

08004c58 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	0004      	movs	r4, r0
 8004c60:	0008      	movs	r0, r1
 8004c62:	0011      	movs	r1, r2
 8004c64:	1dbb      	adds	r3, r7, #6
 8004c66:	1c22      	adds	r2, r4, #0
 8004c68:	801a      	strh	r2, [r3, #0]
 8004c6a:	1d3b      	adds	r3, r7, #4
 8004c6c:	1c02      	adds	r2, r0, #0
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	1cbb      	adds	r3, r7, #2
 8004c72:	1c0a      	adds	r2, r1, #0
 8004c74:	801a      	strh	r2, [r3, #0]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8004c76:	4b66      	ldr	r3, [pc, #408]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004c78:	889b      	ldrh	r3, [r3, #4]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	1dba      	adds	r2, r7, #6
 8004c7e:	8812      	ldrh	r2, [r2, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d900      	bls.n	8004c86 <Paint_SetPixel+0x2e>
 8004c84:	e0b9      	b.n	8004dfa <Paint_SetPixel+0x1a2>
 8004c86:	4b62      	ldr	r3, [pc, #392]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004c88:	88db      	ldrh	r3, [r3, #6]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	1d3a      	adds	r2, r7, #4
 8004c8e:	8812      	ldrh	r2, [r2, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d900      	bls.n	8004c96 <Paint_SetPixel+0x3e>
 8004c94:	e0b1      	b.n	8004dfa <Paint_SetPixel+0x1a2>
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8004c96:	4b5e      	ldr	r3, [pc, #376]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004c98:	89db      	ldrh	r3, [r3, #14]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2287      	movs	r2, #135	; 0x87
 8004c9e:	0052      	lsls	r2, r2, #1
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d040      	beq.n	8004d26 <Paint_SetPixel+0xce>
 8004ca4:	2287      	movs	r2, #135	; 0x87
 8004ca6:	0052      	lsls	r2, r2, #1
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	dd00      	ble.n	8004cae <Paint_SetPixel+0x56>
 8004cac:	e0a7      	b.n	8004dfe <Paint_SetPixel+0x1a6>
 8004cae:	2bb4      	cmp	r3, #180	; 0xb4
 8004cb0:	d022      	beq.n	8004cf8 <Paint_SetPixel+0xa0>
 8004cb2:	dd00      	ble.n	8004cb6 <Paint_SetPixel+0x5e>
 8004cb4:	e0a3      	b.n	8004dfe <Paint_SetPixel+0x1a6>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <Paint_SetPixel+0x68>
 8004cba:	2b5a      	cmp	r3, #90	; 0x5a
 8004cbc:	d00b      	beq.n	8004cd6 <Paint_SetPixel+0x7e>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8004cbe:	e09e      	b.n	8004dfe <Paint_SetPixel+0x1a6>
        X = Xpoint;
 8004cc0:	230e      	movs	r3, #14
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	1dba      	adds	r2, r7, #6
 8004cc6:	8812      	ldrh	r2, [r2, #0]
 8004cc8:	801a      	strh	r2, [r3, #0]
        Y = Ypoint;  
 8004cca:	230c      	movs	r3, #12
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	1d3a      	adds	r2, r7, #4
 8004cd0:	8812      	ldrh	r2, [r2, #0]
 8004cd2:	801a      	strh	r2, [r3, #0]
        break;
 8004cd4:	e038      	b.n	8004d48 <Paint_SetPixel+0xf0>
        X = Paint.WidthMemory - Ypoint - 1;
 8004cd6:	4b4e      	ldr	r3, [pc, #312]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004cd8:	891b      	ldrh	r3, [r3, #8]
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	1d3b      	adds	r3, r7, #4
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	230e      	movs	r3, #14
 8004ce6:	18fb      	adds	r3, r7, r3
 8004ce8:	3a01      	subs	r2, #1
 8004cea:	801a      	strh	r2, [r3, #0]
        Y = Xpoint;
 8004cec:	230c      	movs	r3, #12
 8004cee:	18fb      	adds	r3, r7, r3
 8004cf0:	1dba      	adds	r2, r7, #6
 8004cf2:	8812      	ldrh	r2, [r2, #0]
 8004cf4:	801a      	strh	r2, [r3, #0]
        break;
 8004cf6:	e027      	b.n	8004d48 <Paint_SetPixel+0xf0>
        X = Paint.WidthMemory - Xpoint - 1;
 8004cf8:	4b45      	ldr	r3, [pc, #276]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004cfa:	891b      	ldrh	r3, [r3, #8]
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	1dbb      	adds	r3, r7, #6
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	230e      	movs	r3, #14
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	3a01      	subs	r2, #1
 8004d0c:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Ypoint - 1;
 8004d0e:	4b40      	ldr	r3, [pc, #256]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004d10:	895b      	ldrh	r3, [r3, #10]
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	1d3b      	adds	r3, r7, #4
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	230c      	movs	r3, #12
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	3a01      	subs	r2, #1
 8004d22:	801a      	strh	r2, [r3, #0]
        break;
 8004d24:	e010      	b.n	8004d48 <Paint_SetPixel+0xf0>
        X = Ypoint;
 8004d26:	230e      	movs	r3, #14
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	1d3a      	adds	r2, r7, #4
 8004d2c:	8812      	ldrh	r2, [r2, #0]
 8004d2e:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Xpoint - 1;
 8004d30:	4b37      	ldr	r3, [pc, #220]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004d32:	895b      	ldrh	r3, [r3, #10]
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	1dbb      	adds	r3, r7, #6
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	230c      	movs	r3, #12
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	3a01      	subs	r2, #1
 8004d44:	801a      	strh	r2, [r3, #0]
        break;
 8004d46:	46c0      	nop			; (mov r8, r8)
    }
    
    switch(Paint.Mirror) {
 8004d48:	4b31      	ldr	r3, [pc, #196]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004d4a:	8a1b      	ldrh	r3, [r3, #16]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d020      	beq.n	8004d94 <Paint_SetPixel+0x13c>
 8004d52:	dc56      	bgt.n	8004e02 <Paint_SetPixel+0x1aa>
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d011      	beq.n	8004d7c <Paint_SetPixel+0x124>
 8004d58:	dc53      	bgt.n	8004e02 <Paint_SetPixel+0x1aa>
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d031      	beq.n	8004dc2 <Paint_SetPixel+0x16a>
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d000      	beq.n	8004d64 <Paint_SetPixel+0x10c>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
        Y = Paint.HeightMemory - Y - 1;
        break;
    default:
        return;
 8004d62:	e04e      	b.n	8004e02 <Paint_SetPixel+0x1aa>
        X = Paint.WidthMemory - X - 1;
 8004d64:	4b2a      	ldr	r3, [pc, #168]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004d66:	891b      	ldrh	r3, [r3, #8]
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	210e      	movs	r1, #14
 8004d6c:	187b      	adds	r3, r7, r1
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	187b      	adds	r3, r7, r1
 8004d76:	3a01      	subs	r2, #1
 8004d78:	801a      	strh	r2, [r3, #0]
        break;
 8004d7a:	e023      	b.n	8004dc4 <Paint_SetPixel+0x16c>
        Y = Paint.HeightMemory - Y - 1;
 8004d7c:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004d7e:	895b      	ldrh	r3, [r3, #10]
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	210c      	movs	r1, #12
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	187b      	adds	r3, r7, r1
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	801a      	strh	r2, [r3, #0]
        break;
 8004d92:	e017      	b.n	8004dc4 <Paint_SetPixel+0x16c>
        X = Paint.WidthMemory - X - 1;
 8004d94:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004d96:	891b      	ldrh	r3, [r3, #8]
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	210e      	movs	r1, #14
 8004d9c:	187b      	adds	r3, r7, r1
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	187b      	adds	r3, r7, r1
 8004da6:	3a01      	subs	r2, #1
 8004da8:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Y - 1;
 8004daa:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004dac:	895b      	ldrh	r3, [r3, #10]
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	210c      	movs	r1, #12
 8004db2:	187b      	adds	r3, r7, r1
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	187b      	adds	r3, r7, r1
 8004dbc:	3a01      	subs	r2, #1
 8004dbe:	801a      	strh	r2, [r3, #0]
        break;
 8004dc0:	e000      	b.n	8004dc4 <Paint_SetPixel+0x16c>
        break;
 8004dc2:	46c0      	nop			; (mov r8, r8)
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8004dc4:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004dc6:	891b      	ldrh	r3, [r3, #8]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	200e      	movs	r0, #14
 8004dcc:	183a      	adds	r2, r7, r0
 8004dce:	8812      	ldrh	r2, [r2, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d818      	bhi.n	8004e06 <Paint_SetPixel+0x1ae>
 8004dd4:	4b0e      	ldr	r3, [pc, #56]	; (8004e10 <Paint_SetPixel+0x1b8>)
 8004dd6:	895b      	ldrh	r3, [r3, #10]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	210c      	movs	r1, #12
 8004ddc:	187a      	adds	r2, r7, r1
 8004dde:	8812      	ldrh	r2, [r2, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d810      	bhi.n	8004e06 <Paint_SetPixel+0x1ae>
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8004de4:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <Paint_SetPixel+0x1bc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	1cba      	adds	r2, r7, #2
 8004dea:	8814      	ldrh	r4, [r2, #0]
 8004dec:	187a      	adds	r2, r7, r1
 8004dee:	8811      	ldrh	r1, [r2, #0]
 8004df0:	183a      	adds	r2, r7, r0
 8004df2:	8810      	ldrh	r0, [r2, #0]
 8004df4:	0022      	movs	r2, r4
 8004df6:	4798      	blx	r3
 8004df8:	e006      	b.n	8004e08 <Paint_SetPixel+0x1b0>
        return;
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	e004      	b.n	8004e08 <Paint_SetPixel+0x1b0>
        return;
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	e002      	b.n	8004e08 <Paint_SetPixel+0x1b0>
        return;
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	e000      	b.n	8004e08 <Paint_SetPixel+0x1b0>
        return;
 8004e06:	46c0      	nop			; (mov r8, r8)
}
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b005      	add	sp, #20
 8004e0c:	bd90      	pop	{r4, r7, pc}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	20000240 	.word	0x20000240
 8004e14:	20000258 	.word	0x20000258

08004e18 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	0002      	movs	r2, r0
 8004e20:	1dbb      	adds	r3, r7, #6
 8004e22:	801a      	strh	r2, [r3, #0]
	CLEAR(Color);
 8004e24:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <Paint_Clear+0x20>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	1dba      	adds	r2, r7, #6
 8004e2a:	8812      	ldrh	r2, [r2, #0]
 8004e2c:	0010      	movs	r0, r2
 8004e2e:	4798      	blx	r3
}
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b002      	add	sp, #8
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	2000025c 	.word	0x2000025c

08004e3c <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8004e3c:	b5b0      	push	{r4, r5, r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	0005      	movs	r5, r0
 8004e44:	000c      	movs	r4, r1
 8004e46:	0010      	movs	r0, r2
 8004e48:	0019      	movs	r1, r3
 8004e4a:	1dbb      	adds	r3, r7, #6
 8004e4c:	1c2a      	adds	r2, r5, #0
 8004e4e:	801a      	strh	r2, [r3, #0]
 8004e50:	1d3b      	adds	r3, r7, #4
 8004e52:	1c22      	adds	r2, r4, #0
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	1cbb      	adds	r3, r7, #2
 8004e58:	1c02      	adds	r2, r0, #0
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	1c7b      	adds	r3, r7, #1
 8004e5e:	1c0a      	adds	r2, r1, #0
 8004e60:	701a      	strb	r2, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004e62:	4b5f      	ldr	r3, [pc, #380]	; (8004fe0 <Paint_DrawPoint+0x1a4>)
 8004e64:	889b      	ldrh	r3, [r3, #4]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	1dba      	adds	r2, r7, #6
 8004e6a:	8812      	ldrh	r2, [r2, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d900      	bls.n	8004e72 <Paint_DrawPoint+0x36>
 8004e70:	e0b1      	b.n	8004fd6 <Paint_DrawPoint+0x19a>
 8004e72:	4b5b      	ldr	r3, [pc, #364]	; (8004fe0 <Paint_DrawPoint+0x1a4>)
 8004e74:	88db      	ldrh	r3, [r3, #6]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	1d3a      	adds	r2, r7, #4
 8004e7a:	8812      	ldrh	r2, [r2, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d900      	bls.n	8004e82 <Paint_DrawPoint+0x46>
 8004e80:	e0a9      	b.n	8004fd6 <Paint_DrawPoint+0x19a>
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 8004e82:	2320      	movs	r3, #32
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d161      	bne.n	8004f50 <Paint_DrawPoint+0x114>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8004e8c:	230e      	movs	r3, #14
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	2200      	movs	r2, #0
 8004e92:	801a      	strh	r2, [r3, #0]
 8004e94:	e051      	b.n	8004f3a <Paint_DrawPoint+0xfe>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8004e96:	230c      	movs	r3, #12
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e039      	b.n	8004f14 <Paint_DrawPoint+0xd8>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8004ea0:	1dbb      	adds	r3, r7, #6
 8004ea2:	881a      	ldrh	r2, [r3, #0]
 8004ea4:	200e      	movs	r0, #14
 8004ea6:	183b      	adds	r3, r7, r0
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	5e5b      	ldrsh	r3, [r3, r1]
 8004eac:	18d2      	adds	r2, r2, r3
 8004eae:	1c7b      	adds	r3, r7, #1
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	d438      	bmi.n	8004f28 <Paint_DrawPoint+0xec>
 8004eb6:	1d3b      	adds	r3, r7, #4
 8004eb8:	881a      	ldrh	r2, [r3, #0]
 8004eba:	210c      	movs	r1, #12
 8004ebc:	187b      	adds	r3, r7, r1
 8004ebe:	2400      	movs	r4, #0
 8004ec0:	5f1b      	ldrsh	r3, [r3, r4]
 8004ec2:	18d2      	adds	r2, r2, r3
 8004ec4:	1c7b      	adds	r3, r7, #1
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	d42d      	bmi.n	8004f28 <Paint_DrawPoint+0xec>
                    break;
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8004ecc:	183b      	adds	r3, r7, r0
 8004ece:	881a      	ldrh	r2, [r3, #0]
 8004ed0:	1dbb      	adds	r3, r7, #6
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	18d3      	adds	r3, r2, r3
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	1c7b      	adds	r3, r7, #1
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	b298      	uxth	r0, r3
 8004ee2:	000c      	movs	r4, r1
 8004ee4:	187b      	adds	r3, r7, r1
 8004ee6:	881a      	ldrh	r2, [r3, #0]
 8004ee8:	1d3b      	adds	r3, r7, #4
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	18d3      	adds	r3, r2, r3
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	1c7b      	adds	r3, r7, #1
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	b299      	uxth	r1, r3
 8004efa:	1cbb      	adds	r3, r7, #2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	001a      	movs	r2, r3
 8004f00:	f7ff feaa 	bl	8004c58 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8004f04:	193b      	adds	r3, r7, r4
 8004f06:	2200      	movs	r2, #0
 8004f08:	5e9b      	ldrsh	r3, [r3, r2]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	193b      	adds	r3, r7, r4
 8004f12:	801a      	strh	r2, [r3, #0]
 8004f14:	230c      	movs	r3, #12
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	2200      	movs	r2, #0
 8004f1a:	5e9a      	ldrsh	r2, [r3, r2]
 8004f1c:	1c7b      	adds	r3, r7, #1
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	3b01      	subs	r3, #1
 8004f24:	429a      	cmp	r2, r3
 8004f26:	dbbb      	blt.n	8004ea0 <Paint_DrawPoint+0x64>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8004f28:	210e      	movs	r1, #14
 8004f2a:	187b      	adds	r3, r7, r1
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	5e9b      	ldrsh	r3, [r3, r2]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3301      	adds	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	187b      	adds	r3, r7, r1
 8004f38:	801a      	strh	r2, [r3, #0]
 8004f3a:	230e      	movs	r3, #14
 8004f3c:	18fb      	adds	r3, r7, r3
 8004f3e:	2200      	movs	r2, #0
 8004f40:	5e9a      	ldrsh	r2, [r3, r2]
 8004f42:	1c7b      	adds	r3, r7, #1
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	dba3      	blt.n	8004e96 <Paint_DrawPoint+0x5a>
 8004f4e:	e043      	b.n	8004fd8 <Paint_DrawPoint+0x19c>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8004f50:	230e      	movs	r3, #14
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	2200      	movs	r2, #0
 8004f56:	801a      	strh	r2, [r3, #0]
 8004f58:	e034      	b.n	8004fc4 <Paint_DrawPoint+0x188>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8004f5a:	230c      	movs	r3, #12
 8004f5c:	18fb      	adds	r3, r7, r3
 8004f5e:	2200      	movs	r2, #0
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	e01e      	b.n	8004fa2 <Paint_DrawPoint+0x166>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8004f64:	230e      	movs	r3, #14
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	881a      	ldrh	r2, [r3, #0]
 8004f6a:	1dbb      	adds	r3, r7, #6
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	18d3      	adds	r3, r2, r3
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b298      	uxth	r0, r3
 8004f76:	240c      	movs	r4, #12
 8004f78:	193b      	adds	r3, r7, r4
 8004f7a:	881a      	ldrh	r2, [r3, #0]
 8004f7c:	1d3b      	adds	r3, r7, #4
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	18d3      	adds	r3, r2, r3
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b299      	uxth	r1, r3
 8004f88:	1cbb      	adds	r3, r7, #2
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	001a      	movs	r2, r3
 8004f8e:	f7ff fe63 	bl	8004c58 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8004f92:	193b      	adds	r3, r7, r4
 8004f94:	2200      	movs	r2, #0
 8004f96:	5e9b      	ldrsh	r3, [r3, r2]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	193b      	adds	r3, r7, r4
 8004fa0:	801a      	strh	r2, [r3, #0]
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	18fb      	adds	r3, r7, r3
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	5e9a      	ldrsh	r2, [r3, r2]
 8004faa:	1c7b      	adds	r3, r7, #1
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	dbd8      	blt.n	8004f64 <Paint_DrawPoint+0x128>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8004fb2:	210e      	movs	r1, #14
 8004fb4:	187b      	adds	r3, r7, r1
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	5e9b      	ldrsh	r3, [r3, r2]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	187b      	adds	r3, r7, r1
 8004fc2:	801a      	strh	r2, [r3, #0]
 8004fc4:	230e      	movs	r3, #14
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	2200      	movs	r2, #0
 8004fca:	5e9a      	ldrsh	r2, [r3, r2]
 8004fcc:	1c7b      	adds	r3, r7, #1
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	dbc2      	blt.n	8004f5a <Paint_DrawPoint+0x11e>
 8004fd4:	e000      	b.n	8004fd8 <Paint_DrawPoint+0x19c>
        return;
 8004fd6:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
}
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b004      	add	sp, #16
 8004fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	20000240 	.word	0x20000240

08004fe4 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8004fe4:	b5b0      	push	{r4, r5, r7, lr}
 8004fe6:	b08c      	sub	sp, #48	; 0x30
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	0005      	movs	r5, r0
 8004fec:	000c      	movs	r4, r1
 8004fee:	0010      	movs	r0, r2
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	1dbb      	adds	r3, r7, #6
 8004ff4:	1c2a      	adds	r2, r5, #0
 8004ff6:	801a      	strh	r2, [r3, #0]
 8004ff8:	1d3b      	adds	r3, r7, #4
 8004ffa:	1c22      	adds	r2, r4, #0
 8004ffc:	801a      	strh	r2, [r3, #0]
 8004ffe:	1cbb      	adds	r3, r7, #2
 8005000:	1c02      	adds	r2, r0, #0
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	003b      	movs	r3, r7
 8005006:	1c0a      	adds	r2, r1, #0
 8005008:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800500a:	4b66      	ldr	r3, [pc, #408]	; (80051a4 <Paint_DrawLine+0x1c0>)
 800500c:	889b      	ldrh	r3, [r3, #4]
 800500e:	b29b      	uxth	r3, r3
 8005010:	1dba      	adds	r2, r7, #6
 8005012:	8812      	ldrh	r2, [r2, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d900      	bls.n	800501a <Paint_DrawLine+0x36>
 8005018:	e0bb      	b.n	8005192 <Paint_DrawLine+0x1ae>
 800501a:	4b62      	ldr	r3, [pc, #392]	; (80051a4 <Paint_DrawLine+0x1c0>)
 800501c:	88db      	ldrh	r3, [r3, #6]
 800501e:	b29b      	uxth	r3, r3
 8005020:	1d3a      	adds	r2, r7, #4
 8005022:	8812      	ldrh	r2, [r2, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d900      	bls.n	800502a <Paint_DrawLine+0x46>
 8005028:	e0b3      	b.n	8005192 <Paint_DrawLine+0x1ae>
        Xend > Paint.Width || Yend > Paint.Height) {
 800502a:	4b5e      	ldr	r3, [pc, #376]	; (80051a4 <Paint_DrawLine+0x1c0>)
 800502c:	889b      	ldrh	r3, [r3, #4]
 800502e:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8005030:	1cba      	adds	r2, r7, #2
 8005032:	8812      	ldrh	r2, [r2, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d900      	bls.n	800503a <Paint_DrawLine+0x56>
 8005038:	e0ab      	b.n	8005192 <Paint_DrawLine+0x1ae>
        Xend > Paint.Width || Yend > Paint.Height) {
 800503a:	4b5a      	ldr	r3, [pc, #360]	; (80051a4 <Paint_DrawLine+0x1c0>)
 800503c:	88db      	ldrh	r3, [r3, #6]
 800503e:	b29b      	uxth	r3, r3
 8005040:	003a      	movs	r2, r7
 8005042:	8812      	ldrh	r2, [r2, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d900      	bls.n	800504a <Paint_DrawLine+0x66>
 8005048:	e0a3      	b.n	8005192 <Paint_DrawLine+0x1ae>
        return;
    }

    UWORD Xpoint = Xstart;
 800504a:	2326      	movs	r3, #38	; 0x26
 800504c:	18fb      	adds	r3, r7, r3
 800504e:	1dba      	adds	r2, r7, #6
 8005050:	8812      	ldrh	r2, [r2, #0]
 8005052:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 8005054:	2324      	movs	r3, #36	; 0x24
 8005056:	18fb      	adds	r3, r7, r3
 8005058:	1d3a      	adds	r2, r7, #4
 800505a:	8812      	ldrh	r2, [r2, #0]
 800505c:	801a      	strh	r2, [r3, #0]
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800505e:	1cbb      	adds	r3, r7, #2
 8005060:	881a      	ldrh	r2, [r3, #0]
 8005062:	1dbb      	adds	r3, r7, #6
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	17da      	asrs	r2, r3, #31
 800506a:	189b      	adds	r3, r3, r2
 800506c:	4053      	eors	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8005070:	003b      	movs	r3, r7
 8005072:	881a      	ldrh	r2, [r3, #0]
 8005074:	1d3b      	adds	r3, r7, #4
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	17da      	asrs	r2, r3, #31
 800507c:	189b      	adds	r3, r3, r2
 800507e:	4053      	eors	r3, r2
 8005080:	425b      	negs	r3, r3
 8005082:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8005084:	1dba      	adds	r2, r7, #6
 8005086:	1cbb      	adds	r3, r7, #2
 8005088:	8812      	ldrh	r2, [r2, #0]
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d201      	bcs.n	8005094 <Paint_DrawLine+0xb0>
 8005090:	2301      	movs	r3, #1
 8005092:	e001      	b.n	8005098 <Paint_DrawLine+0xb4>
 8005094:	2301      	movs	r3, #1
 8005096:	425b      	negs	r3, r3
 8005098:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800509a:	1d3a      	adds	r2, r7, #4
 800509c:	003b      	movs	r3, r7
 800509e:	8812      	ldrh	r2, [r2, #0]
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d201      	bcs.n	80050aa <Paint_DrawLine+0xc6>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e001      	b.n	80050ae <Paint_DrawLine+0xca>
 80050aa:	2301      	movs	r3, #1
 80050ac:	425b      	negs	r3, r3
 80050ae:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	18d3      	adds	r3, r2, r3
 80050b6:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 80050b8:	231f      	movs	r3, #31
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]

    for (;;) {
        Dotted_Len++;
 80050c0:	251f      	movs	r5, #31
 80050c2:	197b      	adds	r3, r7, r5
 80050c4:	781a      	ldrb	r2, [r3, #0]
 80050c6:	197b      	adds	r3, r7, r5
 80050c8:	3201      	adds	r2, #1
 80050ca:	701a      	strb	r2, [r3, #0]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 80050cc:	2340      	movs	r3, #64	; 0x40
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d11d      	bne.n	8005112 <Paint_DrawLine+0x12e>
 80050d6:	197b      	adds	r3, r7, r5
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2103      	movs	r1, #3
 80050dc:	0018      	movs	r0, r3
 80050de:	f7fb f895 	bl	800020c <__aeabi_uidivmod>
 80050e2:	000b      	movs	r3, r1
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d113      	bne.n	8005112 <Paint_DrawLine+0x12e>
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80050ea:	233c      	movs	r3, #60	; 0x3c
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	781a      	ldrb	r2, [r3, #0]
 80050f0:	4c2d      	ldr	r4, [pc, #180]	; (80051a8 <Paint_DrawLine+0x1c4>)
 80050f2:	2324      	movs	r3, #36	; 0x24
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	8819      	ldrh	r1, [r3, #0]
 80050f8:	2326      	movs	r3, #38	; 0x26
 80050fa:	18fb      	adds	r3, r7, r3
 80050fc:	8818      	ldrh	r0, [r3, #0]
 80050fe:	2301      	movs	r3, #1
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	0013      	movs	r3, r2
 8005104:	0022      	movs	r2, r4
 8005106:	f7ff fe99 	bl	8004e3c <Paint_DrawPoint>
            Dotted_Len = 0;
 800510a:	197b      	adds	r3, r7, r5
 800510c:	2200      	movs	r2, #0
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	e010      	b.n	8005134 <Paint_DrawLine+0x150>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8005112:	233c      	movs	r3, #60	; 0x3c
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	781c      	ldrb	r4, [r3, #0]
 8005118:	2338      	movs	r3, #56	; 0x38
 800511a:	18fb      	adds	r3, r7, r3
 800511c:	881a      	ldrh	r2, [r3, #0]
 800511e:	2324      	movs	r3, #36	; 0x24
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	8819      	ldrh	r1, [r3, #0]
 8005124:	2326      	movs	r3, #38	; 0x26
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	8818      	ldrh	r0, [r3, #0]
 800512a:	2301      	movs	r3, #1
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	0023      	movs	r3, r4
 8005130:	f7ff fe84 	bl	8004e3c <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	429a      	cmp	r2, r3
 800513c:	dc11      	bgt.n	8005162 <Paint_DrawLine+0x17e>
            if (Xpoint == Xend)
 800513e:	2026      	movs	r0, #38	; 0x26
 8005140:	183a      	adds	r2, r7, r0
 8005142:	1cbb      	adds	r3, r7, #2
 8005144:	8812      	ldrh	r2, [r2, #0]
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d024      	beq.n	8005196 <Paint_DrawLine+0x1b2>
                break;
            Esp += dy;
 800514c:	6a3a      	ldr	r2, [r7, #32]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	18d3      	adds	r3, r2, r3
 8005152:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	b299      	uxth	r1, r3
 8005158:	183b      	adds	r3, r7, r0
 800515a:	183a      	adds	r2, r7, r0
 800515c:	8812      	ldrh	r2, [r2, #0]
 800515e:	188a      	adds	r2, r1, r2
 8005160:	801a      	strh	r2, [r3, #0]
        }
        if (2 * Esp <= dx) {
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	429a      	cmp	r2, r3
 800516a:	dba9      	blt.n	80050c0 <Paint_DrawLine+0xdc>
            if (Ypoint == Yend)
 800516c:	2024      	movs	r0, #36	; 0x24
 800516e:	183a      	adds	r2, r7, r0
 8005170:	003b      	movs	r3, r7
 8005172:	8812      	ldrh	r2, [r2, #0]
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d00f      	beq.n	800519a <Paint_DrawLine+0x1b6>
                break;
            Esp += dx;
 800517a:	6a3a      	ldr	r2, [r7, #32]
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	18d3      	adds	r3, r2, r3
 8005180:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	b299      	uxth	r1, r3
 8005186:	183b      	adds	r3, r7, r0
 8005188:	183a      	adds	r2, r7, r0
 800518a:	8812      	ldrh	r2, [r2, #0]
 800518c:	188a      	adds	r2, r1, r2
 800518e:	801a      	strh	r2, [r3, #0]
        Dotted_Len++;
 8005190:	e796      	b.n	80050c0 <Paint_DrawLine+0xdc>
        return;
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	e002      	b.n	800519c <Paint_DrawLine+0x1b8>
                break;
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	e000      	b.n	800519c <Paint_DrawLine+0x1b8>
                break;
 800519a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800519c:	46bd      	mov	sp, r7
 800519e:	b00a      	add	sp, #40	; 0x28
 80051a0:	bdb0      	pop	{r4, r5, r7, pc}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	20000240 	.word	0x20000240
 80051a8:	0000ffff 	.word	0x0000ffff

080051ac <Paint_DrawRectangle>:
    Color  ：The color of the Rectangular segment
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
 80051ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ae:	b089      	sub	sp, #36	; 0x24
 80051b0:	af04      	add	r7, sp, #16
 80051b2:	0005      	movs	r5, r0
 80051b4:	000c      	movs	r4, r1
 80051b6:	0010      	movs	r0, r2
 80051b8:	0019      	movs	r1, r3
 80051ba:	1dbb      	adds	r3, r7, #6
 80051bc:	1c2a      	adds	r2, r5, #0
 80051be:	801a      	strh	r2, [r3, #0]
 80051c0:	1d3b      	adds	r3, r7, #4
 80051c2:	1c22      	adds	r2, r4, #0
 80051c4:	801a      	strh	r2, [r3, #0]
 80051c6:	1cbb      	adds	r3, r7, #2
 80051c8:	1c02      	adds	r2, r0, #0
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	003b      	movs	r3, r7
 80051ce:	1c0a      	adds	r2, r1, #0
 80051d0:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80051d2:	4b5b      	ldr	r3, [pc, #364]	; (8005340 <Paint_DrawRectangle+0x194>)
 80051d4:	889b      	ldrh	r3, [r3, #4]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	1dba      	adds	r2, r7, #6
 80051da:	8812      	ldrh	r2, [r2, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d900      	bls.n	80051e2 <Paint_DrawRectangle+0x36>
 80051e0:	e0a9      	b.n	8005336 <Paint_DrawRectangle+0x18a>
 80051e2:	4b57      	ldr	r3, [pc, #348]	; (8005340 <Paint_DrawRectangle+0x194>)
 80051e4:	88db      	ldrh	r3, [r3, #6]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	1d3a      	adds	r2, r7, #4
 80051ea:	8812      	ldrh	r2, [r2, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d900      	bls.n	80051f2 <Paint_DrawRectangle+0x46>
 80051f0:	e0a1      	b.n	8005336 <Paint_DrawRectangle+0x18a>
        Xend > Paint.Width || Yend > Paint.Height) {
 80051f2:	4b53      	ldr	r3, [pc, #332]	; (8005340 <Paint_DrawRectangle+0x194>)
 80051f4:	889b      	ldrh	r3, [r3, #4]
 80051f6:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80051f8:	1cba      	adds	r2, r7, #2
 80051fa:	8812      	ldrh	r2, [r2, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d900      	bls.n	8005202 <Paint_DrawRectangle+0x56>
 8005200:	e099      	b.n	8005336 <Paint_DrawRectangle+0x18a>
        Xend > Paint.Width || Yend > Paint.Height) {
 8005202:	4b4f      	ldr	r3, [pc, #316]	; (8005340 <Paint_DrawRectangle+0x194>)
 8005204:	88db      	ldrh	r3, [r3, #6]
 8005206:	b29b      	uxth	r3, r3
 8005208:	003a      	movs	r2, r7
 800520a:	8812      	ldrh	r2, [r2, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d900      	bls.n	8005212 <Paint_DrawRectangle+0x66>
 8005210:	e091      	b.n	8005336 <Paint_DrawRectangle+0x18a>
        return;
    }

    if (Filled ) {
 8005212:	2328      	movs	r3, #40	; 0x28
 8005214:	2208      	movs	r2, #8
 8005216:	189b      	adds	r3, r3, r2
 8005218:	19db      	adds	r3, r3, r7
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d02b      	beq.n	8005278 <Paint_DrawRectangle+0xcc>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8005220:	230e      	movs	r3, #14
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	1d3a      	adds	r2, r7, #4
 8005226:	8812      	ldrh	r2, [r2, #0]
 8005228:	801a      	strh	r2, [r3, #0]
 800522a:	e01d      	b.n	8005268 <Paint_DrawRectangle+0xbc>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
 800522c:	250e      	movs	r5, #14
 800522e:	197b      	adds	r3, r7, r5
 8005230:	881c      	ldrh	r4, [r3, #0]
 8005232:	1cbb      	adds	r3, r7, #2
 8005234:	881a      	ldrh	r2, [r3, #0]
 8005236:	197b      	adds	r3, r7, r5
 8005238:	8819      	ldrh	r1, [r3, #0]
 800523a:	1dbb      	adds	r3, r7, #6
 800523c:	8818      	ldrh	r0, [r3, #0]
 800523e:	2300      	movs	r3, #0
 8005240:	9302      	str	r3, [sp, #8]
 8005242:	2324      	movs	r3, #36	; 0x24
 8005244:	2608      	movs	r6, #8
 8005246:	199b      	adds	r3, r3, r6
 8005248:	19db      	adds	r3, r3, r7
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	2320      	movs	r3, #32
 8005250:	199b      	adds	r3, r3, r6
 8005252:	19db      	adds	r3, r3, r7
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	0023      	movs	r3, r4
 800525a:	f7ff fec3 	bl	8004fe4 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800525e:	197b      	adds	r3, r7, r5
 8005260:	881a      	ldrh	r2, [r3, #0]
 8005262:	197b      	adds	r3, r7, r5
 8005264:	3201      	adds	r2, #1
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	230e      	movs	r3, #14
 800526a:	18fa      	adds	r2, r7, r3
 800526c:	003b      	movs	r3, r7
 800526e:	8812      	ldrh	r2, [r2, #0]
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d3da      	bcc.n	800522c <Paint_DrawRectangle+0x80>
 8005276:	e05f      	b.n	8005338 <Paint_DrawRectangle+0x18c>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8005278:	1d3b      	adds	r3, r7, #4
 800527a:	881c      	ldrh	r4, [r3, #0]
 800527c:	1cbb      	adds	r3, r7, #2
 800527e:	881a      	ldrh	r2, [r3, #0]
 8005280:	1d3b      	adds	r3, r7, #4
 8005282:	8819      	ldrh	r1, [r3, #0]
 8005284:	1dbb      	adds	r3, r7, #6
 8005286:	8818      	ldrh	r0, [r3, #0]
 8005288:	2300      	movs	r3, #0
 800528a:	9302      	str	r3, [sp, #8]
 800528c:	2524      	movs	r5, #36	; 0x24
 800528e:	2308      	movs	r3, #8
 8005290:	18ee      	adds	r6, r5, r3
 8005292:	19f3      	adds	r3, r6, r7
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	2620      	movs	r6, #32
 800529a:	2308      	movs	r3, #8
 800529c:	18f3      	adds	r3, r6, r3
 800529e:	19db      	adds	r3, r3, r7
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	0023      	movs	r3, r4
 80052a6:	f7ff fe9d 	bl	8004fe4 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 80052aa:	003b      	movs	r3, r7
 80052ac:	881c      	ldrh	r4, [r3, #0]
 80052ae:	1dbb      	adds	r3, r7, #6
 80052b0:	881a      	ldrh	r2, [r3, #0]
 80052b2:	1d3b      	adds	r3, r7, #4
 80052b4:	8819      	ldrh	r1, [r3, #0]
 80052b6:	1dbb      	adds	r3, r7, #6
 80052b8:	8818      	ldrh	r0, [r3, #0]
 80052ba:	2300      	movs	r3, #0
 80052bc:	9302      	str	r3, [sp, #8]
 80052be:	2308      	movs	r3, #8
 80052c0:	18eb      	adds	r3, r5, r3
 80052c2:	19db      	adds	r3, r3, r7
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	2308      	movs	r3, #8
 80052ca:	18f3      	adds	r3, r6, r3
 80052cc:	19db      	adds	r3, r3, r7
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	0023      	movs	r3, r4
 80052d4:	f7ff fe86 	bl	8004fe4 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 80052d8:	1d3b      	adds	r3, r7, #4
 80052da:	881c      	ldrh	r4, [r3, #0]
 80052dc:	1cbb      	adds	r3, r7, #2
 80052de:	881a      	ldrh	r2, [r3, #0]
 80052e0:	003b      	movs	r3, r7
 80052e2:	8819      	ldrh	r1, [r3, #0]
 80052e4:	1cbb      	adds	r3, r7, #2
 80052e6:	8818      	ldrh	r0, [r3, #0]
 80052e8:	2300      	movs	r3, #0
 80052ea:	9302      	str	r3, [sp, #8]
 80052ec:	2308      	movs	r3, #8
 80052ee:	18eb      	adds	r3, r5, r3
 80052f0:	19db      	adds	r3, r3, r7
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	2308      	movs	r3, #8
 80052f8:	18f3      	adds	r3, r6, r3
 80052fa:	19db      	adds	r3, r3, r7
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	0023      	movs	r3, r4
 8005302:	f7ff fe6f 	bl	8004fe4 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 8005306:	003b      	movs	r3, r7
 8005308:	881c      	ldrh	r4, [r3, #0]
 800530a:	1dbb      	adds	r3, r7, #6
 800530c:	881a      	ldrh	r2, [r3, #0]
 800530e:	003b      	movs	r3, r7
 8005310:	8819      	ldrh	r1, [r3, #0]
 8005312:	1cbb      	adds	r3, r7, #2
 8005314:	8818      	ldrh	r0, [r3, #0]
 8005316:	2300      	movs	r3, #0
 8005318:	9302      	str	r3, [sp, #8]
 800531a:	2308      	movs	r3, #8
 800531c:	18ed      	adds	r5, r5, r3
 800531e:	19eb      	adds	r3, r5, r7
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	2308      	movs	r3, #8
 8005326:	18f3      	adds	r3, r6, r3
 8005328:	19db      	adds	r3, r3, r7
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	0023      	movs	r3, r4
 8005330:	f7ff fe58 	bl	8004fe4 <Paint_DrawLine>
 8005334:	e000      	b.n	8005338 <Paint_DrawRectangle+0x18c>
        return;
 8005336:	46c0      	nop			; (mov r8, r8)
    }
}
 8005338:	46bd      	mov	sp, r7
 800533a:	b005      	add	sp, #20
 800533c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	20000240 	.word	0x20000240

08005344 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8005344:	b5b0      	push	{r4, r5, r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	0004      	movs	r4, r0
 800534c:	0008      	movs	r0, r1
 800534e:	0011      	movs	r1, r2
 8005350:	607b      	str	r3, [r7, #4]
 8005352:	250e      	movs	r5, #14
 8005354:	197b      	adds	r3, r7, r5
 8005356:	1c22      	adds	r2, r4, #0
 8005358:	801a      	strh	r2, [r3, #0]
 800535a:	240c      	movs	r4, #12
 800535c:	193b      	adds	r3, r7, r4
 800535e:	1c02      	adds	r2, r0, #0
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	200b      	movs	r0, #11
 8005364:	183b      	adds	r3, r7, r0
 8005366:	1c0a      	adds	r2, r1, #0
 8005368:	701a      	strb	r2, [r3, #0]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800536a:	4b66      	ldr	r3, [pc, #408]	; (8005504 <Paint_DrawChar+0x1c0>)
 800536c:	889b      	ldrh	r3, [r3, #4]
 800536e:	b29b      	uxth	r3, r3
 8005370:	197a      	adds	r2, r7, r5
 8005372:	8812      	ldrh	r2, [r2, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d900      	bls.n	800537a <Paint_DrawChar+0x36>
 8005378:	e0c0      	b.n	80054fc <Paint_DrawChar+0x1b8>
 800537a:	4b62      	ldr	r3, [pc, #392]	; (8005504 <Paint_DrawChar+0x1c0>)
 800537c:	88db      	ldrh	r3, [r3, #6]
 800537e:	b29b      	uxth	r3, r3
 8005380:	193a      	adds	r2, r7, r4
 8005382:	8812      	ldrh	r2, [r2, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d900      	bls.n	800538a <Paint_DrawChar+0x46>
 8005388:	e0b8      	b.n	80054fc <Paint_DrawChar+0x1b8>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800538a:	183b      	adds	r3, r7, r0
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	3b20      	subs	r3, #32
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	88d2      	ldrh	r2, [r2, #6]
 8005394:	4353      	muls	r3, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	8892      	ldrh	r2, [r2, #4]
 800539a:	08d2      	lsrs	r2, r2, #3
 800539c:	b292      	uxth	r2, r2
 800539e:	0010      	movs	r0, r2
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	8892      	ldrh	r2, [r2, #4]
 80053a4:	2107      	movs	r1, #7
 80053a6:	400a      	ands	r2, r1
 80053a8:	b292      	uxth	r2, r2
 80053aa:	1e51      	subs	r1, r2, #1
 80053ac:	418a      	sbcs	r2, r1
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	1882      	adds	r2, r0, r2
 80053b2:	4353      	muls	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	18d3      	adds	r3, r2, r3
 80053be:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80053c0:	231e      	movs	r3, #30
 80053c2:	18fb      	adds	r3, r7, r3
 80053c4:	2200      	movs	r2, #0
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	e08f      	b.n	80054ea <Paint_DrawChar+0x1a6>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80053ca:	231c      	movs	r3, #28
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	2200      	movs	r2, #0
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	e072      	b.n	80054ba <Paint_DrawChar+0x176>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80053d4:	2330      	movs	r3, #48	; 0x30
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	4a4b      	ldr	r2, [pc, #300]	; (8005508 <Paint_DrawChar+0x1c4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d122      	bne.n	8005426 <Paint_DrawChar+0xe2>
                if (*ptr & (0x80 >> (Column % 8)))
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	0019      	movs	r1, r3
 80053e6:	201c      	movs	r0, #28
 80053e8:	183b      	adds	r3, r7, r0
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	2207      	movs	r2, #7
 80053ee:	4013      	ands	r3, r2
 80053f0:	2280      	movs	r2, #128	; 0x80
 80053f2:	411a      	asrs	r2, r3
 80053f4:	0013      	movs	r3, r2
 80053f6:	400b      	ands	r3, r1
 80053f8:	d04e      	beq.n	8005498 <Paint_DrawChar+0x154>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80053fa:	230e      	movs	r3, #14
 80053fc:	18fa      	adds	r2, r7, r3
 80053fe:	183b      	adds	r3, r7, r0
 8005400:	8812      	ldrh	r2, [r2, #0]
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	18d3      	adds	r3, r2, r3
 8005406:	b298      	uxth	r0, r3
 8005408:	230c      	movs	r3, #12
 800540a:	18fa      	adds	r2, r7, r3
 800540c:	231e      	movs	r3, #30
 800540e:	18fb      	adds	r3, r7, r3
 8005410:	8812      	ldrh	r2, [r2, #0]
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	18d3      	adds	r3, r2, r3
 8005416:	b299      	uxth	r1, r3
 8005418:	2334      	movs	r3, #52	; 0x34
 800541a:	18fb      	adds	r3, r7, r3
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	001a      	movs	r2, r3
 8005420:	f7ff fc1a 	bl	8004c58 <Paint_SetPixel>
 8005424:	e038      	b.n	8005498 <Paint_DrawChar+0x154>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	0019      	movs	r1, r3
 800542c:	201c      	movs	r0, #28
 800542e:	183b      	adds	r3, r7, r0
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	2207      	movs	r2, #7
 8005434:	4013      	ands	r3, r2
 8005436:	2280      	movs	r2, #128	; 0x80
 8005438:	411a      	asrs	r2, r3
 800543a:	0013      	movs	r3, r2
 800543c:	400b      	ands	r3, r1
 800543e:	d015      	beq.n	800546c <Paint_DrawChar+0x128>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8005440:	230e      	movs	r3, #14
 8005442:	18fa      	adds	r2, r7, r3
 8005444:	183b      	adds	r3, r7, r0
 8005446:	8812      	ldrh	r2, [r2, #0]
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	18d3      	adds	r3, r2, r3
 800544c:	b298      	uxth	r0, r3
 800544e:	230c      	movs	r3, #12
 8005450:	18fa      	adds	r2, r7, r3
 8005452:	231e      	movs	r3, #30
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	8812      	ldrh	r2, [r2, #0]
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	18d3      	adds	r3, r2, r3
 800545c:	b299      	uxth	r1, r3
 800545e:	2334      	movs	r3, #52	; 0x34
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	001a      	movs	r2, r3
 8005466:	f7ff fbf7 	bl	8004c58 <Paint_SetPixel>
 800546a:	e015      	b.n	8005498 <Paint_DrawChar+0x154>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800546c:	230e      	movs	r3, #14
 800546e:	18fa      	adds	r2, r7, r3
 8005470:	231c      	movs	r3, #28
 8005472:	18fb      	adds	r3, r7, r3
 8005474:	8812      	ldrh	r2, [r2, #0]
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	18d3      	adds	r3, r2, r3
 800547a:	b298      	uxth	r0, r3
 800547c:	230c      	movs	r3, #12
 800547e:	18fa      	adds	r2, r7, r3
 8005480:	231e      	movs	r3, #30
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	8812      	ldrh	r2, [r2, #0]
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	18d3      	adds	r3, r2, r3
 800548a:	b299      	uxth	r1, r3
 800548c:	2330      	movs	r3, #48	; 0x30
 800548e:	18fb      	adds	r3, r7, r3
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	001a      	movs	r2, r3
 8005494:	f7ff fbe0 	bl	8004c58 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8005498:	231c      	movs	r3, #28
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	2207      	movs	r2, #7
 80054a0:	4013      	ands	r3, r2
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b07      	cmp	r3, #7
 80054a6:	d102      	bne.n	80054ae <Paint_DrawChar+0x16a>
                ptr++;
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	3301      	adds	r3, #1
 80054ac:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80054ae:	211c      	movs	r1, #28
 80054b0:	187b      	adds	r3, r7, r1
 80054b2:	881a      	ldrh	r2, [r3, #0]
 80054b4:	187b      	adds	r3, r7, r1
 80054b6:	3201      	adds	r2, #1
 80054b8:	801a      	strh	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	889b      	ldrh	r3, [r3, #4]
 80054be:	221c      	movs	r2, #28
 80054c0:	18ba      	adds	r2, r7, r2
 80054c2:	8812      	ldrh	r2, [r2, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d200      	bcs.n	80054ca <Paint_DrawChar+0x186>
 80054c8:	e784      	b.n	80053d4 <Paint_DrawChar+0x90>
        }// Write a line
        if (Font->Width % 8 != 0)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	889b      	ldrh	r3, [r3, #4]
 80054ce:	2207      	movs	r2, #7
 80054d0:	4013      	ands	r3, r2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <Paint_DrawChar+0x19a>
            ptr++;
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	3301      	adds	r3, #1
 80054dc:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80054de:	211e      	movs	r1, #30
 80054e0:	187b      	adds	r3, r7, r1
 80054e2:	881a      	ldrh	r2, [r3, #0]
 80054e4:	187b      	adds	r3, r7, r1
 80054e6:	3201      	adds	r2, #1
 80054e8:	801a      	strh	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	88db      	ldrh	r3, [r3, #6]
 80054ee:	221e      	movs	r2, #30
 80054f0:	18ba      	adds	r2, r7, r2
 80054f2:	8812      	ldrh	r2, [r2, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d200      	bcs.n	80054fa <Paint_DrawChar+0x1b6>
 80054f8:	e767      	b.n	80053ca <Paint_DrawChar+0x86>
 80054fa:	e000      	b.n	80054fe <Paint_DrawChar+0x1ba>
        return;
 80054fc:	46c0      	nop			; (mov r8, r8)
    }// Write all
}
 80054fe:	46bd      	mov	sp, r7
 8005500:	b008      	add	sp, #32
 8005502:	bdb0      	pop	{r4, r5, r7, pc}
 8005504:	20000240 	.word	0x20000240
 8005508:	0000ffff 	.word	0x0000ffff

0800550c <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 800550c:	b5b0      	push	{r4, r5, r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af02      	add	r7, sp, #8
 8005512:	60ba      	str	r2, [r7, #8]
 8005514:	607b      	str	r3, [r7, #4]
 8005516:	240e      	movs	r4, #14
 8005518:	193b      	adds	r3, r7, r4
 800551a:	1c02      	adds	r2, r0, #0
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	200c      	movs	r0, #12
 8005520:	183b      	adds	r3, r7, r0
 8005522:	1c0a      	adds	r2, r1, #0
 8005524:	801a      	strh	r2, [r3, #0]
    UWORD Xpoint = Xstart;
 8005526:	2316      	movs	r3, #22
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	0021      	movs	r1, r4
 800552c:	187a      	adds	r2, r7, r1
 800552e:	8812      	ldrh	r2, [r2, #0]
 8005530:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 8005532:	2314      	movs	r3, #20
 8005534:	18fb      	adds	r3, r7, r3
 8005536:	183a      	adds	r2, r7, r0
 8005538:	8812      	ldrh	r2, [r2, #0]
 800553a:	801a      	strh	r2, [r3, #0]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800553c:	4b31      	ldr	r3, [pc, #196]	; (8005604 <Paint_DrawString_EN+0xf8>)
 800553e:	889b      	ldrh	r3, [r3, #4]
 8005540:	b29b      	uxth	r3, r3
 8005542:	187a      	adds	r2, r7, r1
 8005544:	8812      	ldrh	r2, [r2, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d858      	bhi.n	80055fc <Paint_DrawString_EN+0xf0>
 800554a:	4b2e      	ldr	r3, [pc, #184]	; (8005604 <Paint_DrawString_EN+0xf8>)
 800554c:	88db      	ldrh	r3, [r3, #6]
 800554e:	b29b      	uxth	r3, r3
 8005550:	183a      	adds	r2, r7, r0
 8005552:	8812      	ldrh	r2, [r2, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d851      	bhi.n	80055fc <Paint_DrawString_EN+0xf0>
        return;
    }

    while (* pString != '\0') {
 8005558:	e04b      	b.n	80055f2 <Paint_DrawString_EN+0xe6>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800555a:	2116      	movs	r1, #22
 800555c:	187b      	adds	r3, r7, r1
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	8892      	ldrh	r2, [r2, #4]
 8005564:	189b      	adds	r3, r3, r2
 8005566:	4a27      	ldr	r2, [pc, #156]	; (8005604 <Paint_DrawString_EN+0xf8>)
 8005568:	8892      	ldrh	r2, [r2, #4]
 800556a:	b292      	uxth	r2, r2
 800556c:	4293      	cmp	r3, r2
 800556e:	dd0c      	ble.n	800558a <Paint_DrawString_EN+0x7e>
            Xpoint = Xstart;
 8005570:	187b      	adds	r3, r7, r1
 8005572:	220e      	movs	r2, #14
 8005574:	18ba      	adds	r2, r7, r2
 8005576:	8812      	ldrh	r2, [r2, #0]
 8005578:	801a      	strh	r2, [r3, #0]
            Ypoint += Font->Height;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	88d9      	ldrh	r1, [r3, #6]
 800557e:	2214      	movs	r2, #20
 8005580:	18bb      	adds	r3, r7, r2
 8005582:	18ba      	adds	r2, r7, r2
 8005584:	8812      	ldrh	r2, [r2, #0]
 8005586:	188a      	adds	r2, r1, r2
 8005588:	801a      	strh	r2, [r3, #0]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800558a:	2114      	movs	r1, #20
 800558c:	187b      	adds	r3, r7, r1
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	88d2      	ldrh	r2, [r2, #6]
 8005594:	189b      	adds	r3, r3, r2
 8005596:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <Paint_DrawString_EN+0xf8>)
 8005598:	88d2      	ldrh	r2, [r2, #6]
 800559a:	b292      	uxth	r2, r2
 800559c:	4293      	cmp	r3, r2
 800559e:	dd0a      	ble.n	80055b6 <Paint_DrawString_EN+0xaa>
            Xpoint = Xstart;
 80055a0:	2316      	movs	r3, #22
 80055a2:	18fb      	adds	r3, r7, r3
 80055a4:	220e      	movs	r2, #14
 80055a6:	18ba      	adds	r2, r7, r2
 80055a8:	8812      	ldrh	r2, [r2, #0]
 80055aa:	801a      	strh	r2, [r3, #0]
            Ypoint = Ystart;
 80055ac:	187b      	adds	r3, r7, r1
 80055ae:	220c      	movs	r2, #12
 80055b0:	18ba      	adds	r2, r7, r2
 80055b2:	8812      	ldrh	r2, [r2, #0]
 80055b4:	801a      	strh	r2, [r3, #0]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	781a      	ldrb	r2, [r3, #0]
 80055ba:	687c      	ldr	r4, [r7, #4]
 80055bc:	2314      	movs	r3, #20
 80055be:	18fb      	adds	r3, r7, r3
 80055c0:	8819      	ldrh	r1, [r3, #0]
 80055c2:	2516      	movs	r5, #22
 80055c4:	197b      	adds	r3, r7, r5
 80055c6:	8818      	ldrh	r0, [r3, #0]
 80055c8:	232c      	movs	r3, #44	; 0x2c
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	9301      	str	r3, [sp, #4]
 80055d0:	2328      	movs	r3, #40	; 0x28
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	0023      	movs	r3, r4
 80055da:	f7ff feb3 	bl	8005344 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	3301      	adds	r3, #1
 80055e2:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8899      	ldrh	r1, [r3, #4]
 80055e8:	197b      	adds	r3, r7, r5
 80055ea:	197a      	adds	r2, r7, r5
 80055ec:	8812      	ldrh	r2, [r2, #0]
 80055ee:	188a      	adds	r2, r1, r2
 80055f0:	801a      	strh	r2, [r3, #0]
    while (* pString != '\0') {
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1af      	bne.n	800555a <Paint_DrawString_EN+0x4e>
 80055fa:	e000      	b.n	80055fe <Paint_DrawString_EN+0xf2>
        return;
 80055fc:	46c0      	nop			; (mov r8, r8)
    }
}
 80055fe:	46bd      	mov	sp, r7
 8005600:	b006      	add	sp, #24
 8005602:	bdb0      	pop	{r4, r5, r7, pc}
 8005604:	20000240 	.word	0x20000240

08005608 <Paint_DrawNum>:
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8005608:	b5b0      	push	{r4, r5, r7, lr}
 800560a:	4c5f      	ldr	r4, [pc, #380]	; (8005788 <Paint_DrawNum+0x180>)
 800560c:	44a5      	add	sp, r4
 800560e:	af02      	add	r7, sp, #8
 8005610:	60ba      	str	r2, [r7, #8]
 8005612:	607b      	str	r3, [r7, #4]
 8005614:	4b5d      	ldr	r3, [pc, #372]	; (800578c <Paint_DrawNum+0x184>)
 8005616:	2486      	movs	r4, #134	; 0x86
 8005618:	00a4      	lsls	r4, r4, #2
 800561a:	191b      	adds	r3, r3, r4
 800561c:	19db      	adds	r3, r3, r7
 800561e:	1c02      	adds	r2, r0, #0
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	4b5b      	ldr	r3, [pc, #364]	; (8005790 <Paint_DrawNum+0x188>)
 8005624:	0020      	movs	r0, r4
 8005626:	181b      	adds	r3, r3, r0
 8005628:	19db      	adds	r3, r3, r7
 800562a:	1c0a      	adds	r2, r1, #0
 800562c:	801a      	strh	r2, [r3, #0]
    int16_t Num_Bit = 0, Str_Bit = 0;
 800562e:	4b59      	ldr	r3, [pc, #356]	; (8005794 <Paint_DrawNum+0x18c>)
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	2200      	movs	r2, #0
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	2385      	movs	r3, #133	; 0x85
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	2200      	movs	r2, #0
 800563e:	801a      	strh	r2, [r3, #0]
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 8005640:	4b55      	ldr	r3, [pc, #340]	; (8005798 <Paint_DrawNum+0x190>)
 8005642:	0004      	movs	r4, r0
 8005644:	191b      	adds	r3, r3, r4
 8005646:	19db      	adds	r3, r3, r7
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	3304      	adds	r3, #4
 800564e:	22fb      	movs	r2, #251	; 0xfb
 8005650:	2100      	movs	r1, #0
 8005652:	0018      	movs	r0, r3
 8005654:	f000 fc78 	bl	8005f48 <memset>
 8005658:	4b50      	ldr	r3, [pc, #320]	; (800579c <Paint_DrawNum+0x194>)
 800565a:	191b      	adds	r3, r3, r4
 800565c:	19db      	adds	r3, r3, r7
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	3304      	adds	r3, #4
 8005664:	22fb      	movs	r2, #251	; 0xfb
 8005666:	2100      	movs	r1, #0
 8005668:	0018      	movs	r0, r3
 800566a:	f000 fc6d 	bl	8005f48 <memset>
    uint8_t *pStr = Str_Array;
 800566e:	2388      	movs	r3, #136	; 0x88
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	2284      	movs	r2, #132	; 0x84
 8005676:	0092      	lsls	r2, r2, #2
 8005678:	18ba      	adds	r2, r7, r2
 800567a:	6013      	str	r3, [r2, #0]

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800567c:	4b48      	ldr	r3, [pc, #288]	; (80057a0 <Paint_DrawNum+0x198>)
 800567e:	889b      	ldrh	r3, [r3, #4]
 8005680:	b29b      	uxth	r3, r3
 8005682:	4a42      	ldr	r2, [pc, #264]	; (800578c <Paint_DrawNum+0x184>)
 8005684:	1912      	adds	r2, r2, r4
 8005686:	19d2      	adds	r2, r2, r7
 8005688:	8812      	ldrh	r2, [r2, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d900      	bls.n	8005690 <Paint_DrawNum+0x88>
 800568e:	e075      	b.n	800577c <Paint_DrawNum+0x174>
 8005690:	4b43      	ldr	r3, [pc, #268]	; (80057a0 <Paint_DrawNum+0x198>)
 8005692:	88db      	ldrh	r3, [r3, #6]
 8005694:	b29b      	uxth	r3, r3
 8005696:	4a3e      	ldr	r2, [pc, #248]	; (8005790 <Paint_DrawNum+0x188>)
 8005698:	1912      	adds	r2, r2, r4
 800569a:	19d2      	adds	r2, r2, r7
 800569c:	8812      	ldrh	r2, [r2, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d86c      	bhi.n	800577c <Paint_DrawNum+0x174>
        return;
    }

    //Converts a number to a string
     do{
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	210a      	movs	r1, #10
 80056a6:	0018      	movs	r0, r3
 80056a8:	f7fa fe9a 	bl	80003e0 <__aeabi_idivmod>
 80056ac:	000b      	movs	r3, r1
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	4838      	ldr	r0, [pc, #224]	; (8005794 <Paint_DrawNum+0x18c>)
 80056b2:	183b      	adds	r3, r7, r0
 80056b4:	2100      	movs	r1, #0
 80056b6:	5e5b      	ldrsh	r3, [r3, r1]
 80056b8:	3230      	adds	r2, #48	; 0x30
 80056ba:	b2d1      	uxtb	r1, r2
 80056bc:	4a37      	ldr	r2, [pc, #220]	; (800579c <Paint_DrawNum+0x194>)
 80056be:	2486      	movs	r4, #134	; 0x86
 80056c0:	00a4      	lsls	r4, r4, #2
 80056c2:	1912      	adds	r2, r2, r4
 80056c4:	19d2      	adds	r2, r2, r7
 80056c6:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 80056c8:	183b      	adds	r3, r7, r0
 80056ca:	2200      	movs	r2, #0
 80056cc:	5e9b      	ldrsh	r3, [r3, r2]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3301      	adds	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	183b      	adds	r3, r7, r0
 80056d6:	801a      	strh	r2, [r3, #0]
        Nummber /= 10;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	210a      	movs	r1, #10
 80056dc:	0018      	movs	r0, r3
 80056de:	f7fa fd99 	bl	8000214 <__divsi3>
 80056e2:	0003      	movs	r3, r0
 80056e4:	60bb      	str	r3, [r7, #8]
    }while (Nummber);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1da      	bne.n	80056a2 <Paint_DrawNum+0x9a>

    //The string is inverted
    while (Num_Bit > 0) {
 80056ec:	e023      	b.n	8005736 <Paint_DrawNum+0x12e>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 80056ee:	4829      	ldr	r0, [pc, #164]	; (8005794 <Paint_DrawNum+0x18c>)
 80056f0:	183b      	adds	r3, r7, r0
 80056f2:	2200      	movs	r2, #0
 80056f4:	5e9b      	ldrsh	r3, [r3, r2]
 80056f6:	1e5a      	subs	r2, r3, #1
 80056f8:	2485      	movs	r4, #133	; 0x85
 80056fa:	00a4      	lsls	r4, r4, #2
 80056fc:	193b      	adds	r3, r7, r4
 80056fe:	2100      	movs	r1, #0
 8005700:	5e5b      	ldrsh	r3, [r3, r1]
 8005702:	4926      	ldr	r1, [pc, #152]	; (800579c <Paint_DrawNum+0x194>)
 8005704:	2586      	movs	r5, #134	; 0x86
 8005706:	00ad      	lsls	r5, r5, #2
 8005708:	1949      	adds	r1, r1, r5
 800570a:	19c9      	adds	r1, r1, r7
 800570c:	5c89      	ldrb	r1, [r1, r2]
 800570e:	4a22      	ldr	r2, [pc, #136]	; (8005798 <Paint_DrawNum+0x190>)
 8005710:	1952      	adds	r2, r2, r5
 8005712:	19d2      	adds	r2, r2, r7
 8005714:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 8005716:	193b      	adds	r3, r7, r4
 8005718:	2200      	movs	r2, #0
 800571a:	5e9b      	ldrsh	r3, [r3, r2]
 800571c:	b29b      	uxth	r3, r3
 800571e:	3301      	adds	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	193b      	adds	r3, r7, r4
 8005724:	801a      	strh	r2, [r3, #0]
        Num_Bit --;
 8005726:	183b      	adds	r3, r7, r0
 8005728:	2200      	movs	r2, #0
 800572a:	5e9b      	ldrsh	r3, [r3, r2]
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	183b      	adds	r3, r7, r0
 8005734:	801a      	strh	r2, [r3, #0]
    while (Num_Bit > 0) {
 8005736:	4b17      	ldr	r3, [pc, #92]	; (8005794 <Paint_DrawNum+0x18c>)
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	2200      	movs	r2, #0
 800573c:	5e9b      	ldrsh	r3, [r3, r2]
 800573e:	2b00      	cmp	r3, #0
 8005740:	dcd5      	bgt.n	80056ee <Paint_DrawNum+0xe6>
    }
    
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 8005742:	687c      	ldr	r4, [r7, #4]
 8005744:	2384      	movs	r3, #132	; 0x84
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	18fb      	adds	r3, r7, r3
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	4b10      	ldr	r3, [pc, #64]	; (8005790 <Paint_DrawNum+0x188>)
 800574e:	2086      	movs	r0, #134	; 0x86
 8005750:	0080      	lsls	r0, r0, #2
 8005752:	181b      	adds	r3, r3, r0
 8005754:	19db      	adds	r3, r3, r7
 8005756:	8819      	ldrh	r1, [r3, #0]
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <Paint_DrawNum+0x184>)
 800575a:	181b      	adds	r3, r3, r0
 800575c:	19db      	adds	r3, r3, r7
 800575e:	8818      	ldrh	r0, [r3, #0]
 8005760:	238b      	movs	r3, #139	; 0x8b
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	238a      	movs	r3, #138	; 0x8a
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	0023      	movs	r3, r4
 8005776:	f7ff fec9 	bl	800550c <Paint_DrawString_EN>
 800577a:	e000      	b.n	800577e <Paint_DrawNum+0x176>
        return;
 800577c:	46c0      	nop			; (mov r8, r8)
}
 800577e:	46bd      	mov	sp, r7
 8005780:	2386      	movs	r3, #134	; 0x86
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	449d      	add	sp, r3
 8005786:	bdb0      	pop	{r4, r5, r7, pc}
 8005788:	fffffde0 	.word	0xfffffde0
 800578c:	fffffdf6 	.word	0xfffffdf6
 8005790:	fffffdf4 	.word	0xfffffdf4
 8005794:	00000216 	.word	0x00000216
 8005798:	fffffef8 	.word	0xfffffef8
 800579c:	fffffdf8 	.word	0xfffffdf8
 80057a0:	20000240 	.word	0x20000240

080057a4 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
	LCD_1IN28_CS_0;
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	480f      	ldr	r0, [pc, #60]	; (80057ec <LCD_1IN28_Reset+0x48>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	0019      	movs	r1, r3
 80057b2:	f7fc fc59 	bl	8002068 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80057b6:	2064      	movs	r0, #100	; 0x64
 80057b8:	f7fb fbf0 	bl	8000f9c <HAL_Delay>
    LCD_1IN28_RST_0;
 80057bc:	23a0      	movs	r3, #160	; 0xa0
 80057be:	05db      	lsls	r3, r3, #23
 80057c0:	2200      	movs	r2, #0
 80057c2:	2108      	movs	r1, #8
 80057c4:	0018      	movs	r0, r3
 80057c6:	f7fc fc4f 	bl	8002068 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80057ca:	2064      	movs	r0, #100	; 0x64
 80057cc:	f7fb fbe6 	bl	8000f9c <HAL_Delay>
    LCD_1IN28_RST_1;
 80057d0:	23a0      	movs	r3, #160	; 0xa0
 80057d2:	05db      	lsls	r3, r3, #23
 80057d4:	2201      	movs	r2, #1
 80057d6:	2108      	movs	r1, #8
 80057d8:	0018      	movs	r0, r3
 80057da:	f7fc fc45 	bl	8002068 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80057de:	2064      	movs	r0, #100	; 0x64
 80057e0:	f7fb fbdc 	bl	8000f9c <HAL_Delay>
}
 80057e4:	46c0      	nop			; (mov r8, r8)
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	50000400 	.word	0x50000400

080057f0 <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	0002      	movs	r2, r0
 80057f8:	1dfb      	adds	r3, r7, #7
 80057fa:	701a      	strb	r2, [r3, #0]
    LCD_1IN28_CS_0;
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	480d      	ldr	r0, [pc, #52]	; (8005838 <LCD_1IN28_SendCommand+0x48>)
 8005802:	2200      	movs	r2, #0
 8005804:	0019      	movs	r1, r3
 8005806:	f7fc fc2f 	bl	8002068 <HAL_GPIO_WritePin>
    LCD_1IN28_DC_0;
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	480b      	ldr	r0, [pc, #44]	; (800583c <LCD_1IN28_SendCommand+0x4c>)
 8005810:	2200      	movs	r2, #0
 8005812:	0019      	movs	r1, r3
 8005814:	f7fc fc28 	bl	8002068 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 8005818:	1dfb      	adds	r3, r7, #7
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	0018      	movs	r0, r3
 800581e:	f7ff f977 	bl	8004b10 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4804      	ldr	r0, [pc, #16]	; (8005838 <LCD_1IN28_SendCommand+0x48>)
 8005828:	2201      	movs	r2, #1
 800582a:	0019      	movs	r1, r3
 800582c:	f7fc fc1c 	bl	8002068 <HAL_GPIO_WritePin>
}
 8005830:	46c0      	nop			; (mov r8, r8)
 8005832:	46bd      	mov	sp, r7
 8005834:	b002      	add	sp, #8
 8005836:	bd80      	pop	{r7, pc}
 8005838:	50000400 	.word	0x50000400
 800583c:	50000800 	.word	0x50000800

08005840 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	0002      	movs	r2, r0
 8005848:	1dfb      	adds	r3, r7, #7
 800584a:	701a      	strb	r2, [r3, #0]
    LCD_1IN28_CS_0;
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	480d      	ldr	r0, [pc, #52]	; (8005888 <LCD_1IN28_SendData_8Bit+0x48>)
 8005852:	2200      	movs	r2, #0
 8005854:	0019      	movs	r1, r3
 8005856:	f7fc fc07 	bl	8002068 <HAL_GPIO_WritePin>
    LCD_1IN28_DC_1;
 800585a:	2380      	movs	r3, #128	; 0x80
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	480b      	ldr	r0, [pc, #44]	; (800588c <LCD_1IN28_SendData_8Bit+0x4c>)
 8005860:	2201      	movs	r2, #1
 8005862:	0019      	movs	r1, r3
 8005864:	f7fc fc00 	bl	8002068 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 8005868:	1dfb      	adds	r3, r7, #7
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	0018      	movs	r0, r3
 800586e:	f7ff f94f 	bl	8004b10 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8005872:	2380      	movs	r3, #128	; 0x80
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4804      	ldr	r0, [pc, #16]	; (8005888 <LCD_1IN28_SendData_8Bit+0x48>)
 8005878:	2201      	movs	r2, #1
 800587a:	0019      	movs	r1, r3
 800587c:	f7fc fbf4 	bl	8002068 <HAL_GPIO_WritePin>
}
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	b002      	add	sp, #8
 8005886:	bd80      	pop	{r7, pc}
 8005888:	50000400 	.word	0x50000400
 800588c:	50000800 	.word	0x50000800

08005890 <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	0002      	movs	r2, r0
 8005898:	1dbb      	adds	r3, r7, #6
 800589a:	801a      	strh	r2, [r3, #0]
    LCD_1IN28_CS_0;
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4812      	ldr	r0, [pc, #72]	; (80058ec <LCD_1IN28_SendData_16Bit+0x5c>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	0019      	movs	r1, r3
 80058a6:	f7fc fbdf 	bl	8002068 <HAL_GPIO_WritePin>
    LCD_1IN28_DC_1;
 80058aa:	2380      	movs	r3, #128	; 0x80
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	4810      	ldr	r0, [pc, #64]	; (80058f0 <LCD_1IN28_SendData_16Bit+0x60>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	0019      	movs	r1, r3
 80058b4:	f7fc fbd8 	bl	8002068 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data >> 8);
 80058b8:	1dbb      	adds	r3, r7, #6
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	0a1b      	lsrs	r3, r3, #8
 80058be:	b29b      	uxth	r3, r3
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	0018      	movs	r0, r3
 80058c4:	f7ff f924 	bl	8004b10 <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data);
 80058c8:	1dbb      	adds	r3, r7, #6
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	0018      	movs	r0, r3
 80058d0:	f7ff f91e 	bl	8004b10 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 80058d4:	2380      	movs	r3, #128	; 0x80
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4804      	ldr	r0, [pc, #16]	; (80058ec <LCD_1IN28_SendData_16Bit+0x5c>)
 80058da:	2201      	movs	r2, #1
 80058dc:	0019      	movs	r1, r3
 80058de:	f7fc fbc3 	bl	8002068 <HAL_GPIO_WritePin>
}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b002      	add	sp, #8
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	50000400 	.word	0x50000400
 80058f0:	50000800 	.word	0x50000800

080058f4 <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  LCD_1IN28_SendCommand(0xEF);
 80058f8:	20ef      	movs	r0, #239	; 0xef
 80058fa:	f7ff ff79 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 80058fe:	20eb      	movs	r0, #235	; 0xeb
 8005900:	f7ff ff76 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8005904:	2014      	movs	r0, #20
 8005906:	f7ff ff9b 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0xFE);			 
 800590a:	20fe      	movs	r0, #254	; 0xfe
 800590c:	f7ff ff70 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 8005910:	20ef      	movs	r0, #239	; 0xef
 8005912:	f7ff ff6d 	bl	80057f0 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 8005916:	20eb      	movs	r0, #235	; 0xeb
 8005918:	f7ff ff6a 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 800591c:	2014      	movs	r0, #20
 800591e:	f7ff ff8f 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 8005922:	2084      	movs	r0, #132	; 0x84
 8005924:	f7ff ff64 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 8005928:	2040      	movs	r0, #64	; 0x40
 800592a:	f7ff ff89 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 800592e:	2085      	movs	r0, #133	; 0x85
 8005930:	f7ff ff5e 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8005934:	20ff      	movs	r0, #255	; 0xff
 8005936:	f7ff ff83 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 800593a:	2086      	movs	r0, #134	; 0x86
 800593c:	f7ff ff58 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8005940:	20ff      	movs	r0, #255	; 0xff
 8005942:	f7ff ff7d 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 8005946:	2087      	movs	r0, #135	; 0x87
 8005948:	f7ff ff52 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 800594c:	20ff      	movs	r0, #255	; 0xff
 800594e:	f7ff ff77 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 8005952:	2088      	movs	r0, #136	; 0x88
 8005954:	f7ff ff4c 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 8005958:	200a      	movs	r0, #10
 800595a:	f7ff ff71 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 800595e:	2089      	movs	r0, #137	; 0x89
 8005960:	f7ff ff46 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 8005964:	2021      	movs	r0, #33	; 0x21
 8005966:	f7ff ff6b 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 800596a:	208a      	movs	r0, #138	; 0x8a
 800596c:	f7ff ff40 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 8005970:	2000      	movs	r0, #0
 8005972:	f7ff ff65 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 8005976:	208b      	movs	r0, #139	; 0x8b
 8005978:	f7ff ff3a 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 800597c:	2080      	movs	r0, #128	; 0x80
 800597e:	f7ff ff5f 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 8005982:	208c      	movs	r0, #140	; 0x8c
 8005984:	f7ff ff34 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8005988:	2001      	movs	r0, #1
 800598a:	f7ff ff59 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 800598e:	208d      	movs	r0, #141	; 0x8d
 8005990:	f7ff ff2e 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8005994:	2001      	movs	r0, #1
 8005996:	f7ff ff53 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 800599a:	208e      	movs	r0, #142	; 0x8e
 800599c:	f7ff ff28 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80059a0:	20ff      	movs	r0, #255	; 0xff
 80059a2:	f7ff ff4d 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 80059a6:	208f      	movs	r0, #143	; 0x8f
 80059a8:	f7ff ff22 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80059ac:	20ff      	movs	r0, #255	; 0xff
 80059ae:	f7ff ff47 	bl	8005840 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 80059b2:	20b6      	movs	r0, #182	; 0xb6
 80059b4:	f7ff ff1c 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80059b8:	2000      	movs	r0, #0
 80059ba:	f7ff ff41 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 80059be:	2020      	movs	r0, #32
 80059c0:	f7ff ff3e 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 80059c4:	2036      	movs	r0, #54	; 0x36
 80059c6:	f7ff ff13 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 80059ca:	2008      	movs	r0, #8
 80059cc:	f7ff ff38 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 80059d0:	203a      	movs	r0, #58	; 0x3a
 80059d2:	f7ff ff0d 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 80059d6:	2005      	movs	r0, #5
 80059d8:	f7ff ff32 	bl	8005840 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 80059dc:	2090      	movs	r0, #144	; 0x90
 80059de:	f7ff ff07 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 80059e2:	2008      	movs	r0, #8
 80059e4:	f7ff ff2c 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80059e8:	2008      	movs	r0, #8
 80059ea:	f7ff ff29 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80059ee:	2008      	movs	r0, #8
 80059f0:	f7ff ff26 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 80059f4:	2008      	movs	r0, #8
 80059f6:	f7ff ff23 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 80059fa:	20bd      	movs	r0, #189	; 0xbd
 80059fc:	f7ff fef8 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 8005a00:	2006      	movs	r0, #6
 8005a02:	f7ff ff1d 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 8005a06:	20bc      	movs	r0, #188	; 0xbc
 8005a08:	f7ff fef2 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	f7ff ff17 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 8005a12:	20ff      	movs	r0, #255	; 0xff
 8005a14:	f7ff feec 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8005a18:	2060      	movs	r0, #96	; 0x60
 8005a1a:	f7ff ff11 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8005a1e:	2001      	movs	r0, #1
 8005a20:	f7ff ff0e 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8005a24:	2004      	movs	r0, #4
 8005a26:	f7ff ff0b 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 8005a2a:	20c3      	movs	r0, #195	; 0xc3
 8005a2c:	f7ff fee0 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8005a30:	2013      	movs	r0, #19
 8005a32:	f7ff ff05 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 8005a36:	20c4      	movs	r0, #196	; 0xc4
 8005a38:	f7ff feda 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8005a3c:	2013      	movs	r0, #19
 8005a3e:	f7ff feff 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 8005a42:	20c9      	movs	r0, #201	; 0xc9
 8005a44:	f7ff fed4 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8005a48:	2022      	movs	r0, #34	; 0x22
 8005a4a:	f7ff fef9 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 8005a4e:	20be      	movs	r0, #190	; 0xbe
 8005a50:	f7ff fece 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 8005a54:	2011      	movs	r0, #17
 8005a56:	f7ff fef3 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 8005a5a:	20e1      	movs	r0, #225	; 0xe1
 8005a5c:	f7ff fec8 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8005a60:	2010      	movs	r0, #16
 8005a62:	f7ff feed 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8005a66:	200e      	movs	r0, #14
 8005a68:	f7ff feea 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8005a6c:	20df      	movs	r0, #223	; 0xdf
 8005a6e:	f7ff febf 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 8005a72:	2021      	movs	r0, #33	; 0x21
 8005a74:	f7ff fee4 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8005a78:	200c      	movs	r0, #12
 8005a7a:	f7ff fee1 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 8005a7e:	2002      	movs	r0, #2
 8005a80:	f7ff fede 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 8005a84:	20f0      	movs	r0, #240	; 0xf0
 8005a86:	f7ff feb3 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8005a8a:	2045      	movs	r0, #69	; 0x45
 8005a8c:	f7ff fed8 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8005a90:	2009      	movs	r0, #9
 8005a92:	f7ff fed5 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8005a96:	2008      	movs	r0, #8
 8005a98:	f7ff fed2 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8005a9c:	2008      	movs	r0, #8
 8005a9e:	f7ff fecf 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 8005aa2:	2026      	movs	r0, #38	; 0x26
 8005aa4:	f7ff fecc 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8005aa8:	202a      	movs	r0, #42	; 0x2a
 8005aaa:	f7ff fec9 	bl	8005840 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 8005aae:	20f1      	movs	r0, #241	; 0xf1
 8005ab0:	f7ff fe9e 	bl	80057f0 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8005ab4:	2043      	movs	r0, #67	; 0x43
 8005ab6:	f7ff fec3 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8005aba:	2070      	movs	r0, #112	; 0x70
 8005abc:	f7ff fec0 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8005ac0:	2072      	movs	r0, #114	; 0x72
 8005ac2:	f7ff febd 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8005ac6:	2036      	movs	r0, #54	; 0x36
 8005ac8:	f7ff feba 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 8005acc:	2037      	movs	r0, #55	; 0x37
 8005ace:	f7ff feb7 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8005ad2:	206f      	movs	r0, #111	; 0x6f
 8005ad4:	f7ff feb4 	bl	8005840 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8005ad8:	20f2      	movs	r0, #242	; 0xf2
 8005ada:	f7ff fe89 	bl	80057f0 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 8005ade:	2045      	movs	r0, #69	; 0x45
 8005ae0:	f7ff feae 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8005ae4:	2009      	movs	r0, #9
 8005ae6:	f7ff feab 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8005aea:	2008      	movs	r0, #8
 8005aec:	f7ff fea8 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8005af0:	2008      	movs	r0, #8
 8005af2:	f7ff fea5 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8005af6:	2026      	movs	r0, #38	; 0x26
 8005af8:	f7ff fea2 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8005afc:	202a      	movs	r0, #42	; 0x2a
 8005afe:	f7ff fe9f 	bl	8005840 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 8005b02:	20f3      	movs	r0, #243	; 0xf3
 8005b04:	f7ff fe74 	bl	80057f0 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8005b08:	2043      	movs	r0, #67	; 0x43
 8005b0a:	f7ff fe99 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8005b0e:	2070      	movs	r0, #112	; 0x70
 8005b10:	f7ff fe96 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8005b14:	2072      	movs	r0, #114	; 0x72
 8005b16:	f7ff fe93 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8005b1a:	2036      	movs	r0, #54	; 0x36
 8005b1c:	f7ff fe90 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 8005b20:	2037      	movs	r0, #55	; 0x37
 8005b22:	f7ff fe8d 	bl	8005840 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8005b26:	206f      	movs	r0, #111	; 0x6f
 8005b28:	f7ff fe8a 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8005b2c:	20ed      	movs	r0, #237	; 0xed
 8005b2e:	f7ff fe5f 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 8005b32:	201b      	movs	r0, #27
 8005b34:	f7ff fe84 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8005b38:	200b      	movs	r0, #11
 8005b3a:	f7ff fe81 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 8005b3e:	20ae      	movs	r0, #174	; 0xae
 8005b40:	f7ff fe56 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8005b44:	2077      	movs	r0, #119	; 0x77
 8005b46:	f7ff fe7b 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8005b4a:	20cd      	movs	r0, #205	; 0xcd
 8005b4c:	f7ff fe50 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 8005b50:	2063      	movs	r0, #99	; 0x63
 8005b52:	f7ff fe75 	bl	8005840 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 8005b56:	2070      	movs	r0, #112	; 0x70
 8005b58:	f7ff fe4a 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8005b5c:	2007      	movs	r0, #7
 8005b5e:	f7ff fe6f 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8005b62:	2007      	movs	r0, #7
 8005b64:	f7ff fe6c 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8005b68:	2004      	movs	r0, #4
 8005b6a:	f7ff fe69 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 8005b6e:	200e      	movs	r0, #14
 8005b70:	f7ff fe66 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 8005b74:	200f      	movs	r0, #15
 8005b76:	f7ff fe63 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8005b7a:	2009      	movs	r0, #9
 8005b7c:	f7ff fe60 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8005b80:	2007      	movs	r0, #7
 8005b82:	f7ff fe5d 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8005b86:	2008      	movs	r0, #8
 8005b88:	f7ff fe5a 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8005b8c:	2003      	movs	r0, #3
 8005b8e:	f7ff fe57 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 8005b92:	20e8      	movs	r0, #232	; 0xe8
 8005b94:	f7ff fe2c 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8005b98:	2034      	movs	r0, #52	; 0x34
 8005b9a:	f7ff fe51 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 8005b9e:	2062      	movs	r0, #98	; 0x62
 8005ba0:	f7ff fe26 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8005ba4:	2018      	movs	r0, #24
 8005ba6:	f7ff fe4b 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 8005baa:	200d      	movs	r0, #13
 8005bac:	f7ff fe48 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8005bb0:	2071      	movs	r0, #113	; 0x71
 8005bb2:	f7ff fe45 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8005bb6:	20ed      	movs	r0, #237	; 0xed
 8005bb8:	f7ff fe42 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8005bbc:	2070      	movs	r0, #112	; 0x70
 8005bbe:	f7ff fe3f 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8005bc2:	2070      	movs	r0, #112	; 0x70
 8005bc4:	f7ff fe3c 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8005bc8:	2018      	movs	r0, #24
 8005bca:	f7ff fe39 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 8005bce:	200f      	movs	r0, #15
 8005bd0:	f7ff fe36 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8005bd4:	2071      	movs	r0, #113	; 0x71
 8005bd6:	f7ff fe33 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8005bda:	20ef      	movs	r0, #239	; 0xef
 8005bdc:	f7ff fe30 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8005be0:	2070      	movs	r0, #112	; 0x70
 8005be2:	f7ff fe2d 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8005be6:	2070      	movs	r0, #112	; 0x70
 8005be8:	f7ff fe2a 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 8005bec:	2063      	movs	r0, #99	; 0x63
 8005bee:	f7ff fdff 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8005bf2:	2018      	movs	r0, #24
 8005bf4:	f7ff fe24 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8005bf8:	2011      	movs	r0, #17
 8005bfa:	f7ff fe21 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8005bfe:	2071      	movs	r0, #113	; 0x71
 8005c00:	f7ff fe1e 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8005c04:	20f1      	movs	r0, #241	; 0xf1
 8005c06:	f7ff fe1b 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8005c0a:	2070      	movs	r0, #112	; 0x70
 8005c0c:	f7ff fe18 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8005c10:	2070      	movs	r0, #112	; 0x70
 8005c12:	f7ff fe15 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8005c16:	2018      	movs	r0, #24
 8005c18:	f7ff fe12 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8005c1c:	2013      	movs	r0, #19
 8005c1e:	f7ff fe0f 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8005c22:	2071      	movs	r0, #113	; 0x71
 8005c24:	f7ff fe0c 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8005c28:	20f3      	movs	r0, #243	; 0xf3
 8005c2a:	f7ff fe09 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8005c2e:	2070      	movs	r0, #112	; 0x70
 8005c30:	f7ff fe06 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8005c34:	2070      	movs	r0, #112	; 0x70
 8005c36:	f7ff fe03 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8005c3a:	2064      	movs	r0, #100	; 0x64
 8005c3c:	f7ff fdd8 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 8005c40:	2028      	movs	r0, #40	; 0x28
 8005c42:	f7ff fdfd 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8005c46:	2029      	movs	r0, #41	; 0x29
 8005c48:	f7ff fdfa 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8005c4c:	20f1      	movs	r0, #241	; 0xf1
 8005c4e:	f7ff fdf7 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8005c52:	2001      	movs	r0, #1
 8005c54:	f7ff fdf4 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8005c58:	20f1      	movs	r0, #241	; 0xf1
 8005c5a:	f7ff fdf1 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005c5e:	2000      	movs	r0, #0
 8005c60:	f7ff fdee 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8005c64:	2007      	movs	r0, #7
 8005c66:	f7ff fdeb 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8005c6a:	2066      	movs	r0, #102	; 0x66
 8005c6c:	f7ff fdc0 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 8005c70:	203c      	movs	r0, #60	; 0x3c
 8005c72:	f7ff fde5 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005c76:	2000      	movs	r0, #0
 8005c78:	f7ff fde2 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8005c7c:	20cd      	movs	r0, #205	; 0xcd
 8005c7e:	f7ff fddf 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 8005c82:	2067      	movs	r0, #103	; 0x67
 8005c84:	f7ff fddc 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8005c88:	2045      	movs	r0, #69	; 0x45
 8005c8a:	f7ff fdd9 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8005c8e:	2045      	movs	r0, #69	; 0x45
 8005c90:	f7ff fdd6 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8005c94:	2010      	movs	r0, #16
 8005c96:	f7ff fdd3 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	f7ff fdd0 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f7ff fdcd 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	f7ff fdca 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 8005cac:	2067      	movs	r0, #103	; 0x67
 8005cae:	f7ff fd9f 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	f7ff fdc4 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8005cb8:	203c      	movs	r0, #60	; 0x3c
 8005cba:	f7ff fdc1 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	f7ff fdbe 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	f7ff fdbb 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005cca:	2000      	movs	r0, #0
 8005ccc:	f7ff fdb8 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	f7ff fdb5 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8005cd6:	2054      	movs	r0, #84	; 0x54
 8005cd8:	f7ff fdb2 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8005cdc:	2010      	movs	r0, #16
 8005cde:	f7ff fdaf 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 8005ce2:	2032      	movs	r0, #50	; 0x32
 8005ce4:	f7ff fdac 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8005ce8:	2098      	movs	r0, #152	; 0x98
 8005cea:	f7ff fda9 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 8005cee:	2074      	movs	r0, #116	; 0x74
 8005cf0:	f7ff fd7e 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 8005cf4:	2010      	movs	r0, #16
 8005cf6:	f7ff fda3 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 8005cfa:	2085      	movs	r0, #133	; 0x85
 8005cfc:	f7ff fda0 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 8005d00:	2080      	movs	r0, #128	; 0x80
 8005d02:	f7ff fd9d 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8005d06:	2000      	movs	r0, #0
 8005d08:	f7ff fd9a 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	f7ff fd97 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 8005d12:	204e      	movs	r0, #78	; 0x4e
 8005d14:	f7ff fd94 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8005d18:	2000      	movs	r0, #0
 8005d1a:	f7ff fd91 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0x98);			
 8005d1e:	2098      	movs	r0, #152	; 0x98
 8005d20:	f7ff fd66 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8005d24:	203e      	movs	r0, #62	; 0x3e
 8005d26:	f7ff fd8b 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8005d2a:	2007      	movs	r0, #7
 8005d2c:	f7ff fd88 	bl	8005840 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 8005d30:	2035      	movs	r0, #53	; 0x35
 8005d32:	f7ff fd5d 	bl	80057f0 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8005d36:	2021      	movs	r0, #33	; 0x21
 8005d38:	f7ff fd5a 	bl	80057f0 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8005d3c:	2011      	movs	r0, #17
 8005d3e:	f7ff fd57 	bl	80057f0 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 8005d42:	2078      	movs	r0, #120	; 0x78
 8005d44:	f7fb f92a 	bl	8000f9c <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8005d48:	2029      	movs	r0, #41	; 0x29
 8005d4a:	f7ff fd51 	bl	80057f0 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 8005d4e:	2014      	movs	r0, #20
 8005d50:	f7fb f924 	bl	8000f9c <HAL_Delay>
}
 8005d54:	46c0      	nop			; (mov r8, r8)
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	0002      	movs	r2, r0
 8005d64:	1dfb      	adds	r3, r7, #7
 8005d66:	701a      	strb	r2, [r3, #0]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 8005d68:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <LCD_1IN28_SetAttributes+0x68>)
 8005d6a:	1dfa      	adds	r2, r7, #7
 8005d6c:	7812      	ldrb	r2, [r2, #0]
 8005d6e:	711a      	strb	r2, [r3, #4]
    UBYTE MemoryAccessReg = 0x08;
 8005d70:	210f      	movs	r1, #15
 8005d72:	187b      	adds	r3, r7, r1
 8005d74:	2208      	movs	r2, #8
 8005d76:	701a      	strb	r2, [r3, #0]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 8005d78:	1dfb      	adds	r3, r7, #7
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d109      	bne.n	8005d94 <LCD_1IN28_SetAttributes+0x38>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 8005d80:	4b10      	ldr	r3, [pc, #64]	; (8005dc4 <LCD_1IN28_SetAttributes+0x68>)
 8005d82:	22f0      	movs	r2, #240	; 0xf0
 8005d84:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 8005d86:	4b0f      	ldr	r3, [pc, #60]	; (8005dc4 <LCD_1IN28_SetAttributes+0x68>)
 8005d88:	22f0      	movs	r2, #240	; 0xf0
 8005d8a:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 8005d8c:	187b      	adds	r3, r7, r1
 8005d8e:	22c8      	movs	r2, #200	; 0xc8
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	e009      	b.n	8005da8 <LCD_1IN28_SetAttributes+0x4c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 8005d94:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <LCD_1IN28_SetAttributes+0x68>)
 8005d96:	22f0      	movs	r2, #240	; 0xf0
 8005d98:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 8005d9a:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <LCD_1IN28_SetAttributes+0x68>)
 8005d9c:	22f0      	movs	r2, #240	; 0xf0
 8005d9e:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 8005da0:	230f      	movs	r3, #15
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	2268      	movs	r2, #104	; 0x68
 8005da6:	701a      	strb	r2, [r3, #0]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 8005da8:	2036      	movs	r0, #54	; 0x36
 8005daa:	f7ff fd21 	bl	80057f0 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 8005dae:	230f      	movs	r3, #15
 8005db0:	18fb      	adds	r3, r7, r3
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	0018      	movs	r0, r3
 8005db6:	f7ff fd43 	bl	8005840 <LCD_1IN28_SendData_8Bit>
}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	b004      	add	sp, #16
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	20000260 	.word	0x20000260

08005dc8 <LCD_1IN28_Init>:
function :	Initialize the lcd
parameter:
********************************************************************************/

void LCD_1IN28_Init(UBYTE Scan_dir)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	0002      	movs	r2, r0
 8005dd0:	1dfb      	adds	r3, r7, #7
 8005dd2:	701a      	strb	r2, [r3, #0]

    //Hardware reset
    LCD_1IN28_Reset();
 8005dd4:	f7ff fce6 	bl	80057a4 <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    //Not sure if this is needed
    LCD_1IN28_SetAttributes(Scan_dir);
 8005dd8:	1dfb      	adds	r3, r7, #7
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f7ff ffbd 	bl	8005d5c <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 8005de2:	f7ff fd87 	bl	80058f4 <LCD_1IN28_InitReg>

}
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b002      	add	sp, #8
 8005dec:	bd80      	pop	{r7, pc}

08005dee <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8005dee:	b5b0      	push	{r4, r5, r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	0005      	movs	r5, r0
 8005df6:	000c      	movs	r4, r1
 8005df8:	0010      	movs	r0, r2
 8005dfa:	0019      	movs	r1, r3
 8005dfc:	1dbb      	adds	r3, r7, #6
 8005dfe:	1c2a      	adds	r2, r5, #0
 8005e00:	801a      	strh	r2, [r3, #0]
 8005e02:	1d3b      	adds	r3, r7, #4
 8005e04:	1c22      	adds	r2, r4, #0
 8005e06:	801a      	strh	r2, [r3, #0]
 8005e08:	1cbb      	adds	r3, r7, #2
 8005e0a:	1c02      	adds	r2, r0, #0
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	003b      	movs	r3, r7
 8005e10:	1c0a      	adds	r2, r1, #0
 8005e12:	801a      	strh	r2, [r3, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8005e14:	202a      	movs	r0, #42	; 0x2a
 8005e16:	f7ff fceb 	bl	80057f0 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	f7ff fd10 	bl	8005840 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 8005e20:	1dbb      	adds	r3, r7, #6
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	0018      	movs	r0, r3
 8005e28:	f7ff fd0a 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f7ff fd07 	bl	8005840 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 8005e32:	1cbb      	adds	r3, r7, #2
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f7ff fd01 	bl	8005840 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 8005e3e:	202b      	movs	r0, #43	; 0x2b
 8005e40:	f7ff fcd6 	bl	80057f0 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8005e44:	2000      	movs	r0, #0
 8005e46:	f7ff fcfb 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 8005e4a:	1d3b      	adds	r3, r7, #4
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	0018      	movs	r0, r3
 8005e52:	f7ff fcf5 	bl	8005840 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8005e56:	2000      	movs	r0, #0
 8005e58:	f7ff fcf2 	bl	8005840 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 8005e5c:	003b      	movs	r3, r7
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	0018      	movs	r0, r3
 8005e64:	f7ff fcec 	bl	8005840 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 8005e68:	202c      	movs	r0, #44	; 0x2c
 8005e6a:	f7ff fcc1 	bl	80057f0 <LCD_1IN28_SendCommand>
}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	46bd      	mov	sp, r7
 8005e72:	b002      	add	sp, #8
 8005e74:	bdb0      	pop	{r4, r5, r7, pc}

08005e76 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	0002      	movs	r2, r0
 8005e7e:	1dbb      	adds	r3, r7, #6
 8005e80:	801a      	strh	r2, [r3, #0]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 8005e82:	23ef      	movs	r3, #239	; 0xef
 8005e84:	22ef      	movs	r2, #239	; 0xef
 8005e86:	2100      	movs	r1, #0
 8005e88:	2000      	movs	r0, #0
 8005e8a:	f7ff ffb0 	bl	8005dee <LCD_1IN28_SetWindows>

	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8005e8e:	230e      	movs	r3, #14
 8005e90:	18fb      	adds	r3, r7, r3
 8005e92:	2200      	movs	r2, #0
 8005e94:	801a      	strh	r2, [r3, #0]
 8005e96:	e01a      	b.n	8005ece <LCD_1IN28_Clear+0x58>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8005e98:	230c      	movs	r3, #12
 8005e9a:	18fb      	adds	r3, r7, r3
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	801a      	strh	r2, [r3, #0]
 8005ea0:	e00a      	b.n	8005eb8 <LCD_1IN28_Clear+0x42>
			LCD_1IN28_SendData_16Bit(Color);
 8005ea2:	1dbb      	adds	r3, r7, #6
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f7ff fcf2 	bl	8005890 <LCD_1IN28_SendData_16Bit>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8005eac:	210c      	movs	r1, #12
 8005eae:	187b      	adds	r3, r7, r1
 8005eb0:	881a      	ldrh	r2, [r3, #0]
 8005eb2:	187b      	adds	r3, r7, r1
 8005eb4:	3201      	adds	r2, #1
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	230c      	movs	r3, #12
 8005eba:	18fb      	adds	r3, r7, r3
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	2bef      	cmp	r3, #239	; 0xef
 8005ec0:	d9ef      	bls.n	8005ea2 <LCD_1IN28_Clear+0x2c>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8005ec2:	210e      	movs	r1, #14
 8005ec4:	187b      	adds	r3, r7, r1
 8005ec6:	881a      	ldrh	r2, [r3, #0]
 8005ec8:	187b      	adds	r3, r7, r1
 8005eca:	3201      	adds	r2, #1
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	230e      	movs	r3, #14
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	2bef      	cmp	r3, #239	; 0xef
 8005ed6:	d9df      	bls.n	8005e98 <LCD_1IN28_Clear+0x22>
		}
	 }
}
 8005ed8:	46c0      	nop			; (mov r8, r8)
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	46bd      	mov	sp, r7
 8005ede:	b004      	add	sp, #16
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8005ee2:	b590      	push	{r4, r7, lr}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	0004      	movs	r4, r0
 8005eea:	0008      	movs	r0, r1
 8005eec:	0011      	movs	r1, r2
 8005eee:	1dbb      	adds	r3, r7, #6
 8005ef0:	1c22      	adds	r2, r4, #0
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	1d3b      	adds	r3, r7, #4
 8005ef6:	1c02      	adds	r2, r0, #0
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	1cbb      	adds	r3, r7, #2
 8005efc:	1c0a      	adds	r2, r1, #0
 8005efe:	801a      	strh	r2, [r3, #0]
	LCD_1IN28_SetWindows(x,y,x,y);
 8005f00:	1d3b      	adds	r3, r7, #4
 8005f02:	881c      	ldrh	r4, [r3, #0]
 8005f04:	1dbb      	adds	r3, r7, #6
 8005f06:	881a      	ldrh	r2, [r3, #0]
 8005f08:	1d3b      	adds	r3, r7, #4
 8005f0a:	8819      	ldrh	r1, [r3, #0]
 8005f0c:	1dbb      	adds	r3, r7, #6
 8005f0e:	8818      	ldrh	r0, [r3, #0]
 8005f10:	0023      	movs	r3, r4
 8005f12:	f7ff ff6c 	bl	8005dee <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 8005f16:	1cbb      	adds	r3, r7, #2
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f7ff fcb8 	bl	8005890 <LCD_1IN28_SendData_16Bit>
}
 8005f20:	46c0      	nop			; (mov r8, r8)
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b003      	add	sp, #12
 8005f26:	bd90      	pop	{r4, r7, pc}

08005f28 <LCD_1IN28_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN28_SetBackLight(UWORD Value)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	0002      	movs	r2, r0
 8005f30:	1dbb      	adds	r3, r7, #6
 8005f32:	801a      	strh	r2, [r3, #0]
	DEV_Set_PWM(Value);
 8005f34:	4b03      	ldr	r3, [pc, #12]	; (8005f44 <LCD_1IN28_SetBackLight+0x1c>)
 8005f36:	1dba      	adds	r2, r7, #6
 8005f38:	8812      	ldrh	r2, [r2, #0]
 8005f3a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005f3c:	46c0      	nop			; (mov r8, r8)
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	b002      	add	sp, #8
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40014400 	.word	0x40014400

08005f48 <memset>:
 8005f48:	0003      	movs	r3, r0
 8005f4a:	1882      	adds	r2, r0, r2
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d100      	bne.n	8005f52 <memset+0xa>
 8005f50:	4770      	bx	lr
 8005f52:	7019      	strb	r1, [r3, #0]
 8005f54:	3301      	adds	r3, #1
 8005f56:	e7f9      	b.n	8005f4c <memset+0x4>

08005f58 <__libc_init_array>:
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	2600      	movs	r6, #0
 8005f5c:	4c0c      	ldr	r4, [pc, #48]	; (8005f90 <__libc_init_array+0x38>)
 8005f5e:	4d0d      	ldr	r5, [pc, #52]	; (8005f94 <__libc_init_array+0x3c>)
 8005f60:	1b64      	subs	r4, r4, r5
 8005f62:	10a4      	asrs	r4, r4, #2
 8005f64:	42a6      	cmp	r6, r4
 8005f66:	d109      	bne.n	8005f7c <__libc_init_array+0x24>
 8005f68:	2600      	movs	r6, #0
 8005f6a:	f000 f819 	bl	8005fa0 <_init>
 8005f6e:	4c0a      	ldr	r4, [pc, #40]	; (8005f98 <__libc_init_array+0x40>)
 8005f70:	4d0a      	ldr	r5, [pc, #40]	; (8005f9c <__libc_init_array+0x44>)
 8005f72:	1b64      	subs	r4, r4, r5
 8005f74:	10a4      	asrs	r4, r4, #2
 8005f76:	42a6      	cmp	r6, r4
 8005f78:	d105      	bne.n	8005f86 <__libc_init_array+0x2e>
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	00b3      	lsls	r3, r6, #2
 8005f7e:	58eb      	ldr	r3, [r5, r3]
 8005f80:	4798      	blx	r3
 8005f82:	3601      	adds	r6, #1
 8005f84:	e7ee      	b.n	8005f64 <__libc_init_array+0xc>
 8005f86:	00b3      	lsls	r3, r6, #2
 8005f88:	58eb      	ldr	r3, [r5, r3]
 8005f8a:	4798      	blx	r3
 8005f8c:	3601      	adds	r6, #1
 8005f8e:	e7f2      	b.n	8005f76 <__libc_init_array+0x1e>
 8005f90:	08006c80 	.word	0x08006c80
 8005f94:	08006c80 	.word	0x08006c80
 8005f98:	08006c84 	.word	0x08006c84
 8005f9c:	08006c80 	.word	0x08006c80

08005fa0 <_init>:
 8005fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa6:	bc08      	pop	{r3}
 8005fa8:	469e      	mov	lr, r3
 8005faa:	4770      	bx	lr

08005fac <_fini>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb2:	bc08      	pop	{r3}
 8005fb4:	469e      	mov	lr, r3
 8005fb6:	4770      	bx	lr
