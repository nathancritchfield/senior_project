
Remote_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc8  08006070  08006070  00016070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d38  08006d38  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006d38  08006d38  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d38  08006d38  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d38  08006d38  00016d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d3c  08006d3c  00016d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000014  08006d54  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08006d54  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ca5  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003388  00000000  00000000  00035d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  000390b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eef  00000000  00000000  0003a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018981  00000000  00000000  0003b2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a05c  00000000  00000000  00053c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000972fb  00000000  00000000  0006dcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004494  00000000  00000000  00104fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00109444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000014 	.word	0x20000014
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006058 	.word	0x08006058

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000018 	.word	0x20000018
 80000fc:	08006058 	.word	0x08006058

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	230c      	movs	r3, #12
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f005 fe00 	bl	8006000 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000400:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000402:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <MX_ADC1_Init+0xd0>)
 8000404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000406:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	05d2      	lsls	r2, r2, #23
 800040c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000414:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041a:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000422:	2204      	movs	r2, #4
 8000424:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000426:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000428:	2200      	movs	r2, #0
 800042a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800042c:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800042e:	2200      	movs	r2, #0
 8000430:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000434:	2200      	movs	r2, #0
 8000436:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000438:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800043a:	2201      	movs	r2, #1
 800043c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000440:	2220      	movs	r2, #32
 8000442:	2100      	movs	r1, #0
 8000444:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800044e:	2200      	movs	r2, #0
 8000450:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000454:	222c      	movs	r2, #44	; 0x2c
 8000456:	2100      	movs	r1, #0
 8000458:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800045c:	2200      	movs	r2, #0
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000462:	2200      	movs	r2, #0
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000468:	2200      	movs	r2, #0
 800046a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800046e:	223c      	movs	r2, #60	; 0x3c
 8000470:	2100      	movs	r1, #0
 8000472:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000476:	2200      	movs	r2, #0
 8000478:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800047c:	0018      	movs	r0, r3
 800047e:	f000 fef9 	bl	8001274 <HAL_ADC_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000486:	f000 f9f7 	bl	8000878 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <MX_ADC1_Init+0xd4>)
 800048e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049c:	1d3a      	adds	r2, r7, #4
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_ADC1_Init+0xcc>)
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 f97c 	bl	80017a0 <HAL_ADC_ConfigChannel>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004ac:	f000 f9e4 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000030 	.word	0x20000030
 80004bc:	40012400 	.word	0x40012400
 80004c0:	04000002 	.word	0x04000002

080004c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b08b      	sub	sp, #44	; 0x2c
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	2414      	movs	r4, #20
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	0018      	movs	r0, r3
 80004d2:	2314      	movs	r3, #20
 80004d4:	001a      	movs	r2, r3
 80004d6:	2100      	movs	r1, #0
 80004d8:	f005 fd92 	bl	8006000 <memset>
  if(adcHandle->Instance==ADC1)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a18      	ldr	r2, [pc, #96]	; (8000544 <HAL_ADC_MspInit+0x80>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d129      	bne.n	800053a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004e6:	4b18      	ldr	r3, [pc, #96]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0349      	lsls	r1, r1, #13
 80004f0:	430a      	orrs	r2, r1
 80004f2:	641a      	str	r2, [r3, #64]	; 0x40
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	035b      	lsls	r3, r3, #13
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000508:	2101      	movs	r1, #1
 800050a:	430a      	orrs	r2, r1
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000512:	2201      	movs	r2, #1
 8000514:	4013      	ands	r3, r2
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Analog_In_Pin;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2202      	movs	r2, #2
 800051e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2203      	movs	r2, #3
 8000524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Analog_In_GPIO_Port, &GPIO_InitStruct);
 800052c:	193a      	adds	r2, r7, r4
 800052e:	23a0      	movs	r3, #160	; 0xa0
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fc45 	bl	8001dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b00b      	add	sp, #44	; 0x2c
 8000540:	bd90      	pop	{r4, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40012400 	.word	0x40012400
 8000548:	40021000 	.word	0x40021000

0800054c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b089      	sub	sp, #36	; 0x24
 8000550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	240c      	movs	r4, #12
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	2314      	movs	r3, #20
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f005 fd4f 	bl	8006000 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b44      	ldr	r3, [pc, #272]	; (8000674 <MX_GPIO_Init+0x128>)
 8000564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000566:	4b43      	ldr	r3, [pc, #268]	; (8000674 <MX_GPIO_Init+0x128>)
 8000568:	2102      	movs	r1, #2
 800056a:	430a      	orrs	r2, r1
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
 800056e:	4b41      	ldr	r3, [pc, #260]	; (8000674 <MX_GPIO_Init+0x128>)
 8000570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000572:	2202      	movs	r2, #2
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b3e      	ldr	r3, [pc, #248]	; (8000674 <MX_GPIO_Init+0x128>)
 800057c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <MX_GPIO_Init+0x128>)
 8000580:	2104      	movs	r1, #4
 8000582:	430a      	orrs	r2, r1
 8000584:	635a      	str	r2, [r3, #52]	; 0x34
 8000586:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <MX_GPIO_Init+0x128>)
 8000588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058a:	2204      	movs	r2, #4
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b38      	ldr	r3, [pc, #224]	; (8000674 <MX_GPIO_Init+0x128>)
 8000594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000596:	4b37      	ldr	r3, [pc, #220]	; (8000674 <MX_GPIO_Init+0x128>)
 8000598:	2101      	movs	r1, #1
 800059a:	430a      	orrs	r2, r1
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
 800059e:	4b35      	ldr	r3, [pc, #212]	; (8000674 <MX_GPIO_Init+0x128>)
 80005a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a2:	2201      	movs	r2, #1
 80005a4:	4013      	ands	r3, r2
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|SPI1_CSN_Pin, GPIO_PIN_RESET);
 80005aa:	4933      	ldr	r1, [pc, #204]	; (8000678 <MX_GPIO_Init+0x12c>)
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <MX_GPIO_Init+0x130>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fd6b 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	021b      	lsls	r3, r3, #8
 80005ba:	4831      	ldr	r0, [pc, #196]	; (8000680 <MX_GPIO_Init+0x134>)
 80005bc:	2200      	movs	r2, #0
 80005be:	0019      	movs	r1, r3
 80005c0:	f001 fd64 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80005c4:	492f      	ldr	r1, [pc, #188]	; (8000684 <MX_GPIO_Init+0x138>)
 80005c6:	23a0      	movs	r3, #160	; 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2200      	movs	r2, #0
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fd5d 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_Pin|SPI1_CSN_Pin;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <MX_GPIO_Init+0x12c>)
 80005d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2201      	movs	r2, #1
 80005dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	4a23      	ldr	r2, [pc, #140]	; (800067c <MX_GPIO_Init+0x130>)
 80005ee:	0019      	movs	r1, r3
 80005f0:	0010      	movs	r0, r2
 80005f2:	f001 fbe7 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DC_Pin;
 80005f6:	0021      	movs	r1, r4
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	0212      	lsls	r2, r2, #8
 80005fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	000c      	movs	r4, r1
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2201      	movs	r2, #1
 8000606:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000614:	193b      	adds	r3, r7, r4
 8000616:	4a1a      	ldr	r2, [pc, #104]	; (8000680 <MX_GPIO_Init+0x134>)
 8000618:	0019      	movs	r1, r3
 800061a:	0010      	movs	r0, r2
 800061c:	f001 fbd2 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RST_Pin|LED_Pin|NRF_CE_Pin;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <MX_GPIO_Init+0x138>)
 8000624:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	2201      	movs	r2, #1
 800062a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	193a      	adds	r2, r7, r4
 800063a:	23a0      	movs	r3, #160	; 0xa0
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fbbf 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_In_Pin;
 8000646:	0021      	movs	r1, r4
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	0152      	lsls	r2, r2, #5
 800064e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_In_GPIO_Port, &GPIO_InitStruct);
 800065c:	187a      	adds	r2, r7, r1
 800065e:	23a0      	movs	r3, #160	; 0xa0
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fbad 	bl	8001dc4 <HAL_GPIO_Init>

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b009      	add	sp, #36	; 0x24
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000
 8000678:	00000201 	.word	0x00000201
 800067c:	50000400 	.word	0x50000400
 8000680:	50000800 	.word	0x50000800
 8000684:	00000888 	.word	0x00000888

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fc11 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f897 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f7ff ff59 	bl	800054c <MX_GPIO_Init>
  MX_ADC1_Init();
 800069a:	f7ff fea7 	bl	80003ec <MX_ADC1_Init>
  MX_SPI1_Init();
 800069e:	f000 f8f1 	bl	8000884 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006a2:	f000 f92d 	bl	8000900 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80006a6:	f000 fb2b 	bl	8000d00 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80006aa:	f000 fa41 	bl	8000b30 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  int32_t counter = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
  int32_t raw = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
//  nrf_init();
//  nrf_tx_mode(TX_addr, 10);



  	DEV_Module_Init();
 80006b6:	f004 fa51 	bl	8004b5c <DEV_Module_Init>

  	LCD_1IN28_SetBackLight(1000);
 80006ba:	23fa      	movs	r3, #250	; 0xfa
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	0018      	movs	r0, r3
 80006c0:	f005 fc8e 	bl	8005fe0 <LCD_1IN28_SetBackLight>
  	LCD_1IN28_Init(VERTICAL);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f005 fbdb 	bl	8005e80 <LCD_1IN28_Init>
   	//LCD_1IN28_Clear(BLACK);

  	Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, BLACK);
 80006ca:	2300      	movs	r3, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	21f0      	movs	r1, #240	; 0xf0
 80006d0:	20f0      	movs	r0, #240	; 0xf0
 80006d2:	f004 fa69 	bl	8004ba8 <Paint_NewImage>

  	Paint_SetClearFuntion(LCD_1IN28_Clear);
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <main+0x114>)
 80006d8:	0018      	movs	r0, r3
 80006da:	f004 fab3 	bl	8004c44 <Paint_SetClearFuntion>
  	Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 80006de:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <main+0x118>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f004 fabd 	bl	8004c60 <Paint_SetDisplayFuntion>
  	Paint_DrawString_EN(70, 100, "LOADING...", &Font16, BLACK, DARKORANGE);
 80006e6:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <main+0x11c>)
 80006e8:	4a2f      	ldr	r2, [pc, #188]	; (80007a8 <main+0x120>)
 80006ea:	4930      	ldr	r1, [pc, #192]	; (80007ac <main+0x124>)
 80006ec:	9101      	str	r1, [sp, #4]
 80006ee:	2100      	movs	r1, #0
 80006f0:	9100      	str	r1, [sp, #0]
 80006f2:	2164      	movs	r1, #100	; 0x64
 80006f4:	2046      	movs	r0, #70	; 0x46
 80006f6:	f004 ff65 	bl	80055c4 <Paint_DrawString_EN>

  	Paint_Clear(WHITE);
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <main+0x128>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f004 fb9d 	bl	8004e3c <Paint_Clear>
  	DEV_Delay_ms(100);
 8000702:	2064      	movs	r0, #100	; 0x64
 8000704:	f000 fc5c 	bl	8000fc0 <HAL_Delay>

  	Paint_DrawRectangle(115, 115, 136, 141, DARKRED, 2, 0);
 8000708:	2300      	movs	r3, #0
 800070a:	9302      	str	r3, [sp, #8]
 800070c:	2302      	movs	r3, #2
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <main+0x12c>)
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	238d      	movs	r3, #141	; 0x8d
 8000716:	2288      	movs	r2, #136	; 0x88
 8000718:	2173      	movs	r1, #115	; 0x73
 800071a:	2073      	movs	r0, #115	; 0x73
 800071c:	f004 fda2 	bl	8005264 <Paint_DrawRectangle>
	  Paint_DrawNum(120, 120, counter, &Font16, DARKBLUE, DARKGREEN);
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <main+0x11c>)
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	4924      	ldr	r1, [pc, #144]	; (80007b8 <main+0x130>)
 8000726:	9101      	str	r1, [sp, #4]
 8000728:	4924      	ldr	r1, [pc, #144]	; (80007bc <main+0x134>)
 800072a:	9100      	str	r1, [sp, #0]
 800072c:	2178      	movs	r1, #120	; 0x78
 800072e:	2078      	movs	r0, #120	; 0x78
 8000730:	f004 ffc6 	bl	80056c0 <Paint_DrawNum>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  HAL_ADC_Start(&hadc1);
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <main+0x138>)
 8000736:	0018      	movs	r0, r3
 8000738:	f000 ff44 	bl	80015c4 <HAL_ADC_Start>
  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800073c:	2301      	movs	r3, #1
 800073e:	425a      	negs	r2, r3
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <main+0x138>)
 8000742:	0011      	movs	r1, r2
 8000744:	0018      	movs	r0, r3
 8000746:	f000 ff8b 	bl	8001660 <HAL_ADC_PollForConversion>
      raw = HAL_ADC_GetValue(&hadc1);
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <main+0x138>)
 800074c:	0018      	movs	r0, r3
 800074e:	f001 f81b 	bl	8001788 <HAL_ADC_GetValue>
 8000752:	0003      	movs	r3, r0
 8000754:	603b      	str	r3, [r7, #0]
	  counter++;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3301      	adds	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
	  Paint_ClearWindows(120, 100, 164, 116, BLACK);
 800075c:	2300      	movs	r3, #0
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2374      	movs	r3, #116	; 0x74
 8000762:	22a4      	movs	r2, #164	; 0xa4
 8000764:	2164      	movs	r1, #100	; 0x64
 8000766:	2078      	movs	r0, #120	; 0x78
 8000768:	f004 fb7a 	bl	8004e60 <Paint_ClearWindows>
	  Paint_DrawNum(120, 100, raw, &Font16, DARKBLUE, DARKGREEN);
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <main+0x11c>)
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	4911      	ldr	r1, [pc, #68]	; (80007b8 <main+0x130>)
 8000772:	9101      	str	r1, [sp, #4]
 8000774:	4911      	ldr	r1, [pc, #68]	; (80007bc <main+0x134>)
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	2164      	movs	r1, #100	; 0x64
 800077a:	2078      	movs	r0, #120	; 0x78
 800077c:	f004 ffa0 	bl	80056c0 <Paint_DrawNum>
	  Paint_DrawNum(120, 120, counter, &Font16, DARKBLUE, DARKGREEN);
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <main+0x11c>)
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	490c      	ldr	r1, [pc, #48]	; (80007b8 <main+0x130>)
 8000786:	9101      	str	r1, [sp, #4]
 8000788:	490c      	ldr	r1, [pc, #48]	; (80007bc <main+0x134>)
 800078a:	9100      	str	r1, [sp, #0]
 800078c:	2178      	movs	r1, #120	; 0x78
 800078e:	2078      	movs	r0, #120	; 0x78
 8000790:	f004 ff96 	bl	80056c0 <Paint_DrawNum>
	  HAL_Delay(250);
 8000794:	20fa      	movs	r0, #250	; 0xfa
 8000796:	f000 fc13 	bl	8000fc0 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800079a:	e7cb      	b.n	8000734 <main+0xac>
 800079c:	08005f2f 	.word	0x08005f2f
 80007a0:	08005f9b 	.word	0x08005f9b
 80007a4:	2000000c 	.word	0x2000000c
 80007a8:	08006070 	.word	0x08006070
 80007ac:	0000ab84 	.word	0x0000ab84
 80007b0:	0000ffff 	.word	0x0000ffff
 80007b4:	00006862 	.word	0x00006862
 80007b8:	00004c42 	.word	0x00004c42
 80007bc:	00000908 	.word	0x00000908
 80007c0:	20000030 	.word	0x20000030

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b093      	sub	sp, #76	; 0x4c
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	2414      	movs	r4, #20
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	0018      	movs	r0, r3
 80007d0:	2334      	movs	r3, #52	; 0x34
 80007d2:	001a      	movs	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f005 fc13 	bl	8006000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	0018      	movs	r0, r3
 80007de:	2310      	movs	r3, #16
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f005 fc0c 	bl	8006000 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 fc6b 	bl	80020c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2202      	movs	r2, #2
 80007f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	0052      	lsls	r2, r2, #1
 80007fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000800:	0021      	movs	r1, r4
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2240      	movs	r2, #64	; 0x40
 800080c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2202      	movs	r2, #2
 8000812:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2202      	movs	r2, #2
 8000818:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2208      	movs	r2, #8
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	0292      	lsls	r2, r2, #10
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0592      	lsls	r2, r2, #22
 8000834:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	187b      	adds	r3, r7, r1
 8000838:	0018      	movs	r0, r3
 800083a:	f001 fc91 	bl	8002160 <HAL_RCC_OscConfig>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000842:	f000 f819 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2202      	movs	r2, #2
 8000850:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2102      	movs	r1, #2
 8000862:	0018      	movs	r0, r3
 8000864:	f001 ff8c 	bl	8002780 <HAL_RCC_ClockConfig>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800086c:	f000 f804 	bl	8000878 <Error_Handler>
  }
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b013      	add	sp, #76	; 0x4c
 8000876:	bd90      	pop	{r4, r7, pc}

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_SPI1_Init+0x74>)
 800088a:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <MX_SPI1_Init+0x78>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_SPI1_Init+0x74>)
 8000890:	2282      	movs	r2, #130	; 0x82
 8000892:	0052      	lsls	r2, r2, #1
 8000894:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_SPI1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_SPI1_Init+0x74>)
 800089e:	22e0      	movs	r2, #224	; 0xe0
 80008a0:	00d2      	lsls	r2, r2, #3
 80008a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_SPI1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_SPI1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_SPI1_Init+0x74>)
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	0092      	lsls	r2, r2, #2
 80008b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_SPI1_Init+0x74>)
 80008ba:	2228      	movs	r2, #40	; 0x28
 80008bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_SPI1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_SPI1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_SPI1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_SPI1_Init+0x74>)
 80008d2:	2207      	movs	r2, #7
 80008d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_SPI1_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_SPI1_Init+0x74>)
 80008de:	2208      	movs	r2, #8
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <MX_SPI1_Init+0x74>)
 80008e4:	0018      	movs	r0, r3
 80008e6:	f002 fa1b 	bl	8002d20 <HAL_SPI_Init>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f7ff ffc3 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000094 	.word	0x20000094
 80008fc:	40013000 	.word	0x40013000

08000900 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_SPI2_Init+0x74>)
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_SPI2_Init+0x78>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_SPI2_Init+0x74>)
 800090c:	2282      	movs	r2, #130	; 0x82
 800090e:	0052      	lsls	r2, r2, #1
 8000910:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_SPI2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_SPI2_Init+0x74>)
 800091a:	22e0      	movs	r2, #224	; 0xe0
 800091c:	00d2      	lsls	r2, r2, #3
 800091e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_SPI2_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_SPI2_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_SPI2_Init+0x74>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	0092      	lsls	r2, r2, #2
 8000932:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SPI2_Init+0x74>)
 8000936:	2208      	movs	r2, #8
 8000938:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_SPI2_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SPI2_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_SPI2_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SPI2_Init+0x74>)
 800094e:	2207      	movs	r2, #7
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_SPI2_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SPI2_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <MX_SPI2_Init+0x74>)
 8000960:	0018      	movs	r0, r3
 8000962:	f002 f9dd 	bl	8002d20 <HAL_SPI_Init>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800096a:	f7ff ff85 	bl	8000878 <Error_Handler>
  /* USER CODE BEGIN SPI2_Init 2 */
//ALways change line 77 to
  //hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  /* USER CODE END SPI2_Init 2 */

}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200000f8 	.word	0x200000f8
 8000978:	40003800 	.word	0x40003800

0800097c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b08d      	sub	sp, #52	; 0x34
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	241c      	movs	r4, #28
 8000986:	193b      	adds	r3, r7, r4
 8000988:	0018      	movs	r0, r3
 800098a:	2314      	movs	r3, #20
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f005 fb36 	bl	8006000 <memset>
  if(spiHandle->Instance==SPI1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a42      	ldr	r2, [pc, #264]	; (8000aa4 <HAL_SPI_MspInit+0x128>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d131      	bne.n	8000a02 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800099e:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <HAL_SPI_MspInit+0x12c>)
 80009a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009a2:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <HAL_SPI_MspInit+0x12c>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	0149      	lsls	r1, r1, #5
 80009a8:	430a      	orrs	r2, r1
 80009aa:	641a      	str	r2, [r3, #64]	; 0x40
 80009ac:	4b3e      	ldr	r3, [pc, #248]	; (8000aa8 <HAL_SPI_MspInit+0x12c>)
 80009ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	015b      	lsls	r3, r3, #5
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b3b      	ldr	r3, [pc, #236]	; (8000aa8 <HAL_SPI_MspInit+0x12c>)
 80009bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009be:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <HAL_SPI_MspInit+0x12c>)
 80009c0:	2101      	movs	r1, #1
 80009c2:	430a      	orrs	r2, r1
 80009c4:	635a      	str	r2, [r3, #52]	; 0x34
 80009c6:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <HAL_SPI_MspInit+0x12c>)
 80009c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ca:	2201      	movs	r2, #1
 80009cc:	4013      	ands	r3, r2
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80009d2:	0021      	movs	r1, r4
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2264      	movs	r2, #100	; 0x64
 80009d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2202      	movs	r2, #2
 80009de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	187a      	adds	r2, r7, r1
 80009f4:	23a0      	movs	r3, #160	; 0xa0
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 f9e2 	bl	8001dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a00:	e04c      	b.n	8000a9c <HAL_SPI_MspInit+0x120>
  else if(spiHandle->Instance==SPI2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a29      	ldr	r2, [pc, #164]	; (8000aac <HAL_SPI_MspInit+0x130>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d147      	bne.n	8000a9c <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <HAL_SPI_MspInit+0x12c>)
 8000a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <HAL_SPI_MspInit+0x12c>)
 8000a12:	2180      	movs	r1, #128	; 0x80
 8000a14:	01c9      	lsls	r1, r1, #7
 8000a16:	430a      	orrs	r2, r1
 8000a18:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <HAL_SPI_MspInit+0x12c>)
 8000a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	01db      	lsls	r3, r3, #7
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <HAL_SPI_MspInit+0x12c>)
 8000a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <HAL_SPI_MspInit+0x12c>)
 8000a2e:	2101      	movs	r1, #1
 8000a30:	430a      	orrs	r2, r1
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_SPI_MspInit+0x12c>)
 8000a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a40:	241c      	movs	r4, #28
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2202      	movs	r2, #2
 8000a58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	193a      	adds	r2, r7, r4
 8000a62:	23a0      	movs	r3, #160	; 0xa0
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 f9ab 	bl	8001dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a6e:	0021      	movs	r1, r4
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2210      	movs	r2, #16
 8000a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2202      	movs	r2, #2
 8000a7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2202      	movs	r2, #2
 8000a86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	187a      	adds	r2, r7, r1
 8000a90:	23a0      	movs	r3, #160	; 0xa0
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	0011      	movs	r1, r2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f001 f994 	bl	8001dc4 <HAL_GPIO_Init>
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b00d      	add	sp, #52	; 0x34
 8000aa2:	bd90      	pop	{r4, r7, pc}
 8000aa4:	40013000 	.word	0x40013000
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40003800 	.word	0x40003800

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x44>)
 8000ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_MspInit+0x44>)
 8000abc:	2101      	movs	r1, #1
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x44>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4013      	ands	r3, r2
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	0549      	lsls	r1, r1, #21
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	63da      	str	r2, [r3, #60]	; 0x3c
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_MspInit+0x44>)
 8000ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	055b      	lsls	r3, r3, #21
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b002      	add	sp, #8
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	40021000 	.word	0x40021000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1c:	f000 fa34 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b094      	sub	sp, #80	; 0x50
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b36:	2334      	movs	r3, #52	; 0x34
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	231c      	movs	r3, #28
 8000b3e:	001a      	movs	r2, r3
 8000b40:	2100      	movs	r1, #0
 8000b42:	f005 fa5d 	bl	8006000 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b46:	003b      	movs	r3, r7
 8000b48:	0018      	movs	r0, r3
 8000b4a:	2334      	movs	r3, #52	; 0x34
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	2100      	movs	r1, #0
 8000b50:	f005 fa56 	bl	8006000 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b54:	4b38      	ldr	r3, [pc, #224]	; (8000c38 <MX_TIM16_Init+0x108>)
 8000b56:	4a39      	ldr	r2, [pc, #228]	; (8000c3c <MX_TIM16_Init+0x10c>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 300-1;
 8000b5a:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <MX_TIM16_Init+0x108>)
 8000b5c:	222c      	movs	r2, #44	; 0x2c
 8000b5e:	32ff      	adds	r2, #255	; 0xff
 8000b60:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b35      	ldr	r3, [pc, #212]	; (8000c38 <MX_TIM16_Init+0x108>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8000b68:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <MX_TIM16_Init+0x108>)
 8000b6a:	4a35      	ldr	r2, [pc, #212]	; (8000c40 <MX_TIM16_Init+0x110>)
 8000b6c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6e:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <MX_TIM16_Init+0x108>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <MX_TIM16_Init+0x108>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <MX_TIM16_Init+0x108>)
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <MX_TIM16_Init+0x108>)
 8000b82:	0018      	movs	r0, r3
 8000b84:	f002 fc5a 	bl	800343c <HAL_TIM_Base_Init>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000b8c:	f7ff fe74 	bl	8000878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b90:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <MX_TIM16_Init+0x108>)
 8000b92:	0018      	movs	r0, r3
 8000b94:	f002 fcaa 	bl	80034ec <HAL_TIM_PWM_Init>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000b9c:	f7ff fe6c 	bl	8000878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba0:	2134      	movs	r1, #52	; 0x34
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2260      	movs	r2, #96	; 0x60
 8000ba6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bcc:	1879      	adds	r1, r7, r1
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_TIM16_Init+0x108>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f002 fdc2 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8000bdc:	f7ff fe4c 	bl	8000878 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000be0:	003b      	movs	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be6:	003b      	movs	r3, r7
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bec:	003b      	movs	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bf2:	003b      	movs	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bf8:	003b      	movs	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bfe:	003b      	movs	r3, r7
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	0192      	lsls	r2, r2, #6
 8000c04:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c06:	003b      	movs	r3, r7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c12:	003a      	movs	r2, r7
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_TIM16_Init+0x108>)
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f003 f9d9 	bl	8003fd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM16_Init+0xf6>
  {
    Error_Handler();
 8000c22:	f7ff fe29 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <MX_TIM16_Init+0x108>)
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 f82b 	bl	8000c84 <HAL_TIM_MspPostInit>

}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b014      	add	sp, #80	; 0x50
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	2000015c 	.word	0x2000015c
 8000c3c:	40014400 	.word	0x40014400
 8000c40:	000003e7 	.word	0x000003e7

08000c44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_TIM_Base_MspInit+0x38>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d10d      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_TIM_Base_MspInit+0x3c>)
 8000c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_TIM_Base_MspInit+0x3c>)
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	0289      	lsls	r1, r1, #10
 8000c60:	430a      	orrs	r2, r1
 8000c62:	641a      	str	r2, [r3, #64]	; 0x40
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_TIM_Base_MspInit+0x3c>)
 8000c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	029b      	lsls	r3, r3, #10
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b004      	add	sp, #16
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	40014400 	.word	0x40014400
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	240c      	movs	r4, #12
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	0018      	movs	r0, r3
 8000c92:	2314      	movs	r3, #20
 8000c94:	001a      	movs	r2, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	f005 f9b2 	bl	8006000 <memset>
  if(timHandle->Instance==TIM16)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <HAL_TIM_MspPostInit+0x70>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d122      	bne.n	8000cec <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_TIM_MspPostInit+0x74>)
 8000ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_TIM_MspPostInit+0x74>)
 8000cac:	2102      	movs	r1, #2
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_TIM_MspPostInit+0x74>)
 8000cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BL_Pin;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	0052      	lsls	r2, r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	0021      	movs	r1, r4
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2202      	movs	r2, #2
 8000ccc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2202      	movs	r2, #2
 8000cde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BL_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_TIM_MspPostInit+0x78>)
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	0010      	movs	r0, r2
 8000ce8:	f001 f86c 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b009      	add	sp, #36	; 0x24
 8000cf2:	bd90      	pop	{r4, r7, pc}
 8000cf4:	40014400 	.word	0x40014400
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	50000400 	.word	0x50000400

08000d00 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d06:	4a24      	ldr	r2, [pc, #144]	; (8000d98 <MX_USART1_UART_Init+0x98>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d0a:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d0c:	22e1      	movs	r2, #225	; 0xe1
 8000d0e:	0252      	lsls	r2, r2, #9
 8000d10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f003 f9dc 	bl	8004108 <HAL_HalfDuplex_Init>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d54:	f7ff fd90 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f003 fe09 	bl	8004974 <HAL_UARTEx_SetTxFifoThreshold>
 8000d62:	1e03      	subs	r3, r0, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d66:	f7ff fd87 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f003 fe40 	bl	80049f4 <HAL_UARTEx_SetRxFifoThreshold>
 8000d74:	1e03      	subs	r3, r0, #0
 8000d76:	d001      	beq.n	8000d7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d78:	f7ff fd7e 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f003 fdbe 	bl	8004900 <HAL_UARTEx_DisableFifoMode>
 8000d84:	1e03      	subs	r3, r0, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f7ff fd76 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	200001a8 	.word	0x200001a8
 8000d98:	40013800 	.word	0x40013800

08000d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b091      	sub	sp, #68	; 0x44
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	232c      	movs	r3, #44	; 0x2c
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	0018      	movs	r0, r3
 8000daa:	2314      	movs	r3, #20
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f005 f926 	bl	8006000 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	2414      	movs	r4, #20
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	0018      	movs	r0, r3
 8000dba:	2318      	movs	r3, #24
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f005 f91e 	bl	8006000 <memset>
  if(uartHandle->Instance==USART1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <HAL_UART_MspInit+0xb8>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d13d      	bne.n	8000e4a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f001 fe79 	bl	8002ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d001      	beq.n	8000dea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000de6:	f7ff fd47 	bl	8000878 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0xbc>)
 8000dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_UART_MspInit+0xbc>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	01c9      	lsls	r1, r1, #7
 8000df4:	430a      	orrs	r2, r1
 8000df6:	641a      	str	r2, [r3, #64]	; 0x40
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_UART_MspInit+0xbc>)
 8000dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	01db      	lsls	r3, r3, #7
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0xbc>)
 8000e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_UART_MspInit+0xbc>)
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_UART_MspInit+0xbc>)
 8000e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e16:	2202      	movs	r2, #2
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e1e:	212c      	movs	r1, #44	; 0x2c
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2240      	movs	r2, #64	; 0x40
 8000e24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2212      	movs	r2, #18
 8000e2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2201      	movs	r2, #1
 8000e30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_UART_MspInit+0xc0>)
 8000e42:	0019      	movs	r1, r3
 8000e44:	0010      	movs	r0, r2
 8000e46:	f000 ffbd 	bl	8001dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b011      	add	sp, #68	; 0x44
 8000e50:	bd90      	pop	{r4, r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	40013800 	.word	0x40013800
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	50000400 	.word	0x50000400

08000e60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e64:	f7ff fe5f 	bl	8000b26 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	; (8000ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <LoopForever+0xe>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	; (8000eac <LoopForever+0x16>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e8e:	f005 f8bf 	bl	8006010 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e92:	f7ff fbf9 	bl	8000688 <main>

08000e96 <LoopForever>:

LoopForever:
  b LoopForever
 8000e96:	e7fe      	b.n	8000e96 <LoopForever>
  ldr   r0, =_estack
 8000e98:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ea4:	08006d40 	.word	0x08006d40
  ldr r2, =_sbss
 8000ea8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000eac:	20000268 	.word	0x20000268

08000eb0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC1_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_Init+0x3c>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_Init+0x3c>)
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	0049      	lsls	r1, r1, #1
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f000 f810 	bl	8000ef4 <HAL_InitTick>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e001      	b.n	8000ee4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fde6 	bl	8000ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40022000 	.word	0x40022000

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000efc:	230f      	movs	r3, #15
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_InitTick+0x88>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d02b      	beq.n	8000f64 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_InitTick+0x8c>)
 8000f0e:	681c      	ldr	r4, [r3, #0]
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_InitTick+0x88>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	0019      	movs	r1, r3
 8000f16:	23fa      	movs	r3, #250	; 0xfa
 8000f18:	0098      	lsls	r0, r3, #2
 8000f1a:	f7ff f8f1 	bl	8000100 <__udivsi3>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	0019      	movs	r1, r3
 8000f22:	0020      	movs	r0, r4
 8000f24:	f7ff f8ec 	bl	8000100 <__udivsi3>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f000 ff3d 	bl	8001daa <HAL_SYSTICK_Config>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d112      	bne.n	8000f5a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d80a      	bhi.n	8000f50 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	425b      	negs	r3, r3
 8000f40:	2200      	movs	r2, #0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 ff1c 	bl	8001d80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_InitTick+0x90>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e00d      	b.n	8000f6c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	e008      	b.n	8000f6c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	e003      	b.n	8000f6c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f64:	230f      	movs	r3, #15
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	781b      	ldrb	r3, [r3, #0]
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b005      	add	sp, #20
 8000f78:	bd90      	pop	{r4, r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000004 	.word	0x20000004

08000f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_IncTick+0x1c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	001a      	movs	r2, r3
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	18d2      	adds	r2, r2, r3
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f9a:	601a      	str	r2, [r3, #0]
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	2000023c 	.word	0x2000023c

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <HAL_GetTick+0x10>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	2000023c 	.word	0x2000023c

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff fff0 	bl	8000fac <HAL_GetTick>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	d005      	beq.n	8000fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_Delay+0x44>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	001a      	movs	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	189b      	adds	r3, r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	f7ff ffe0 	bl	8000fac <HAL_GetTick>
 8000fec:	0002      	movs	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d8f7      	bhi.n	8000fe8 <HAL_Delay+0x28>
  {
  }
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	20000008 	.word	0x20000008

08001008 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001018:	401a      	ands	r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	fe3fffff 	.word	0xfe3fffff

08001030 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	23e0      	movs	r3, #224	; 0xe0
 800103e:	045b      	lsls	r3, r3, #17
 8001040:	4013      	ands	r3, r2
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}

0800104a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	2104      	movs	r1, #4
 800105e:	400a      	ands	r2, r1
 8001060:	2107      	movs	r1, #7
 8001062:	4091      	lsls	r1, r2
 8001064:	000a      	movs	r2, r1
 8001066:	43d2      	mvns	r2, r2
 8001068:	401a      	ands	r2, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2104      	movs	r1, #4
 800106e:	400b      	ands	r3, r1
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4099      	lsls	r1, r3
 8001074:	000b      	movs	r3, r1
 8001076:	431a      	orrs	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b004      	add	sp, #16
 8001082:	bd80      	pop	{r7, pc}

08001084 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	2104      	movs	r1, #4
 8001096:	400a      	ands	r2, r1
 8001098:	2107      	movs	r1, #7
 800109a:	4091      	lsls	r1, r2
 800109c:	000a      	movs	r2, r1
 800109e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	2104      	movs	r1, #4
 80010a4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010a6:	40da      	lsrs	r2, r3
 80010a8:	0013      	movs	r3, r2
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	23c0      	movs	r3, #192	; 0xc0
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	4013      	ands	r3, r2
 80010c4:	d101      	bne.n	80010ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b002      	add	sp, #8
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	211f      	movs	r1, #31
 80010e8:	400a      	ands	r2, r1
 80010ea:	210f      	movs	r1, #15
 80010ec:	4091      	lsls	r1, r2
 80010ee:	000a      	movs	r2, r1
 80010f0:	43d2      	mvns	r2, r2
 80010f2:	401a      	ands	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	0e9b      	lsrs	r3, r3, #26
 80010f8:	210f      	movs	r1, #15
 80010fa:	4019      	ands	r1, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	201f      	movs	r0, #31
 8001100:	4003      	ands	r3, r0
 8001102:	4099      	lsls	r1, r3
 8001104:	000b      	movs	r3, r1
 8001106:	431a      	orrs	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	b004      	add	sp, #16
 8001112:	bd80      	pop	{r7, pc}

08001114 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	035b      	lsls	r3, r3, #13
 8001126:	0b5b      	lsrs	r3, r3, #13
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b002      	add	sp, #8
 8001134:	bd80      	pop	{r7, pc}

08001136 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	0352      	lsls	r2, r2, #13
 8001148:	0b52      	lsrs	r2, r2, #13
 800114a:	43d2      	mvns	r2, r2
 800114c:	401a      	ands	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b002      	add	sp, #8
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	0212      	lsls	r2, r2, #8
 8001170:	43d2      	mvns	r2, r2
 8001172:	401a      	ands	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	400b      	ands	r3, r1
 800117c:	4904      	ldr	r1, [pc, #16]	; (8001190 <LL_ADC_SetChannelSamplingTime+0x34>)
 800117e:	400b      	ands	r3, r1
 8001180:	431a      	orrs	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b004      	add	sp, #16
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	07ffff00 	.word	0x07ffff00

08001194 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80011a2:	4013      	ands	r3, r2
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	0552      	lsls	r2, r2, #21
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	6fffffe8 	.word	0x6fffffe8

080011bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	055b      	lsls	r3, r3, #21
 80011cc:	401a      	ands	r2, r3
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	055b      	lsls	r3, r3, #21
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d101      	bne.n	80011da <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80011da:	2300      	movs	r3, #0
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b002      	add	sp, #8
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <LL_ADC_Enable+0x20>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	2201      	movs	r2, #1
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}
 8001204:	7fffffe8 	.word	0x7fffffe8

08001208 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2201      	movs	r2, #1
 8001216:	4013      	ands	r3, r2
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <LL_ADC_IsEnabled+0x18>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_ADC_IsEnabled+0x1a>
 8001220:	2300      	movs	r3, #0
}
 8001222:	0018      	movs	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	b002      	add	sp, #8
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <LL_ADC_REG_StartConversion+0x20>)
 800123a:	4013      	ands	r3, r2
 800123c:	2204      	movs	r2, #4
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}
 800124c:	7fffffe8 	.word	0x7fffffe8

08001250 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2204      	movs	r2, #4
 800125e:	4013      	ands	r3, r2
 8001260:	2b04      	cmp	r3, #4
 8001262:	d101      	bne.n	8001268 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001268:	2300      	movs	r3, #0
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127c:	231f      	movs	r3, #31
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e17f      	b.n	800159a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10a      	bne.n	80012b8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff f90d 	bl	80004c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2254      	movs	r2, #84	; 0x54
 80012b4:	2100      	movs	r1, #0
 80012b6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	0018      	movs	r0, r3
 80012be:	f7ff ff7d 	bl	80011bc <LL_ADC_IsInternalRegulatorEnabled>
 80012c2:	1e03      	subs	r3, r0, #0
 80012c4:	d115      	bne.n	80012f2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	0018      	movs	r0, r3
 80012cc:	f7ff ff62 	bl	8001194 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012d0:	4bb4      	ldr	r3, [pc, #720]	; (80015a4 <HAL_ADC_Init+0x330>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	49b4      	ldr	r1, [pc, #720]	; (80015a8 <HAL_ADC_Init+0x334>)
 80012d6:	0018      	movs	r0, r3
 80012d8:	f7fe ff12 	bl	8000100 <__udivsi3>
 80012dc:	0003      	movs	r3, r0
 80012de:	3301      	adds	r3, #1
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012e4:	e002      	b.n	80012ec <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f9      	bne.n	80012e6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7ff ff60 	bl	80011bc <LL_ADC_IsInternalRegulatorEnabled>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d10f      	bne.n	8001320 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001304:	2210      	movs	r2, #16
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001310:	2201      	movs	r2, #1
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001318:	231f      	movs	r3, #31
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff ff93 	bl	8001250 <LL_ADC_REG_IsConversionOngoing>
 800132a:	0003      	movs	r3, r0
 800132c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	2210      	movs	r2, #16
 8001334:	4013      	ands	r3, r2
 8001336:	d000      	beq.n	800133a <HAL_ADC_Init+0xc6>
 8001338:	e122      	b.n	8001580 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d000      	beq.n	8001342 <HAL_ADC_Init+0xce>
 8001340:	e11e      	b.n	8001580 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	4a99      	ldr	r2, [pc, #612]	; (80015ac <HAL_ADC_Init+0x338>)
 8001348:	4013      	ands	r3, r2
 800134a:	2202      	movs	r2, #2
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff ff56 	bl	8001208 <LL_ADC_IsEnabled>
 800135c:	1e03      	subs	r3, r0, #0
 800135e:	d000      	beq.n	8001362 <HAL_ADC_Init+0xee>
 8001360:	e0ad      	b.n	80014be <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7e1b      	ldrb	r3, [r3, #24]
 800136a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800136c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7e5b      	ldrb	r3, [r3, #25]
 8001372:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001374:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7e9b      	ldrb	r3, [r3, #26]
 800137a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800137c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <HAL_ADC_Init+0x118>
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	015b      	lsls	r3, r3, #5
 800138a:	e000      	b.n	800138e <HAL_ADC_Init+0x11a>
 800138c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800138e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001394:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b00      	cmp	r3, #0
 800139c:	da04      	bge.n	80013a8 <HAL_ADC_Init+0x134>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	e001      	b.n	80013ac <HAL_ADC_Init+0x138>
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80013ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	212c      	movs	r1, #44	; 0x2c
 80013b2:	5c5b      	ldrb	r3, [r3, r1]
 80013b4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80013b6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2220      	movs	r2, #32
 80013c2:	5c9b      	ldrb	r3, [r3, r2]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d115      	bne.n	80013f4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7e9b      	ldrb	r3, [r3, #26]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	0252      	lsls	r2, r2, #9
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	e00b      	b.n	80013f4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	2220      	movs	r2, #32
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	2201      	movs	r2, #1
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00a      	beq.n	8001412 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001400:	23e0      	movs	r3, #224	; 0xe0
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800140a:	4313      	orrs	r3, r2
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a65      	ldr	r2, [pc, #404]	; (80015b0 <HAL_ADC_Init+0x33c>)
 800141a:	4013      	ands	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	430a      	orrs	r2, r1
 8001426:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	0f9b      	lsrs	r3, r3, #30
 800142e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001434:	4313      	orrs	r3, r2
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4313      	orrs	r3, r2
 800143a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	223c      	movs	r2, #60	; 0x3c
 8001440:	5c9b      	ldrb	r3, [r3, r2]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d111      	bne.n	800146a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	0f9b      	lsrs	r3, r3, #30
 800144c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001452:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001458:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800145e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	4313      	orrs	r3, r2
 8001464:	2201      	movs	r2, #1
 8001466:	4313      	orrs	r3, r2
 8001468:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	4a50      	ldr	r2, [pc, #320]	; (80015b4 <HAL_ADC_Init+0x340>)
 8001472:	4013      	ands	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	430a      	orrs	r2, r1
 800147e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	23c0      	movs	r3, #192	; 0xc0
 8001486:	061b      	lsls	r3, r3, #24
 8001488:	429a      	cmp	r2, r3
 800148a:	d018      	beq.n	80014be <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	05db      	lsls	r3, r3, #23
 8001494:	429a      	cmp	r2, r3
 8001496:	d012      	beq.n	80014be <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	061b      	lsls	r3, r3, #24
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d00c      	beq.n	80014be <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80014a4:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <HAL_ADC_Init+0x344>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a44      	ldr	r2, [pc, #272]	; (80015bc <HAL_ADC_Init+0x348>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	0019      	movs	r1, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	23f0      	movs	r3, #240	; 0xf0
 80014b4:	039b      	lsls	r3, r3, #14
 80014b6:	401a      	ands	r2, r3
 80014b8:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <HAL_ADC_Init+0x344>)
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c6:	001a      	movs	r2, r3
 80014c8:	2100      	movs	r1, #0
 80014ca:	f7ff fdbe 	bl	800104a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d6:	493a      	ldr	r1, [pc, #232]	; (80015c0 <HAL_ADC_Init+0x34c>)
 80014d8:	001a      	movs	r2, r3
 80014da:	f7ff fdb6 	bl	800104a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2110      	movs	r1, #16
 80014f2:	4249      	negs	r1, r1
 80014f4:	430a      	orrs	r2, r1
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
 80014f8:	e018      	b.n	800152c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	039b      	lsls	r3, r3, #14
 8001502:	429a      	cmp	r2, r3
 8001504:	d112      	bne.n	800152c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	3b01      	subs	r3, #1
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	221c      	movs	r2, #28
 8001516:	4013      	ands	r3, r2
 8001518:	2210      	movs	r2, #16
 800151a:	4252      	negs	r2, r2
 800151c:	409a      	lsls	r2, r3
 800151e:	0011      	movs	r1, r2
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2100      	movs	r1, #0
 8001532:	0018      	movs	r0, r3
 8001534:	f7ff fda6 	bl	8001084 <LL_ADC_GetSamplingTimeCommonChannels>
 8001538:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800153e:	429a      	cmp	r2, r3
 8001540:	d10b      	bne.n	800155a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154c:	2203      	movs	r2, #3
 800154e:	4393      	bics	r3, r2
 8001550:	2201      	movs	r2, #1
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001558:	e01c      	b.n	8001594 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155e:	2212      	movs	r2, #18
 8001560:	4393      	bics	r3, r2
 8001562:	2210      	movs	r2, #16
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156e:	2201      	movs	r2, #1
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001576:	231f      	movs	r3, #31
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800157e:	e009      	b.n	8001594 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001584:	2210      	movs	r2, #16
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800158c:	231f      	movs	r3, #31
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001594:	231f      	movs	r3, #31
 8001596:	18fb      	adds	r3, r7, r3
 8001598:	781b      	ldrb	r3, [r3, #0]
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b008      	add	sp, #32
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	20000000 	.word	0x20000000
 80015a8:	00030d40 	.word	0x00030d40
 80015ac:	fffffefd 	.word	0xfffffefd
 80015b0:	ffde0201 	.word	0xffde0201
 80015b4:	1ffffc02 	.word	0x1ffffc02
 80015b8:	40012708 	.word	0x40012708
 80015bc:	ffc3ffff 	.word	0xffc3ffff
 80015c0:	07ffff04 	.word	0x07ffff04

080015c4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015c4:	b5b0      	push	{r4, r5, r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0018      	movs	r0, r3
 80015d2:	f7ff fe3d 	bl	8001250 <LL_ADC_REG_IsConversionOngoing>
 80015d6:	1e03      	subs	r3, r0, #0
 80015d8:	d135      	bne.n	8001646 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2254      	movs	r2, #84	; 0x54
 80015de:	5c9b      	ldrb	r3, [r3, r2]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_Start+0x24>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e035      	b.n	8001654 <HAL_ADC_Start+0x90>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2254      	movs	r2, #84	; 0x54
 80015ec:	2101      	movs	r1, #1
 80015ee:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015f0:	250f      	movs	r5, #15
 80015f2:	197c      	adds	r4, r7, r5
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 faaa 	bl	8001b50 <ADC_Enable>
 80015fc:	0003      	movs	r3, r0
 80015fe:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001600:	197b      	adds	r3, r7, r5
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d119      	bne.n	800163c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	4a13      	ldr	r2, [pc, #76]	; (800165c <HAL_ADC_Start+0x98>)
 800160e:	4013      	ands	r3, r2
 8001610:	2280      	movs	r2, #128	; 0x80
 8001612:	0052      	lsls	r2, r2, #1
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	221c      	movs	r2, #28
 8001626:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2254      	movs	r2, #84	; 0x54
 800162c:	2100      	movs	r1, #0
 800162e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff fdf9 	bl	800122c <LL_ADC_REG_StartConversion>
 800163a:	e008      	b.n	800164e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2254      	movs	r2, #84	; 0x54
 8001640:	2100      	movs	r1, #0
 8001642:	5499      	strb	r1, [r3, r2]
 8001644:	e003      	b.n	800164e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001646:	230f      	movs	r3, #15
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	2202      	movs	r2, #2
 800164c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800164e:	230f      	movs	r3, #15
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	781b      	ldrb	r3, [r3, #0]
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b004      	add	sp, #16
 800165a:	bdb0      	pop	{r4, r5, r7, pc}
 800165c:	fffff0fe 	.word	0xfffff0fe

08001660 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	2b08      	cmp	r3, #8
 8001670:	d102      	bne.n	8001678 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001672:	2308      	movs	r3, #8
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	e00f      	b.n	8001698 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2201      	movs	r2, #1
 8001680:	4013      	ands	r3, r2
 8001682:	d007      	beq.n	8001694 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001688:	2220      	movs	r2, #32
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e072      	b.n	800177a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001694:	2304      	movs	r3, #4
 8001696:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001698:	f7ff fc88 	bl	8000fac <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80016a0:	e01f      	b.n	80016e2 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	d01c      	beq.n	80016e2 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80016a8:	f7ff fc80 	bl	8000fac <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d302      	bcc.n	80016be <HAL_ADC_PollForConversion+0x5e>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d111      	bne.n	80016e2 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4013      	ands	r3, r2
 80016c8:	d10b      	bne.n	80016e2 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ce:	2204      	movs	r2, #4
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2254      	movs	r2, #84	; 0x54
 80016da:	2100      	movs	r1, #0
 80016dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e04b      	b.n	800177a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	4013      	ands	r3, r2
 80016ec:	d0d9      	beq.n	80016a2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	0092      	lsls	r2, r2, #2
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff fcd6 	bl	80010b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d02e      	beq.n	8001768 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7e9b      	ldrb	r3, [r3, #26]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d12a      	bne.n	8001768 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2208      	movs	r2, #8
 800171a:	4013      	ands	r3, r2
 800171c:	2b08      	cmp	r3, #8
 800171e:	d123      	bne.n	8001768 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff fd93 	bl	8001250 <LL_ADC_REG_IsConversionOngoing>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d110      	bne.n	8001750 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	210c      	movs	r1, #12
 800173a:	438a      	bics	r2, r1
 800173c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	4a10      	ldr	r2, [pc, #64]	; (8001784 <HAL_ADC_PollForConversion+0x124>)
 8001744:	4013      	ands	r3, r2
 8001746:	2201      	movs	r2, #1
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	659a      	str	r2, [r3, #88]	; 0x58
 800174e:	e00b      	b.n	8001768 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	2220      	movs	r2, #32
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001760:	2201      	movs	r2, #1
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7e1b      	ldrb	r3, [r3, #24]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	220c      	movs	r2, #12
 8001776:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	0018      	movs	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	b004      	add	sp, #16
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	fffffefe 	.word	0xfffffefe

08001788 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b002      	add	sp, #8
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017aa:	2317      	movs	r3, #23
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2254      	movs	r2, #84	; 0x54
 80017ba:	5c9b      	ldrb	r3, [r3, r2]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x24>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e1c0      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x3a6>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2254      	movs	r2, #84	; 0x54
 80017c8:	2101      	movs	r1, #1
 80017ca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff fd3d 	bl	8001250 <LL_ADC_REG_IsConversionOngoing>
 80017d6:	1e03      	subs	r3, r0, #0
 80017d8:	d000      	beq.n	80017dc <HAL_ADC_ConfigChannel+0x3c>
 80017da:	e1a3      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d100      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x46>
 80017e4:	e143      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	061b      	lsls	r3, r3, #24
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d004      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017f6:	4ac1      	ldr	r2, [pc, #772]	; (8001afc <HAL_ADC_ConfigChannel+0x35c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d108      	bne.n	800180e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	0019      	movs	r1, r3
 8001806:	0010      	movs	r0, r2
 8001808:	f7ff fc84 	bl	8001114 <LL_ADC_REG_SetSequencerChAdd>
 800180c:	e0c9      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	211f      	movs	r1, #31
 8001818:	400b      	ands	r3, r1
 800181a:	210f      	movs	r1, #15
 800181c:	4099      	lsls	r1, r3
 800181e:	000b      	movs	r3, r1
 8001820:	43db      	mvns	r3, r3
 8001822:	4013      	ands	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	035b      	lsls	r3, r3, #13
 800182c:	0b5b      	lsrs	r3, r3, #13
 800182e:	d105      	bne.n	800183c <HAL_ADC_ConfigChannel+0x9c>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0e9b      	lsrs	r3, r3, #26
 8001836:	221f      	movs	r2, #31
 8001838:	4013      	ands	r3, r2
 800183a:	e098      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2201      	movs	r2, #1
 8001842:	4013      	ands	r3, r2
 8001844:	d000      	beq.n	8001848 <HAL_ADC_ConfigChannel+0xa8>
 8001846:	e091      	b.n	800196c <HAL_ADC_ConfigChannel+0x1cc>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2202      	movs	r2, #2
 800184e:	4013      	ands	r3, r2
 8001850:	d000      	beq.n	8001854 <HAL_ADC_ConfigChannel+0xb4>
 8001852:	e089      	b.n	8001968 <HAL_ADC_ConfigChannel+0x1c8>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2204      	movs	r2, #4
 800185a:	4013      	ands	r3, r2
 800185c:	d000      	beq.n	8001860 <HAL_ADC_ConfigChannel+0xc0>
 800185e:	e081      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1c4>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2208      	movs	r2, #8
 8001866:	4013      	ands	r3, r2
 8001868:	d000      	beq.n	800186c <HAL_ADC_ConfigChannel+0xcc>
 800186a:	e079      	b.n	8001960 <HAL_ADC_ConfigChannel+0x1c0>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2210      	movs	r2, #16
 8001872:	4013      	ands	r3, r2
 8001874:	d000      	beq.n	8001878 <HAL_ADC_ConfigChannel+0xd8>
 8001876:	e071      	b.n	800195c <HAL_ADC_ConfigChannel+0x1bc>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2220      	movs	r2, #32
 800187e:	4013      	ands	r3, r2
 8001880:	d000      	beq.n	8001884 <HAL_ADC_ConfigChannel+0xe4>
 8001882:	e069      	b.n	8001958 <HAL_ADC_ConfigChannel+0x1b8>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2240      	movs	r2, #64	; 0x40
 800188a:	4013      	ands	r3, r2
 800188c:	d000      	beq.n	8001890 <HAL_ADC_ConfigChannel+0xf0>
 800188e:	e061      	b.n	8001954 <HAL_ADC_ConfigChannel+0x1b4>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	4013      	ands	r3, r2
 8001898:	d000      	beq.n	800189c <HAL_ADC_ConfigChannel+0xfc>
 800189a:	e059      	b.n	8001950 <HAL_ADC_ConfigChannel+0x1b0>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4013      	ands	r3, r2
 80018a6:	d151      	bne.n	800194c <HAL_ADC_ConfigChannel+0x1ac>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d149      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1a8>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4013      	ands	r3, r2
 80018be:	d141      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x1a4>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	4013      	ands	r3, r2
 80018ca:	d139      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x1a0>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	015b      	lsls	r3, r3, #5
 80018d4:	4013      	ands	r3, r2
 80018d6:	d131      	bne.n	800193c <HAL_ADC_ConfigChannel+0x19c>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	019b      	lsls	r3, r3, #6
 80018e0:	4013      	ands	r3, r2
 80018e2:	d129      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x198>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	01db      	lsls	r3, r3, #7
 80018ec:	4013      	ands	r3, r2
 80018ee:	d121      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x194>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	4013      	ands	r3, r2
 80018fa:	d119      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x190>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	025b      	lsls	r3, r3, #9
 8001904:	4013      	ands	r3, r2
 8001906:	d111      	bne.n	800192c <HAL_ADC_ConfigChannel+0x18c>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	029b      	lsls	r3, r3, #10
 8001910:	4013      	ands	r3, r2
 8001912:	d109      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x188>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	02db      	lsls	r3, r3, #11
 800191c:	4013      	ands	r3, r2
 800191e:	d001      	beq.n	8001924 <HAL_ADC_ConfigChannel+0x184>
 8001920:	2312      	movs	r3, #18
 8001922:	e024      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001924:	2300      	movs	r3, #0
 8001926:	e022      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001928:	2311      	movs	r3, #17
 800192a:	e020      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 800192c:	2310      	movs	r3, #16
 800192e:	e01e      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001930:	230f      	movs	r3, #15
 8001932:	e01c      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001934:	230e      	movs	r3, #14
 8001936:	e01a      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001938:	230d      	movs	r3, #13
 800193a:	e018      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 800193c:	230c      	movs	r3, #12
 800193e:	e016      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001940:	230b      	movs	r3, #11
 8001942:	e014      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001944:	230a      	movs	r3, #10
 8001946:	e012      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001948:	2309      	movs	r3, #9
 800194a:	e010      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 800194c:	2308      	movs	r3, #8
 800194e:	e00e      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001950:	2307      	movs	r3, #7
 8001952:	e00c      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001954:	2306      	movs	r3, #6
 8001956:	e00a      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001958:	2305      	movs	r3, #5
 800195a:	e008      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 800195c:	2304      	movs	r3, #4
 800195e:	e006      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001960:	2303      	movs	r3, #3
 8001962:	e004      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001964:	2302      	movs	r3, #2
 8001966:	e002      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <HAL_ADC_ConfigChannel+0x1ce>
 800196c:	2300      	movs	r3, #0
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	6852      	ldr	r2, [r2, #4]
 8001972:	201f      	movs	r0, #31
 8001974:	4002      	ands	r2, r0
 8001976:	4093      	lsls	r3, r2
 8001978:	000a      	movs	r2, r1
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	429a      	cmp	r2, r3
 800198e:	d808      	bhi.n	80019a2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	6859      	ldr	r1, [r3, #4]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	001a      	movs	r2, r3
 800199e:	f7ff fb99 	bl	80010d4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	001a      	movs	r2, r3
 80019b0:	f7ff fbd4 	bl	800115c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db00      	blt.n	80019be <HAL_ADC_ConfigChannel+0x21e>
 80019bc:	e0bc      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019be:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_ADC_ConfigChannel+0x360>)
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7ff fb35 	bl	8001030 <LL_ADC_GetCommonPathInternalCh>
 80019c6:	0003      	movs	r3, r0
 80019c8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a4d      	ldr	r2, [pc, #308]	; (8001b04 <HAL_ADC_ConfigChannel+0x364>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d122      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019dc:	d11d      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	0412      	lsls	r2, r2, #16
 80019e4:	4313      	orrs	r3, r2
 80019e6:	4a46      	ldr	r2, [pc, #280]	; (8001b00 <HAL_ADC_ConfigChannel+0x360>)
 80019e8:	0019      	movs	r1, r3
 80019ea:	0010      	movs	r0, r2
 80019ec:	f7ff fb0c 	bl	8001008 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019f0:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <HAL_ADC_ConfigChannel+0x368>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4945      	ldr	r1, [pc, #276]	; (8001b0c <HAL_ADC_ConfigChannel+0x36c>)
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7fe fb82 	bl	8000100 <__udivsi3>
 80019fc:	0003      	movs	r3, r0
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	0013      	movs	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	189b      	adds	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a0a:	e002      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f9      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a18:	e08e      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a3c      	ldr	r2, [pc, #240]	; (8001b10 <HAL_ADC_ConfigChannel+0x370>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d10e      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	045b      	lsls	r3, r3, #17
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d109      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	0452      	lsls	r2, r2, #17
 8001a34:	4313      	orrs	r3, r2
 8001a36:	4a32      	ldr	r2, [pc, #200]	; (8001b00 <HAL_ADC_ConfigChannel+0x360>)
 8001a38:	0019      	movs	r1, r3
 8001a3a:	0010      	movs	r0, r2
 8001a3c:	f7ff fae4 	bl	8001008 <LL_ADC_SetCommonPathInternalCh>
 8001a40:	e07a      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a33      	ldr	r2, [pc, #204]	; (8001b14 <HAL_ADC_ConfigChannel+0x374>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d000      	beq.n	8001a4e <HAL_ADC_ConfigChannel+0x2ae>
 8001a4c:	e074      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	03db      	lsls	r3, r3, #15
 8001a54:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a56:	d000      	beq.n	8001a5a <HAL_ADC_ConfigChannel+0x2ba>
 8001a58:	e06e      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	03d2      	lsls	r2, r2, #15
 8001a60:	4313      	orrs	r3, r2
 8001a62:	4a27      	ldr	r2, [pc, #156]	; (8001b00 <HAL_ADC_ConfigChannel+0x360>)
 8001a64:	0019      	movs	r1, r3
 8001a66:	0010      	movs	r0, r2
 8001a68:	f7ff face 	bl	8001008 <LL_ADC_SetCommonPathInternalCh>
 8001a6c:	e064      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	061b      	lsls	r3, r3, #24
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d004      	beq.n	8001a84 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a7e:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <HAL_ADC_ConfigChannel+0x35c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d107      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	0010      	movs	r0, r2
 8001a90:	f7ff fb51 	bl	8001136 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da4d      	bge.n	8001b38 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_ADC_ConfigChannel+0x360>)
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f7ff fac6 	bl	8001030 <LL_ADC_GetCommonPathInternalCh>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a15      	ldr	r2, [pc, #84]	; (8001b04 <HAL_ADC_ConfigChannel+0x364>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d108      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <HAL_ADC_ConfigChannel+0x378>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <HAL_ADC_ConfigChannel+0x360>)
 8001aba:	0019      	movs	r1, r3
 8001abc:	0010      	movs	r0, r2
 8001abe:	f7ff faa3 	bl	8001008 <LL_ADC_SetCommonPathInternalCh>
 8001ac2:	e039      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <HAL_ADC_ConfigChannel+0x370>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d108      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <HAL_ADC_ConfigChannel+0x37c>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_ADC_ConfigChannel+0x360>)
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	0010      	movs	r0, r2
 8001ada:	f7ff fa95 	bl	8001008 <LL_ADC_SetCommonPathInternalCh>
 8001ade:	e02b      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <HAL_ADC_ConfigChannel+0x374>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d126      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <HAL_ADC_ConfigChannel+0x380>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	4a03      	ldr	r2, [pc, #12]	; (8001b00 <HAL_ADC_ConfigChannel+0x360>)
 8001af2:	0019      	movs	r1, r3
 8001af4:	0010      	movs	r0, r2
 8001af6:	f7ff fa87 	bl	8001008 <LL_ADC_SetCommonPathInternalCh>
 8001afa:	e01d      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x398>
 8001afc:	80000004 	.word	0x80000004
 8001b00:	40012708 	.word	0x40012708
 8001b04:	b0001000 	.word	0xb0001000
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	00030d40 	.word	0x00030d40
 8001b10:	b8004000 	.word	0xb8004000
 8001b14:	b4002000 	.word	0xb4002000
 8001b18:	ff7fffff 	.word	0xff7fffff
 8001b1c:	feffffff 	.word	0xfeffffff
 8001b20:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	2220      	movs	r2, #32
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b30:	2317      	movs	r3, #23
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2254      	movs	r2, #84	; 0x54
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001b40:	2317      	movs	r3, #23
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	781b      	ldrb	r3, [r3, #0]
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b006      	add	sp, #24
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)

08001b50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7ff fb51 	bl	8001208 <LL_ADC_IsEnabled>
 8001b66:	1e03      	subs	r3, r0, #0
 8001b68:	d000      	beq.n	8001b6c <ADC_Enable+0x1c>
 8001b6a:	e069      	b.n	8001c40 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4a36      	ldr	r2, [pc, #216]	; (8001c4c <ADC_Enable+0xfc>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	d00d      	beq.n	8001b94 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	2210      	movs	r2, #16
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	2201      	movs	r2, #1
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e056      	b.n	8001c42 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7ff fb23 	bl	80011e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001b9e:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <ADC_Enable+0x100>)
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff fa45 	bl	8001030 <LL_ADC_GetCommonPathInternalCh>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	041b      	lsls	r3, r3, #16
 8001bac:	4013      	ands	r3, r2
 8001bae:	d00f      	beq.n	8001bd0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb0:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <ADC_Enable+0x104>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4928      	ldr	r1, [pc, #160]	; (8001c58 <ADC_Enable+0x108>)
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7fe faa2 	bl	8000100 <__udivsi3>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001bc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001bc2:	e002      	b.n	8001bca <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f9      	bne.n	8001bc4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7e5b      	ldrb	r3, [r3, #25]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d033      	beq.n	8001c40 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff f9e8 	bl	8000fac <HAL_GetTick>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001be0:	e027      	b.n	8001c32 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff fb0e 	bl	8001208 <LL_ADC_IsEnabled>
 8001bec:	1e03      	subs	r3, r0, #0
 8001bee:	d104      	bne.n	8001bfa <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff faf5 	bl	80011e4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bfa:	f7ff f9d7 	bl	8000fac <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d914      	bls.n	8001c32 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d00d      	beq.n	8001c32 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	2201      	movs	r2, #1
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e007      	b.n	8001c42 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d1d0      	bne.n	8001be2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b004      	add	sp, #16
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	80000017 	.word	0x80000017
 8001c50:	40012708 	.word	0x40012708
 8001c54:	20000000 	.word	0x20000000
 8001c58:	00030d40 	.word	0x00030d40

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	0002      	movs	r2, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c6a:	1dfb      	adds	r3, r7, #7
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c70:	d828      	bhi.n	8001cc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c72:	4a2f      	ldr	r2, [pc, #188]	; (8001d30 <__NVIC_SetPriority+0xd4>)
 8001c74:	1dfb      	adds	r3, r7, #7
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b25b      	sxtb	r3, r3
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	33c0      	adds	r3, #192	; 0xc0
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	589b      	ldr	r3, [r3, r2]
 8001c82:	1dfa      	adds	r2, r7, #7
 8001c84:	7812      	ldrb	r2, [r2, #0]
 8001c86:	0011      	movs	r1, r2
 8001c88:	2203      	movs	r2, #3
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	00d2      	lsls	r2, r2, #3
 8001c8e:	21ff      	movs	r1, #255	; 0xff
 8001c90:	4091      	lsls	r1, r2
 8001c92:	000a      	movs	r2, r1
 8001c94:	43d2      	mvns	r2, r2
 8001c96:	401a      	ands	r2, r3
 8001c98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	019b      	lsls	r3, r3, #6
 8001c9e:	22ff      	movs	r2, #255	; 0xff
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	2303      	movs	r3, #3
 8001caa:	4003      	ands	r3, r0
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb0:	481f      	ldr	r0, [pc, #124]	; (8001d30 <__NVIC_SetPriority+0xd4>)
 8001cb2:	1dfb      	adds	r3, r7, #7
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	33c0      	adds	r3, #192	; 0xc0
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cc2:	e031      	b.n	8001d28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cc4:	4a1b      	ldr	r2, [pc, #108]	; (8001d34 <__NVIC_SetPriority+0xd8>)
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	0019      	movs	r1, r3
 8001ccc:	230f      	movs	r3, #15
 8001cce:	400b      	ands	r3, r1
 8001cd0:	3b08      	subs	r3, #8
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3306      	adds	r3, #6
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	18d3      	adds	r3, r2, r3
 8001cda:	3304      	adds	r3, #4
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	1dfa      	adds	r2, r7, #7
 8001ce0:	7812      	ldrb	r2, [r2, #0]
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	00d2      	lsls	r2, r2, #3
 8001cea:	21ff      	movs	r1, #255	; 0xff
 8001cec:	4091      	lsls	r1, r2
 8001cee:	000a      	movs	r2, r1
 8001cf0:	43d2      	mvns	r2, r2
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	019b      	lsls	r3, r3, #6
 8001cfa:	22ff      	movs	r2, #255	; 0xff
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	0018      	movs	r0, r3
 8001d04:	2303      	movs	r3, #3
 8001d06:	4003      	ands	r3, r0
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d0c:	4809      	ldr	r0, [pc, #36]	; (8001d34 <__NVIC_SetPriority+0xd8>)
 8001d0e:	1dfb      	adds	r3, r7, #7
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	001c      	movs	r4, r3
 8001d14:	230f      	movs	r3, #15
 8001d16:	4023      	ands	r3, r4
 8001d18:	3b08      	subs	r3, #8
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	3306      	adds	r3, #6
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	18c3      	adds	r3, r0, r3
 8001d24:	3304      	adds	r3, #4
 8001d26:	601a      	str	r2, [r3, #0]
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b003      	add	sp, #12
 8001d2e:	bd90      	pop	{r4, r7, pc}
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	1e5a      	subs	r2, r3, #1
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	045b      	lsls	r3, r3, #17
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d301      	bcc.n	8001d50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e010      	b.n	8001d72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <SysTick_Config+0x44>)
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	3a01      	subs	r2, #1
 8001d56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d58:	2301      	movs	r3, #1
 8001d5a:	425b      	negs	r3, r3
 8001d5c:	2103      	movs	r1, #3
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f7ff ff7c 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SysTick_Config+0x44>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SysTick_Config+0x44>)
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	0018      	movs	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b002      	add	sp, #8
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	1c02      	adds	r2, r0, #0
 8001d90:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	187b      	adds	r3, r7, r1
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	0011      	movs	r1, r2
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f7ff ff5d 	bl	8001c5c <__NVIC_SetPriority>
}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b004      	add	sp, #16
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7ff ffbf 	bl	8001d38 <SysTick_Config>
 8001dba:	0003      	movs	r3, r0
}
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd2:	e147      	b.n	8002064 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4091      	lsls	r1, r2
 8001dde:	000a      	movs	r2, r1
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d100      	bne.n	8001dec <HAL_GPIO_Init+0x28>
 8001dea:	e138      	b.n	800205e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2203      	movs	r2, #3
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d005      	beq.n	8001e04 <HAL_GPIO_Init+0x40>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d130      	bne.n	8001e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	409a      	lsls	r2, r3
 8001e12:	0013      	movs	r3, r2
 8001e14:	43da      	mvns	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	409a      	lsls	r2, r3
 8001e26:	0013      	movs	r3, r2
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	0013      	movs	r3, r2
 8001e42:	43da      	mvns	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	2201      	movs	r2, #1
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d017      	beq.n	8001ea2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	43da      	mvns	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	409a      	lsls	r2, r3
 8001e94:	0013      	movs	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d123      	bne.n	8001ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	0092      	lsls	r2, r2, #2
 8001eb8:	58d3      	ldr	r3, [r2, r3]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	0013      	movs	r3, r2
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2107      	movs	r1, #7
 8001eda:	400b      	ands	r3, r1
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	08da      	lsrs	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3208      	adds	r2, #8
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	6939      	ldr	r1, [r7, #16]
 8001ef4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2203      	movs	r2, #3
 8001f02:	409a      	lsls	r2, r3
 8001f04:	0013      	movs	r3, r2
 8001f06:	43da      	mvns	r2, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2203      	movs	r2, #3
 8001f14:	401a      	ands	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	0013      	movs	r3, r2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	23c0      	movs	r3, #192	; 0xc0
 8001f30:	029b      	lsls	r3, r3, #10
 8001f32:	4013      	ands	r3, r2
 8001f34:	d100      	bne.n	8001f38 <HAL_GPIO_Init+0x174>
 8001f36:	e092      	b.n	800205e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001f38:	4a50      	ldr	r2, [pc, #320]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3318      	adds	r3, #24
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	589b      	ldr	r3, [r3, r2]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2203      	movs	r2, #3
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	220f      	movs	r2, #15
 8001f50:	409a      	lsls	r2, r3
 8001f52:	0013      	movs	r3, r2
 8001f54:	43da      	mvns	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	23a0      	movs	r3, #160	; 0xa0
 8001f60:	05db      	lsls	r3, r3, #23
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d013      	beq.n	8001f8e <HAL_GPIO_Init+0x1ca>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a45      	ldr	r2, [pc, #276]	; (8002080 <HAL_GPIO_Init+0x2bc>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00d      	beq.n	8001f8a <HAL_GPIO_Init+0x1c6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a44      	ldr	r2, [pc, #272]	; (8002084 <HAL_GPIO_Init+0x2c0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <HAL_GPIO_Init+0x1c2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a43      	ldr	r2, [pc, #268]	; (8002088 <HAL_GPIO_Init+0x2c4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <HAL_GPIO_Init+0x1be>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x1cc>
 8001f82:	2305      	movs	r3, #5
 8001f84:	e004      	b.n	8001f90 <HAL_GPIO_Init+0x1cc>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_Init+0x1cc>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x1cc>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	2103      	movs	r1, #3
 8001f94:	400a      	ands	r2, r1
 8001f96:	00d2      	lsls	r2, r2, #3
 8001f98:	4093      	lsls	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001fa0:	4936      	ldr	r1, [pc, #216]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3318      	adds	r3, #24
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fae:	4b33      	ldr	r3, [pc, #204]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	035b      	lsls	r3, r3, #13
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001fd8:	4b28      	ldr	r3, [pc, #160]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	039b      	lsls	r3, r3, #14
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002002:	4a1e      	ldr	r2, [pc, #120]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8002004:	2384      	movs	r3, #132	; 0x84
 8002006:	58d3      	ldr	r3, [r2, r3]
 8002008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	43da      	mvns	r2, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	029b      	lsls	r3, r3, #10
 800201c:	4013      	ands	r3, r2
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002028:	4914      	ldr	r1, [pc, #80]	; (800207c <HAL_GPIO_Init+0x2b8>)
 800202a:	2284      	movs	r2, #132	; 0x84
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002030:	4a12      	ldr	r2, [pc, #72]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	58d3      	ldr	r3, [r2, r3]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43da      	mvns	r2, r3
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	025b      	lsls	r3, r3, #9
 800204a:	4013      	ands	r3, r2
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002056:	4909      	ldr	r1, [pc, #36]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	40da      	lsrs	r2, r3
 800206c:	1e13      	subs	r3, r2, #0
 800206e:	d000      	beq.n	8002072 <HAL_GPIO_Init+0x2ae>
 8002070:	e6b0      	b.n	8001dd4 <HAL_GPIO_Init+0x10>
  }
}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	b006      	add	sp, #24
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021800 	.word	0x40021800
 8002080:	50000400 	.word	0x50000400
 8002084:	50000800 	.word	0x50000800
 8002088:	50000c00 	.word	0x50000c00

0800208c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	0008      	movs	r0, r1
 8002096:	0011      	movs	r1, r2
 8002098:	1cbb      	adds	r3, r7, #2
 800209a:	1c02      	adds	r2, r0, #0
 800209c:	801a      	strh	r2, [r3, #0]
 800209e:	1c7b      	adds	r3, r7, #1
 80020a0:	1c0a      	adds	r2, r1, #0
 80020a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a4:	1c7b      	adds	r3, r7, #1
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ac:	1cbb      	adds	r3, r7, #2
 80020ae:	881a      	ldrh	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020b4:	e003      	b.n	80020be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020b6:	1cbb      	adds	r3, r7, #2
 80020b8:	881a      	ldrh	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a19      	ldr	r2, [pc, #100]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d11f      	bne.n	800212c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	0013      	movs	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	189b      	adds	r3, r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4912      	ldr	r1, [pc, #72]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80020fa:	0018      	movs	r0, r3
 80020fc:	f7fe f800 	bl	8000100 <__udivsi3>
 8002100:	0003      	movs	r3, r0
 8002102:	3301      	adds	r3, #1
 8002104:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002106:	e008      	b.n	800211a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3b01      	subs	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e001      	b.n	800211a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e009      	b.n	800212e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	401a      	ands	r2, r3
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	429a      	cmp	r2, r3
 800212a:	d0ed      	beq.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b004      	add	sp, #16
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	40007000 	.word	0x40007000
 800213c:	fffff9ff 	.word	0xfffff9ff
 8002140:	20000000 	.word	0x20000000
 8002144:	000f4240 	.word	0x000f4240

08002148 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <LL_RCC_GetAPB1Prescaler+0x14>)
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	23e0      	movs	r3, #224	; 0xe0
 8002152:	01db      	lsls	r3, r3, #7
 8002154:	4013      	ands	r3, r2
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000

08002160 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e2f3      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	4013      	ands	r3, r2
 800217a:	d100      	bne.n	800217e <HAL_RCC_OscConfig+0x1e>
 800217c:	e07c      	b.n	8002278 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217e:	4bc3      	ldr	r3, [pc, #780]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2238      	movs	r2, #56	; 0x38
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002188:	4bc0      	ldr	r3, [pc, #768]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2203      	movs	r2, #3
 800218e:	4013      	ands	r3, r2
 8002190:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b10      	cmp	r3, #16
 8002196:	d102      	bne.n	800219e <HAL_RCC_OscConfig+0x3e>
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d002      	beq.n	80021a4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d10b      	bne.n	80021bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	4bb9      	ldr	r3, [pc, #740]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	029b      	lsls	r3, r3, #10
 80021ac:	4013      	ands	r3, r2
 80021ae:	d062      	beq.n	8002276 <HAL_RCC_OscConfig+0x116>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d15e      	bne.n	8002276 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e2ce      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	025b      	lsls	r3, r3, #9
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d107      	bne.n	80021d8 <HAL_RCC_OscConfig+0x78>
 80021c8:	4bb0      	ldr	r3, [pc, #704]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4baf      	ldr	r3, [pc, #700]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80021ce:	2180      	movs	r1, #128	; 0x80
 80021d0:	0249      	lsls	r1, r1, #9
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e020      	b.n	800221a <HAL_RCC_OscConfig+0xba>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	23a0      	movs	r3, #160	; 0xa0
 80021de:	02db      	lsls	r3, r3, #11
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d10e      	bne.n	8002202 <HAL_RCC_OscConfig+0xa2>
 80021e4:	4ba9      	ldr	r3, [pc, #676]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4ba8      	ldr	r3, [pc, #672]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	02c9      	lsls	r1, r1, #11
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	4ba6      	ldr	r3, [pc, #664]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4ba5      	ldr	r3, [pc, #660]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	0249      	lsls	r1, r1, #9
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e00b      	b.n	800221a <HAL_RCC_OscConfig+0xba>
 8002202:	4ba2      	ldr	r3, [pc, #648]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4ba1      	ldr	r3, [pc, #644]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002208:	49a1      	ldr	r1, [pc, #644]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 800220a:	400a      	ands	r2, r1
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	4b9f      	ldr	r3, [pc, #636]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b9e      	ldr	r3, [pc, #632]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002214:	499f      	ldr	r1, [pc, #636]	; (8002494 <HAL_RCC_OscConfig+0x334>)
 8002216:	400a      	ands	r2, r1
 8002218:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d014      	beq.n	800224c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7fe fec3 	bl	8000fac <HAL_GetTick>
 8002226:	0003      	movs	r3, r0
 8002228:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222c:	f7fe febe 	bl	8000fac <HAL_GetTick>
 8002230:	0002      	movs	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e28d      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800223e:	4b93      	ldr	r3, [pc, #588]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	029b      	lsls	r3, r3, #10
 8002246:	4013      	ands	r3, r2
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0xcc>
 800224a:	e015      	b.n	8002278 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe feae 	bl	8000fac <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002256:	f7fe fea9 	bl	8000fac <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b64      	cmp	r3, #100	; 0x64
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e278      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002268:	4b88      	ldr	r3, [pc, #544]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	029b      	lsls	r3, r3, #10
 8002270:	4013      	ands	r3, r2
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0xf6>
 8002274:	e000      	b.n	8002278 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002276:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2202      	movs	r2, #2
 800227e:	4013      	ands	r3, r2
 8002280:	d100      	bne.n	8002284 <HAL_RCC_OscConfig+0x124>
 8002282:	e099      	b.n	80023b8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002284:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2238      	movs	r2, #56	; 0x38
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800228e:	4b7f      	ldr	r3, [pc, #508]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2203      	movs	r2, #3
 8002294:	4013      	ands	r3, r2
 8002296:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b10      	cmp	r3, #16
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_OscConfig+0x144>
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d002      	beq.n	80022aa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d135      	bne.n	8002316 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022aa:	4b78      	ldr	r3, [pc, #480]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4013      	ands	r3, r2
 80022b4:	d005      	beq.n	80022c2 <HAL_RCC_OscConfig+0x162>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e24b      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c2:	4b72      	ldr	r3, [pc, #456]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4a74      	ldr	r2, [pc, #464]	; (8002498 <HAL_RCC_OscConfig+0x338>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	021a      	lsls	r2, r3, #8
 80022d2:	4b6e      	ldr	r3, [pc, #440]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d112      	bne.n	8002304 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022de:	4b6b      	ldr	r3, [pc, #428]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a6e      	ldr	r2, [pc, #440]	; (800249c <HAL_RCC_OscConfig+0x33c>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	0019      	movs	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	4b67      	ldr	r3, [pc, #412]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80022f2:	4b66      	ldr	r3, [pc, #408]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0adb      	lsrs	r3, r3, #11
 80022f8:	2207      	movs	r2, #7
 80022fa:	4013      	ands	r3, r2
 80022fc:	4a68      	ldr	r2, [pc, #416]	; (80024a0 <HAL_RCC_OscConfig+0x340>)
 80022fe:	40da      	lsrs	r2, r3
 8002300:	4b68      	ldr	r3, [pc, #416]	; (80024a4 <HAL_RCC_OscConfig+0x344>)
 8002302:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002304:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <HAL_RCC_OscConfig+0x348>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0018      	movs	r0, r3
 800230a:	f7fe fdf3 	bl	8000ef4 <HAL_InitTick>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d051      	beq.n	80023b6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e221      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d030      	beq.n	8002380 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800231e:	4b5b      	ldr	r3, [pc, #364]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a5e      	ldr	r2, [pc, #376]	; (800249c <HAL_RCC_OscConfig+0x33c>)
 8002324:	4013      	ands	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	4b57      	ldr	r3, [pc, #348]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002332:	4b56      	ldr	r3, [pc, #344]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b55      	ldr	r3, [pc, #340]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	0049      	lsls	r1, r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe fe34 	bl	8000fac <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234a:	f7fe fe2f 	bl	8000fac <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e1fe      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235c:	4b4b      	ldr	r3, [pc, #300]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4013      	ands	r3, r2
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b48      	ldr	r3, [pc, #288]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a4a      	ldr	r2, [pc, #296]	; (8002498 <HAL_RCC_OscConfig+0x338>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	021a      	lsls	r2, r3, #8
 8002378:	4b44      	ldr	r3, [pc, #272]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	e01b      	b.n	80023b8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002380:	4b42      	ldr	r3, [pc, #264]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b41      	ldr	r3, [pc, #260]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002386:	4949      	ldr	r1, [pc, #292]	; (80024ac <HAL_RCC_OscConfig+0x34c>)
 8002388:	400a      	ands	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe fe0e 	bl	8000fac <HAL_GetTick>
 8002390:	0003      	movs	r3, r0
 8002392:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002396:	f7fe fe09 	bl	8000fac <HAL_GetTick>
 800239a:	0002      	movs	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1d8      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023a8:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4013      	ands	r3, r2
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x236>
 80023b4:	e000      	b.n	80023b8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2208      	movs	r2, #8
 80023be:	4013      	ands	r3, r2
 80023c0:	d047      	beq.n	8002452 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80023c2:	4b32      	ldr	r3, [pc, #200]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2238      	movs	r2, #56	; 0x38
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b18      	cmp	r3, #24
 80023cc:	d10a      	bne.n	80023e4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80023ce:	4b2f      	ldr	r3, [pc, #188]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80023d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d2:	2202      	movs	r2, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d03c      	beq.n	8002452 <HAL_RCC_OscConfig+0x2f2>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d138      	bne.n	8002452 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e1ba      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d019      	beq.n	8002420 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80023ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023f0:	4b26      	ldr	r3, [pc, #152]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 80023f2:	2101      	movs	r1, #1
 80023f4:	430a      	orrs	r2, r1
 80023f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7fe fdd8 	bl	8000fac <HAL_GetTick>
 80023fc:	0003      	movs	r3, r0
 80023fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002402:	f7fe fdd3 	bl	8000fac <HAL_GetTick>
 8002406:	0002      	movs	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e1a2      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002414:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002418:	2202      	movs	r2, #2
 800241a:	4013      	ands	r3, r2
 800241c:	d0f1      	beq.n	8002402 <HAL_RCC_OscConfig+0x2a2>
 800241e:	e018      	b.n	8002452 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002422:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002426:	2101      	movs	r1, #1
 8002428:	438a      	bics	r2, r1
 800242a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fdbe 	bl	8000fac <HAL_GetTick>
 8002430:	0003      	movs	r3, r0
 8002432:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002436:	f7fe fdb9 	bl	8000fac <HAL_GetTick>
 800243a:	0002      	movs	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e188      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 800244a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244c:	2202      	movs	r2, #2
 800244e:	4013      	ands	r3, r2
 8002450:	d1f1      	bne.n	8002436 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2204      	movs	r2, #4
 8002458:	4013      	ands	r3, r2
 800245a:	d100      	bne.n	800245e <HAL_RCC_OscConfig+0x2fe>
 800245c:	e0c6      	b.n	80025ec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245e:	231f      	movs	r3, #31
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2238      	movs	r2, #56	; 0x38
 800246c:	4013      	ands	r3, r2
 800246e:	2b20      	cmp	r3, #32
 8002470:	d11e      	bne.n	80024b0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	2202      	movs	r2, #2
 8002478:	4013      	ands	r3, r2
 800247a:	d100      	bne.n	800247e <HAL_RCC_OscConfig+0x31e>
 800247c:	e0b6      	b.n	80025ec <HAL_RCC_OscConfig+0x48c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d000      	beq.n	8002488 <HAL_RCC_OscConfig+0x328>
 8002486:	e0b1      	b.n	80025ec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e166      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
 800248c:	40021000 	.word	0x40021000
 8002490:	fffeffff 	.word	0xfffeffff
 8002494:	fffbffff 	.word	0xfffbffff
 8002498:	ffff80ff 	.word	0xffff80ff
 800249c:	ffffc7ff 	.word	0xffffc7ff
 80024a0:	00f42400 	.word	0x00f42400
 80024a4:	20000000 	.word	0x20000000
 80024a8:	20000004 	.word	0x20000004
 80024ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024b0:	4bac      	ldr	r3, [pc, #688]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80024b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	055b      	lsls	r3, r3, #21
 80024b8:	4013      	ands	r3, r2
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_OscConfig+0x360>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x362>
 80024c0:	2300      	movs	r3, #0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d011      	beq.n	80024ea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4ba7      	ldr	r3, [pc, #668]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80024c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ca:	4ba6      	ldr	r3, [pc, #664]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80024cc:	2180      	movs	r1, #128	; 0x80
 80024ce:	0549      	lsls	r1, r1, #21
 80024d0:	430a      	orrs	r2, r1
 80024d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80024d4:	4ba3      	ldr	r3, [pc, #652]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80024d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	4013      	ands	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80024e2:	231f      	movs	r3, #31
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	2201      	movs	r2, #1
 80024e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ea:	4b9f      	ldr	r3, [pc, #636]	; (8002768 <HAL_RCC_OscConfig+0x608>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	d11a      	bne.n	800252c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f6:	4b9c      	ldr	r3, [pc, #624]	; (8002768 <HAL_RCC_OscConfig+0x608>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b9b      	ldr	r3, [pc, #620]	; (8002768 <HAL_RCC_OscConfig+0x608>)
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	0049      	lsls	r1, r1, #1
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002504:	f7fe fd52 	bl	8000fac <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7fe fd4d 	bl	8000fac <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e11c      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002520:	4b91      	ldr	r3, [pc, #580]	; (8002768 <HAL_RCC_OscConfig+0x608>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4013      	ands	r3, r2
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x3e2>
 8002534:	4b8b      	ldr	r3, [pc, #556]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 8002536:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002538:	4b8a      	ldr	r3, [pc, #552]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 800253a:	2101      	movs	r1, #1
 800253c:	430a      	orrs	r2, r1
 800253e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002540:	e01c      	b.n	800257c <HAL_RCC_OscConfig+0x41c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b05      	cmp	r3, #5
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x404>
 800254a:	4b86      	ldr	r3, [pc, #536]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 800254c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800254e:	4b85      	ldr	r3, [pc, #532]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 8002550:	2104      	movs	r1, #4
 8002552:	430a      	orrs	r2, r1
 8002554:	65da      	str	r2, [r3, #92]	; 0x5c
 8002556:	4b83      	ldr	r3, [pc, #524]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 8002558:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800255a:	4b82      	ldr	r3, [pc, #520]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 800255c:	2101      	movs	r1, #1
 800255e:	430a      	orrs	r2, r1
 8002560:	65da      	str	r2, [r3, #92]	; 0x5c
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0x41c>
 8002564:	4b7f      	ldr	r3, [pc, #508]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 8002566:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002568:	4b7e      	ldr	r3, [pc, #504]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 800256a:	2101      	movs	r1, #1
 800256c:	438a      	bics	r2, r1
 800256e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002570:	4b7c      	ldr	r3, [pc, #496]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 8002572:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002574:	4b7b      	ldr	r3, [pc, #492]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 8002576:	2104      	movs	r1, #4
 8002578:	438a      	bics	r2, r1
 800257a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d014      	beq.n	80025ae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe fd12 	bl	8000fac <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258c:	e009      	b.n	80025a2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fd0d 	bl	8000fac <HAL_GetTick>
 8002592:	0002      	movs	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	4a74      	ldr	r2, [pc, #464]	; (800276c <HAL_RCC_OscConfig+0x60c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0db      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a2:	4b70      	ldr	r3, [pc, #448]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	2202      	movs	r2, #2
 80025a8:	4013      	ands	r3, r2
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x42e>
 80025ac:	e013      	b.n	80025d6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7fe fcfd 	bl	8000fac <HAL_GetTick>
 80025b2:	0003      	movs	r3, r0
 80025b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025b6:	e009      	b.n	80025cc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7fe fcf8 	bl	8000fac <HAL_GetTick>
 80025bc:	0002      	movs	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	4a6a      	ldr	r2, [pc, #424]	; (800276c <HAL_RCC_OscConfig+0x60c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e0c6      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025cc:	4b65      	ldr	r3, [pc, #404]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	2202      	movs	r2, #2
 80025d2:	4013      	ands	r3, r2
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80025d6:	231f      	movs	r3, #31
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80025e0:	4b60      	ldr	r3, [pc, #384]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80025e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025e4:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80025e6:	4962      	ldr	r1, [pc, #392]	; (8002770 <HAL_RCC_OscConfig+0x610>)
 80025e8:	400a      	ands	r2, r1
 80025ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d100      	bne.n	80025f6 <HAL_RCC_OscConfig+0x496>
 80025f4:	e0b0      	b.n	8002758 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f6:	4b5b      	ldr	r3, [pc, #364]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2238      	movs	r2, #56	; 0x38
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d100      	bne.n	8002604 <HAL_RCC_OscConfig+0x4a4>
 8002602:	e078      	b.n	80026f6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d153      	bne.n	80026b4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b55      	ldr	r3, [pc, #340]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b54      	ldr	r3, [pc, #336]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 8002612:	4958      	ldr	r1, [pc, #352]	; (8002774 <HAL_RCC_OscConfig+0x614>)
 8002614:	400a      	ands	r2, r1
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe fcc8 	bl	8000fac <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7fe fcc3 	bl	8000fac <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e092      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002634:	4b4b      	ldr	r3, [pc, #300]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	049b      	lsls	r3, r3, #18
 800263c:	4013      	ands	r3, r2
 800263e:	d1f0      	bne.n	8002622 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002640:	4b48      	ldr	r3, [pc, #288]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a4c      	ldr	r2, [pc, #304]	; (8002778 <HAL_RCC_OscConfig+0x618>)
 8002646:	4013      	ands	r3, r2
 8002648:	0019      	movs	r1, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1a      	ldr	r2, [r3, #32]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	431a      	orrs	r2, r3
 8002668:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 800266a:	430a      	orrs	r2, r1
 800266c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800266e:	4b3d      	ldr	r3, [pc, #244]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b3c      	ldr	r3, [pc, #240]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 8002674:	2180      	movs	r1, #128	; 0x80
 8002676:	0449      	lsls	r1, r1, #17
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800267c:	4b39      	ldr	r3, [pc, #228]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	4b38      	ldr	r3, [pc, #224]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 8002682:	2180      	movs	r1, #128	; 0x80
 8002684:	0549      	lsls	r1, r1, #21
 8002686:	430a      	orrs	r2, r1
 8002688:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7fe fc8f 	bl	8000fac <HAL_GetTick>
 800268e:	0003      	movs	r3, r0
 8002690:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002694:	f7fe fc8a 	bl	8000fac <HAL_GetTick>
 8002698:	0002      	movs	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e059      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a6:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	049b      	lsls	r3, r3, #18
 80026ae:	4013      	ands	r3, r2
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x534>
 80026b2:	e051      	b.n	8002758 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b4:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80026ba:	492e      	ldr	r1, [pc, #184]	; (8002774 <HAL_RCC_OscConfig+0x614>)
 80026bc:	400a      	ands	r2, r1
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fc74 	bl	8000fac <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ca:	f7fe fc6f 	bl	8000fac <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e03e      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026dc:	4b21      	ldr	r3, [pc, #132]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	049b      	lsls	r3, r3, #18
 80026e4:	4013      	ands	r3, r2
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80026e8:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 80026ee:	4923      	ldr	r1, [pc, #140]	; (800277c <HAL_RCC_OscConfig+0x61c>)
 80026f0:	400a      	ands	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]
 80026f4:	e030      	b.n	8002758 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e02b      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <HAL_RCC_OscConfig+0x604>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2203      	movs	r2, #3
 800270c:	401a      	ands	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	429a      	cmp	r2, r3
 8002714:	d11e      	bne.n	8002754 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2270      	movs	r2, #112	; 0x70
 800271a:	401a      	ands	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d117      	bne.n	8002754 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	23fe      	movs	r3, #254	; 0xfe
 8002728:	01db      	lsls	r3, r3, #7
 800272a:	401a      	ands	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d10e      	bne.n	8002754 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	23f8      	movs	r3, #248	; 0xf8
 800273a:	039b      	lsls	r3, r3, #14
 800273c:	401a      	ands	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002742:	429a      	cmp	r2, r3
 8002744:	d106      	bne.n	8002754 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	0f5b      	lsrs	r3, r3, #29
 800274a:	075a      	lsls	r2, r3, #29
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b008      	add	sp, #32
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	40021000 	.word	0x40021000
 8002768:	40007000 	.word	0x40007000
 800276c:	00001388 	.word	0x00001388
 8002770:	efffffff 	.word	0xefffffff
 8002774:	feffffff 	.word	0xfeffffff
 8002778:	1fc1808c 	.word	0x1fc1808c
 800277c:	effefffc 	.word	0xeffefffc

08002780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0e9      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b76      	ldr	r3, [pc, #472]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2207      	movs	r2, #7
 800279a:	4013      	ands	r3, r2
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d91e      	bls.n	80027e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b73      	ldr	r3, [pc, #460]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2207      	movs	r2, #7
 80027a8:	4393      	bics	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	4b70      	ldr	r3, [pc, #448]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027b4:	f7fe fbfa 	bl	8000fac <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027bc:	e009      	b.n	80027d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027be:	f7fe fbf5 	bl	8000fac <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	4a6a      	ldr	r2, [pc, #424]	; (8002974 <HAL_RCC_ClockConfig+0x1f4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e0ca      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027d2:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2207      	movs	r2, #7
 80027d8:	4013      	ands	r3, r2
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d1ee      	bne.n	80027be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2202      	movs	r2, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	d015      	beq.n	8002816 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2204      	movs	r2, #4
 80027f0:	4013      	ands	r3, r2
 80027f2:	d006      	beq.n	8002802 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027f4:	4b60      	ldr	r3, [pc, #384]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	4b5f      	ldr	r3, [pc, #380]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 80027fa:	21e0      	movs	r1, #224	; 0xe0
 80027fc:	01c9      	lsls	r1, r1, #7
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002802:	4b5d      	ldr	r3, [pc, #372]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4a5d      	ldr	r2, [pc, #372]	; (800297c <HAL_RCC_ClockConfig+0x1fc>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	4b59      	ldr	r3, [pc, #356]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002812:	430a      	orrs	r2, r1
 8002814:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2201      	movs	r2, #1
 800281c:	4013      	ands	r3, r2
 800281e:	d057      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002828:	4b53      	ldr	r3, [pc, #332]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	029b      	lsls	r3, r3, #10
 8002830:	4013      	ands	r3, r2
 8002832:	d12b      	bne.n	800288c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e097      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d107      	bne.n	8002850 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002840:	4b4d      	ldr	r3, [pc, #308]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	049b      	lsls	r3, r3, #18
 8002848:	4013      	ands	r3, r2
 800284a:	d11f      	bne.n	800288c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e08b      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d107      	bne.n	8002868 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002858:	4b47      	ldr	r3, [pc, #284]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4013      	ands	r3, r2
 8002862:	d113      	bne.n	800288c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e07f      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d106      	bne.n	800287e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002870:	4b41      	ldr	r3, [pc, #260]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002874:	2202      	movs	r2, #2
 8002876:	4013      	ands	r3, r2
 8002878:	d108      	bne.n	800288c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e074      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287e:	4b3e      	ldr	r3, [pc, #248]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	2202      	movs	r2, #2
 8002884:	4013      	ands	r3, r2
 8002886:	d101      	bne.n	800288c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e06d      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800288c:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2207      	movs	r2, #7
 8002892:	4393      	bics	r3, r2
 8002894:	0019      	movs	r1, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4b37      	ldr	r3, [pc, #220]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 800289c:	430a      	orrs	r2, r1
 800289e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a0:	f7fe fb84 	bl	8000fac <HAL_GetTick>
 80028a4:	0003      	movs	r3, r0
 80028a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a8:	e009      	b.n	80028be <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028aa:	f7fe fb7f 	bl	8000fac <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	4a2f      	ldr	r2, [pc, #188]	; (8002974 <HAL_RCC_ClockConfig+0x1f4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e054      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2238      	movs	r2, #56	; 0x38
 80028c4:	401a      	ands	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1ec      	bne.n	80028aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2207      	movs	r2, #7
 80028d6:	4013      	ands	r3, r2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d21e      	bcs.n	800291c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2207      	movs	r2, #7
 80028e4:	4393      	bics	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028f0:	f7fe fb5c 	bl	8000fac <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028f8:	e009      	b.n	800290e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fa:	f7fe fb57 	bl	8000fac <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <HAL_RCC_ClockConfig+0x1f4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e02c      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_RCC_ClockConfig+0x1f0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2207      	movs	r2, #7
 8002914:	4013      	ands	r3, r2
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d1ee      	bne.n	80028fa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2204      	movs	r2, #4
 8002922:	4013      	ands	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002926:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <HAL_RCC_ClockConfig+0x200>)
 800292c:	4013      	ands	r3, r2
 800292e:	0019      	movs	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800293a:	f000 f829 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 800293e:	0001      	movs	r1, r0
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_RCC_ClockConfig+0x1f8>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	220f      	movs	r2, #15
 8002948:	401a      	ands	r2, r3
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x204>)
 800294c:	0092      	lsls	r2, r2, #2
 800294e:	58d3      	ldr	r3, [r2, r3]
 8002950:	221f      	movs	r2, #31
 8002952:	4013      	ands	r3, r2
 8002954:	000a      	movs	r2, r1
 8002956:	40da      	lsrs	r2, r3
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_ClockConfig+0x208>)
 800295a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_ClockConfig+0x20c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	0018      	movs	r0, r3
 8002962:	f7fe fac7 	bl	8000ef4 <HAL_InitTick>
 8002966:	0003      	movs	r3, r0
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b004      	add	sp, #16
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40022000 	.word	0x40022000
 8002974:	00001388 	.word	0x00001388
 8002978:	40021000 	.word	0x40021000
 800297c:	fffff0ff 	.word	0xfffff0ff
 8002980:	ffff8fff 	.word	0xffff8fff
 8002984:	0800607c 	.word	0x0800607c
 8002988:	20000000 	.word	0x20000000
 800298c:	20000004 	.word	0x20000004

08002990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002996:	4b3c      	ldr	r3, [pc, #240]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2238      	movs	r2, #56	; 0x38
 800299c:	4013      	ands	r3, r2
 800299e:	d10f      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80029a0:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0adb      	lsrs	r3, r3, #11
 80029a6:	2207      	movs	r2, #7
 80029a8:	4013      	ands	r3, r2
 80029aa:	2201      	movs	r2, #1
 80029ac:	409a      	lsls	r2, r3
 80029ae:	0013      	movs	r3, r2
 80029b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80029b2:	6839      	ldr	r1, [r7, #0]
 80029b4:	4835      	ldr	r0, [pc, #212]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xfc>)
 80029b6:	f7fd fba3 	bl	8000100 <__udivsi3>
 80029ba:	0003      	movs	r3, r0
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	e05d      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c0:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2238      	movs	r2, #56	; 0x38
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d102      	bne.n	80029d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029cc:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x100>)
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	e054      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2238      	movs	r2, #56	; 0x38
 80029d8:	4013      	ands	r3, r2
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d138      	bne.n	8002a50 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2203      	movs	r2, #3
 80029e4:	4013      	ands	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e8:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	2207      	movs	r2, #7
 80029f0:	4013      	ands	r3, r2
 80029f2:	3301      	adds	r3, #1
 80029f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d10d      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	4824      	ldr	r0, [pc, #144]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a00:	f7fd fb7e 	bl	8000100 <__udivsi3>
 8002a04:	0003      	movs	r3, r0
 8002a06:	0019      	movs	r1, r3
 8002a08:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	227f      	movs	r2, #127	; 0x7f
 8002a10:	4013      	ands	r3, r2
 8002a12:	434b      	muls	r3, r1
 8002a14:	617b      	str	r3, [r7, #20]
        break;
 8002a16:	e00d      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	481c      	ldr	r0, [pc, #112]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a1c:	f7fd fb70 	bl	8000100 <__udivsi3>
 8002a20:	0003      	movs	r3, r0
 8002a22:	0019      	movs	r1, r3
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	227f      	movs	r2, #127	; 0x7f
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	434b      	muls	r3, r1
 8002a30:	617b      	str	r3, [r7, #20]
        break;
 8002a32:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0f5b      	lsrs	r3, r3, #29
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	3301      	adds	r3, #1
 8002a40:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	6978      	ldr	r0, [r7, #20]
 8002a46:	f7fd fb5b 	bl	8000100 <__udivsi3>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	e015      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a50:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2238      	movs	r2, #56	; 0x38
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d103      	bne.n	8002a64 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2238      	movs	r2, #56	; 0x38
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b18      	cmp	r3, #24
 8002a6e:	d103      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a70:	23fa      	movs	r3, #250	; 0xfa
 8002a72:	01db      	lsls	r3, r3, #7
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	e001      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a7c:	693b      	ldr	r3, [r7, #16]
}
 8002a7e:	0018      	movs	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b006      	add	sp, #24
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	007a1200 	.word	0x007a1200

08002a94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b02      	ldr	r3, [pc, #8]	; (8002aa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	20000000 	.word	0x20000000

08002aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002aac:	f7ff fff2 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab0:	0004      	movs	r4, r0
 8002ab2:	f7ff fb49 	bl	8002148 <LL_RCC_GetAPB1Prescaler>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	0b1a      	lsrs	r2, r3, #12
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002abc:	0092      	lsls	r2, r2, #2
 8002abe:	58d3      	ldr	r3, [r2, r3]
 8002ac0:	221f      	movs	r2, #31
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	40dc      	lsrs	r4, r3
 8002ac6:	0023      	movs	r3, r4
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	080060bc 	.word	0x080060bc

08002ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002adc:	2313      	movs	r3, #19
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ae4:	2312      	movs	r3, #18
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	029b      	lsls	r3, r3, #10
 8002af4:	4013      	ands	r3, r2
 8002af6:	d100      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002af8:	e0a3      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afa:	2011      	movs	r0, #17
 8002afc:	183b      	adds	r3, r7, r0
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b7f      	ldr	r3, [pc, #508]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	055b      	lsls	r3, r3, #21
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d110      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	4b7c      	ldr	r3, [pc, #496]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b12:	4b7b      	ldr	r3, [pc, #492]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b14:	2180      	movs	r1, #128	; 0x80
 8002b16:	0549      	lsls	r1, r1, #21
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b1c:	4b78      	ldr	r3, [pc, #480]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	055b      	lsls	r3, r3, #21
 8002b24:	4013      	ands	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2a:	183b      	adds	r3, r7, r0
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b30:	4b74      	ldr	r3, [pc, #464]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b73      	ldr	r3, [pc, #460]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b36:	2180      	movs	r1, #128	; 0x80
 8002b38:	0049      	lsls	r1, r1, #1
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b3e:	f7fe fa35 	bl	8000fac <HAL_GetTick>
 8002b42:	0003      	movs	r3, r0
 8002b44:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b46:	e00b      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b48:	f7fe fa30 	bl	8000fac <HAL_GetTick>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d904      	bls.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002b56:	2313      	movs	r3, #19
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	701a      	strb	r2, [r3, #0]
        break;
 8002b5e:	e005      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b60:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d0ed      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002b6c:	2313      	movs	r3, #19
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d154      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b76:	4b62      	ldr	r3, [pc, #392]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b7a:	23c0      	movs	r3, #192	; 0xc0
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4013      	ands	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d019      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d014      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b92:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	4a5c      	ldr	r2, [pc, #368]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b9c:	4b58      	ldr	r3, [pc, #352]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ba0:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ba2:	2180      	movs	r1, #128	; 0x80
 8002ba4:	0249      	lsls	r1, r1, #9
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002baa:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bae:	4b54      	ldr	r3, [pc, #336]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bb0:	4956      	ldr	r1, [pc, #344]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bb6:	4b52      	ldr	r3, [pc, #328]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d016      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe f9f2 	bl	8000fac <HAL_GetTick>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bcc:	e00c      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7fe f9ed 	bl	8000fac <HAL_GetTick>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	4a4d      	ldr	r2, [pc, #308]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d904      	bls.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002bde:	2313      	movs	r3, #19
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	2203      	movs	r2, #3
 8002be4:	701a      	strb	r2, [r3, #0]
            break;
 8002be6:	e004      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be8:	4b45      	ldr	r3, [pc, #276]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	2202      	movs	r2, #2
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d0ed      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002bf2:	2313      	movs	r3, #19
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bfc:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	4a41      	ldr	r2, [pc, #260]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	4b3d      	ldr	r3, [pc, #244]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c10:	e00c      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c12:	2312      	movs	r3, #18
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	2213      	movs	r2, #19
 8002c18:	18ba      	adds	r2, r7, r2
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	e005      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c20:	2312      	movs	r3, #18
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2213      	movs	r2, #19
 8002c26:	18ba      	adds	r2, r7, r2
 8002c28:	7812      	ldrb	r2, [r2, #0]
 8002c2a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c2c:	2311      	movs	r3, #17
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c3a:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c3c:	4935      	ldr	r1, [pc, #212]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c3e:	400a      	ands	r2, r1
 8002c40:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2201      	movs	r2, #1
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d009      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c4c:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	2203      	movs	r2, #3
 8002c52:	4393      	bics	r3, r2
 8002c54:	0019      	movs	r1, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2220      	movs	r2, #32
 8002c66:	4013      	ands	r3, r2
 8002c68:	d009      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c6a:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	4013      	ands	r3, r2
 8002c88:	d015      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c8a:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	0899      	lsrs	r1, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	05db      	lsls	r3, r3, #23
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ca8:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cae:	2180      	movs	r1, #128	; 0x80
 8002cb0:	0249      	lsls	r1, r1, #9
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d016      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	01db      	lsls	r3, r3, #7
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d106      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ce2:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	0249      	lsls	r1, r1, #9
 8002cec:	430a      	orrs	r2, r1
 8002cee:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002cf0:	2312      	movs	r3, #18
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	781b      	ldrb	r3, [r3, #0]
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b006      	add	sp, #24
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40007000 	.word	0x40007000
 8002d08:	fffffcff 	.word	0xfffffcff
 8002d0c:	fffeffff 	.word	0xfffeffff
 8002d10:	00001388 	.word	0x00001388
 8002d14:	efffffff 	.word	0xefffffff
 8002d18:	ffffcfff 	.word	0xffffcfff
 8002d1c:	ffff3fff 	.word	0xffff3fff

08002d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e0a8      	b.n	8002e84 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	2382      	movs	r3, #130	; 0x82
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d009      	beq.n	8002d5a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	61da      	str	r2, [r3, #28]
 8002d4c:	e005      	b.n	8002d5a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	225d      	movs	r2, #93	; 0x5d
 8002d64:	5c9b      	ldrb	r3, [r3, r2]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d107      	bne.n	8002d7c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	225c      	movs	r2, #92	; 0x5c
 8002d70:	2100      	movs	r1, #0
 8002d72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7fd fe00 	bl	800097c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	225d      	movs	r2, #93	; 0x5d
 8002d80:	2102      	movs	r1, #2
 8002d82:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2140      	movs	r1, #64	; 0x40
 8002d90:	438a      	bics	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	23e0      	movs	r3, #224	; 0xe0
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d902      	bls.n	8002da6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e002      	b.n	8002dac <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	015b      	lsls	r3, r3, #5
 8002daa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	23f0      	movs	r3, #240	; 0xf0
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d008      	beq.n	8002dca <HAL_SPI_Init+0xaa>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	23e0      	movs	r3, #224	; 0xe0
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d002      	beq.n	8002dca <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	2382      	movs	r3, #130	; 0x82
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6899      	ldr	r1, [r3, #8]
 8002dd8:	2384      	movs	r3, #132	; 0x84
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	400b      	ands	r3, r1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	2102      	movs	r1, #2
 8002de6:	400b      	ands	r3, r1
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	2101      	movs	r1, #1
 8002df0:	400b      	ands	r3, r1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6999      	ldr	r1, [r3, #24]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	400b      	ands	r3, r1
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	2138      	movs	r1, #56	; 0x38
 8002e06:	400b      	ands	r3, r1
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	400b      	ands	r3, r1
 8002e12:	431a      	orrs	r2, r3
 8002e14:	0011      	movs	r1, r2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	019b      	lsls	r3, r3, #6
 8002e1e:	401a      	ands	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	2204      	movs	r2, #4
 8002e30:	401a      	ands	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2110      	movs	r1, #16
 8002e38:	400b      	ands	r3, r1
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	2108      	movs	r1, #8
 8002e42:	400b      	ands	r3, r1
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68d9      	ldr	r1, [r3, #12]
 8002e4a:	23f0      	movs	r3, #240	; 0xf0
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	400b      	ands	r3, r1
 8002e50:	431a      	orrs	r2, r3
 8002e52:	0011      	movs	r1, r2
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	015b      	lsls	r3, r3, #5
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4907      	ldr	r1, [pc, #28]	; (8002e8c <HAL_SPI_Init+0x16c>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	225d      	movs	r2, #93	; 0x5d
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b004      	add	sp, #16
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	fffff7ff 	.word	0xfffff7ff

08002e90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	1dbb      	adds	r3, r7, #6
 8002e9e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ea0:	231f      	movs	r3, #31
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	225c      	movs	r2, #92	; 0x5c
 8002eac:	5c9b      	ldrb	r3, [r3, r2]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_SPI_Transmit+0x26>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e147      	b.n	8003146 <HAL_SPI_Transmit+0x2b6>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	225c      	movs	r2, #92	; 0x5c
 8002eba:	2101      	movs	r1, #1
 8002ebc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ebe:	f7fe f875 	bl	8000fac <HAL_GetTick>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002ec6:	2316      	movs	r3, #22
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	1dba      	adds	r2, r7, #6
 8002ecc:	8812      	ldrh	r2, [r2, #0]
 8002ece:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	225d      	movs	r2, #93	; 0x5d
 8002ed4:	5c9b      	ldrb	r3, [r3, r2]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d004      	beq.n	8002ee6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002edc:	231f      	movs	r3, #31
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ee4:	e128      	b.n	8003138 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_SPI_Transmit+0x64>
 8002eec:	1dbb      	adds	r3, r7, #6
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d104      	bne.n	8002efe <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002ef4:	231f      	movs	r3, #31
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
    goto error;
 8002efc:	e11c      	b.n	8003138 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	225d      	movs	r2, #93	; 0x5d
 8002f02:	2103      	movs	r1, #3
 8002f04:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1dba      	adds	r2, r7, #6
 8002f16:	8812      	ldrh	r2, [r2, #0]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1dba      	adds	r2, r7, #6
 8002f1e:	8812      	ldrh	r2, [r2, #0]
 8002f20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2244      	movs	r2, #68	; 0x44
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2246      	movs	r2, #70	; 0x46
 8002f34:	2100      	movs	r1, #0
 8002f36:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d110      	bne.n	8002f72 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2140      	movs	r1, #64	; 0x40
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2180      	movs	r1, #128	; 0x80
 8002f6c:	01c9      	lsls	r1, r1, #7
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2240      	movs	r2, #64	; 0x40
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	d007      	beq.n	8002f90 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2140      	movs	r1, #64	; 0x40
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	23e0      	movs	r3, #224	; 0xe0
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d952      	bls.n	8003042 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d004      	beq.n	8002fae <HAL_SPI_Transmit+0x11e>
 8002fa4:	2316      	movs	r3, #22
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d143      	bne.n	8003036 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	881a      	ldrh	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	1c9a      	adds	r2, r3, #2
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fd2:	e030      	b.n	8003036 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d112      	bne.n	8003008 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	881a      	ldrh	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	1c9a      	adds	r2, r3, #2
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003006:	e016      	b.n	8003036 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003008:	f7fd ffd0 	bl	8000fac <HAL_GetTick>
 800300c:	0002      	movs	r2, r0
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d802      	bhi.n	800301e <HAL_SPI_Transmit+0x18e>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	d102      	bne.n	8003024 <HAL_SPI_Transmit+0x194>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d108      	bne.n	8003036 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003024:	231f      	movs	r3, #31
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2203      	movs	r2, #3
 800302a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	225d      	movs	r2, #93	; 0x5d
 8003030:	2101      	movs	r1, #1
 8003032:	5499      	strb	r1, [r3, r2]
          goto error;
 8003034:	e080      	b.n	8003138 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1c9      	bne.n	8002fd4 <HAL_SPI_Transmit+0x144>
 8003040:	e053      	b.n	80030ea <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d004      	beq.n	8003054 <HAL_SPI_Transmit+0x1c4>
 800304a:	2316      	movs	r3, #22
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d145      	bne.n	80030e0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	7812      	ldrb	r2, [r2, #0]
 8003060:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800307a:	e031      	b.n	80030e0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2202      	movs	r2, #2
 8003084:	4013      	ands	r3, r2
 8003086:	2b02      	cmp	r3, #2
 8003088:	d113      	bne.n	80030b2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	330c      	adds	r3, #12
 8003094:	7812      	ldrb	r2, [r2, #0]
 8003096:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030b0:	e016      	b.n	80030e0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030b2:	f7fd ff7b 	bl	8000fac <HAL_GetTick>
 80030b6:	0002      	movs	r2, r0
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d802      	bhi.n	80030c8 <HAL_SPI_Transmit+0x238>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	3301      	adds	r3, #1
 80030c6:	d102      	bne.n	80030ce <HAL_SPI_Transmit+0x23e>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d108      	bne.n	80030e0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80030ce:	231f      	movs	r3, #31
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	2203      	movs	r2, #3
 80030d4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	225d      	movs	r2, #93	; 0x5d
 80030da:	2101      	movs	r1, #1
 80030dc:	5499      	strb	r1, [r3, r2]
          goto error;
 80030de:	e02b      	b.n	8003138 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1c8      	bne.n	800307c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f000 f95d 	bl	80033b0 <SPI_EndRxTxTransaction>
 80030f6:	1e03      	subs	r3, r0, #0
 80030f8:	d002      	beq.n	8003100 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10a      	bne.n	800311e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003108:	2300      	movs	r3, #0
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003122:	2b00      	cmp	r3, #0
 8003124:	d004      	beq.n	8003130 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003126:	231f      	movs	r3, #31
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	e003      	b.n	8003138 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	225d      	movs	r2, #93	; 0x5d
 8003134:	2101      	movs	r1, #1
 8003136:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	225c      	movs	r2, #92	; 0x5c
 800313c:	2100      	movs	r1, #0
 800313e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003140:	231f      	movs	r3, #31
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b008      	add	sp, #32
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	1dfb      	adds	r3, r7, #7
 800315e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003160:	f7fd ff24 	bl	8000fac <HAL_GetTick>
 8003164:	0002      	movs	r2, r0
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003170:	f7fd ff1c 	bl	8000fac <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003178:	4b3a      	ldr	r3, [pc, #232]	; (8003264 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	015b      	lsls	r3, r3, #5
 800317e:	0d1b      	lsrs	r3, r3, #20
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	4353      	muls	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003186:	e058      	b.n	800323a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	d055      	beq.n	800323a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800318e:	f7fd ff0d 	bl	8000fac <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	429a      	cmp	r2, r3
 800319c:	d902      	bls.n	80031a4 <SPI_WaitFlagStateUntilTimeout+0x54>
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d142      	bne.n	800322a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	21e0      	movs	r1, #224	; 0xe0
 80031b0:	438a      	bics	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	2382      	movs	r3, #130	; 0x82
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	429a      	cmp	r2, r3
 80031be:	d113      	bne.n	80031e8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d005      	beq.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d107      	bne.n	80031e8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2140      	movs	r1, #64	; 0x40
 80031e4:	438a      	bics	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	019b      	lsls	r3, r3, #6
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d110      	bne.n	8003216 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	491a      	ldr	r1, [pc, #104]	; (8003268 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003200:	400a      	ands	r2, r1
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	0189      	lsls	r1, r1, #6
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	225d      	movs	r2, #93	; 0x5d
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	225c      	movs	r2, #92	; 0x5c
 8003222:	2100      	movs	r1, #0
 8003224:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e017      	b.n	800325a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3b01      	subs	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	4013      	ands	r3, r2
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	425a      	negs	r2, r3
 800324a:	4153      	adcs	r3, r2
 800324c:	b2db      	uxtb	r3, r3
 800324e:	001a      	movs	r2, r3
 8003250:	1dfb      	adds	r3, r7, #7
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d197      	bne.n	8003188 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	0018      	movs	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	b008      	add	sp, #32
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	20000000 	.word	0x20000000
 8003268:	ffffdfff 	.word	0xffffdfff

0800326c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800327a:	2317      	movs	r3, #23
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003282:	f7fd fe93 	bl	8000fac <HAL_GetTick>
 8003286:	0002      	movs	r2, r0
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	18d3      	adds	r3, r2, r3
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003292:	f7fd fe8b 	bl	8000fac <HAL_GetTick>
 8003296:	0003      	movs	r3, r0
 8003298:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	330c      	adds	r3, #12
 80032a0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032a2:	4b41      	ldr	r3, [pc, #260]	; (80033a8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	0013      	movs	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	00da      	lsls	r2, r3, #3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	0d1b      	lsrs	r3, r3, #20
 80032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b4:	4353      	muls	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032b8:	e068      	b.n	800338c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	23c0      	movs	r3, #192	; 0xc0
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d10a      	bne.n	80032da <SPI_WaitFifoStateUntilTimeout+0x6e>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d107      	bne.n	80032da <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	2117      	movs	r1, #23
 80032d2:	187b      	adds	r3, r7, r1
 80032d4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80032d6:	187b      	adds	r3, r7, r1
 80032d8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	3301      	adds	r3, #1
 80032de:	d055      	beq.n	800338c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032e0:	f7fd fe64 	bl	8000fac <HAL_GetTick>
 80032e4:	0002      	movs	r2, r0
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d902      	bls.n	80032f6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d142      	bne.n	800337c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	21e0      	movs	r1, #224	; 0xe0
 8003302:	438a      	bics	r2, r1
 8003304:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	2382      	movs	r3, #130	; 0x82
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	429a      	cmp	r2, r3
 8003310:	d113      	bne.n	800333a <SPI_WaitFifoStateUntilTimeout+0xce>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	429a      	cmp	r2, r3
 800331c:	d005      	beq.n	800332a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	2380      	movs	r3, #128	; 0x80
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	429a      	cmp	r2, r3
 8003328:	d107      	bne.n	800333a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2140      	movs	r1, #64	; 0x40
 8003336:	438a      	bics	r2, r1
 8003338:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	019b      	lsls	r3, r3, #6
 8003342:	429a      	cmp	r2, r3
 8003344:	d110      	bne.n	8003368 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4916      	ldr	r1, [pc, #88]	; (80033ac <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003352:	400a      	ands	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	0189      	lsls	r1, r1, #6
 8003364:	430a      	orrs	r2, r1
 8003366:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	225d      	movs	r2, #93	; 0x5d
 800336c:	2101      	movs	r1, #1
 800336e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	225c      	movs	r2, #92	; 0x5c
 8003374:	2100      	movs	r1, #0
 8003376:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e010      	b.n	800339e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	3b01      	subs	r3, #1
 800338a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	4013      	ands	r3, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	429a      	cmp	r2, r3
 800339a:	d18e      	bne.n	80032ba <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b00a      	add	sp, #40	; 0x28
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	20000000 	.word	0x20000000
 80033ac:	ffffdfff 	.word	0xffffdfff

080033b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	23c0      	movs	r3, #192	; 0xc0
 80033c0:	0159      	lsls	r1, r3, #5
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	0013      	movs	r3, r2
 80033ca:	2200      	movs	r2, #0
 80033cc:	f7ff ff4e 	bl	800326c <SPI_WaitFifoStateUntilTimeout>
 80033d0:	1e03      	subs	r3, r0, #0
 80033d2:	d007      	beq.n	80033e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d8:	2220      	movs	r2, #32
 80033da:	431a      	orrs	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e027      	b.n	8003434 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	0013      	movs	r3, r2
 80033ee:	2200      	movs	r2, #0
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	f7ff fead 	bl	8003150 <SPI_WaitFlagStateUntilTimeout>
 80033f6:	1e03      	subs	r3, r0, #0
 80033f8:	d007      	beq.n	800340a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fe:	2220      	movs	r2, #32
 8003400:	431a      	orrs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e014      	b.n	8003434 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	23c0      	movs	r3, #192	; 0xc0
 800340e:	00d9      	lsls	r1, r3, #3
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	0013      	movs	r3, r2
 8003418:	2200      	movs	r2, #0
 800341a:	f7ff ff27 	bl	800326c <SPI_WaitFifoStateUntilTimeout>
 800341e:	1e03      	subs	r3, r0, #0
 8003420:	d007      	beq.n	8003432 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003426:	2220      	movs	r2, #32
 8003428:	431a      	orrs	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e000      	b.n	8003434 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b004      	add	sp, #16
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e04a      	b.n	80034e4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	223d      	movs	r2, #61	; 0x3d
 8003452:	5c9b      	ldrb	r3, [r3, r2]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	223c      	movs	r2, #60	; 0x3c
 800345e:	2100      	movs	r1, #0
 8003460:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	0018      	movs	r0, r3
 8003466:	f7fd fbed 	bl	8000c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	223d      	movs	r2, #61	; 0x3d
 800346e:	2102      	movs	r1, #2
 8003470:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3304      	adds	r3, #4
 800347a:	0019      	movs	r1, r3
 800347c:	0010      	movs	r0, r2
 800347e:	f000 fa6d 	bl	800395c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2248      	movs	r2, #72	; 0x48
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	223e      	movs	r2, #62	; 0x3e
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	223f      	movs	r2, #63	; 0x3f
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2240      	movs	r2, #64	; 0x40
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2241      	movs	r2, #65	; 0x41
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2242      	movs	r2, #66	; 0x42
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2243      	movs	r2, #67	; 0x43
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2244      	movs	r2, #68	; 0x44
 80034be:	2101      	movs	r1, #1
 80034c0:	5499      	strb	r1, [r3, r2]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2245      	movs	r2, #69	; 0x45
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2246      	movs	r2, #70	; 0x46
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2247      	movs	r2, #71	; 0x47
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	223d      	movs	r2, #61	; 0x3d
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b002      	add	sp, #8
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e04a      	b.n	8003594 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	223d      	movs	r2, #61	; 0x3d
 8003502:	5c9b      	ldrb	r3, [r3, r2]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d107      	bne.n	800351a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	223c      	movs	r2, #60	; 0x3c
 800350e:	2100      	movs	r1, #0
 8003510:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0018      	movs	r0, r3
 8003516:	f000 f841 	bl	800359c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	223d      	movs	r2, #61	; 0x3d
 800351e:	2102      	movs	r1, #2
 8003520:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	0019      	movs	r1, r3
 800352c:	0010      	movs	r0, r2
 800352e:	f000 fa15 	bl	800395c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2248      	movs	r2, #72	; 0x48
 8003536:	2101      	movs	r1, #1
 8003538:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	223e      	movs	r2, #62	; 0x3e
 800353e:	2101      	movs	r1, #1
 8003540:	5499      	strb	r1, [r3, r2]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	223f      	movs	r2, #63	; 0x3f
 8003546:	2101      	movs	r1, #1
 8003548:	5499      	strb	r1, [r3, r2]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2240      	movs	r2, #64	; 0x40
 800354e:	2101      	movs	r1, #1
 8003550:	5499      	strb	r1, [r3, r2]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2241      	movs	r2, #65	; 0x41
 8003556:	2101      	movs	r1, #1
 8003558:	5499      	strb	r1, [r3, r2]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2242      	movs	r2, #66	; 0x42
 800355e:	2101      	movs	r1, #1
 8003560:	5499      	strb	r1, [r3, r2]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2243      	movs	r2, #67	; 0x43
 8003566:	2101      	movs	r1, #1
 8003568:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2244      	movs	r2, #68	; 0x44
 800356e:	2101      	movs	r1, #1
 8003570:	5499      	strb	r1, [r3, r2]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2245      	movs	r2, #69	; 0x45
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2246      	movs	r2, #70	; 0x46
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2247      	movs	r2, #71	; 0x47
 8003586:	2101      	movs	r1, #1
 8003588:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	223d      	movs	r2, #61	; 0x3d
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b002      	add	sp, #8
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b002      	add	sp, #8
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d108      	bne.n	80035ce <HAL_TIM_PWM_Start+0x22>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	223e      	movs	r2, #62	; 0x3e
 80035c0:	5c9b      	ldrb	r3, [r3, r2]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	1e5a      	subs	r2, r3, #1
 80035c8:	4193      	sbcs	r3, r2
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	e037      	b.n	800363e <HAL_TIM_PWM_Start+0x92>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d108      	bne.n	80035e6 <HAL_TIM_PWM_Start+0x3a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	223f      	movs	r2, #63	; 0x3f
 80035d8:	5c9b      	ldrb	r3, [r3, r2]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	1e5a      	subs	r2, r3, #1
 80035e0:	4193      	sbcs	r3, r2
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	e02b      	b.n	800363e <HAL_TIM_PWM_Start+0x92>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d108      	bne.n	80035fe <HAL_TIM_PWM_Start+0x52>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2240      	movs	r2, #64	; 0x40
 80035f0:	5c9b      	ldrb	r3, [r3, r2]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	1e5a      	subs	r2, r3, #1
 80035f8:	4193      	sbcs	r3, r2
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	e01f      	b.n	800363e <HAL_TIM_PWM_Start+0x92>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d108      	bne.n	8003616 <HAL_TIM_PWM_Start+0x6a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2241      	movs	r2, #65	; 0x41
 8003608:	5c9b      	ldrb	r3, [r3, r2]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	1e5a      	subs	r2, r3, #1
 8003610:	4193      	sbcs	r3, r2
 8003612:	b2db      	uxtb	r3, r3
 8003614:	e013      	b.n	800363e <HAL_TIM_PWM_Start+0x92>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b10      	cmp	r3, #16
 800361a:	d108      	bne.n	800362e <HAL_TIM_PWM_Start+0x82>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2242      	movs	r2, #66	; 0x42
 8003620:	5c9b      	ldrb	r3, [r3, r2]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	1e5a      	subs	r2, r3, #1
 8003628:	4193      	sbcs	r3, r2
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e007      	b.n	800363e <HAL_TIM_PWM_Start+0x92>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2243      	movs	r2, #67	; 0x43
 8003632:	5c9b      	ldrb	r3, [r3, r2]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	1e5a      	subs	r2, r3, #1
 800363a:	4193      	sbcs	r3, r2
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e07b      	b.n	800373e <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <HAL_TIM_PWM_Start+0xaa>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	223e      	movs	r2, #62	; 0x3e
 8003650:	2102      	movs	r1, #2
 8003652:	5499      	strb	r1, [r3, r2]
 8003654:	e023      	b.n	800369e <HAL_TIM_PWM_Start+0xf2>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d104      	bne.n	8003666 <HAL_TIM_PWM_Start+0xba>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	223f      	movs	r2, #63	; 0x3f
 8003660:	2102      	movs	r1, #2
 8003662:	5499      	strb	r1, [r3, r2]
 8003664:	e01b      	b.n	800369e <HAL_TIM_PWM_Start+0xf2>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b08      	cmp	r3, #8
 800366a:	d104      	bne.n	8003676 <HAL_TIM_PWM_Start+0xca>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	2102      	movs	r1, #2
 8003672:	5499      	strb	r1, [r3, r2]
 8003674:	e013      	b.n	800369e <HAL_TIM_PWM_Start+0xf2>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b0c      	cmp	r3, #12
 800367a:	d104      	bne.n	8003686 <HAL_TIM_PWM_Start+0xda>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2241      	movs	r2, #65	; 0x41
 8003680:	2102      	movs	r1, #2
 8003682:	5499      	strb	r1, [r3, r2]
 8003684:	e00b      	b.n	800369e <HAL_TIM_PWM_Start+0xf2>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b10      	cmp	r3, #16
 800368a:	d104      	bne.n	8003696 <HAL_TIM_PWM_Start+0xea>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2242      	movs	r2, #66	; 0x42
 8003690:	2102      	movs	r1, #2
 8003692:	5499      	strb	r1, [r3, r2]
 8003694:	e003      	b.n	800369e <HAL_TIM_PWM_Start+0xf2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2243      	movs	r2, #67	; 0x43
 800369a:	2102      	movs	r1, #2
 800369c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6839      	ldr	r1, [r7, #0]
 80036a4:	2201      	movs	r2, #1
 80036a6:	0018      	movs	r0, r3
 80036a8:	f000 fc6e 	bl	8003f88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a25      	ldr	r2, [pc, #148]	; (8003748 <HAL_TIM_PWM_Start+0x19c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d009      	beq.n	80036ca <HAL_TIM_PWM_Start+0x11e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a24      	ldr	r2, [pc, #144]	; (800374c <HAL_TIM_PWM_Start+0x1a0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <HAL_TIM_PWM_Start+0x11e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a22      	ldr	r2, [pc, #136]	; (8003750 <HAL_TIM_PWM_Start+0x1a4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_PWM_Start+0x122>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_TIM_PWM_Start+0x124>
 80036ce:	2300      	movs	r3, #0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2180      	movs	r1, #128	; 0x80
 80036e0:	0209      	lsls	r1, r1, #8
 80036e2:	430a      	orrs	r2, r1
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a17      	ldr	r2, [pc, #92]	; (8003748 <HAL_TIM_PWM_Start+0x19c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_TIM_PWM_Start+0x14e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a17      	ldr	r2, [pc, #92]	; (8003754 <HAL_TIM_PWM_Start+0x1a8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d116      	bne.n	8003728 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4a15      	ldr	r2, [pc, #84]	; (8003758 <HAL_TIM_PWM_Start+0x1ac>)
 8003702:	4013      	ands	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b06      	cmp	r3, #6
 800370a:	d016      	beq.n	800373a <HAL_TIM_PWM_Start+0x18e>
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	2380      	movs	r3, #128	; 0x80
 8003710:	025b      	lsls	r3, r3, #9
 8003712:	429a      	cmp	r2, r3
 8003714:	d011      	beq.n	800373a <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2101      	movs	r1, #1
 8003722:	430a      	orrs	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003726:	e008      	b.n	800373a <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2101      	movs	r1, #1
 8003734:	430a      	orrs	r2, r1
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	e000      	b.n	800373c <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b004      	add	sp, #16
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	40012c00 	.word	0x40012c00
 800374c:	40014400 	.word	0x40014400
 8003750:	40014800 	.word	0x40014800
 8003754:	40000400 	.word	0x40000400
 8003758:	00010007 	.word	0x00010007

0800375c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003768:	2317      	movs	r3, #23
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	223c      	movs	r2, #60	; 0x3c
 8003774:	5c9b      	ldrb	r3, [r3, r2]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_TIM_PWM_ConfigChannel+0x22>
 800377a:	2302      	movs	r3, #2
 800377c:	e0e5      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	223c      	movs	r2, #60	; 0x3c
 8003782:	2101      	movs	r1, #1
 8003784:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b14      	cmp	r3, #20
 800378a:	d900      	bls.n	800378e <HAL_TIM_PWM_ConfigChannel+0x32>
 800378c:	e0d1      	b.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	009a      	lsls	r2, r3, #2
 8003792:	4b70      	ldr	r3, [pc, #448]	; (8003954 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003794:	18d3      	adds	r3, r2, r3
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	0011      	movs	r1, r2
 80037a2:	0018      	movs	r0, r3
 80037a4:	f000 f954 	bl	8003a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2108      	movs	r1, #8
 80037b4:	430a      	orrs	r2, r1
 80037b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2104      	movs	r1, #4
 80037c4:	438a      	bics	r2, r1
 80037c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6999      	ldr	r1, [r3, #24]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	619a      	str	r2, [r3, #24]
      break;
 80037da:	e0af      	b.n	800393c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	0011      	movs	r1, r2
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 f9b3 	bl	8003b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2180      	movs	r1, #128	; 0x80
 80037f6:	0109      	lsls	r1, r1, #4
 80037f8:	430a      	orrs	r2, r1
 80037fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4954      	ldr	r1, [pc, #336]	; (8003958 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003808:	400a      	ands	r2, r1
 800380a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6999      	ldr	r1, [r3, #24]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	021a      	lsls	r2, r3, #8
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	619a      	str	r2, [r3, #24]
      break;
 8003820:	e08c      	b.n	800393c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	0011      	movs	r1, r2
 800382a:	0018      	movs	r0, r3
 800382c:	f000 fa0e 	bl	8003c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2108      	movs	r1, #8
 800383c:	430a      	orrs	r2, r1
 800383e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69da      	ldr	r2, [r3, #28]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2104      	movs	r1, #4
 800384c:	438a      	bics	r2, r1
 800384e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69d9      	ldr	r1, [r3, #28]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	61da      	str	r2, [r3, #28]
      break;
 8003862:	e06b      	b.n	800393c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	0011      	movs	r1, r2
 800386c:	0018      	movs	r0, r3
 800386e:	f000 fa6f 	bl	8003d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2180      	movs	r1, #128	; 0x80
 800387e:	0109      	lsls	r1, r1, #4
 8003880:	430a      	orrs	r2, r1
 8003882:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4932      	ldr	r1, [pc, #200]	; (8003958 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003890:	400a      	ands	r2, r1
 8003892:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69d9      	ldr	r1, [r3, #28]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	021a      	lsls	r2, r3, #8
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	61da      	str	r2, [r3, #28]
      break;
 80038a8:	e048      	b.n	800393c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	0011      	movs	r1, r2
 80038b2:	0018      	movs	r0, r3
 80038b4:	f000 fab0 	bl	8003e18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2108      	movs	r1, #8
 80038c4:	430a      	orrs	r2, r1
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2104      	movs	r1, #4
 80038d4:	438a      	bics	r2, r1
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038ea:	e027      	b.n	800393c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	0011      	movs	r1, r2
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 fae9 	bl	8003ecc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2180      	movs	r1, #128	; 0x80
 8003906:	0109      	lsls	r1, r1, #4
 8003908:	430a      	orrs	r2, r1
 800390a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4910      	ldr	r1, [pc, #64]	; (8003958 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003918:	400a      	ands	r2, r1
 800391a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	021a      	lsls	r2, r3, #8
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003930:	e004      	b.n	800393c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003932:	2317      	movs	r3, #23
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
      break;
 800393a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	223c      	movs	r2, #60	; 0x3c
 8003940:	2100      	movs	r1, #0
 8003942:	5499      	strb	r1, [r3, r2]

  return status;
 8003944:	2317      	movs	r3, #23
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	781b      	ldrb	r3, [r3, #0]
}
 800394a:	0018      	movs	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	b006      	add	sp, #24
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	080060dc 	.word	0x080060dc
 8003958:	fffffbff 	.word	0xfffffbff

0800395c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a32      	ldr	r2, [pc, #200]	; (8003a38 <TIM_Base_SetConfig+0xdc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <TIM_Base_SetConfig+0x20>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a31      	ldr	r2, [pc, #196]	; (8003a3c <TIM_Base_SetConfig+0xe0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d108      	bne.n	800398e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2270      	movs	r2, #112	; 0x70
 8003980:	4393      	bics	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a29      	ldr	r2, [pc, #164]	; (8003a38 <TIM_Base_SetConfig+0xdc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00f      	beq.n	80039b6 <TIM_Base_SetConfig+0x5a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <TIM_Base_SetConfig+0xe0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00b      	beq.n	80039b6 <TIM_Base_SetConfig+0x5a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a27      	ldr	r2, [pc, #156]	; (8003a40 <TIM_Base_SetConfig+0xe4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d007      	beq.n	80039b6 <TIM_Base_SetConfig+0x5a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a26      	ldr	r2, [pc, #152]	; (8003a44 <TIM_Base_SetConfig+0xe8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d003      	beq.n	80039b6 <TIM_Base_SetConfig+0x5a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a25      	ldr	r2, [pc, #148]	; (8003a48 <TIM_Base_SetConfig+0xec>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d108      	bne.n	80039c8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a24      	ldr	r2, [pc, #144]	; (8003a4c <TIM_Base_SetConfig+0xf0>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2280      	movs	r2, #128	; 0x80
 80039cc:	4393      	bics	r3, r2
 80039ce:	001a      	movs	r2, r3
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a11      	ldr	r2, [pc, #68]	; (8003a38 <TIM_Base_SetConfig+0xdc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d007      	beq.n	8003a06 <TIM_Base_SetConfig+0xaa>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <TIM_Base_SetConfig+0xe8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d003      	beq.n	8003a06 <TIM_Base_SetConfig+0xaa>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a11      	ldr	r2, [pc, #68]	; (8003a48 <TIM_Base_SetConfig+0xec>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d103      	bne.n	8003a0e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d106      	bne.n	8003a2e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2201      	movs	r2, #1
 8003a26:	4393      	bics	r3, r2
 8003a28:	001a      	movs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	611a      	str	r2, [r3, #16]
  }
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b004      	add	sp, #16
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	40012c00 	.word	0x40012c00
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40002000 	.word	0x40002000
 8003a44:	40014400 	.word	0x40014400
 8003a48:	40014800 	.word	0x40014800
 8003a4c:	fffffcff 	.word	0xfffffcff

08003a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	2201      	movs	r2, #1
 8003a66:	4393      	bics	r3, r2
 8003a68:	001a      	movs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4a2e      	ldr	r2, [pc, #184]	; (8003b38 <TIM_OC1_SetConfig+0xe8>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2203      	movs	r2, #3
 8003a86:	4393      	bics	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2202      	movs	r2, #2
 8003a98:	4393      	bics	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a24      	ldr	r2, [pc, #144]	; (8003b3c <TIM_OC1_SetConfig+0xec>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d007      	beq.n	8003abe <TIM_OC1_SetConfig+0x6e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <TIM_OC1_SetConfig+0xf0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_OC1_SetConfig+0x6e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a22      	ldr	r2, [pc, #136]	; (8003b44 <TIM_OC1_SetConfig+0xf4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d10c      	bne.n	8003ad8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	4393      	bics	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	4393      	bics	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <TIM_OC1_SetConfig+0xec>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d007      	beq.n	8003af0 <TIM_OC1_SetConfig+0xa0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a17      	ldr	r2, [pc, #92]	; (8003b40 <TIM_OC1_SetConfig+0xf0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_OC1_SetConfig+0xa0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a16      	ldr	r2, [pc, #88]	; (8003b44 <TIM_OC1_SetConfig+0xf4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d111      	bne.n	8003b14 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <TIM_OC1_SetConfig+0xf8>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <TIM_OC1_SetConfig+0xfc>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b006      	add	sp, #24
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	fffeff8f 	.word	0xfffeff8f
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	40014400 	.word	0x40014400
 8003b44:	40014800 	.word	0x40014800
 8003b48:	fffffeff 	.word	0xfffffeff
 8003b4c:	fffffdff 	.word	0xfffffdff

08003b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	2210      	movs	r2, #16
 8003b66:	4393      	bics	r3, r2
 8003b68:	001a      	movs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4a2c      	ldr	r2, [pc, #176]	; (8003c30 <TIM_OC2_SetConfig+0xe0>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4a2b      	ldr	r2, [pc, #172]	; (8003c34 <TIM_OC2_SetConfig+0xe4>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	4393      	bics	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a22      	ldr	r2, [pc, #136]	; (8003c38 <TIM_OC2_SetConfig+0xe8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d10d      	bne.n	8003bce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	4393      	bics	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2240      	movs	r2, #64	; 0x40
 8003bca:	4393      	bics	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <TIM_OC2_SetConfig+0xe8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <TIM_OC2_SetConfig+0x96>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <TIM_OC2_SetConfig+0xec>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d003      	beq.n	8003be6 <TIM_OC2_SetConfig+0x96>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <TIM_OC2_SetConfig+0xf0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d113      	bne.n	8003c0e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4a16      	ldr	r2, [pc, #88]	; (8003c44 <TIM_OC2_SetConfig+0xf4>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <TIM_OC2_SetConfig+0xf8>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b006      	add	sp, #24
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	feff8fff 	.word	0xfeff8fff
 8003c34:	fffffcff 	.word	0xfffffcff
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40014400 	.word	0x40014400
 8003c40:	40014800 	.word	0x40014800
 8003c44:	fffffbff 	.word	0xfffffbff
 8003c48:	fffff7ff 	.word	0xfffff7ff

08003c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	4a31      	ldr	r2, [pc, #196]	; (8003d28 <TIM_OC3_SetConfig+0xdc>)
 8003c62:	401a      	ands	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4a2d      	ldr	r2, [pc, #180]	; (8003d2c <TIM_OC3_SetConfig+0xe0>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2203      	movs	r2, #3
 8003c80:	4393      	bics	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	4a27      	ldr	r2, [pc, #156]	; (8003d30 <TIM_OC3_SetConfig+0xe4>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <TIM_OC3_SetConfig+0xe8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d10d      	bne.n	8003cc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <TIM_OC3_SetConfig+0xec>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <TIM_OC3_SetConfig+0xf0>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a1a      	ldr	r2, [pc, #104]	; (8003d34 <TIM_OC3_SetConfig+0xe8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <TIM_OC3_SetConfig+0x92>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <TIM_OC3_SetConfig+0xf4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_OC3_SetConfig+0x92>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1a      	ldr	r2, [pc, #104]	; (8003d44 <TIM_OC3_SetConfig+0xf8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d113      	bne.n	8003d06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4a19      	ldr	r2, [pc, #100]	; (8003d48 <TIM_OC3_SetConfig+0xfc>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4a18      	ldr	r2, [pc, #96]	; (8003d4c <TIM_OC3_SetConfig+0x100>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	621a      	str	r2, [r3, #32]
}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b006      	add	sp, #24
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	fffffeff 	.word	0xfffffeff
 8003d2c:	fffeff8f 	.word	0xfffeff8f
 8003d30:	fffffdff 	.word	0xfffffdff
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	fffff7ff 	.word	0xfffff7ff
 8003d3c:	fffffbff 	.word	0xfffffbff
 8003d40:	40014400 	.word	0x40014400
 8003d44:	40014800 	.word	0x40014800
 8003d48:	ffffefff 	.word	0xffffefff
 8003d4c:	ffffdfff 	.word	0xffffdfff

08003d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	4a24      	ldr	r2, [pc, #144]	; (8003df8 <TIM_OC4_SetConfig+0xa8>)
 8003d66:	401a      	ands	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a20      	ldr	r2, [pc, #128]	; (8003dfc <TIM_OC4_SetConfig+0xac>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4a1f      	ldr	r2, [pc, #124]	; (8003e00 <TIM_OC4_SetConfig+0xb0>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <TIM_OC4_SetConfig+0xb4>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	031b      	lsls	r3, r3, #12
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <TIM_OC4_SetConfig+0xb8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d007      	beq.n	8003dc0 <TIM_OC4_SetConfig+0x70>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <TIM_OC4_SetConfig+0xbc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d003      	beq.n	8003dc0 <TIM_OC4_SetConfig+0x70>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <TIM_OC4_SetConfig+0xc0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d109      	bne.n	8003dd4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <TIM_OC4_SetConfig+0xc4>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	019b      	lsls	r3, r3, #6
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b006      	add	sp, #24
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	ffffefff 	.word	0xffffefff
 8003dfc:	feff8fff 	.word	0xfeff8fff
 8003e00:	fffffcff 	.word	0xfffffcff
 8003e04:	ffffdfff 	.word	0xffffdfff
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800
 8003e14:	ffffbfff 	.word	0xffffbfff

08003e18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4a21      	ldr	r2, [pc, #132]	; (8003eb4 <TIM_OC5_SetConfig+0x9c>)
 8003e2e:	401a      	ands	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <TIM_OC5_SetConfig+0xa0>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4a19      	ldr	r2, [pc, #100]	; (8003ebc <TIM_OC5_SetConfig+0xa4>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	041b      	lsls	r3, r3, #16
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <TIM_OC5_SetConfig+0xa8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <TIM_OC5_SetConfig+0x66>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <TIM_OC5_SetConfig+0xac>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_OC5_SetConfig+0x66>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <TIM_OC5_SetConfig+0xb0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d109      	bne.n	8003e92 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	4a0c      	ldr	r2, [pc, #48]	; (8003eb4 <TIM_OC5_SetConfig+0x9c>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	621a      	str	r2, [r3, #32]
}
 8003eac:	46c0      	nop			; (mov r8, r8)
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	b006      	add	sp, #24
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	fffeffff 	.word	0xfffeffff
 8003eb8:	fffeff8f 	.word	0xfffeff8f
 8003ebc:	fffdffff 	.word	0xfffdffff
 8003ec0:	40012c00 	.word	0x40012c00
 8003ec4:	40014400 	.word	0x40014400
 8003ec8:	40014800 	.word	0x40014800

08003ecc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	4a22      	ldr	r2, [pc, #136]	; (8003f6c <TIM_OC6_SetConfig+0xa0>)
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <TIM_OC6_SetConfig+0xa4>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <TIM_OC6_SetConfig+0xa8>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	051b      	lsls	r3, r3, #20
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <TIM_OC6_SetConfig+0xac>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d007      	beq.n	8003f34 <TIM_OC6_SetConfig+0x68>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <TIM_OC6_SetConfig+0xb0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_OC6_SetConfig+0x68>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <TIM_OC6_SetConfig+0xb4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d109      	bne.n	8003f48 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <TIM_OC6_SetConfig+0xb8>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	029b      	lsls	r3, r3, #10
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b006      	add	sp, #24
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	ffefffff 	.word	0xffefffff
 8003f70:	feff8fff 	.word	0xfeff8fff
 8003f74:	ffdfffff 	.word	0xffdfffff
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40014800 	.word	0x40014800
 8003f84:	fffbffff 	.word	0xfffbffff

08003f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	221f      	movs	r2, #31
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	0013      	movs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	43d2      	mvns	r2, r2
 8003faa:	401a      	ands	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1a      	ldr	r2, [r3, #32]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	211f      	movs	r1, #31
 8003fb8:	400b      	ands	r3, r1
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4099      	lsls	r1, r3
 8003fbe:	000b      	movs	r3, r1
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b006      	add	sp, #24
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	223c      	movs	r2, #60	; 0x3c
 8003fe2:	5c9b      	ldrb	r3, [r3, r2]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e06f      	b.n	80040cc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	223c      	movs	r2, #60	; 0x3c
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	22ff      	movs	r2, #255	; 0xff
 8003ff8:	4393      	bics	r3, r2
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a33      	ldr	r2, [pc, #204]	; (80040d4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004008:	401a      	ands	r2, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a30      	ldr	r2, [pc, #192]	; (80040d8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004016:	401a      	ands	r2, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a2e      	ldr	r2, [pc, #184]	; (80040dc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004024:	401a      	ands	r2, r3
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4a2b      	ldr	r2, [pc, #172]	; (80040e0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004032:	401a      	ands	r2, r3
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4a29      	ldr	r2, [pc, #164]	; (80040e4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004040:	401a      	ands	r2, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4a26      	ldr	r2, [pc, #152]	; (80040e8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800404e:	401a      	ands	r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a24      	ldr	r2, [pc, #144]	; (80040ec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800405c:	401a      	ands	r2, r3
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	041b      	lsls	r3, r3, #16
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a21      	ldr	r2, [pc, #132]	; (80040f0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800406c:	401a      	ands	r2, r3
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1e      	ldr	r2, [pc, #120]	; (80040f4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d11c      	bne.n	80040ba <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a1d      	ldr	r2, [pc, #116]	; (80040f8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004084:	401a      	ands	r2, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	051b      	lsls	r3, r3, #20
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a1a      	ldr	r2, [pc, #104]	; (80040fc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004094:	401a      	ands	r2, r3
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a17      	ldr	r2, [pc, #92]	; (8004100 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80040a2:	401a      	ands	r2, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80040b0:	401a      	ands	r2, r3
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	223c      	movs	r2, #60	; 0x3c
 80040c6:	2100      	movs	r1, #0
 80040c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b004      	add	sp, #16
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	fffffcff 	.word	0xfffffcff
 80040d8:	fffffbff 	.word	0xfffffbff
 80040dc:	fffff7ff 	.word	0xfffff7ff
 80040e0:	ffffefff 	.word	0xffffefff
 80040e4:	ffffdfff 	.word	0xffffdfff
 80040e8:	ffffbfff 	.word	0xffffbfff
 80040ec:	fff0ffff 	.word	0xfff0ffff
 80040f0:	efffffff 	.word	0xefffffff
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	ff0fffff 	.word	0xff0fffff
 80040fc:	feffffff 	.word	0xfeffffff
 8004100:	fdffffff 	.word	0xfdffffff
 8004104:	dfffffff 	.word	0xdfffffff

08004108 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e04e      	b.n	80041b8 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2288      	movs	r2, #136	; 0x88
 800411e:	589b      	ldr	r3, [r3, r2]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d107      	bne.n	8004134 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2284      	movs	r2, #132	; 0x84
 8004128:	2100      	movs	r1, #0
 800412a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	0018      	movs	r0, r3
 8004130:	f7fc fe34 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2288      	movs	r2, #136	; 0x88
 8004138:	2124      	movs	r1, #36	; 0x24
 800413a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2101      	movs	r1, #1
 8004148:	438a      	bics	r2, r1
 800414a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	0018      	movs	r0, r3
 8004158:	f000 f99e 	bl	8004498 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	0018      	movs	r0, r3
 8004160:	f000 f830 	bl	80041c4 <UART_SetConfig>
 8004164:	0003      	movs	r3, r0
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e024      	b.n	80041b8 <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4911      	ldr	r1, [pc, #68]	; (80041c0 <HAL_HalfDuplex_Init+0xb8>)
 800417a:	400a      	ands	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2122      	movs	r1, #34	; 0x22
 800418a:	438a      	bics	r2, r1
 800418c:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2108      	movs	r1, #8
 800419a:	430a      	orrs	r2, r1
 800419c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2101      	movs	r1, #1
 80041aa:	430a      	orrs	r2, r1
 80041ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	0018      	movs	r0, r3
 80041b2:	f000 fa25 	bl	8004600 <UART_CheckIdleState>
 80041b6:	0003      	movs	r3, r0
}
 80041b8:	0018      	movs	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b002      	add	sp, #8
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	ffffb7ff 	.word	0xffffb7ff

080041c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041cc:	231a      	movs	r3, #26
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4aa1      	ldr	r2, [pc, #644]	; (8004478 <UART_SetConfig+0x2b4>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	430a      	orrs	r2, r1
 8004200:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a9c      	ldr	r2, [pc, #624]	; (800447c <UART_SetConfig+0x2b8>)
 800420a:	4013      	ands	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	4313      	orrs	r3, r2
 8004228:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a93      	ldr	r2, [pc, #588]	; (8004480 <UART_SetConfig+0x2bc>)
 8004232:	4013      	ands	r3, r2
 8004234:	0019      	movs	r1, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	430a      	orrs	r2, r1
 800423e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	220f      	movs	r2, #15
 8004248:	4393      	bics	r3, r2
 800424a:	0019      	movs	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a89      	ldr	r2, [pc, #548]	; (8004484 <UART_SetConfig+0x2c0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d127      	bne.n	80042b2 <UART_SetConfig+0xee>
 8004262:	4b89      	ldr	r3, [pc, #548]	; (8004488 <UART_SetConfig+0x2c4>)
 8004264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004266:	2203      	movs	r2, #3
 8004268:	4013      	ands	r3, r2
 800426a:	2b03      	cmp	r3, #3
 800426c:	d017      	beq.n	800429e <UART_SetConfig+0xda>
 800426e:	d81b      	bhi.n	80042a8 <UART_SetConfig+0xe4>
 8004270:	2b02      	cmp	r3, #2
 8004272:	d00a      	beq.n	800428a <UART_SetConfig+0xc6>
 8004274:	d818      	bhi.n	80042a8 <UART_SetConfig+0xe4>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <UART_SetConfig+0xbc>
 800427a:	2b01      	cmp	r3, #1
 800427c:	d00a      	beq.n	8004294 <UART_SetConfig+0xd0>
 800427e:	e013      	b.n	80042a8 <UART_SetConfig+0xe4>
 8004280:	231b      	movs	r3, #27
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	e021      	b.n	80042ce <UART_SetConfig+0x10a>
 800428a:	231b      	movs	r3, #27
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	2202      	movs	r2, #2
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	e01c      	b.n	80042ce <UART_SetConfig+0x10a>
 8004294:	231b      	movs	r3, #27
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	2204      	movs	r2, #4
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e017      	b.n	80042ce <UART_SetConfig+0x10a>
 800429e:	231b      	movs	r3, #27
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	2208      	movs	r2, #8
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	e012      	b.n	80042ce <UART_SetConfig+0x10a>
 80042a8:	231b      	movs	r3, #27
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	2210      	movs	r2, #16
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	e00d      	b.n	80042ce <UART_SetConfig+0x10a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a75      	ldr	r2, [pc, #468]	; (800448c <UART_SetConfig+0x2c8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d104      	bne.n	80042c6 <UART_SetConfig+0x102>
 80042bc:	231b      	movs	r3, #27
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	e003      	b.n	80042ce <UART_SetConfig+0x10a>
 80042c6:	231b      	movs	r3, #27
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	2210      	movs	r2, #16
 80042cc:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69da      	ldr	r2, [r3, #28]
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d000      	beq.n	80042dc <UART_SetConfig+0x118>
 80042da:	e065      	b.n	80043a8 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80042dc:	231b      	movs	r3, #27
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d015      	beq.n	8004312 <UART_SetConfig+0x14e>
 80042e6:	dc18      	bgt.n	800431a <UART_SetConfig+0x156>
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d00d      	beq.n	8004308 <UART_SetConfig+0x144>
 80042ec:	dc15      	bgt.n	800431a <UART_SetConfig+0x156>
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <UART_SetConfig+0x134>
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d005      	beq.n	8004302 <UART_SetConfig+0x13e>
 80042f6:	e010      	b.n	800431a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f8:	f7fe fbd6 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 80042fc:	0003      	movs	r3, r0
 80042fe:	617b      	str	r3, [r7, #20]
        break;
 8004300:	e012      	b.n	8004328 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004302:	4b63      	ldr	r3, [pc, #396]	; (8004490 <UART_SetConfig+0x2cc>)
 8004304:	617b      	str	r3, [r7, #20]
        break;
 8004306:	e00f      	b.n	8004328 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004308:	f7fe fb42 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 800430c:	0003      	movs	r3, r0
 800430e:	617b      	str	r3, [r7, #20]
        break;
 8004310:	e00a      	b.n	8004328 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004312:	2380      	movs	r3, #128	; 0x80
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	617b      	str	r3, [r7, #20]
        break;
 8004318:	e006      	b.n	8004328 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800431e:	231a      	movs	r3, #26
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	2201      	movs	r2, #1
 8004324:	701a      	strb	r2, [r3, #0]
        break;
 8004326:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d100      	bne.n	8004330 <UART_SetConfig+0x16c>
 800432e:	e08d      	b.n	800444c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004334:	4b57      	ldr	r3, [pc, #348]	; (8004494 <UART_SetConfig+0x2d0>)
 8004336:	0052      	lsls	r2, r2, #1
 8004338:	5ad3      	ldrh	r3, [r2, r3]
 800433a:	0019      	movs	r1, r3
 800433c:	6978      	ldr	r0, [r7, #20]
 800433e:	f7fb fedf 	bl	8000100 <__udivsi3>
 8004342:	0003      	movs	r3, r0
 8004344:	005a      	lsls	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	18d2      	adds	r2, r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	0019      	movs	r1, r3
 8004354:	0010      	movs	r0, r2
 8004356:	f7fb fed3 	bl	8000100 <__udivsi3>
 800435a:	0003      	movs	r3, r0
 800435c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b0f      	cmp	r3, #15
 8004362:	d91c      	bls.n	800439e <UART_SetConfig+0x1da>
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	025b      	lsls	r3, r3, #9
 800436a:	429a      	cmp	r2, r3
 800436c:	d217      	bcs.n	800439e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	b29a      	uxth	r2, r3
 8004372:	200e      	movs	r0, #14
 8004374:	183b      	adds	r3, r7, r0
 8004376:	210f      	movs	r1, #15
 8004378:	438a      	bics	r2, r1
 800437a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	b29b      	uxth	r3, r3
 8004382:	2207      	movs	r2, #7
 8004384:	4013      	ands	r3, r2
 8004386:	b299      	uxth	r1, r3
 8004388:	183b      	adds	r3, r7, r0
 800438a:	183a      	adds	r2, r7, r0
 800438c:	8812      	ldrh	r2, [r2, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	183a      	adds	r2, r7, r0
 8004398:	8812      	ldrh	r2, [r2, #0]
 800439a:	60da      	str	r2, [r3, #12]
 800439c:	e056      	b.n	800444c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800439e:	231a      	movs	r3, #26
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	2201      	movs	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e051      	b.n	800444c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043a8:	231b      	movs	r3, #27
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d015      	beq.n	80043de <UART_SetConfig+0x21a>
 80043b2:	dc18      	bgt.n	80043e6 <UART_SetConfig+0x222>
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d00d      	beq.n	80043d4 <UART_SetConfig+0x210>
 80043b8:	dc15      	bgt.n	80043e6 <UART_SetConfig+0x222>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <UART_SetConfig+0x200>
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d005      	beq.n	80043ce <UART_SetConfig+0x20a>
 80043c2:	e010      	b.n	80043e6 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c4:	f7fe fb70 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 80043c8:	0003      	movs	r3, r0
 80043ca:	617b      	str	r3, [r7, #20]
        break;
 80043cc:	e012      	b.n	80043f4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ce:	4b30      	ldr	r3, [pc, #192]	; (8004490 <UART_SetConfig+0x2cc>)
 80043d0:	617b      	str	r3, [r7, #20]
        break;
 80043d2:	e00f      	b.n	80043f4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043d4:	f7fe fadc 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 80043d8:	0003      	movs	r3, r0
 80043da:	617b      	str	r3, [r7, #20]
        break;
 80043dc:	e00a      	b.n	80043f4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	617b      	str	r3, [r7, #20]
        break;
 80043e4:	e006      	b.n	80043f4 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043ea:	231a      	movs	r3, #26
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	2201      	movs	r2, #1
 80043f0:	701a      	strb	r2, [r3, #0]
        break;
 80043f2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d028      	beq.n	800444c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043fe:	4b25      	ldr	r3, [pc, #148]	; (8004494 <UART_SetConfig+0x2d0>)
 8004400:	0052      	lsls	r2, r2, #1
 8004402:	5ad3      	ldrh	r3, [r2, r3]
 8004404:	0019      	movs	r1, r3
 8004406:	6978      	ldr	r0, [r7, #20]
 8004408:	f7fb fe7a 	bl	8000100 <__udivsi3>
 800440c:	0003      	movs	r3, r0
 800440e:	001a      	movs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	085b      	lsrs	r3, r3, #1
 8004416:	18d2      	adds	r2, r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	0019      	movs	r1, r3
 800441e:	0010      	movs	r0, r2
 8004420:	f7fb fe6e 	bl	8000100 <__udivsi3>
 8004424:	0003      	movs	r3, r0
 8004426:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b0f      	cmp	r3, #15
 800442c:	d90a      	bls.n	8004444 <UART_SetConfig+0x280>
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	025b      	lsls	r3, r3, #9
 8004434:	429a      	cmp	r2, r3
 8004436:	d205      	bcs.n	8004444 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	b29a      	uxth	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	e003      	b.n	800444c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004444:	231a      	movs	r3, #26
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	2201      	movs	r2, #1
 800444a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	226a      	movs	r2, #106	; 0x6a
 8004450:	2101      	movs	r1, #1
 8004452:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2268      	movs	r2, #104	; 0x68
 8004458:	2101      	movs	r1, #1
 800445a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004468:	231a      	movs	r3, #26
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	781b      	ldrb	r3, [r3, #0]
}
 800446e:	0018      	movs	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	b008      	add	sp, #32
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	cfff69f3 	.word	0xcfff69f3
 800447c:	ffffcfff 	.word	0xffffcfff
 8004480:	11fff4ff 	.word	0x11fff4ff
 8004484:	40013800 	.word	0x40013800
 8004488:	40021000 	.word	0x40021000
 800448c:	40004400 	.word	0x40004400
 8004490:	00f42400 	.word	0x00f42400
 8004494:	08006130 	.word	0x08006130

08004498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	2208      	movs	r2, #8
 80044a6:	4013      	ands	r3, r2
 80044a8:	d00b      	beq.n	80044c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	4a4a      	ldr	r2, [pc, #296]	; (80045dc <UART_AdvFeatureConfig+0x144>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	0019      	movs	r1, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	2201      	movs	r2, #1
 80044c8:	4013      	ands	r3, r2
 80044ca:	d00b      	beq.n	80044e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	4a43      	ldr	r2, [pc, #268]	; (80045e0 <UART_AdvFeatureConfig+0x148>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	0019      	movs	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	2202      	movs	r2, #2
 80044ea:	4013      	ands	r3, r2
 80044ec:	d00b      	beq.n	8004506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4a3b      	ldr	r2, [pc, #236]	; (80045e4 <UART_AdvFeatureConfig+0x14c>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	0019      	movs	r1, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	2204      	movs	r2, #4
 800450c:	4013      	ands	r3, r2
 800450e:	d00b      	beq.n	8004528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a34      	ldr	r2, [pc, #208]	; (80045e8 <UART_AdvFeatureConfig+0x150>)
 8004518:	4013      	ands	r3, r2
 800451a:	0019      	movs	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452c:	2210      	movs	r2, #16
 800452e:	4013      	ands	r3, r2
 8004530:	d00b      	beq.n	800454a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4a2c      	ldr	r2, [pc, #176]	; (80045ec <UART_AdvFeatureConfig+0x154>)
 800453a:	4013      	ands	r3, r2
 800453c:	0019      	movs	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	2220      	movs	r2, #32
 8004550:	4013      	ands	r3, r2
 8004552:	d00b      	beq.n	800456c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	4a25      	ldr	r2, [pc, #148]	; (80045f0 <UART_AdvFeatureConfig+0x158>)
 800455c:	4013      	ands	r3, r2
 800455e:	0019      	movs	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	2240      	movs	r2, #64	; 0x40
 8004572:	4013      	ands	r3, r2
 8004574:	d01d      	beq.n	80045b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <UART_AdvFeatureConfig+0x15c>)
 800457e:	4013      	ands	r3, r2
 8004580:	0019      	movs	r1, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	035b      	lsls	r3, r3, #13
 8004596:	429a      	cmp	r2, r3
 8004598:	d10b      	bne.n	80045b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <UART_AdvFeatureConfig+0x160>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	0019      	movs	r1, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	2280      	movs	r2, #128	; 0x80
 80045b8:	4013      	ands	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4a0e      	ldr	r2, [pc, #56]	; (80045fc <UART_AdvFeatureConfig+0x164>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	0019      	movs	r1, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]
  }
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b002      	add	sp, #8
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	ffff7fff 	.word	0xffff7fff
 80045e0:	fffdffff 	.word	0xfffdffff
 80045e4:	fffeffff 	.word	0xfffeffff
 80045e8:	fffbffff 	.word	0xfffbffff
 80045ec:	ffffefff 	.word	0xffffefff
 80045f0:	ffffdfff 	.word	0xffffdfff
 80045f4:	ffefffff 	.word	0xffefffff
 80045f8:	ff9fffff 	.word	0xff9fffff
 80045fc:	fff7ffff 	.word	0xfff7ffff

08004600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b092      	sub	sp, #72	; 0x48
 8004604:	af02      	add	r7, sp, #8
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2290      	movs	r2, #144	; 0x90
 800460c:	2100      	movs	r1, #0
 800460e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004610:	f7fc fccc 	bl	8000fac <HAL_GetTick>
 8004614:	0003      	movs	r3, r0
 8004616:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2208      	movs	r2, #8
 8004620:	4013      	ands	r3, r2
 8004622:	2b08      	cmp	r3, #8
 8004624:	d12d      	bne.n	8004682 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004628:	2280      	movs	r2, #128	; 0x80
 800462a:	0391      	lsls	r1, r2, #14
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	4a47      	ldr	r2, [pc, #284]	; (800474c <UART_CheckIdleState+0x14c>)
 8004630:	9200      	str	r2, [sp, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	f000 f88e 	bl	8004754 <UART_WaitOnFlagUntilTimeout>
 8004638:	1e03      	subs	r3, r0, #0
 800463a:	d022      	beq.n	8004682 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463c:	f3ef 8310 	mrs	r3, PRIMASK
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004644:	63bb      	str	r3, [r7, #56]	; 0x38
 8004646:	2301      	movs	r3, #1
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	f383 8810 	msr	PRIMASK, r3
}
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2180      	movs	r1, #128	; 0x80
 800465e:	438a      	bics	r2, r1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2288      	movs	r2, #136	; 0x88
 8004672:	2120      	movs	r1, #32
 8004674:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2284      	movs	r2, #132	; 0x84
 800467a:	2100      	movs	r1, #0
 800467c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e060      	b.n	8004744 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2204      	movs	r2, #4
 800468a:	4013      	ands	r3, r2
 800468c:	2b04      	cmp	r3, #4
 800468e:	d146      	bne.n	800471e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	03d1      	lsls	r1, r2, #15
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	4a2c      	ldr	r2, [pc, #176]	; (800474c <UART_CheckIdleState+0x14c>)
 800469a:	9200      	str	r2, [sp, #0]
 800469c:	2200      	movs	r2, #0
 800469e:	f000 f859 	bl	8004754 <UART_WaitOnFlagUntilTimeout>
 80046a2:	1e03      	subs	r3, r0, #0
 80046a4:	d03b      	beq.n	800471e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a6:	f3ef 8310 	mrs	r3, PRIMASK
 80046aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80046ac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046ae:	637b      	str	r3, [r7, #52]	; 0x34
 80046b0:	2301      	movs	r3, #1
 80046b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f383 8810 	msr	PRIMASK, r3
}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4922      	ldr	r1, [pc, #136]	; (8004750 <UART_CheckIdleState+0x150>)
 80046c8:	400a      	ands	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f383 8810 	msr	PRIMASK, r3
}
 80046d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d8:	f3ef 8310 	mrs	r3, PRIMASK
 80046dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80046de:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e0:	633b      	str	r3, [r7, #48]	; 0x30
 80046e2:	2301      	movs	r3, #1
 80046e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f383 8810 	msr	PRIMASK, r3
}
 80046ec:	46c0      	nop			; (mov r8, r8)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2101      	movs	r1, #1
 80046fa:	438a      	bics	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	f383 8810 	msr	PRIMASK, r3
}
 8004708:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	228c      	movs	r2, #140	; 0x8c
 800470e:	2120      	movs	r1, #32
 8004710:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2284      	movs	r2, #132	; 0x84
 8004716:	2100      	movs	r1, #0
 8004718:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e012      	b.n	8004744 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2288      	movs	r2, #136	; 0x88
 8004722:	2120      	movs	r1, #32
 8004724:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	228c      	movs	r2, #140	; 0x8c
 800472a:	2120      	movs	r1, #32
 800472c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2284      	movs	r2, #132	; 0x84
 800473e:	2100      	movs	r1, #0
 8004740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b010      	add	sp, #64	; 0x40
 800474a:	bd80      	pop	{r7, pc}
 800474c:	01ffffff 	.word	0x01ffffff
 8004750:	fffffedf 	.word	0xfffffedf

08004754 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	1dfb      	adds	r3, r7, #7
 8004762:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004764:	e051      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	3301      	adds	r3, #1
 800476a:	d04e      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476c:	f7fc fc1e 	bl	8000fac <HAL_GetTick>
 8004770:	0002      	movs	r2, r0
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <UART_WaitOnFlagUntilTimeout+0x2e>
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e051      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2204      	movs	r2, #4
 800478e:	4013      	ands	r3, r2
 8004790:	d03b      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b80      	cmp	r3, #128	; 0x80
 8004796:	d038      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	d035      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	2208      	movs	r2, #8
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d111      	bne.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2208      	movs	r2, #8
 80047b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	0018      	movs	r0, r3
 80047b8:	f000 f83c 	bl	8004834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2290      	movs	r2, #144	; 0x90
 80047c0:	2108      	movs	r1, #8
 80047c2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2284      	movs	r2, #132	; 0x84
 80047c8:	2100      	movs	r1, #0
 80047ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e02c      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	401a      	ands	r2, r3
 80047dc:	2380      	movs	r3, #128	; 0x80
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d112      	bne.n	800480a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2280      	movs	r2, #128	; 0x80
 80047ea:	0112      	lsls	r2, r2, #4
 80047ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 f81f 	bl	8004834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2290      	movs	r2, #144	; 0x90
 80047fa:	2120      	movs	r1, #32
 80047fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2284      	movs	r2, #132	; 0x84
 8004802:	2100      	movs	r1, #0
 8004804:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e00f      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	4013      	ands	r3, r2
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	425a      	negs	r2, r3
 800481a:	4153      	adcs	r3, r2
 800481c:	b2db      	uxtb	r3, r3
 800481e:	001a      	movs	r2, r3
 8004820:	1dfb      	adds	r3, r7, #7
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d09e      	beq.n	8004766 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	0018      	movs	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	b004      	add	sp, #16
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08e      	sub	sp, #56	; 0x38
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800483c:	f3ef 8310 	mrs	r3, PRIMASK
 8004840:	617b      	str	r3, [r7, #20]
  return(result);
 8004842:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004844:	637b      	str	r3, [r7, #52]	; 0x34
 8004846:	2301      	movs	r3, #1
 8004848:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	f383 8810 	msr	PRIMASK, r3
}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4926      	ldr	r1, [pc, #152]	; (80048f8 <UART_EndRxTransfer+0xc4>)
 800485e:	400a      	ands	r2, r1
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f383 8810 	msr	PRIMASK, r3
}
 800486c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800486e:	f3ef 8310 	mrs	r3, PRIMASK
 8004872:	623b      	str	r3, [r7, #32]
  return(result);
 8004874:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004876:	633b      	str	r3, [r7, #48]	; 0x30
 8004878:	2301      	movs	r3, #1
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	f383 8810 	msr	PRIMASK, r3
}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	491b      	ldr	r1, [pc, #108]	; (80048fc <UART_EndRxTransfer+0xc8>)
 8004890:	400a      	ands	r2, r1
 8004892:	609a      	str	r2, [r3, #8]
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	f383 8810 	msr	PRIMASK, r3
}
 800489e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d118      	bne.n	80048da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a8:	f3ef 8310 	mrs	r3, PRIMASK
 80048ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80048ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b2:	2301      	movs	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f383 8810 	msr	PRIMASK, r3
}
 80048bc:	46c0      	nop			; (mov r8, r8)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2110      	movs	r1, #16
 80048ca:	438a      	bics	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f383 8810 	msr	PRIMASK, r3
}
 80048d8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	228c      	movs	r2, #140	; 0x8c
 80048de:	2120      	movs	r1, #32
 80048e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	675a      	str	r2, [r3, #116]	; 0x74
}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b00e      	add	sp, #56	; 0x38
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	fffffedf 	.word	0xfffffedf
 80048fc:	effffffe 	.word	0xeffffffe

08004900 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2284      	movs	r2, #132	; 0x84
 800490c:	5c9b      	ldrb	r3, [r3, r2]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_UARTEx_DisableFifoMode+0x16>
 8004912:	2302      	movs	r3, #2
 8004914:	e027      	b.n	8004966 <HAL_UARTEx_DisableFifoMode+0x66>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2284      	movs	r2, #132	; 0x84
 800491a:	2101      	movs	r1, #1
 800491c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2288      	movs	r2, #136	; 0x88
 8004922:	2124      	movs	r1, #36	; 0x24
 8004924:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2101      	movs	r1, #1
 800493a:	438a      	bics	r2, r1
 800493c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a0b      	ldr	r2, [pc, #44]	; (8004970 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004942:	4013      	ands	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2288      	movs	r2, #136	; 0x88
 8004958:	2120      	movs	r1, #32
 800495a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2284      	movs	r2, #132	; 0x84
 8004960:	2100      	movs	r1, #0
 8004962:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	0018      	movs	r0, r3
 8004968:	46bd      	mov	sp, r7
 800496a:	b004      	add	sp, #16
 800496c:	bd80      	pop	{r7, pc}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	dfffffff 	.word	0xdfffffff

08004974 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2284      	movs	r2, #132	; 0x84
 8004982:	5c9b      	ldrb	r3, [r3, r2]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004988:	2302      	movs	r3, #2
 800498a:	e02e      	b.n	80049ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2284      	movs	r2, #132	; 0x84
 8004990:	2101      	movs	r1, #1
 8004992:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2288      	movs	r2, #136	; 0x88
 8004998:	2124      	movs	r1, #36	; 0x24
 800499a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2101      	movs	r1, #1
 80049b0:	438a      	bics	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	08d9      	lsrs	r1, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	0018      	movs	r0, r3
 80049cc:	f000 f854 	bl	8004a78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2288      	movs	r2, #136	; 0x88
 80049dc:	2120      	movs	r1, #32
 80049de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2284      	movs	r2, #132	; 0x84
 80049e4:	2100      	movs	r1, #0
 80049e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	0018      	movs	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b004      	add	sp, #16
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2284      	movs	r2, #132	; 0x84
 8004a02:	5c9b      	ldrb	r3, [r3, r2]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e02f      	b.n	8004a6c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2284      	movs	r2, #132	; 0x84
 8004a10:	2101      	movs	r1, #1
 8004a12:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2288      	movs	r2, #136	; 0x88
 8004a18:	2124      	movs	r1, #36	; 0x24
 8004a1a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2101      	movs	r1, #1
 8004a30:	438a      	bics	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	4a0e      	ldr	r2, [pc, #56]	; (8004a74 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	0019      	movs	r1, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f000 f813 	bl	8004a78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2288      	movs	r2, #136	; 0x88
 8004a5e:	2120      	movs	r1, #32
 8004a60:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2284      	movs	r2, #132	; 0x84
 8004a66:	2100      	movs	r1, #0
 8004a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b004      	add	sp, #16
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	f1ffffff 	.word	0xf1ffffff

08004a78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d108      	bne.n	8004a9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	226a      	movs	r2, #106	; 0x6a
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2268      	movs	r2, #104	; 0x68
 8004a94:	2101      	movs	r1, #1
 8004a96:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a98:	e043      	b.n	8004b22 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a9a:	260f      	movs	r6, #15
 8004a9c:	19bb      	adds	r3, r7, r6
 8004a9e:	2208      	movs	r2, #8
 8004aa0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004aa2:	200e      	movs	r0, #14
 8004aa4:	183b      	adds	r3, r7, r0
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	0e5b      	lsrs	r3, r3, #25
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	240d      	movs	r4, #13
 8004ab6:	193b      	adds	r3, r7, r4
 8004ab8:	2107      	movs	r1, #7
 8004aba:	400a      	ands	r2, r1
 8004abc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	0f5b      	lsrs	r3, r3, #29
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	250c      	movs	r5, #12
 8004aca:	197b      	adds	r3, r7, r5
 8004acc:	2107      	movs	r1, #7
 8004ace:	400a      	ands	r2, r1
 8004ad0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ad2:	183b      	adds	r3, r7, r0
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	197a      	adds	r2, r7, r5
 8004ad8:	7812      	ldrb	r2, [r2, #0]
 8004ada:	4914      	ldr	r1, [pc, #80]	; (8004b2c <UARTEx_SetNbDataToProcess+0xb4>)
 8004adc:	5c8a      	ldrb	r2, [r1, r2]
 8004ade:	435a      	muls	r2, r3
 8004ae0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ae2:	197b      	adds	r3, r7, r5
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <UARTEx_SetNbDataToProcess+0xb8>)
 8004ae8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004aea:	0019      	movs	r1, r3
 8004aec:	f7fb fb92 	bl	8000214 <__divsi3>
 8004af0:	0003      	movs	r3, r0
 8004af2:	b299      	uxth	r1, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	226a      	movs	r2, #106	; 0x6a
 8004af8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004afa:	19bb      	adds	r3, r7, r6
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	193a      	adds	r2, r7, r4
 8004b00:	7812      	ldrb	r2, [r2, #0]
 8004b02:	490a      	ldr	r1, [pc, #40]	; (8004b2c <UARTEx_SetNbDataToProcess+0xb4>)
 8004b04:	5c8a      	ldrb	r2, [r1, r2]
 8004b06:	435a      	muls	r2, r3
 8004b08:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b0a:	193b      	adds	r3, r7, r4
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	4a08      	ldr	r2, [pc, #32]	; (8004b30 <UARTEx_SetNbDataToProcess+0xb8>)
 8004b10:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b12:	0019      	movs	r1, r3
 8004b14:	f7fb fb7e 	bl	8000214 <__divsi3>
 8004b18:	0003      	movs	r3, r0
 8004b1a:	b299      	uxth	r1, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2268      	movs	r2, #104	; 0x68
 8004b20:	5299      	strh	r1, [r3, r2]
}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b005      	add	sp, #20
 8004b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	08006148 	.word	0x08006148
 8004b30:	08006150 	.word	0x08006150

08004b34 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	0002      	movs	r2, r0
 8004b3c:	1dfb      	adds	r3, r7, #7
 8004b3e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 8004b40:	23fa      	movs	r3, #250	; 0xfa
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	1df9      	adds	r1, r7, #7
 8004b46:	4804      	ldr	r0, [pc, #16]	; (8004b58 <DEV_SPI_WRite+0x24>)
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f7fe f9a1 	bl	8002e90 <HAL_SPI_Transmit>
}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b002      	add	sp, #8
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	200000f8 	.word	0x200000f8

08004b5c <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	480d      	ldr	r0, [pc, #52]	; (8004b9c <DEV_Module_Init+0x40>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	0019      	movs	r1, r3
 8004b6a:	f7fd fa8f 	bl	800208c <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	480b      	ldr	r0, [pc, #44]	; (8004ba0 <DEV_Module_Init+0x44>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	0019      	movs	r1, r3
 8004b78:	f7fd fa88 	bl	800208c <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8004b7c:	23a0      	movs	r3, #160	; 0xa0
 8004b7e:	05db      	lsls	r3, r3, #23
 8004b80:	2201      	movs	r2, #1
 8004b82:	2108      	movs	r1, #8
 8004b84:	0018      	movs	r0, r3
 8004b86:	f7fd fa81 	bl	800208c <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <DEV_Module_Init+0x48>)
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f7fe fd0c 	bl	80035ac <HAL_TIM_PWM_Start>
		return 0;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	0018      	movs	r0, r3
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	50000800 	.word	0x50000800
 8004ba0:	50000400 	.word	0x50000400
 8004ba4:	2000015c 	.word	0x2000015c

08004ba8 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8004ba8:	b5b0      	push	{r4, r5, r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	0005      	movs	r5, r0
 8004bb0:	000c      	movs	r4, r1
 8004bb2:	0010      	movs	r0, r2
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	1dbb      	adds	r3, r7, #6
 8004bb8:	1c2a      	adds	r2, r5, #0
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	1d3b      	adds	r3, r7, #4
 8004bbe:	1c22      	adds	r2, r4, #0
 8004bc0:	801a      	strh	r2, [r3, #0]
 8004bc2:	1cbb      	adds	r3, r7, #2
 8004bc4:	1c02      	adds	r2, r0, #0
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	003b      	movs	r3, r7
 8004bca:	1c0a      	adds	r2, r1, #0
 8004bcc:	801a      	strh	r2, [r3, #0]
    Paint.WidthMemory = Width;
 8004bce:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <Paint_NewImage+0x98>)
 8004bd0:	1dba      	adds	r2, r7, #6
 8004bd2:	8812      	ldrh	r2, [r2, #0]
 8004bd4:	811a      	strh	r2, [r3, #8]
    Paint.HeightMemory = Height;
 8004bd6:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <Paint_NewImage+0x98>)
 8004bd8:	1d3a      	adds	r2, r7, #4
 8004bda:	8812      	ldrh	r2, [r2, #0]
 8004bdc:	815a      	strh	r2, [r3, #10]
    Paint.Color = Color;    
 8004bde:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <Paint_NewImage+0x98>)
 8004be0:	003a      	movs	r2, r7
 8004be2:	8812      	ldrh	r2, [r2, #0]
 8004be4:	819a      	strh	r2, [r3, #12]
    Paint.WidthByte = Width;
 8004be6:	4b16      	ldr	r3, [pc, #88]	; (8004c40 <Paint_NewImage+0x98>)
 8004be8:	1dba      	adds	r2, r7, #6
 8004bea:	8812      	ldrh	r2, [r2, #0]
 8004bec:	825a      	strh	r2, [r3, #18]
    Paint.HeightByte = Height;    
 8004bee:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <Paint_NewImage+0x98>)
 8004bf0:	1d3a      	adds	r2, r7, #4
 8004bf2:	8812      	ldrh	r2, [r2, #0]
 8004bf4:	829a      	strh	r2, [r3, #20]
   
    Paint.Rotate = Rotate;
 8004bf6:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <Paint_NewImage+0x98>)
 8004bf8:	1cba      	adds	r2, r7, #2
 8004bfa:	8812      	ldrh	r2, [r2, #0]
 8004bfc:	81da      	strh	r2, [r3, #14]
    Paint.Mirror = MIRROR_NONE;
 8004bfe:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <Paint_NewImage+0x98>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8004c04:	1cbb      	adds	r3, r7, #2
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <Paint_NewImage+0x6c>
 8004c0c:	1cbb      	adds	r3, r7, #2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	2bb4      	cmp	r3, #180	; 0xb4
 8004c12:	d108      	bne.n	8004c26 <Paint_NewImage+0x7e>
        Paint.Width = Width;
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <Paint_NewImage+0x98>)
 8004c16:	1dba      	adds	r2, r7, #6
 8004c18:	8812      	ldrh	r2, [r2, #0]
 8004c1a:	809a      	strh	r2, [r3, #4]
        Paint.Height = Height;
 8004c1c:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <Paint_NewImage+0x98>)
 8004c1e:	1d3a      	adds	r2, r7, #4
 8004c20:	8812      	ldrh	r2, [r2, #0]
 8004c22:	80da      	strh	r2, [r3, #6]
 8004c24:	e008      	b.n	8004c38 <Paint_NewImage+0x90>
    } else {
        Paint.Width = Height;
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <Paint_NewImage+0x98>)
 8004c28:	1d3a      	adds	r2, r7, #4
 8004c2a:	8812      	ldrh	r2, [r2, #0]
 8004c2c:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 8004c2e:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <Paint_NewImage+0x98>)
 8004c30:	1dba      	adds	r2, r7, #6
 8004c32:	8812      	ldrh	r2, [r2, #0]
 8004c34:	80da      	strh	r2, [r3, #6]
    }
}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b002      	add	sp, #8
 8004c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c40:	20000240 	.word	0x20000240

08004c44 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8004c4c:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <Paint_SetClearFuntion+0x18>)
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	601a      	str	r2, [r3, #0]
}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b002      	add	sp, #8
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	2000025c 	.word	0x2000025c

08004c60 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <Paint_SetDisplayFuntion+0x18>)
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	601a      	str	r2, [r3, #0]
}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b002      	add	sp, #8
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	20000258 	.word	0x20000258

08004c7c <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8004c7c:	b590      	push	{r4, r7, lr}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	0004      	movs	r4, r0
 8004c84:	0008      	movs	r0, r1
 8004c86:	0011      	movs	r1, r2
 8004c88:	1dbb      	adds	r3, r7, #6
 8004c8a:	1c22      	adds	r2, r4, #0
 8004c8c:	801a      	strh	r2, [r3, #0]
 8004c8e:	1d3b      	adds	r3, r7, #4
 8004c90:	1c02      	adds	r2, r0, #0
 8004c92:	801a      	strh	r2, [r3, #0]
 8004c94:	1cbb      	adds	r3, r7, #2
 8004c96:	1c0a      	adds	r2, r1, #0
 8004c98:	801a      	strh	r2, [r3, #0]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8004c9a:	4b66      	ldr	r3, [pc, #408]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004c9c:	889b      	ldrh	r3, [r3, #4]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	1dba      	adds	r2, r7, #6
 8004ca2:	8812      	ldrh	r2, [r2, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d900      	bls.n	8004caa <Paint_SetPixel+0x2e>
 8004ca8:	e0b9      	b.n	8004e1e <Paint_SetPixel+0x1a2>
 8004caa:	4b62      	ldr	r3, [pc, #392]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004cac:	88db      	ldrh	r3, [r3, #6]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	1d3a      	adds	r2, r7, #4
 8004cb2:	8812      	ldrh	r2, [r2, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d900      	bls.n	8004cba <Paint_SetPixel+0x3e>
 8004cb8:	e0b1      	b.n	8004e1e <Paint_SetPixel+0x1a2>
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8004cba:	4b5e      	ldr	r3, [pc, #376]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004cbc:	89db      	ldrh	r3, [r3, #14]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2287      	movs	r2, #135	; 0x87
 8004cc2:	0052      	lsls	r2, r2, #1
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d040      	beq.n	8004d4a <Paint_SetPixel+0xce>
 8004cc8:	2287      	movs	r2, #135	; 0x87
 8004cca:	0052      	lsls	r2, r2, #1
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	dd00      	ble.n	8004cd2 <Paint_SetPixel+0x56>
 8004cd0:	e0a7      	b.n	8004e22 <Paint_SetPixel+0x1a6>
 8004cd2:	2bb4      	cmp	r3, #180	; 0xb4
 8004cd4:	d022      	beq.n	8004d1c <Paint_SetPixel+0xa0>
 8004cd6:	dd00      	ble.n	8004cda <Paint_SetPixel+0x5e>
 8004cd8:	e0a3      	b.n	8004e22 <Paint_SetPixel+0x1a6>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <Paint_SetPixel+0x68>
 8004cde:	2b5a      	cmp	r3, #90	; 0x5a
 8004ce0:	d00b      	beq.n	8004cfa <Paint_SetPixel+0x7e>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8004ce2:	e09e      	b.n	8004e22 <Paint_SetPixel+0x1a6>
        X = Xpoint;
 8004ce4:	230e      	movs	r3, #14
 8004ce6:	18fb      	adds	r3, r7, r3
 8004ce8:	1dba      	adds	r2, r7, #6
 8004cea:	8812      	ldrh	r2, [r2, #0]
 8004cec:	801a      	strh	r2, [r3, #0]
        Y = Ypoint;  
 8004cee:	230c      	movs	r3, #12
 8004cf0:	18fb      	adds	r3, r7, r3
 8004cf2:	1d3a      	adds	r2, r7, #4
 8004cf4:	8812      	ldrh	r2, [r2, #0]
 8004cf6:	801a      	strh	r2, [r3, #0]
        break;
 8004cf8:	e038      	b.n	8004d6c <Paint_SetPixel+0xf0>
        X = Paint.WidthMemory - Ypoint - 1;
 8004cfa:	4b4e      	ldr	r3, [pc, #312]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004cfc:	891b      	ldrh	r3, [r3, #8]
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	1d3b      	adds	r3, r7, #4
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	230e      	movs	r3, #14
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	801a      	strh	r2, [r3, #0]
        Y = Xpoint;
 8004d10:	230c      	movs	r3, #12
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	1dba      	adds	r2, r7, #6
 8004d16:	8812      	ldrh	r2, [r2, #0]
 8004d18:	801a      	strh	r2, [r3, #0]
        break;
 8004d1a:	e027      	b.n	8004d6c <Paint_SetPixel+0xf0>
        X = Paint.WidthMemory - Xpoint - 1;
 8004d1c:	4b45      	ldr	r3, [pc, #276]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004d1e:	891b      	ldrh	r3, [r3, #8]
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	1dbb      	adds	r3, r7, #6
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	230e      	movs	r3, #14
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	3a01      	subs	r2, #1
 8004d30:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Ypoint - 1;
 8004d32:	4b40      	ldr	r3, [pc, #256]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004d34:	895b      	ldrh	r3, [r3, #10]
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	1d3b      	adds	r3, r7, #4
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	230c      	movs	r3, #12
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	3a01      	subs	r2, #1
 8004d46:	801a      	strh	r2, [r3, #0]
        break;
 8004d48:	e010      	b.n	8004d6c <Paint_SetPixel+0xf0>
        X = Ypoint;
 8004d4a:	230e      	movs	r3, #14
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	1d3a      	adds	r2, r7, #4
 8004d50:	8812      	ldrh	r2, [r2, #0]
 8004d52:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Xpoint - 1;
 8004d54:	4b37      	ldr	r3, [pc, #220]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004d56:	895b      	ldrh	r3, [r3, #10]
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	1dbb      	adds	r3, r7, #6
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	230c      	movs	r3, #12
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	3a01      	subs	r2, #1
 8004d68:	801a      	strh	r2, [r3, #0]
        break;
 8004d6a:	46c0      	nop			; (mov r8, r8)
    }
    
    switch(Paint.Mirror) {
 8004d6c:	4b31      	ldr	r3, [pc, #196]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004d6e:	8a1b      	ldrh	r3, [r3, #16]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d020      	beq.n	8004db8 <Paint_SetPixel+0x13c>
 8004d76:	dc56      	bgt.n	8004e26 <Paint_SetPixel+0x1aa>
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d011      	beq.n	8004da0 <Paint_SetPixel+0x124>
 8004d7c:	dc53      	bgt.n	8004e26 <Paint_SetPixel+0x1aa>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d031      	beq.n	8004de6 <Paint_SetPixel+0x16a>
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d000      	beq.n	8004d88 <Paint_SetPixel+0x10c>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
        Y = Paint.HeightMemory - Y - 1;
        break;
    default:
        return;
 8004d86:	e04e      	b.n	8004e26 <Paint_SetPixel+0x1aa>
        X = Paint.WidthMemory - X - 1;
 8004d88:	4b2a      	ldr	r3, [pc, #168]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004d8a:	891b      	ldrh	r3, [r3, #8]
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	210e      	movs	r1, #14
 8004d90:	187b      	adds	r3, r7, r1
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	187b      	adds	r3, r7, r1
 8004d9a:	3a01      	subs	r2, #1
 8004d9c:	801a      	strh	r2, [r3, #0]
        break;
 8004d9e:	e023      	b.n	8004de8 <Paint_SetPixel+0x16c>
        Y = Paint.HeightMemory - Y - 1;
 8004da0:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004da2:	895b      	ldrh	r3, [r3, #10]
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	210c      	movs	r1, #12
 8004da8:	187b      	adds	r3, r7, r1
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	187b      	adds	r3, r7, r1
 8004db2:	3a01      	subs	r2, #1
 8004db4:	801a      	strh	r2, [r3, #0]
        break;
 8004db6:	e017      	b.n	8004de8 <Paint_SetPixel+0x16c>
        X = Paint.WidthMemory - X - 1;
 8004db8:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004dba:	891b      	ldrh	r3, [r3, #8]
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	210e      	movs	r1, #14
 8004dc0:	187b      	adds	r3, r7, r1
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	3a01      	subs	r2, #1
 8004dcc:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Y - 1;
 8004dce:	4b19      	ldr	r3, [pc, #100]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004dd0:	895b      	ldrh	r3, [r3, #10]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	210c      	movs	r1, #12
 8004dd6:	187b      	adds	r3, r7, r1
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	187b      	adds	r3, r7, r1
 8004de0:	3a01      	subs	r2, #1
 8004de2:	801a      	strh	r2, [r3, #0]
        break;
 8004de4:	e000      	b.n	8004de8 <Paint_SetPixel+0x16c>
        break;
 8004de6:	46c0      	nop			; (mov r8, r8)
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8004de8:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004dea:	891b      	ldrh	r3, [r3, #8]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	200e      	movs	r0, #14
 8004df0:	183a      	adds	r2, r7, r0
 8004df2:	8812      	ldrh	r2, [r2, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d818      	bhi.n	8004e2a <Paint_SetPixel+0x1ae>
 8004df8:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <Paint_SetPixel+0x1b8>)
 8004dfa:	895b      	ldrh	r3, [r3, #10]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	210c      	movs	r1, #12
 8004e00:	187a      	adds	r2, r7, r1
 8004e02:	8812      	ldrh	r2, [r2, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d810      	bhi.n	8004e2a <Paint_SetPixel+0x1ae>
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <Paint_SetPixel+0x1bc>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	1cba      	adds	r2, r7, #2
 8004e0e:	8814      	ldrh	r4, [r2, #0]
 8004e10:	187a      	adds	r2, r7, r1
 8004e12:	8811      	ldrh	r1, [r2, #0]
 8004e14:	183a      	adds	r2, r7, r0
 8004e16:	8810      	ldrh	r0, [r2, #0]
 8004e18:	0022      	movs	r2, r4
 8004e1a:	4798      	blx	r3
 8004e1c:	e006      	b.n	8004e2c <Paint_SetPixel+0x1b0>
        return;
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	e004      	b.n	8004e2c <Paint_SetPixel+0x1b0>
        return;
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	e002      	b.n	8004e2c <Paint_SetPixel+0x1b0>
        return;
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	e000      	b.n	8004e2c <Paint_SetPixel+0x1b0>
        return;
 8004e2a:	46c0      	nop			; (mov r8, r8)
}
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b005      	add	sp, #20
 8004e30:	bd90      	pop	{r4, r7, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	20000240 	.word	0x20000240
 8004e38:	20000258 	.word	0x20000258

08004e3c <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	0002      	movs	r2, r0
 8004e44:	1dbb      	adds	r3, r7, #6
 8004e46:	801a      	strh	r2, [r3, #0]
	CLEAR(Color);
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <Paint_Clear+0x20>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	1dba      	adds	r2, r7, #6
 8004e4e:	8812      	ldrh	r2, [r2, #0]
 8004e50:	0010      	movs	r0, r2
 8004e52:	4798      	blx	r3
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	2000025c 	.word	0x2000025c

08004e60 <Paint_ClearWindows>:
    Ystart :   Y starting point
    Xend   :   x end point
    Yend   :   y end point
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8004e60:	b5b0      	push	{r4, r5, r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	0005      	movs	r5, r0
 8004e68:	000c      	movs	r4, r1
 8004e6a:	0010      	movs	r0, r2
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	1dbb      	adds	r3, r7, #6
 8004e70:	1c2a      	adds	r2, r5, #0
 8004e72:	801a      	strh	r2, [r3, #0]
 8004e74:	1d3b      	adds	r3, r7, #4
 8004e76:	1c22      	adds	r2, r4, #0
 8004e78:	801a      	strh	r2, [r3, #0]
 8004e7a:	1cbb      	adds	r3, r7, #2
 8004e7c:	1c02      	adds	r2, r0, #0
 8004e7e:	801a      	strh	r2, [r3, #0]
 8004e80:	003b      	movs	r3, r7
 8004e82:	1c0a      	adds	r2, r1, #0
 8004e84:	801a      	strh	r2, [r3, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 8004e86:	230c      	movs	r3, #12
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	1d3a      	adds	r2, r7, #4
 8004e8c:	8812      	ldrh	r2, [r2, #0]
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	e024      	b.n	8004edc <Paint_ClearWindows+0x7c>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8004e92:	230e      	movs	r3, #14
 8004e94:	18fb      	adds	r3, r7, r3
 8004e96:	1dba      	adds	r2, r7, #6
 8004e98:	8812      	ldrh	r2, [r2, #0]
 8004e9a:	801a      	strh	r2, [r3, #0]
 8004e9c:	e011      	b.n	8004ec2 <Paint_ClearWindows+0x62>
            Paint_SetPixel(X, Y, Color);
 8004e9e:	2320      	movs	r3, #32
 8004ea0:	18fb      	adds	r3, r7, r3
 8004ea2:	881a      	ldrh	r2, [r3, #0]
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	18fb      	adds	r3, r7, r3
 8004ea8:	8819      	ldrh	r1, [r3, #0]
 8004eaa:	240e      	movs	r4, #14
 8004eac:	193b      	adds	r3, r7, r4
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f7ff fee3 	bl	8004c7c <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8004eb6:	0021      	movs	r1, r4
 8004eb8:	187b      	adds	r3, r7, r1
 8004eba:	881a      	ldrh	r2, [r3, #0]
 8004ebc:	187b      	adds	r3, r7, r1
 8004ebe:	3201      	adds	r2, #1
 8004ec0:	801a      	strh	r2, [r3, #0]
 8004ec2:	230e      	movs	r3, #14
 8004ec4:	18fa      	adds	r2, r7, r3
 8004ec6:	1cbb      	adds	r3, r7, #2
 8004ec8:	8812      	ldrh	r2, [r2, #0]
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d3e6      	bcc.n	8004e9e <Paint_ClearWindows+0x3e>
    for (Y = Ystart; Y < Yend; Y++) {
 8004ed0:	210c      	movs	r1, #12
 8004ed2:	187b      	adds	r3, r7, r1
 8004ed4:	881a      	ldrh	r2, [r3, #0]
 8004ed6:	187b      	adds	r3, r7, r1
 8004ed8:	3201      	adds	r2, #1
 8004eda:	801a      	strh	r2, [r3, #0]
 8004edc:	230c      	movs	r3, #12
 8004ede:	18fa      	adds	r2, r7, r3
 8004ee0:	003b      	movs	r3, r7
 8004ee2:	8812      	ldrh	r2, [r2, #0]
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d3d3      	bcc.n	8004e92 <Paint_ClearWindows+0x32>
        }
    }
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46c0      	nop			; (mov r8, r8)
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b004      	add	sp, #16
 8004ef2:	bdb0      	pop	{r4, r5, r7, pc}

08004ef4 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8004ef4:	b5b0      	push	{r4, r5, r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	0005      	movs	r5, r0
 8004efc:	000c      	movs	r4, r1
 8004efe:	0010      	movs	r0, r2
 8004f00:	0019      	movs	r1, r3
 8004f02:	1dbb      	adds	r3, r7, #6
 8004f04:	1c2a      	adds	r2, r5, #0
 8004f06:	801a      	strh	r2, [r3, #0]
 8004f08:	1d3b      	adds	r3, r7, #4
 8004f0a:	1c22      	adds	r2, r4, #0
 8004f0c:	801a      	strh	r2, [r3, #0]
 8004f0e:	1cbb      	adds	r3, r7, #2
 8004f10:	1c02      	adds	r2, r0, #0
 8004f12:	801a      	strh	r2, [r3, #0]
 8004f14:	1c7b      	adds	r3, r7, #1
 8004f16:	1c0a      	adds	r2, r1, #0
 8004f18:	701a      	strb	r2, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004f1a:	4b5f      	ldr	r3, [pc, #380]	; (8005098 <Paint_DrawPoint+0x1a4>)
 8004f1c:	889b      	ldrh	r3, [r3, #4]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	1dba      	adds	r2, r7, #6
 8004f22:	8812      	ldrh	r2, [r2, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d900      	bls.n	8004f2a <Paint_DrawPoint+0x36>
 8004f28:	e0b1      	b.n	800508e <Paint_DrawPoint+0x19a>
 8004f2a:	4b5b      	ldr	r3, [pc, #364]	; (8005098 <Paint_DrawPoint+0x1a4>)
 8004f2c:	88db      	ldrh	r3, [r3, #6]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	1d3a      	adds	r2, r7, #4
 8004f32:	8812      	ldrh	r2, [r2, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d900      	bls.n	8004f3a <Paint_DrawPoint+0x46>
 8004f38:	e0a9      	b.n	800508e <Paint_DrawPoint+0x19a>
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 8004f3a:	2320      	movs	r3, #32
 8004f3c:	18fb      	adds	r3, r7, r3
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d161      	bne.n	8005008 <Paint_DrawPoint+0x114>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8004f44:	230e      	movs	r3, #14
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	2200      	movs	r2, #0
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	e051      	b.n	8004ff2 <Paint_DrawPoint+0xfe>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8004f4e:	230c      	movs	r3, #12
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	2200      	movs	r2, #0
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	e039      	b.n	8004fcc <Paint_DrawPoint+0xd8>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8004f58:	1dbb      	adds	r3, r7, #6
 8004f5a:	881a      	ldrh	r2, [r3, #0]
 8004f5c:	200e      	movs	r0, #14
 8004f5e:	183b      	adds	r3, r7, r0
 8004f60:	2100      	movs	r1, #0
 8004f62:	5e5b      	ldrsh	r3, [r3, r1]
 8004f64:	18d2      	adds	r2, r2, r3
 8004f66:	1c7b      	adds	r3, r7, #1
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	d438      	bmi.n	8004fe0 <Paint_DrawPoint+0xec>
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	881a      	ldrh	r2, [r3, #0]
 8004f72:	210c      	movs	r1, #12
 8004f74:	187b      	adds	r3, r7, r1
 8004f76:	2400      	movs	r4, #0
 8004f78:	5f1b      	ldrsh	r3, [r3, r4]
 8004f7a:	18d2      	adds	r2, r2, r3
 8004f7c:	1c7b      	adds	r3, r7, #1
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	d42d      	bmi.n	8004fe0 <Paint_DrawPoint+0xec>
                    break;
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8004f84:	183b      	adds	r3, r7, r0
 8004f86:	881a      	ldrh	r2, [r3, #0]
 8004f88:	1dbb      	adds	r3, r7, #6
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	18d3      	adds	r3, r2, r3
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	1c7b      	adds	r3, r7, #1
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	b298      	uxth	r0, r3
 8004f9a:	000c      	movs	r4, r1
 8004f9c:	187b      	adds	r3, r7, r1
 8004f9e:	881a      	ldrh	r2, [r3, #0]
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	18d3      	adds	r3, r2, r3
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	1c7b      	adds	r3, r7, #1
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	b299      	uxth	r1, r3
 8004fb2:	1cbb      	adds	r3, r7, #2
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	001a      	movs	r2, r3
 8004fb8:	f7ff fe60 	bl	8004c7c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8004fbc:	193b      	adds	r3, r7, r4
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	5e9b      	ldrsh	r3, [r3, r2]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	193b      	adds	r3, r7, r4
 8004fca:	801a      	strh	r2, [r3, #0]
 8004fcc:	230c      	movs	r3, #12
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	5e9a      	ldrsh	r2, [r3, r2]
 8004fd4:	1c7b      	adds	r3, r7, #1
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	dbbb      	blt.n	8004f58 <Paint_DrawPoint+0x64>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8004fe0:	210e      	movs	r1, #14
 8004fe2:	187b      	adds	r3, r7, r1
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	5e9b      	ldrsh	r3, [r3, r2]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3301      	adds	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	187b      	adds	r3, r7, r1
 8004ff0:	801a      	strh	r2, [r3, #0]
 8004ff2:	230e      	movs	r3, #14
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	5e9a      	ldrsh	r2, [r3, r2]
 8004ffa:	1c7b      	adds	r3, r7, #1
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	3b01      	subs	r3, #1
 8005002:	429a      	cmp	r2, r3
 8005004:	dba3      	blt.n	8004f4e <Paint_DrawPoint+0x5a>
 8005006:	e043      	b.n	8005090 <Paint_DrawPoint+0x19c>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8005008:	230e      	movs	r3, #14
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	2200      	movs	r2, #0
 800500e:	801a      	strh	r2, [r3, #0]
 8005010:	e034      	b.n	800507c <Paint_DrawPoint+0x188>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8005012:	230c      	movs	r3, #12
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	2200      	movs	r2, #0
 8005018:	801a      	strh	r2, [r3, #0]
 800501a:	e01e      	b.n	800505a <Paint_DrawPoint+0x166>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800501c:	230e      	movs	r3, #14
 800501e:	18fb      	adds	r3, r7, r3
 8005020:	881a      	ldrh	r2, [r3, #0]
 8005022:	1dbb      	adds	r3, r7, #6
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	18d3      	adds	r3, r2, r3
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b298      	uxth	r0, r3
 800502e:	240c      	movs	r4, #12
 8005030:	193b      	adds	r3, r7, r4
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	1d3b      	adds	r3, r7, #4
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	18d3      	adds	r3, r2, r3
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b299      	uxth	r1, r3
 8005040:	1cbb      	adds	r3, r7, #2
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	001a      	movs	r2, r3
 8005046:	f7ff fe19 	bl	8004c7c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800504a:	193b      	adds	r3, r7, r4
 800504c:	2200      	movs	r2, #0
 800504e:	5e9b      	ldrsh	r3, [r3, r2]
 8005050:	b29b      	uxth	r3, r3
 8005052:	3301      	adds	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	193b      	adds	r3, r7, r4
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	230c      	movs	r3, #12
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	2200      	movs	r2, #0
 8005060:	5e9a      	ldrsh	r2, [r3, r2]
 8005062:	1c7b      	adds	r3, r7, #1
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	dbd8      	blt.n	800501c <Paint_DrawPoint+0x128>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800506a:	210e      	movs	r1, #14
 800506c:	187b      	adds	r3, r7, r1
 800506e:	2200      	movs	r2, #0
 8005070:	5e9b      	ldrsh	r3, [r3, r2]
 8005072:	b29b      	uxth	r3, r3
 8005074:	3301      	adds	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	187b      	adds	r3, r7, r1
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	230e      	movs	r3, #14
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	2200      	movs	r2, #0
 8005082:	5e9a      	ldrsh	r2, [r3, r2]
 8005084:	1c7b      	adds	r3, r7, #1
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	dbc2      	blt.n	8005012 <Paint_DrawPoint+0x11e>
 800508c:	e000      	b.n	8005090 <Paint_DrawPoint+0x19c>
        return;
 800508e:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
}
 8005090:	46bd      	mov	sp, r7
 8005092:	b004      	add	sp, #16
 8005094:	bdb0      	pop	{r4, r5, r7, pc}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	20000240 	.word	0x20000240

0800509c <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800509c:	b5b0      	push	{r4, r5, r7, lr}
 800509e:	b08c      	sub	sp, #48	; 0x30
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	0005      	movs	r5, r0
 80050a4:	000c      	movs	r4, r1
 80050a6:	0010      	movs	r0, r2
 80050a8:	0019      	movs	r1, r3
 80050aa:	1dbb      	adds	r3, r7, #6
 80050ac:	1c2a      	adds	r2, r5, #0
 80050ae:	801a      	strh	r2, [r3, #0]
 80050b0:	1d3b      	adds	r3, r7, #4
 80050b2:	1c22      	adds	r2, r4, #0
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	1cbb      	adds	r3, r7, #2
 80050b8:	1c02      	adds	r2, r0, #0
 80050ba:	801a      	strh	r2, [r3, #0]
 80050bc:	003b      	movs	r3, r7
 80050be:	1c0a      	adds	r2, r1, #0
 80050c0:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80050c2:	4b66      	ldr	r3, [pc, #408]	; (800525c <Paint_DrawLine+0x1c0>)
 80050c4:	889b      	ldrh	r3, [r3, #4]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	1dba      	adds	r2, r7, #6
 80050ca:	8812      	ldrh	r2, [r2, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d900      	bls.n	80050d2 <Paint_DrawLine+0x36>
 80050d0:	e0bb      	b.n	800524a <Paint_DrawLine+0x1ae>
 80050d2:	4b62      	ldr	r3, [pc, #392]	; (800525c <Paint_DrawLine+0x1c0>)
 80050d4:	88db      	ldrh	r3, [r3, #6]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	1d3a      	adds	r2, r7, #4
 80050da:	8812      	ldrh	r2, [r2, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d900      	bls.n	80050e2 <Paint_DrawLine+0x46>
 80050e0:	e0b3      	b.n	800524a <Paint_DrawLine+0x1ae>
        Xend > Paint.Width || Yend > Paint.Height) {
 80050e2:	4b5e      	ldr	r3, [pc, #376]	; (800525c <Paint_DrawLine+0x1c0>)
 80050e4:	889b      	ldrh	r3, [r3, #4]
 80050e6:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80050e8:	1cba      	adds	r2, r7, #2
 80050ea:	8812      	ldrh	r2, [r2, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d900      	bls.n	80050f2 <Paint_DrawLine+0x56>
 80050f0:	e0ab      	b.n	800524a <Paint_DrawLine+0x1ae>
        Xend > Paint.Width || Yend > Paint.Height) {
 80050f2:	4b5a      	ldr	r3, [pc, #360]	; (800525c <Paint_DrawLine+0x1c0>)
 80050f4:	88db      	ldrh	r3, [r3, #6]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	003a      	movs	r2, r7
 80050fa:	8812      	ldrh	r2, [r2, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d900      	bls.n	8005102 <Paint_DrawLine+0x66>
 8005100:	e0a3      	b.n	800524a <Paint_DrawLine+0x1ae>
        return;
    }

    UWORD Xpoint = Xstart;
 8005102:	2326      	movs	r3, #38	; 0x26
 8005104:	18fb      	adds	r3, r7, r3
 8005106:	1dba      	adds	r2, r7, #6
 8005108:	8812      	ldrh	r2, [r2, #0]
 800510a:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 800510c:	2324      	movs	r3, #36	; 0x24
 800510e:	18fb      	adds	r3, r7, r3
 8005110:	1d3a      	adds	r2, r7, #4
 8005112:	8812      	ldrh	r2, [r2, #0]
 8005114:	801a      	strh	r2, [r3, #0]
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8005116:	1cbb      	adds	r3, r7, #2
 8005118:	881a      	ldrh	r2, [r3, #0]
 800511a:	1dbb      	adds	r3, r7, #6
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	17da      	asrs	r2, r3, #31
 8005122:	189b      	adds	r3, r3, r2
 8005124:	4053      	eors	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8005128:	003b      	movs	r3, r7
 800512a:	881a      	ldrh	r2, [r3, #0]
 800512c:	1d3b      	adds	r3, r7, #4
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	17da      	asrs	r2, r3, #31
 8005134:	189b      	adds	r3, r3, r2
 8005136:	4053      	eors	r3, r2
 8005138:	425b      	negs	r3, r3
 800513a:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800513c:	1dba      	adds	r2, r7, #6
 800513e:	1cbb      	adds	r3, r7, #2
 8005140:	8812      	ldrh	r2, [r2, #0]
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d201      	bcs.n	800514c <Paint_DrawLine+0xb0>
 8005148:	2301      	movs	r3, #1
 800514a:	e001      	b.n	8005150 <Paint_DrawLine+0xb4>
 800514c:	2301      	movs	r3, #1
 800514e:	425b      	negs	r3, r3
 8005150:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8005152:	1d3a      	adds	r2, r7, #4
 8005154:	003b      	movs	r3, r7
 8005156:	8812      	ldrh	r2, [r2, #0]
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d201      	bcs.n	8005162 <Paint_DrawLine+0xc6>
 800515e:	2301      	movs	r3, #1
 8005160:	e001      	b.n	8005166 <Paint_DrawLine+0xca>
 8005162:	2301      	movs	r3, #1
 8005164:	425b      	negs	r3, r3
 8005166:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	18d3      	adds	r3, r2, r3
 800516e:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8005170:	231f      	movs	r3, #31
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]

    for (;;) {
        Dotted_Len++;
 8005178:	251f      	movs	r5, #31
 800517a:	197b      	adds	r3, r7, r5
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	197b      	adds	r3, r7, r5
 8005180:	3201      	adds	r2, #1
 8005182:	701a      	strb	r2, [r3, #0]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8005184:	2340      	movs	r3, #64	; 0x40
 8005186:	18fb      	adds	r3, r7, r3
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d11d      	bne.n	80051ca <Paint_DrawLine+0x12e>
 800518e:	197b      	adds	r3, r7, r5
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2103      	movs	r1, #3
 8005194:	0018      	movs	r0, r3
 8005196:	f7fb f839 	bl	800020c <__aeabi_uidivmod>
 800519a:	000b      	movs	r3, r1
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d113      	bne.n	80051ca <Paint_DrawLine+0x12e>
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80051a2:	233c      	movs	r3, #60	; 0x3c
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	781a      	ldrb	r2, [r3, #0]
 80051a8:	4c2d      	ldr	r4, [pc, #180]	; (8005260 <Paint_DrawLine+0x1c4>)
 80051aa:	2324      	movs	r3, #36	; 0x24
 80051ac:	18fb      	adds	r3, r7, r3
 80051ae:	8819      	ldrh	r1, [r3, #0]
 80051b0:	2326      	movs	r3, #38	; 0x26
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	8818      	ldrh	r0, [r3, #0]
 80051b6:	2301      	movs	r3, #1
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	0013      	movs	r3, r2
 80051bc:	0022      	movs	r2, r4
 80051be:	f7ff fe99 	bl	8004ef4 <Paint_DrawPoint>
            Dotted_Len = 0;
 80051c2:	197b      	adds	r3, r7, r5
 80051c4:	2200      	movs	r2, #0
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e010      	b.n	80051ec <Paint_DrawLine+0x150>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80051ca:	233c      	movs	r3, #60	; 0x3c
 80051cc:	18fb      	adds	r3, r7, r3
 80051ce:	781c      	ldrb	r4, [r3, #0]
 80051d0:	2338      	movs	r3, #56	; 0x38
 80051d2:	18fb      	adds	r3, r7, r3
 80051d4:	881a      	ldrh	r2, [r3, #0]
 80051d6:	2324      	movs	r3, #36	; 0x24
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	8819      	ldrh	r1, [r3, #0]
 80051dc:	2326      	movs	r3, #38	; 0x26
 80051de:	18fb      	adds	r3, r7, r3
 80051e0:	8818      	ldrh	r0, [r3, #0]
 80051e2:	2301      	movs	r3, #1
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	0023      	movs	r3, r4
 80051e8:	f7ff fe84 	bl	8004ef4 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	dc11      	bgt.n	800521a <Paint_DrawLine+0x17e>
            if (Xpoint == Xend)
 80051f6:	2026      	movs	r0, #38	; 0x26
 80051f8:	183a      	adds	r2, r7, r0
 80051fa:	1cbb      	adds	r3, r7, #2
 80051fc:	8812      	ldrh	r2, [r2, #0]
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d024      	beq.n	800524e <Paint_DrawLine+0x1b2>
                break;
            Esp += dy;
 8005204:	6a3a      	ldr	r2, [r7, #32]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	18d3      	adds	r3, r2, r3
 800520a:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	b299      	uxth	r1, r3
 8005210:	183b      	adds	r3, r7, r0
 8005212:	183a      	adds	r2, r7, r0
 8005214:	8812      	ldrh	r2, [r2, #0]
 8005216:	188a      	adds	r2, r1, r2
 8005218:	801a      	strh	r2, [r3, #0]
        }
        if (2 * Esp <= dx) {
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	429a      	cmp	r2, r3
 8005222:	dba9      	blt.n	8005178 <Paint_DrawLine+0xdc>
            if (Ypoint == Yend)
 8005224:	2024      	movs	r0, #36	; 0x24
 8005226:	183a      	adds	r2, r7, r0
 8005228:	003b      	movs	r3, r7
 800522a:	8812      	ldrh	r2, [r2, #0]
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d00f      	beq.n	8005252 <Paint_DrawLine+0x1b6>
                break;
            Esp += dx;
 8005232:	6a3a      	ldr	r2, [r7, #32]
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	18d3      	adds	r3, r2, r3
 8005238:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	b299      	uxth	r1, r3
 800523e:	183b      	adds	r3, r7, r0
 8005240:	183a      	adds	r2, r7, r0
 8005242:	8812      	ldrh	r2, [r2, #0]
 8005244:	188a      	adds	r2, r1, r2
 8005246:	801a      	strh	r2, [r3, #0]
        Dotted_Len++;
 8005248:	e796      	b.n	8005178 <Paint_DrawLine+0xdc>
        return;
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	e002      	b.n	8005254 <Paint_DrawLine+0x1b8>
                break;
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	e000      	b.n	8005254 <Paint_DrawLine+0x1b8>
                break;
 8005252:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8005254:	46bd      	mov	sp, r7
 8005256:	b00a      	add	sp, #40	; 0x28
 8005258:	bdb0      	pop	{r4, r5, r7, pc}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	20000240 	.word	0x20000240
 8005260:	0000ffff 	.word	0x0000ffff

08005264 <Paint_DrawRectangle>:
    Color  ：The color of the Rectangular segment
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
 8005264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005266:	b089      	sub	sp, #36	; 0x24
 8005268:	af04      	add	r7, sp, #16
 800526a:	0005      	movs	r5, r0
 800526c:	000c      	movs	r4, r1
 800526e:	0010      	movs	r0, r2
 8005270:	0019      	movs	r1, r3
 8005272:	1dbb      	adds	r3, r7, #6
 8005274:	1c2a      	adds	r2, r5, #0
 8005276:	801a      	strh	r2, [r3, #0]
 8005278:	1d3b      	adds	r3, r7, #4
 800527a:	1c22      	adds	r2, r4, #0
 800527c:	801a      	strh	r2, [r3, #0]
 800527e:	1cbb      	adds	r3, r7, #2
 8005280:	1c02      	adds	r2, r0, #0
 8005282:	801a      	strh	r2, [r3, #0]
 8005284:	003b      	movs	r3, r7
 8005286:	1c0a      	adds	r2, r1, #0
 8005288:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800528a:	4b5b      	ldr	r3, [pc, #364]	; (80053f8 <Paint_DrawRectangle+0x194>)
 800528c:	889b      	ldrh	r3, [r3, #4]
 800528e:	b29b      	uxth	r3, r3
 8005290:	1dba      	adds	r2, r7, #6
 8005292:	8812      	ldrh	r2, [r2, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d900      	bls.n	800529a <Paint_DrawRectangle+0x36>
 8005298:	e0a9      	b.n	80053ee <Paint_DrawRectangle+0x18a>
 800529a:	4b57      	ldr	r3, [pc, #348]	; (80053f8 <Paint_DrawRectangle+0x194>)
 800529c:	88db      	ldrh	r3, [r3, #6]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	1d3a      	adds	r2, r7, #4
 80052a2:	8812      	ldrh	r2, [r2, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d900      	bls.n	80052aa <Paint_DrawRectangle+0x46>
 80052a8:	e0a1      	b.n	80053ee <Paint_DrawRectangle+0x18a>
        Xend > Paint.Width || Yend > Paint.Height) {
 80052aa:	4b53      	ldr	r3, [pc, #332]	; (80053f8 <Paint_DrawRectangle+0x194>)
 80052ac:	889b      	ldrh	r3, [r3, #4]
 80052ae:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80052b0:	1cba      	adds	r2, r7, #2
 80052b2:	8812      	ldrh	r2, [r2, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d900      	bls.n	80052ba <Paint_DrawRectangle+0x56>
 80052b8:	e099      	b.n	80053ee <Paint_DrawRectangle+0x18a>
        Xend > Paint.Width || Yend > Paint.Height) {
 80052ba:	4b4f      	ldr	r3, [pc, #316]	; (80053f8 <Paint_DrawRectangle+0x194>)
 80052bc:	88db      	ldrh	r3, [r3, #6]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	003a      	movs	r2, r7
 80052c2:	8812      	ldrh	r2, [r2, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d900      	bls.n	80052ca <Paint_DrawRectangle+0x66>
 80052c8:	e091      	b.n	80053ee <Paint_DrawRectangle+0x18a>
        return;
    }

    if (Filled ) {
 80052ca:	2328      	movs	r3, #40	; 0x28
 80052cc:	2208      	movs	r2, #8
 80052ce:	189b      	adds	r3, r3, r2
 80052d0:	19db      	adds	r3, r3, r7
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d02b      	beq.n	8005330 <Paint_DrawRectangle+0xcc>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80052d8:	230e      	movs	r3, #14
 80052da:	18fb      	adds	r3, r7, r3
 80052dc:	1d3a      	adds	r2, r7, #4
 80052de:	8812      	ldrh	r2, [r2, #0]
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	e01d      	b.n	8005320 <Paint_DrawRectangle+0xbc>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
 80052e4:	250e      	movs	r5, #14
 80052e6:	197b      	adds	r3, r7, r5
 80052e8:	881c      	ldrh	r4, [r3, #0]
 80052ea:	1cbb      	adds	r3, r7, #2
 80052ec:	881a      	ldrh	r2, [r3, #0]
 80052ee:	197b      	adds	r3, r7, r5
 80052f0:	8819      	ldrh	r1, [r3, #0]
 80052f2:	1dbb      	adds	r3, r7, #6
 80052f4:	8818      	ldrh	r0, [r3, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	9302      	str	r3, [sp, #8]
 80052fa:	2324      	movs	r3, #36	; 0x24
 80052fc:	2608      	movs	r6, #8
 80052fe:	199b      	adds	r3, r3, r6
 8005300:	19db      	adds	r3, r3, r7
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	2320      	movs	r3, #32
 8005308:	199b      	adds	r3, r3, r6
 800530a:	19db      	adds	r3, r3, r7
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	0023      	movs	r3, r4
 8005312:	f7ff fec3 	bl	800509c <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8005316:	197b      	adds	r3, r7, r5
 8005318:	881a      	ldrh	r2, [r3, #0]
 800531a:	197b      	adds	r3, r7, r5
 800531c:	3201      	adds	r2, #1
 800531e:	801a      	strh	r2, [r3, #0]
 8005320:	230e      	movs	r3, #14
 8005322:	18fa      	adds	r2, r7, r3
 8005324:	003b      	movs	r3, r7
 8005326:	8812      	ldrh	r2, [r2, #0]
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d3da      	bcc.n	80052e4 <Paint_DrawRectangle+0x80>
 800532e:	e05f      	b.n	80053f0 <Paint_DrawRectangle+0x18c>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8005330:	1d3b      	adds	r3, r7, #4
 8005332:	881c      	ldrh	r4, [r3, #0]
 8005334:	1cbb      	adds	r3, r7, #2
 8005336:	881a      	ldrh	r2, [r3, #0]
 8005338:	1d3b      	adds	r3, r7, #4
 800533a:	8819      	ldrh	r1, [r3, #0]
 800533c:	1dbb      	adds	r3, r7, #6
 800533e:	8818      	ldrh	r0, [r3, #0]
 8005340:	2300      	movs	r3, #0
 8005342:	9302      	str	r3, [sp, #8]
 8005344:	2524      	movs	r5, #36	; 0x24
 8005346:	2308      	movs	r3, #8
 8005348:	18ee      	adds	r6, r5, r3
 800534a:	19f3      	adds	r3, r6, r7
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	9301      	str	r3, [sp, #4]
 8005350:	2620      	movs	r6, #32
 8005352:	2308      	movs	r3, #8
 8005354:	18f3      	adds	r3, r6, r3
 8005356:	19db      	adds	r3, r3, r7
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	0023      	movs	r3, r4
 800535e:	f7ff fe9d 	bl	800509c <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 8005362:	003b      	movs	r3, r7
 8005364:	881c      	ldrh	r4, [r3, #0]
 8005366:	1dbb      	adds	r3, r7, #6
 8005368:	881a      	ldrh	r2, [r3, #0]
 800536a:	1d3b      	adds	r3, r7, #4
 800536c:	8819      	ldrh	r1, [r3, #0]
 800536e:	1dbb      	adds	r3, r7, #6
 8005370:	8818      	ldrh	r0, [r3, #0]
 8005372:	2300      	movs	r3, #0
 8005374:	9302      	str	r3, [sp, #8]
 8005376:	2308      	movs	r3, #8
 8005378:	18eb      	adds	r3, r5, r3
 800537a:	19db      	adds	r3, r3, r7
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	2308      	movs	r3, #8
 8005382:	18f3      	adds	r3, r6, r3
 8005384:	19db      	adds	r3, r3, r7
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	0023      	movs	r3, r4
 800538c:	f7ff fe86 	bl	800509c <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8005390:	1d3b      	adds	r3, r7, #4
 8005392:	881c      	ldrh	r4, [r3, #0]
 8005394:	1cbb      	adds	r3, r7, #2
 8005396:	881a      	ldrh	r2, [r3, #0]
 8005398:	003b      	movs	r3, r7
 800539a:	8819      	ldrh	r1, [r3, #0]
 800539c:	1cbb      	adds	r3, r7, #2
 800539e:	8818      	ldrh	r0, [r3, #0]
 80053a0:	2300      	movs	r3, #0
 80053a2:	9302      	str	r3, [sp, #8]
 80053a4:	2308      	movs	r3, #8
 80053a6:	18eb      	adds	r3, r5, r3
 80053a8:	19db      	adds	r3, r3, r7
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	2308      	movs	r3, #8
 80053b0:	18f3      	adds	r3, r6, r3
 80053b2:	19db      	adds	r3, r3, r7
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	0023      	movs	r3, r4
 80053ba:	f7ff fe6f 	bl	800509c <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 80053be:	003b      	movs	r3, r7
 80053c0:	881c      	ldrh	r4, [r3, #0]
 80053c2:	1dbb      	adds	r3, r7, #6
 80053c4:	881a      	ldrh	r2, [r3, #0]
 80053c6:	003b      	movs	r3, r7
 80053c8:	8819      	ldrh	r1, [r3, #0]
 80053ca:	1cbb      	adds	r3, r7, #2
 80053cc:	8818      	ldrh	r0, [r3, #0]
 80053ce:	2300      	movs	r3, #0
 80053d0:	9302      	str	r3, [sp, #8]
 80053d2:	2308      	movs	r3, #8
 80053d4:	18ed      	adds	r5, r5, r3
 80053d6:	19eb      	adds	r3, r5, r7
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	2308      	movs	r3, #8
 80053de:	18f3      	adds	r3, r6, r3
 80053e0:	19db      	adds	r3, r3, r7
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	0023      	movs	r3, r4
 80053e8:	f7ff fe58 	bl	800509c <Paint_DrawLine>
 80053ec:	e000      	b.n	80053f0 <Paint_DrawRectangle+0x18c>
        return;
 80053ee:	46c0      	nop			; (mov r8, r8)
    }
}
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b005      	add	sp, #20
 80053f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	20000240 	.word	0x20000240

080053fc <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 80053fc:	b5b0      	push	{r4, r5, r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	0004      	movs	r4, r0
 8005404:	0008      	movs	r0, r1
 8005406:	0011      	movs	r1, r2
 8005408:	607b      	str	r3, [r7, #4]
 800540a:	250e      	movs	r5, #14
 800540c:	197b      	adds	r3, r7, r5
 800540e:	1c22      	adds	r2, r4, #0
 8005410:	801a      	strh	r2, [r3, #0]
 8005412:	240c      	movs	r4, #12
 8005414:	193b      	adds	r3, r7, r4
 8005416:	1c02      	adds	r2, r0, #0
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	200b      	movs	r0, #11
 800541c:	183b      	adds	r3, r7, r0
 800541e:	1c0a      	adds	r2, r1, #0
 8005420:	701a      	strb	r2, [r3, #0]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8005422:	4b66      	ldr	r3, [pc, #408]	; (80055bc <Paint_DrawChar+0x1c0>)
 8005424:	889b      	ldrh	r3, [r3, #4]
 8005426:	b29b      	uxth	r3, r3
 8005428:	197a      	adds	r2, r7, r5
 800542a:	8812      	ldrh	r2, [r2, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d900      	bls.n	8005432 <Paint_DrawChar+0x36>
 8005430:	e0c0      	b.n	80055b4 <Paint_DrawChar+0x1b8>
 8005432:	4b62      	ldr	r3, [pc, #392]	; (80055bc <Paint_DrawChar+0x1c0>)
 8005434:	88db      	ldrh	r3, [r3, #6]
 8005436:	b29b      	uxth	r3, r3
 8005438:	193a      	adds	r2, r7, r4
 800543a:	8812      	ldrh	r2, [r2, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d900      	bls.n	8005442 <Paint_DrawChar+0x46>
 8005440:	e0b8      	b.n	80055b4 <Paint_DrawChar+0x1b8>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8005442:	183b      	adds	r3, r7, r0
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	3b20      	subs	r3, #32
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	88d2      	ldrh	r2, [r2, #6]
 800544c:	4353      	muls	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	8892      	ldrh	r2, [r2, #4]
 8005452:	08d2      	lsrs	r2, r2, #3
 8005454:	b292      	uxth	r2, r2
 8005456:	0010      	movs	r0, r2
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	8892      	ldrh	r2, [r2, #4]
 800545c:	2107      	movs	r1, #7
 800545e:	400a      	ands	r2, r1
 8005460:	b292      	uxth	r2, r2
 8005462:	1e51      	subs	r1, r2, #1
 8005464:	418a      	sbcs	r2, r1
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	1882      	adds	r2, r0, r2
 800546a:	4353      	muls	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	18d3      	adds	r3, r2, r3
 8005476:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8005478:	231e      	movs	r3, #30
 800547a:	18fb      	adds	r3, r7, r3
 800547c:	2200      	movs	r2, #0
 800547e:	801a      	strh	r2, [r3, #0]
 8005480:	e08f      	b.n	80055a2 <Paint_DrawChar+0x1a6>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8005482:	231c      	movs	r3, #28
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	2200      	movs	r2, #0
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	e072      	b.n	8005572 <Paint_DrawChar+0x176>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800548c:	2330      	movs	r3, #48	; 0x30
 800548e:	18fb      	adds	r3, r7, r3
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	4a4b      	ldr	r2, [pc, #300]	; (80055c0 <Paint_DrawChar+0x1c4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d122      	bne.n	80054de <Paint_DrawChar+0xe2>
                if (*ptr & (0x80 >> (Column % 8)))
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	0019      	movs	r1, r3
 800549e:	201c      	movs	r0, #28
 80054a0:	183b      	adds	r3, r7, r0
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	2207      	movs	r2, #7
 80054a6:	4013      	ands	r3, r2
 80054a8:	2280      	movs	r2, #128	; 0x80
 80054aa:	411a      	asrs	r2, r3
 80054ac:	0013      	movs	r3, r2
 80054ae:	400b      	ands	r3, r1
 80054b0:	d04e      	beq.n	8005550 <Paint_DrawChar+0x154>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80054b2:	230e      	movs	r3, #14
 80054b4:	18fa      	adds	r2, r7, r3
 80054b6:	183b      	adds	r3, r7, r0
 80054b8:	8812      	ldrh	r2, [r2, #0]
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	18d3      	adds	r3, r2, r3
 80054be:	b298      	uxth	r0, r3
 80054c0:	230c      	movs	r3, #12
 80054c2:	18fa      	adds	r2, r7, r3
 80054c4:	231e      	movs	r3, #30
 80054c6:	18fb      	adds	r3, r7, r3
 80054c8:	8812      	ldrh	r2, [r2, #0]
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	18d3      	adds	r3, r2, r3
 80054ce:	b299      	uxth	r1, r3
 80054d0:	2334      	movs	r3, #52	; 0x34
 80054d2:	18fb      	adds	r3, r7, r3
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	001a      	movs	r2, r3
 80054d8:	f7ff fbd0 	bl	8004c7c <Paint_SetPixel>
 80054dc:	e038      	b.n	8005550 <Paint_DrawChar+0x154>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	0019      	movs	r1, r3
 80054e4:	201c      	movs	r0, #28
 80054e6:	183b      	adds	r3, r7, r0
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	2207      	movs	r2, #7
 80054ec:	4013      	ands	r3, r2
 80054ee:	2280      	movs	r2, #128	; 0x80
 80054f0:	411a      	asrs	r2, r3
 80054f2:	0013      	movs	r3, r2
 80054f4:	400b      	ands	r3, r1
 80054f6:	d015      	beq.n	8005524 <Paint_DrawChar+0x128>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80054f8:	230e      	movs	r3, #14
 80054fa:	18fa      	adds	r2, r7, r3
 80054fc:	183b      	adds	r3, r7, r0
 80054fe:	8812      	ldrh	r2, [r2, #0]
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	18d3      	adds	r3, r2, r3
 8005504:	b298      	uxth	r0, r3
 8005506:	230c      	movs	r3, #12
 8005508:	18fa      	adds	r2, r7, r3
 800550a:	231e      	movs	r3, #30
 800550c:	18fb      	adds	r3, r7, r3
 800550e:	8812      	ldrh	r2, [r2, #0]
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	18d3      	adds	r3, r2, r3
 8005514:	b299      	uxth	r1, r3
 8005516:	2334      	movs	r3, #52	; 0x34
 8005518:	18fb      	adds	r3, r7, r3
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	001a      	movs	r2, r3
 800551e:	f7ff fbad 	bl	8004c7c <Paint_SetPixel>
 8005522:	e015      	b.n	8005550 <Paint_DrawChar+0x154>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8005524:	230e      	movs	r3, #14
 8005526:	18fa      	adds	r2, r7, r3
 8005528:	231c      	movs	r3, #28
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	8812      	ldrh	r2, [r2, #0]
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	18d3      	adds	r3, r2, r3
 8005532:	b298      	uxth	r0, r3
 8005534:	230c      	movs	r3, #12
 8005536:	18fa      	adds	r2, r7, r3
 8005538:	231e      	movs	r3, #30
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	8812      	ldrh	r2, [r2, #0]
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	18d3      	adds	r3, r2, r3
 8005542:	b299      	uxth	r1, r3
 8005544:	2330      	movs	r3, #48	; 0x30
 8005546:	18fb      	adds	r3, r7, r3
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	001a      	movs	r2, r3
 800554c:	f7ff fb96 	bl	8004c7c <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8005550:	231c      	movs	r3, #28
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	2207      	movs	r2, #7
 8005558:	4013      	ands	r3, r2
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b07      	cmp	r3, #7
 800555e:	d102      	bne.n	8005566 <Paint_DrawChar+0x16a>
                ptr++;
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	3301      	adds	r3, #1
 8005564:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8005566:	211c      	movs	r1, #28
 8005568:	187b      	adds	r3, r7, r1
 800556a:	881a      	ldrh	r2, [r3, #0]
 800556c:	187b      	adds	r3, r7, r1
 800556e:	3201      	adds	r2, #1
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	889b      	ldrh	r3, [r3, #4]
 8005576:	221c      	movs	r2, #28
 8005578:	18ba      	adds	r2, r7, r2
 800557a:	8812      	ldrh	r2, [r2, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d200      	bcs.n	8005582 <Paint_DrawChar+0x186>
 8005580:	e784      	b.n	800548c <Paint_DrawChar+0x90>
        }// Write a line
        if (Font->Width % 8 != 0)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	889b      	ldrh	r3, [r3, #4]
 8005586:	2207      	movs	r2, #7
 8005588:	4013      	ands	r3, r2
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <Paint_DrawChar+0x19a>
            ptr++;
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	3301      	adds	r3, #1
 8005594:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8005596:	211e      	movs	r1, #30
 8005598:	187b      	adds	r3, r7, r1
 800559a:	881a      	ldrh	r2, [r3, #0]
 800559c:	187b      	adds	r3, r7, r1
 800559e:	3201      	adds	r2, #1
 80055a0:	801a      	strh	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	88db      	ldrh	r3, [r3, #6]
 80055a6:	221e      	movs	r2, #30
 80055a8:	18ba      	adds	r2, r7, r2
 80055aa:	8812      	ldrh	r2, [r2, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d200      	bcs.n	80055b2 <Paint_DrawChar+0x1b6>
 80055b0:	e767      	b.n	8005482 <Paint_DrawChar+0x86>
 80055b2:	e000      	b.n	80055b6 <Paint_DrawChar+0x1ba>
        return;
 80055b4:	46c0      	nop			; (mov r8, r8)
    }// Write all
}
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b008      	add	sp, #32
 80055ba:	bdb0      	pop	{r4, r5, r7, pc}
 80055bc:	20000240 	.word	0x20000240
 80055c0:	0000ffff 	.word	0x0000ffff

080055c4 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 80055c4:	b5b0      	push	{r4, r5, r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60ba      	str	r2, [r7, #8]
 80055cc:	607b      	str	r3, [r7, #4]
 80055ce:	240e      	movs	r4, #14
 80055d0:	193b      	adds	r3, r7, r4
 80055d2:	1c02      	adds	r2, r0, #0
 80055d4:	801a      	strh	r2, [r3, #0]
 80055d6:	200c      	movs	r0, #12
 80055d8:	183b      	adds	r3, r7, r0
 80055da:	1c0a      	adds	r2, r1, #0
 80055dc:	801a      	strh	r2, [r3, #0]
    UWORD Xpoint = Xstart;
 80055de:	2316      	movs	r3, #22
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	0021      	movs	r1, r4
 80055e4:	187a      	adds	r2, r7, r1
 80055e6:	8812      	ldrh	r2, [r2, #0]
 80055e8:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 80055ea:	2314      	movs	r3, #20
 80055ec:	18fb      	adds	r3, r7, r3
 80055ee:	183a      	adds	r2, r7, r0
 80055f0:	8812      	ldrh	r2, [r2, #0]
 80055f2:	801a      	strh	r2, [r3, #0]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80055f4:	4b31      	ldr	r3, [pc, #196]	; (80056bc <Paint_DrawString_EN+0xf8>)
 80055f6:	889b      	ldrh	r3, [r3, #4]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	187a      	adds	r2, r7, r1
 80055fc:	8812      	ldrh	r2, [r2, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d858      	bhi.n	80056b4 <Paint_DrawString_EN+0xf0>
 8005602:	4b2e      	ldr	r3, [pc, #184]	; (80056bc <Paint_DrawString_EN+0xf8>)
 8005604:	88db      	ldrh	r3, [r3, #6]
 8005606:	b29b      	uxth	r3, r3
 8005608:	183a      	adds	r2, r7, r0
 800560a:	8812      	ldrh	r2, [r2, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d851      	bhi.n	80056b4 <Paint_DrawString_EN+0xf0>
        return;
    }

    while (* pString != '\0') {
 8005610:	e04b      	b.n	80056aa <Paint_DrawString_EN+0xe6>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8005612:	2116      	movs	r1, #22
 8005614:	187b      	adds	r3, r7, r1
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	8892      	ldrh	r2, [r2, #4]
 800561c:	189b      	adds	r3, r3, r2
 800561e:	4a27      	ldr	r2, [pc, #156]	; (80056bc <Paint_DrawString_EN+0xf8>)
 8005620:	8892      	ldrh	r2, [r2, #4]
 8005622:	b292      	uxth	r2, r2
 8005624:	4293      	cmp	r3, r2
 8005626:	dd0c      	ble.n	8005642 <Paint_DrawString_EN+0x7e>
            Xpoint = Xstart;
 8005628:	187b      	adds	r3, r7, r1
 800562a:	220e      	movs	r2, #14
 800562c:	18ba      	adds	r2, r7, r2
 800562e:	8812      	ldrh	r2, [r2, #0]
 8005630:	801a      	strh	r2, [r3, #0]
            Ypoint += Font->Height;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	88d9      	ldrh	r1, [r3, #6]
 8005636:	2214      	movs	r2, #20
 8005638:	18bb      	adds	r3, r7, r2
 800563a:	18ba      	adds	r2, r7, r2
 800563c:	8812      	ldrh	r2, [r2, #0]
 800563e:	188a      	adds	r2, r1, r2
 8005640:	801a      	strh	r2, [r3, #0]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8005642:	2114      	movs	r1, #20
 8005644:	187b      	adds	r3, r7, r1
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	88d2      	ldrh	r2, [r2, #6]
 800564c:	189b      	adds	r3, r3, r2
 800564e:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <Paint_DrawString_EN+0xf8>)
 8005650:	88d2      	ldrh	r2, [r2, #6]
 8005652:	b292      	uxth	r2, r2
 8005654:	4293      	cmp	r3, r2
 8005656:	dd0a      	ble.n	800566e <Paint_DrawString_EN+0xaa>
            Xpoint = Xstart;
 8005658:	2316      	movs	r3, #22
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	220e      	movs	r2, #14
 800565e:	18ba      	adds	r2, r7, r2
 8005660:	8812      	ldrh	r2, [r2, #0]
 8005662:	801a      	strh	r2, [r3, #0]
            Ypoint = Ystart;
 8005664:	187b      	adds	r3, r7, r1
 8005666:	220c      	movs	r2, #12
 8005668:	18ba      	adds	r2, r7, r2
 800566a:	8812      	ldrh	r2, [r2, #0]
 800566c:	801a      	strh	r2, [r3, #0]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	687c      	ldr	r4, [r7, #4]
 8005674:	2314      	movs	r3, #20
 8005676:	18fb      	adds	r3, r7, r3
 8005678:	8819      	ldrh	r1, [r3, #0]
 800567a:	2516      	movs	r5, #22
 800567c:	197b      	adds	r3, r7, r5
 800567e:	8818      	ldrh	r0, [r3, #0]
 8005680:	232c      	movs	r3, #44	; 0x2c
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	2328      	movs	r3, #40	; 0x28
 800568a:	18fb      	adds	r3, r7, r3
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	0023      	movs	r3, r4
 8005692:	f7ff feb3 	bl	80053fc <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	3301      	adds	r3, #1
 800569a:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8899      	ldrh	r1, [r3, #4]
 80056a0:	197b      	adds	r3, r7, r5
 80056a2:	197a      	adds	r2, r7, r5
 80056a4:	8812      	ldrh	r2, [r2, #0]
 80056a6:	188a      	adds	r2, r1, r2
 80056a8:	801a      	strh	r2, [r3, #0]
    while (* pString != '\0') {
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1af      	bne.n	8005612 <Paint_DrawString_EN+0x4e>
 80056b2:	e000      	b.n	80056b6 <Paint_DrawString_EN+0xf2>
        return;
 80056b4:	46c0      	nop			; (mov r8, r8)
    }
}
 80056b6:	46bd      	mov	sp, r7
 80056b8:	b006      	add	sp, #24
 80056ba:	bdb0      	pop	{r4, r5, r7, pc}
 80056bc:	20000240 	.word	0x20000240

080056c0 <Paint_DrawNum>:
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 80056c0:	b5b0      	push	{r4, r5, r7, lr}
 80056c2:	4c5f      	ldr	r4, [pc, #380]	; (8005840 <Paint_DrawNum+0x180>)
 80056c4:	44a5      	add	sp, r4
 80056c6:	af02      	add	r7, sp, #8
 80056c8:	60ba      	str	r2, [r7, #8]
 80056ca:	607b      	str	r3, [r7, #4]
 80056cc:	4b5d      	ldr	r3, [pc, #372]	; (8005844 <Paint_DrawNum+0x184>)
 80056ce:	2486      	movs	r4, #134	; 0x86
 80056d0:	00a4      	lsls	r4, r4, #2
 80056d2:	191b      	adds	r3, r3, r4
 80056d4:	19db      	adds	r3, r3, r7
 80056d6:	1c02      	adds	r2, r0, #0
 80056d8:	801a      	strh	r2, [r3, #0]
 80056da:	4b5b      	ldr	r3, [pc, #364]	; (8005848 <Paint_DrawNum+0x188>)
 80056dc:	0020      	movs	r0, r4
 80056de:	181b      	adds	r3, r3, r0
 80056e0:	19db      	adds	r3, r3, r7
 80056e2:	1c0a      	adds	r2, r1, #0
 80056e4:	801a      	strh	r2, [r3, #0]
    int16_t Num_Bit = 0, Str_Bit = 0;
 80056e6:	4b59      	ldr	r3, [pc, #356]	; (800584c <Paint_DrawNum+0x18c>)
 80056e8:	18fb      	adds	r3, r7, r3
 80056ea:	2200      	movs	r2, #0
 80056ec:	801a      	strh	r2, [r3, #0]
 80056ee:	2385      	movs	r3, #133	; 0x85
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	18fb      	adds	r3, r7, r3
 80056f4:	2200      	movs	r2, #0
 80056f6:	801a      	strh	r2, [r3, #0]
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 80056f8:	4b55      	ldr	r3, [pc, #340]	; (8005850 <Paint_DrawNum+0x190>)
 80056fa:	0004      	movs	r4, r0
 80056fc:	191b      	adds	r3, r3, r4
 80056fe:	19db      	adds	r3, r3, r7
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	3304      	adds	r3, #4
 8005706:	22fb      	movs	r2, #251	; 0xfb
 8005708:	2100      	movs	r1, #0
 800570a:	0018      	movs	r0, r3
 800570c:	f000 fc78 	bl	8006000 <memset>
 8005710:	4b50      	ldr	r3, [pc, #320]	; (8005854 <Paint_DrawNum+0x194>)
 8005712:	191b      	adds	r3, r3, r4
 8005714:	19db      	adds	r3, r3, r7
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	3304      	adds	r3, #4
 800571c:	22fb      	movs	r2, #251	; 0xfb
 800571e:	2100      	movs	r1, #0
 8005720:	0018      	movs	r0, r3
 8005722:	f000 fc6d 	bl	8006000 <memset>
    uint8_t *pStr = Str_Array;
 8005726:	2388      	movs	r3, #136	; 0x88
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	2284      	movs	r2, #132	; 0x84
 800572e:	0092      	lsls	r2, r2, #2
 8005730:	18ba      	adds	r2, r7, r2
 8005732:	6013      	str	r3, [r2, #0]

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8005734:	4b48      	ldr	r3, [pc, #288]	; (8005858 <Paint_DrawNum+0x198>)
 8005736:	889b      	ldrh	r3, [r3, #4]
 8005738:	b29b      	uxth	r3, r3
 800573a:	4a42      	ldr	r2, [pc, #264]	; (8005844 <Paint_DrawNum+0x184>)
 800573c:	1912      	adds	r2, r2, r4
 800573e:	19d2      	adds	r2, r2, r7
 8005740:	8812      	ldrh	r2, [r2, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d900      	bls.n	8005748 <Paint_DrawNum+0x88>
 8005746:	e075      	b.n	8005834 <Paint_DrawNum+0x174>
 8005748:	4b43      	ldr	r3, [pc, #268]	; (8005858 <Paint_DrawNum+0x198>)
 800574a:	88db      	ldrh	r3, [r3, #6]
 800574c:	b29b      	uxth	r3, r3
 800574e:	4a3e      	ldr	r2, [pc, #248]	; (8005848 <Paint_DrawNum+0x188>)
 8005750:	1912      	adds	r2, r2, r4
 8005752:	19d2      	adds	r2, r2, r7
 8005754:	8812      	ldrh	r2, [r2, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d86c      	bhi.n	8005834 <Paint_DrawNum+0x174>
        return;
    }

    //Converts a number to a string
     do{
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	210a      	movs	r1, #10
 800575e:	0018      	movs	r0, r3
 8005760:	f7fa fe3e 	bl	80003e0 <__aeabi_idivmod>
 8005764:	000b      	movs	r3, r1
 8005766:	b2da      	uxtb	r2, r3
 8005768:	4838      	ldr	r0, [pc, #224]	; (800584c <Paint_DrawNum+0x18c>)
 800576a:	183b      	adds	r3, r7, r0
 800576c:	2100      	movs	r1, #0
 800576e:	5e5b      	ldrsh	r3, [r3, r1]
 8005770:	3230      	adds	r2, #48	; 0x30
 8005772:	b2d1      	uxtb	r1, r2
 8005774:	4a37      	ldr	r2, [pc, #220]	; (8005854 <Paint_DrawNum+0x194>)
 8005776:	2486      	movs	r4, #134	; 0x86
 8005778:	00a4      	lsls	r4, r4, #2
 800577a:	1912      	adds	r2, r2, r4
 800577c:	19d2      	adds	r2, r2, r7
 800577e:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 8005780:	183b      	adds	r3, r7, r0
 8005782:	2200      	movs	r2, #0
 8005784:	5e9b      	ldrsh	r3, [r3, r2]
 8005786:	b29b      	uxth	r3, r3
 8005788:	3301      	adds	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	183b      	adds	r3, r7, r0
 800578e:	801a      	strh	r2, [r3, #0]
        Nummber /= 10;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	210a      	movs	r1, #10
 8005794:	0018      	movs	r0, r3
 8005796:	f7fa fd3d 	bl	8000214 <__divsi3>
 800579a:	0003      	movs	r3, r0
 800579c:	60bb      	str	r3, [r7, #8]
    }while (Nummber);
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1da      	bne.n	800575a <Paint_DrawNum+0x9a>

    //The string is inverted
    while (Num_Bit > 0) {
 80057a4:	e023      	b.n	80057ee <Paint_DrawNum+0x12e>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 80057a6:	4829      	ldr	r0, [pc, #164]	; (800584c <Paint_DrawNum+0x18c>)
 80057a8:	183b      	adds	r3, r7, r0
 80057aa:	2200      	movs	r2, #0
 80057ac:	5e9b      	ldrsh	r3, [r3, r2]
 80057ae:	1e5a      	subs	r2, r3, #1
 80057b0:	2485      	movs	r4, #133	; 0x85
 80057b2:	00a4      	lsls	r4, r4, #2
 80057b4:	193b      	adds	r3, r7, r4
 80057b6:	2100      	movs	r1, #0
 80057b8:	5e5b      	ldrsh	r3, [r3, r1]
 80057ba:	4926      	ldr	r1, [pc, #152]	; (8005854 <Paint_DrawNum+0x194>)
 80057bc:	2586      	movs	r5, #134	; 0x86
 80057be:	00ad      	lsls	r5, r5, #2
 80057c0:	1949      	adds	r1, r1, r5
 80057c2:	19c9      	adds	r1, r1, r7
 80057c4:	5c89      	ldrb	r1, [r1, r2]
 80057c6:	4a22      	ldr	r2, [pc, #136]	; (8005850 <Paint_DrawNum+0x190>)
 80057c8:	1952      	adds	r2, r2, r5
 80057ca:	19d2      	adds	r2, r2, r7
 80057cc:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 80057ce:	193b      	adds	r3, r7, r4
 80057d0:	2200      	movs	r2, #0
 80057d2:	5e9b      	ldrsh	r3, [r3, r2]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3301      	adds	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	193b      	adds	r3, r7, r4
 80057dc:	801a      	strh	r2, [r3, #0]
        Num_Bit --;
 80057de:	183b      	adds	r3, r7, r0
 80057e0:	2200      	movs	r2, #0
 80057e2:	5e9b      	ldrsh	r3, [r3, r2]
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	183b      	adds	r3, r7, r0
 80057ec:	801a      	strh	r2, [r3, #0]
    while (Num_Bit > 0) {
 80057ee:	4b17      	ldr	r3, [pc, #92]	; (800584c <Paint_DrawNum+0x18c>)
 80057f0:	18fb      	adds	r3, r7, r3
 80057f2:	2200      	movs	r2, #0
 80057f4:	5e9b      	ldrsh	r3, [r3, r2]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dcd5      	bgt.n	80057a6 <Paint_DrawNum+0xe6>
    }
    
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 80057fa:	687c      	ldr	r4, [r7, #4]
 80057fc:	2384      	movs	r3, #132	; 0x84
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4b10      	ldr	r3, [pc, #64]	; (8005848 <Paint_DrawNum+0x188>)
 8005806:	2086      	movs	r0, #134	; 0x86
 8005808:	0080      	lsls	r0, r0, #2
 800580a:	181b      	adds	r3, r3, r0
 800580c:	19db      	adds	r3, r3, r7
 800580e:	8819      	ldrh	r1, [r3, #0]
 8005810:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <Paint_DrawNum+0x184>)
 8005812:	181b      	adds	r3, r3, r0
 8005814:	19db      	adds	r3, r3, r7
 8005816:	8818      	ldrh	r0, [r3, #0]
 8005818:	238b      	movs	r3, #139	; 0x8b
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	9301      	str	r3, [sp, #4]
 8005822:	238a      	movs	r3, #138	; 0x8a
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	0023      	movs	r3, r4
 800582e:	f7ff fec9 	bl	80055c4 <Paint_DrawString_EN>
 8005832:	e000      	b.n	8005836 <Paint_DrawNum+0x176>
        return;
 8005834:	46c0      	nop			; (mov r8, r8)
}
 8005836:	46bd      	mov	sp, r7
 8005838:	2386      	movs	r3, #134	; 0x86
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	449d      	add	sp, r3
 800583e:	bdb0      	pop	{r4, r5, r7, pc}
 8005840:	fffffde0 	.word	0xfffffde0
 8005844:	fffffdf6 	.word	0xfffffdf6
 8005848:	fffffdf4 	.word	0xfffffdf4
 800584c:	00000216 	.word	0x00000216
 8005850:	fffffef8 	.word	0xfffffef8
 8005854:	fffffdf8 	.word	0xfffffdf8
 8005858:	20000240 	.word	0x20000240

0800585c <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
	LCD_1IN28_CS_0;
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	480f      	ldr	r0, [pc, #60]	; (80058a4 <LCD_1IN28_Reset+0x48>)
 8005866:	2200      	movs	r2, #0
 8005868:	0019      	movs	r1, r3
 800586a:	f7fc fc0f 	bl	800208c <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800586e:	2064      	movs	r0, #100	; 0x64
 8005870:	f7fb fba6 	bl	8000fc0 <HAL_Delay>
    LCD_1IN28_RST_0;
 8005874:	23a0      	movs	r3, #160	; 0xa0
 8005876:	05db      	lsls	r3, r3, #23
 8005878:	2200      	movs	r2, #0
 800587a:	2108      	movs	r1, #8
 800587c:	0018      	movs	r0, r3
 800587e:	f7fc fc05 	bl	800208c <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8005882:	2064      	movs	r0, #100	; 0x64
 8005884:	f7fb fb9c 	bl	8000fc0 <HAL_Delay>
    LCD_1IN28_RST_1;
 8005888:	23a0      	movs	r3, #160	; 0xa0
 800588a:	05db      	lsls	r3, r3, #23
 800588c:	2201      	movs	r2, #1
 800588e:	2108      	movs	r1, #8
 8005890:	0018      	movs	r0, r3
 8005892:	f7fc fbfb 	bl	800208c <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8005896:	2064      	movs	r0, #100	; 0x64
 8005898:	f7fb fb92 	bl	8000fc0 <HAL_Delay>
}
 800589c:	46c0      	nop			; (mov r8, r8)
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	50000400 	.word	0x50000400

080058a8 <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	0002      	movs	r2, r0
 80058b0:	1dfb      	adds	r3, r7, #7
 80058b2:	701a      	strb	r2, [r3, #0]
    LCD_1IN28_CS_0;
 80058b4:	2380      	movs	r3, #128	; 0x80
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	480d      	ldr	r0, [pc, #52]	; (80058f0 <LCD_1IN28_SendCommand+0x48>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	0019      	movs	r1, r3
 80058be:	f7fc fbe5 	bl	800208c <HAL_GPIO_WritePin>
    LCD_1IN28_DC_0;
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	480b      	ldr	r0, [pc, #44]	; (80058f4 <LCD_1IN28_SendCommand+0x4c>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	0019      	movs	r1, r3
 80058cc:	f7fc fbde 	bl	800208c <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 80058d0:	1dfb      	adds	r3, r7, #7
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	0018      	movs	r0, r3
 80058d6:	f7ff f92d 	bl	8004b34 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 80058da:	2380      	movs	r3, #128	; 0x80
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4804      	ldr	r0, [pc, #16]	; (80058f0 <LCD_1IN28_SendCommand+0x48>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	0019      	movs	r1, r3
 80058e4:	f7fc fbd2 	bl	800208c <HAL_GPIO_WritePin>
}
 80058e8:	46c0      	nop			; (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b002      	add	sp, #8
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	50000400 	.word	0x50000400
 80058f4:	50000800 	.word	0x50000800

080058f8 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	0002      	movs	r2, r0
 8005900:	1dfb      	adds	r3, r7, #7
 8005902:	701a      	strb	r2, [r3, #0]
    LCD_1IN28_CS_0;
 8005904:	2380      	movs	r3, #128	; 0x80
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	480d      	ldr	r0, [pc, #52]	; (8005940 <LCD_1IN28_SendData_8Bit+0x48>)
 800590a:	2200      	movs	r2, #0
 800590c:	0019      	movs	r1, r3
 800590e:	f7fc fbbd 	bl	800208c <HAL_GPIO_WritePin>
    LCD_1IN28_DC_1;
 8005912:	2380      	movs	r3, #128	; 0x80
 8005914:	021b      	lsls	r3, r3, #8
 8005916:	480b      	ldr	r0, [pc, #44]	; (8005944 <LCD_1IN28_SendData_8Bit+0x4c>)
 8005918:	2201      	movs	r2, #1
 800591a:	0019      	movs	r1, r3
 800591c:	f7fc fbb6 	bl	800208c <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 8005920:	1dfb      	adds	r3, r7, #7
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	0018      	movs	r0, r3
 8005926:	f7ff f905 	bl	8004b34 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 800592a:	2380      	movs	r3, #128	; 0x80
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4804      	ldr	r0, [pc, #16]	; (8005940 <LCD_1IN28_SendData_8Bit+0x48>)
 8005930:	2201      	movs	r2, #1
 8005932:	0019      	movs	r1, r3
 8005934:	f7fc fbaa 	bl	800208c <HAL_GPIO_WritePin>
}
 8005938:	46c0      	nop			; (mov r8, r8)
 800593a:	46bd      	mov	sp, r7
 800593c:	b002      	add	sp, #8
 800593e:	bd80      	pop	{r7, pc}
 8005940:	50000400 	.word	0x50000400
 8005944:	50000800 	.word	0x50000800

08005948 <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	0002      	movs	r2, r0
 8005950:	1dbb      	adds	r3, r7, #6
 8005952:	801a      	strh	r2, [r3, #0]
    LCD_1IN28_CS_0;
 8005954:	2380      	movs	r3, #128	; 0x80
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4812      	ldr	r0, [pc, #72]	; (80059a4 <LCD_1IN28_SendData_16Bit+0x5c>)
 800595a:	2200      	movs	r2, #0
 800595c:	0019      	movs	r1, r3
 800595e:	f7fc fb95 	bl	800208c <HAL_GPIO_WritePin>
    LCD_1IN28_DC_1;
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	4810      	ldr	r0, [pc, #64]	; (80059a8 <LCD_1IN28_SendData_16Bit+0x60>)
 8005968:	2201      	movs	r2, #1
 800596a:	0019      	movs	r1, r3
 800596c:	f7fc fb8e 	bl	800208c <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data >> 8);
 8005970:	1dbb      	adds	r3, r7, #6
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	b29b      	uxth	r3, r3
 8005978:	b2db      	uxtb	r3, r3
 800597a:	0018      	movs	r0, r3
 800597c:	f7ff f8da 	bl	8004b34 <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data);
 8005980:	1dbb      	adds	r3, r7, #6
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	0018      	movs	r0, r3
 8005988:	f7ff f8d4 	bl	8004b34 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4804      	ldr	r0, [pc, #16]	; (80059a4 <LCD_1IN28_SendData_16Bit+0x5c>)
 8005992:	2201      	movs	r2, #1
 8005994:	0019      	movs	r1, r3
 8005996:	f7fc fb79 	bl	800208c <HAL_GPIO_WritePin>
}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	46bd      	mov	sp, r7
 800599e:	b002      	add	sp, #8
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	50000400 	.word	0x50000400
 80059a8:	50000800 	.word	0x50000800

080059ac <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  LCD_1IN28_SendCommand(0xEF);
 80059b0:	20ef      	movs	r0, #239	; 0xef
 80059b2:	f7ff ff79 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 80059b6:	20eb      	movs	r0, #235	; 0xeb
 80059b8:	f7ff ff76 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 80059bc:	2014      	movs	r0, #20
 80059be:	f7ff ff9b 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0xFE);			 
 80059c2:	20fe      	movs	r0, #254	; 0xfe
 80059c4:	f7ff ff70 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 80059c8:	20ef      	movs	r0, #239	; 0xef
 80059ca:	f7ff ff6d 	bl	80058a8 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 80059ce:	20eb      	movs	r0, #235	; 0xeb
 80059d0:	f7ff ff6a 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 80059d4:	2014      	movs	r0, #20
 80059d6:	f7ff ff8f 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 80059da:	2084      	movs	r0, #132	; 0x84
 80059dc:	f7ff ff64 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 80059e0:	2040      	movs	r0, #64	; 0x40
 80059e2:	f7ff ff89 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 80059e6:	2085      	movs	r0, #133	; 0x85
 80059e8:	f7ff ff5e 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80059ec:	20ff      	movs	r0, #255	; 0xff
 80059ee:	f7ff ff83 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 80059f2:	2086      	movs	r0, #134	; 0x86
 80059f4:	f7ff ff58 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80059f8:	20ff      	movs	r0, #255	; 0xff
 80059fa:	f7ff ff7d 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 80059fe:	2087      	movs	r0, #135	; 0x87
 8005a00:	f7ff ff52 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8005a04:	20ff      	movs	r0, #255	; 0xff
 8005a06:	f7ff ff77 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 8005a0a:	2088      	movs	r0, #136	; 0x88
 8005a0c:	f7ff ff4c 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 8005a10:	200a      	movs	r0, #10
 8005a12:	f7ff ff71 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 8005a16:	2089      	movs	r0, #137	; 0x89
 8005a18:	f7ff ff46 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 8005a1c:	2021      	movs	r0, #33	; 0x21
 8005a1e:	f7ff ff6b 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 8005a22:	208a      	movs	r0, #138	; 0x8a
 8005a24:	f7ff ff40 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 8005a28:	2000      	movs	r0, #0
 8005a2a:	f7ff ff65 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 8005a2e:	208b      	movs	r0, #139	; 0x8b
 8005a30:	f7ff ff3a 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 8005a34:	2080      	movs	r0, #128	; 0x80
 8005a36:	f7ff ff5f 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 8005a3a:	208c      	movs	r0, #140	; 0x8c
 8005a3c:	f7ff ff34 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8005a40:	2001      	movs	r0, #1
 8005a42:	f7ff ff59 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 8005a46:	208d      	movs	r0, #141	; 0x8d
 8005a48:	f7ff ff2e 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8005a4c:	2001      	movs	r0, #1
 8005a4e:	f7ff ff53 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 8005a52:	208e      	movs	r0, #142	; 0x8e
 8005a54:	f7ff ff28 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8005a58:	20ff      	movs	r0, #255	; 0xff
 8005a5a:	f7ff ff4d 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 8005a5e:	208f      	movs	r0, #143	; 0x8f
 8005a60:	f7ff ff22 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8005a64:	20ff      	movs	r0, #255	; 0xff
 8005a66:	f7ff ff47 	bl	80058f8 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 8005a6a:	20b6      	movs	r0, #182	; 0xb6
 8005a6c:	f7ff ff1c 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8005a70:	2000      	movs	r0, #0
 8005a72:	f7ff ff41 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 8005a76:	2020      	movs	r0, #32
 8005a78:	f7ff ff3e 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 8005a7c:	2036      	movs	r0, #54	; 0x36
 8005a7e:	f7ff ff13 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 8005a82:	2008      	movs	r0, #8
 8005a84:	f7ff ff38 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 8005a88:	203a      	movs	r0, #58	; 0x3a
 8005a8a:	f7ff ff0d 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 8005a8e:	2005      	movs	r0, #5
 8005a90:	f7ff ff32 	bl	80058f8 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 8005a94:	2090      	movs	r0, #144	; 0x90
 8005a96:	f7ff ff07 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 8005a9a:	2008      	movs	r0, #8
 8005a9c:	f7ff ff2c 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8005aa0:	2008      	movs	r0, #8
 8005aa2:	f7ff ff29 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8005aa6:	2008      	movs	r0, #8
 8005aa8:	f7ff ff26 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 8005aac:	2008      	movs	r0, #8
 8005aae:	f7ff ff23 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 8005ab2:	20bd      	movs	r0, #189	; 0xbd
 8005ab4:	f7ff fef8 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 8005ab8:	2006      	movs	r0, #6
 8005aba:	f7ff ff1d 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 8005abe:	20bc      	movs	r0, #188	; 0xbc
 8005ac0:	f7ff fef2 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f7ff ff17 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 8005aca:	20ff      	movs	r0, #255	; 0xff
 8005acc:	f7ff feec 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8005ad0:	2060      	movs	r0, #96	; 0x60
 8005ad2:	f7ff ff11 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	f7ff ff0e 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8005adc:	2004      	movs	r0, #4
 8005ade:	f7ff ff0b 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 8005ae2:	20c3      	movs	r0, #195	; 0xc3
 8005ae4:	f7ff fee0 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8005ae8:	2013      	movs	r0, #19
 8005aea:	f7ff ff05 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 8005aee:	20c4      	movs	r0, #196	; 0xc4
 8005af0:	f7ff feda 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8005af4:	2013      	movs	r0, #19
 8005af6:	f7ff feff 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 8005afa:	20c9      	movs	r0, #201	; 0xc9
 8005afc:	f7ff fed4 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8005b00:	2022      	movs	r0, #34	; 0x22
 8005b02:	f7ff fef9 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 8005b06:	20be      	movs	r0, #190	; 0xbe
 8005b08:	f7ff fece 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 8005b0c:	2011      	movs	r0, #17
 8005b0e:	f7ff fef3 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 8005b12:	20e1      	movs	r0, #225	; 0xe1
 8005b14:	f7ff fec8 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8005b18:	2010      	movs	r0, #16
 8005b1a:	f7ff feed 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8005b1e:	200e      	movs	r0, #14
 8005b20:	f7ff feea 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8005b24:	20df      	movs	r0, #223	; 0xdf
 8005b26:	f7ff febf 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 8005b2a:	2021      	movs	r0, #33	; 0x21
 8005b2c:	f7ff fee4 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8005b30:	200c      	movs	r0, #12
 8005b32:	f7ff fee1 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 8005b36:	2002      	movs	r0, #2
 8005b38:	f7ff fede 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 8005b3c:	20f0      	movs	r0, #240	; 0xf0
 8005b3e:	f7ff feb3 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8005b42:	2045      	movs	r0, #69	; 0x45
 8005b44:	f7ff fed8 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8005b48:	2009      	movs	r0, #9
 8005b4a:	f7ff fed5 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8005b4e:	2008      	movs	r0, #8
 8005b50:	f7ff fed2 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8005b54:	2008      	movs	r0, #8
 8005b56:	f7ff fecf 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 8005b5a:	2026      	movs	r0, #38	; 0x26
 8005b5c:	f7ff fecc 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8005b60:	202a      	movs	r0, #42	; 0x2a
 8005b62:	f7ff fec9 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 8005b66:	20f1      	movs	r0, #241	; 0xf1
 8005b68:	f7ff fe9e 	bl	80058a8 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8005b6c:	2043      	movs	r0, #67	; 0x43
 8005b6e:	f7ff fec3 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8005b72:	2070      	movs	r0, #112	; 0x70
 8005b74:	f7ff fec0 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8005b78:	2072      	movs	r0, #114	; 0x72
 8005b7a:	f7ff febd 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8005b7e:	2036      	movs	r0, #54	; 0x36
 8005b80:	f7ff feba 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 8005b84:	2037      	movs	r0, #55	; 0x37
 8005b86:	f7ff feb7 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8005b8a:	206f      	movs	r0, #111	; 0x6f
 8005b8c:	f7ff feb4 	bl	80058f8 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8005b90:	20f2      	movs	r0, #242	; 0xf2
 8005b92:	f7ff fe89 	bl	80058a8 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 8005b96:	2045      	movs	r0, #69	; 0x45
 8005b98:	f7ff feae 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8005b9c:	2009      	movs	r0, #9
 8005b9e:	f7ff feab 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8005ba2:	2008      	movs	r0, #8
 8005ba4:	f7ff fea8 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8005ba8:	2008      	movs	r0, #8
 8005baa:	f7ff fea5 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8005bae:	2026      	movs	r0, #38	; 0x26
 8005bb0:	f7ff fea2 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8005bb4:	202a      	movs	r0, #42	; 0x2a
 8005bb6:	f7ff fe9f 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 8005bba:	20f3      	movs	r0, #243	; 0xf3
 8005bbc:	f7ff fe74 	bl	80058a8 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8005bc0:	2043      	movs	r0, #67	; 0x43
 8005bc2:	f7ff fe99 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8005bc6:	2070      	movs	r0, #112	; 0x70
 8005bc8:	f7ff fe96 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8005bcc:	2072      	movs	r0, #114	; 0x72
 8005bce:	f7ff fe93 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8005bd2:	2036      	movs	r0, #54	; 0x36
 8005bd4:	f7ff fe90 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 8005bd8:	2037      	movs	r0, #55	; 0x37
 8005bda:	f7ff fe8d 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8005bde:	206f      	movs	r0, #111	; 0x6f
 8005be0:	f7ff fe8a 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8005be4:	20ed      	movs	r0, #237	; 0xed
 8005be6:	f7ff fe5f 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 8005bea:	201b      	movs	r0, #27
 8005bec:	f7ff fe84 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8005bf0:	200b      	movs	r0, #11
 8005bf2:	f7ff fe81 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 8005bf6:	20ae      	movs	r0, #174	; 0xae
 8005bf8:	f7ff fe56 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8005bfc:	2077      	movs	r0, #119	; 0x77
 8005bfe:	f7ff fe7b 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8005c02:	20cd      	movs	r0, #205	; 0xcd
 8005c04:	f7ff fe50 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 8005c08:	2063      	movs	r0, #99	; 0x63
 8005c0a:	f7ff fe75 	bl	80058f8 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 8005c0e:	2070      	movs	r0, #112	; 0x70
 8005c10:	f7ff fe4a 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8005c14:	2007      	movs	r0, #7
 8005c16:	f7ff fe6f 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8005c1a:	2007      	movs	r0, #7
 8005c1c:	f7ff fe6c 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8005c20:	2004      	movs	r0, #4
 8005c22:	f7ff fe69 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 8005c26:	200e      	movs	r0, #14
 8005c28:	f7ff fe66 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 8005c2c:	200f      	movs	r0, #15
 8005c2e:	f7ff fe63 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8005c32:	2009      	movs	r0, #9
 8005c34:	f7ff fe60 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8005c38:	2007      	movs	r0, #7
 8005c3a:	f7ff fe5d 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8005c3e:	2008      	movs	r0, #8
 8005c40:	f7ff fe5a 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8005c44:	2003      	movs	r0, #3
 8005c46:	f7ff fe57 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 8005c4a:	20e8      	movs	r0, #232	; 0xe8
 8005c4c:	f7ff fe2c 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8005c50:	2034      	movs	r0, #52	; 0x34
 8005c52:	f7ff fe51 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 8005c56:	2062      	movs	r0, #98	; 0x62
 8005c58:	f7ff fe26 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8005c5c:	2018      	movs	r0, #24
 8005c5e:	f7ff fe4b 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 8005c62:	200d      	movs	r0, #13
 8005c64:	f7ff fe48 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8005c68:	2071      	movs	r0, #113	; 0x71
 8005c6a:	f7ff fe45 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8005c6e:	20ed      	movs	r0, #237	; 0xed
 8005c70:	f7ff fe42 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8005c74:	2070      	movs	r0, #112	; 0x70
 8005c76:	f7ff fe3f 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8005c7a:	2070      	movs	r0, #112	; 0x70
 8005c7c:	f7ff fe3c 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8005c80:	2018      	movs	r0, #24
 8005c82:	f7ff fe39 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 8005c86:	200f      	movs	r0, #15
 8005c88:	f7ff fe36 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8005c8c:	2071      	movs	r0, #113	; 0x71
 8005c8e:	f7ff fe33 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8005c92:	20ef      	movs	r0, #239	; 0xef
 8005c94:	f7ff fe30 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8005c98:	2070      	movs	r0, #112	; 0x70
 8005c9a:	f7ff fe2d 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8005c9e:	2070      	movs	r0, #112	; 0x70
 8005ca0:	f7ff fe2a 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 8005ca4:	2063      	movs	r0, #99	; 0x63
 8005ca6:	f7ff fdff 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8005caa:	2018      	movs	r0, #24
 8005cac:	f7ff fe24 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8005cb0:	2011      	movs	r0, #17
 8005cb2:	f7ff fe21 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8005cb6:	2071      	movs	r0, #113	; 0x71
 8005cb8:	f7ff fe1e 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8005cbc:	20f1      	movs	r0, #241	; 0xf1
 8005cbe:	f7ff fe1b 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8005cc2:	2070      	movs	r0, #112	; 0x70
 8005cc4:	f7ff fe18 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8005cc8:	2070      	movs	r0, #112	; 0x70
 8005cca:	f7ff fe15 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8005cce:	2018      	movs	r0, #24
 8005cd0:	f7ff fe12 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8005cd4:	2013      	movs	r0, #19
 8005cd6:	f7ff fe0f 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8005cda:	2071      	movs	r0, #113	; 0x71
 8005cdc:	f7ff fe0c 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8005ce0:	20f3      	movs	r0, #243	; 0xf3
 8005ce2:	f7ff fe09 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8005ce6:	2070      	movs	r0, #112	; 0x70
 8005ce8:	f7ff fe06 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8005cec:	2070      	movs	r0, #112	; 0x70
 8005cee:	f7ff fe03 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8005cf2:	2064      	movs	r0, #100	; 0x64
 8005cf4:	f7ff fdd8 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 8005cf8:	2028      	movs	r0, #40	; 0x28
 8005cfa:	f7ff fdfd 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8005cfe:	2029      	movs	r0, #41	; 0x29
 8005d00:	f7ff fdfa 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8005d04:	20f1      	movs	r0, #241	; 0xf1
 8005d06:	f7ff fdf7 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	f7ff fdf4 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8005d10:	20f1      	movs	r0, #241	; 0xf1
 8005d12:	f7ff fdf1 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d16:	2000      	movs	r0, #0
 8005d18:	f7ff fdee 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8005d1c:	2007      	movs	r0, #7
 8005d1e:	f7ff fdeb 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8005d22:	2066      	movs	r0, #102	; 0x66
 8005d24:	f7ff fdc0 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 8005d28:	203c      	movs	r0, #60	; 0x3c
 8005d2a:	f7ff fde5 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d2e:	2000      	movs	r0, #0
 8005d30:	f7ff fde2 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8005d34:	20cd      	movs	r0, #205	; 0xcd
 8005d36:	f7ff fddf 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 8005d3a:	2067      	movs	r0, #103	; 0x67
 8005d3c:	f7ff fddc 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8005d40:	2045      	movs	r0, #69	; 0x45
 8005d42:	f7ff fdd9 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8005d46:	2045      	movs	r0, #69	; 0x45
 8005d48:	f7ff fdd6 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8005d4c:	2010      	movs	r0, #16
 8005d4e:	f7ff fdd3 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d52:	2000      	movs	r0, #0
 8005d54:	f7ff fdd0 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d58:	2000      	movs	r0, #0
 8005d5a:	f7ff fdcd 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d5e:	2000      	movs	r0, #0
 8005d60:	f7ff fdca 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 8005d64:	2067      	movs	r0, #103	; 0x67
 8005d66:	f7ff fd9f 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	f7ff fdc4 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8005d70:	203c      	movs	r0, #60	; 0x3c
 8005d72:	f7ff fdc1 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d76:	2000      	movs	r0, #0
 8005d78:	f7ff fdbe 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	f7ff fdbb 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d82:	2000      	movs	r0, #0
 8005d84:	f7ff fdb8 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8005d88:	2001      	movs	r0, #1
 8005d8a:	f7ff fdb5 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8005d8e:	2054      	movs	r0, #84	; 0x54
 8005d90:	f7ff fdb2 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8005d94:	2010      	movs	r0, #16
 8005d96:	f7ff fdaf 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 8005d9a:	2032      	movs	r0, #50	; 0x32
 8005d9c:	f7ff fdac 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8005da0:	2098      	movs	r0, #152	; 0x98
 8005da2:	f7ff fda9 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 8005da6:	2074      	movs	r0, #116	; 0x74
 8005da8:	f7ff fd7e 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 8005dac:	2010      	movs	r0, #16
 8005dae:	f7ff fda3 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 8005db2:	2085      	movs	r0, #133	; 0x85
 8005db4:	f7ff fda0 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 8005db8:	2080      	movs	r0, #128	; 0x80
 8005dba:	f7ff fd9d 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	f7ff fd9a 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	f7ff fd97 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 8005dca:	204e      	movs	r0, #78	; 0x4e
 8005dcc:	f7ff fd94 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f7ff fd91 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0x98);			
 8005dd6:	2098      	movs	r0, #152	; 0x98
 8005dd8:	f7ff fd66 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8005ddc:	203e      	movs	r0, #62	; 0x3e
 8005dde:	f7ff fd8b 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8005de2:	2007      	movs	r0, #7
 8005de4:	f7ff fd88 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 8005de8:	2035      	movs	r0, #53	; 0x35
 8005dea:	f7ff fd5d 	bl	80058a8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8005dee:	2021      	movs	r0, #33	; 0x21
 8005df0:	f7ff fd5a 	bl	80058a8 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8005df4:	2011      	movs	r0, #17
 8005df6:	f7ff fd57 	bl	80058a8 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 8005dfa:	2078      	movs	r0, #120	; 0x78
 8005dfc:	f7fb f8e0 	bl	8000fc0 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8005e00:	2029      	movs	r0, #41	; 0x29
 8005e02:	f7ff fd51 	bl	80058a8 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 8005e06:	2014      	movs	r0, #20
 8005e08:	f7fb f8da 	bl	8000fc0 <HAL_Delay>
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	0002      	movs	r2, r0
 8005e1c:	1dfb      	adds	r3, r7, #7
 8005e1e:	701a      	strb	r2, [r3, #0]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 8005e20:	4b16      	ldr	r3, [pc, #88]	; (8005e7c <LCD_1IN28_SetAttributes+0x68>)
 8005e22:	1dfa      	adds	r2, r7, #7
 8005e24:	7812      	ldrb	r2, [r2, #0]
 8005e26:	711a      	strb	r2, [r3, #4]
    UBYTE MemoryAccessReg = 0x08;
 8005e28:	210f      	movs	r1, #15
 8005e2a:	187b      	adds	r3, r7, r1
 8005e2c:	2208      	movs	r2, #8
 8005e2e:	701a      	strb	r2, [r3, #0]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 8005e30:	1dfb      	adds	r3, r7, #7
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <LCD_1IN28_SetAttributes+0x38>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 8005e38:	4b10      	ldr	r3, [pc, #64]	; (8005e7c <LCD_1IN28_SetAttributes+0x68>)
 8005e3a:	22f0      	movs	r2, #240	; 0xf0
 8005e3c:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 8005e3e:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <LCD_1IN28_SetAttributes+0x68>)
 8005e40:	22f0      	movs	r2, #240	; 0xf0
 8005e42:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 8005e44:	187b      	adds	r3, r7, r1
 8005e46:	22c8      	movs	r2, #200	; 0xc8
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	e009      	b.n	8005e60 <LCD_1IN28_SetAttributes+0x4c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <LCD_1IN28_SetAttributes+0x68>)
 8005e4e:	22f0      	movs	r2, #240	; 0xf0
 8005e50:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 8005e52:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <LCD_1IN28_SetAttributes+0x68>)
 8005e54:	22f0      	movs	r2, #240	; 0xf0
 8005e56:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 8005e58:	230f      	movs	r3, #15
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	2268      	movs	r2, #104	; 0x68
 8005e5e:	701a      	strb	r2, [r3, #0]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 8005e60:	2036      	movs	r0, #54	; 0x36
 8005e62:	f7ff fd21 	bl	80058a8 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 8005e66:	230f      	movs	r3, #15
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f7ff fd43 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b004      	add	sp, #16
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	20000260 	.word	0x20000260

08005e80 <LCD_1IN28_Init>:
function :	Initialize the lcd
parameter:
********************************************************************************/

void LCD_1IN28_Init(UBYTE Scan_dir)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	0002      	movs	r2, r0
 8005e88:	1dfb      	adds	r3, r7, #7
 8005e8a:	701a      	strb	r2, [r3, #0]

    //Hardware reset
    LCD_1IN28_Reset();
 8005e8c:	f7ff fce6 	bl	800585c <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    //Not sure if this is needed
    LCD_1IN28_SetAttributes(Scan_dir);
 8005e90:	1dfb      	adds	r3, r7, #7
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	0018      	movs	r0, r3
 8005e96:	f7ff ffbd 	bl	8005e14 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 8005e9a:	f7ff fd87 	bl	80059ac <LCD_1IN28_InitReg>

}
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b002      	add	sp, #8
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8005ea6:	b5b0      	push	{r4, r5, r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	0005      	movs	r5, r0
 8005eae:	000c      	movs	r4, r1
 8005eb0:	0010      	movs	r0, r2
 8005eb2:	0019      	movs	r1, r3
 8005eb4:	1dbb      	adds	r3, r7, #6
 8005eb6:	1c2a      	adds	r2, r5, #0
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	1c22      	adds	r2, r4, #0
 8005ebe:	801a      	strh	r2, [r3, #0]
 8005ec0:	1cbb      	adds	r3, r7, #2
 8005ec2:	1c02      	adds	r2, r0, #0
 8005ec4:	801a      	strh	r2, [r3, #0]
 8005ec6:	003b      	movs	r3, r7
 8005ec8:	1c0a      	adds	r2, r1, #0
 8005eca:	801a      	strh	r2, [r3, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8005ecc:	202a      	movs	r0, #42	; 0x2a
 8005ece:	f7ff fceb 	bl	80058a8 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	f7ff fd10 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 8005ed8:	1dbb      	adds	r3, r7, #6
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f7ff fd0a 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	f7ff fd07 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 8005eea:	1cbb      	adds	r3, r7, #2
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f7ff fd01 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 8005ef6:	202b      	movs	r0, #43	; 0x2b
 8005ef8:	f7ff fcd6 	bl	80058a8 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8005efc:	2000      	movs	r0, #0
 8005efe:	f7ff fcfb 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 8005f02:	1d3b      	adds	r3, r7, #4
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f7ff fcf5 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8005f0e:	2000      	movs	r0, #0
 8005f10:	f7ff fcf2 	bl	80058f8 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 8005f14:	003b      	movs	r3, r7
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f7ff fcec 	bl	80058f8 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 8005f20:	202c      	movs	r0, #44	; 0x2c
 8005f22:	f7ff fcc1 	bl	80058a8 <LCD_1IN28_SendCommand>
}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	b002      	add	sp, #8
 8005f2c:	bdb0      	pop	{r4, r5, r7, pc}

08005f2e <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	0002      	movs	r2, r0
 8005f36:	1dbb      	adds	r3, r7, #6
 8005f38:	801a      	strh	r2, [r3, #0]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 8005f3a:	23ef      	movs	r3, #239	; 0xef
 8005f3c:	22ef      	movs	r2, #239	; 0xef
 8005f3e:	2100      	movs	r1, #0
 8005f40:	2000      	movs	r0, #0
 8005f42:	f7ff ffb0 	bl	8005ea6 <LCD_1IN28_SetWindows>

	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8005f46:	230e      	movs	r3, #14
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	801a      	strh	r2, [r3, #0]
 8005f4e:	e01a      	b.n	8005f86 <LCD_1IN28_Clear+0x58>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8005f50:	230c      	movs	r3, #12
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	2200      	movs	r2, #0
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	e00a      	b.n	8005f70 <LCD_1IN28_Clear+0x42>
			LCD_1IN28_SendData_16Bit(Color);
 8005f5a:	1dbb      	adds	r3, r7, #6
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f7ff fcf2 	bl	8005948 <LCD_1IN28_SendData_16Bit>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8005f64:	210c      	movs	r1, #12
 8005f66:	187b      	adds	r3, r7, r1
 8005f68:	881a      	ldrh	r2, [r3, #0]
 8005f6a:	187b      	adds	r3, r7, r1
 8005f6c:	3201      	adds	r2, #1
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	230c      	movs	r3, #12
 8005f72:	18fb      	adds	r3, r7, r3
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	2bef      	cmp	r3, #239	; 0xef
 8005f78:	d9ef      	bls.n	8005f5a <LCD_1IN28_Clear+0x2c>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8005f7a:	210e      	movs	r1, #14
 8005f7c:	187b      	adds	r3, r7, r1
 8005f7e:	881a      	ldrh	r2, [r3, #0]
 8005f80:	187b      	adds	r3, r7, r1
 8005f82:	3201      	adds	r2, #1
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	230e      	movs	r3, #14
 8005f88:	18fb      	adds	r3, r7, r3
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	2bef      	cmp	r3, #239	; 0xef
 8005f8e:	d9df      	bls.n	8005f50 <LCD_1IN28_Clear+0x22>
		}
	 }
}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	46bd      	mov	sp, r7
 8005f96:	b004      	add	sp, #16
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8005f9a:	b590      	push	{r4, r7, lr}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	0004      	movs	r4, r0
 8005fa2:	0008      	movs	r0, r1
 8005fa4:	0011      	movs	r1, r2
 8005fa6:	1dbb      	adds	r3, r7, #6
 8005fa8:	1c22      	adds	r2, r4, #0
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	1d3b      	adds	r3, r7, #4
 8005fae:	1c02      	adds	r2, r0, #0
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	1cbb      	adds	r3, r7, #2
 8005fb4:	1c0a      	adds	r2, r1, #0
 8005fb6:	801a      	strh	r2, [r3, #0]
	LCD_1IN28_SetWindows(x,y,x,y);
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	881c      	ldrh	r4, [r3, #0]
 8005fbc:	1dbb      	adds	r3, r7, #6
 8005fbe:	881a      	ldrh	r2, [r3, #0]
 8005fc0:	1d3b      	adds	r3, r7, #4
 8005fc2:	8819      	ldrh	r1, [r3, #0]
 8005fc4:	1dbb      	adds	r3, r7, #6
 8005fc6:	8818      	ldrh	r0, [r3, #0]
 8005fc8:	0023      	movs	r3, r4
 8005fca:	f7ff ff6c 	bl	8005ea6 <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 8005fce:	1cbb      	adds	r3, r7, #2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f7ff fcb8 	bl	8005948 <LCD_1IN28_SendData_16Bit>
}
 8005fd8:	46c0      	nop			; (mov r8, r8)
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b003      	add	sp, #12
 8005fde:	bd90      	pop	{r4, r7, pc}

08005fe0 <LCD_1IN28_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN28_SetBackLight(UWORD Value)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	0002      	movs	r2, r0
 8005fe8:	1dbb      	adds	r3, r7, #6
 8005fea:	801a      	strh	r2, [r3, #0]
	DEV_Set_PWM(Value);
 8005fec:	4b03      	ldr	r3, [pc, #12]	; (8005ffc <LCD_1IN28_SetBackLight+0x1c>)
 8005fee:	1dba      	adds	r2, r7, #6
 8005ff0:	8812      	ldrh	r2, [r2, #0]
 8005ff2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005ff4:	46c0      	nop			; (mov r8, r8)
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	b002      	add	sp, #8
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40014400 	.word	0x40014400

08006000 <memset>:
 8006000:	0003      	movs	r3, r0
 8006002:	1882      	adds	r2, r0, r2
 8006004:	4293      	cmp	r3, r2
 8006006:	d100      	bne.n	800600a <memset+0xa>
 8006008:	4770      	bx	lr
 800600a:	7019      	strb	r1, [r3, #0]
 800600c:	3301      	adds	r3, #1
 800600e:	e7f9      	b.n	8006004 <memset+0x4>

08006010 <__libc_init_array>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	2600      	movs	r6, #0
 8006014:	4c0c      	ldr	r4, [pc, #48]	; (8006048 <__libc_init_array+0x38>)
 8006016:	4d0d      	ldr	r5, [pc, #52]	; (800604c <__libc_init_array+0x3c>)
 8006018:	1b64      	subs	r4, r4, r5
 800601a:	10a4      	asrs	r4, r4, #2
 800601c:	42a6      	cmp	r6, r4
 800601e:	d109      	bne.n	8006034 <__libc_init_array+0x24>
 8006020:	2600      	movs	r6, #0
 8006022:	f000 f819 	bl	8006058 <_init>
 8006026:	4c0a      	ldr	r4, [pc, #40]	; (8006050 <__libc_init_array+0x40>)
 8006028:	4d0a      	ldr	r5, [pc, #40]	; (8006054 <__libc_init_array+0x44>)
 800602a:	1b64      	subs	r4, r4, r5
 800602c:	10a4      	asrs	r4, r4, #2
 800602e:	42a6      	cmp	r6, r4
 8006030:	d105      	bne.n	800603e <__libc_init_array+0x2e>
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	00b3      	lsls	r3, r6, #2
 8006036:	58eb      	ldr	r3, [r5, r3]
 8006038:	4798      	blx	r3
 800603a:	3601      	adds	r6, #1
 800603c:	e7ee      	b.n	800601c <__libc_init_array+0xc>
 800603e:	00b3      	lsls	r3, r6, #2
 8006040:	58eb      	ldr	r3, [r5, r3]
 8006042:	4798      	blx	r3
 8006044:	3601      	adds	r6, #1
 8006046:	e7f2      	b.n	800602e <__libc_init_array+0x1e>
 8006048:	08006d38 	.word	0x08006d38
 800604c:	08006d38 	.word	0x08006d38
 8006050:	08006d3c 	.word	0x08006d3c
 8006054:	08006d38 	.word	0x08006d38

08006058 <_init>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605e:	bc08      	pop	{r3}
 8006060:	469e      	mov	lr, r3
 8006062:	4770      	bx	lr

08006064 <_fini>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606a:	bc08      	pop	{r3}
 800606c:	469e      	mov	lr, r3
 800606e:	4770      	bx	lr
