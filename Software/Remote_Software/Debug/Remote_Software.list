
Remote_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f78  08004f78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f78  08004f78  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f78  08004f78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f78  08004f78  00014f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000000c  08004f8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08004f8c  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151cf  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031d1  00000000  00000000  00035246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  00038418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e94  00000000  00000000  000396d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018779  00000000  00000000  0003a564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000194a1  00000000  00000000  00052cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009661a  00000000  00000000  0006c17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042c4  00000000  00000000  00102798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00106a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004e84 	.word	0x08004e84

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004e84 	.word	0x08004e84

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	230c      	movs	r3, #12
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f004 fd16 	bl	8004e2c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000400:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000402:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <MX_ADC1_Init+0xd0>)
 8000404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000406:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	05d2      	lsls	r2, r2, #23
 800040c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000414:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041a:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000422:	2204      	movs	r2, #4
 8000424:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000426:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000428:	2200      	movs	r2, #0
 800042a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800042c:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800042e:	2200      	movs	r2, #0
 8000430:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000434:	2200      	movs	r2, #0
 8000436:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000438:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800043a:	2201      	movs	r2, #1
 800043c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000440:	2220      	movs	r2, #32
 8000442:	2100      	movs	r1, #0
 8000444:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800044e:	2200      	movs	r2, #0
 8000450:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000454:	222c      	movs	r2, #44	; 0x2c
 8000456:	2100      	movs	r1, #0
 8000458:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800045c:	2200      	movs	r2, #0
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000462:	2200      	movs	r2, #0
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000468:	2200      	movs	r2, #0
 800046a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800046e:	223c      	movs	r2, #60	; 0x3c
 8000470:	2100      	movs	r1, #0
 8000472:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000476:	2200      	movs	r2, #0
 8000478:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800047c:	0018      	movs	r0, r3
 800047e:	f000 fe25 	bl	80010cc <HAL_ADC_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000486:	f000 f95c 	bl	8000742 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <MX_ADC1_Init+0xd4>)
 800048e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049c:	1d3a      	adds	r2, r7, #4
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_ADC1_Init+0xcc>)
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 ffba 	bl	800141c <HAL_ADC_ConfigChannel>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004ac:	f000 f949 	bl	8000742 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000028 	.word	0x20000028
 80004bc:	40012400 	.word	0x40012400
 80004c0:	04000002 	.word	0x04000002

080004c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b08b      	sub	sp, #44	; 0x2c
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	2414      	movs	r4, #20
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	0018      	movs	r0, r3
 80004d2:	2314      	movs	r3, #20
 80004d4:	001a      	movs	r2, r3
 80004d6:	2100      	movs	r1, #0
 80004d8:	f004 fca8 	bl	8004e2c <memset>
  if(adcHandle->Instance==ADC1)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a18      	ldr	r2, [pc, #96]	; (8000544 <HAL_ADC_MspInit+0x80>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d129      	bne.n	800053a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004e6:	4b18      	ldr	r3, [pc, #96]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0349      	lsls	r1, r1, #13
 80004f0:	430a      	orrs	r2, r1
 80004f2:	641a      	str	r2, [r3, #64]	; 0x40
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	035b      	lsls	r3, r3, #13
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000508:	2101      	movs	r1, #1
 800050a:	430a      	orrs	r2, r1
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000512:	2201      	movs	r2, #1
 8000514:	4013      	ands	r3, r2
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Analog_In_Pin;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2202      	movs	r2, #2
 800051e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2203      	movs	r2, #3
 8000524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Analog_In_GPIO_Port, &GPIO_InitStruct);
 800052c:	193a      	adds	r2, r7, r4
 800052e:	23a0      	movs	r3, #160	; 0xa0
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f001 f9fd 	bl	8001934 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b00b      	add	sp, #44	; 0x2c
 8000540:	bd90      	pop	{r4, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40012400 	.word	0x40012400
 8000548:	40021000 	.word	0x40021000

0800054c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b089      	sub	sp, #36	; 0x24
 8000550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	240c      	movs	r4, #12
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	2314      	movs	r3, #20
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f004 fc65 	bl	8004e2c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b44      	ldr	r3, [pc, #272]	; (8000674 <MX_GPIO_Init+0x128>)
 8000564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000566:	4b43      	ldr	r3, [pc, #268]	; (8000674 <MX_GPIO_Init+0x128>)
 8000568:	2102      	movs	r1, #2
 800056a:	430a      	orrs	r2, r1
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
 800056e:	4b41      	ldr	r3, [pc, #260]	; (8000674 <MX_GPIO_Init+0x128>)
 8000570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000572:	2202      	movs	r2, #2
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b3e      	ldr	r3, [pc, #248]	; (8000674 <MX_GPIO_Init+0x128>)
 800057c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <MX_GPIO_Init+0x128>)
 8000580:	2104      	movs	r1, #4
 8000582:	430a      	orrs	r2, r1
 8000584:	635a      	str	r2, [r3, #52]	; 0x34
 8000586:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <MX_GPIO_Init+0x128>)
 8000588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058a:	2204      	movs	r2, #4
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b38      	ldr	r3, [pc, #224]	; (8000674 <MX_GPIO_Init+0x128>)
 8000594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000596:	4b37      	ldr	r3, [pc, #220]	; (8000674 <MX_GPIO_Init+0x128>)
 8000598:	2101      	movs	r1, #1
 800059a:	430a      	orrs	r2, r1
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
 800059e:	4b35      	ldr	r3, [pc, #212]	; (8000674 <MX_GPIO_Init+0x128>)
 80005a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a2:	2201      	movs	r2, #1
 80005a4:	4013      	ands	r3, r2
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|SPI1_CSN_Pin, GPIO_PIN_RESET);
 80005aa:	4933      	ldr	r1, [pc, #204]	; (8000678 <MX_GPIO_Init+0x12c>)
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <MX_GPIO_Init+0x130>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fb23 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	021b      	lsls	r3, r3, #8
 80005ba:	4831      	ldr	r0, [pc, #196]	; (8000680 <MX_GPIO_Init+0x134>)
 80005bc:	2200      	movs	r2, #0
 80005be:	0019      	movs	r1, r3
 80005c0:	f001 fb1c 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80005c4:	492f      	ldr	r1, [pc, #188]	; (8000684 <MX_GPIO_Init+0x138>)
 80005c6:	23a0      	movs	r3, #160	; 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2200      	movs	r2, #0
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fb15 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_Pin|SPI1_CSN_Pin;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <MX_GPIO_Init+0x12c>)
 80005d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2201      	movs	r2, #1
 80005dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	4a23      	ldr	r2, [pc, #140]	; (800067c <MX_GPIO_Init+0x130>)
 80005ee:	0019      	movs	r1, r3
 80005f0:	0010      	movs	r0, r2
 80005f2:	f001 f99f 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DC_Pin;
 80005f6:	0021      	movs	r1, r4
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	0212      	lsls	r2, r2, #8
 80005fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	000c      	movs	r4, r1
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2201      	movs	r2, #1
 8000606:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000614:	193b      	adds	r3, r7, r4
 8000616:	4a1a      	ldr	r2, [pc, #104]	; (8000680 <MX_GPIO_Init+0x134>)
 8000618:	0019      	movs	r1, r3
 800061a:	0010      	movs	r0, r2
 800061c:	f001 f98a 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RST_Pin|LED_Pin|NRF_CE_Pin;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <MX_GPIO_Init+0x138>)
 8000624:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	2201      	movs	r2, #1
 800062a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	193a      	adds	r2, r7, r4
 800063a:	23a0      	movs	r3, #160	; 0xa0
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f001 f977 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_In_Pin;
 8000646:	0021      	movs	r1, r4
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	0152      	lsls	r2, r2, #5
 800064e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_In_GPIO_Port, &GPIO_InitStruct);
 800065c:	187a      	adds	r2, r7, r1
 800065e:	23a0      	movs	r3, #160	; 0xa0
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f001 f965 	bl	8001934 <HAL_GPIO_Init>

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b009      	add	sp, #36	; 0x24
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000
 8000678:	00000201 	.word	0x00000201
 800067c:	50000400 	.word	0x50000400
 8000680:	50000800 	.word	0x50000800
 8000684:	00000888 	.word	0x00000888

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fb76 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f80f 	bl	80006b2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f7ff ff5a 	bl	800054c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000698:	f7ff fea8 	bl	80003ec <MX_ADC1_Init>
  MX_SPI1_Init();
 800069c:	f000 f856 	bl	800074c <MX_SPI1_Init>
  MX_SPI2_Init();
 80006a0:	f000 f892 	bl	80007c8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80006a4:	f000 fa90 	bl	8000bc8 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80006a8:	f000 f9a6 	bl	80009f8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //LCD1in28works();
  LCD_1in28_test();
 80006ac:	f004 fba8 	bl	8004e00 <LCD_1in28_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x28>

080006b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b2:	b590      	push	{r4, r7, lr}
 80006b4:	b093      	sub	sp, #76	; 0x4c
 80006b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b8:	2414      	movs	r4, #20
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	0018      	movs	r0, r3
 80006be:	2334      	movs	r3, #52	; 0x34
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f004 fbb2 	bl	8004e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	0018      	movs	r0, r3
 80006cc:	2310      	movs	r3, #16
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f004 fbab 	bl	8004e2c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 faac 	bl	8001c38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2202      	movs	r2, #2
 80006e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	0052      	lsls	r2, r2, #1
 80006ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2240      	movs	r2, #64	; 0x40
 80006f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	193b      	adds	r3, r7, r4
 8000702:	0018      	movs	r0, r3
 8000704:	f001 fae4 	bl	8001cd0 <HAL_RCC_OscConfig>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800070c:	f000 f819 	bl	8000742 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2207      	movs	r2, #7
 8000714:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2100      	movs	r1, #0
 800072c:	0018      	movs	r0, r3
 800072e:	f001 fddf 	bl	80022f0 <HAL_RCC_ClockConfig>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000736:	f000 f804 	bl	8000742 <Error_Handler>
  }
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b013      	add	sp, #76	; 0x4c
 8000740:	bd90      	pop	{r4, r7, pc}

08000742 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000746:	b672      	cpsid	i
}
 8000748:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074a:	e7fe      	b.n	800074a <Error_Handler+0x8>

0800074c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_SPI1_Init+0x74>)
 8000752:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <MX_SPI1_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_SPI1_Init+0x74>)
 8000758:	2282      	movs	r2, #130	; 0x82
 800075a:	0052      	lsls	r2, r2, #1
 800075c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_SPI1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_SPI1_Init+0x74>)
 8000766:	22e0      	movs	r2, #224	; 0xe0
 8000768:	00d2      	lsls	r2, r2, #3
 800076a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_SPI1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_SPI1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_SPI1_Init+0x74>)
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	0092      	lsls	r2, r2, #2
 800077e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_SPI1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_SPI1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_SPI1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_SPI1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_SPI1_Init+0x74>)
 800079a:	2207      	movs	r2, #7
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_SPI1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_SPI1_Init+0x74>)
 80007a6:	2208      	movs	r2, #8
 80007a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <MX_SPI1_Init+0x74>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 f86f 	bl	8002890 <HAL_SPI_Init>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007b6:	f7ff ffc4 	bl	8000742 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000008c 	.word	0x2000008c
 80007c4:	40013000 	.word	0x40013000

080007c8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_SPI2_Init+0x74>)
 80007ce:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <MX_SPI2_Init+0x78>)
 80007d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_SPI2_Init+0x74>)
 80007d4:	2282      	movs	r2, #130	; 0x82
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_SPI2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_SPI2_Init+0x74>)
 80007e2:	22e0      	movs	r2, #224	; 0xe0
 80007e4:	00d2      	lsls	r2, r2, #3
 80007e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_SPI2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_SPI2_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_SPI2_Init+0x74>)
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	0092      	lsls	r2, r2, #2
 80007fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_SPI2_Init+0x74>)
 80007fe:	2208      	movs	r2, #8
 8000800:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_SPI2_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_SPI2_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_SPI2_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_SPI2_Init+0x74>)
 8000816:	2207      	movs	r2, #7
 8000818:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_SPI2_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_SPI2_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <MX_SPI2_Init+0x74>)
 8000828:	0018      	movs	r0, r3
 800082a:	f002 f831 	bl	8002890 <HAL_SPI_Init>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000832:	f7ff ff86 	bl	8000742 <Error_Handler>
  /* USER CODE BEGIN SPI2_Init 2 */
//ALways change line 77 to
  //hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  /* USER CODE END SPI2_Init 2 */

}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000f0 	.word	0x200000f0
 8000840:	40003800 	.word	0x40003800

08000844 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b08d      	sub	sp, #52	; 0x34
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	241c      	movs	r4, #28
 800084e:	193b      	adds	r3, r7, r4
 8000850:	0018      	movs	r0, r3
 8000852:	2314      	movs	r3, #20
 8000854:	001a      	movs	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	f004 fae8 	bl	8004e2c <memset>
  if(spiHandle->Instance==SPI1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a42      	ldr	r2, [pc, #264]	; (800096c <HAL_SPI_MspInit+0x128>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d131      	bne.n	80008ca <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000866:	4b42      	ldr	r3, [pc, #264]	; (8000970 <HAL_SPI_MspInit+0x12c>)
 8000868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800086a:	4b41      	ldr	r3, [pc, #260]	; (8000970 <HAL_SPI_MspInit+0x12c>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	0149      	lsls	r1, r1, #5
 8000870:	430a      	orrs	r2, r1
 8000872:	641a      	str	r2, [r3, #64]	; 0x40
 8000874:	4b3e      	ldr	r3, [pc, #248]	; (8000970 <HAL_SPI_MspInit+0x12c>)
 8000876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	015b      	lsls	r3, r3, #5
 800087c:	4013      	ands	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <HAL_SPI_MspInit+0x12c>)
 8000884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000886:	4b3a      	ldr	r3, [pc, #232]	; (8000970 <HAL_SPI_MspInit+0x12c>)
 8000888:	2101      	movs	r1, #1
 800088a:	430a      	orrs	r2, r1
 800088c:	635a      	str	r2, [r3, #52]	; 0x34
 800088e:	4b38      	ldr	r3, [pc, #224]	; (8000970 <HAL_SPI_MspInit+0x12c>)
 8000890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000892:	2201      	movs	r2, #1
 8000894:	4013      	ands	r3, r2
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800089a:	0021      	movs	r1, r4
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2264      	movs	r2, #100	; 0x64
 80008a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2202      	movs	r2, #2
 80008a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	187a      	adds	r2, r7, r1
 80008bc:	23a0      	movs	r3, #160	; 0xa0
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	0011      	movs	r1, r2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 f836 	bl	8001934 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80008c8:	e04c      	b.n	8000964 <HAL_SPI_MspInit+0x120>
  else if(spiHandle->Instance==SPI2)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a29      	ldr	r2, [pc, #164]	; (8000974 <HAL_SPI_MspInit+0x130>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d147      	bne.n	8000964 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <HAL_SPI_MspInit+0x12c>)
 80008d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <HAL_SPI_MspInit+0x12c>)
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	01c9      	lsls	r1, r1, #7
 80008de:	430a      	orrs	r2, r1
 80008e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <HAL_SPI_MspInit+0x12c>)
 80008e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	01db      	lsls	r3, r3, #7
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <HAL_SPI_MspInit+0x12c>)
 80008f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <HAL_SPI_MspInit+0x12c>)
 80008f6:	2101      	movs	r1, #1
 80008f8:	430a      	orrs	r2, r1
 80008fa:	635a      	str	r2, [r3, #52]	; 0x34
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <HAL_SPI_MspInit+0x12c>)
 80008fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000900:	2201      	movs	r2, #1
 8000902:	4013      	ands	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000908:	241c      	movs	r4, #28
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2201      	movs	r2, #1
 800090e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2202      	movs	r2, #2
 8000914:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	193b      	adds	r3, r7, r4
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	2202      	movs	r2, #2
 8000920:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	193a      	adds	r2, r7, r4
 800092a:	23a0      	movs	r3, #160	; 0xa0
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	0011      	movs	r1, r2
 8000930:	0018      	movs	r0, r3
 8000932:	f000 ffff 	bl	8001934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000936:	0021      	movs	r1, r4
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2210      	movs	r2, #16
 800093c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2202      	movs	r2, #2
 8000942:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2202      	movs	r2, #2
 800094e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2201      	movs	r2, #1
 8000954:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	187a      	adds	r2, r7, r1
 8000958:	23a0      	movs	r3, #160	; 0xa0
 800095a:	05db      	lsls	r3, r3, #23
 800095c:	0011      	movs	r1, r2
 800095e:	0018      	movs	r0, r3
 8000960:	f000 ffe8 	bl	8001934 <HAL_GPIO_Init>
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b00d      	add	sp, #52	; 0x34
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	40013000 	.word	0x40013000
 8000970:	40021000 	.word	0x40021000
 8000974:	40003800 	.word	0x40003800

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_MspInit+0x44>)
 8000980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_MspInit+0x44>)
 8000984:	2101      	movs	r1, #1
 8000986:	430a      	orrs	r2, r1
 8000988:	641a      	str	r2, [r3, #64]	; 0x40
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_MspInit+0x44>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	2201      	movs	r2, #1
 8000990:	4013      	ands	r3, r2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x44>)
 8000998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_MspInit+0x44>)
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	0549      	lsls	r1, r1, #21
 80009a0:	430a      	orrs	r2, r1
 80009a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_MspInit+0x44>)
 80009a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	055b      	lsls	r3, r3, #21
 80009ac:	4013      	ands	r3, r2
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	40021000 	.word	0x40021000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 fa34 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b094      	sub	sp, #80	; 0x50
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fe:	2334      	movs	r3, #52	; 0x34
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	0018      	movs	r0, r3
 8000a04:	231c      	movs	r3, #28
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f004 fa0f 	bl	8004e2c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a0e:	003b      	movs	r3, r7
 8000a10:	0018      	movs	r0, r3
 8000a12:	2334      	movs	r3, #52	; 0x34
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f004 fa08 	bl	8004e2c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a1c:	4b38      	ldr	r3, [pc, #224]	; (8000b00 <MX_TIM16_Init+0x108>)
 8000a1e:	4a39      	ldr	r2, [pc, #228]	; (8000b04 <MX_TIM16_Init+0x10c>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 300-1;
 8000a22:	4b37      	ldr	r3, [pc, #220]	; (8000b00 <MX_TIM16_Init+0x108>)
 8000a24:	222c      	movs	r2, #44	; 0x2c
 8000a26:	32ff      	adds	r2, #255	; 0xff
 8000a28:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <MX_TIM16_Init+0x108>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8000a30:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <MX_TIM16_Init+0x108>)
 8000a32:	4a35      	ldr	r2, [pc, #212]	; (8000b08 <MX_TIM16_Init+0x110>)
 8000a34:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b32      	ldr	r3, [pc, #200]	; (8000b00 <MX_TIM16_Init+0x108>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a3c:	4b30      	ldr	r3, [pc, #192]	; (8000b00 <MX_TIM16_Init+0x108>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a42:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <MX_TIM16_Init+0x108>)
 8000a44:	2280      	movs	r2, #128	; 0x80
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <MX_TIM16_Init+0x108>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 faae 	bl	8002fac <HAL_TIM_Base_Init>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000a54:	f7ff fe75 	bl	8000742 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000a58:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <MX_TIM16_Init+0x108>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 fafe 	bl	800305c <HAL_TIM_PWM_Init>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000a64:	f7ff fe6d 	bl	8000742 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a68:	2134      	movs	r1, #52	; 0x34
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2260      	movs	r2, #96	; 0x60
 8000a6e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a94:	1879      	adds	r1, r7, r1
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_TIM16_Init+0x108>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 fc16 	bl	80032cc <HAL_TIM_PWM_ConfigChannel>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8000aa4:	f7ff fe4d 	bl	8000742 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aae:	003b      	movs	r3, r7
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aba:	003b      	movs	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ac0:	003b      	movs	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac6:	003b      	movs	r3, r7
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0192      	lsls	r2, r2, #6
 8000acc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ace:	003b      	movs	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000ada:	003a      	movs	r2, r7
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_TIM16_Init+0x108>)
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f003 f82d 	bl	8003b40 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM16_Init+0xf6>
  {
    Error_Handler();
 8000aea:	f7ff fe2a 	bl	8000742 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <MX_TIM16_Init+0x108>)
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 f82b 	bl	8000b4c <HAL_TIM_MspPostInit>

}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b014      	add	sp, #80	; 0x50
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	20000154 	.word	0x20000154
 8000b04:	40014400 	.word	0x40014400
 8000b08:	000003e7 	.word	0x000003e7

08000b0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_TIM_Base_MspInit+0x38>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d10d      	bne.n	8000b3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_TIM_Base_MspInit+0x3c>)
 8000b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_TIM_Base_MspInit+0x3c>)
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	0289      	lsls	r1, r1, #10
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_TIM_Base_MspInit+0x3c>)
 8000b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	029b      	lsls	r3, r3, #10
 8000b34:	4013      	ands	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b004      	add	sp, #16
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	40014400 	.word	0x40014400
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	240c      	movs	r4, #12
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	0018      	movs	r0, r3
 8000b5a:	2314      	movs	r3, #20
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f004 f964 	bl	8004e2c <memset>
  if(timHandle->Instance==TIM16)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <HAL_TIM_MspPostInit+0x70>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d122      	bne.n	8000bb4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <HAL_TIM_MspPostInit+0x74>)
 8000b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_TIM_MspPostInit+0x74>)
 8000b74:	2102      	movs	r1, #2
 8000b76:	430a      	orrs	r2, r1
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_TIM_MspPostInit+0x74>)
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b7e:	2202      	movs	r2, #2
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BL_Pin;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	0052      	lsls	r2, r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	0021      	movs	r1, r4
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2202      	movs	r2, #2
 8000b94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BL_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_TIM_MspPostInit+0x78>)
 8000bac:	0019      	movs	r1, r3
 8000bae:	0010      	movs	r0, r2
 8000bb0:	f000 fec0 	bl	8001934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b009      	add	sp, #36	; 0x24
 8000bba:	bd90      	pop	{r4, r7, pc}
 8000bbc:	40014400 	.word	0x40014400
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	50000400 	.word	0x50000400

08000bc8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bcc:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000bce:	4a24      	ldr	r2, [pc, #144]	; (8000c60 <MX_USART1_UART_Init+0x98>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bd2:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000bd4:	22e1      	movs	r2, #225	; 0xe1
 8000bd6:	0252      	lsls	r2, r2, #9
 8000bd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f003 f830 	bl	8003c78 <HAL_HalfDuplex_Init>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c1c:	f7ff fd91 	bl	8000742 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c22:	2100      	movs	r1, #0
 8000c24:	0018      	movs	r0, r3
 8000c26:	f003 fc5d 	bl	80044e4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c2e:	f7ff fd88 	bl	8000742 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c34:	2100      	movs	r1, #0
 8000c36:	0018      	movs	r0, r3
 8000c38:	f003 fc94 	bl	8004564 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c40:	f7ff fd7f 	bl	8000742 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <MX_USART1_UART_Init+0x94>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f003 fc12 	bl	8004470 <HAL_UARTEx_DisableFifoMode>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c50:	f7ff fd77 	bl	8000742 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	200001a0 	.word	0x200001a0
 8000c60:	40013800 	.word	0x40013800

08000c64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b091      	sub	sp, #68	; 0x44
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	232c      	movs	r3, #44	; 0x2c
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	0018      	movs	r0, r3
 8000c72:	2314      	movs	r3, #20
 8000c74:	001a      	movs	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f004 f8d8 	bl	8004e2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c7c:	2414      	movs	r4, #20
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	0018      	movs	r0, r3
 8000c82:	2318      	movs	r3, #24
 8000c84:	001a      	movs	r2, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	f004 f8d0 	bl	8004e2c <memset>
  if(uartHandle->Instance==USART1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a22      	ldr	r2, [pc, #136]	; (8000d1c <HAL_UART_MspInit+0xb8>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d13d      	bne.n	8000d12 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f001 fccd 	bl	8002644 <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cae:	f7ff fd48 	bl	8000742 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <HAL_UART_MspInit+0xbc>)
 8000cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <HAL_UART_MspInit+0xbc>)
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	01c9      	lsls	r1, r1, #7
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0xbc>)
 8000cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	01db      	lsls	r3, r3, #7
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_UART_MspInit+0xbc>)
 8000cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <HAL_UART_MspInit+0xbc>)
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0xbc>)
 8000cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cde:	2202      	movs	r2, #2
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ce6:	212c      	movs	r1, #44	; 0x2c
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2240      	movs	r2, #64	; 0x40
 8000cec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2212      	movs	r2, #18
 8000cf2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_UART_MspInit+0xc0>)
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	0010      	movs	r0, r2
 8000d0e:	f000 fe11 	bl	8001934 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b011      	add	sp, #68	; 0x44
 8000d18:	bd90      	pop	{r4, r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	40013800 	.word	0x40013800
 8000d20:	40021000 	.word	0x40021000
 8000d24:	50000400 	.word	0x50000400

08000d28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d2c:	f7ff fe5f 	bl	80009ee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d32:	490d      	ldr	r1, [pc, #52]	; (8000d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <LoopForever+0xe>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d48:	4c0a      	ldr	r4, [pc, #40]	; (8000d74 <LoopForever+0x16>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d56:	f004 f871 	bl	8004e3c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d5a:	f7ff fc95 	bl	8000688 <main>

08000d5e <LoopForever>:

LoopForever:
  b LoopForever
 8000d5e:	e7fe      	b.n	8000d5e <LoopForever>
  ldr   r0, =_estack
 8000d60:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d6c:	08004f80 	.word	0x08004f80
  ldr r2, =_sbss
 8000d70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d74:	20000238 	.word	0x20000238

08000d78 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_Init+0x3c>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_Init+0x3c>)
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0049      	lsls	r1, r1, #1
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d96:	2003      	movs	r0, #3
 8000d98:	f000 f810 	bl	8000dbc <HAL_InitTick>
 8000d9c:	1e03      	subs	r3, r0, #0
 8000d9e:	d003      	beq.n	8000da8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e001      	b.n	8000dac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fde6 	bl	8000978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	781b      	ldrb	r3, [r3, #0]
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40022000 	.word	0x40022000

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <HAL_InitTick+0x88>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d02b      	beq.n	8000e2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <HAL_InitTick+0x8c>)
 8000dd6:	681c      	ldr	r4, [r3, #0]
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_InitTick+0x88>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	0019      	movs	r1, r3
 8000dde:	23fa      	movs	r3, #250	; 0xfa
 8000de0:	0098      	lsls	r0, r3, #2
 8000de2:	f7ff f98d 	bl	8000100 <__udivsi3>
 8000de6:	0003      	movs	r3, r0
 8000de8:	0019      	movs	r1, r3
 8000dea:	0020      	movs	r0, r4
 8000dec:	f7ff f988 	bl	8000100 <__udivsi3>
 8000df0:	0003      	movs	r3, r0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 fd91 	bl	800191a <HAL_SYSTICK_Config>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d112      	bne.n	8000e22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d80a      	bhi.n	8000e18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	2301      	movs	r3, #1
 8000e06:	425b      	negs	r3, r3
 8000e08:	2200      	movs	r2, #0
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 fd70 	bl	80018f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_InitTick+0x90>)
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e00d      	b.n	8000e34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e18:	230f      	movs	r3, #15
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	e008      	b.n	8000e34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e22:	230f      	movs	r3, #15
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	e003      	b.n	8000e34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e34:	230f      	movs	r3, #15
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	781b      	ldrb	r3, [r3, #0]
}
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b005      	add	sp, #20
 8000e40:	bd90      	pop	{r4, r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000004 	.word	0x20000004

08000e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_IncTick+0x1c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	001a      	movs	r2, r3
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_IncTick+0x20>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	18d2      	adds	r2, r2, r3
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_IncTick+0x20>)
 8000e62:	601a      	str	r2, [r3, #0]
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000234 	.word	0x20000234

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b02      	ldr	r3, [pc, #8]	; (8000e84 <HAL_GetTick+0x10>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	20000234 	.word	0x20000234

08000e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e90:	f7ff fff0 	bl	8000e74 <HAL_GetTick>
 8000e94:	0003      	movs	r3, r0
 8000e96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	d005      	beq.n	8000eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_Delay+0x44>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	001a      	movs	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	189b      	adds	r3, r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	f7ff ffe0 	bl	8000e74 <HAL_GetTick>
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d8f7      	bhi.n	8000eb0 <HAL_Delay+0x28>
  {
  }
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b004      	add	sp, #16
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	20000008 	.word	0x20000008

08000ed0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	fe3fffff 	.word	0xfe3fffff

08000ef8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	23e0      	movs	r3, #224	; 0xe0
 8000f06:	045b      	lsls	r3, r3, #17
 8000f08:	4013      	ands	r3, r2
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	2104      	movs	r1, #4
 8000f26:	400a      	ands	r2, r1
 8000f28:	2107      	movs	r1, #7
 8000f2a:	4091      	lsls	r1, r2
 8000f2c:	000a      	movs	r2, r1
 8000f2e:	43d2      	mvns	r2, r2
 8000f30:	401a      	ands	r2, r3
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	2104      	movs	r1, #4
 8000f36:	400b      	ands	r3, r1
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4099      	lsls	r1, r3
 8000f3c:	000b      	movs	r3, r1
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b004      	add	sp, #16
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	400a      	ands	r2, r1
 8000f60:	2107      	movs	r1, #7
 8000f62:	4091      	lsls	r1, r2
 8000f64:	000a      	movs	r2, r1
 8000f66:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f6e:	40da      	lsrs	r2, r3
 8000f70:	0013      	movs	r3, r2
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	211f      	movs	r1, #31
 8000f8e:	400a      	ands	r2, r1
 8000f90:	210f      	movs	r1, #15
 8000f92:	4091      	lsls	r1, r2
 8000f94:	000a      	movs	r2, r1
 8000f96:	43d2      	mvns	r2, r2
 8000f98:	401a      	ands	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	0e9b      	lsrs	r3, r3, #26
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	4019      	ands	r1, r3
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	201f      	movs	r0, #31
 8000fa6:	4003      	ands	r3, r0
 8000fa8:	4099      	lsls	r1, r3
 8000faa:	000b      	movs	r3, r1
 8000fac:	431a      	orrs	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b004      	add	sp, #16
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	035b      	lsls	r3, r3, #13
 8000fcc:	0b5b      	lsrs	r3, r3, #13
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	0352      	lsls	r2, r2, #13
 8000fee:	0b52      	lsrs	r2, r2, #13
 8000ff0:	43d2      	mvns	r2, r2
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	0212      	lsls	r2, r2, #8
 8001014:	43d2      	mvns	r2, r2
 8001016:	401a      	ands	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	400b      	ands	r3, r1
 8001020:	4904      	ldr	r1, [pc, #16]	; (8001034 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001022:	400b      	ands	r3, r1
 8001024:	431a      	orrs	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b004      	add	sp, #16
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	07ffff00 	.word	0x07ffff00

08001038 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	4a05      	ldr	r2, [pc, #20]	; (800105c <LL_ADC_EnableInternalRegulator+0x24>)
 8001046:	4013      	ands	r3, r2
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	0552      	lsls	r2, r2, #21
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	6fffffe8 	.word	0x6fffffe8

08001060 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	055b      	lsls	r3, r3, #21
 8001070:	401a      	ands	r2, r3
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	055b      	lsls	r3, r3, #21
 8001076:	429a      	cmp	r2, r3
 8001078:	d101      	bne.n	800107e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800107e:	2300      	movs	r3, #0
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}

08001088 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2201      	movs	r2, #1
 8001096:	4013      	ands	r3, r2
 8001098:	2b01      	cmp	r3, #1
 800109a:	d101      	bne.n	80010a0 <LL_ADC_IsEnabled+0x18>
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <LL_ADC_IsEnabled+0x1a>
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}

080010aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2204      	movs	r2, #4
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d101      	bne.n	80010c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b002      	add	sp, #8
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d4:	231f      	movs	r3, #31
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e17f      	b.n	80013f2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10a      	bne.n	8001110 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff f9e1 	bl	80004c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2254      	movs	r2, #84	; 0x54
 800110c:	2100      	movs	r1, #0
 800110e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff ffa3 	bl	8001060 <LL_ADC_IsInternalRegulatorEnabled>
 800111a:	1e03      	subs	r3, r0, #0
 800111c:	d115      	bne.n	800114a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	0018      	movs	r0, r3
 8001124:	f7ff ff88 	bl	8001038 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001128:	4bb4      	ldr	r3, [pc, #720]	; (80013fc <HAL_ADC_Init+0x330>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	49b4      	ldr	r1, [pc, #720]	; (8001400 <HAL_ADC_Init+0x334>)
 800112e:	0018      	movs	r0, r3
 8001130:	f7fe ffe6 	bl	8000100 <__udivsi3>
 8001134:	0003      	movs	r3, r0
 8001136:	3301      	adds	r3, #1
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3b01      	subs	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff ff86 	bl	8001060 <LL_ADC_IsInternalRegulatorEnabled>
 8001154:	1e03      	subs	r3, r0, #0
 8001156:	d10f      	bne.n	8001178 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115c:	2210      	movs	r2, #16
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001168:	2201      	movs	r2, #1
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001170:	231f      	movs	r3, #31
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff ff94 	bl	80010aa <LL_ADC_REG_IsConversionOngoing>
 8001182:	0003      	movs	r3, r0
 8001184:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	2210      	movs	r2, #16
 800118c:	4013      	ands	r3, r2
 800118e:	d000      	beq.n	8001192 <HAL_ADC_Init+0xc6>
 8001190:	e122      	b.n	80013d8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d000      	beq.n	800119a <HAL_ADC_Init+0xce>
 8001198:	e11e      	b.n	80013d8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	4a99      	ldr	r2, [pc, #612]	; (8001404 <HAL_ADC_Init+0x338>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	2202      	movs	r2, #2
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	0018      	movs	r0, r3
 80011b0:	f7ff ff6a 	bl	8001088 <LL_ADC_IsEnabled>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d000      	beq.n	80011ba <HAL_ADC_Init+0xee>
 80011b8:	e0ad      	b.n	8001316 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7e1b      	ldrb	r3, [r3, #24]
 80011c2:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80011c4:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7e5b      	ldrb	r3, [r3, #25]
 80011ca:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7e9b      	ldrb	r3, [r3, #26]
 80011d2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011d4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <HAL_ADC_Init+0x118>
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	e000      	b.n	80011e6 <HAL_ADC_Init+0x11a>
 80011e4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011e6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011ec:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	da04      	bge.n	8001200 <HAL_ADC_Init+0x134>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	085b      	lsrs	r3, r3, #1
 80011fe:	e001      	b.n	8001204 <HAL_ADC_Init+0x138>
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001204:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	212c      	movs	r1, #44	; 0x2c
 800120a:	5c5b      	ldrb	r3, [r3, r1]
 800120c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800120e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2220      	movs	r2, #32
 800121a:	5c9b      	ldrb	r3, [r3, r2]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d115      	bne.n	800124c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7e9b      	ldrb	r3, [r3, #26]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d105      	bne.n	8001234 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	0252      	lsls	r2, r2, #9
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	e00b      	b.n	800124c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001238:	2220      	movs	r2, #32
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001244:	2201      	movs	r2, #1
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00a      	beq.n	800126a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001258:	23e0      	movs	r3, #224	; 0xe0
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001262:	4313      	orrs	r3, r2
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4a65      	ldr	r2, [pc, #404]	; (8001408 <HAL_ADC_Init+0x33c>)
 8001272:	4013      	ands	r3, r2
 8001274:	0019      	movs	r1, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	430a      	orrs	r2, r1
 800127e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	0f9b      	lsrs	r3, r3, #30
 8001286:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800128c:	4313      	orrs	r3, r2
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4313      	orrs	r3, r2
 8001292:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	223c      	movs	r2, #60	; 0x3c
 8001298:	5c9b      	ldrb	r3, [r3, r2]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d111      	bne.n	80012c2 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	0f9b      	lsrs	r3, r3, #30
 80012a4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012aa:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 80012b0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80012b6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	2201      	movs	r2, #1
 80012be:	4313      	orrs	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	4a50      	ldr	r2, [pc, #320]	; (800140c <HAL_ADC_Init+0x340>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	0019      	movs	r1, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	23c0      	movs	r3, #192	; 0xc0
 80012de:	061b      	lsls	r3, r3, #24
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d018      	beq.n	8001316 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	05db      	lsls	r3, r3, #23
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d012      	beq.n	8001316 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	061b      	lsls	r3, r3, #24
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d00c      	beq.n	8001316 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80012fc:	4b44      	ldr	r3, [pc, #272]	; (8001410 <HAL_ADC_Init+0x344>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a44      	ldr	r2, [pc, #272]	; (8001414 <HAL_ADC_Init+0x348>)
 8001302:	4013      	ands	r3, r2
 8001304:	0019      	movs	r1, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	23f0      	movs	r3, #240	; 0xf0
 800130c:	039b      	lsls	r3, r3, #14
 800130e:	401a      	ands	r2, r3
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_ADC_Init+0x344>)
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131e:	001a      	movs	r2, r3
 8001320:	2100      	movs	r1, #0
 8001322:	f7ff fdf6 	bl	8000f12 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132e:	493a      	ldr	r1, [pc, #232]	; (8001418 <HAL_ADC_Init+0x34c>)
 8001330:	001a      	movs	r2, r3
 8001332:	f7ff fdee 	bl	8000f12 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d109      	bne.n	8001352 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2110      	movs	r1, #16
 800134a:	4249      	negs	r1, r1
 800134c:	430a      	orrs	r2, r1
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
 8001350:	e018      	b.n	8001384 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691a      	ldr	r2, [r3, #16]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	039b      	lsls	r3, r3, #14
 800135a:	429a      	cmp	r2, r3
 800135c:	d112      	bne.n	8001384 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	3b01      	subs	r3, #1
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	221c      	movs	r2, #28
 800136e:	4013      	ands	r3, r2
 8001370:	2210      	movs	r2, #16
 8001372:	4252      	negs	r2, r2
 8001374:	409a      	lsls	r2, r3
 8001376:	0011      	movs	r1, r2
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2100      	movs	r1, #0
 800138a:	0018      	movs	r0, r3
 800138c:	f7ff fdde 	bl	8000f4c <LL_ADC_GetSamplingTimeCommonChannels>
 8001390:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001396:	429a      	cmp	r2, r3
 8001398:	d10b      	bne.n	80013b2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a4:	2203      	movs	r2, #3
 80013a6:	4393      	bics	r3, r2
 80013a8:	2201      	movs	r2, #1
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013b0:	e01c      	b.n	80013ec <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	2212      	movs	r2, #18
 80013b8:	4393      	bics	r3, r2
 80013ba:	2210      	movs	r2, #16
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c6:	2201      	movs	r2, #1
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80013ce:	231f      	movs	r3, #31
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013d6:	e009      	b.n	80013ec <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	2210      	movs	r2, #16
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013e4:	231f      	movs	r3, #31
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80013ec:	231f      	movs	r3, #31
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	781b      	ldrb	r3, [r3, #0]
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b008      	add	sp, #32
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	20000000 	.word	0x20000000
 8001400:	00030d40 	.word	0x00030d40
 8001404:	fffffefd 	.word	0xfffffefd
 8001408:	ffde0201 	.word	0xffde0201
 800140c:	1ffffc02 	.word	0x1ffffc02
 8001410:	40012708 	.word	0x40012708
 8001414:	ffc3ffff 	.word	0xffc3ffff
 8001418:	07ffff04 	.word	0x07ffff04

0800141c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001426:	2317      	movs	r3, #23
 8001428:	18fb      	adds	r3, r7, r3
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2254      	movs	r2, #84	; 0x54
 8001436:	5c9b      	ldrb	r3, [r3, r2]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x24>
 800143c:	2302      	movs	r3, #2
 800143e:	e1c0      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x3a6>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2254      	movs	r2, #84	; 0x54
 8001444:	2101      	movs	r1, #1
 8001446:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	0018      	movs	r0, r3
 800144e:	f7ff fe2c 	bl	80010aa <LL_ADC_REG_IsConversionOngoing>
 8001452:	1e03      	subs	r3, r0, #0
 8001454:	d000      	beq.n	8001458 <HAL_ADC_ConfigChannel+0x3c>
 8001456:	e1a3      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d100      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x46>
 8001460:	e143      	b.n	80016ea <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691a      	ldr	r2, [r3, #16]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	429a      	cmp	r2, r3
 800146c:	d004      	beq.n	8001478 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001472:	4ac1      	ldr	r2, [pc, #772]	; (8001778 <HAL_ADC_ConfigChannel+0x35c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d108      	bne.n	800148a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0019      	movs	r1, r3
 8001482:	0010      	movs	r0, r2
 8001484:	f7ff fd99 	bl	8000fba <LL_ADC_REG_SetSequencerChAdd>
 8001488:	e0c9      	b.n	800161e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	211f      	movs	r1, #31
 8001494:	400b      	ands	r3, r1
 8001496:	210f      	movs	r1, #15
 8001498:	4099      	lsls	r1, r3
 800149a:	000b      	movs	r3, r1
 800149c:	43db      	mvns	r3, r3
 800149e:	4013      	ands	r3, r2
 80014a0:	0019      	movs	r1, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	035b      	lsls	r3, r3, #13
 80014a8:	0b5b      	lsrs	r3, r3, #13
 80014aa:	d105      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x9c>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	0e9b      	lsrs	r3, r3, #26
 80014b2:	221f      	movs	r2, #31
 80014b4:	4013      	ands	r3, r2
 80014b6:	e098      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	d000      	beq.n	80014c4 <HAL_ADC_ConfigChannel+0xa8>
 80014c2:	e091      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x1cc>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d000      	beq.n	80014d0 <HAL_ADC_ConfigChannel+0xb4>
 80014ce:	e089      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x1c8>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2204      	movs	r2, #4
 80014d6:	4013      	ands	r3, r2
 80014d8:	d000      	beq.n	80014dc <HAL_ADC_ConfigChannel+0xc0>
 80014da:	e081      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x1c4>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2208      	movs	r2, #8
 80014e2:	4013      	ands	r3, r2
 80014e4:	d000      	beq.n	80014e8 <HAL_ADC_ConfigChannel+0xcc>
 80014e6:	e079      	b.n	80015dc <HAL_ADC_ConfigChannel+0x1c0>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2210      	movs	r2, #16
 80014ee:	4013      	ands	r3, r2
 80014f0:	d000      	beq.n	80014f4 <HAL_ADC_ConfigChannel+0xd8>
 80014f2:	e071      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x1bc>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2220      	movs	r2, #32
 80014fa:	4013      	ands	r3, r2
 80014fc:	d000      	beq.n	8001500 <HAL_ADC_ConfigChannel+0xe4>
 80014fe:	e069      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x1b8>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2240      	movs	r2, #64	; 0x40
 8001506:	4013      	ands	r3, r2
 8001508:	d000      	beq.n	800150c <HAL_ADC_ConfigChannel+0xf0>
 800150a:	e061      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x1b4>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2280      	movs	r2, #128	; 0x80
 8001512:	4013      	ands	r3, r2
 8001514:	d000      	beq.n	8001518 <HAL_ADC_ConfigChannel+0xfc>
 8001516:	e059      	b.n	80015cc <HAL_ADC_ConfigChannel+0x1b0>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4013      	ands	r3, r2
 8001522:	d151      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1ac>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4013      	ands	r3, r2
 800152e:	d149      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x1a8>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4013      	ands	r3, r2
 800153a:	d141      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x1a4>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4013      	ands	r3, r2
 8001546:	d139      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x1a0>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	015b      	lsls	r3, r3, #5
 8001550:	4013      	ands	r3, r2
 8001552:	d131      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x19c>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	019b      	lsls	r3, r3, #6
 800155c:	4013      	ands	r3, r2
 800155e:	d129      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x198>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	01db      	lsls	r3, r3, #7
 8001568:	4013      	ands	r3, r2
 800156a:	d121      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x194>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	4013      	ands	r3, r2
 8001576:	d119      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x190>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	025b      	lsls	r3, r3, #9
 8001580:	4013      	ands	r3, r2
 8001582:	d111      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x18c>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	029b      	lsls	r3, r3, #10
 800158c:	4013      	ands	r3, r2
 800158e:	d109      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x188>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	02db      	lsls	r3, r3, #11
 8001598:	4013      	ands	r3, r2
 800159a:	d001      	beq.n	80015a0 <HAL_ADC_ConfigChannel+0x184>
 800159c:	2312      	movs	r3, #18
 800159e:	e024      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015a0:	2300      	movs	r3, #0
 80015a2:	e022      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015a4:	2311      	movs	r3, #17
 80015a6:	e020      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015a8:	2310      	movs	r3, #16
 80015aa:	e01e      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015ac:	230f      	movs	r3, #15
 80015ae:	e01c      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015b0:	230e      	movs	r3, #14
 80015b2:	e01a      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015b4:	230d      	movs	r3, #13
 80015b6:	e018      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015b8:	230c      	movs	r3, #12
 80015ba:	e016      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015bc:	230b      	movs	r3, #11
 80015be:	e014      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015c0:	230a      	movs	r3, #10
 80015c2:	e012      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015c4:	2309      	movs	r3, #9
 80015c6:	e010      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015c8:	2308      	movs	r3, #8
 80015ca:	e00e      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015cc:	2307      	movs	r3, #7
 80015ce:	e00c      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015d0:	2306      	movs	r3, #6
 80015d2:	e00a      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015d4:	2305      	movs	r3, #5
 80015d6:	e008      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015d8:	2304      	movs	r3, #4
 80015da:	e006      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015dc:	2303      	movs	r3, #3
 80015de:	e004      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e002      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <HAL_ADC_ConfigChannel+0x1ce>
 80015e8:	2300      	movs	r3, #0
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	6852      	ldr	r2, [r2, #4]
 80015ee:	201f      	movs	r0, #31
 80015f0:	4002      	ands	r2, r0
 80015f2:	4093      	lsls	r3, r2
 80015f4:	000a      	movs	r2, r1
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	429a      	cmp	r2, r3
 800160a:	d808      	bhi.n	800161e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	001a      	movs	r2, r3
 800161a:	f7ff fcae 	bl	8000f7a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	6819      	ldr	r1, [r3, #0]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	001a      	movs	r2, r3
 800162c:	f7ff fce8 	bl	8001000 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db00      	blt.n	800163a <HAL_ADC_ConfigChannel+0x21e>
 8001638:	e0bc      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800163a:	4b50      	ldr	r3, [pc, #320]	; (800177c <HAL_ADC_ConfigChannel+0x360>)
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff fc5b 	bl	8000ef8 <LL_ADC_GetCommonPathInternalCh>
 8001642:	0003      	movs	r3, r0
 8001644:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a4d      	ldr	r2, [pc, #308]	; (8001780 <HAL_ADC_ConfigChannel+0x364>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d122      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	041b      	lsls	r3, r3, #16
 8001656:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001658:	d11d      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	0412      	lsls	r2, r2, #16
 8001660:	4313      	orrs	r3, r2
 8001662:	4a46      	ldr	r2, [pc, #280]	; (800177c <HAL_ADC_ConfigChannel+0x360>)
 8001664:	0019      	movs	r1, r3
 8001666:	0010      	movs	r0, r2
 8001668:	f7ff fc32 	bl	8000ed0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800166c:	4b45      	ldr	r3, [pc, #276]	; (8001784 <HAL_ADC_ConfigChannel+0x368>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4945      	ldr	r1, [pc, #276]	; (8001788 <HAL_ADC_ConfigChannel+0x36c>)
 8001672:	0018      	movs	r0, r3
 8001674:	f7fe fd44 	bl	8000100 <__udivsi3>
 8001678:	0003      	movs	r3, r0
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	0013      	movs	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	189b      	adds	r3, r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001686:	e002      	b.n	800168e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3b01      	subs	r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f9      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001694:	e08e      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a3c      	ldr	r2, [pc, #240]	; (800178c <HAL_ADC_ConfigChannel+0x370>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d10e      	bne.n	80016be <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	045b      	lsls	r3, r3, #17
 80016a6:	4013      	ands	r3, r2
 80016a8:	d109      	bne.n	80016be <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	0452      	lsls	r2, r2, #17
 80016b0:	4313      	orrs	r3, r2
 80016b2:	4a32      	ldr	r2, [pc, #200]	; (800177c <HAL_ADC_ConfigChannel+0x360>)
 80016b4:	0019      	movs	r1, r3
 80016b6:	0010      	movs	r0, r2
 80016b8:	f7ff fc0a 	bl	8000ed0 <LL_ADC_SetCommonPathInternalCh>
 80016bc:	e07a      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a33      	ldr	r2, [pc, #204]	; (8001790 <HAL_ADC_ConfigChannel+0x374>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d000      	beq.n	80016ca <HAL_ADC_ConfigChannel+0x2ae>
 80016c8:	e074      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	03db      	lsls	r3, r3, #15
 80016d0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80016d2:	d000      	beq.n	80016d6 <HAL_ADC_ConfigChannel+0x2ba>
 80016d4:	e06e      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	03d2      	lsls	r2, r2, #15
 80016dc:	4313      	orrs	r3, r2
 80016de:	4a27      	ldr	r2, [pc, #156]	; (800177c <HAL_ADC_ConfigChannel+0x360>)
 80016e0:	0019      	movs	r1, r3
 80016e2:	0010      	movs	r0, r2
 80016e4:	f7ff fbf4 	bl	8000ed0 <LL_ADC_SetCommonPathInternalCh>
 80016e8:	e064      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	061b      	lsls	r3, r3, #24
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d004      	beq.n	8001700 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016fa:	4a1f      	ldr	r2, [pc, #124]	; (8001778 <HAL_ADC_ConfigChannel+0x35c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d107      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	0019      	movs	r1, r3
 800170a:	0010      	movs	r0, r2
 800170c:	f7ff fc66 	bl	8000fdc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	da4d      	bge.n	80017b4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_ADC_ConfigChannel+0x360>)
 800171a:	0018      	movs	r0, r3
 800171c:	f7ff fbec 	bl	8000ef8 <LL_ADC_GetCommonPathInternalCh>
 8001720:	0003      	movs	r3, r0
 8001722:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a15      	ldr	r2, [pc, #84]	; (8001780 <HAL_ADC_ConfigChannel+0x364>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d108      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4a18      	ldr	r2, [pc, #96]	; (8001794 <HAL_ADC_ConfigChannel+0x378>)
 8001732:	4013      	ands	r3, r2
 8001734:	4a11      	ldr	r2, [pc, #68]	; (800177c <HAL_ADC_ConfigChannel+0x360>)
 8001736:	0019      	movs	r1, r3
 8001738:	0010      	movs	r0, r2
 800173a:	f7ff fbc9 	bl	8000ed0 <LL_ADC_SetCommonPathInternalCh>
 800173e:	e039      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_ADC_ConfigChannel+0x370>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d108      	bne.n	800175c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4a12      	ldr	r2, [pc, #72]	; (8001798 <HAL_ADC_ConfigChannel+0x37c>)
 800174e:	4013      	ands	r3, r2
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_ADC_ConfigChannel+0x360>)
 8001752:	0019      	movs	r1, r3
 8001754:	0010      	movs	r0, r2
 8001756:	f7ff fbbb 	bl	8000ed0 <LL_ADC_SetCommonPathInternalCh>
 800175a:	e02b      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <HAL_ADC_ConfigChannel+0x374>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d126      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4a0c      	ldr	r2, [pc, #48]	; (800179c <HAL_ADC_ConfigChannel+0x380>)
 800176a:	4013      	ands	r3, r2
 800176c:	4a03      	ldr	r2, [pc, #12]	; (800177c <HAL_ADC_ConfigChannel+0x360>)
 800176e:	0019      	movs	r1, r3
 8001770:	0010      	movs	r0, r2
 8001772:	f7ff fbad 	bl	8000ed0 <LL_ADC_SetCommonPathInternalCh>
 8001776:	e01d      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x398>
 8001778:	80000004 	.word	0x80000004
 800177c:	40012708 	.word	0x40012708
 8001780:	b0001000 	.word	0xb0001000
 8001784:	20000000 	.word	0x20000000
 8001788:	00030d40 	.word	0x00030d40
 800178c:	b8004000 	.word	0xb8004000
 8001790:	b4002000 	.word	0xb4002000
 8001794:	ff7fffff 	.word	0xff7fffff
 8001798:	feffffff 	.word	0xfeffffff
 800179c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a4:	2220      	movs	r2, #32
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017ac:	2317      	movs	r3, #23
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2254      	movs	r2, #84	; 0x54
 80017b8:	2100      	movs	r1, #0
 80017ba:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80017bc:	2317      	movs	r3, #23
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	781b      	ldrb	r3, [r3, #0]
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b006      	add	sp, #24
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)

080017cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	0002      	movs	r2, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	1dfb      	adds	r3, r7, #7
 80017d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b7f      	cmp	r3, #127	; 0x7f
 80017e0:	d828      	bhi.n	8001834 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017e2:	4a2f      	ldr	r2, [pc, #188]	; (80018a0 <__NVIC_SetPriority+0xd4>)
 80017e4:	1dfb      	adds	r3, r7, #7
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	33c0      	adds	r3, #192	; 0xc0
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	589b      	ldr	r3, [r3, r2]
 80017f2:	1dfa      	adds	r2, r7, #7
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	0011      	movs	r1, r2
 80017f8:	2203      	movs	r2, #3
 80017fa:	400a      	ands	r2, r1
 80017fc:	00d2      	lsls	r2, r2, #3
 80017fe:	21ff      	movs	r1, #255	; 0xff
 8001800:	4091      	lsls	r1, r2
 8001802:	000a      	movs	r2, r1
 8001804:	43d2      	mvns	r2, r2
 8001806:	401a      	ands	r2, r3
 8001808:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	019b      	lsls	r3, r3, #6
 800180e:	22ff      	movs	r2, #255	; 0xff
 8001810:	401a      	ands	r2, r3
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	0018      	movs	r0, r3
 8001818:	2303      	movs	r3, #3
 800181a:	4003      	ands	r3, r0
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001820:	481f      	ldr	r0, [pc, #124]	; (80018a0 <__NVIC_SetPriority+0xd4>)
 8001822:	1dfb      	adds	r3, r7, #7
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b25b      	sxtb	r3, r3
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	430a      	orrs	r2, r1
 800182c:	33c0      	adds	r3, #192	; 0xc0
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001832:	e031      	b.n	8001898 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001834:	4a1b      	ldr	r2, [pc, #108]	; (80018a4 <__NVIC_SetPriority+0xd8>)
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	0019      	movs	r1, r3
 800183c:	230f      	movs	r3, #15
 800183e:	400b      	ands	r3, r1
 8001840:	3b08      	subs	r3, #8
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3306      	adds	r3, #6
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	18d3      	adds	r3, r2, r3
 800184a:	3304      	adds	r3, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	1dfa      	adds	r2, r7, #7
 8001850:	7812      	ldrb	r2, [r2, #0]
 8001852:	0011      	movs	r1, r2
 8001854:	2203      	movs	r2, #3
 8001856:	400a      	ands	r2, r1
 8001858:	00d2      	lsls	r2, r2, #3
 800185a:	21ff      	movs	r1, #255	; 0xff
 800185c:	4091      	lsls	r1, r2
 800185e:	000a      	movs	r2, r1
 8001860:	43d2      	mvns	r2, r2
 8001862:	401a      	ands	r2, r3
 8001864:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	019b      	lsls	r3, r3, #6
 800186a:	22ff      	movs	r2, #255	; 0xff
 800186c:	401a      	ands	r2, r3
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	0018      	movs	r0, r3
 8001874:	2303      	movs	r3, #3
 8001876:	4003      	ands	r3, r0
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800187c:	4809      	ldr	r0, [pc, #36]	; (80018a4 <__NVIC_SetPriority+0xd8>)
 800187e:	1dfb      	adds	r3, r7, #7
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	001c      	movs	r4, r3
 8001884:	230f      	movs	r3, #15
 8001886:	4023      	ands	r3, r4
 8001888:	3b08      	subs	r3, #8
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	430a      	orrs	r2, r1
 800188e:	3306      	adds	r3, #6
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	18c3      	adds	r3, r0, r3
 8001894:	3304      	adds	r3, #4
 8001896:	601a      	str	r2, [r3, #0]
}
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	b003      	add	sp, #12
 800189e:	bd90      	pop	{r4, r7, pc}
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	1e5a      	subs	r2, r3, #1
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	045b      	lsls	r3, r3, #17
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d301      	bcc.n	80018c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018bc:	2301      	movs	r3, #1
 80018be:	e010      	b.n	80018e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <SysTick_Config+0x44>)
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	3a01      	subs	r2, #1
 80018c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c8:	2301      	movs	r3, #1
 80018ca:	425b      	negs	r3, r3
 80018cc:	2103      	movs	r1, #3
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7ff ff7c 	bl	80017cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SysTick_Config+0x44>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SysTick_Config+0x44>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	0018      	movs	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b002      	add	sp, #8
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	210f      	movs	r1, #15
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	1c02      	adds	r2, r0, #0
 8001900:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	187b      	adds	r3, r7, r1
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b25b      	sxtb	r3, r3
 800190a:	0011      	movs	r1, r2
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff ff5d 	bl	80017cc <__NVIC_SetPriority>
}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	b004      	add	sp, #16
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff ffbf 	bl	80018a8 <SysTick_Config>
 800192a:	0003      	movs	r3, r0
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b002      	add	sp, #8
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001942:	e147      	b.n	8001bd4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4091      	lsls	r1, r2
 800194e:	000a      	movs	r2, r1
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d100      	bne.n	800195c <HAL_GPIO_Init+0x28>
 800195a:	e138      	b.n	8001bce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2203      	movs	r2, #3
 8001962:	4013      	ands	r3, r2
 8001964:	2b01      	cmp	r3, #1
 8001966:	d005      	beq.n	8001974 <HAL_GPIO_Init+0x40>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2203      	movs	r2, #3
 800196e:	4013      	ands	r3, r2
 8001970:	2b02      	cmp	r3, #2
 8001972:	d130      	bne.n	80019d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	409a      	lsls	r2, r3
 8001982:	0013      	movs	r3, r2
 8001984:	43da      	mvns	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	409a      	lsls	r2, r3
 8001996:	0013      	movs	r3, r2
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019aa:	2201      	movs	r2, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
 80019b0:	0013      	movs	r3, r2
 80019b2:	43da      	mvns	r2, r3
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	2201      	movs	r2, #1
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
 80019c8:	0013      	movs	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2203      	movs	r2, #3
 80019dc:	4013      	ands	r3, r2
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d017      	beq.n	8001a12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	409a      	lsls	r2, r3
 80019f0:	0013      	movs	r3, r2
 80019f2:	43da      	mvns	r2, r3
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	409a      	lsls	r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2203      	movs	r2, #3
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d123      	bne.n	8001a66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	0092      	lsls	r2, r2, #2
 8001a28:	58d3      	ldr	r3, [r2, r3]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2207      	movs	r2, #7
 8001a30:	4013      	ands	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2107      	movs	r1, #7
 8001a4a:	400b      	ands	r3, r1
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	0013      	movs	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	08da      	lsrs	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3208      	adds	r2, #8
 8001a60:	0092      	lsls	r2, r2, #2
 8001a62:	6939      	ldr	r1, [r7, #16]
 8001a64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	2203      	movs	r2, #3
 8001a72:	409a      	lsls	r2, r3
 8001a74:	0013      	movs	r3, r2
 8001a76:	43da      	mvns	r2, r3
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2203      	movs	r2, #3
 8001a84:	401a      	ands	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	23c0      	movs	r3, #192	; 0xc0
 8001aa0:	029b      	lsls	r3, r3, #10
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d100      	bne.n	8001aa8 <HAL_GPIO_Init+0x174>
 8001aa6:	e092      	b.n	8001bce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001aa8:	4a50      	ldr	r2, [pc, #320]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3318      	adds	r3, #24
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	589b      	ldr	r3, [r3, r2]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	4013      	ands	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	220f      	movs	r2, #15
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	0013      	movs	r3, r2
 8001ac4:	43da      	mvns	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	23a0      	movs	r3, #160	; 0xa0
 8001ad0:	05db      	lsls	r3, r3, #23
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x1ca>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a45      	ldr	r2, [pc, #276]	; (8001bf0 <HAL_GPIO_Init+0x2bc>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <HAL_GPIO_Init+0x1c6>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a44      	ldr	r2, [pc, #272]	; (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x1c2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a43      	ldr	r2, [pc, #268]	; (8001bf8 <HAL_GPIO_Init+0x2c4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_GPIO_Init+0x1be>
 8001aee:	2303      	movs	r3, #3
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x1cc>
 8001af2:	2305      	movs	r3, #5
 8001af4:	e004      	b.n	8001b00 <HAL_GPIO_Init+0x1cc>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e002      	b.n	8001b00 <HAL_GPIO_Init+0x1cc>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <HAL_GPIO_Init+0x1cc>
 8001afe:	2300      	movs	r3, #0
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	2103      	movs	r1, #3
 8001b04:	400a      	ands	r2, r1
 8001b06:	00d2      	lsls	r2, r2, #3
 8001b08:	4093      	lsls	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b10:	4936      	ldr	r1, [pc, #216]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3318      	adds	r3, #24
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b1e:	4b33      	ldr	r3, [pc, #204]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43da      	mvns	r2, r3
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	035b      	lsls	r3, r3, #13
 8001b36:	4013      	ands	r3, r2
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b42:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43da      	mvns	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	039b      	lsls	r3, r3, #14
 8001b60:	4013      	ands	r3, r2
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b72:	4a1e      	ldr	r2, [pc, #120]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001b74:	2384      	movs	r3, #132	; 0x84
 8001b76:	58d3      	ldr	r3, [r2, r3]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	029b      	lsls	r3, r3, #10
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b98:	4914      	ldr	r1, [pc, #80]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001b9a:	2284      	movs	r2, #132	; 0x84
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ba0:	4a12      	ldr	r2, [pc, #72]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	58d3      	ldr	r3, [r2, r3]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	43da      	mvns	r2, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	025b      	lsls	r3, r3, #9
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bc6:	4909      	ldr	r1, [pc, #36]	; (8001bec <HAL_GPIO_Init+0x2b8>)
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	40da      	lsrs	r2, r3
 8001bdc:	1e13      	subs	r3, r2, #0
 8001bde:	d000      	beq.n	8001be2 <HAL_GPIO_Init+0x2ae>
 8001be0:	e6b0      	b.n	8001944 <HAL_GPIO_Init+0x10>
  }
}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b006      	add	sp, #24
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021800 	.word	0x40021800
 8001bf0:	50000400 	.word	0x50000400
 8001bf4:	50000800 	.word	0x50000800
 8001bf8:	50000c00 	.word	0x50000c00

08001bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	0008      	movs	r0, r1
 8001c06:	0011      	movs	r1, r2
 8001c08:	1cbb      	adds	r3, r7, #2
 8001c0a:	1c02      	adds	r2, r0, #0
 8001c0c:	801a      	strh	r2, [r3, #0]
 8001c0e:	1c7b      	adds	r3, r7, #1
 8001c10:	1c0a      	adds	r2, r1, #0
 8001c12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c14:	1c7b      	adds	r3, r7, #1
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d004      	beq.n	8001c26 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c1c:	1cbb      	adds	r3, r7, #2
 8001c1e:	881a      	ldrh	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c24:	e003      	b.n	8001c2e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c26:	1cbb      	adds	r3, r7, #2
 8001c28:	881a      	ldrh	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b002      	add	sp, #8
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d11f      	bne.n	8001c9c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	0013      	movs	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	189b      	adds	r3, r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4912      	ldr	r1, [pc, #72]	; (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7fe fa48 	bl	8000100 <__udivsi3>
 8001c70:	0003      	movs	r3, r0
 8001c72:	3301      	adds	r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c76:	e008      	b.n	8001c8a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	e001      	b.n	8001c8a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e009      	b.n	8001c9e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	401a      	ands	r2, r3
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d0ed      	beq.n	8001c78 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	fffff9ff 	.word	0xfffff9ff
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	000f4240 	.word	0x000f4240

08001cb8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <LL_RCC_GetAPB1Prescaler+0x14>)
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	23e0      	movs	r3, #224	; 0xe0
 8001cc2:	01db      	lsls	r3, r3, #7
 8001cc4:	4013      	ands	r3, r2
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e2f3      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d100      	bne.n	8001cee <HAL_RCC_OscConfig+0x1e>
 8001cec:	e07c      	b.n	8001de8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cee:	4bc3      	ldr	r3, [pc, #780]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2238      	movs	r2, #56	; 0x38
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf8:	4bc0      	ldr	r3, [pc, #768]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	4013      	ands	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	2b10      	cmp	r3, #16
 8001d06:	d102      	bne.n	8001d0e <HAL_RCC_OscConfig+0x3e>
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d002      	beq.n	8001d14 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d10b      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	4bb9      	ldr	r3, [pc, #740]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	029b      	lsls	r3, r3, #10
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d062      	beq.n	8001de6 <HAL_RCC_OscConfig+0x116>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d15e      	bne.n	8001de6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e2ce      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	025b      	lsls	r3, r3, #9
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d107      	bne.n	8001d48 <HAL_RCC_OscConfig+0x78>
 8001d38:	4bb0      	ldr	r3, [pc, #704]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4baf      	ldr	r3, [pc, #700]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001d3e:	2180      	movs	r1, #128	; 0x80
 8001d40:	0249      	lsls	r1, r1, #9
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e020      	b.n	8001d8a <HAL_RCC_OscConfig+0xba>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	23a0      	movs	r3, #160	; 0xa0
 8001d4e:	02db      	lsls	r3, r3, #11
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d10e      	bne.n	8001d72 <HAL_RCC_OscConfig+0xa2>
 8001d54:	4ba9      	ldr	r3, [pc, #676]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4ba8      	ldr	r3, [pc, #672]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001d5a:	2180      	movs	r1, #128	; 0x80
 8001d5c:	02c9      	lsls	r1, r1, #11
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	4ba6      	ldr	r3, [pc, #664]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4ba5      	ldr	r3, [pc, #660]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	0249      	lsls	r1, r1, #9
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e00b      	b.n	8001d8a <HAL_RCC_OscConfig+0xba>
 8001d72:	4ba2      	ldr	r3, [pc, #648]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4ba1      	ldr	r3, [pc, #644]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001d78:	49a1      	ldr	r1, [pc, #644]	; (8002000 <HAL_RCC_OscConfig+0x330>)
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	4b9f      	ldr	r3, [pc, #636]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b9e      	ldr	r3, [pc, #632]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001d84:	499f      	ldr	r1, [pc, #636]	; (8002004 <HAL_RCC_OscConfig+0x334>)
 8001d86:	400a      	ands	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d014      	beq.n	8001dbc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7ff f86f 	bl	8000e74 <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff f86a 	bl	8000e74 <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e28d      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dae:	4b93      	ldr	r3, [pc, #588]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	029b      	lsls	r3, r3, #10
 8001db6:	4013      	ands	r3, r2
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0xcc>
 8001dba:	e015      	b.n	8001de8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f85a 	bl	8000e74 <HAL_GetTick>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc6:	f7ff f855 	bl	8000e74 <HAL_GetTick>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b64      	cmp	r3, #100	; 0x64
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e278      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dd8:	4b88      	ldr	r3, [pc, #544]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	029b      	lsls	r3, r3, #10
 8001de0:	4013      	ands	r3, r2
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_RCC_OscConfig+0xf6>
 8001de4:	e000      	b.n	8001de8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2202      	movs	r2, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	d100      	bne.n	8001df4 <HAL_RCC_OscConfig+0x124>
 8001df2:	e099      	b.n	8001f28 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df4:	4b81      	ldr	r3, [pc, #516]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2238      	movs	r2, #56	; 0x38
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dfe:	4b7f      	ldr	r3, [pc, #508]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2203      	movs	r2, #3
 8001e04:	4013      	ands	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	d102      	bne.n	8001e14 <HAL_RCC_OscConfig+0x144>
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d002      	beq.n	8001e1a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d135      	bne.n	8001e86 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e1a:	4b78      	ldr	r3, [pc, #480]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4013      	ands	r3, r2
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x162>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e24b      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e32:	4b72      	ldr	r3, [pc, #456]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4a74      	ldr	r2, [pc, #464]	; (8002008 <HAL_RCC_OscConfig+0x338>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	021a      	lsls	r2, r3, #8
 8001e42:	4b6e      	ldr	r3, [pc, #440]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001e44:	430a      	orrs	r2, r1
 8001e46:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d112      	bne.n	8001e74 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e4e:	4b6b      	ldr	r3, [pc, #428]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a6e      	ldr	r2, [pc, #440]	; (800200c <HAL_RCC_OscConfig+0x33c>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	0019      	movs	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e62:	4b66      	ldr	r3, [pc, #408]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	0adb      	lsrs	r3, r3, #11
 8001e68:	2207      	movs	r2, #7
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	4a68      	ldr	r2, [pc, #416]	; (8002010 <HAL_RCC_OscConfig+0x340>)
 8001e6e:	40da      	lsrs	r2, r3
 8001e70:	4b68      	ldr	r3, [pc, #416]	; (8002014 <HAL_RCC_OscConfig+0x344>)
 8001e72:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e74:	4b68      	ldr	r3, [pc, #416]	; (8002018 <HAL_RCC_OscConfig+0x348>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f7fe ff9f 	bl	8000dbc <HAL_InitTick>
 8001e7e:	1e03      	subs	r3, r0, #0
 8001e80:	d051      	beq.n	8001f26 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e221      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d030      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e8e:	4b5b      	ldr	r3, [pc, #364]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a5e      	ldr	r2, [pc, #376]	; (800200c <HAL_RCC_OscConfig+0x33c>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	4b57      	ldr	r3, [pc, #348]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ea2:	4b56      	ldr	r3, [pc, #344]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b55      	ldr	r3, [pc, #340]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001ea8:	2180      	movs	r1, #128	; 0x80
 8001eaa:	0049      	lsls	r1, r1, #1
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7fe ffe0 	bl	8000e74 <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eba:	f7fe ffdb 	bl	8000e74 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1fe      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ecc:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b48      	ldr	r3, [pc, #288]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a4a      	ldr	r2, [pc, #296]	; (8002008 <HAL_RCC_OscConfig+0x338>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	021a      	lsls	r2, r3, #8
 8001ee8:	4b44      	ldr	r3, [pc, #272]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	e01b      	b.n	8001f28 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ef0:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001ef6:	4949      	ldr	r1, [pc, #292]	; (800201c <HAL_RCC_OscConfig+0x34c>)
 8001ef8:	400a      	ands	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7fe ffba 	bl	8000e74 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f06:	f7fe ffb5 	bl	8000e74 <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e1d8      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f18:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4013      	ands	r3, r2
 8001f22:	d1f0      	bne.n	8001f06 <HAL_RCC_OscConfig+0x236>
 8001f24:	e000      	b.n	8001f28 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d047      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f32:	4b32      	ldr	r3, [pc, #200]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2238      	movs	r2, #56	; 0x38
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b18      	cmp	r3, #24
 8001f3c:	d10a      	bne.n	8001f54 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f3e:	4b2f      	ldr	r3, [pc, #188]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f42:	2202      	movs	r2, #2
 8001f44:	4013      	ands	r3, r2
 8001f46:	d03c      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x2f2>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d138      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e1ba      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d019      	beq.n	8001f90 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f60:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001f62:	2101      	movs	r1, #1
 8001f64:	430a      	orrs	r2, r1
 8001f66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7fe ff84 	bl	8000e74 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f72:	f7fe ff7f 	bl	8000e74 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e1a2      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f88:	2202      	movs	r2, #2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d0f1      	beq.n	8001f72 <HAL_RCC_OscConfig+0x2a2>
 8001f8e:	e018      	b.n	8001fc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001f92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001f96:	2101      	movs	r1, #1
 8001f98:	438a      	bics	r2, r1
 8001f9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe ff6a 	bl	8000e74 <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa6:	f7fe ff65 	bl	8000e74 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e188      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d1f1      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d100      	bne.n	8001fce <HAL_RCC_OscConfig+0x2fe>
 8001fcc:	e0c6      	b.n	800215c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fce:	231f      	movs	r3, #31
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2238      	movs	r2, #56	; 0x38
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b20      	cmp	r3, #32
 8001fe0:	d11e      	bne.n	8002020 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_RCC_OscConfig+0x32c>)
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d100      	bne.n	8001fee <HAL_RCC_OscConfig+0x31e>
 8001fec:	e0b6      	b.n	800215c <HAL_RCC_OscConfig+0x48c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d000      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x328>
 8001ff6:	e0b1      	b.n	800215c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e166      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
 8001ffc:	40021000 	.word	0x40021000
 8002000:	fffeffff 	.word	0xfffeffff
 8002004:	fffbffff 	.word	0xfffbffff
 8002008:	ffff80ff 	.word	0xffff80ff
 800200c:	ffffc7ff 	.word	0xffffc7ff
 8002010:	00f42400 	.word	0x00f42400
 8002014:	20000000 	.word	0x20000000
 8002018:	20000004 	.word	0x20000004
 800201c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002020:	4bac      	ldr	r3, [pc, #688]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 8002022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	055b      	lsls	r3, r3, #21
 8002028:	4013      	ands	r3, r2
 800202a:	d101      	bne.n	8002030 <HAL_RCC_OscConfig+0x360>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x362>
 8002030:	2300      	movs	r3, #0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d011      	beq.n	800205a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4ba7      	ldr	r3, [pc, #668]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 8002038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800203a:	4ba6      	ldr	r3, [pc, #664]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	0549      	lsls	r1, r1, #21
 8002040:	430a      	orrs	r2, r1
 8002042:	63da      	str	r2, [r3, #60]	; 0x3c
 8002044:	4ba3      	ldr	r3, [pc, #652]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 8002046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	055b      	lsls	r3, r3, #21
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002052:	231f      	movs	r3, #31
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205a:	4b9f      	ldr	r3, [pc, #636]	; (80022d8 <HAL_RCC_OscConfig+0x608>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4013      	ands	r3, r2
 8002064:	d11a      	bne.n	800209c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002066:	4b9c      	ldr	r3, [pc, #624]	; (80022d8 <HAL_RCC_OscConfig+0x608>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b9b      	ldr	r3, [pc, #620]	; (80022d8 <HAL_RCC_OscConfig+0x608>)
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	0049      	lsls	r1, r1, #1
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002074:	f7fe fefe 	bl	8000e74 <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207e:	f7fe fef9 	bl	8000e74 <HAL_GetTick>
 8002082:	0002      	movs	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e11c      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002090:	4b91      	ldr	r3, [pc, #580]	; (80022d8 <HAL_RCC_OscConfig+0x608>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4013      	ands	r3, r2
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x3e2>
 80020a4:	4b8b      	ldr	r3, [pc, #556]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80020a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020a8:	4b8a      	ldr	r3, [pc, #552]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80020aa:	2101      	movs	r1, #1
 80020ac:	430a      	orrs	r2, r1
 80020ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80020b0:	e01c      	b.n	80020ec <HAL_RCC_OscConfig+0x41c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x404>
 80020ba:	4b86      	ldr	r3, [pc, #536]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80020bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020be:	4b85      	ldr	r3, [pc, #532]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80020c0:	2104      	movs	r1, #4
 80020c2:	430a      	orrs	r2, r1
 80020c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80020c6:	4b83      	ldr	r3, [pc, #524]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80020c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020ca:	4b82      	ldr	r3, [pc, #520]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80020cc:	2101      	movs	r1, #1
 80020ce:	430a      	orrs	r2, r1
 80020d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0x41c>
 80020d4:	4b7f      	ldr	r3, [pc, #508]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80020d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020d8:	4b7e      	ldr	r3, [pc, #504]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80020da:	2101      	movs	r1, #1
 80020dc:	438a      	bics	r2, r1
 80020de:	65da      	str	r2, [r3, #92]	; 0x5c
 80020e0:	4b7c      	ldr	r3, [pc, #496]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80020e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020e4:	4b7b      	ldr	r3, [pc, #492]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80020e6:	2104      	movs	r1, #4
 80020e8:	438a      	bics	r2, r1
 80020ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d014      	beq.n	800211e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7fe febe 	bl	8000e74 <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fc:	e009      	b.n	8002112 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7fe feb9 	bl	8000e74 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	4a74      	ldr	r2, [pc, #464]	; (80022dc <HAL_RCC_OscConfig+0x60c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0db      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002112:	4b70      	ldr	r3, [pc, #448]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2202      	movs	r2, #2
 8002118:	4013      	ands	r3, r2
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x42e>
 800211c:	e013      	b.n	8002146 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7fe fea9 	bl	8000e74 <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002126:	e009      	b.n	800213c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7fe fea4 	bl	8000e74 <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	4a6a      	ldr	r2, [pc, #424]	; (80022dc <HAL_RCC_OscConfig+0x60c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0c6      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800213c:	4b65      	ldr	r3, [pc, #404]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	2202      	movs	r2, #2
 8002142:	4013      	ands	r3, r2
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002146:	231f      	movs	r3, #31
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002150:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 8002152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002154:	4b5f      	ldr	r3, [pc, #380]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 8002156:	4962      	ldr	r1, [pc, #392]	; (80022e0 <HAL_RCC_OscConfig+0x610>)
 8002158:	400a      	ands	r2, r1
 800215a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d100      	bne.n	8002166 <HAL_RCC_OscConfig+0x496>
 8002164:	e0b0      	b.n	80022c8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002166:	4b5b      	ldr	r3, [pc, #364]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2238      	movs	r2, #56	; 0x38
 800216c:	4013      	ands	r3, r2
 800216e:	2b10      	cmp	r3, #16
 8002170:	d100      	bne.n	8002174 <HAL_RCC_OscConfig+0x4a4>
 8002172:	e078      	b.n	8002266 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d153      	bne.n	8002224 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217c:	4b55      	ldr	r3, [pc, #340]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b54      	ldr	r3, [pc, #336]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 8002182:	4958      	ldr	r1, [pc, #352]	; (80022e4 <HAL_RCC_OscConfig+0x614>)
 8002184:	400a      	ands	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe fe74 	bl	8000e74 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7fe fe6f 	bl	8000e74 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e092      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a4:	4b4b      	ldr	r3, [pc, #300]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	049b      	lsls	r3, r3, #18
 80021ac:	4013      	ands	r3, r2
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b0:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a4c      	ldr	r2, [pc, #304]	; (80022e8 <HAL_RCC_OscConfig+0x618>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	431a      	orrs	r2, r3
 80021d8:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021de:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b3c      	ldr	r3, [pc, #240]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	0449      	lsls	r1, r1, #17
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 80021f2:	2180      	movs	r1, #128	; 0x80
 80021f4:	0549      	lsls	r1, r1, #21
 80021f6:	430a      	orrs	r2, r1
 80021f8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7fe fe3b 	bl	8000e74 <HAL_GetTick>
 80021fe:	0003      	movs	r3, r0
 8002200:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002204:	f7fe fe36 	bl	8000e74 <HAL_GetTick>
 8002208:	0002      	movs	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e059      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002216:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	049b      	lsls	r3, r3, #18
 800221e:	4013      	ands	r3, r2
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x534>
 8002222:	e051      	b.n	80022c8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002224:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 800222a:	492e      	ldr	r1, [pc, #184]	; (80022e4 <HAL_RCC_OscConfig+0x614>)
 800222c:	400a      	ands	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fe20 	bl	8000e74 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223a:	f7fe fe1b 	bl	8000e74 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e03e      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	049b      	lsls	r3, r3, #18
 8002254:	4013      	ands	r3, r2
 8002256:	d1f0      	bne.n	800223a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002258:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 800225e:	4923      	ldr	r1, [pc, #140]	; (80022ec <HAL_RCC_OscConfig+0x61c>)
 8002260:	400a      	ands	r2, r1
 8002262:	60da      	str	r2, [r3, #12]
 8002264:	e030      	b.n	80022c8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e02b      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_RCC_OscConfig+0x604>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2203      	movs	r2, #3
 800227c:	401a      	ands	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	429a      	cmp	r2, r3
 8002284:	d11e      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2270      	movs	r2, #112	; 0x70
 800228a:	401a      	ands	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d117      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	23fe      	movs	r3, #254	; 0xfe
 8002298:	01db      	lsls	r3, r3, #7
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d10e      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	23f8      	movs	r3, #248	; 0xf8
 80022aa:	039b      	lsls	r3, r3, #14
 80022ac:	401a      	ands	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d106      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	0f5b      	lsrs	r3, r3, #29
 80022ba:	075a      	lsls	r2, r3, #29
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b008      	add	sp, #32
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40007000 	.word	0x40007000
 80022dc:	00001388 	.word	0x00001388
 80022e0:	efffffff 	.word	0xefffffff
 80022e4:	feffffff 	.word	0xfeffffff
 80022e8:	1fc1808c 	.word	0x1fc1808c
 80022ec:	effefffc 	.word	0xeffefffc

080022f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0e9      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b76      	ldr	r3, [pc, #472]	; (80024e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2207      	movs	r2, #7
 800230a:	4013      	ands	r3, r2
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d91e      	bls.n	8002350 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b73      	ldr	r3, [pc, #460]	; (80024e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2207      	movs	r2, #7
 8002318:	4393      	bics	r3, r2
 800231a:	0019      	movs	r1, r3
 800231c:	4b70      	ldr	r3, [pc, #448]	; (80024e0 <HAL_RCC_ClockConfig+0x1f0>)
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002324:	f7fe fda6 	bl	8000e74 <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800232c:	e009      	b.n	8002342 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232e:	f7fe fda1 	bl	8000e74 <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	4a6a      	ldr	r2, [pc, #424]	; (80024e4 <HAL_RCC_ClockConfig+0x1f4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e0ca      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002342:	4b67      	ldr	r3, [pc, #412]	; (80024e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2207      	movs	r2, #7
 8002348:	4013      	ands	r3, r2
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d1ee      	bne.n	800232e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2202      	movs	r2, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d015      	beq.n	8002386 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2204      	movs	r2, #4
 8002360:	4013      	ands	r3, r2
 8002362:	d006      	beq.n	8002372 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002364:	4b60      	ldr	r3, [pc, #384]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	4b5f      	ldr	r3, [pc, #380]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 800236a:	21e0      	movs	r1, #224	; 0xe0
 800236c:	01c9      	lsls	r1, r1, #7
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002372:	4b5d      	ldr	r3, [pc, #372]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	4a5d      	ldr	r2, [pc, #372]	; (80024ec <HAL_RCC_ClockConfig+0x1fc>)
 8002378:	4013      	ands	r3, r2
 800237a:	0019      	movs	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002382:	430a      	orrs	r2, r1
 8002384:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	4013      	ands	r3, r2
 800238e:	d057      	beq.n	8002440 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002398:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	029b      	lsls	r3, r3, #10
 80023a0:	4013      	ands	r3, r2
 80023a2:	d12b      	bne.n	80023fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e097      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b0:	4b4d      	ldr	r3, [pc, #308]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	049b      	lsls	r3, r3, #18
 80023b8:	4013      	ands	r3, r2
 80023ba:	d11f      	bne.n	80023fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e08b      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c8:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4013      	ands	r3, r2
 80023d2:	d113      	bne.n	80023fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e07f      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d106      	bne.n	80023ee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e0:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 80023e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e4:	2202      	movs	r2, #2
 80023e6:	4013      	ands	r3, r2
 80023e8:	d108      	bne.n	80023fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e074      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ee:	4b3e      	ldr	r3, [pc, #248]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	2202      	movs	r2, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e06d      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023fc:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2207      	movs	r2, #7
 8002402:	4393      	bics	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4b37      	ldr	r3, [pc, #220]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 800240c:	430a      	orrs	r2, r1
 800240e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002410:	f7fe fd30 	bl	8000e74 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002418:	e009      	b.n	800242e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241a:	f7fe fd2b 	bl	8000e74 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	4a2f      	ldr	r2, [pc, #188]	; (80024e4 <HAL_RCC_ClockConfig+0x1f4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e054      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2238      	movs	r2, #56	; 0x38
 8002434:	401a      	ands	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	429a      	cmp	r2, r3
 800243e:	d1ec      	bne.n	800241a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2207      	movs	r2, #7
 8002446:	4013      	ands	r3, r2
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d21e      	bcs.n	800248c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2207      	movs	r2, #7
 8002454:	4393      	bics	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <HAL_RCC_ClockConfig+0x1f0>)
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002460:	f7fe fd08 	bl	8000e74 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002468:	e009      	b.n	800247e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246a:	f7fe fd03 	bl	8000e74 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCC_ClockConfig+0x1f4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e02c      	b.n	80024d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2207      	movs	r2, #7
 8002484:	4013      	ands	r3, r2
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d1ee      	bne.n	800246a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2204      	movs	r2, #4
 8002492:	4013      	ands	r3, r2
 8002494:	d009      	beq.n	80024aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4a15      	ldr	r2, [pc, #84]	; (80024f0 <HAL_RCC_ClockConfig+0x200>)
 800249c:	4013      	ands	r3, r2
 800249e:	0019      	movs	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 80024a6:	430a      	orrs	r2, r1
 80024a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024aa:	f000 f829 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024ae:	0001      	movs	r1, r0
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_RCC_ClockConfig+0x1f8>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	0a1b      	lsrs	r3, r3, #8
 80024b6:	220f      	movs	r2, #15
 80024b8:	401a      	ands	r2, r3
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_RCC_ClockConfig+0x204>)
 80024bc:	0092      	lsls	r2, r2, #2
 80024be:	58d3      	ldr	r3, [r2, r3]
 80024c0:	221f      	movs	r2, #31
 80024c2:	4013      	ands	r3, r2
 80024c4:	000a      	movs	r2, r1
 80024c6:	40da      	lsrs	r2, r3
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_ClockConfig+0x208>)
 80024ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_ClockConfig+0x20c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7fe fc73 	bl	8000dbc <HAL_InitTick>
 80024d6:	0003      	movs	r3, r0
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40022000 	.word	0x40022000
 80024e4:	00001388 	.word	0x00001388
 80024e8:	40021000 	.word	0x40021000
 80024ec:	fffff0ff 	.word	0xfffff0ff
 80024f0:	ffff8fff 	.word	0xffff8fff
 80024f4:	08004e9c 	.word	0x08004e9c
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002506:	4b3c      	ldr	r3, [pc, #240]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2238      	movs	r2, #56	; 0x38
 800250c:	4013      	ands	r3, r2
 800250e:	d10f      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002510:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0adb      	lsrs	r3, r3, #11
 8002516:	2207      	movs	r2, #7
 8002518:	4013      	ands	r3, r2
 800251a:	2201      	movs	r2, #1
 800251c:	409a      	lsls	r2, r3
 800251e:	0013      	movs	r3, r2
 8002520:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002522:	6839      	ldr	r1, [r7, #0]
 8002524:	4835      	ldr	r0, [pc, #212]	; (80025fc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002526:	f7fd fdeb 	bl	8000100 <__udivsi3>
 800252a:	0003      	movs	r3, r0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	e05d      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002530:	4b31      	ldr	r3, [pc, #196]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2238      	movs	r2, #56	; 0x38
 8002536:	4013      	ands	r3, r2
 8002538:	2b08      	cmp	r3, #8
 800253a:	d102      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800253c:	4b30      	ldr	r3, [pc, #192]	; (8002600 <HAL_RCC_GetSysClockFreq+0x100>)
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	e054      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002542:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2238      	movs	r2, #56	; 0x38
 8002548:	4013      	ands	r3, r2
 800254a:	2b10      	cmp	r3, #16
 800254c:	d138      	bne.n	80025c0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800254e:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2203      	movs	r2, #3
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002558:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	2207      	movs	r2, #7
 8002560:	4013      	ands	r3, r2
 8002562:	3301      	adds	r3, #1
 8002564:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d10d      	bne.n	8002588 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	4824      	ldr	r0, [pc, #144]	; (8002600 <HAL_RCC_GetSysClockFreq+0x100>)
 8002570:	f7fd fdc6 	bl	8000100 <__udivsi3>
 8002574:	0003      	movs	r3, r0
 8002576:	0019      	movs	r1, r3
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	227f      	movs	r2, #127	; 0x7f
 8002580:	4013      	ands	r3, r2
 8002582:	434b      	muls	r3, r1
 8002584:	617b      	str	r3, [r7, #20]
        break;
 8002586:	e00d      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	481c      	ldr	r0, [pc, #112]	; (80025fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800258c:	f7fd fdb8 	bl	8000100 <__udivsi3>
 8002590:	0003      	movs	r3, r0
 8002592:	0019      	movs	r1, r3
 8002594:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	227f      	movs	r2, #127	; 0x7f
 800259c:	4013      	ands	r3, r2
 800259e:	434b      	muls	r3, r1
 80025a0:	617b      	str	r3, [r7, #20]
        break;
 80025a2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80025a4:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0f5b      	lsrs	r3, r3, #29
 80025aa:	2207      	movs	r2, #7
 80025ac:	4013      	ands	r3, r2
 80025ae:	3301      	adds	r3, #1
 80025b0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	6978      	ldr	r0, [r7, #20]
 80025b6:	f7fd fda3 	bl	8000100 <__udivsi3>
 80025ba:	0003      	movs	r3, r0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	e015      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2238      	movs	r2, #56	; 0x38
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d103      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2238      	movs	r2, #56	; 0x38
 80025da:	4013      	ands	r3, r2
 80025dc:	2b18      	cmp	r3, #24
 80025de:	d103      	bne.n	80025e8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80025e0:	23fa      	movs	r3, #250	; 0xfa
 80025e2:	01db      	lsls	r3, r3, #7
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	e001      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025ec:	693b      	ldr	r3, [r7, #16]
}
 80025ee:	0018      	movs	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b006      	add	sp, #24
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	40021000 	.word	0x40021000
 80025fc:	00f42400 	.word	0x00f42400
 8002600:	007a1200 	.word	0x007a1200

08002604 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002608:	4b02      	ldr	r3, [pc, #8]	; (8002614 <HAL_RCC_GetHCLKFreq+0x10>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	20000000 	.word	0x20000000

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002618:	b5b0      	push	{r4, r5, r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800261c:	f7ff fff2 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002620:	0004      	movs	r4, r0
 8002622:	f7ff fb49 	bl	8001cb8 <LL_RCC_GetAPB1Prescaler>
 8002626:	0003      	movs	r3, r0
 8002628:	0b1a      	lsrs	r2, r3, #12
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800262c:	0092      	lsls	r2, r2, #2
 800262e:	58d3      	ldr	r3, [r2, r3]
 8002630:	221f      	movs	r2, #31
 8002632:	4013      	ands	r3, r2
 8002634:	40dc      	lsrs	r4, r3
 8002636:	0023      	movs	r3, r4
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	bdb0      	pop	{r4, r5, r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	08004edc 	.word	0x08004edc

08002644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800264c:	2313      	movs	r3, #19
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002654:	2312      	movs	r3, #18
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	4013      	ands	r3, r2
 8002666:	d100      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002668:	e0a3      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266a:	2011      	movs	r0, #17
 800266c:	183b      	adds	r3, r7, r0
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002672:	4b7f      	ldr	r3, [pc, #508]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	055b      	lsls	r3, r3, #21
 800267a:	4013      	ands	r3, r2
 800267c:	d110      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	4b7c      	ldr	r3, [pc, #496]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002682:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	0549      	lsls	r1, r1, #21
 8002688:	430a      	orrs	r2, r1
 800268a:	63da      	str	r2, [r3, #60]	; 0x3c
 800268c:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800268e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	055b      	lsls	r3, r3, #21
 8002694:	4013      	ands	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269a:	183b      	adds	r3, r7, r0
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a0:	4b74      	ldr	r3, [pc, #464]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b73      	ldr	r3, [pc, #460]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026a6:	2180      	movs	r1, #128	; 0x80
 80026a8:	0049      	lsls	r1, r1, #1
 80026aa:	430a      	orrs	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026ae:	f7fe fbe1 	bl	8000e74 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026b6:	e00b      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b8:	f7fe fbdc 	bl	8000e74 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d904      	bls.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80026c6:	2313      	movs	r3, #19
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	2203      	movs	r2, #3
 80026cc:	701a      	strb	r2, [r3, #0]
        break;
 80026ce:	e005      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026d0:	4b68      	ldr	r3, [pc, #416]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	d0ed      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80026dc:	2313      	movs	r3, #19
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d154      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026e6:	4b62      	ldr	r3, [pc, #392]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026ea:	23c0      	movs	r3, #192	; 0xc0
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d019      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d014      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002702:	4b5b      	ldr	r3, [pc, #364]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	4a5c      	ldr	r2, [pc, #368]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002708:	4013      	ands	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800270c:	4b58      	ldr	r3, [pc, #352]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800270e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002710:	4b57      	ldr	r3, [pc, #348]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002712:	2180      	movs	r1, #128	; 0x80
 8002714:	0249      	lsls	r1, r1, #9
 8002716:	430a      	orrs	r2, r1
 8002718:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800271a:	4b55      	ldr	r3, [pc, #340]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800271c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800271e:	4b54      	ldr	r3, [pc, #336]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002720:	4956      	ldr	r1, [pc, #344]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002722:	400a      	ands	r2, r1
 8002724:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002726:	4b52      	ldr	r3, [pc, #328]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2201      	movs	r2, #1
 8002730:	4013      	ands	r3, r2
 8002732:	d016      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7fe fb9e 	bl	8000e74 <HAL_GetTick>
 8002738:	0003      	movs	r3, r0
 800273a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273c:	e00c      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe fb99 	bl	8000e74 <HAL_GetTick>
 8002742:	0002      	movs	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	4a4d      	ldr	r2, [pc, #308]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d904      	bls.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800274e:	2313      	movs	r3, #19
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	2203      	movs	r2, #3
 8002754:	701a      	strb	r2, [r3, #0]
            break;
 8002756:	e004      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002758:	4b45      	ldr	r3, [pc, #276]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275c:	2202      	movs	r2, #2
 800275e:	4013      	ands	r3, r2
 8002760:	d0ed      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002762:	2313      	movs	r3, #19
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800276c:	4b40      	ldr	r3, [pc, #256]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	4a41      	ldr	r2, [pc, #260]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002772:	4013      	ands	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800277c:	430a      	orrs	r2, r1
 800277e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002780:	e00c      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002782:	2312      	movs	r3, #18
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2213      	movs	r2, #19
 8002788:	18ba      	adds	r2, r7, r2
 800278a:	7812      	ldrb	r2, [r2, #0]
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	e005      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002790:	2312      	movs	r3, #18
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	2213      	movs	r2, #19
 8002796:	18ba      	adds	r2, r7, r2
 8002798:	7812      	ldrb	r2, [r2, #0]
 800279a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800279c:	2311      	movs	r3, #17
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a6:	4b32      	ldr	r3, [pc, #200]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027aa:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027ac:	4935      	ldr	r1, [pc, #212]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027ae:	400a      	ands	r2, r1
 80027b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2201      	movs	r2, #1
 80027b8:	4013      	ands	r3, r2
 80027ba:	d009      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027bc:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c0:	2203      	movs	r2, #3
 80027c2:	4393      	bics	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	4b29      	ldr	r3, [pc, #164]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027cc:	430a      	orrs	r2, r1
 80027ce:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2220      	movs	r2, #32
 80027d6:	4013      	ands	r3, r2
 80027d8:	d009      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027da:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027de:	4a2a      	ldr	r2, [pc, #168]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027ea:	430a      	orrs	r2, r1
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	01db      	lsls	r3, r3, #7
 80027f6:	4013      	ands	r3, r2
 80027f8:	d015      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	0899      	lsrs	r1, r3, #2
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002808:	430a      	orrs	r2, r1
 800280a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	05db      	lsls	r3, r3, #23
 8002814:	429a      	cmp	r2, r3
 8002816:	d106      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002818:	4b15      	ldr	r3, [pc, #84]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	0249      	lsls	r1, r1, #9
 8002822:	430a      	orrs	r2, r1
 8002824:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4013      	ands	r3, r2
 8002830:	d016      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002836:	4a15      	ldr	r2, [pc, #84]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002838:	4013      	ands	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002842:	430a      	orrs	r2, r1
 8002844:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	01db      	lsls	r3, r3, #7
 800284e:	429a      	cmp	r2, r3
 8002850:	d106      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002852:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	0249      	lsls	r1, r1, #9
 800285c:	430a      	orrs	r2, r1
 800285e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002860:	2312      	movs	r3, #18
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	781b      	ldrb	r3, [r3, #0]
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b006      	add	sp, #24
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
 8002878:	fffffcff 	.word	0xfffffcff
 800287c:	fffeffff 	.word	0xfffeffff
 8002880:	00001388 	.word	0x00001388
 8002884:	efffffff 	.word	0xefffffff
 8002888:	ffffcfff 	.word	0xffffcfff
 800288c:	ffff3fff 	.word	0xffff3fff

08002890 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0a8      	b.n	80029f4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	2382      	movs	r3, #130	; 0x82
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d009      	beq.n	80028ca <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	61da      	str	r2, [r3, #28]
 80028bc:	e005      	b.n	80028ca <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	225d      	movs	r2, #93	; 0x5d
 80028d4:	5c9b      	ldrb	r3, [r3, r2]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	225c      	movs	r2, #92	; 0x5c
 80028e0:	2100      	movs	r1, #0
 80028e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7fd ffac 	bl	8000844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	225d      	movs	r2, #93	; 0x5d
 80028f0:	2102      	movs	r1, #2
 80028f2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2140      	movs	r1, #64	; 0x40
 8002900:	438a      	bics	r2, r1
 8002902:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	23e0      	movs	r3, #224	; 0xe0
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	429a      	cmp	r2, r3
 800290e:	d902      	bls.n	8002916 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e002      	b.n	800291c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	015b      	lsls	r3, r3, #5
 800291a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	23f0      	movs	r3, #240	; 0xf0
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	429a      	cmp	r2, r3
 8002926:	d008      	beq.n	800293a <HAL_SPI_Init+0xaa>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	23e0      	movs	r3, #224	; 0xe0
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	429a      	cmp	r2, r3
 8002932:	d002      	beq.n	800293a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	2382      	movs	r3, #130	; 0x82
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	401a      	ands	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6899      	ldr	r1, [r3, #8]
 8002948:	2384      	movs	r3, #132	; 0x84
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	400b      	ands	r3, r1
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2102      	movs	r1, #2
 8002956:	400b      	ands	r3, r1
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	2101      	movs	r1, #1
 8002960:	400b      	ands	r3, r1
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6999      	ldr	r1, [r3, #24]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	400b      	ands	r3, r1
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	2138      	movs	r1, #56	; 0x38
 8002976:	400b      	ands	r3, r1
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	2180      	movs	r1, #128	; 0x80
 8002980:	400b      	ands	r3, r1
 8002982:	431a      	orrs	r2, r3
 8002984:	0011      	movs	r1, r2
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	019b      	lsls	r3, r3, #6
 800298e:	401a      	ands	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	2204      	movs	r2, #4
 80029a0:	401a      	ands	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	2110      	movs	r1, #16
 80029a8:	400b      	ands	r3, r1
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b0:	2108      	movs	r1, #8
 80029b2:	400b      	ands	r3, r1
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68d9      	ldr	r1, [r3, #12]
 80029ba:	23f0      	movs	r3, #240	; 0xf0
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	400b      	ands	r3, r1
 80029c0:	431a      	orrs	r2, r3
 80029c2:	0011      	movs	r1, r2
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	015b      	lsls	r3, r3, #5
 80029ca:	401a      	ands	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4907      	ldr	r1, [pc, #28]	; (80029fc <HAL_SPI_Init+0x16c>)
 80029e0:	400a      	ands	r2, r1
 80029e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	225d      	movs	r2, #93	; 0x5d
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b004      	add	sp, #16
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	fffff7ff 	.word	0xfffff7ff

08002a00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	1dbb      	adds	r3, r7, #6
 8002a0e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a10:	231f      	movs	r3, #31
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	225c      	movs	r2, #92	; 0x5c
 8002a1c:	5c9b      	ldrb	r3, [r3, r2]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_SPI_Transmit+0x26>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e147      	b.n	8002cb6 <HAL_SPI_Transmit+0x2b6>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	225c      	movs	r2, #92	; 0x5c
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a2e:	f7fe fa21 	bl	8000e74 <HAL_GetTick>
 8002a32:	0003      	movs	r3, r0
 8002a34:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002a36:	2316      	movs	r3, #22
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	1dba      	adds	r2, r7, #6
 8002a3c:	8812      	ldrh	r2, [r2, #0]
 8002a3e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	225d      	movs	r2, #93	; 0x5d
 8002a44:	5c9b      	ldrb	r3, [r3, r2]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d004      	beq.n	8002a56 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002a4c:	231f      	movs	r3, #31
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	2202      	movs	r2, #2
 8002a52:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a54:	e128      	b.n	8002ca8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_SPI_Transmit+0x64>
 8002a5c:	1dbb      	adds	r3, r7, #6
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d104      	bne.n	8002a6e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002a64:	231f      	movs	r3, #31
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a6c:	e11c      	b.n	8002ca8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	225d      	movs	r2, #93	; 0x5d
 8002a72:	2103      	movs	r1, #3
 8002a74:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1dba      	adds	r2, r7, #6
 8002a86:	8812      	ldrh	r2, [r2, #0]
 8002a88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1dba      	adds	r2, r7, #6
 8002a8e:	8812      	ldrh	r2, [r2, #0]
 8002a90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2244      	movs	r2, #68	; 0x44
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2246      	movs	r2, #70	; 0x46
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d110      	bne.n	8002ae2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2140      	movs	r1, #64	; 0x40
 8002acc:	438a      	bics	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2180      	movs	r1, #128	; 0x80
 8002adc:	01c9      	lsls	r1, r1, #7
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2240      	movs	r2, #64	; 0x40
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d007      	beq.n	8002b00 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2140      	movs	r1, #64	; 0x40
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	23e0      	movs	r3, #224	; 0xe0
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d952      	bls.n	8002bb2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d004      	beq.n	8002b1e <HAL_SPI_Transmit+0x11e>
 8002b14:	2316      	movs	r3, #22
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d143      	bne.n	8002ba6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	881a      	ldrh	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	1c9a      	adds	r2, r3, #2
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b42:	e030      	b.n	8002ba6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d112      	bne.n	8002b78 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	881a      	ldrh	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	1c9a      	adds	r2, r3, #2
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b76:	e016      	b.n	8002ba6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b78:	f7fe f97c 	bl	8000e74 <HAL_GetTick>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d802      	bhi.n	8002b8e <HAL_SPI_Transmit+0x18e>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <HAL_SPI_Transmit+0x194>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d108      	bne.n	8002ba6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002b94:	231f      	movs	r3, #31
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	2203      	movs	r2, #3
 8002b9a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	225d      	movs	r2, #93	; 0x5d
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	5499      	strb	r1, [r3, r2]
          goto error;
 8002ba4:	e080      	b.n	8002ca8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1c9      	bne.n	8002b44 <HAL_SPI_Transmit+0x144>
 8002bb0:	e053      	b.n	8002c5a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_SPI_Transmit+0x1c4>
 8002bba:	2316      	movs	r3, #22
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d145      	bne.n	8002c50 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	7812      	ldrb	r2, [r2, #0]
 8002bd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002bea:	e031      	b.n	8002c50 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d113      	bne.n	8002c22 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	330c      	adds	r3, #12
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c20:	e016      	b.n	8002c50 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c22:	f7fe f927 	bl	8000e74 <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d802      	bhi.n	8002c38 <HAL_SPI_Transmit+0x238>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	d102      	bne.n	8002c3e <HAL_SPI_Transmit+0x23e>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d108      	bne.n	8002c50 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002c3e:	231f      	movs	r3, #31
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2203      	movs	r2, #3
 8002c44:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	225d      	movs	r2, #93	; 0x5d
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]
          goto error;
 8002c4e:	e02b      	b.n	8002ca8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1c8      	bne.n	8002bec <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	6839      	ldr	r1, [r7, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 f95d 	bl	8002f20 <SPI_EndRxTxTransaction>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d004      	beq.n	8002ca0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002c96:	231f      	movs	r3, #31
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e003      	b.n	8002ca8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	225d      	movs	r2, #93	; 0x5d
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	225c      	movs	r2, #92	; 0x5c
 8002cac:	2100      	movs	r1, #0
 8002cae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002cb0:	231f      	movs	r3, #31
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	781b      	ldrb	r3, [r3, #0]
}
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b008      	add	sp, #32
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	1dfb      	adds	r3, r7, #7
 8002cce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cd0:	f7fe f8d0 	bl	8000e74 <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	18d3      	adds	r3, r2, r3
 8002cde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ce0:	f7fe f8c8 	bl	8000e74 <HAL_GetTick>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ce8:	4b3a      	ldr	r3, [pc, #232]	; (8002dd4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	015b      	lsls	r3, r3, #5
 8002cee:	0d1b      	lsrs	r3, r3, #20
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	4353      	muls	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cf6:	e058      	b.n	8002daa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	d055      	beq.n	8002daa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cfe:	f7fe f8b9 	bl	8000e74 <HAL_GetTick>
 8002d02:	0002      	movs	r2, r0
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d902      	bls.n	8002d14 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d142      	bne.n	8002d9a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	21e0      	movs	r1, #224	; 0xe0
 8002d20:	438a      	bics	r2, r1
 8002d22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	2382      	movs	r3, #130	; 0x82
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d113      	bne.n	8002d58 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d005      	beq.n	8002d48 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d107      	bne.n	8002d58 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2140      	movs	r1, #64	; 0x40
 8002d54:	438a      	bics	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	019b      	lsls	r3, r3, #6
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d110      	bne.n	8002d86 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	491a      	ldr	r1, [pc, #104]	; (8002dd8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	0189      	lsls	r1, r1, #6
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	225d      	movs	r2, #93	; 0x5d
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	225c      	movs	r2, #92	; 0x5c
 8002d92:	2100      	movs	r1, #0
 8002d94:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e017      	b.n	8002dca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	4013      	ands	r3, r2
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	425a      	negs	r2, r3
 8002dba:	4153      	adcs	r3, r2
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	001a      	movs	r2, r3
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d197      	bne.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b008      	add	sp, #32
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	ffffdfff 	.word	0xffffdfff

08002ddc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002dea:	2317      	movs	r3, #23
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002df2:	f7fe f83f 	bl	8000e74 <HAL_GetTick>
 8002df6:	0002      	movs	r2, r0
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	18d3      	adds	r3, r2, r3
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002e02:	f7fe f837 	bl	8000e74 <HAL_GetTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e12:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	0013      	movs	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	189b      	adds	r3, r3, r2
 8002e1c:	00da      	lsls	r2, r3, #3
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	0d1b      	lsrs	r3, r3, #20
 8002e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e24:	4353      	muls	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002e28:	e068      	b.n	8002efc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	23c0      	movs	r3, #192	; 0xc0
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d10a      	bne.n	8002e4a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d107      	bne.n	8002e4a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	2117      	movs	r1, #23
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002e46:	187b      	adds	r3, r7, r1
 8002e48:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	d055      	beq.n	8002efc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e50:	f7fe f810 	bl	8000e74 <HAL_GetTick>
 8002e54:	0002      	movs	r2, r0
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d902      	bls.n	8002e66 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d142      	bne.n	8002eec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	21e0      	movs	r1, #224	; 0xe0
 8002e72:	438a      	bics	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	2382      	movs	r3, #130	; 0x82
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d113      	bne.n	8002eaa <SPI_WaitFifoStateUntilTimeout+0xce>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d005      	beq.n	8002e9a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d107      	bne.n	8002eaa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2140      	movs	r1, #64	; 0x40
 8002ea6:	438a      	bics	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	019b      	lsls	r3, r3, #6
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d110      	bne.n	8002ed8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4916      	ldr	r1, [pc, #88]	; (8002f1c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	0189      	lsls	r1, r1, #6
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	225d      	movs	r2, #93	; 0x5d
 8002edc:	2101      	movs	r1, #1
 8002ede:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	225c      	movs	r2, #92	; 0x5c
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e010      	b.n	8002f0e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d18e      	bne.n	8002e2a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b00a      	add	sp, #40	; 0x28
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	ffffdfff 	.word	0xffffdfff

08002f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	23c0      	movs	r3, #192	; 0xc0
 8002f30:	0159      	lsls	r1, r3, #5
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	0013      	movs	r3, r2
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f7ff ff4e 	bl	8002ddc <SPI_WaitFifoStateUntilTimeout>
 8002f40:	1e03      	subs	r3, r0, #0
 8002f42:	d007      	beq.n	8002f54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f48:	2220      	movs	r2, #32
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e027      	b.n	8002fa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	0013      	movs	r3, r2
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2180      	movs	r1, #128	; 0x80
 8002f62:	f7ff fead 	bl	8002cc0 <SPI_WaitFlagStateUntilTimeout>
 8002f66:	1e03      	subs	r3, r0, #0
 8002f68:	d007      	beq.n	8002f7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6e:	2220      	movs	r2, #32
 8002f70:	431a      	orrs	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e014      	b.n	8002fa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	23c0      	movs	r3, #192	; 0xc0
 8002f7e:	00d9      	lsls	r1, r3, #3
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	0013      	movs	r3, r2
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f7ff ff27 	bl	8002ddc <SPI_WaitFifoStateUntilTimeout>
 8002f8e:	1e03      	subs	r3, r0, #0
 8002f90:	d007      	beq.n	8002fa2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f96:	2220      	movs	r2, #32
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e000      	b.n	8002fa4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b004      	add	sp, #16
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e04a      	b.n	8003054 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	223d      	movs	r2, #61	; 0x3d
 8002fc2:	5c9b      	ldrb	r3, [r3, r2]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d107      	bne.n	8002fda <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	223c      	movs	r2, #60	; 0x3c
 8002fce:	2100      	movs	r1, #0
 8002fd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7fd fd99 	bl	8000b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	223d      	movs	r2, #61	; 0x3d
 8002fde:	2102      	movs	r1, #2
 8002fe0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	0019      	movs	r1, r3
 8002fec:	0010      	movs	r0, r2
 8002fee:	f000 fa6d 	bl	80034cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2248      	movs	r2, #72	; 0x48
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	223e      	movs	r2, #62	; 0x3e
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	223f      	movs	r2, #63	; 0x3f
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2240      	movs	r2, #64	; 0x40
 800300e:	2101      	movs	r1, #1
 8003010:	5499      	strb	r1, [r3, r2]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2241      	movs	r2, #65	; 0x41
 8003016:	2101      	movs	r1, #1
 8003018:	5499      	strb	r1, [r3, r2]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2242      	movs	r2, #66	; 0x42
 800301e:	2101      	movs	r1, #1
 8003020:	5499      	strb	r1, [r3, r2]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2243      	movs	r2, #67	; 0x43
 8003026:	2101      	movs	r1, #1
 8003028:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2244      	movs	r2, #68	; 0x44
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2245      	movs	r2, #69	; 0x45
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2246      	movs	r2, #70	; 0x46
 800303e:	2101      	movs	r1, #1
 8003040:	5499      	strb	r1, [r3, r2]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2247      	movs	r2, #71	; 0x47
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	223d      	movs	r2, #61	; 0x3d
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	0018      	movs	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e04a      	b.n	8003104 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	223d      	movs	r2, #61	; 0x3d
 8003072:	5c9b      	ldrb	r3, [r3, r2]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d107      	bne.n	800308a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	223c      	movs	r2, #60	; 0x3c
 800307e:	2100      	movs	r1, #0
 8003080:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 f841 	bl	800310c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	223d      	movs	r2, #61	; 0x3d
 800308e:	2102      	movs	r1, #2
 8003090:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3304      	adds	r3, #4
 800309a:	0019      	movs	r1, r3
 800309c:	0010      	movs	r0, r2
 800309e:	f000 fa15 	bl	80034cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2248      	movs	r2, #72	; 0x48
 80030a6:	2101      	movs	r1, #1
 80030a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	223e      	movs	r2, #62	; 0x3e
 80030ae:	2101      	movs	r1, #1
 80030b0:	5499      	strb	r1, [r3, r2]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	223f      	movs	r2, #63	; 0x3f
 80030b6:	2101      	movs	r1, #1
 80030b8:	5499      	strb	r1, [r3, r2]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2240      	movs	r2, #64	; 0x40
 80030be:	2101      	movs	r1, #1
 80030c0:	5499      	strb	r1, [r3, r2]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2241      	movs	r2, #65	; 0x41
 80030c6:	2101      	movs	r1, #1
 80030c8:	5499      	strb	r1, [r3, r2]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2242      	movs	r2, #66	; 0x42
 80030ce:	2101      	movs	r1, #1
 80030d0:	5499      	strb	r1, [r3, r2]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2243      	movs	r2, #67	; 0x43
 80030d6:	2101      	movs	r1, #1
 80030d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2244      	movs	r2, #68	; 0x44
 80030de:	2101      	movs	r1, #1
 80030e0:	5499      	strb	r1, [r3, r2]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2245      	movs	r2, #69	; 0x45
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2246      	movs	r2, #70	; 0x46
 80030ee:	2101      	movs	r1, #1
 80030f0:	5499      	strb	r1, [r3, r2]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2247      	movs	r2, #71	; 0x47
 80030f6:	2101      	movs	r1, #1
 80030f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	223d      	movs	r2, #61	; 0x3d
 80030fe:	2101      	movs	r1, #1
 8003100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b002      	add	sp, #8
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	b002      	add	sp, #8
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d108      	bne.n	800313e <HAL_TIM_PWM_Start+0x22>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	223e      	movs	r2, #62	; 0x3e
 8003130:	5c9b      	ldrb	r3, [r3, r2]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	1e5a      	subs	r2, r3, #1
 8003138:	4193      	sbcs	r3, r2
 800313a:	b2db      	uxtb	r3, r3
 800313c:	e037      	b.n	80031ae <HAL_TIM_PWM_Start+0x92>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b04      	cmp	r3, #4
 8003142:	d108      	bne.n	8003156 <HAL_TIM_PWM_Start+0x3a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	223f      	movs	r2, #63	; 0x3f
 8003148:	5c9b      	ldrb	r3, [r3, r2]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	4193      	sbcs	r3, r2
 8003152:	b2db      	uxtb	r3, r3
 8003154:	e02b      	b.n	80031ae <HAL_TIM_PWM_Start+0x92>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b08      	cmp	r3, #8
 800315a:	d108      	bne.n	800316e <HAL_TIM_PWM_Start+0x52>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2240      	movs	r2, #64	; 0x40
 8003160:	5c9b      	ldrb	r3, [r3, r2]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	1e5a      	subs	r2, r3, #1
 8003168:	4193      	sbcs	r3, r2
 800316a:	b2db      	uxtb	r3, r3
 800316c:	e01f      	b.n	80031ae <HAL_TIM_PWM_Start+0x92>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b0c      	cmp	r3, #12
 8003172:	d108      	bne.n	8003186 <HAL_TIM_PWM_Start+0x6a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2241      	movs	r2, #65	; 0x41
 8003178:	5c9b      	ldrb	r3, [r3, r2]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	1e5a      	subs	r2, r3, #1
 8003180:	4193      	sbcs	r3, r2
 8003182:	b2db      	uxtb	r3, r3
 8003184:	e013      	b.n	80031ae <HAL_TIM_PWM_Start+0x92>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b10      	cmp	r3, #16
 800318a:	d108      	bne.n	800319e <HAL_TIM_PWM_Start+0x82>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2242      	movs	r2, #66	; 0x42
 8003190:	5c9b      	ldrb	r3, [r3, r2]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	1e5a      	subs	r2, r3, #1
 8003198:	4193      	sbcs	r3, r2
 800319a:	b2db      	uxtb	r3, r3
 800319c:	e007      	b.n	80031ae <HAL_TIM_PWM_Start+0x92>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2243      	movs	r2, #67	; 0x43
 80031a2:	5c9b      	ldrb	r3, [r3, r2]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	1e5a      	subs	r2, r3, #1
 80031aa:	4193      	sbcs	r3, r2
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e07b      	b.n	80032ae <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Start+0xaa>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	223e      	movs	r2, #62	; 0x3e
 80031c0:	2102      	movs	r1, #2
 80031c2:	5499      	strb	r1, [r3, r2]
 80031c4:	e023      	b.n	800320e <HAL_TIM_PWM_Start+0xf2>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0xba>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	223f      	movs	r2, #63	; 0x3f
 80031d0:	2102      	movs	r1, #2
 80031d2:	5499      	strb	r1, [r3, r2]
 80031d4:	e01b      	b.n	800320e <HAL_TIM_PWM_Start+0xf2>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_PWM_Start+0xca>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2240      	movs	r2, #64	; 0x40
 80031e0:	2102      	movs	r1, #2
 80031e2:	5499      	strb	r1, [r3, r2]
 80031e4:	e013      	b.n	800320e <HAL_TIM_PWM_Start+0xf2>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b0c      	cmp	r3, #12
 80031ea:	d104      	bne.n	80031f6 <HAL_TIM_PWM_Start+0xda>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2241      	movs	r2, #65	; 0x41
 80031f0:	2102      	movs	r1, #2
 80031f2:	5499      	strb	r1, [r3, r2]
 80031f4:	e00b      	b.n	800320e <HAL_TIM_PWM_Start+0xf2>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d104      	bne.n	8003206 <HAL_TIM_PWM_Start+0xea>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2242      	movs	r2, #66	; 0x42
 8003200:	2102      	movs	r1, #2
 8003202:	5499      	strb	r1, [r3, r2]
 8003204:	e003      	b.n	800320e <HAL_TIM_PWM_Start+0xf2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2243      	movs	r2, #67	; 0x43
 800320a:	2102      	movs	r1, #2
 800320c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6839      	ldr	r1, [r7, #0]
 8003214:	2201      	movs	r2, #1
 8003216:	0018      	movs	r0, r3
 8003218:	f000 fc6e 	bl	8003af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a25      	ldr	r2, [pc, #148]	; (80032b8 <HAL_TIM_PWM_Start+0x19c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d009      	beq.n	800323a <HAL_TIM_PWM_Start+0x11e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a24      	ldr	r2, [pc, #144]	; (80032bc <HAL_TIM_PWM_Start+0x1a0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d004      	beq.n	800323a <HAL_TIM_PWM_Start+0x11e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <HAL_TIM_PWM_Start+0x1a4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_TIM_PWM_Start+0x122>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_TIM_PWM_Start+0x124>
 800323e:	2300      	movs	r3, #0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	0209      	lsls	r1, r1, #8
 8003252:	430a      	orrs	r2, r1
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a17      	ldr	r2, [pc, #92]	; (80032b8 <HAL_TIM_PWM_Start+0x19c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d004      	beq.n	800326a <HAL_TIM_PWM_Start+0x14e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <HAL_TIM_PWM_Start+0x1a8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d116      	bne.n	8003298 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <HAL_TIM_PWM_Start+0x1ac>)
 8003272:	4013      	ands	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b06      	cmp	r3, #6
 800327a:	d016      	beq.n	80032aa <HAL_TIM_PWM_Start+0x18e>
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	025b      	lsls	r3, r3, #9
 8003282:	429a      	cmp	r2, r3
 8003284:	d011      	beq.n	80032aa <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2101      	movs	r1, #1
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003296:	e008      	b.n	80032aa <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2101      	movs	r1, #1
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	e000      	b.n	80032ac <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032aa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	0018      	movs	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b004      	add	sp, #16
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40014400 	.word	0x40014400
 80032c0:	40014800 	.word	0x40014800
 80032c4:	40000400 	.word	0x40000400
 80032c8:	00010007 	.word	0x00010007

080032cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d8:	2317      	movs	r3, #23
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	223c      	movs	r2, #60	; 0x3c
 80032e4:	5c9b      	ldrb	r3, [r3, r2]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_TIM_PWM_ConfigChannel+0x22>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e0e5      	b.n	80034ba <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	223c      	movs	r2, #60	; 0x3c
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b14      	cmp	r3, #20
 80032fa:	d900      	bls.n	80032fe <HAL_TIM_PWM_ConfigChannel+0x32>
 80032fc:	e0d1      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	009a      	lsls	r2, r3, #2
 8003302:	4b70      	ldr	r3, [pc, #448]	; (80034c4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003304:	18d3      	adds	r3, r2, r3
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	0011      	movs	r1, r2
 8003312:	0018      	movs	r0, r3
 8003314:	f000 f954 	bl	80035c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2108      	movs	r1, #8
 8003324:	430a      	orrs	r2, r1
 8003326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2104      	movs	r1, #4
 8003334:	438a      	bics	r2, r1
 8003336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6999      	ldr	r1, [r3, #24]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	619a      	str	r2, [r3, #24]
      break;
 800334a:	e0af      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	0011      	movs	r1, r2
 8003354:	0018      	movs	r0, r3
 8003356:	f000 f9b3 	bl	80036c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2180      	movs	r1, #128	; 0x80
 8003366:	0109      	lsls	r1, r1, #4
 8003368:	430a      	orrs	r2, r1
 800336a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4954      	ldr	r1, [pc, #336]	; (80034c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003378:	400a      	ands	r2, r1
 800337a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6999      	ldr	r1, [r3, #24]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	021a      	lsls	r2, r3, #8
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	619a      	str	r2, [r3, #24]
      break;
 8003390:	e08c      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	0011      	movs	r1, r2
 800339a:	0018      	movs	r0, r3
 800339c:	f000 fa0e 	bl	80037bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2108      	movs	r1, #8
 80033ac:	430a      	orrs	r2, r1
 80033ae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2104      	movs	r1, #4
 80033bc:	438a      	bics	r2, r1
 80033be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69d9      	ldr	r1, [r3, #28]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	61da      	str	r2, [r3, #28]
      break;
 80033d2:	e06b      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	0011      	movs	r1, r2
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 fa6f 	bl	80038c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2180      	movs	r1, #128	; 0x80
 80033ee:	0109      	lsls	r1, r1, #4
 80033f0:	430a      	orrs	r2, r1
 80033f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4932      	ldr	r1, [pc, #200]	; (80034c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003400:	400a      	ands	r2, r1
 8003402:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69d9      	ldr	r1, [r3, #28]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	021a      	lsls	r2, r3, #8
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	61da      	str	r2, [r3, #28]
      break;
 8003418:	e048      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	0011      	movs	r1, r2
 8003422:	0018      	movs	r0, r3
 8003424:	f000 fab0 	bl	8003988 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2108      	movs	r1, #8
 8003434:	430a      	orrs	r2, r1
 8003436:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2104      	movs	r1, #4
 8003444:	438a      	bics	r2, r1
 8003446:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800345a:	e027      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	0011      	movs	r1, r2
 8003464:	0018      	movs	r0, r3
 8003466:	f000 fae9 	bl	8003a3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2180      	movs	r1, #128	; 0x80
 8003476:	0109      	lsls	r1, r1, #4
 8003478:	430a      	orrs	r2, r1
 800347a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4910      	ldr	r1, [pc, #64]	; (80034c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003488:	400a      	ands	r2, r1
 800348a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	021a      	lsls	r2, r3, #8
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034a0:	e004      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80034a2:	2317      	movs	r3, #23
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2201      	movs	r2, #1
 80034a8:	701a      	strb	r2, [r3, #0]
      break;
 80034aa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	223c      	movs	r2, #60	; 0x3c
 80034b0:	2100      	movs	r1, #0
 80034b2:	5499      	strb	r1, [r3, r2]

  return status;
 80034b4:	2317      	movs	r3, #23
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	781b      	ldrb	r3, [r3, #0]
}
 80034ba:	0018      	movs	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	b006      	add	sp, #24
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	08004efc 	.word	0x08004efc
 80034c8:	fffffbff 	.word	0xfffffbff

080034cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a32      	ldr	r2, [pc, #200]	; (80035a8 <TIM_Base_SetConfig+0xdc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d003      	beq.n	80034ec <TIM_Base_SetConfig+0x20>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a31      	ldr	r2, [pc, #196]	; (80035ac <TIM_Base_SetConfig+0xe0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d108      	bne.n	80034fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2270      	movs	r2, #112	; 0x70
 80034f0:	4393      	bics	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a29      	ldr	r2, [pc, #164]	; (80035a8 <TIM_Base_SetConfig+0xdc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00f      	beq.n	8003526 <TIM_Base_SetConfig+0x5a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a28      	ldr	r2, [pc, #160]	; (80035ac <TIM_Base_SetConfig+0xe0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00b      	beq.n	8003526 <TIM_Base_SetConfig+0x5a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a27      	ldr	r2, [pc, #156]	; (80035b0 <TIM_Base_SetConfig+0xe4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d007      	beq.n	8003526 <TIM_Base_SetConfig+0x5a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a26      	ldr	r2, [pc, #152]	; (80035b4 <TIM_Base_SetConfig+0xe8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d003      	beq.n	8003526 <TIM_Base_SetConfig+0x5a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a25      	ldr	r2, [pc, #148]	; (80035b8 <TIM_Base_SetConfig+0xec>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d108      	bne.n	8003538 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4a24      	ldr	r2, [pc, #144]	; (80035bc <TIM_Base_SetConfig+0xf0>)
 800352a:	4013      	ands	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	4393      	bics	r3, r2
 800353e:	001a      	movs	r2, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <TIM_Base_SetConfig+0xdc>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <TIM_Base_SetConfig+0xaa>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <TIM_Base_SetConfig+0xe8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d003      	beq.n	8003576 <TIM_Base_SetConfig+0xaa>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a11      	ldr	r2, [pc, #68]	; (80035b8 <TIM_Base_SetConfig+0xec>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d103      	bne.n	800357e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	2201      	movs	r2, #1
 800358a:	4013      	ands	r3, r2
 800358c:	2b01      	cmp	r3, #1
 800358e:	d106      	bne.n	800359e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2201      	movs	r2, #1
 8003596:	4393      	bics	r3, r2
 8003598:	001a      	movs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	611a      	str	r2, [r3, #16]
  }
}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b004      	add	sp, #16
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40002000 	.word	0x40002000
 80035b4:	40014400 	.word	0x40014400
 80035b8:	40014800 	.word	0x40014800
 80035bc:	fffffcff 	.word	0xfffffcff

080035c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	2201      	movs	r2, #1
 80035d6:	4393      	bics	r3, r2
 80035d8:	001a      	movs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a2e      	ldr	r2, [pc, #184]	; (80036a8 <TIM_OC1_SetConfig+0xe8>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2203      	movs	r2, #3
 80035f6:	4393      	bics	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2202      	movs	r2, #2
 8003608:	4393      	bics	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a24      	ldr	r2, [pc, #144]	; (80036ac <TIM_OC1_SetConfig+0xec>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <TIM_OC1_SetConfig+0x6e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a23      	ldr	r2, [pc, #140]	; (80036b0 <TIM_OC1_SetConfig+0xf0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_OC1_SetConfig+0x6e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <TIM_OC1_SetConfig+0xf4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d10c      	bne.n	8003648 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2208      	movs	r2, #8
 8003632:	4393      	bics	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2204      	movs	r2, #4
 8003644:	4393      	bics	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a18      	ldr	r2, [pc, #96]	; (80036ac <TIM_OC1_SetConfig+0xec>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <TIM_OC1_SetConfig+0xa0>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a17      	ldr	r2, [pc, #92]	; (80036b0 <TIM_OC1_SetConfig+0xf0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <TIM_OC1_SetConfig+0xa0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <TIM_OC1_SetConfig+0xf4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d111      	bne.n	8003684 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4a15      	ldr	r2, [pc, #84]	; (80036b8 <TIM_OC1_SetConfig+0xf8>)
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4a14      	ldr	r2, [pc, #80]	; (80036bc <TIM_OC1_SetConfig+0xfc>)
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	621a      	str	r2, [r3, #32]
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b006      	add	sp, #24
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	fffeff8f 	.word	0xfffeff8f
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800
 80036b8:	fffffeff 	.word	0xfffffeff
 80036bc:	fffffdff 	.word	0xfffffdff

080036c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	2210      	movs	r2, #16
 80036d6:	4393      	bics	r3, r2
 80036d8:	001a      	movs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4a2c      	ldr	r2, [pc, #176]	; (80037a0 <TIM_OC2_SetConfig+0xe0>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4a2b      	ldr	r2, [pc, #172]	; (80037a4 <TIM_OC2_SetConfig+0xe4>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2220      	movs	r2, #32
 800370a:	4393      	bics	r3, r2
 800370c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <TIM_OC2_SetConfig+0xe8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d10d      	bne.n	800373e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2280      	movs	r2, #128	; 0x80
 8003726:	4393      	bics	r3, r2
 8003728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2240      	movs	r2, #64	; 0x40
 800373a:	4393      	bics	r3, r2
 800373c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a19      	ldr	r2, [pc, #100]	; (80037a8 <TIM_OC2_SetConfig+0xe8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <TIM_OC2_SetConfig+0x96>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a18      	ldr	r2, [pc, #96]	; (80037ac <TIM_OC2_SetConfig+0xec>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_OC2_SetConfig+0x96>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a17      	ldr	r2, [pc, #92]	; (80037b0 <TIM_OC2_SetConfig+0xf0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d113      	bne.n	800377e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4a16      	ldr	r2, [pc, #88]	; (80037b4 <TIM_OC2_SetConfig+0xf4>)
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4a15      	ldr	r2, [pc, #84]	; (80037b8 <TIM_OC2_SetConfig+0xf8>)
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	621a      	str	r2, [r3, #32]
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	b006      	add	sp, #24
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	feff8fff 	.word	0xfeff8fff
 80037a4:	fffffcff 	.word	0xfffffcff
 80037a8:	40012c00 	.word	0x40012c00
 80037ac:	40014400 	.word	0x40014400
 80037b0:	40014800 	.word	0x40014800
 80037b4:	fffffbff 	.word	0xfffffbff
 80037b8:	fffff7ff 	.word	0xfffff7ff

080037bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	4a31      	ldr	r2, [pc, #196]	; (8003898 <TIM_OC3_SetConfig+0xdc>)
 80037d2:	401a      	ands	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a2d      	ldr	r2, [pc, #180]	; (800389c <TIM_OC3_SetConfig+0xe0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2203      	movs	r2, #3
 80037f0:	4393      	bics	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	4a27      	ldr	r2, [pc, #156]	; (80038a0 <TIM_OC3_SetConfig+0xe4>)
 8003802:	4013      	ands	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a23      	ldr	r2, [pc, #140]	; (80038a4 <TIM_OC3_SetConfig+0xe8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d10d      	bne.n	8003836 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <TIM_OC3_SetConfig+0xec>)
 800381e:	4013      	ands	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <TIM_OC3_SetConfig+0xf0>)
 8003832:	4013      	ands	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <TIM_OC3_SetConfig+0xe8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d007      	beq.n	800384e <TIM_OC3_SetConfig+0x92>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a1b      	ldr	r2, [pc, #108]	; (80038b0 <TIM_OC3_SetConfig+0xf4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d003      	beq.n	800384e <TIM_OC3_SetConfig+0x92>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <TIM_OC3_SetConfig+0xf8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d113      	bne.n	8003876 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <TIM_OC3_SetConfig+0xfc>)
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4a18      	ldr	r2, [pc, #96]	; (80038bc <TIM_OC3_SetConfig+0x100>)
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	621a      	str	r2, [r3, #32]
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	b006      	add	sp, #24
 8003896:	bd80      	pop	{r7, pc}
 8003898:	fffffeff 	.word	0xfffffeff
 800389c:	fffeff8f 	.word	0xfffeff8f
 80038a0:	fffffdff 	.word	0xfffffdff
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	fffff7ff 	.word	0xfffff7ff
 80038ac:	fffffbff 	.word	0xfffffbff
 80038b0:	40014400 	.word	0x40014400
 80038b4:	40014800 	.word	0x40014800
 80038b8:	ffffefff 	.word	0xffffefff
 80038bc:	ffffdfff 	.word	0xffffdfff

080038c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4a24      	ldr	r2, [pc, #144]	; (8003968 <TIM_OC4_SetConfig+0xa8>)
 80038d6:	401a      	ands	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4a20      	ldr	r2, [pc, #128]	; (800396c <TIM_OC4_SetConfig+0xac>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <TIM_OC4_SetConfig+0xb0>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <TIM_OC4_SetConfig+0xb4>)
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	031b      	lsls	r3, r3, #12
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a17      	ldr	r2, [pc, #92]	; (8003978 <TIM_OC4_SetConfig+0xb8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d007      	beq.n	8003930 <TIM_OC4_SetConfig+0x70>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a16      	ldr	r2, [pc, #88]	; (800397c <TIM_OC4_SetConfig+0xbc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d003      	beq.n	8003930 <TIM_OC4_SetConfig+0x70>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a15      	ldr	r2, [pc, #84]	; (8003980 <TIM_OC4_SetConfig+0xc0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d109      	bne.n	8003944 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	4a14      	ldr	r2, [pc, #80]	; (8003984 <TIM_OC4_SetConfig+0xc4>)
 8003934:	4013      	ands	r3, r2
 8003936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	019b      	lsls	r3, r3, #6
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	46bd      	mov	sp, r7
 8003962:	b006      	add	sp, #24
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	ffffefff 	.word	0xffffefff
 800396c:	feff8fff 	.word	0xfeff8fff
 8003970:	fffffcff 	.word	0xfffffcff
 8003974:	ffffdfff 	.word	0xffffdfff
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40014400 	.word	0x40014400
 8003980:	40014800 	.word	0x40014800
 8003984:	ffffbfff 	.word	0xffffbfff

08003988 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <TIM_OC5_SetConfig+0x9c>)
 800399e:	401a      	ands	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <TIM_OC5_SetConfig+0xa0>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <TIM_OC5_SetConfig+0xa4>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	041b      	lsls	r3, r3, #16
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <TIM_OC5_SetConfig+0xa8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <TIM_OC5_SetConfig+0x66>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <TIM_OC5_SetConfig+0xac>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <TIM_OC5_SetConfig+0x66>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <TIM_OC5_SetConfig+0xb0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d109      	bne.n	8003a02 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <TIM_OC5_SetConfig+0x9c>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b006      	add	sp, #24
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	fffeffff 	.word	0xfffeffff
 8003a28:	fffeff8f 	.word	0xfffeff8f
 8003a2c:	fffdffff 	.word	0xfffdffff
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40014400 	.word	0x40014400
 8003a38:	40014800 	.word	0x40014800

08003a3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	4a22      	ldr	r2, [pc, #136]	; (8003adc <TIM_OC6_SetConfig+0xa0>)
 8003a52:	401a      	ands	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <TIM_OC6_SetConfig+0xa4>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ae4 <TIM_OC6_SetConfig+0xa8>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	051b      	lsls	r3, r3, #20
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <TIM_OC6_SetConfig+0xac>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d007      	beq.n	8003aa4 <TIM_OC6_SetConfig+0x68>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a15      	ldr	r2, [pc, #84]	; (8003aec <TIM_OC6_SetConfig+0xb0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_OC6_SetConfig+0x68>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <TIM_OC6_SetConfig+0xb4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d109      	bne.n	8003ab8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <TIM_OC6_SetConfig+0xb8>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	029b      	lsls	r3, r3, #10
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	621a      	str	r2, [r3, #32]
}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b006      	add	sp, #24
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	ffefffff 	.word	0xffefffff
 8003ae0:	feff8fff 	.word	0xfeff8fff
 8003ae4:	ffdfffff 	.word	0xffdfffff
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40014400 	.word	0x40014400
 8003af0:	40014800 	.word	0x40014800
 8003af4:	fffbffff 	.word	0xfffbffff

08003af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	221f      	movs	r2, #31
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	0013      	movs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	43d2      	mvns	r2, r2
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1a      	ldr	r2, [r3, #32]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	211f      	movs	r1, #31
 8003b28:	400b      	ands	r3, r1
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4099      	lsls	r1, r3
 8003b2e:	000b      	movs	r3, r1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b006      	add	sp, #24
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	223c      	movs	r2, #60	; 0x3c
 8003b52:	5c9b      	ldrb	r3, [r3, r2]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e06f      	b.n	8003c3c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	223c      	movs	r2, #60	; 0x3c
 8003b60:	2101      	movs	r1, #1
 8003b62:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	22ff      	movs	r2, #255	; 0xff
 8003b68:	4393      	bics	r3, r2
 8003b6a:	001a      	movs	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a33      	ldr	r2, [pc, #204]	; (8003c44 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003b78:	401a      	ands	r2, r3
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4a30      	ldr	r2, [pc, #192]	; (8003c48 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003b86:	401a      	ands	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a2e      	ldr	r2, [pc, #184]	; (8003c4c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003b94:	401a      	ands	r2, r3
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a2b      	ldr	r2, [pc, #172]	; (8003c50 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a29      	ldr	r2, [pc, #164]	; (8003c54 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a24      	ldr	r2, [pc, #144]	; (8003c5c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003bcc:	401a      	ands	r2, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a21      	ldr	r2, [pc, #132]	; (8003c60 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003bdc:	401a      	ands	r2, r3
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d11c      	bne.n	8003c2a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003bf4:	401a      	ands	r2, r3
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	051b      	lsls	r3, r3, #20
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003c04:	401a      	ands	r2, r3
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a17      	ldr	r2, [pc, #92]	; (8003c70 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003c12:	401a      	ands	r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003c20:	401a      	ands	r2, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	223c      	movs	r2, #60	; 0x3c
 8003c36:	2100      	movs	r1, #0
 8003c38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b004      	add	sp, #16
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	fffffcff 	.word	0xfffffcff
 8003c48:	fffffbff 	.word	0xfffffbff
 8003c4c:	fffff7ff 	.word	0xfffff7ff
 8003c50:	ffffefff 	.word	0xffffefff
 8003c54:	ffffdfff 	.word	0xffffdfff
 8003c58:	ffffbfff 	.word	0xffffbfff
 8003c5c:	fff0ffff 	.word	0xfff0ffff
 8003c60:	efffffff 	.word	0xefffffff
 8003c64:	40012c00 	.word	0x40012c00
 8003c68:	ff0fffff 	.word	0xff0fffff
 8003c6c:	feffffff 	.word	0xfeffffff
 8003c70:	fdffffff 	.word	0xfdffffff
 8003c74:	dfffffff 	.word	0xdfffffff

08003c78 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e04e      	b.n	8003d28 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2288      	movs	r2, #136	; 0x88
 8003c8e:	589b      	ldr	r3, [r3, r2]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d107      	bne.n	8003ca4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2284      	movs	r2, #132	; 0x84
 8003c98:	2100      	movs	r1, #0
 8003c9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7fc ffe0 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2288      	movs	r2, #136	; 0x88
 8003ca8:	2124      	movs	r1, #36	; 0x24
 8003caa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	438a      	bics	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 f99e 	bl	8004008 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f000 f830 	bl	8003d34 <UART_SetConfig>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e024      	b.n	8003d28 <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4911      	ldr	r1, [pc, #68]	; (8003d30 <HAL_HalfDuplex_Init+0xb8>)
 8003cea:	400a      	ands	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2122      	movs	r1, #34	; 0x22
 8003cfa:	438a      	bics	r2, r1
 8003cfc:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2108      	movs	r1, #8
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2101      	movs	r1, #1
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	0018      	movs	r0, r3
 8003d22:	f000 fa25 	bl	8004170 <UART_CheckIdleState>
 8003d26:	0003      	movs	r3, r0
}
 8003d28:	0018      	movs	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	ffffb7ff 	.word	0xffffb7ff

08003d34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d3c:	231a      	movs	r3, #26
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4aa1      	ldr	r2, [pc, #644]	; (8003fe8 <UART_SetConfig+0x2b4>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	0019      	movs	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4a9c      	ldr	r2, [pc, #624]	; (8003fec <UART_SetConfig+0x2b8>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a93      	ldr	r2, [pc, #588]	; (8003ff0 <UART_SetConfig+0x2bc>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	0019      	movs	r1, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	220f      	movs	r2, #15
 8003db8:	4393      	bics	r3, r2
 8003dba:	0019      	movs	r1, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a89      	ldr	r2, [pc, #548]	; (8003ff4 <UART_SetConfig+0x2c0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d127      	bne.n	8003e22 <UART_SetConfig+0xee>
 8003dd2:	4b89      	ldr	r3, [pc, #548]	; (8003ff8 <UART_SetConfig+0x2c4>)
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d017      	beq.n	8003e0e <UART_SetConfig+0xda>
 8003dde:	d81b      	bhi.n	8003e18 <UART_SetConfig+0xe4>
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d00a      	beq.n	8003dfa <UART_SetConfig+0xc6>
 8003de4:	d818      	bhi.n	8003e18 <UART_SetConfig+0xe4>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <UART_SetConfig+0xbc>
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d00a      	beq.n	8003e04 <UART_SetConfig+0xd0>
 8003dee:	e013      	b.n	8003e18 <UART_SetConfig+0xe4>
 8003df0:	231b      	movs	r3, #27
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e021      	b.n	8003e3e <UART_SetConfig+0x10a>
 8003dfa:	231b      	movs	r3, #27
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	2202      	movs	r2, #2
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e01c      	b.n	8003e3e <UART_SetConfig+0x10a>
 8003e04:	231b      	movs	r3, #27
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	2204      	movs	r2, #4
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	e017      	b.n	8003e3e <UART_SetConfig+0x10a>
 8003e0e:	231b      	movs	r3, #27
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	2208      	movs	r2, #8
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e012      	b.n	8003e3e <UART_SetConfig+0x10a>
 8003e18:	231b      	movs	r3, #27
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e00d      	b.n	8003e3e <UART_SetConfig+0x10a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a75      	ldr	r2, [pc, #468]	; (8003ffc <UART_SetConfig+0x2c8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d104      	bne.n	8003e36 <UART_SetConfig+0x102>
 8003e2c:	231b      	movs	r3, #27
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
 8003e34:	e003      	b.n	8003e3e <UART_SetConfig+0x10a>
 8003e36:	231b      	movs	r3, #27
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69da      	ldr	r2, [r3, #28]
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d000      	beq.n	8003e4c <UART_SetConfig+0x118>
 8003e4a:	e065      	b.n	8003f18 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003e4c:	231b      	movs	r3, #27
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d015      	beq.n	8003e82 <UART_SetConfig+0x14e>
 8003e56:	dc18      	bgt.n	8003e8a <UART_SetConfig+0x156>
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d00d      	beq.n	8003e78 <UART_SetConfig+0x144>
 8003e5c:	dc15      	bgt.n	8003e8a <UART_SetConfig+0x156>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <UART_SetConfig+0x134>
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d005      	beq.n	8003e72 <UART_SetConfig+0x13e>
 8003e66:	e010      	b.n	8003e8a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e68:	f7fe fbd6 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	617b      	str	r3, [r7, #20]
        break;
 8003e70:	e012      	b.n	8003e98 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e72:	4b63      	ldr	r3, [pc, #396]	; (8004000 <UART_SetConfig+0x2cc>)
 8003e74:	617b      	str	r3, [r7, #20]
        break;
 8003e76:	e00f      	b.n	8003e98 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e78:	f7fe fb42 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	617b      	str	r3, [r7, #20]
        break;
 8003e80:	e00a      	b.n	8003e98 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	617b      	str	r3, [r7, #20]
        break;
 8003e88:	e006      	b.n	8003e98 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e8e:	231a      	movs	r3, #26
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	2201      	movs	r2, #1
 8003e94:	701a      	strb	r2, [r3, #0]
        break;
 8003e96:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d100      	bne.n	8003ea0 <UART_SetConfig+0x16c>
 8003e9e:	e08d      	b.n	8003fbc <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ea4:	4b57      	ldr	r3, [pc, #348]	; (8004004 <UART_SetConfig+0x2d0>)
 8003ea6:	0052      	lsls	r2, r2, #1
 8003ea8:	5ad3      	ldrh	r3, [r2, r3]
 8003eaa:	0019      	movs	r1, r3
 8003eac:	6978      	ldr	r0, [r7, #20]
 8003eae:	f7fc f927 	bl	8000100 <__udivsi3>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	005a      	lsls	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	18d2      	adds	r2, r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	0010      	movs	r0, r2
 8003ec6:	f7fc f91b 	bl	8000100 <__udivsi3>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b0f      	cmp	r3, #15
 8003ed2:	d91c      	bls.n	8003f0e <UART_SetConfig+0x1da>
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	025b      	lsls	r3, r3, #9
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d217      	bcs.n	8003f0e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	200e      	movs	r0, #14
 8003ee4:	183b      	adds	r3, r7, r0
 8003ee6:	210f      	movs	r1, #15
 8003ee8:	438a      	bics	r2, r1
 8003eea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2207      	movs	r2, #7
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	b299      	uxth	r1, r3
 8003ef8:	183b      	adds	r3, r7, r0
 8003efa:	183a      	adds	r2, r7, r0
 8003efc:	8812      	ldrh	r2, [r2, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	183a      	adds	r2, r7, r0
 8003f08:	8812      	ldrh	r2, [r2, #0]
 8003f0a:	60da      	str	r2, [r3, #12]
 8003f0c:	e056      	b.n	8003fbc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003f0e:	231a      	movs	r3, #26
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e051      	b.n	8003fbc <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f18:	231b      	movs	r3, #27
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d015      	beq.n	8003f4e <UART_SetConfig+0x21a>
 8003f22:	dc18      	bgt.n	8003f56 <UART_SetConfig+0x222>
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d00d      	beq.n	8003f44 <UART_SetConfig+0x210>
 8003f28:	dc15      	bgt.n	8003f56 <UART_SetConfig+0x222>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <UART_SetConfig+0x200>
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d005      	beq.n	8003f3e <UART_SetConfig+0x20a>
 8003f32:	e010      	b.n	8003f56 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f34:	f7fe fb70 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8003f38:	0003      	movs	r3, r0
 8003f3a:	617b      	str	r3, [r7, #20]
        break;
 8003f3c:	e012      	b.n	8003f64 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f3e:	4b30      	ldr	r3, [pc, #192]	; (8004000 <UART_SetConfig+0x2cc>)
 8003f40:	617b      	str	r3, [r7, #20]
        break;
 8003f42:	e00f      	b.n	8003f64 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f44:	f7fe fadc 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	617b      	str	r3, [r7, #20]
        break;
 8003f4c:	e00a      	b.n	8003f64 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	617b      	str	r3, [r7, #20]
        break;
 8003f54:	e006      	b.n	8003f64 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f5a:	231a      	movs	r3, #26
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	2201      	movs	r2, #1
 8003f60:	701a      	strb	r2, [r3, #0]
        break;
 8003f62:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d028      	beq.n	8003fbc <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f6e:	4b25      	ldr	r3, [pc, #148]	; (8004004 <UART_SetConfig+0x2d0>)
 8003f70:	0052      	lsls	r2, r2, #1
 8003f72:	5ad3      	ldrh	r3, [r2, r3]
 8003f74:	0019      	movs	r1, r3
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7fc f8c2 	bl	8000100 <__udivsi3>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	001a      	movs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	18d2      	adds	r2, r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	0019      	movs	r1, r3
 8003f8e:	0010      	movs	r0, r2
 8003f90:	f7fc f8b6 	bl	8000100 <__udivsi3>
 8003f94:	0003      	movs	r3, r0
 8003f96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2b0f      	cmp	r3, #15
 8003f9c:	d90a      	bls.n	8003fb4 <UART_SetConfig+0x280>
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	025b      	lsls	r3, r3, #9
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d205      	bcs.n	8003fb4 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	e003      	b.n	8003fbc <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003fb4:	231a      	movs	r3, #26
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	226a      	movs	r2, #106	; 0x6a
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2268      	movs	r2, #104	; 0x68
 8003fc8:	2101      	movs	r1, #1
 8003fca:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003fd8:	231a      	movs	r3, #26
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	781b      	ldrb	r3, [r3, #0]
}
 8003fde:	0018      	movs	r0, r3
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	b008      	add	sp, #32
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	cfff69f3 	.word	0xcfff69f3
 8003fec:	ffffcfff 	.word	0xffffcfff
 8003ff0:	11fff4ff 	.word	0x11fff4ff
 8003ff4:	40013800 	.word	0x40013800
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40004400 	.word	0x40004400
 8004000:	00f42400 	.word	0x00f42400
 8004004:	08004f50 	.word	0x08004f50

08004008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	2208      	movs	r2, #8
 8004016:	4013      	ands	r3, r2
 8004018:	d00b      	beq.n	8004032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4a4a      	ldr	r2, [pc, #296]	; (800414c <UART_AdvFeatureConfig+0x144>)
 8004022:	4013      	ands	r3, r2
 8004024:	0019      	movs	r1, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	2201      	movs	r2, #1
 8004038:	4013      	ands	r3, r2
 800403a:	d00b      	beq.n	8004054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4a43      	ldr	r2, [pc, #268]	; (8004150 <UART_AdvFeatureConfig+0x148>)
 8004044:	4013      	ands	r3, r2
 8004046:	0019      	movs	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	2202      	movs	r2, #2
 800405a:	4013      	ands	r3, r2
 800405c:	d00b      	beq.n	8004076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4a3b      	ldr	r2, [pc, #236]	; (8004154 <UART_AdvFeatureConfig+0x14c>)
 8004066:	4013      	ands	r3, r2
 8004068:	0019      	movs	r1, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	2204      	movs	r2, #4
 800407c:	4013      	ands	r3, r2
 800407e:	d00b      	beq.n	8004098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4a34      	ldr	r2, [pc, #208]	; (8004158 <UART_AdvFeatureConfig+0x150>)
 8004088:	4013      	ands	r3, r2
 800408a:	0019      	movs	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	2210      	movs	r2, #16
 800409e:	4013      	ands	r3, r2
 80040a0:	d00b      	beq.n	80040ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4a2c      	ldr	r2, [pc, #176]	; (800415c <UART_AdvFeatureConfig+0x154>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	0019      	movs	r1, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	2220      	movs	r2, #32
 80040c0:	4013      	ands	r3, r2
 80040c2:	d00b      	beq.n	80040dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	4a25      	ldr	r2, [pc, #148]	; (8004160 <UART_AdvFeatureConfig+0x158>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	0019      	movs	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	2240      	movs	r2, #64	; 0x40
 80040e2:	4013      	ands	r3, r2
 80040e4:	d01d      	beq.n	8004122 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <UART_AdvFeatureConfig+0x15c>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	0019      	movs	r1, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004102:	2380      	movs	r3, #128	; 0x80
 8004104:	035b      	lsls	r3, r3, #13
 8004106:	429a      	cmp	r2, r3
 8004108:	d10b      	bne.n	8004122 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4a15      	ldr	r2, [pc, #84]	; (8004168 <UART_AdvFeatureConfig+0x160>)
 8004112:	4013      	ands	r3, r2
 8004114:	0019      	movs	r1, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	2280      	movs	r2, #128	; 0x80
 8004128:	4013      	ands	r3, r2
 800412a:	d00b      	beq.n	8004144 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	4a0e      	ldr	r2, [pc, #56]	; (800416c <UART_AdvFeatureConfig+0x164>)
 8004134:	4013      	ands	r3, r2
 8004136:	0019      	movs	r1, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]
  }
}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b002      	add	sp, #8
 800414a:	bd80      	pop	{r7, pc}
 800414c:	ffff7fff 	.word	0xffff7fff
 8004150:	fffdffff 	.word	0xfffdffff
 8004154:	fffeffff 	.word	0xfffeffff
 8004158:	fffbffff 	.word	0xfffbffff
 800415c:	ffffefff 	.word	0xffffefff
 8004160:	ffffdfff 	.word	0xffffdfff
 8004164:	ffefffff 	.word	0xffefffff
 8004168:	ff9fffff 	.word	0xff9fffff
 800416c:	fff7ffff 	.word	0xfff7ffff

08004170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b092      	sub	sp, #72	; 0x48
 8004174:	af02      	add	r7, sp, #8
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2290      	movs	r2, #144	; 0x90
 800417c:	2100      	movs	r1, #0
 800417e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004180:	f7fc fe78 	bl	8000e74 <HAL_GetTick>
 8004184:	0003      	movs	r3, r0
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2208      	movs	r2, #8
 8004190:	4013      	ands	r3, r2
 8004192:	2b08      	cmp	r3, #8
 8004194:	d12d      	bne.n	80041f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004198:	2280      	movs	r2, #128	; 0x80
 800419a:	0391      	lsls	r1, r2, #14
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4a47      	ldr	r2, [pc, #284]	; (80042bc <UART_CheckIdleState+0x14c>)
 80041a0:	9200      	str	r2, [sp, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f000 f88e 	bl	80042c4 <UART_WaitOnFlagUntilTimeout>
 80041a8:	1e03      	subs	r3, r0, #0
 80041aa:	d022      	beq.n	80041f2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ac:	f3ef 8310 	mrs	r3, PRIMASK
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80041b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80041b6:	2301      	movs	r3, #1
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	f383 8810 	msr	PRIMASK, r3
}
 80041c0:	46c0      	nop			; (mov r8, r8)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2180      	movs	r1, #128	; 0x80
 80041ce:	438a      	bics	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	f383 8810 	msr	PRIMASK, r3
}
 80041dc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2288      	movs	r2, #136	; 0x88
 80041e2:	2120      	movs	r1, #32
 80041e4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2284      	movs	r2, #132	; 0x84
 80041ea:	2100      	movs	r1, #0
 80041ec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e060      	b.n	80042b4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2204      	movs	r2, #4
 80041fa:	4013      	ands	r3, r2
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d146      	bne.n	800428e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004202:	2280      	movs	r2, #128	; 0x80
 8004204:	03d1      	lsls	r1, r2, #15
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4a2c      	ldr	r2, [pc, #176]	; (80042bc <UART_CheckIdleState+0x14c>)
 800420a:	9200      	str	r2, [sp, #0]
 800420c:	2200      	movs	r2, #0
 800420e:	f000 f859 	bl	80042c4 <UART_WaitOnFlagUntilTimeout>
 8004212:	1e03      	subs	r3, r0, #0
 8004214:	d03b      	beq.n	800428e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004216:	f3ef 8310 	mrs	r3, PRIMASK
 800421a:	60fb      	str	r3, [r7, #12]
  return(result);
 800421c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800421e:	637b      	str	r3, [r7, #52]	; 0x34
 8004220:	2301      	movs	r3, #1
 8004222:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f383 8810 	msr	PRIMASK, r3
}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4922      	ldr	r1, [pc, #136]	; (80042c0 <UART_CheckIdleState+0x150>)
 8004238:	400a      	ands	r2, r1
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f383 8810 	msr	PRIMASK, r3
}
 8004246:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004248:	f3ef 8310 	mrs	r3, PRIMASK
 800424c:	61bb      	str	r3, [r7, #24]
  return(result);
 800424e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004250:	633b      	str	r3, [r7, #48]	; 0x30
 8004252:	2301      	movs	r3, #1
 8004254:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f383 8810 	msr	PRIMASK, r3
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2101      	movs	r1, #1
 800426a:	438a      	bics	r2, r1
 800426c:	609a      	str	r2, [r3, #8]
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	f383 8810 	msr	PRIMASK, r3
}
 8004278:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	228c      	movs	r2, #140	; 0x8c
 800427e:	2120      	movs	r1, #32
 8004280:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2284      	movs	r2, #132	; 0x84
 8004286:	2100      	movs	r1, #0
 8004288:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e012      	b.n	80042b4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2288      	movs	r2, #136	; 0x88
 8004292:	2120      	movs	r1, #32
 8004294:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	228c      	movs	r2, #140	; 0x8c
 800429a:	2120      	movs	r1, #32
 800429c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2284      	movs	r2, #132	; 0x84
 80042ae:	2100      	movs	r1, #0
 80042b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b010      	add	sp, #64	; 0x40
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	01ffffff 	.word	0x01ffffff
 80042c0:	fffffedf 	.word	0xfffffedf

080042c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	1dfb      	adds	r3, r7, #7
 80042d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d4:	e051      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	3301      	adds	r3, #1
 80042da:	d04e      	beq.n	800437a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042dc:	f7fc fdca 	bl	8000e74 <HAL_GetTick>
 80042e0:	0002      	movs	r2, r0
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d302      	bcc.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e051      	b.n	800439a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2204      	movs	r2, #4
 80042fe:	4013      	ands	r3, r2
 8004300:	d03b      	beq.n	800437a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b80      	cmp	r3, #128	; 0x80
 8004306:	d038      	beq.n	800437a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b40      	cmp	r3, #64	; 0x40
 800430c:	d035      	beq.n	800437a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	2208      	movs	r2, #8
 8004316:	4013      	ands	r3, r2
 8004318:	2b08      	cmp	r3, #8
 800431a:	d111      	bne.n	8004340 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2208      	movs	r2, #8
 8004322:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	0018      	movs	r0, r3
 8004328:	f000 f83c 	bl	80043a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2290      	movs	r2, #144	; 0x90
 8004330:	2108      	movs	r1, #8
 8004332:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2284      	movs	r2, #132	; 0x84
 8004338:	2100      	movs	r1, #0
 800433a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e02c      	b.n	800439a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	2380      	movs	r3, #128	; 0x80
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	401a      	ands	r2, r3
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	429a      	cmp	r2, r3
 8004352:	d112      	bne.n	800437a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2280      	movs	r2, #128	; 0x80
 800435a:	0112      	lsls	r2, r2, #4
 800435c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	0018      	movs	r0, r3
 8004362:	f000 f81f 	bl	80043a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2290      	movs	r2, #144	; 0x90
 800436a:	2120      	movs	r1, #32
 800436c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2284      	movs	r2, #132	; 0x84
 8004372:	2100      	movs	r1, #0
 8004374:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e00f      	b.n	800439a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	4013      	ands	r3, r2
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	425a      	negs	r2, r3
 800438a:	4153      	adcs	r3, r2
 800438c:	b2db      	uxtb	r3, r3
 800438e:	001a      	movs	r2, r3
 8004390:	1dfb      	adds	r3, r7, #7
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d09e      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b004      	add	sp, #16
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08e      	sub	sp, #56	; 0x38
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ac:	f3ef 8310 	mrs	r3, PRIMASK
 80043b0:	617b      	str	r3, [r7, #20]
  return(result);
 80043b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043b4:	637b      	str	r3, [r7, #52]	; 0x34
 80043b6:	2301      	movs	r3, #1
 80043b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f383 8810 	msr	PRIMASK, r3
}
 80043c0:	46c0      	nop			; (mov r8, r8)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4926      	ldr	r1, [pc, #152]	; (8004468 <UART_EndRxTransfer+0xc4>)
 80043ce:	400a      	ands	r2, r1
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f383 8810 	msr	PRIMASK, r3
}
 80043dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043de:	f3ef 8310 	mrs	r3, PRIMASK
 80043e2:	623b      	str	r3, [r7, #32]
  return(result);
 80043e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043e6:	633b      	str	r3, [r7, #48]	; 0x30
 80043e8:	2301      	movs	r3, #1
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	f383 8810 	msr	PRIMASK, r3
}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	491b      	ldr	r1, [pc, #108]	; (800446c <UART_EndRxTransfer+0xc8>)
 8004400:	400a      	ands	r2, r1
 8004402:	609a      	str	r2, [r3, #8]
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	f383 8810 	msr	PRIMASK, r3
}
 800440e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004414:	2b01      	cmp	r3, #1
 8004416:	d118      	bne.n	800444a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004418:	f3ef 8310 	mrs	r3, PRIMASK
 800441c:	60bb      	str	r3, [r7, #8]
  return(result);
 800441e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004422:	2301      	movs	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f383 8810 	msr	PRIMASK, r3
}
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2110      	movs	r1, #16
 800443a:	438a      	bics	r2, r1
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f383 8810 	msr	PRIMASK, r3
}
 8004448:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	228c      	movs	r2, #140	; 0x8c
 800444e:	2120      	movs	r1, #32
 8004450:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	46bd      	mov	sp, r7
 8004462:	b00e      	add	sp, #56	; 0x38
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	fffffedf 	.word	0xfffffedf
 800446c:	effffffe 	.word	0xeffffffe

08004470 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2284      	movs	r2, #132	; 0x84
 800447c:	5c9b      	ldrb	r3, [r3, r2]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_UARTEx_DisableFifoMode+0x16>
 8004482:	2302      	movs	r3, #2
 8004484:	e027      	b.n	80044d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2284      	movs	r2, #132	; 0x84
 800448a:	2101      	movs	r1, #1
 800448c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2288      	movs	r2, #136	; 0x88
 8004492:	2124      	movs	r1, #36	; 0x24
 8004494:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2101      	movs	r1, #1
 80044aa:	438a      	bics	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2288      	movs	r2, #136	; 0x88
 80044c8:	2120      	movs	r1, #32
 80044ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2284      	movs	r2, #132	; 0x84
 80044d0:	2100      	movs	r1, #0
 80044d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	0018      	movs	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	b004      	add	sp, #16
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	dfffffff 	.word	0xdfffffff

080044e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2284      	movs	r2, #132	; 0x84
 80044f2:	5c9b      	ldrb	r3, [r3, r2]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e02e      	b.n	800455a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2284      	movs	r2, #132	; 0x84
 8004500:	2101      	movs	r1, #1
 8004502:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2288      	movs	r2, #136	; 0x88
 8004508:	2124      	movs	r1, #36	; 0x24
 800450a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2101      	movs	r1, #1
 8004520:	438a      	bics	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	08d9      	lsrs	r1, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	0018      	movs	r0, r3
 800453c:	f000 f854 	bl	80045e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2288      	movs	r2, #136	; 0x88
 800454c:	2120      	movs	r1, #32
 800454e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2284      	movs	r2, #132	; 0x84
 8004554:	2100      	movs	r1, #0
 8004556:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	0018      	movs	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	b004      	add	sp, #16
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2284      	movs	r2, #132	; 0x84
 8004572:	5c9b      	ldrb	r3, [r3, r2]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004578:	2302      	movs	r3, #2
 800457a:	e02f      	b.n	80045dc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2284      	movs	r2, #132	; 0x84
 8004580:	2101      	movs	r1, #1
 8004582:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2288      	movs	r2, #136	; 0x88
 8004588:	2124      	movs	r1, #36	; 0x24
 800458a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2101      	movs	r1, #1
 80045a0:	438a      	bics	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	4a0e      	ldr	r2, [pc, #56]	; (80045e4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	0019      	movs	r1, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0018      	movs	r0, r3
 80045be:	f000 f813 	bl	80045e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2288      	movs	r2, #136	; 0x88
 80045ce:	2120      	movs	r1, #32
 80045d0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2284      	movs	r2, #132	; 0x84
 80045d6:	2100      	movs	r1, #0
 80045d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	0018      	movs	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	b004      	add	sp, #16
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	f1ffffff 	.word	0xf1ffffff

080045e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d108      	bne.n	800460a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	226a      	movs	r2, #106	; 0x6a
 80045fc:	2101      	movs	r1, #1
 80045fe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2268      	movs	r2, #104	; 0x68
 8004604:	2101      	movs	r1, #1
 8004606:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004608:	e043      	b.n	8004692 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800460a:	260f      	movs	r6, #15
 800460c:	19bb      	adds	r3, r7, r6
 800460e:	2208      	movs	r2, #8
 8004610:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004612:	200e      	movs	r0, #14
 8004614:	183b      	adds	r3, r7, r0
 8004616:	2208      	movs	r2, #8
 8004618:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	0e5b      	lsrs	r3, r3, #25
 8004622:	b2da      	uxtb	r2, r3
 8004624:	240d      	movs	r4, #13
 8004626:	193b      	adds	r3, r7, r4
 8004628:	2107      	movs	r1, #7
 800462a:	400a      	ands	r2, r1
 800462c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	0f5b      	lsrs	r3, r3, #29
 8004636:	b2da      	uxtb	r2, r3
 8004638:	250c      	movs	r5, #12
 800463a:	197b      	adds	r3, r7, r5
 800463c:	2107      	movs	r1, #7
 800463e:	400a      	ands	r2, r1
 8004640:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004642:	183b      	adds	r3, r7, r0
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	197a      	adds	r2, r7, r5
 8004648:	7812      	ldrb	r2, [r2, #0]
 800464a:	4914      	ldr	r1, [pc, #80]	; (800469c <UARTEx_SetNbDataToProcess+0xb4>)
 800464c:	5c8a      	ldrb	r2, [r1, r2]
 800464e:	435a      	muls	r2, r3
 8004650:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004652:	197b      	adds	r3, r7, r5
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	4a12      	ldr	r2, [pc, #72]	; (80046a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8004658:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800465a:	0019      	movs	r1, r3
 800465c:	f7fb fdda 	bl	8000214 <__divsi3>
 8004660:	0003      	movs	r3, r0
 8004662:	b299      	uxth	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	226a      	movs	r2, #106	; 0x6a
 8004668:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800466a:	19bb      	adds	r3, r7, r6
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	193a      	adds	r2, r7, r4
 8004670:	7812      	ldrb	r2, [r2, #0]
 8004672:	490a      	ldr	r1, [pc, #40]	; (800469c <UARTEx_SetNbDataToProcess+0xb4>)
 8004674:	5c8a      	ldrb	r2, [r1, r2]
 8004676:	435a      	muls	r2, r3
 8004678:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800467a:	193b      	adds	r3, r7, r4
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	4a08      	ldr	r2, [pc, #32]	; (80046a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8004680:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004682:	0019      	movs	r1, r3
 8004684:	f7fb fdc6 	bl	8000214 <__divsi3>
 8004688:	0003      	movs	r3, r0
 800468a:	b299      	uxth	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2268      	movs	r2, #104	; 0x68
 8004690:	5299      	strh	r1, [r3, r2]
}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	46bd      	mov	sp, r7
 8004696:	b005      	add	sp, #20
 8004698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	08004f68 	.word	0x08004f68
 80046a0:	08004f70 	.word	0x08004f70

080046a4 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	0002      	movs	r2, r0
 80046ac:	1dfb      	adds	r3, r7, #7
 80046ae:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 80046b0:	23fa      	movs	r3, #250	; 0xfa
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	1df9      	adds	r1, r7, #7
 80046b6:	4804      	ldr	r0, [pc, #16]	; (80046c8 <DEV_SPI_WRite+0x24>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	f7fe f9a1 	bl	8002a00 <HAL_SPI_Transmit>
}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b002      	add	sp, #8
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	200000f0 	.word	0x200000f0

080046cc <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 80046d0:	2380      	movs	r3, #128	; 0x80
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	480d      	ldr	r0, [pc, #52]	; (800470c <DEV_Module_Init+0x40>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	0019      	movs	r1, r3
 80046da:	f7fd fa8f 	bl	8001bfc <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	480b      	ldr	r0, [pc, #44]	; (8004710 <DEV_Module_Init+0x44>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	0019      	movs	r1, r3
 80046e8:	f7fd fa88 	bl	8001bfc <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 80046ec:	23a0      	movs	r3, #160	; 0xa0
 80046ee:	05db      	lsls	r3, r3, #23
 80046f0:	2201      	movs	r2, #1
 80046f2:	2108      	movs	r1, #8
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fd fa81 	bl	8001bfc <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <DEV_Module_Init+0x48>)
 80046fc:	2100      	movs	r1, #0
 80046fe:	0018      	movs	r0, r3
 8004700:	f7fe fd0c 	bl	800311c <HAL_TIM_PWM_Start>
		return 0;
 8004704:	2300      	movs	r3, #0
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	50000800 	.word	0x50000800
 8004710:	50000400 	.word	0x50000400
 8004714:	20000154 	.word	0x20000154

08004718 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
	LCD_1IN28_CS_0;
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	480f      	ldr	r0, [pc, #60]	; (8004760 <LCD_1IN28_Reset+0x48>)
 8004722:	2200      	movs	r2, #0
 8004724:	0019      	movs	r1, r3
 8004726:	f7fd fa69 	bl	8001bfc <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800472a:	2064      	movs	r0, #100	; 0x64
 800472c:	f7fc fbac 	bl	8000e88 <HAL_Delay>
    LCD_1IN28_RST_0;
 8004730:	23a0      	movs	r3, #160	; 0xa0
 8004732:	05db      	lsls	r3, r3, #23
 8004734:	2200      	movs	r2, #0
 8004736:	2108      	movs	r1, #8
 8004738:	0018      	movs	r0, r3
 800473a:	f7fd fa5f 	bl	8001bfc <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800473e:	2064      	movs	r0, #100	; 0x64
 8004740:	f7fc fba2 	bl	8000e88 <HAL_Delay>
    LCD_1IN28_RST_1;
 8004744:	23a0      	movs	r3, #160	; 0xa0
 8004746:	05db      	lsls	r3, r3, #23
 8004748:	2201      	movs	r2, #1
 800474a:	2108      	movs	r1, #8
 800474c:	0018      	movs	r0, r3
 800474e:	f7fd fa55 	bl	8001bfc <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8004752:	2064      	movs	r0, #100	; 0x64
 8004754:	f7fc fb98 	bl	8000e88 <HAL_Delay>
}
 8004758:	46c0      	nop			; (mov r8, r8)
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	50000400 	.word	0x50000400

08004764 <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	0002      	movs	r2, r0
 800476c:	1dfb      	adds	r3, r7, #7
 800476e:	701a      	strb	r2, [r3, #0]
    LCD_1IN28_CS_0;
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	480d      	ldr	r0, [pc, #52]	; (80047ac <LCD_1IN28_SendCommand+0x48>)
 8004776:	2200      	movs	r2, #0
 8004778:	0019      	movs	r1, r3
 800477a:	f7fd fa3f 	bl	8001bfc <HAL_GPIO_WritePin>
    LCD_1IN28_DC_0;
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	480b      	ldr	r0, [pc, #44]	; (80047b0 <LCD_1IN28_SendCommand+0x4c>)
 8004784:	2200      	movs	r2, #0
 8004786:	0019      	movs	r1, r3
 8004788:	f7fd fa38 	bl	8001bfc <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 800478c:	1dfb      	adds	r3, r7, #7
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	0018      	movs	r0, r3
 8004792:	f7ff ff87 	bl	80046a4 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8004796:	2380      	movs	r3, #128	; 0x80
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4804      	ldr	r0, [pc, #16]	; (80047ac <LCD_1IN28_SendCommand+0x48>)
 800479c:	2201      	movs	r2, #1
 800479e:	0019      	movs	r1, r3
 80047a0:	f7fd fa2c 	bl	8001bfc <HAL_GPIO_WritePin>
}
 80047a4:	46c0      	nop			; (mov r8, r8)
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b002      	add	sp, #8
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	50000400 	.word	0x50000400
 80047b0:	50000800 	.word	0x50000800

080047b4 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	0002      	movs	r2, r0
 80047bc:	1dfb      	adds	r3, r7, #7
 80047be:	701a      	strb	r2, [r3, #0]
    LCD_1IN28_CS_0;
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	480d      	ldr	r0, [pc, #52]	; (80047fc <LCD_1IN28_SendData_8Bit+0x48>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	0019      	movs	r1, r3
 80047ca:	f7fd fa17 	bl	8001bfc <HAL_GPIO_WritePin>
    LCD_1IN28_DC_1;
 80047ce:	2380      	movs	r3, #128	; 0x80
 80047d0:	021b      	lsls	r3, r3, #8
 80047d2:	480b      	ldr	r0, [pc, #44]	; (8004800 <LCD_1IN28_SendData_8Bit+0x4c>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	0019      	movs	r1, r3
 80047d8:	f7fd fa10 	bl	8001bfc <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 80047dc:	1dfb      	adds	r3, r7, #7
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	0018      	movs	r0, r3
 80047e2:	f7ff ff5f 	bl	80046a4 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4804      	ldr	r0, [pc, #16]	; (80047fc <LCD_1IN28_SendData_8Bit+0x48>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	0019      	movs	r1, r3
 80047f0:	f7fd fa04 	bl	8001bfc <HAL_GPIO_WritePin>
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b002      	add	sp, #8
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	50000400 	.word	0x50000400
 8004800:	50000800 	.word	0x50000800

08004804 <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	0002      	movs	r2, r0
 800480c:	1dbb      	adds	r3, r7, #6
 800480e:	801a      	strh	r2, [r3, #0]
    LCD_1IN28_CS_0;
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4812      	ldr	r0, [pc, #72]	; (8004860 <LCD_1IN28_SendData_16Bit+0x5c>)
 8004816:	2200      	movs	r2, #0
 8004818:	0019      	movs	r1, r3
 800481a:	f7fd f9ef 	bl	8001bfc <HAL_GPIO_WritePin>
    LCD_1IN28_DC_1;
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	4810      	ldr	r0, [pc, #64]	; (8004864 <LCD_1IN28_SendData_16Bit+0x60>)
 8004824:	2201      	movs	r2, #1
 8004826:	0019      	movs	r1, r3
 8004828:	f7fd f9e8 	bl	8001bfc <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data >> 8);
 800482c:	1dbb      	adds	r3, r7, #6
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	0a1b      	lsrs	r3, r3, #8
 8004832:	b29b      	uxth	r3, r3
 8004834:	b2db      	uxtb	r3, r3
 8004836:	0018      	movs	r0, r3
 8004838:	f7ff ff34 	bl	80046a4 <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data);
 800483c:	1dbb      	adds	r3, r7, #6
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	0018      	movs	r0, r3
 8004844:	f7ff ff2e 	bl	80046a4 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4804      	ldr	r0, [pc, #16]	; (8004860 <LCD_1IN28_SendData_16Bit+0x5c>)
 800484e:	2201      	movs	r2, #1
 8004850:	0019      	movs	r1, r3
 8004852:	f7fd f9d3 	bl	8001bfc <HAL_GPIO_WritePin>
}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	46bd      	mov	sp, r7
 800485a:	b002      	add	sp, #8
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	50000400 	.word	0x50000400
 8004864:	50000800 	.word	0x50000800

08004868 <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  LCD_1IN28_SendCommand(0xEF);
 800486c:	20ef      	movs	r0, #239	; 0xef
 800486e:	f7ff ff79 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 8004872:	20eb      	movs	r0, #235	; 0xeb
 8004874:	f7ff ff76 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8004878:	2014      	movs	r0, #20
 800487a:	f7ff ff9b 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0xFE);			 
 800487e:	20fe      	movs	r0, #254	; 0xfe
 8004880:	f7ff ff70 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 8004884:	20ef      	movs	r0, #239	; 0xef
 8004886:	f7ff ff6d 	bl	8004764 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 800488a:	20eb      	movs	r0, #235	; 0xeb
 800488c:	f7ff ff6a 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8004890:	2014      	movs	r0, #20
 8004892:	f7ff ff8f 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 8004896:	2084      	movs	r0, #132	; 0x84
 8004898:	f7ff ff64 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 800489c:	2040      	movs	r0, #64	; 0x40
 800489e:	f7ff ff89 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 80048a2:	2085      	movs	r0, #133	; 0x85
 80048a4:	f7ff ff5e 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80048a8:	20ff      	movs	r0, #255	; 0xff
 80048aa:	f7ff ff83 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 80048ae:	2086      	movs	r0, #134	; 0x86
 80048b0:	f7ff ff58 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80048b4:	20ff      	movs	r0, #255	; 0xff
 80048b6:	f7ff ff7d 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 80048ba:	2087      	movs	r0, #135	; 0x87
 80048bc:	f7ff ff52 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 80048c0:	20ff      	movs	r0, #255	; 0xff
 80048c2:	f7ff ff77 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 80048c6:	2088      	movs	r0, #136	; 0x88
 80048c8:	f7ff ff4c 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 80048cc:	200a      	movs	r0, #10
 80048ce:	f7ff ff71 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 80048d2:	2089      	movs	r0, #137	; 0x89
 80048d4:	f7ff ff46 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 80048d8:	2021      	movs	r0, #33	; 0x21
 80048da:	f7ff ff6b 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 80048de:	208a      	movs	r0, #138	; 0x8a
 80048e0:	f7ff ff40 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 80048e4:	2000      	movs	r0, #0
 80048e6:	f7ff ff65 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 80048ea:	208b      	movs	r0, #139	; 0x8b
 80048ec:	f7ff ff3a 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 80048f0:	2080      	movs	r0, #128	; 0x80
 80048f2:	f7ff ff5f 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 80048f6:	208c      	movs	r0, #140	; 0x8c
 80048f8:	f7ff ff34 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 80048fc:	2001      	movs	r0, #1
 80048fe:	f7ff ff59 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 8004902:	208d      	movs	r0, #141	; 0x8d
 8004904:	f7ff ff2e 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8004908:	2001      	movs	r0, #1
 800490a:	f7ff ff53 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 800490e:	208e      	movs	r0, #142	; 0x8e
 8004910:	f7ff ff28 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8004914:	20ff      	movs	r0, #255	; 0xff
 8004916:	f7ff ff4d 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 800491a:	208f      	movs	r0, #143	; 0x8f
 800491c:	f7ff ff22 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8004920:	20ff      	movs	r0, #255	; 0xff
 8004922:	f7ff ff47 	bl	80047b4 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 8004926:	20b6      	movs	r0, #182	; 0xb6
 8004928:	f7ff ff1c 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 800492c:	2000      	movs	r0, #0
 800492e:	f7ff ff41 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 8004932:	2020      	movs	r0, #32
 8004934:	f7ff ff3e 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 8004938:	2036      	movs	r0, #54	; 0x36
 800493a:	f7ff ff13 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 800493e:	2008      	movs	r0, #8
 8004940:	f7ff ff38 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 8004944:	203a      	movs	r0, #58	; 0x3a
 8004946:	f7ff ff0d 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 800494a:	2005      	movs	r0, #5
 800494c:	f7ff ff32 	bl	80047b4 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 8004950:	2090      	movs	r0, #144	; 0x90
 8004952:	f7ff ff07 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 8004956:	2008      	movs	r0, #8
 8004958:	f7ff ff2c 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800495c:	2008      	movs	r0, #8
 800495e:	f7ff ff29 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8004962:	2008      	movs	r0, #8
 8004964:	f7ff ff26 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 8004968:	2008      	movs	r0, #8
 800496a:	f7ff ff23 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 800496e:	20bd      	movs	r0, #189	; 0xbd
 8004970:	f7ff fef8 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 8004974:	2006      	movs	r0, #6
 8004976:	f7ff ff1d 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 800497a:	20bc      	movs	r0, #188	; 0xbc
 800497c:	f7ff fef2 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8004980:	2000      	movs	r0, #0
 8004982:	f7ff ff17 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 8004986:	20ff      	movs	r0, #255	; 0xff
 8004988:	f7ff feec 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 800498c:	2060      	movs	r0, #96	; 0x60
 800498e:	f7ff ff11 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8004992:	2001      	movs	r0, #1
 8004994:	f7ff ff0e 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8004998:	2004      	movs	r0, #4
 800499a:	f7ff ff0b 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 800499e:	20c3      	movs	r0, #195	; 0xc3
 80049a0:	f7ff fee0 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 80049a4:	2013      	movs	r0, #19
 80049a6:	f7ff ff05 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 80049aa:	20c4      	movs	r0, #196	; 0xc4
 80049ac:	f7ff feda 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 80049b0:	2013      	movs	r0, #19
 80049b2:	f7ff feff 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 80049b6:	20c9      	movs	r0, #201	; 0xc9
 80049b8:	f7ff fed4 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 80049bc:	2022      	movs	r0, #34	; 0x22
 80049be:	f7ff fef9 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 80049c2:	20be      	movs	r0, #190	; 0xbe
 80049c4:	f7ff fece 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 80049c8:	2011      	movs	r0, #17
 80049ca:	f7ff fef3 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 80049ce:	20e1      	movs	r0, #225	; 0xe1
 80049d0:	f7ff fec8 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 80049d4:	2010      	movs	r0, #16
 80049d6:	f7ff feed 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 80049da:	200e      	movs	r0, #14
 80049dc:	f7ff feea 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 80049e0:	20df      	movs	r0, #223	; 0xdf
 80049e2:	f7ff febf 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 80049e6:	2021      	movs	r0, #33	; 0x21
 80049e8:	f7ff fee4 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 80049ec:	200c      	movs	r0, #12
 80049ee:	f7ff fee1 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 80049f2:	2002      	movs	r0, #2
 80049f4:	f7ff fede 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 80049f8:	20f0      	movs	r0, #240	; 0xf0
 80049fa:	f7ff feb3 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 80049fe:	2045      	movs	r0, #69	; 0x45
 8004a00:	f7ff fed8 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8004a04:	2009      	movs	r0, #9
 8004a06:	f7ff fed5 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8004a0a:	2008      	movs	r0, #8
 8004a0c:	f7ff fed2 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8004a10:	2008      	movs	r0, #8
 8004a12:	f7ff fecf 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 8004a16:	2026      	movs	r0, #38	; 0x26
 8004a18:	f7ff fecc 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8004a1c:	202a      	movs	r0, #42	; 0x2a
 8004a1e:	f7ff fec9 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 8004a22:	20f1      	movs	r0, #241	; 0xf1
 8004a24:	f7ff fe9e 	bl	8004764 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8004a28:	2043      	movs	r0, #67	; 0x43
 8004a2a:	f7ff fec3 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8004a2e:	2070      	movs	r0, #112	; 0x70
 8004a30:	f7ff fec0 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8004a34:	2072      	movs	r0, #114	; 0x72
 8004a36:	f7ff febd 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8004a3a:	2036      	movs	r0, #54	; 0x36
 8004a3c:	f7ff feba 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 8004a40:	2037      	movs	r0, #55	; 0x37
 8004a42:	f7ff feb7 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8004a46:	206f      	movs	r0, #111	; 0x6f
 8004a48:	f7ff feb4 	bl	80047b4 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8004a4c:	20f2      	movs	r0, #242	; 0xf2
 8004a4e:	f7ff fe89 	bl	8004764 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 8004a52:	2045      	movs	r0, #69	; 0x45
 8004a54:	f7ff feae 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8004a58:	2009      	movs	r0, #9
 8004a5a:	f7ff feab 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8004a5e:	2008      	movs	r0, #8
 8004a60:	f7ff fea8 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8004a64:	2008      	movs	r0, #8
 8004a66:	f7ff fea5 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8004a6a:	2026      	movs	r0, #38	; 0x26
 8004a6c:	f7ff fea2 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8004a70:	202a      	movs	r0, #42	; 0x2a
 8004a72:	f7ff fe9f 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 8004a76:	20f3      	movs	r0, #243	; 0xf3
 8004a78:	f7ff fe74 	bl	8004764 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8004a7c:	2043      	movs	r0, #67	; 0x43
 8004a7e:	f7ff fe99 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8004a82:	2070      	movs	r0, #112	; 0x70
 8004a84:	f7ff fe96 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8004a88:	2072      	movs	r0, #114	; 0x72
 8004a8a:	f7ff fe93 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8004a8e:	2036      	movs	r0, #54	; 0x36
 8004a90:	f7ff fe90 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 8004a94:	2037      	movs	r0, #55	; 0x37
 8004a96:	f7ff fe8d 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8004a9a:	206f      	movs	r0, #111	; 0x6f
 8004a9c:	f7ff fe8a 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8004aa0:	20ed      	movs	r0, #237	; 0xed
 8004aa2:	f7ff fe5f 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 8004aa6:	201b      	movs	r0, #27
 8004aa8:	f7ff fe84 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8004aac:	200b      	movs	r0, #11
 8004aae:	f7ff fe81 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 8004ab2:	20ae      	movs	r0, #174	; 0xae
 8004ab4:	f7ff fe56 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8004ab8:	2077      	movs	r0, #119	; 0x77
 8004aba:	f7ff fe7b 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8004abe:	20cd      	movs	r0, #205	; 0xcd
 8004ac0:	f7ff fe50 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 8004ac4:	2063      	movs	r0, #99	; 0x63
 8004ac6:	f7ff fe75 	bl	80047b4 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 8004aca:	2070      	movs	r0, #112	; 0x70
 8004acc:	f7ff fe4a 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8004ad0:	2007      	movs	r0, #7
 8004ad2:	f7ff fe6f 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8004ad6:	2007      	movs	r0, #7
 8004ad8:	f7ff fe6c 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8004adc:	2004      	movs	r0, #4
 8004ade:	f7ff fe69 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 8004ae2:	200e      	movs	r0, #14
 8004ae4:	f7ff fe66 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 8004ae8:	200f      	movs	r0, #15
 8004aea:	f7ff fe63 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8004aee:	2009      	movs	r0, #9
 8004af0:	f7ff fe60 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8004af4:	2007      	movs	r0, #7
 8004af6:	f7ff fe5d 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8004afa:	2008      	movs	r0, #8
 8004afc:	f7ff fe5a 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8004b00:	2003      	movs	r0, #3
 8004b02:	f7ff fe57 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 8004b06:	20e8      	movs	r0, #232	; 0xe8
 8004b08:	f7ff fe2c 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8004b0c:	2034      	movs	r0, #52	; 0x34
 8004b0e:	f7ff fe51 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 8004b12:	2062      	movs	r0, #98	; 0x62
 8004b14:	f7ff fe26 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8004b18:	2018      	movs	r0, #24
 8004b1a:	f7ff fe4b 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 8004b1e:	200d      	movs	r0, #13
 8004b20:	f7ff fe48 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8004b24:	2071      	movs	r0, #113	; 0x71
 8004b26:	f7ff fe45 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8004b2a:	20ed      	movs	r0, #237	; 0xed
 8004b2c:	f7ff fe42 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8004b30:	2070      	movs	r0, #112	; 0x70
 8004b32:	f7ff fe3f 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8004b36:	2070      	movs	r0, #112	; 0x70
 8004b38:	f7ff fe3c 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8004b3c:	2018      	movs	r0, #24
 8004b3e:	f7ff fe39 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 8004b42:	200f      	movs	r0, #15
 8004b44:	f7ff fe36 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8004b48:	2071      	movs	r0, #113	; 0x71
 8004b4a:	f7ff fe33 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8004b4e:	20ef      	movs	r0, #239	; 0xef
 8004b50:	f7ff fe30 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8004b54:	2070      	movs	r0, #112	; 0x70
 8004b56:	f7ff fe2d 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8004b5a:	2070      	movs	r0, #112	; 0x70
 8004b5c:	f7ff fe2a 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 8004b60:	2063      	movs	r0, #99	; 0x63
 8004b62:	f7ff fdff 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8004b66:	2018      	movs	r0, #24
 8004b68:	f7ff fe24 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8004b6c:	2011      	movs	r0, #17
 8004b6e:	f7ff fe21 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8004b72:	2071      	movs	r0, #113	; 0x71
 8004b74:	f7ff fe1e 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8004b78:	20f1      	movs	r0, #241	; 0xf1
 8004b7a:	f7ff fe1b 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8004b7e:	2070      	movs	r0, #112	; 0x70
 8004b80:	f7ff fe18 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8004b84:	2070      	movs	r0, #112	; 0x70
 8004b86:	f7ff fe15 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8004b8a:	2018      	movs	r0, #24
 8004b8c:	f7ff fe12 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8004b90:	2013      	movs	r0, #19
 8004b92:	f7ff fe0f 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8004b96:	2071      	movs	r0, #113	; 0x71
 8004b98:	f7ff fe0c 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8004b9c:	20f3      	movs	r0, #243	; 0xf3
 8004b9e:	f7ff fe09 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8004ba2:	2070      	movs	r0, #112	; 0x70
 8004ba4:	f7ff fe06 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8004ba8:	2070      	movs	r0, #112	; 0x70
 8004baa:	f7ff fe03 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8004bae:	2064      	movs	r0, #100	; 0x64
 8004bb0:	f7ff fdd8 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 8004bb4:	2028      	movs	r0, #40	; 0x28
 8004bb6:	f7ff fdfd 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8004bba:	2029      	movs	r0, #41	; 0x29
 8004bbc:	f7ff fdfa 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8004bc0:	20f1      	movs	r0, #241	; 0xf1
 8004bc2:	f7ff fdf7 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	f7ff fdf4 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8004bcc:	20f1      	movs	r0, #241	; 0xf1
 8004bce:	f7ff fdf1 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	f7ff fdee 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8004bd8:	2007      	movs	r0, #7
 8004bda:	f7ff fdeb 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8004bde:	2066      	movs	r0, #102	; 0x66
 8004be0:	f7ff fdc0 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 8004be4:	203c      	movs	r0, #60	; 0x3c
 8004be6:	f7ff fde5 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8004bea:	2000      	movs	r0, #0
 8004bec:	f7ff fde2 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8004bf0:	20cd      	movs	r0, #205	; 0xcd
 8004bf2:	f7ff fddf 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 8004bf6:	2067      	movs	r0, #103	; 0x67
 8004bf8:	f7ff fddc 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8004bfc:	2045      	movs	r0, #69	; 0x45
 8004bfe:	f7ff fdd9 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8004c02:	2045      	movs	r0, #69	; 0x45
 8004c04:	f7ff fdd6 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8004c08:	2010      	movs	r0, #16
 8004c0a:	f7ff fdd3 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f7ff fdd0 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8004c14:	2000      	movs	r0, #0
 8004c16:	f7ff fdcd 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f7ff fdca 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 8004c20:	2067      	movs	r0, #103	; 0x67
 8004c22:	f7ff fd9f 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8004c26:	2000      	movs	r0, #0
 8004c28:	f7ff fdc4 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8004c2c:	203c      	movs	r0, #60	; 0x3c
 8004c2e:	f7ff fdc1 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8004c32:	2000      	movs	r0, #0
 8004c34:	f7ff fdbe 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8004c38:	2000      	movs	r0, #0
 8004c3a:	f7ff fdbb 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f7ff fdb8 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8004c44:	2001      	movs	r0, #1
 8004c46:	f7ff fdb5 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8004c4a:	2054      	movs	r0, #84	; 0x54
 8004c4c:	f7ff fdb2 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8004c50:	2010      	movs	r0, #16
 8004c52:	f7ff fdaf 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 8004c56:	2032      	movs	r0, #50	; 0x32
 8004c58:	f7ff fdac 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8004c5c:	2098      	movs	r0, #152	; 0x98
 8004c5e:	f7ff fda9 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 8004c62:	2074      	movs	r0, #116	; 0x74
 8004c64:	f7ff fd7e 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 8004c68:	2010      	movs	r0, #16
 8004c6a:	f7ff fda3 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 8004c6e:	2085      	movs	r0, #133	; 0x85
 8004c70:	f7ff fda0 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 8004c74:	2080      	movs	r0, #128	; 0x80
 8004c76:	f7ff fd9d 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f7ff fd9a 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8004c80:	2000      	movs	r0, #0
 8004c82:	f7ff fd97 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 8004c86:	204e      	movs	r0, #78	; 0x4e
 8004c88:	f7ff fd94 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f7ff fd91 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0x98);			
 8004c92:	2098      	movs	r0, #152	; 0x98
 8004c94:	f7ff fd66 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8004c98:	203e      	movs	r0, #62	; 0x3e
 8004c9a:	f7ff fd8b 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8004c9e:	2007      	movs	r0, #7
 8004ca0:	f7ff fd88 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 8004ca4:	2035      	movs	r0, #53	; 0x35
 8004ca6:	f7ff fd5d 	bl	8004764 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8004caa:	2021      	movs	r0, #33	; 0x21
 8004cac:	f7ff fd5a 	bl	8004764 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8004cb0:	2011      	movs	r0, #17
 8004cb2:	f7ff fd57 	bl	8004764 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 8004cb6:	2078      	movs	r0, #120	; 0x78
 8004cb8:	f7fc f8e6 	bl	8000e88 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8004cbc:	2029      	movs	r0, #41	; 0x29
 8004cbe:	f7ff fd51 	bl	8004764 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 8004cc2:	2014      	movs	r0, #20
 8004cc4:	f7fc f8e0 	bl	8000e88 <HAL_Delay>
}
 8004cc8:	46c0      	nop			; (mov r8, r8)
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <LCD_1IN28_Init>:
function :	Initialize the lcd
parameter:
********************************************************************************/

void LCD_1IN28_Init(UBYTE Scan_dir)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	0002      	movs	r2, r0
 8004cd6:	1dfb      	adds	r3, r7, #7
 8004cd8:	701a      	strb	r2, [r3, #0]

    //Hardware reset
    LCD_1IN28_Reset();
 8004cda:	f7ff fd1d 	bl	8004718 <LCD_1IN28_Reset>
    //Set the resolution and scanning method of the screen
    //Not sure if this is needed
    //LCD_1IN28_SetAttributes(Scan_dir);
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 8004cde:	f7ff fdc3 	bl	8004868 <LCD_1IN28_InitReg>

}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b002      	add	sp, #8
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8004cea:	b5b0      	push	{r4, r5, r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	0005      	movs	r5, r0
 8004cf2:	000c      	movs	r4, r1
 8004cf4:	0010      	movs	r0, r2
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	1dbb      	adds	r3, r7, #6
 8004cfa:	1c2a      	adds	r2, r5, #0
 8004cfc:	801a      	strh	r2, [r3, #0]
 8004cfe:	1d3b      	adds	r3, r7, #4
 8004d00:	1c22      	adds	r2, r4, #0
 8004d02:	801a      	strh	r2, [r3, #0]
 8004d04:	1cbb      	adds	r3, r7, #2
 8004d06:	1c02      	adds	r2, r0, #0
 8004d08:	801a      	strh	r2, [r3, #0]
 8004d0a:	003b      	movs	r3, r7
 8004d0c:	1c0a      	adds	r2, r1, #0
 8004d0e:	801a      	strh	r2, [r3, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8004d10:	202a      	movs	r0, #42	; 0x2a
 8004d12:	f7ff fd27 	bl	8004764 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8004d16:	2000      	movs	r0, #0
 8004d18:	f7ff fd4c 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 8004d1c:	1dbb      	adds	r3, r7, #6
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7ff fd46 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f7ff fd43 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 8004d2e:	1cbb      	adds	r3, r7, #2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7ff fd3d 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 8004d3a:	202b      	movs	r0, #43	; 0x2b
 8004d3c:	f7ff fd12 	bl	8004764 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8004d40:	2000      	movs	r0, #0
 8004d42:	f7ff fd37 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 8004d46:	1d3b      	adds	r3, r7, #4
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f7ff fd31 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8004d52:	2000      	movs	r0, #0
 8004d54:	f7ff fd2e 	bl	80047b4 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 8004d58:	003b      	movs	r3, r7
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f7ff fd28 	bl	80047b4 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 8004d64:	202c      	movs	r0, #44	; 0x2c
 8004d66:	f7ff fcfd 	bl	8004764 <LCD_1IN28_SendCommand>
}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b002      	add	sp, #8
 8004d70:	bdb0      	pop	{r4, r5, r7, pc}

08004d72 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	0002      	movs	r2, r0
 8004d7a:	1dbb      	adds	r3, r7, #6
 8004d7c:	801a      	strh	r2, [r3, #0]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 8004d7e:	23ef      	movs	r3, #239	; 0xef
 8004d80:	22ef      	movs	r2, #239	; 0xef
 8004d82:	2100      	movs	r1, #0
 8004d84:	2000      	movs	r0, #0
 8004d86:	f7ff ffb0 	bl	8004cea <LCD_1IN28_SetWindows>

	//DEV_Digital_Write(DEV_DC_PIN, 1);
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8004d8a:	230e      	movs	r3, #14
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	2200      	movs	r2, #0
 8004d90:	801a      	strh	r2, [r3, #0]
 8004d92:	e01a      	b.n	8004dca <LCD_1IN28_Clear+0x58>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8004d94:	230c      	movs	r3, #12
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	2200      	movs	r2, #0
 8004d9a:	801a      	strh	r2, [r3, #0]
 8004d9c:	e00a      	b.n	8004db4 <LCD_1IN28_Clear+0x42>
			LCD_1IN28_SendData_16Bit(Color);
 8004d9e:	1dbb      	adds	r3, r7, #6
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	0018      	movs	r0, r3
 8004da4:	f7ff fd2e 	bl	8004804 <LCD_1IN28_SendData_16Bit>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8004da8:	210c      	movs	r1, #12
 8004daa:	187b      	adds	r3, r7, r1
 8004dac:	881a      	ldrh	r2, [r3, #0]
 8004dae:	187b      	adds	r3, r7, r1
 8004db0:	3201      	adds	r2, #1
 8004db2:	801a      	strh	r2, [r3, #0]
 8004db4:	230c      	movs	r3, #12
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	2bef      	cmp	r3, #239	; 0xef
 8004dbc:	d9ef      	bls.n	8004d9e <LCD_1IN28_Clear+0x2c>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8004dbe:	210e      	movs	r1, #14
 8004dc0:	187b      	adds	r3, r7, r1
 8004dc2:	881a      	ldrh	r2, [r3, #0]
 8004dc4:	187b      	adds	r3, r7, r1
 8004dc6:	3201      	adds	r2, #1
 8004dc8:	801a      	strh	r2, [r3, #0]
 8004dca:	230e      	movs	r3, #14
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	2bef      	cmp	r3, #239	; 0xef
 8004dd2:	d9df      	bls.n	8004d94 <LCD_1IN28_Clear+0x22>
		}
	 }
}
 8004dd4:	46c0      	nop			; (mov r8, r8)
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	b004      	add	sp, #16
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <LCD_1IN28_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN28_SetBackLight(UWORD Value)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	0002      	movs	r2, r0
 8004de8:	1dbb      	adds	r3, r7, #6
 8004dea:	801a      	strh	r2, [r3, #0]
	DEV_Set_PWM(Value);
 8004dec:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <LCD_1IN28_SetBackLight+0x1c>)
 8004dee:	1dba      	adds	r2, r7, #6
 8004df0:	8812      	ldrh	r2, [r2, #0]
 8004df2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b002      	add	sp, #8
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40014400 	.word	0x40014400

08004e00 <LCD_1in28_test>:
#include "LCD_1in28.h"
#include "DEV_Config.h"


void LCD_1in28_test()
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
	DEV_Module_Init();
 8004e04:	f7ff fc62 	bl	80046cc <DEV_Module_Init>
  
	LCD_1IN28_SetBackLight(1000);
 8004e08:	23fa      	movs	r3, #250	; 0xfa
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff ffe7 	bl	8004de0 <LCD_1IN28_SetBackLight>
	LCD_1IN28_Init(VERTICAL);
 8004e12:	2001      	movs	r0, #1
 8004e14:	f7ff ff5b 	bl	8004cce <LCD_1IN28_Init>
 	LCD_1IN28_Clear(WHITE);
 8004e18:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <LCD_1in28_test+0x28>)
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f7ff ffa9 	bl	8004d72 <LCD_1IN28_Clear>
//	Paint_DrawLine  (120, 120, 120, 210,RED ,DOT_PIXEL_2X2,LINE_STYLE_SOLID);
//	DEV_Delay_ms(1000);
//
//	DEV_Module_Exit();
  
}
 8004e20:	46c0      	nop			; (mov r8, r8)
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	0000ffff 	.word	0x0000ffff

08004e2c <memset>:
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	1882      	adds	r2, r0, r2
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d100      	bne.n	8004e36 <memset+0xa>
 8004e34:	4770      	bx	lr
 8004e36:	7019      	strb	r1, [r3, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	e7f9      	b.n	8004e30 <memset+0x4>

08004e3c <__libc_init_array>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	2600      	movs	r6, #0
 8004e40:	4c0c      	ldr	r4, [pc, #48]	; (8004e74 <__libc_init_array+0x38>)
 8004e42:	4d0d      	ldr	r5, [pc, #52]	; (8004e78 <__libc_init_array+0x3c>)
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	42a6      	cmp	r6, r4
 8004e4a:	d109      	bne.n	8004e60 <__libc_init_array+0x24>
 8004e4c:	2600      	movs	r6, #0
 8004e4e:	f000 f819 	bl	8004e84 <_init>
 8004e52:	4c0a      	ldr	r4, [pc, #40]	; (8004e7c <__libc_init_array+0x40>)
 8004e54:	4d0a      	ldr	r5, [pc, #40]	; (8004e80 <__libc_init_array+0x44>)
 8004e56:	1b64      	subs	r4, r4, r5
 8004e58:	10a4      	asrs	r4, r4, #2
 8004e5a:	42a6      	cmp	r6, r4
 8004e5c:	d105      	bne.n	8004e6a <__libc_init_array+0x2e>
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
 8004e60:	00b3      	lsls	r3, r6, #2
 8004e62:	58eb      	ldr	r3, [r5, r3]
 8004e64:	4798      	blx	r3
 8004e66:	3601      	adds	r6, #1
 8004e68:	e7ee      	b.n	8004e48 <__libc_init_array+0xc>
 8004e6a:	00b3      	lsls	r3, r6, #2
 8004e6c:	58eb      	ldr	r3, [r5, r3]
 8004e6e:	4798      	blx	r3
 8004e70:	3601      	adds	r6, #1
 8004e72:	e7f2      	b.n	8004e5a <__libc_init_array+0x1e>
 8004e74:	08004f78 	.word	0x08004f78
 8004e78:	08004f78 	.word	0x08004f78
 8004e7c:	08004f7c 	.word	0x08004f7c
 8004e80:	08004f78 	.word	0x08004f78

08004e84 <_init>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr

08004e90 <_fini>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr
