
Remote_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f90  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc8  08006048  08006048  00016048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d10  08006d10  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006d10  08006d10  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d10  08006d10  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d10  08006d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000014  08006d2c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08006d2c  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ca9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000339a  00000000  00000000  00035d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  000390c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eef  00000000  00000000  0003a400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189fd  00000000  00000000  0003b2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a057  00000000  00000000  00053cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097318  00000000  00000000  0006dd43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004494  00000000  00000000  0010505c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001094f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000014 	.word	0x20000014
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006030 	.word	0x08006030

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000018 	.word	0x20000018
 80000fc:	08006030 	.word	0x08006030

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	230c      	movs	r3, #12
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f005 fdec 	bl	8005fd8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000400:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000402:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <MX_ADC1_Init+0xd0>)
 8000404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000406:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	05d2      	lsls	r2, r2, #23
 800040c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000414:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041a:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000422:	2204      	movs	r2, #4
 8000424:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000426:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000428:	2200      	movs	r2, #0
 800042a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800042c:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800042e:	2200      	movs	r2, #0
 8000430:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000434:	2200      	movs	r2, #0
 8000436:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000438:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800043a:	2201      	movs	r2, #1
 800043c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000440:	2220      	movs	r2, #32
 8000442:	2100      	movs	r1, #0
 8000444:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800044e:	2200      	movs	r2, #0
 8000450:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000454:	222c      	movs	r2, #44	; 0x2c
 8000456:	2100      	movs	r1, #0
 8000458:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800045c:	2200      	movs	r2, #0
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000462:	2200      	movs	r2, #0
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000468:	2200      	movs	r2, #0
 800046a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800046e:	223c      	movs	r2, #60	; 0x3c
 8000470:	2100      	movs	r1, #0
 8000472:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000476:	2200      	movs	r2, #0
 8000478:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800047c:	0018      	movs	r0, r3
 800047e:	f000 fee5 	bl	800124c <HAL_ADC_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000486:	f000 f9e3 	bl	8000850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <MX_ADC1_Init+0xd4>)
 800048e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049c:	1d3a      	adds	r2, r7, #4
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_ADC1_Init+0xcc>)
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 f968 	bl	8001778 <HAL_ADC_ConfigChannel>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004ac:	f000 f9d0 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000030 	.word	0x20000030
 80004bc:	40012400 	.word	0x40012400
 80004c0:	04000002 	.word	0x04000002

080004c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b08b      	sub	sp, #44	; 0x2c
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	2414      	movs	r4, #20
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	0018      	movs	r0, r3
 80004d2:	2314      	movs	r3, #20
 80004d4:	001a      	movs	r2, r3
 80004d6:	2100      	movs	r1, #0
 80004d8:	f005 fd7e 	bl	8005fd8 <memset>
  if(adcHandle->Instance==ADC1)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a18      	ldr	r2, [pc, #96]	; (8000544 <HAL_ADC_MspInit+0x80>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d129      	bne.n	800053a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004e6:	4b18      	ldr	r3, [pc, #96]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0349      	lsls	r1, r1, #13
 80004f0:	430a      	orrs	r2, r1
 80004f2:	641a      	str	r2, [r3, #64]	; 0x40
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	035b      	lsls	r3, r3, #13
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000508:	2101      	movs	r1, #1
 800050a:	430a      	orrs	r2, r1
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000512:	2201      	movs	r2, #1
 8000514:	4013      	ands	r3, r2
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Analog_In_Pin;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2202      	movs	r2, #2
 800051e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2203      	movs	r2, #3
 8000524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Analog_In_GPIO_Port, &GPIO_InitStruct);
 800052c:	193a      	adds	r2, r7, r4
 800052e:	23a0      	movs	r3, #160	; 0xa0
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fc31 	bl	8001d9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b00b      	add	sp, #44	; 0x2c
 8000540:	bd90      	pop	{r4, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40012400 	.word	0x40012400
 8000548:	40021000 	.word	0x40021000

0800054c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b089      	sub	sp, #36	; 0x24
 8000550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	240c      	movs	r4, #12
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	2314      	movs	r3, #20
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f005 fd3b 	bl	8005fd8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b44      	ldr	r3, [pc, #272]	; (8000674 <MX_GPIO_Init+0x128>)
 8000564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000566:	4b43      	ldr	r3, [pc, #268]	; (8000674 <MX_GPIO_Init+0x128>)
 8000568:	2102      	movs	r1, #2
 800056a:	430a      	orrs	r2, r1
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
 800056e:	4b41      	ldr	r3, [pc, #260]	; (8000674 <MX_GPIO_Init+0x128>)
 8000570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000572:	2202      	movs	r2, #2
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b3e      	ldr	r3, [pc, #248]	; (8000674 <MX_GPIO_Init+0x128>)
 800057c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <MX_GPIO_Init+0x128>)
 8000580:	2104      	movs	r1, #4
 8000582:	430a      	orrs	r2, r1
 8000584:	635a      	str	r2, [r3, #52]	; 0x34
 8000586:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <MX_GPIO_Init+0x128>)
 8000588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058a:	2204      	movs	r2, #4
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b38      	ldr	r3, [pc, #224]	; (8000674 <MX_GPIO_Init+0x128>)
 8000594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000596:	4b37      	ldr	r3, [pc, #220]	; (8000674 <MX_GPIO_Init+0x128>)
 8000598:	2101      	movs	r1, #1
 800059a:	430a      	orrs	r2, r1
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
 800059e:	4b35      	ldr	r3, [pc, #212]	; (8000674 <MX_GPIO_Init+0x128>)
 80005a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a2:	2201      	movs	r2, #1
 80005a4:	4013      	ands	r3, r2
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|SPI1_CSN_Pin, GPIO_PIN_RESET);
 80005aa:	4933      	ldr	r1, [pc, #204]	; (8000678 <MX_GPIO_Init+0x12c>)
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <MX_GPIO_Init+0x130>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fd57 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	021b      	lsls	r3, r3, #8
 80005ba:	4831      	ldr	r0, [pc, #196]	; (8000680 <MX_GPIO_Init+0x134>)
 80005bc:	2200      	movs	r2, #0
 80005be:	0019      	movs	r1, r3
 80005c0:	f001 fd50 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80005c4:	492f      	ldr	r1, [pc, #188]	; (8000684 <MX_GPIO_Init+0x138>)
 80005c6:	23a0      	movs	r3, #160	; 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2200      	movs	r2, #0
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fd49 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_Pin|SPI1_CSN_Pin;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <MX_GPIO_Init+0x12c>)
 80005d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2201      	movs	r2, #1
 80005dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	4a23      	ldr	r2, [pc, #140]	; (800067c <MX_GPIO_Init+0x130>)
 80005ee:	0019      	movs	r1, r3
 80005f0:	0010      	movs	r0, r2
 80005f2:	f001 fbd3 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DC_Pin;
 80005f6:	0021      	movs	r1, r4
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	0212      	lsls	r2, r2, #8
 80005fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	000c      	movs	r4, r1
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2201      	movs	r2, #1
 8000606:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000614:	193b      	adds	r3, r7, r4
 8000616:	4a1a      	ldr	r2, [pc, #104]	; (8000680 <MX_GPIO_Init+0x134>)
 8000618:	0019      	movs	r1, r3
 800061a:	0010      	movs	r0, r2
 800061c:	f001 fbbe 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RST_Pin|LED_Pin|NRF_CE_Pin;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <MX_GPIO_Init+0x138>)
 8000624:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	2201      	movs	r2, #1
 800062a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	193a      	adds	r2, r7, r4
 800063a:	23a0      	movs	r3, #160	; 0xa0
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fbab 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_In_Pin;
 8000646:	0021      	movs	r1, r4
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	0152      	lsls	r2, r2, #5
 800064e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_In_GPIO_Port, &GPIO_InitStruct);
 800065c:	187a      	adds	r2, r7, r1
 800065e:	23a0      	movs	r3, #160	; 0xa0
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fb99 	bl	8001d9c <HAL_GPIO_Init>

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b009      	add	sp, #36	; 0x24
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000
 8000678:	00000201 	.word	0x00000201
 800067c:	50000400 	.word	0x50000400
 8000680:	50000800 	.word	0x50000800
 8000684:	00000888 	.word	0x00000888

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fbfd 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f895 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f7ff ff59 	bl	800054c <MX_GPIO_Init>
  MX_ADC1_Init();
 800069a:	f7ff fea7 	bl	80003ec <MX_ADC1_Init>
  MX_SPI1_Init();
 800069e:	f000 f8dd 	bl	800085c <MX_SPI1_Init>
  MX_SPI2_Init();
 80006a2:	f000 f919 	bl	80008d8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80006a6:	f000 fb17 	bl	8000cd8 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80006aa:	f000 fa2d 	bl	8000b08 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //LCD1in28works();
  //LCD_1in28_test();

  int32_t counter = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
  int32_t raw = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]


  	DEV_Module_Init();
 80006b6:	f004 fa3d 	bl	8004b34 <DEV_Module_Init>

  	LCD_1IN28_SetBackLight(1000);
 80006ba:	23fa      	movs	r3, #250	; 0xfa
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	0018      	movs	r0, r3
 80006c0:	f005 fc7a 	bl	8005fb8 <LCD_1IN28_SetBackLight>
  	LCD_1IN28_Init(VERTICAL);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f005 fbc7 	bl	8005e58 <LCD_1IN28_Init>
   	//LCD_1IN28_Clear(BLACK);

  	Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, BLACK);
 80006ca:	2300      	movs	r3, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	21f0      	movs	r1, #240	; 0xf0
 80006d0:	20f0      	movs	r0, #240	; 0xf0
 80006d2:	f004 fa55 	bl	8004b80 <Paint_NewImage>

  	Paint_SetClearFuntion(LCD_1IN28_Clear);
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <main+0x114>)
 80006d8:	0018      	movs	r0, r3
 80006da:	f004 fa9f 	bl	8004c1c <Paint_SetClearFuntion>
  	Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 80006de:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <main+0x118>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f004 faa9 	bl	8004c38 <Paint_SetDisplayFuntion>
  	Paint_DrawString_EN(70, 100, "LOADING...", &Font16, BLACK, DARKORANGE);
 80006e6:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <main+0x11c>)
 80006e8:	4a2f      	ldr	r2, [pc, #188]	; (80007a8 <main+0x120>)
 80006ea:	4930      	ldr	r1, [pc, #192]	; (80007ac <main+0x124>)
 80006ec:	9101      	str	r1, [sp, #4]
 80006ee:	2100      	movs	r1, #0
 80006f0:	9100      	str	r1, [sp, #0]
 80006f2:	2164      	movs	r1, #100	; 0x64
 80006f4:	2046      	movs	r0, #70	; 0x46
 80006f6:	f004 ff51 	bl	800559c <Paint_DrawString_EN>

  	Paint_Clear(DARKBLUE);
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <main+0x128>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f004 fb89 	bl	8004e14 <Paint_Clear>
  	DEV_Delay_ms(100);
 8000702:	2064      	movs	r0, #100	; 0x64
 8000704:	f000 fc48 	bl	8000f98 <HAL_Delay>

  	Paint_DrawRectangle(115, 115, 136, 141, DARKRED, 2, 0);
 8000708:	2300      	movs	r3, #0
 800070a:	9302      	str	r3, [sp, #8]
 800070c:	2302      	movs	r3, #2
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <main+0x12c>)
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	238d      	movs	r3, #141	; 0x8d
 8000716:	2288      	movs	r2, #136	; 0x88
 8000718:	2173      	movs	r1, #115	; 0x73
 800071a:	2073      	movs	r0, #115	; 0x73
 800071c:	f004 fd8e 	bl	800523c <Paint_DrawRectangle>
	  Paint_DrawNum(120, 120, counter, &Font16, DARKBLUE, DARKGREEN);
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <main+0x11c>)
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	4924      	ldr	r1, [pc, #144]	; (80007b8 <main+0x130>)
 8000726:	9101      	str	r1, [sp, #4]
 8000728:	4921      	ldr	r1, [pc, #132]	; (80007b0 <main+0x128>)
 800072a:	9100      	str	r1, [sp, #0]
 800072c:	2178      	movs	r1, #120	; 0x78
 800072e:	2078      	movs	r0, #120	; 0x78
 8000730:	f004 ffb2 	bl	8005698 <Paint_DrawNum>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //if(HAL_GPIO_ReadPin (Button_In_GPIO_Port, Button_In_Pin) == GPIO_PIN_RESET){
  	  	  HAL_ADC_Start(&hadc1);
 8000734:	4b21      	ldr	r3, [pc, #132]	; (80007bc <main+0x134>)
 8000736:	0018      	movs	r0, r3
 8000738:	f000 ff30 	bl	800159c <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800073c:	2301      	movs	r3, #1
 800073e:	425a      	negs	r2, r3
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <main+0x134>)
 8000742:	0011      	movs	r1, r2
 8000744:	0018      	movs	r0, r3
 8000746:	f000 ff77 	bl	8001638 <HAL_ADC_PollForConversion>
	      raw = HAL_ADC_GetValue(&hadc1);
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <main+0x134>)
 800074c:	0018      	movs	r0, r3
 800074e:	f001 f807 	bl	8001760 <HAL_ADC_GetValue>
 8000752:	0003      	movs	r3, r0
 8000754:	603b      	str	r3, [r7, #0]
		  counter++;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3301      	adds	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
		  Paint_ClearWindows(120, 100, 166, 116, BLACK);
 800075c:	2300      	movs	r3, #0
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2374      	movs	r3, #116	; 0x74
 8000762:	22a6      	movs	r2, #166	; 0xa6
 8000764:	2164      	movs	r1, #100	; 0x64
 8000766:	2078      	movs	r0, #120	; 0x78
 8000768:	f004 fb66 	bl	8004e38 <Paint_ClearWindows>
		  Paint_DrawNum(120, 100, raw, &Font16, DARKBLUE, DARKGREEN);
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <main+0x11c>)
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	4911      	ldr	r1, [pc, #68]	; (80007b8 <main+0x130>)
 8000772:	9101      	str	r1, [sp, #4]
 8000774:	490e      	ldr	r1, [pc, #56]	; (80007b0 <main+0x128>)
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	2164      	movs	r1, #100	; 0x64
 800077a:	2078      	movs	r0, #120	; 0x78
 800077c:	f004 ff8c 	bl	8005698 <Paint_DrawNum>
		  Paint_DrawNum(120, 120, counter, &Font16, DARKBLUE, DARKGREEN);
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <main+0x11c>)
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	490c      	ldr	r1, [pc, #48]	; (80007b8 <main+0x130>)
 8000786:	9101      	str	r1, [sp, #4]
 8000788:	4909      	ldr	r1, [pc, #36]	; (80007b0 <main+0x128>)
 800078a:	9100      	str	r1, [sp, #0]
 800078c:	2178      	movs	r1, #120	; 0x78
 800078e:	2078      	movs	r0, #120	; 0x78
 8000790:	f004 ff82 	bl	8005698 <Paint_DrawNum>
		  HAL_Delay(250);
 8000794:	20fa      	movs	r0, #250	; 0xfa
 8000796:	f000 fbff 	bl	8000f98 <HAL_Delay>
  	  	  HAL_ADC_Start(&hadc1);
 800079a:	e7cb      	b.n	8000734 <main+0xac>
 800079c:	08005f07 	.word	0x08005f07
 80007a0:	08005f73 	.word	0x08005f73
 80007a4:	2000000c 	.word	0x2000000c
 80007a8:	08006048 	.word	0x08006048
 80007ac:	0000ab84 	.word	0x0000ab84
 80007b0:	00000908 	.word	0x00000908
 80007b4:	00006862 	.word	0x00006862
 80007b8:	00004c42 	.word	0x00004c42
 80007bc:	20000030 	.word	0x20000030

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b093      	sub	sp, #76	; 0x4c
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	2414      	movs	r4, #20
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	0018      	movs	r0, r3
 80007cc:	2334      	movs	r3, #52	; 0x34
 80007ce:	001a      	movs	r2, r3
 80007d0:	2100      	movs	r1, #0
 80007d2:	f005 fc01 	bl	8005fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	0018      	movs	r0, r3
 80007da:	2310      	movs	r3, #16
 80007dc:	001a      	movs	r2, r3
 80007de:	2100      	movs	r1, #0
 80007e0:	f005 fbfa 	bl	8005fd8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 fc59 	bl	80020a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2202      	movs	r2, #2
 80007f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	0052      	lsls	r2, r2, #1
 80007fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2240      	movs	r2, #64	; 0x40
 8000806:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	193b      	adds	r3, r7, r4
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fc91 	bl	8002138 <HAL_RCC_OscConfig>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800081a:	f000 f819 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2207      	movs	r2, #7
 8000822:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2100      	movs	r1, #0
 800083a:	0018      	movs	r0, r3
 800083c:	f001 ff8c 	bl	8002758 <HAL_RCC_ClockConfig>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000844:	f000 f804 	bl	8000850 <Error_Handler>
  }
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b013      	add	sp, #76	; 0x4c
 800084e:	bd90      	pop	{r4, r7, pc}

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <MX_SPI1_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000868:	2282      	movs	r2, #130	; 0x82
 800086a:	0052      	lsls	r2, r2, #1
 800086c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000876:	22e0      	movs	r2, #224	; 0xe0
 8000878:	00d2      	lsls	r2, r2, #3
 800087a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_SPI1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_SPI1_Init+0x74>)
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	0092      	lsls	r2, r2, #2
 800088e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_SPI1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008aa:	2207      	movs	r2, #7
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008b6:	2208      	movs	r2, #8
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f002 fa1b 	bl	8002cf8 <HAL_SPI_Init>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f7ff ffc3 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000094 	.word	0x20000094
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_SPI2_Init+0x74>)
 80008de:	4a1c      	ldr	r2, [pc, #112]	; (8000950 <MX_SPI2_Init+0x78>)
 80008e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_SPI2_Init+0x74>)
 80008e4:	2282      	movs	r2, #130	; 0x82
 80008e6:	0052      	lsls	r2, r2, #1
 80008e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_SPI2_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_SPI2_Init+0x74>)
 80008f2:	22e0      	movs	r2, #224	; 0xe0
 80008f4:	00d2      	lsls	r2, r2, #3
 80008f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_SPI2_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_SPI2_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_SPI2_Init+0x74>)
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	0092      	lsls	r2, r2, #2
 800090a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_SPI2_Init+0x74>)
 800090e:	2208      	movs	r2, #8
 8000910:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_SPI2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_SPI2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_SPI2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_SPI2_Init+0x74>)
 8000926:	2207      	movs	r2, #7
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_SPI2_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_SPI2_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <MX_SPI2_Init+0x74>)
 8000938:	0018      	movs	r0, r3
 800093a:	f002 f9dd 	bl	8002cf8 <HAL_SPI_Init>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000942:	f7ff ff85 	bl	8000850 <Error_Handler>
  /* USER CODE BEGIN SPI2_Init 2 */
//ALways change line 77 to
  //hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  /* USER CODE END SPI2_Init 2 */

}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000f8 	.word	0x200000f8
 8000950:	40003800 	.word	0x40003800

08000954 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b08d      	sub	sp, #52	; 0x34
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	241c      	movs	r4, #28
 800095e:	193b      	adds	r3, r7, r4
 8000960:	0018      	movs	r0, r3
 8000962:	2314      	movs	r3, #20
 8000964:	001a      	movs	r2, r3
 8000966:	2100      	movs	r1, #0
 8000968:	f005 fb36 	bl	8005fd8 <memset>
  if(spiHandle->Instance==SPI1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a42      	ldr	r2, [pc, #264]	; (8000a7c <HAL_SPI_MspInit+0x128>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d131      	bne.n	80009da <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000976:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <HAL_SPI_MspInit+0x12c>)
 8000978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800097a:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <HAL_SPI_MspInit+0x12c>)
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	0149      	lsls	r1, r1, #5
 8000980:	430a      	orrs	r2, r1
 8000982:	641a      	str	r2, [r3, #64]	; 0x40
 8000984:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <HAL_SPI_MspInit+0x12c>)
 8000986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	015b      	lsls	r3, r3, #5
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <HAL_SPI_MspInit+0x12c>)
 8000994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000996:	4b3a      	ldr	r3, [pc, #232]	; (8000a80 <HAL_SPI_MspInit+0x12c>)
 8000998:	2101      	movs	r1, #1
 800099a:	430a      	orrs	r2, r1
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
 800099e:	4b38      	ldr	r3, [pc, #224]	; (8000a80 <HAL_SPI_MspInit+0x12c>)
 80009a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a2:	2201      	movs	r2, #1
 80009a4:	4013      	ands	r3, r2
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80009aa:	0021      	movs	r1, r4
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2264      	movs	r2, #100	; 0x64
 80009b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2202      	movs	r2, #2
 80009b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	187a      	adds	r2, r7, r1
 80009cc:	23a0      	movs	r3, #160	; 0xa0
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	0011      	movs	r1, r2
 80009d2:	0018      	movs	r0, r3
 80009d4:	f001 f9e2 	bl	8001d9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80009d8:	e04c      	b.n	8000a74 <HAL_SPI_MspInit+0x120>
  else if(spiHandle->Instance==SPI2)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a29      	ldr	r2, [pc, #164]	; (8000a84 <HAL_SPI_MspInit+0x130>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d147      	bne.n	8000a74 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <HAL_SPI_MspInit+0x12c>)
 80009e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <HAL_SPI_MspInit+0x12c>)
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	01c9      	lsls	r1, r1, #7
 80009ee:	430a      	orrs	r2, r1
 80009f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80009f2:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <HAL_SPI_MspInit+0x12c>)
 80009f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	01db      	lsls	r3, r3, #7
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <HAL_SPI_MspInit+0x12c>)
 8000a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <HAL_SPI_MspInit+0x12c>)
 8000a06:	2101      	movs	r1, #1
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_SPI_MspInit+0x12c>)
 8000a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a10:	2201      	movs	r2, #1
 8000a12:	4013      	ands	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a18:	241c      	movs	r4, #28
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2202      	movs	r2, #2
 8000a24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2202      	movs	r2, #2
 8000a30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	193a      	adds	r2, r7, r4
 8000a3a:	23a0      	movs	r3, #160	; 0xa0
 8000a3c:	05db      	lsls	r3, r3, #23
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f001 f9ab 	bl	8001d9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a46:	0021      	movs	r1, r4
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2210      	movs	r2, #16
 8000a4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2202      	movs	r2, #2
 8000a52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2201      	movs	r2, #1
 8000a64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	187a      	adds	r2, r7, r1
 8000a68:	23a0      	movs	r3, #160	; 0xa0
 8000a6a:	05db      	lsls	r3, r3, #23
 8000a6c:	0011      	movs	r1, r2
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f001 f994 	bl	8001d9c <HAL_GPIO_Init>
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b00d      	add	sp, #52	; 0x34
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	40013000 	.word	0x40013000
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40003800 	.word	0x40003800

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x44>)
 8000a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_MspInit+0x44>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	430a      	orrs	r2, r1
 8000a98:	641a      	str	r2, [r3, #64]	; 0x40
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_MspInit+0x44>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x44>)
 8000aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_MspInit+0x44>)
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	0549      	lsls	r1, r1, #21
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_MspInit+0x44>)
 8000ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	055b      	lsls	r3, r3, #21
 8000abc:	4013      	ands	r3, r2
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b002      	add	sp, #8
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40021000 	.word	0x40021000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 fa34 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	; 0x50
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0e:	2334      	movs	r3, #52	; 0x34
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	0018      	movs	r0, r3
 8000b14:	231c      	movs	r3, #28
 8000b16:	001a      	movs	r2, r3
 8000b18:	2100      	movs	r1, #0
 8000b1a:	f005 fa5d 	bl	8005fd8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b1e:	003b      	movs	r3, r7
 8000b20:	0018      	movs	r0, r3
 8000b22:	2334      	movs	r3, #52	; 0x34
 8000b24:	001a      	movs	r2, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	f005 fa56 	bl	8005fd8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b2c:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <MX_TIM16_Init+0x108>)
 8000b2e:	4a39      	ldr	r2, [pc, #228]	; (8000c14 <MX_TIM16_Init+0x10c>)
 8000b30:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 300-1;
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <MX_TIM16_Init+0x108>)
 8000b34:	222c      	movs	r2, #44	; 0x2c
 8000b36:	32ff      	adds	r2, #255	; 0xff
 8000b38:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3a:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <MX_TIM16_Init+0x108>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8000b40:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <MX_TIM16_Init+0x108>)
 8000b42:	4a35      	ldr	r2, [pc, #212]	; (8000c18 <MX_TIM16_Init+0x110>)
 8000b44:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b46:	4b32      	ldr	r3, [pc, #200]	; (8000c10 <MX_TIM16_Init+0x108>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b4c:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <MX_TIM16_Init+0x108>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b52:	4b2f      	ldr	r3, [pc, #188]	; (8000c10 <MX_TIM16_Init+0x108>)
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b58:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <MX_TIM16_Init+0x108>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f002 fc5a 	bl	8003414 <HAL_TIM_Base_Init>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000b64:	f7ff fe74 	bl	8000850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <MX_TIM16_Init+0x108>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f002 fcaa 	bl	80034c4 <HAL_TIM_PWM_Init>
 8000b70:	1e03      	subs	r3, r0, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000b74:	f7ff fe6c 	bl	8000850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b78:	2134      	movs	r1, #52	; 0x34
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2260      	movs	r2, #96	; 0x60
 8000b7e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba4:	1879      	adds	r1, r7, r1
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_TIM16_Init+0x108>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f002 fdc2 	bl	8003734 <HAL_TIM_PWM_ConfigChannel>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8000bb4:	f7ff fe4c 	bl	8000850 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bb8:	003b      	movs	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc4:	003b      	movs	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bca:	003b      	movs	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd0:	003b      	movs	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd6:	003b      	movs	r3, r7
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	0192      	lsls	r2, r2, #6
 8000bdc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bde:	003b      	movs	r3, r7
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000be4:	003b      	movs	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000bea:	003a      	movs	r2, r7
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_TIM16_Init+0x108>)
 8000bee:	0011      	movs	r1, r2
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f003 f9d9 	bl	8003fa8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM16_Init+0xf6>
  {
    Error_Handler();
 8000bfa:	f7ff fe29 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <MX_TIM16_Init+0x108>)
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 f82b 	bl	8000c5c <HAL_TIM_MspPostInit>

}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b014      	add	sp, #80	; 0x50
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	2000015c 	.word	0x2000015c
 8000c14:	40014400 	.word	0x40014400
 8000c18:	000003e7 	.word	0x000003e7

08000c1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_TIM_Base_MspInit+0x38>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d10d      	bne.n	8000c4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_TIM_Base_MspInit+0x3c>)
 8000c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_TIM_Base_MspInit+0x3c>)
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	0289      	lsls	r1, r1, #10
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_TIM_Base_MspInit+0x3c>)
 8000c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	029b      	lsls	r3, r3, #10
 8000c44:	4013      	ands	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b004      	add	sp, #16
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	40014400 	.word	0x40014400
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	240c      	movs	r4, #12
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	0018      	movs	r0, r3
 8000c6a:	2314      	movs	r3, #20
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	2100      	movs	r1, #0
 8000c70:	f005 f9b2 	bl	8005fd8 <memset>
  if(timHandle->Instance==TIM16)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <HAL_TIM_MspPostInit+0x70>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d122      	bne.n	8000cc4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_TIM_MspPostInit+0x74>)
 8000c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_TIM_MspPostInit+0x74>)
 8000c84:	2102      	movs	r1, #2
 8000c86:	430a      	orrs	r2, r1
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_TIM_MspPostInit+0x74>)
 8000c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8e:	2202      	movs	r2, #2
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BL_Pin;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	0052      	lsls	r2, r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	0021      	movs	r1, r4
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BL_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_TIM_MspPostInit+0x78>)
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	0010      	movs	r0, r2
 8000cc0:	f001 f86c 	bl	8001d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b009      	add	sp, #36	; 0x24
 8000cca:	bd90      	pop	{r4, r7, pc}
 8000ccc:	40014400 	.word	0x40014400
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	50000400 	.word	0x50000400

08000cd8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cdc:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000cde:	4a24      	ldr	r2, [pc, #144]	; (8000d70 <MX_USART1_UART_Init+0x98>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ce2:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000ce4:	22e1      	movs	r2, #225	; 0xe1
 8000ce6:	0252      	lsls	r2, r2, #9
 8000ce8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000d22:	0018      	movs	r0, r3
 8000d24:	f003 f9dc 	bl	80040e0 <HAL_HalfDuplex_Init>
 8000d28:	1e03      	subs	r3, r0, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d2c:	f7ff fd90 	bl	8000850 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000d32:	2100      	movs	r1, #0
 8000d34:	0018      	movs	r0, r3
 8000d36:	f003 fe09 	bl	800494c <HAL_UARTEx_SetTxFifoThreshold>
 8000d3a:	1e03      	subs	r3, r0, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d3e:	f7ff fd87 	bl	8000850 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000d44:	2100      	movs	r1, #0
 8000d46:	0018      	movs	r0, r3
 8000d48:	f003 fe40 	bl	80049cc <HAL_UARTEx_SetRxFifoThreshold>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d50:	f7ff fd7e 	bl	8000850 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <MX_USART1_UART_Init+0x94>)
 8000d56:	0018      	movs	r0, r3
 8000d58:	f003 fdbe 	bl	80048d8 <HAL_UARTEx_DisableFifoMode>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d60:	f7ff fd76 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	200001a8 	.word	0x200001a8
 8000d70:	40013800 	.word	0x40013800

08000d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b091      	sub	sp, #68	; 0x44
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	232c      	movs	r3, #44	; 0x2c
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	0018      	movs	r0, r3
 8000d82:	2314      	movs	r3, #20
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f005 f926 	bl	8005fd8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8c:	2414      	movs	r4, #20
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	0018      	movs	r0, r3
 8000d92:	2318      	movs	r3, #24
 8000d94:	001a      	movs	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	f005 f91e 	bl	8005fd8 <memset>
  if(uartHandle->Instance==USART1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a22      	ldr	r2, [pc, #136]	; (8000e2c <HAL_UART_MspInit+0xb8>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d13d      	bne.n	8000e22 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	2200      	movs	r2, #0
 8000db0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	0018      	movs	r0, r3
 8000db6:	f001 fe79 	bl	8002aac <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dbe:	f7ff fd47 	bl	8000850 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_UART_MspInit+0xbc>)
 8000dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_UART_MspInit+0xbc>)
 8000dc8:	2180      	movs	r1, #128	; 0x80
 8000dca:	01c9      	lsls	r1, r1, #7
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	641a      	str	r2, [r3, #64]	; 0x40
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_UART_MspInit+0xbc>)
 8000dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	01db      	lsls	r3, r3, #7
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_UART_MspInit+0xbc>)
 8000de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_UART_MspInit+0xbc>)
 8000de4:	2102      	movs	r1, #2
 8000de6:	430a      	orrs	r2, r1
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_UART_MspInit+0xbc>)
 8000dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dee:	2202      	movs	r2, #2
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000df6:	212c      	movs	r1, #44	; 0x2c
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2240      	movs	r2, #64	; 0x40
 8000dfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2212      	movs	r2, #18
 8000e02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2201      	movs	r2, #1
 8000e08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <HAL_UART_MspInit+0xc0>)
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	0010      	movs	r0, r2
 8000e1e:	f000 ffbd 	bl	8001d9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b011      	add	sp, #68	; 0x44
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	40013800 	.word	0x40013800
 8000e30:	40021000 	.word	0x40021000
 8000e34:	50000400 	.word	0x50000400

08000e38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e3c:	f7ff fe5f 	bl	8000afe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	; (8000e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <LoopForever+0xe>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	; (8000e84 <LoopForever+0x16>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e66:	f005 f8bf 	bl	8005fe8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e6a:	f7ff fc0d 	bl	8000688 <main>

08000e6e <LoopForever>:

LoopForever:
  b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   r0, =_estack
 8000e70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e7c:	08006d18 	.word	0x08006d18
  ldr r2, =_sbss
 8000e80:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e84:	20000268 	.word	0x20000268

08000e88 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_Init+0x3c>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_Init+0x3c>)
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	0049      	lsls	r1, r1, #1
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	f000 f810 	bl	8000ecc <HAL_InitTick>
 8000eac:	1e03      	subs	r3, r0, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e001      	b.n	8000ebc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fde6 	bl	8000a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	781b      	ldrb	r3, [r3, #0]
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40022000 	.word	0x40022000

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_InitTick+0x88>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d02b      	beq.n	8000f3c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_InitTick+0x8c>)
 8000ee6:	681c      	ldr	r4, [r3, #0]
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_InitTick+0x88>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	0019      	movs	r1, r3
 8000eee:	23fa      	movs	r3, #250	; 0xfa
 8000ef0:	0098      	lsls	r0, r3, #2
 8000ef2:	f7ff f905 	bl	8000100 <__udivsi3>
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	0019      	movs	r1, r3
 8000efa:	0020      	movs	r0, r4
 8000efc:	f7ff f900 	bl	8000100 <__udivsi3>
 8000f00:	0003      	movs	r3, r0
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 ff3d 	bl	8001d82 <HAL_SYSTICK_Config>
 8000f08:	1e03      	subs	r3, r0, #0
 8000f0a:	d112      	bne.n	8000f32 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d80a      	bhi.n	8000f28 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	2301      	movs	r3, #1
 8000f16:	425b      	negs	r3, r3
 8000f18:	2200      	movs	r2, #0
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 ff1c 	bl	8001d58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_InitTick+0x90>)
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e00d      	b.n	8000f44 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f28:	230f      	movs	r3, #15
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e008      	b.n	8000f44 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f32:	230f      	movs	r3, #15
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
 8000f3a:	e003      	b.n	8000f44 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f44:	230f      	movs	r3, #15
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	781b      	ldrb	r3, [r3, #0]
}
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b005      	add	sp, #20
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_IncTick+0x1c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	001a      	movs	r2, r3
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_IncTick+0x20>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	18d2      	adds	r2, r2, r3
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_IncTick+0x20>)
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	2000023c 	.word	0x2000023c

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b02      	ldr	r3, [pc, #8]	; (8000f94 <HAL_GetTick+0x10>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	2000023c 	.word	0x2000023c

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff fff0 	bl	8000f84 <HAL_GetTick>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	d005      	beq.n	8000fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_Delay+0x44>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	001a      	movs	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	189b      	adds	r3, r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	f7ff ffe0 	bl	8000f84 <HAL_GetTick>
 8000fc4:	0002      	movs	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f7      	bhi.n	8000fc0 <HAL_Delay+0x28>
  {
  }
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b004      	add	sp, #16
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	fe3fffff 	.word	0xfe3fffff

08001008 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	23e0      	movs	r3, #224	; 0xe0
 8001016:	045b      	lsls	r3, r3, #17
 8001018:	4013      	ands	r3, r2
}
 800101a:	0018      	movs	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}

08001022 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	2104      	movs	r1, #4
 8001036:	400a      	ands	r2, r1
 8001038:	2107      	movs	r1, #7
 800103a:	4091      	lsls	r1, r2
 800103c:	000a      	movs	r2, r1
 800103e:	43d2      	mvns	r2, r2
 8001040:	401a      	ands	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2104      	movs	r1, #4
 8001046:	400b      	ands	r3, r1
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	4099      	lsls	r1, r3
 800104c:	000b      	movs	r3, r1
 800104e:	431a      	orrs	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b004      	add	sp, #16
 800105a:	bd80      	pop	{r7, pc}

0800105c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	2104      	movs	r1, #4
 800106e:	400a      	ands	r2, r1
 8001070:	2107      	movs	r1, #7
 8001072:	4091      	lsls	r1, r2
 8001074:	000a      	movs	r2, r1
 8001076:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2104      	movs	r1, #4
 800107c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800107e:	40da      	lsrs	r2, r3
 8001080:	0013      	movs	r3, r2
}
 8001082:	0018      	movs	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	b002      	add	sp, #8
 8001088:	bd80      	pop	{r7, pc}

0800108a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	23c0      	movs	r3, #192	; 0xc0
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	4013      	ands	r3, r2
 800109c:	d101      	bne.n	80010a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}

080010ac <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	211f      	movs	r1, #31
 80010c0:	400a      	ands	r2, r1
 80010c2:	210f      	movs	r1, #15
 80010c4:	4091      	lsls	r1, r2
 80010c6:	000a      	movs	r2, r1
 80010c8:	43d2      	mvns	r2, r2
 80010ca:	401a      	ands	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	0e9b      	lsrs	r3, r3, #26
 80010d0:	210f      	movs	r1, #15
 80010d2:	4019      	ands	r1, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	201f      	movs	r0, #31
 80010d8:	4003      	ands	r3, r0
 80010da:	4099      	lsls	r1, r3
 80010dc:	000b      	movs	r3, r1
 80010de:	431a      	orrs	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b004      	add	sp, #16
 80010ea:	bd80      	pop	{r7, pc}

080010ec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	035b      	lsls	r3, r3, #13
 80010fe:	0b5b      	lsrs	r3, r3, #13
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b002      	add	sp, #8
 800110c:	bd80      	pop	{r7, pc}

0800110e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	0352      	lsls	r2, r2, #13
 8001120:	0b52      	lsrs	r2, r2, #13
 8001122:	43d2      	mvns	r2, r2
 8001124:	401a      	ands	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	0212      	lsls	r2, r2, #8
 8001148:	43d2      	mvns	r2, r2
 800114a:	401a      	ands	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	400b      	ands	r3, r1
 8001154:	4904      	ldr	r1, [pc, #16]	; (8001168 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001156:	400b      	ands	r3, r1
 8001158:	431a      	orrs	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b004      	add	sp, #16
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	07ffff00 	.word	0x07ffff00

0800116c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4a05      	ldr	r2, [pc, #20]	; (8001190 <LL_ADC_EnableInternalRegulator+0x24>)
 800117a:	4013      	ands	r3, r2
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	0552      	lsls	r2, r2, #21
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	6fffffe8 	.word	0x6fffffe8

08001194 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	055b      	lsls	r3, r3, #21
 80011a4:	401a      	ands	r2, r3
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	055b      	lsls	r3, r3, #21
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d101      	bne.n	80011b2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	0018      	movs	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}

080011bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <LL_ADC_Enable+0x20>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	2201      	movs	r2, #1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	7fffffe8 	.word	0x7fffffe8

080011e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <LL_ADC_IsEnabled+0x18>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <LL_ADC_IsEnabled+0x1a>
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <LL_ADC_REG_StartConversion+0x20>)
 8001212:	4013      	ands	r3, r2
 8001214:	2204      	movs	r2, #4
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}
 8001224:	7fffffe8 	.word	0x7fffffe8

08001228 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2204      	movs	r2, #4
 8001236:	4013      	ands	r3, r2
 8001238:	2b04      	cmp	r3, #4
 800123a:	d101      	bne.n	8001240 <LL_ADC_REG_IsConversionOngoing+0x18>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001240:	2300      	movs	r3, #0
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001254:	231f      	movs	r3, #31
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e17f      	b.n	8001572 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10a      	bne.n	8001290 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff f921 	bl	80004c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2254      	movs	r2, #84	; 0x54
 800128c:	2100      	movs	r1, #0
 800128e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	0018      	movs	r0, r3
 8001296:	f7ff ff7d 	bl	8001194 <LL_ADC_IsInternalRegulatorEnabled>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d115      	bne.n	80012ca <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff ff62 	bl	800116c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012a8:	4bb4      	ldr	r3, [pc, #720]	; (800157c <HAL_ADC_Init+0x330>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	49b4      	ldr	r1, [pc, #720]	; (8001580 <HAL_ADC_Init+0x334>)
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7fe ff26 	bl	8000100 <__udivsi3>
 80012b4:	0003      	movs	r3, r0
 80012b6:	3301      	adds	r3, #1
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012bc:	e002      	b.n	80012c4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f9      	bne.n	80012be <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	0018      	movs	r0, r3
 80012d0:	f7ff ff60 	bl	8001194 <LL_ADC_IsInternalRegulatorEnabled>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d10f      	bne.n	80012f8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	2210      	movs	r2, #16
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e8:	2201      	movs	r2, #1
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80012f0:	231f      	movs	r3, #31
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff ff93 	bl	8001228 <LL_ADC_REG_IsConversionOngoing>
 8001302:	0003      	movs	r3, r0
 8001304:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	2210      	movs	r2, #16
 800130c:	4013      	ands	r3, r2
 800130e:	d000      	beq.n	8001312 <HAL_ADC_Init+0xc6>
 8001310:	e122      	b.n	8001558 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d000      	beq.n	800131a <HAL_ADC_Init+0xce>
 8001318:	e11e      	b.n	8001558 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	4a99      	ldr	r2, [pc, #612]	; (8001584 <HAL_ADC_Init+0x338>)
 8001320:	4013      	ands	r3, r2
 8001322:	2202      	movs	r2, #2
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff ff56 	bl	80011e0 <LL_ADC_IsEnabled>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d000      	beq.n	800133a <HAL_ADC_Init+0xee>
 8001338:	e0ad      	b.n	8001496 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7e1b      	ldrb	r3, [r3, #24]
 8001342:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001344:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7e5b      	ldrb	r3, [r3, #25]
 800134a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800134c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7e9b      	ldrb	r3, [r3, #26]
 8001352:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001354:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <HAL_ADC_Init+0x118>
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	015b      	lsls	r3, r3, #5
 8001362:	e000      	b.n	8001366 <HAL_ADC_Init+0x11a>
 8001364:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001366:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800136c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	2b00      	cmp	r3, #0
 8001374:	da04      	bge.n	8001380 <HAL_ADC_Init+0x134>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	085b      	lsrs	r3, r3, #1
 800137e:	e001      	b.n	8001384 <HAL_ADC_Init+0x138>
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001384:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	212c      	movs	r1, #44	; 0x2c
 800138a:	5c5b      	ldrb	r3, [r3, r1]
 800138c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800138e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2220      	movs	r2, #32
 800139a:	5c9b      	ldrb	r3, [r3, r2]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d115      	bne.n	80013cc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7e9b      	ldrb	r3, [r3, #26]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d105      	bne.n	80013b4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	0252      	lsls	r2, r2, #9
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	e00b      	b.n	80013cc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b8:	2220      	movs	r2, #32
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c4:	2201      	movs	r2, #1
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00a      	beq.n	80013ea <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d8:	23e0      	movs	r3, #224	; 0xe0
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013e2:	4313      	orrs	r3, r2
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4a65      	ldr	r2, [pc, #404]	; (8001588 <HAL_ADC_Init+0x33c>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	0019      	movs	r1, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	0f9b      	lsrs	r3, r3, #30
 8001406:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800140c:	4313      	orrs	r3, r2
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	4313      	orrs	r3, r2
 8001412:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	223c      	movs	r2, #60	; 0x3c
 8001418:	5c9b      	ldrb	r3, [r3, r2]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d111      	bne.n	8001442 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	0f9b      	lsrs	r3, r3, #30
 8001424:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800142a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001430:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001436:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	4313      	orrs	r3, r2
 800143c:	2201      	movs	r2, #1
 800143e:	4313      	orrs	r3, r2
 8001440:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4a50      	ldr	r2, [pc, #320]	; (800158c <HAL_ADC_Init+0x340>)
 800144a:	4013      	ands	r3, r2
 800144c:	0019      	movs	r1, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	430a      	orrs	r2, r1
 8001456:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	23c0      	movs	r3, #192	; 0xc0
 800145e:	061b      	lsls	r3, r3, #24
 8001460:	429a      	cmp	r2, r3
 8001462:	d018      	beq.n	8001496 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	05db      	lsls	r3, r3, #23
 800146c:	429a      	cmp	r2, r3
 800146e:	d012      	beq.n	8001496 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	061b      	lsls	r3, r3, #24
 8001478:	429a      	cmp	r2, r3
 800147a:	d00c      	beq.n	8001496 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800147c:	4b44      	ldr	r3, [pc, #272]	; (8001590 <HAL_ADC_Init+0x344>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a44      	ldr	r2, [pc, #272]	; (8001594 <HAL_ADC_Init+0x348>)
 8001482:	4013      	ands	r3, r2
 8001484:	0019      	movs	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	23f0      	movs	r3, #240	; 0xf0
 800148c:	039b      	lsls	r3, r3, #14
 800148e:	401a      	ands	r2, r3
 8001490:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <HAL_ADC_Init+0x344>)
 8001492:	430a      	orrs	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149e:	001a      	movs	r2, r3
 80014a0:	2100      	movs	r1, #0
 80014a2:	f7ff fdbe 	bl	8001022 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	493a      	ldr	r1, [pc, #232]	; (8001598 <HAL_ADC_Init+0x34c>)
 80014b0:	001a      	movs	r2, r3
 80014b2:	f7ff fdb6 	bl	8001022 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d109      	bne.n	80014d2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2110      	movs	r1, #16
 80014ca:	4249      	negs	r1, r1
 80014cc:	430a      	orrs	r2, r1
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
 80014d0:	e018      	b.n	8001504 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	039b      	lsls	r3, r3, #14
 80014da:	429a      	cmp	r2, r3
 80014dc:	d112      	bne.n	8001504 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	221c      	movs	r2, #28
 80014ee:	4013      	ands	r3, r2
 80014f0:	2210      	movs	r2, #16
 80014f2:	4252      	negs	r2, r2
 80014f4:	409a      	lsls	r2, r3
 80014f6:	0011      	movs	r1, r2
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2100      	movs	r1, #0
 800150a:	0018      	movs	r0, r3
 800150c:	f7ff fda6 	bl	800105c <LL_ADC_GetSamplingTimeCommonChannels>
 8001510:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001516:	429a      	cmp	r2, r3
 8001518:	d10b      	bne.n	8001532 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001524:	2203      	movs	r2, #3
 8001526:	4393      	bics	r3, r2
 8001528:	2201      	movs	r2, #1
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001530:	e01c      	b.n	800156c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	2212      	movs	r2, #18
 8001538:	4393      	bics	r3, r2
 800153a:	2210      	movs	r2, #16
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001546:	2201      	movs	r2, #1
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800154e:	231f      	movs	r3, #31
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001556:	e009      	b.n	800156c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155c:	2210      	movs	r2, #16
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001564:	231f      	movs	r3, #31
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800156c:	231f      	movs	r3, #31
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	781b      	ldrb	r3, [r3, #0]
}
 8001572:	0018      	movs	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	b008      	add	sp, #32
 8001578:	bd80      	pop	{r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	20000000 	.word	0x20000000
 8001580:	00030d40 	.word	0x00030d40
 8001584:	fffffefd 	.word	0xfffffefd
 8001588:	ffde0201 	.word	0xffde0201
 800158c:	1ffffc02 	.word	0x1ffffc02
 8001590:	40012708 	.word	0x40012708
 8001594:	ffc3ffff 	.word	0xffc3ffff
 8001598:	07ffff04 	.word	0x07ffff04

0800159c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800159c:	b5b0      	push	{r4, r5, r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff fe3d 	bl	8001228 <LL_ADC_REG_IsConversionOngoing>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d135      	bne.n	800161e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2254      	movs	r2, #84	; 0x54
 80015b6:	5c9b      	ldrb	r3, [r3, r2]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_Start+0x24>
 80015bc:	2302      	movs	r3, #2
 80015be:	e035      	b.n	800162c <HAL_ADC_Start+0x90>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2254      	movs	r2, #84	; 0x54
 80015c4:	2101      	movs	r1, #1
 80015c6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015c8:	250f      	movs	r5, #15
 80015ca:	197c      	adds	r4, r7, r5
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 faaa 	bl	8001b28 <ADC_Enable>
 80015d4:	0003      	movs	r3, r0
 80015d6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015d8:	197b      	adds	r3, r7, r5
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d119      	bne.n	8001614 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	4a13      	ldr	r2, [pc, #76]	; (8001634 <HAL_ADC_Start+0x98>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	0052      	lsls	r2, r2, #1
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	221c      	movs	r2, #28
 80015fe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2254      	movs	r2, #84	; 0x54
 8001604:	2100      	movs	r1, #0
 8001606:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff fdf9 	bl	8001204 <LL_ADC_REG_StartConversion>
 8001612:	e008      	b.n	8001626 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2254      	movs	r2, #84	; 0x54
 8001618:	2100      	movs	r1, #0
 800161a:	5499      	strb	r1, [r3, r2]
 800161c:	e003      	b.n	8001626 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800161e:	230f      	movs	r3, #15
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	2202      	movs	r2, #2
 8001624:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001626:	230f      	movs	r3, #15
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	781b      	ldrb	r3, [r3, #0]
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	b004      	add	sp, #16
 8001632:	bdb0      	pop	{r4, r5, r7, pc}
 8001634:	fffff0fe 	.word	0xfffff0fe

08001638 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	2b08      	cmp	r3, #8
 8001648:	d102      	bne.n	8001650 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800164a:	2308      	movs	r3, #8
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	e00f      	b.n	8001670 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2201      	movs	r2, #1
 8001658:	4013      	ands	r3, r2
 800165a:	d007      	beq.n	800166c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	2220      	movs	r2, #32
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e072      	b.n	8001752 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800166c:	2304      	movs	r3, #4
 800166e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001670:	f7ff fc88 	bl	8000f84 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001678:	e01f      	b.n	80016ba <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	d01c      	beq.n	80016ba <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001680:	f7ff fc80 	bl	8000f84 <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d302      	bcc.n	8001696 <HAL_ADC_PollForConversion+0x5e>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d111      	bne.n	80016ba <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4013      	ands	r3, r2
 80016a0:	d10b      	bne.n	80016ba <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	2204      	movs	r2, #4
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2254      	movs	r2, #84	; 0x54
 80016b2:	2100      	movs	r1, #0
 80016b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e04b      	b.n	8001752 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	4013      	ands	r3, r2
 80016c4:	d0d9      	beq.n	800167a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff fcd6 	bl	800108a <LL_ADC_REG_IsTriggerSourceSWStart>
 80016de:	1e03      	subs	r3, r0, #0
 80016e0:	d02e      	beq.n	8001740 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7e9b      	ldrb	r3, [r3, #26]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d12a      	bne.n	8001740 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2208      	movs	r2, #8
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d123      	bne.n	8001740 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff fd93 	bl	8001228 <LL_ADC_REG_IsConversionOngoing>
 8001702:	1e03      	subs	r3, r0, #0
 8001704:	d110      	bne.n	8001728 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	210c      	movs	r1, #12
 8001712:	438a      	bics	r2, r1
 8001714:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171a:	4a10      	ldr	r2, [pc, #64]	; (800175c <HAL_ADC_PollForConversion+0x124>)
 800171c:	4013      	ands	r3, r2
 800171e:	2201      	movs	r2, #1
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	659a      	str	r2, [r3, #88]	; 0x58
 8001726:	e00b      	b.n	8001740 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	2220      	movs	r2, #32
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001738:	2201      	movs	r2, #1
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e1b      	ldrb	r3, [r3, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d103      	bne.n	8001750 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	220c      	movs	r2, #12
 800174e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	0018      	movs	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	b004      	add	sp, #16
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	fffffefe 	.word	0xfffffefe

08001760 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800176e:	0018      	movs	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	b002      	add	sp, #8
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001782:	2317      	movs	r3, #23
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2254      	movs	r2, #84	; 0x54
 8001792:	5c9b      	ldrb	r3, [r3, r2]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_ADC_ConfigChannel+0x24>
 8001798:	2302      	movs	r3, #2
 800179a:	e1c0      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x3a6>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2254      	movs	r2, #84	; 0x54
 80017a0:	2101      	movs	r1, #1
 80017a2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff fd3d 	bl	8001228 <LL_ADC_REG_IsConversionOngoing>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d000      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0x3c>
 80017b2:	e1a3      	b.n	8001afc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d100      	bne.n	80017be <HAL_ADC_ConfigChannel+0x46>
 80017bc:	e143      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691a      	ldr	r2, [r3, #16]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	061b      	lsls	r3, r3, #24
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d004      	beq.n	80017d4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017ce:	4ac1      	ldr	r2, [pc, #772]	; (8001ad4 <HAL_ADC_ConfigChannel+0x35c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d108      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0019      	movs	r1, r3
 80017de:	0010      	movs	r0, r2
 80017e0:	f7ff fc84 	bl	80010ec <LL_ADC_REG_SetSequencerChAdd>
 80017e4:	e0c9      	b.n	800197a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	211f      	movs	r1, #31
 80017f0:	400b      	ands	r3, r1
 80017f2:	210f      	movs	r1, #15
 80017f4:	4099      	lsls	r1, r3
 80017f6:	000b      	movs	r3, r1
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4013      	ands	r3, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	035b      	lsls	r3, r3, #13
 8001804:	0b5b      	lsrs	r3, r3, #13
 8001806:	d105      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x9c>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0e9b      	lsrs	r3, r3, #26
 800180e:	221f      	movs	r2, #31
 8001810:	4013      	ands	r3, r2
 8001812:	e098      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2201      	movs	r2, #1
 800181a:	4013      	ands	r3, r2
 800181c:	d000      	beq.n	8001820 <HAL_ADC_ConfigChannel+0xa8>
 800181e:	e091      	b.n	8001944 <HAL_ADC_ConfigChannel+0x1cc>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2202      	movs	r2, #2
 8001826:	4013      	ands	r3, r2
 8001828:	d000      	beq.n	800182c <HAL_ADC_ConfigChannel+0xb4>
 800182a:	e089      	b.n	8001940 <HAL_ADC_ConfigChannel+0x1c8>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2204      	movs	r2, #4
 8001832:	4013      	ands	r3, r2
 8001834:	d000      	beq.n	8001838 <HAL_ADC_ConfigChannel+0xc0>
 8001836:	e081      	b.n	800193c <HAL_ADC_ConfigChannel+0x1c4>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2208      	movs	r2, #8
 800183e:	4013      	ands	r3, r2
 8001840:	d000      	beq.n	8001844 <HAL_ADC_ConfigChannel+0xcc>
 8001842:	e079      	b.n	8001938 <HAL_ADC_ConfigChannel+0x1c0>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2210      	movs	r2, #16
 800184a:	4013      	ands	r3, r2
 800184c:	d000      	beq.n	8001850 <HAL_ADC_ConfigChannel+0xd8>
 800184e:	e071      	b.n	8001934 <HAL_ADC_ConfigChannel+0x1bc>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2220      	movs	r2, #32
 8001856:	4013      	ands	r3, r2
 8001858:	d000      	beq.n	800185c <HAL_ADC_ConfigChannel+0xe4>
 800185a:	e069      	b.n	8001930 <HAL_ADC_ConfigChannel+0x1b8>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2240      	movs	r2, #64	; 0x40
 8001862:	4013      	ands	r3, r2
 8001864:	d000      	beq.n	8001868 <HAL_ADC_ConfigChannel+0xf0>
 8001866:	e061      	b.n	800192c <HAL_ADC_ConfigChannel+0x1b4>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	4013      	ands	r3, r2
 8001870:	d000      	beq.n	8001874 <HAL_ADC_ConfigChannel+0xfc>
 8001872:	e059      	b.n	8001928 <HAL_ADC_ConfigChannel+0x1b0>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4013      	ands	r3, r2
 800187e:	d151      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x1ac>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d149      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x1a8>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4013      	ands	r3, r2
 8001896:	d141      	bne.n	800191c <HAL_ADC_ConfigChannel+0x1a4>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	4013      	ands	r3, r2
 80018a2:	d139      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1a0>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	015b      	lsls	r3, r3, #5
 80018ac:	4013      	ands	r3, r2
 80018ae:	d131      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x19c>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	019b      	lsls	r3, r3, #6
 80018b8:	4013      	ands	r3, r2
 80018ba:	d129      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x198>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	01db      	lsls	r3, r3, #7
 80018c4:	4013      	ands	r3, r2
 80018c6:	d121      	bne.n	800190c <HAL_ADC_ConfigChannel+0x194>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	4013      	ands	r3, r2
 80018d2:	d119      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x190>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	025b      	lsls	r3, r3, #9
 80018dc:	4013      	ands	r3, r2
 80018de:	d111      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x18c>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	029b      	lsls	r3, r3, #10
 80018e8:	4013      	ands	r3, r2
 80018ea:	d109      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x188>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	02db      	lsls	r3, r3, #11
 80018f4:	4013      	ands	r3, r2
 80018f6:	d001      	beq.n	80018fc <HAL_ADC_ConfigChannel+0x184>
 80018f8:	2312      	movs	r3, #18
 80018fa:	e024      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 80018fc:	2300      	movs	r3, #0
 80018fe:	e022      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001900:	2311      	movs	r3, #17
 8001902:	e020      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001904:	2310      	movs	r3, #16
 8001906:	e01e      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001908:	230f      	movs	r3, #15
 800190a:	e01c      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 800190c:	230e      	movs	r3, #14
 800190e:	e01a      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001910:	230d      	movs	r3, #13
 8001912:	e018      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001914:	230c      	movs	r3, #12
 8001916:	e016      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001918:	230b      	movs	r3, #11
 800191a:	e014      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 800191c:	230a      	movs	r3, #10
 800191e:	e012      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001920:	2309      	movs	r3, #9
 8001922:	e010      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001924:	2308      	movs	r3, #8
 8001926:	e00e      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001928:	2307      	movs	r3, #7
 800192a:	e00c      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 800192c:	2306      	movs	r3, #6
 800192e:	e00a      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001930:	2305      	movs	r3, #5
 8001932:	e008      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001934:	2304      	movs	r3, #4
 8001936:	e006      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001938:	2303      	movs	r3, #3
 800193a:	e004      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 800193c:	2302      	movs	r3, #2
 800193e:	e002      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1ce>
 8001944:	2300      	movs	r3, #0
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	6852      	ldr	r2, [r2, #4]
 800194a:	201f      	movs	r0, #31
 800194c:	4002      	ands	r2, r0
 800194e:	4093      	lsls	r3, r2
 8001950:	000a      	movs	r2, r1
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	429a      	cmp	r2, r3
 8001966:	d808      	bhi.n	800197a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	001a      	movs	r2, r3
 8001976:	f7ff fb99 	bl	80010ac <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	001a      	movs	r2, r3
 8001988:	f7ff fbd4 	bl	8001134 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db00      	blt.n	8001996 <HAL_ADC_ConfigChannel+0x21e>
 8001994:	e0bc      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001996:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <HAL_ADC_ConfigChannel+0x360>)
 8001998:	0018      	movs	r0, r3
 800199a:	f7ff fb35 	bl	8001008 <LL_ADC_GetCommonPathInternalCh>
 800199e:	0003      	movs	r3, r0
 80019a0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <HAL_ADC_ConfigChannel+0x364>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d122      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019b4:	d11d      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	0412      	lsls	r2, r2, #16
 80019bc:	4313      	orrs	r3, r2
 80019be:	4a46      	ldr	r2, [pc, #280]	; (8001ad8 <HAL_ADC_ConfigChannel+0x360>)
 80019c0:	0019      	movs	r1, r3
 80019c2:	0010      	movs	r0, r2
 80019c4:	f7ff fb0c 	bl	8000fe0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019c8:	4b45      	ldr	r3, [pc, #276]	; (8001ae0 <HAL_ADC_ConfigChannel+0x368>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4945      	ldr	r1, [pc, #276]	; (8001ae4 <HAL_ADC_ConfigChannel+0x36c>)
 80019ce:	0018      	movs	r0, r3
 80019d0:	f7fe fb96 	bl	8000100 <__udivsi3>
 80019d4:	0003      	movs	r3, r0
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	0013      	movs	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	189b      	adds	r3, r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019e2:	e002      	b.n	80019ea <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f9      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019f0:	e08e      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a3c      	ldr	r2, [pc, #240]	; (8001ae8 <HAL_ADC_ConfigChannel+0x370>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d10e      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	045b      	lsls	r3, r3, #17
 8001a02:	4013      	ands	r3, r2
 8001a04:	d109      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	0452      	lsls	r2, r2, #17
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	4a32      	ldr	r2, [pc, #200]	; (8001ad8 <HAL_ADC_ConfigChannel+0x360>)
 8001a10:	0019      	movs	r1, r3
 8001a12:	0010      	movs	r0, r2
 8001a14:	f7ff fae4 	bl	8000fe0 <LL_ADC_SetCommonPathInternalCh>
 8001a18:	e07a      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a33      	ldr	r2, [pc, #204]	; (8001aec <HAL_ADC_ConfigChannel+0x374>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d000      	beq.n	8001a26 <HAL_ADC_ConfigChannel+0x2ae>
 8001a24:	e074      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	03db      	lsls	r3, r3, #15
 8001a2c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a2e:	d000      	beq.n	8001a32 <HAL_ADC_ConfigChannel+0x2ba>
 8001a30:	e06e      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	03d2      	lsls	r2, r2, #15
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <HAL_ADC_ConfigChannel+0x360>)
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	0010      	movs	r0, r2
 8001a40:	f7ff face 	bl	8000fe0 <LL_ADC_SetCommonPathInternalCh>
 8001a44:	e064      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	061b      	lsls	r3, r3, #24
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d004      	beq.n	8001a5c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a56:	4a1f      	ldr	r2, [pc, #124]	; (8001ad4 <HAL_ADC_ConfigChannel+0x35c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d107      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0019      	movs	r1, r3
 8001a66:	0010      	movs	r0, r2
 8001a68:	f7ff fb51 	bl	800110e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da4d      	bge.n	8001b10 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_ADC_ConfigChannel+0x360>)
 8001a76:	0018      	movs	r0, r3
 8001a78:	f7ff fac6 	bl	8001008 <LL_ADC_GetCommonPathInternalCh>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a15      	ldr	r2, [pc, #84]	; (8001adc <HAL_ADC_ConfigChannel+0x364>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d108      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <HAL_ADC_ConfigChannel+0x378>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_ADC_ConfigChannel+0x360>)
 8001a92:	0019      	movs	r1, r3
 8001a94:	0010      	movs	r0, r2
 8001a96:	f7ff faa3 	bl	8000fe0 <LL_ADC_SetCommonPathInternalCh>
 8001a9a:	e039      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_ADC_ConfigChannel+0x370>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d108      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <HAL_ADC_ConfigChannel+0x37c>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_ADC_ConfigChannel+0x360>)
 8001aae:	0019      	movs	r1, r3
 8001ab0:	0010      	movs	r0, r2
 8001ab2:	f7ff fa95 	bl	8000fe0 <LL_ADC_SetCommonPathInternalCh>
 8001ab6:	e02b      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_ADC_ConfigChannel+0x374>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d126      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <HAL_ADC_ConfigChannel+0x380>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <HAL_ADC_ConfigChannel+0x360>)
 8001aca:	0019      	movs	r1, r3
 8001acc:	0010      	movs	r0, r2
 8001ace:	f7ff fa87 	bl	8000fe0 <LL_ADC_SetCommonPathInternalCh>
 8001ad2:	e01d      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x398>
 8001ad4:	80000004 	.word	0x80000004
 8001ad8:	40012708 	.word	0x40012708
 8001adc:	b0001000 	.word	0xb0001000
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	00030d40 	.word	0x00030d40
 8001ae8:	b8004000 	.word	0xb8004000
 8001aec:	b4002000 	.word	0xb4002000
 8001af0:	ff7fffff 	.word	0xff7fffff
 8001af4:	feffffff 	.word	0xfeffffff
 8001af8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	2220      	movs	r2, #32
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b08:	2317      	movs	r3, #23
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2254      	movs	r2, #84	; 0x54
 8001b14:	2100      	movs	r1, #0
 8001b16:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001b18:	2317      	movs	r3, #23
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	781b      	ldrb	r3, [r3, #0]
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b006      	add	sp, #24
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)

08001b28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff fb51 	bl	80011e0 <LL_ADC_IsEnabled>
 8001b3e:	1e03      	subs	r3, r0, #0
 8001b40:	d000      	beq.n	8001b44 <ADC_Enable+0x1c>
 8001b42:	e069      	b.n	8001c18 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	4a36      	ldr	r2, [pc, #216]	; (8001c24 <ADC_Enable+0xfc>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d00d      	beq.n	8001b6c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	2210      	movs	r2, #16
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b60:	2201      	movs	r2, #1
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e056      	b.n	8001c1a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff fb23 	bl	80011bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001b76:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <ADC_Enable+0x100>)
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7ff fa45 	bl	8001008 <LL_ADC_GetCommonPathInternalCh>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	041b      	lsls	r3, r3, #16
 8001b84:	4013      	ands	r3, r2
 8001b86:	d00f      	beq.n	8001ba8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <ADC_Enable+0x104>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4928      	ldr	r1, [pc, #160]	; (8001c30 <ADC_Enable+0x108>)
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f7fe fab6 	bl	8000100 <__udivsi3>
 8001b94:	0003      	movs	r3, r0
 8001b96:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001b98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b9a:	e002      	b.n	8001ba2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f9      	bne.n	8001b9c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7e5b      	ldrb	r3, [r3, #25]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d033      	beq.n	8001c18 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f9e8 	bl	8000f84 <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bb8:	e027      	b.n	8001c0a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f7ff fb0e 	bl	80011e0 <LL_ADC_IsEnabled>
 8001bc4:	1e03      	subs	r3, r0, #0
 8001bc6:	d104      	bne.n	8001bd2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7ff faf5 	bl	80011bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bd2:	f7ff f9d7 	bl	8000f84 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d914      	bls.n	8001c0a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d00d      	beq.n	8001c0a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfe:	2201      	movs	r2, #1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e007      	b.n	8001c1a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2201      	movs	r2, #1
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d1d0      	bne.n	8001bba <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b004      	add	sp, #16
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	80000017 	.word	0x80000017
 8001c28:	40012708 	.word	0x40012708
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	00030d40 	.word	0x00030d40

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b7f      	cmp	r3, #127	; 0x7f
 8001c48:	d828      	bhi.n	8001c9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c4a:	4a2f      	ldr	r2, [pc, #188]	; (8001d08 <__NVIC_SetPriority+0xd4>)
 8001c4c:	1dfb      	adds	r3, r7, #7
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	33c0      	adds	r3, #192	; 0xc0
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	589b      	ldr	r3, [r3, r2]
 8001c5a:	1dfa      	adds	r2, r7, #7
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	0011      	movs	r1, r2
 8001c60:	2203      	movs	r2, #3
 8001c62:	400a      	ands	r2, r1
 8001c64:	00d2      	lsls	r2, r2, #3
 8001c66:	21ff      	movs	r1, #255	; 0xff
 8001c68:	4091      	lsls	r1, r2
 8001c6a:	000a      	movs	r2, r1
 8001c6c:	43d2      	mvns	r2, r2
 8001c6e:	401a      	ands	r2, r3
 8001c70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	019b      	lsls	r3, r3, #6
 8001c76:	22ff      	movs	r2, #255	; 0xff
 8001c78:	401a      	ands	r2, r3
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	2303      	movs	r3, #3
 8001c82:	4003      	ands	r3, r0
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c88:	481f      	ldr	r0, [pc, #124]	; (8001d08 <__NVIC_SetPriority+0xd4>)
 8001c8a:	1dfb      	adds	r3, r7, #7
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	b25b      	sxtb	r3, r3
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	430a      	orrs	r2, r1
 8001c94:	33c0      	adds	r3, #192	; 0xc0
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c9a:	e031      	b.n	8001d00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <__NVIC_SetPriority+0xd8>)
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	3b08      	subs	r3, #8
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3306      	adds	r3, #6
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	18d3      	adds	r3, r2, r3
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	1dfa      	adds	r2, r7, #7
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	0011      	movs	r1, r2
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	00d2      	lsls	r2, r2, #3
 8001cc2:	21ff      	movs	r1, #255	; 0xff
 8001cc4:	4091      	lsls	r1, r2
 8001cc6:	000a      	movs	r2, r1
 8001cc8:	43d2      	mvns	r2, r2
 8001cca:	401a      	ands	r2, r3
 8001ccc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	019b      	lsls	r3, r3, #6
 8001cd2:	22ff      	movs	r2, #255	; 0xff
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	1dfb      	adds	r3, r7, #7
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	0018      	movs	r0, r3
 8001cdc:	2303      	movs	r3, #3
 8001cde:	4003      	ands	r3, r0
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ce4:	4809      	ldr	r0, [pc, #36]	; (8001d0c <__NVIC_SetPriority+0xd8>)
 8001ce6:	1dfb      	adds	r3, r7, #7
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	001c      	movs	r4, r3
 8001cec:	230f      	movs	r3, #15
 8001cee:	4023      	ands	r3, r4
 8001cf0:	3b08      	subs	r3, #8
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	3306      	adds	r3, #6
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	18c3      	adds	r3, r0, r3
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	601a      	str	r2, [r3, #0]
}
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b003      	add	sp, #12
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	1e5a      	subs	r2, r3, #1
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	045b      	lsls	r3, r3, #17
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d301      	bcc.n	8001d28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d24:	2301      	movs	r3, #1
 8001d26:	e010      	b.n	8001d4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <SysTick_Config+0x44>)
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	3a01      	subs	r2, #1
 8001d2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d30:	2301      	movs	r3, #1
 8001d32:	425b      	negs	r3, r3
 8001d34:	2103      	movs	r1, #3
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7ff ff7c 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <SysTick_Config+0x44>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <SysTick_Config+0x44>)
 8001d44:	2207      	movs	r2, #7
 8001d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b002      	add	sp, #8
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	e000e010 	.word	0xe000e010

08001d58 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	210f      	movs	r1, #15
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	1c02      	adds	r2, r0, #0
 8001d68:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	187b      	adds	r3, r7, r1
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	0011      	movs	r1, r2
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b004      	add	sp, #16
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff ffbf 	bl	8001d10 <SysTick_Config>
 8001d92:	0003      	movs	r3, r0
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b002      	add	sp, #8
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001daa:	e147      	b.n	800203c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2101      	movs	r1, #1
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4091      	lsls	r1, r2
 8001db6:	000a      	movs	r2, r1
 8001db8:	4013      	ands	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d100      	bne.n	8001dc4 <HAL_GPIO_Init+0x28>
 8001dc2:	e138      	b.n	8002036 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d005      	beq.n	8001ddc <HAL_GPIO_Init+0x40>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d130      	bne.n	8001e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	409a      	lsls	r2, r3
 8001dea:	0013      	movs	r3, r2
 8001dec:	43da      	mvns	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	0013      	movs	r3, r2
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e12:	2201      	movs	r2, #1
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
 8001e18:	0013      	movs	r3, r2
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	2201      	movs	r2, #1
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	0013      	movs	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2203      	movs	r2, #3
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d017      	beq.n	8001e7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2203      	movs	r2, #3
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d123      	bne.n	8001ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	08da      	lsrs	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3208      	adds	r2, #8
 8001e8e:	0092      	lsls	r2, r2, #2
 8001e90:	58d3      	ldr	r3, [r2, r3]
 8001e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2207      	movs	r2, #7
 8001e98:	4013      	ands	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2107      	movs	r1, #7
 8001eb2:	400b      	ands	r3, r1
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	0013      	movs	r3, r2
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	08da      	lsrs	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3208      	adds	r2, #8
 8001ec8:	0092      	lsls	r2, r2, #2
 8001eca:	6939      	ldr	r1, [r7, #16]
 8001ecc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	409a      	lsls	r2, r3
 8001edc:	0013      	movs	r3, r2
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	401a      	ands	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	0013      	movs	r3, r2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	23c0      	movs	r3, #192	; 0xc0
 8001f08:	029b      	lsls	r3, r3, #10
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d100      	bne.n	8001f10 <HAL_GPIO_Init+0x174>
 8001f0e:	e092      	b.n	8002036 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001f10:	4a50      	ldr	r2, [pc, #320]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3318      	adds	r3, #24
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	589b      	ldr	r3, [r3, r2]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2203      	movs	r2, #3
 8001f22:	4013      	ands	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	220f      	movs	r2, #15
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	0013      	movs	r3, r2
 8001f2c:	43da      	mvns	r2, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	23a0      	movs	r3, #160	; 0xa0
 8001f38:	05db      	lsls	r3, r3, #23
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0x1ca>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a45      	ldr	r2, [pc, #276]	; (8002058 <HAL_GPIO_Init+0x2bc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00d      	beq.n	8001f62 <HAL_GPIO_Init+0x1c6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a44      	ldr	r2, [pc, #272]	; (800205c <HAL_GPIO_Init+0x2c0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x1c2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a43      	ldr	r2, [pc, #268]	; (8002060 <HAL_GPIO_Init+0x2c4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_GPIO_Init+0x1be>
 8001f56:	2303      	movs	r3, #3
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x1cc>
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x1cc>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x1cc>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x1cc>
 8001f66:	2300      	movs	r3, #0
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	2103      	movs	r1, #3
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	00d2      	lsls	r2, r2, #3
 8001f70:	4093      	lsls	r3, r2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f78:	4936      	ldr	r1, [pc, #216]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3318      	adds	r3, #24
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f86:	4b33      	ldr	r3, [pc, #204]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	035b      	lsls	r3, r3, #13
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001fb0:	4b28      	ldr	r3, [pc, #160]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	039b      	lsls	r3, r3, #14
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fda:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001fdc:	2384      	movs	r3, #132	; 0x84
 8001fde:	58d3      	ldr	r3, [r2, r3]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	43da      	mvns	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	029b      	lsls	r3, r3, #10
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002000:	4914      	ldr	r1, [pc, #80]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8002002:	2284      	movs	r2, #132	; 0x84
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002008:	4a12      	ldr	r2, [pc, #72]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	58d3      	ldr	r3, [r2, r3]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43da      	mvns	r2, r3
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	025b      	lsls	r3, r3, #9
 8002022:	4013      	ands	r3, r2
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800202e:	4909      	ldr	r1, [pc, #36]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8002030:	2280      	movs	r2, #128	; 0x80
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	3301      	adds	r3, #1
 800203a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	40da      	lsrs	r2, r3
 8002044:	1e13      	subs	r3, r2, #0
 8002046:	d000      	beq.n	800204a <HAL_GPIO_Init+0x2ae>
 8002048:	e6b0      	b.n	8001dac <HAL_GPIO_Init+0x10>
  }
}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	46c0      	nop			; (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b006      	add	sp, #24
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021800 	.word	0x40021800
 8002058:	50000400 	.word	0x50000400
 800205c:	50000800 	.word	0x50000800
 8002060:	50000c00 	.word	0x50000c00

08002064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	0008      	movs	r0, r1
 800206e:	0011      	movs	r1, r2
 8002070:	1cbb      	adds	r3, r7, #2
 8002072:	1c02      	adds	r2, r0, #0
 8002074:	801a      	strh	r2, [r3, #0]
 8002076:	1c7b      	adds	r3, r7, #1
 8002078:	1c0a      	adds	r2, r1, #0
 800207a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800207c:	1c7b      	adds	r3, r7, #1
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002084:	1cbb      	adds	r3, r7, #2
 8002086:	881a      	ldrh	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800208e:	1cbb      	adds	r3, r7, #2
 8002090:	881a      	ldrh	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a19      	ldr	r2, [pc, #100]	; (8002114 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d11f      	bne.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	0013      	movs	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	189b      	adds	r3, r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4912      	ldr	r1, [pc, #72]	; (800211c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7fe f814 	bl	8000100 <__udivsi3>
 80020d8:	0003      	movs	r3, r0
 80020da:	3301      	adds	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020de:	e008      	b.n	80020f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e001      	b.n	80020f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e009      	b.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	401a      	ands	r2, r3
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	429a      	cmp	r2, r3
 8002102:	d0ed      	beq.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b004      	add	sp, #16
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	40007000 	.word	0x40007000
 8002114:	fffff9ff 	.word	0xfffff9ff
 8002118:	20000000 	.word	0x20000000
 800211c:	000f4240 	.word	0x000f4240

08002120 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	23e0      	movs	r3, #224	; 0xe0
 800212a:	01db      	lsls	r3, r3, #7
 800212c:	4013      	ands	r3, r2
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000

08002138 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e2f3      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2201      	movs	r2, #1
 8002150:	4013      	ands	r3, r2
 8002152:	d100      	bne.n	8002156 <HAL_RCC_OscConfig+0x1e>
 8002154:	e07c      	b.n	8002250 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002156:	4bc3      	ldr	r3, [pc, #780]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2238      	movs	r2, #56	; 0x38
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002160:	4bc0      	ldr	r3, [pc, #768]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2203      	movs	r2, #3
 8002166:	4013      	ands	r3, r2
 8002168:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b10      	cmp	r3, #16
 800216e:	d102      	bne.n	8002176 <HAL_RCC_OscConfig+0x3e>
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d002      	beq.n	800217c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d10b      	bne.n	8002194 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217c:	4bb9      	ldr	r3, [pc, #740]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	029b      	lsls	r3, r3, #10
 8002184:	4013      	ands	r3, r2
 8002186:	d062      	beq.n	800224e <HAL_RCC_OscConfig+0x116>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d15e      	bne.n	800224e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e2ce      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	025b      	lsls	r3, r3, #9
 800219c:	429a      	cmp	r2, r3
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_OscConfig+0x78>
 80021a0:	4bb0      	ldr	r3, [pc, #704]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4baf      	ldr	r3, [pc, #700]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	0249      	lsls	r1, r1, #9
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e020      	b.n	80021f2 <HAL_RCC_OscConfig+0xba>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	23a0      	movs	r3, #160	; 0xa0
 80021b6:	02db      	lsls	r3, r3, #11
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d10e      	bne.n	80021da <HAL_RCC_OscConfig+0xa2>
 80021bc:	4ba9      	ldr	r3, [pc, #676]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4ba8      	ldr	r3, [pc, #672]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80021c2:	2180      	movs	r1, #128	; 0x80
 80021c4:	02c9      	lsls	r1, r1, #11
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	4ba6      	ldr	r3, [pc, #664]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4ba5      	ldr	r3, [pc, #660]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80021d0:	2180      	movs	r1, #128	; 0x80
 80021d2:	0249      	lsls	r1, r1, #9
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e00b      	b.n	80021f2 <HAL_RCC_OscConfig+0xba>
 80021da:	4ba2      	ldr	r3, [pc, #648]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4ba1      	ldr	r3, [pc, #644]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80021e0:	49a1      	ldr	r1, [pc, #644]	; (8002468 <HAL_RCC_OscConfig+0x330>)
 80021e2:	400a      	ands	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	4b9f      	ldr	r3, [pc, #636]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b9e      	ldr	r3, [pc, #632]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80021ec:	499f      	ldr	r1, [pc, #636]	; (800246c <HAL_RCC_OscConfig+0x334>)
 80021ee:	400a      	ands	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d014      	beq.n	8002224 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7fe fec3 	bl	8000f84 <HAL_GetTick>
 80021fe:	0003      	movs	r3, r0
 8002200:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7fe febe 	bl	8000f84 <HAL_GetTick>
 8002208:	0002      	movs	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e28d      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002216:	4b93      	ldr	r3, [pc, #588]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	029b      	lsls	r3, r3, #10
 800221e:	4013      	ands	r3, r2
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0xcc>
 8002222:	e015      	b.n	8002250 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe feae 	bl	8000f84 <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222e:	f7fe fea9 	bl	8000f84 <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	; 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e278      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002240:	4b88      	ldr	r3, [pc, #544]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	029b      	lsls	r3, r3, #10
 8002248:	4013      	ands	r3, r2
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0xf6>
 800224c:	e000      	b.n	8002250 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2202      	movs	r2, #2
 8002256:	4013      	ands	r3, r2
 8002258:	d100      	bne.n	800225c <HAL_RCC_OscConfig+0x124>
 800225a:	e099      	b.n	8002390 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225c:	4b81      	ldr	r3, [pc, #516]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2238      	movs	r2, #56	; 0x38
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002266:	4b7f      	ldr	r3, [pc, #508]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2203      	movs	r2, #3
 800226c:	4013      	ands	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b10      	cmp	r3, #16
 8002274:	d102      	bne.n	800227c <HAL_RCC_OscConfig+0x144>
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d002      	beq.n	8002282 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d135      	bne.n	80022ee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002282:	4b78      	ldr	r3, [pc, #480]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4013      	ands	r3, r2
 800228c:	d005      	beq.n	800229a <HAL_RCC_OscConfig+0x162>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e24b      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229a:	4b72      	ldr	r3, [pc, #456]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a74      	ldr	r2, [pc, #464]	; (8002470 <HAL_RCC_OscConfig+0x338>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	021a      	lsls	r2, r3, #8
 80022aa:	4b6e      	ldr	r3, [pc, #440]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80022ac:	430a      	orrs	r2, r1
 80022ae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d112      	bne.n	80022dc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022b6:	4b6b      	ldr	r3, [pc, #428]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6e      	ldr	r2, [pc, #440]	; (8002474 <HAL_RCC_OscConfig+0x33c>)
 80022bc:	4013      	ands	r3, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	4b67      	ldr	r3, [pc, #412]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80022c6:	430a      	orrs	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80022ca:	4b66      	ldr	r3, [pc, #408]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0adb      	lsrs	r3, r3, #11
 80022d0:	2207      	movs	r2, #7
 80022d2:	4013      	ands	r3, r2
 80022d4:	4a68      	ldr	r2, [pc, #416]	; (8002478 <HAL_RCC_OscConfig+0x340>)
 80022d6:	40da      	lsrs	r2, r3
 80022d8:	4b68      	ldr	r3, [pc, #416]	; (800247c <HAL_RCC_OscConfig+0x344>)
 80022da:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022dc:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_OscConfig+0x348>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7fe fdf3 	bl	8000ecc <HAL_InitTick>
 80022e6:	1e03      	subs	r3, r0, #0
 80022e8:	d051      	beq.n	800238e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e221      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d030      	beq.n	8002358 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022f6:	4b5b      	ldr	r3, [pc, #364]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5e      	ldr	r2, [pc, #376]	; (8002474 <HAL_RCC_OscConfig+0x33c>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	0019      	movs	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	4b57      	ldr	r3, [pc, #348]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800230a:	4b56      	ldr	r3, [pc, #344]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4b55      	ldr	r3, [pc, #340]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	0049      	lsls	r1, r1, #1
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fe34 	bl	8000f84 <HAL_GetTick>
 800231c:	0003      	movs	r3, r0
 800231e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002322:	f7fe fe2f 	bl	8000f84 <HAL_GetTick>
 8002326:	0002      	movs	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e1fe      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002334:	4b4b      	ldr	r3, [pc, #300]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4013      	ands	r3, r2
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002340:	4b48      	ldr	r3, [pc, #288]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a4a      	ldr	r2, [pc, #296]	; (8002470 <HAL_RCC_OscConfig+0x338>)
 8002346:	4013      	ands	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	021a      	lsls	r2, r3, #8
 8002350:	4b44      	ldr	r3, [pc, #272]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	e01b      	b.n	8002390 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002358:	4b42      	ldr	r3, [pc, #264]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b41      	ldr	r3, [pc, #260]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 800235e:	4949      	ldr	r1, [pc, #292]	; (8002484 <HAL_RCC_OscConfig+0x34c>)
 8002360:	400a      	ands	r2, r1
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe fe0e 	bl	8000f84 <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236e:	f7fe fe09 	bl	8000f84 <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1d8      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002380:	4b38      	ldr	r3, [pc, #224]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4013      	ands	r3, r2
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x236>
 800238c:	e000      	b.n	8002390 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800238e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2208      	movs	r2, #8
 8002396:	4013      	ands	r3, r2
 8002398:	d047      	beq.n	800242a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800239a:	4b32      	ldr	r3, [pc, #200]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2238      	movs	r2, #56	; 0x38
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b18      	cmp	r3, #24
 80023a4:	d10a      	bne.n	80023bc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80023a6:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80023a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023aa:	2202      	movs	r2, #2
 80023ac:	4013      	ands	r3, r2
 80023ae:	d03c      	beq.n	800242a <HAL_RCC_OscConfig+0x2f2>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d138      	bne.n	800242a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e1ba      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d019      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80023c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023c8:	4b26      	ldr	r3, [pc, #152]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80023ca:	2101      	movs	r1, #1
 80023cc:	430a      	orrs	r2, r1
 80023ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fdd8 	bl	8000f84 <HAL_GetTick>
 80023d4:	0003      	movs	r3, r0
 80023d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023da:	f7fe fdd3 	bl	8000f84 <HAL_GetTick>
 80023de:	0002      	movs	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e1a2      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80023ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f0:	2202      	movs	r2, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d0f1      	beq.n	80023da <HAL_RCC_OscConfig+0x2a2>
 80023f6:	e018      	b.n	800242a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80023fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 80023fe:	2101      	movs	r1, #1
 8002400:	438a      	bics	r2, r1
 8002402:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fdbe 	bl	8000f84 <HAL_GetTick>
 8002408:	0003      	movs	r3, r0
 800240a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800240e:	f7fe fdb9 	bl	8000f84 <HAL_GetTick>
 8002412:	0002      	movs	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e188      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002424:	2202      	movs	r2, #2
 8002426:	4013      	ands	r3, r2
 8002428:	d1f1      	bne.n	800240e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2204      	movs	r2, #4
 8002430:	4013      	ands	r3, r2
 8002432:	d100      	bne.n	8002436 <HAL_RCC_OscConfig+0x2fe>
 8002434:	e0c6      	b.n	80025c4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002436:	231f      	movs	r3, #31
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2238      	movs	r2, #56	; 0x38
 8002444:	4013      	ands	r3, r2
 8002446:	2b20      	cmp	r3, #32
 8002448:	d11e      	bne.n	8002488 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_RCC_OscConfig+0x32c>)
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	2202      	movs	r2, #2
 8002450:	4013      	ands	r3, r2
 8002452:	d100      	bne.n	8002456 <HAL_RCC_OscConfig+0x31e>
 8002454:	e0b6      	b.n	80025c4 <HAL_RCC_OscConfig+0x48c>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d000      	beq.n	8002460 <HAL_RCC_OscConfig+0x328>
 800245e:	e0b1      	b.n	80025c4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e166      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
 8002464:	40021000 	.word	0x40021000
 8002468:	fffeffff 	.word	0xfffeffff
 800246c:	fffbffff 	.word	0xfffbffff
 8002470:	ffff80ff 	.word	0xffff80ff
 8002474:	ffffc7ff 	.word	0xffffc7ff
 8002478:	00f42400 	.word	0x00f42400
 800247c:	20000000 	.word	0x20000000
 8002480:	20000004 	.word	0x20000004
 8002484:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002488:	4bac      	ldr	r3, [pc, #688]	; (800273c <HAL_RCC_OscConfig+0x604>)
 800248a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	055b      	lsls	r3, r3, #21
 8002490:	4013      	ands	r3, r2
 8002492:	d101      	bne.n	8002498 <HAL_RCC_OscConfig+0x360>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x362>
 8002498:	2300      	movs	r3, #0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d011      	beq.n	80024c2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	4ba7      	ldr	r3, [pc, #668]	; (800273c <HAL_RCC_OscConfig+0x604>)
 80024a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024a2:	4ba6      	ldr	r3, [pc, #664]	; (800273c <HAL_RCC_OscConfig+0x604>)
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	0549      	lsls	r1, r1, #21
 80024a8:	430a      	orrs	r2, r1
 80024aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80024ac:	4ba3      	ldr	r3, [pc, #652]	; (800273c <HAL_RCC_OscConfig+0x604>)
 80024ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	055b      	lsls	r3, r3, #21
 80024b4:	4013      	ands	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80024ba:	231f      	movs	r3, #31
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c2:	4b9f      	ldr	r3, [pc, #636]	; (8002740 <HAL_RCC_OscConfig+0x608>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4013      	ands	r3, r2
 80024cc:	d11a      	bne.n	8002504 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ce:	4b9c      	ldr	r3, [pc, #624]	; (8002740 <HAL_RCC_OscConfig+0x608>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4b9b      	ldr	r3, [pc, #620]	; (8002740 <HAL_RCC_OscConfig+0x608>)
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	0049      	lsls	r1, r1, #1
 80024d8:	430a      	orrs	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fd52 	bl	8000f84 <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e6:	f7fe fd4d 	bl	8000f84 <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e11c      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f8:	4b91      	ldr	r3, [pc, #580]	; (8002740 <HAL_RCC_OscConfig+0x608>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4013      	ands	r3, r2
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x3e2>
 800250c:	4b8b      	ldr	r3, [pc, #556]	; (800273c <HAL_RCC_OscConfig+0x604>)
 800250e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002510:	4b8a      	ldr	r3, [pc, #552]	; (800273c <HAL_RCC_OscConfig+0x604>)
 8002512:	2101      	movs	r1, #1
 8002514:	430a      	orrs	r2, r1
 8002516:	65da      	str	r2, [r3, #92]	; 0x5c
 8002518:	e01c      	b.n	8002554 <HAL_RCC_OscConfig+0x41c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b05      	cmp	r3, #5
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x404>
 8002522:	4b86      	ldr	r3, [pc, #536]	; (800273c <HAL_RCC_OscConfig+0x604>)
 8002524:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002526:	4b85      	ldr	r3, [pc, #532]	; (800273c <HAL_RCC_OscConfig+0x604>)
 8002528:	2104      	movs	r1, #4
 800252a:	430a      	orrs	r2, r1
 800252c:	65da      	str	r2, [r3, #92]	; 0x5c
 800252e:	4b83      	ldr	r3, [pc, #524]	; (800273c <HAL_RCC_OscConfig+0x604>)
 8002530:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002532:	4b82      	ldr	r3, [pc, #520]	; (800273c <HAL_RCC_OscConfig+0x604>)
 8002534:	2101      	movs	r1, #1
 8002536:	430a      	orrs	r2, r1
 8002538:	65da      	str	r2, [r3, #92]	; 0x5c
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0x41c>
 800253c:	4b7f      	ldr	r3, [pc, #508]	; (800273c <HAL_RCC_OscConfig+0x604>)
 800253e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002540:	4b7e      	ldr	r3, [pc, #504]	; (800273c <HAL_RCC_OscConfig+0x604>)
 8002542:	2101      	movs	r1, #1
 8002544:	438a      	bics	r2, r1
 8002546:	65da      	str	r2, [r3, #92]	; 0x5c
 8002548:	4b7c      	ldr	r3, [pc, #496]	; (800273c <HAL_RCC_OscConfig+0x604>)
 800254a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800254c:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_RCC_OscConfig+0x604>)
 800254e:	2104      	movs	r1, #4
 8002550:	438a      	bics	r2, r1
 8002552:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d014      	beq.n	8002586 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fd12 	bl	8000f84 <HAL_GetTick>
 8002560:	0003      	movs	r3, r0
 8002562:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002564:	e009      	b.n	800257a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe fd0d 	bl	8000f84 <HAL_GetTick>
 800256a:	0002      	movs	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	4a74      	ldr	r2, [pc, #464]	; (8002744 <HAL_RCC_OscConfig+0x60c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e0db      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257a:	4b70      	ldr	r3, [pc, #448]	; (800273c <HAL_RCC_OscConfig+0x604>)
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x42e>
 8002584:	e013      	b.n	80025ae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7fe fcfd 	bl	8000f84 <HAL_GetTick>
 800258a:	0003      	movs	r3, r0
 800258c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800258e:	e009      	b.n	80025a4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7fe fcf8 	bl	8000f84 <HAL_GetTick>
 8002594:	0002      	movs	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	4a6a      	ldr	r2, [pc, #424]	; (8002744 <HAL_RCC_OscConfig+0x60c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0c6      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a4:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_RCC_OscConfig+0x604>)
 80025a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a8:	2202      	movs	r2, #2
 80025aa:	4013      	ands	r3, r2
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80025ae:	231f      	movs	r3, #31
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	4b60      	ldr	r3, [pc, #384]	; (800273c <HAL_RCC_OscConfig+0x604>)
 80025ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025bc:	4b5f      	ldr	r3, [pc, #380]	; (800273c <HAL_RCC_OscConfig+0x604>)
 80025be:	4962      	ldr	r1, [pc, #392]	; (8002748 <HAL_RCC_OscConfig+0x610>)
 80025c0:	400a      	ands	r2, r1
 80025c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d100      	bne.n	80025ce <HAL_RCC_OscConfig+0x496>
 80025cc:	e0b0      	b.n	8002730 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ce:	4b5b      	ldr	r3, [pc, #364]	; (800273c <HAL_RCC_OscConfig+0x604>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2238      	movs	r2, #56	; 0x38
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d100      	bne.n	80025dc <HAL_RCC_OscConfig+0x4a4>
 80025da:	e078      	b.n	80026ce <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d153      	bne.n	800268c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e4:	4b55      	ldr	r3, [pc, #340]	; (800273c <HAL_RCC_OscConfig+0x604>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b54      	ldr	r3, [pc, #336]	; (800273c <HAL_RCC_OscConfig+0x604>)
 80025ea:	4958      	ldr	r1, [pc, #352]	; (800274c <HAL_RCC_OscConfig+0x614>)
 80025ec:	400a      	ands	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fcc8 	bl	8000f84 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe fcc3 	bl	8000f84 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e092      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260c:	4b4b      	ldr	r3, [pc, #300]	; (800273c <HAL_RCC_OscConfig+0x604>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	049b      	lsls	r3, r3, #18
 8002614:	4013      	ands	r3, r2
 8002616:	d1f0      	bne.n	80025fa <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002618:	4b48      	ldr	r3, [pc, #288]	; (800273c <HAL_RCC_OscConfig+0x604>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a4c      	ldr	r2, [pc, #304]	; (8002750 <HAL_RCC_OscConfig+0x618>)
 800261e:	4013      	ands	r3, r2
 8002620:	0019      	movs	r1, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1a      	ldr	r2, [r3, #32]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	431a      	orrs	r2, r3
 8002640:	4b3e      	ldr	r3, [pc, #248]	; (800273c <HAL_RCC_OscConfig+0x604>)
 8002642:	430a      	orrs	r2, r1
 8002644:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002646:	4b3d      	ldr	r3, [pc, #244]	; (800273c <HAL_RCC_OscConfig+0x604>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b3c      	ldr	r3, [pc, #240]	; (800273c <HAL_RCC_OscConfig+0x604>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	0449      	lsls	r1, r1, #17
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002654:	4b39      	ldr	r3, [pc, #228]	; (800273c <HAL_RCC_OscConfig+0x604>)
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	4b38      	ldr	r3, [pc, #224]	; (800273c <HAL_RCC_OscConfig+0x604>)
 800265a:	2180      	movs	r1, #128	; 0x80
 800265c:	0549      	lsls	r1, r1, #21
 800265e:	430a      	orrs	r2, r1
 8002660:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7fe fc8f 	bl	8000f84 <HAL_GetTick>
 8002666:	0003      	movs	r3, r0
 8002668:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7fe fc8a 	bl	8000f84 <HAL_GetTick>
 8002670:	0002      	movs	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e059      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_RCC_OscConfig+0x604>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	049b      	lsls	r3, r3, #18
 8002686:	4013      	ands	r3, r2
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x534>
 800268a:	e051      	b.n	8002730 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCC_OscConfig+0x604>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <HAL_RCC_OscConfig+0x604>)
 8002692:	492e      	ldr	r1, [pc, #184]	; (800274c <HAL_RCC_OscConfig+0x614>)
 8002694:	400a      	ands	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7fe fc74 	bl	8000f84 <HAL_GetTick>
 800269c:	0003      	movs	r3, r0
 800269e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fe fc6f 	bl	8000f84 <HAL_GetTick>
 80026a6:	0002      	movs	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e03e      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCC_OscConfig+0x604>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	049b      	lsls	r3, r3, #18
 80026bc:	4013      	ands	r3, r2
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_RCC_OscConfig+0x604>)
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCC_OscConfig+0x604>)
 80026c6:	4923      	ldr	r1, [pc, #140]	; (8002754 <HAL_RCC_OscConfig+0x61c>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	60da      	str	r2, [r3, #12]
 80026cc:	e030      	b.n	8002730 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e02b      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_RCC_OscConfig+0x604>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2203      	movs	r2, #3
 80026e4:	401a      	ands	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d11e      	bne.n	800272c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2270      	movs	r2, #112	; 0x70
 80026f2:	401a      	ands	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d117      	bne.n	800272c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	23fe      	movs	r3, #254	; 0xfe
 8002700:	01db      	lsls	r3, r3, #7
 8002702:	401a      	ands	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d10e      	bne.n	800272c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	23f8      	movs	r3, #248	; 0xf8
 8002712:	039b      	lsls	r3, r3, #14
 8002714:	401a      	ands	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d106      	bne.n	800272c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	0f5b      	lsrs	r3, r3, #29
 8002722:	075a      	lsls	r2, r3, #29
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b008      	add	sp, #32
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
 8002744:	00001388 	.word	0x00001388
 8002748:	efffffff 	.word	0xefffffff
 800274c:	feffffff 	.word	0xfeffffff
 8002750:	1fc1808c 	.word	0x1fc1808c
 8002754:	effefffc 	.word	0xeffefffc

08002758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0e9      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800276c:	4b76      	ldr	r3, [pc, #472]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2207      	movs	r2, #7
 8002772:	4013      	ands	r3, r2
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d91e      	bls.n	80027b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b73      	ldr	r3, [pc, #460]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2207      	movs	r2, #7
 8002780:	4393      	bics	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	4b70      	ldr	r3, [pc, #448]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800278c:	f7fe fbfa 	bl	8000f84 <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002794:	e009      	b.n	80027aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002796:	f7fe fbf5 	bl	8000f84 <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	4a6a      	ldr	r2, [pc, #424]	; (800294c <HAL_RCC_ClockConfig+0x1f4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0ca      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027aa:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2207      	movs	r2, #7
 80027b0:	4013      	ands	r3, r2
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1ee      	bne.n	8002796 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2202      	movs	r2, #2
 80027be:	4013      	ands	r3, r2
 80027c0:	d015      	beq.n	80027ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2204      	movs	r2, #4
 80027c8:	4013      	ands	r3, r2
 80027ca:	d006      	beq.n	80027da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027cc:	4b60      	ldr	r3, [pc, #384]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	4b5f      	ldr	r3, [pc, #380]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 80027d2:	21e0      	movs	r1, #224	; 0xe0
 80027d4:	01c9      	lsls	r1, r1, #7
 80027d6:	430a      	orrs	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027da:	4b5d      	ldr	r3, [pc, #372]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	4a5d      	ldr	r2, [pc, #372]	; (8002954 <HAL_RCC_ClockConfig+0x1fc>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 80027ea:	430a      	orrs	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2201      	movs	r2, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	d057      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002800:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	029b      	lsls	r3, r3, #10
 8002808:	4013      	ands	r3, r2
 800280a:	d12b      	bne.n	8002864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e097      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d107      	bne.n	8002828 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002818:	4b4d      	ldr	r3, [pc, #308]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	049b      	lsls	r3, r3, #18
 8002820:	4013      	ands	r3, r2
 8002822:	d11f      	bne.n	8002864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e08b      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d107      	bne.n	8002840 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002830:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4013      	ands	r3, r2
 800283a:	d113      	bne.n	8002864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e07f      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d106      	bne.n	8002856 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002848:	4b41      	ldr	r3, [pc, #260]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 800284a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284c:	2202      	movs	r2, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d108      	bne.n	8002864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e074      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002856:	4b3e      	ldr	r3, [pc, #248]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	2202      	movs	r2, #2
 800285c:	4013      	ands	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e06d      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002864:	4b3a      	ldr	r3, [pc, #232]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2207      	movs	r2, #7
 800286a:	4393      	bics	r3, r2
 800286c:	0019      	movs	r1, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002874:	430a      	orrs	r2, r1
 8002876:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002878:	f7fe fb84 	bl	8000f84 <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002880:	e009      	b.n	8002896 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002882:	f7fe fb7f 	bl	8000f84 <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	4a2f      	ldr	r2, [pc, #188]	; (800294c <HAL_RCC_ClockConfig+0x1f4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e054      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2238      	movs	r2, #56	; 0x38
 800289c:	401a      	ands	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1ec      	bne.n	8002882 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b27      	ldr	r3, [pc, #156]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2207      	movs	r2, #7
 80028ae:	4013      	ands	r3, r2
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d21e      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2207      	movs	r2, #7
 80028bc:	4393      	bics	r3, r2
 80028be:	0019      	movs	r1, r3
 80028c0:	4b21      	ldr	r3, [pc, #132]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028c8:	f7fe fb5c 	bl	8000f84 <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028d0:	e009      	b.n	80028e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d2:	f7fe fb57 	bl	8000f84 <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_RCC_ClockConfig+0x1f4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e02c      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2207      	movs	r2, #7
 80028ec:	4013      	ands	r3, r2
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1ee      	bne.n	80028d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2204      	movs	r2, #4
 80028fa:	4013      	ands	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	4a15      	ldr	r2, [pc, #84]	; (8002958 <HAL_RCC_ClockConfig+0x200>)
 8002904:	4013      	ands	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002912:	f000 f829 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002916:	0001      	movs	r1, r0
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	220f      	movs	r2, #15
 8002920:	401a      	ands	r2, r3
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <HAL_RCC_ClockConfig+0x204>)
 8002924:	0092      	lsls	r2, r2, #2
 8002926:	58d3      	ldr	r3, [r2, r3]
 8002928:	221f      	movs	r2, #31
 800292a:	4013      	ands	r3, r2
 800292c:	000a      	movs	r2, r1
 800292e:	40da      	lsrs	r2, r3
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_RCC_ClockConfig+0x208>)
 8002932:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_ClockConfig+0x20c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	0018      	movs	r0, r3
 800293a:	f7fe fac7 	bl	8000ecc <HAL_InitTick>
 800293e:	0003      	movs	r3, r0
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b004      	add	sp, #16
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40022000 	.word	0x40022000
 800294c:	00001388 	.word	0x00001388
 8002950:	40021000 	.word	0x40021000
 8002954:	fffff0ff 	.word	0xfffff0ff
 8002958:	ffff8fff 	.word	0xffff8fff
 800295c:	08006054 	.word	0x08006054
 8002960:	20000000 	.word	0x20000000
 8002964:	20000004 	.word	0x20000004

08002968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800296e:	4b3c      	ldr	r3, [pc, #240]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2238      	movs	r2, #56	; 0x38
 8002974:	4013      	ands	r3, r2
 8002976:	d10f      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002978:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0adb      	lsrs	r3, r3, #11
 800297e:	2207      	movs	r2, #7
 8002980:	4013      	ands	r3, r2
 8002982:	2201      	movs	r2, #1
 8002984:	409a      	lsls	r2, r3
 8002986:	0013      	movs	r3, r2
 8002988:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800298a:	6839      	ldr	r1, [r7, #0]
 800298c:	4835      	ldr	r0, [pc, #212]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xfc>)
 800298e:	f7fd fbb7 	bl	8000100 <__udivsi3>
 8002992:	0003      	movs	r3, r0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	e05d      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002998:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2238      	movs	r2, #56	; 0x38
 800299e:	4013      	ands	r3, r2
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d102      	bne.n	80029aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029a4:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x100>)
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	e054      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029aa:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2238      	movs	r2, #56	; 0x38
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d138      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80029b6:	4b2a      	ldr	r3, [pc, #168]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2203      	movs	r2, #3
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029c0:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	2207      	movs	r2, #7
 80029c8:	4013      	ands	r3, r2
 80029ca:	3301      	adds	r3, #1
 80029cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d10d      	bne.n	80029f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	4824      	ldr	r0, [pc, #144]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x100>)
 80029d8:	f7fd fb92 	bl	8000100 <__udivsi3>
 80029dc:	0003      	movs	r3, r0
 80029de:	0019      	movs	r1, r3
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	0a1b      	lsrs	r3, r3, #8
 80029e6:	227f      	movs	r2, #127	; 0x7f
 80029e8:	4013      	ands	r3, r2
 80029ea:	434b      	muls	r3, r1
 80029ec:	617b      	str	r3, [r7, #20]
        break;
 80029ee:	e00d      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	481c      	ldr	r0, [pc, #112]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029f4:	f7fd fb84 	bl	8000100 <__udivsi3>
 80029f8:	0003      	movs	r3, r0
 80029fa:	0019      	movs	r1, r3
 80029fc:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	227f      	movs	r2, #127	; 0x7f
 8002a04:	4013      	ands	r3, r2
 8002a06:	434b      	muls	r3, r1
 8002a08:	617b      	str	r3, [r7, #20]
        break;
 8002a0a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0f5b      	lsrs	r3, r3, #29
 8002a12:	2207      	movs	r2, #7
 8002a14:	4013      	ands	r3, r2
 8002a16:	3301      	adds	r3, #1
 8002a18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	6978      	ldr	r0, [r7, #20]
 8002a1e:	f7fd fb6f 	bl	8000100 <__udivsi3>
 8002a22:	0003      	movs	r3, r0
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	e015      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a28:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2238      	movs	r2, #56	; 0x38
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d103      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2238      	movs	r2, #56	; 0x38
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b18      	cmp	r3, #24
 8002a46:	d103      	bne.n	8002a50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a48:	23fa      	movs	r3, #250	; 0xfa
 8002a4a:	01db      	lsls	r3, r3, #7
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	e001      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a54:	693b      	ldr	r3, [r7, #16]
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b006      	add	sp, #24
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	40021000 	.word	0x40021000
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	007a1200 	.word	0x007a1200

08002a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a70:	4b02      	ldr	r3, [pc, #8]	; (8002a7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	20000000 	.word	0x20000000

08002a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a84:	f7ff fff2 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002a88:	0004      	movs	r4, r0
 8002a8a:	f7ff fb49 	bl	8002120 <LL_RCC_GetAPB1Prescaler>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	0b1a      	lsrs	r2, r3, #12
 8002a92:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a94:	0092      	lsls	r2, r2, #2
 8002a96:	58d3      	ldr	r3, [r2, r3]
 8002a98:	221f      	movs	r2, #31
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	40dc      	lsrs	r4, r3
 8002a9e:	0023      	movs	r3, r4
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	08006094 	.word	0x08006094

08002aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ab4:	2313      	movs	r3, #19
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002abc:	2312      	movs	r3, #18
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	029b      	lsls	r3, r3, #10
 8002acc:	4013      	ands	r3, r2
 8002ace:	d100      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002ad0:	e0a3      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad2:	2011      	movs	r0, #17
 8002ad4:	183b      	adds	r3, r7, r0
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ada:	4b7f      	ldr	r3, [pc, #508]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	055b      	lsls	r3, r3, #21
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d110      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	4b7c      	ldr	r3, [pc, #496]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aea:	4b7b      	ldr	r3, [pc, #492]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	0549      	lsls	r1, r1, #21
 8002af0:	430a      	orrs	r2, r1
 8002af2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002af4:	4b78      	ldr	r3, [pc, #480]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	055b      	lsls	r3, r3, #21
 8002afc:	4013      	ands	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b02:	183b      	adds	r3, r7, r0
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b08:	4b74      	ldr	r3, [pc, #464]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b73      	ldr	r3, [pc, #460]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b0e:	2180      	movs	r1, #128	; 0x80
 8002b10:	0049      	lsls	r1, r1, #1
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b16:	f7fe fa35 	bl	8000f84 <HAL_GetTick>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b20:	f7fe fa30 	bl	8000f84 <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d904      	bls.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002b2e:	2313      	movs	r3, #19
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	2203      	movs	r2, #3
 8002b34:	701a      	strb	r2, [r3, #0]
        break;
 8002b36:	e005      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b38:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4013      	ands	r3, r2
 8002b42:	d0ed      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002b44:	2313      	movs	r3, #19
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d154      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b4e:	4b62      	ldr	r3, [pc, #392]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b52:	23c0      	movs	r3, #192	; 0xc0
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4013      	ands	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d019      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d014      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b6a:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	4a5c      	ldr	r2, [pc, #368]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b74:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b78:	4b57      	ldr	r3, [pc, #348]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b7a:	2180      	movs	r1, #128	; 0x80
 8002b7c:	0249      	lsls	r1, r1, #9
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b82:	4b55      	ldr	r3, [pc, #340]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b86:	4b54      	ldr	r3, [pc, #336]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b88:	4956      	ldr	r1, [pc, #344]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b8e:	4b52      	ldr	r3, [pc, #328]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2201      	movs	r2, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d016      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe f9f2 	bl	8000f84 <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba4:	e00c      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fe f9ed 	bl	8000f84 <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	4a4d      	ldr	r2, [pc, #308]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d904      	bls.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002bb6:	2313      	movs	r3, #19
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2203      	movs	r2, #3
 8002bbc:	701a      	strb	r2, [r3, #0]
            break;
 8002bbe:	e004      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc0:	4b45      	ldr	r3, [pc, #276]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d0ed      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002bca:	2313      	movs	r3, #19
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd4:	4b40      	ldr	r3, [pc, #256]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	4a41      	ldr	r2, [pc, #260]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002be4:	430a      	orrs	r2, r1
 8002be6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002be8:	e00c      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bea:	2312      	movs	r3, #18
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	2213      	movs	r2, #19
 8002bf0:	18ba      	adds	r2, r7, r2
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e005      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	2312      	movs	r3, #18
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2213      	movs	r2, #19
 8002bfe:	18ba      	adds	r2, r7, r2
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c04:	2311      	movs	r3, #17
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0e:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c12:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c14:	4935      	ldr	r1, [pc, #212]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c16:	400a      	ands	r2, r1
 8002c18:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4013      	ands	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c24:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	2203      	movs	r2, #3
 8002c2a:	4393      	bics	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d009      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c42:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	4a2a      	ldr	r2, [pc, #168]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c52:	430a      	orrs	r2, r1
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	01db      	lsls	r3, r3, #7
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d015      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	0899      	lsrs	r1, r3, #2
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c70:	430a      	orrs	r2, r1
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	05db      	lsls	r3, r3, #23
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c80:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c86:	2180      	movs	r1, #128	; 0x80
 8002c88:	0249      	lsls	r1, r1, #9
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	4013      	ands	r3, r2
 8002c98:	d016      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002caa:	430a      	orrs	r2, r1
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	01db      	lsls	r3, r3, #7
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d106      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	0249      	lsls	r1, r1, #9
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002cc8:	2312      	movs	r3, #18
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	781b      	ldrb	r3, [r3, #0]
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b006      	add	sp, #24
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	fffffcff 	.word	0xfffffcff
 8002ce4:	fffeffff 	.word	0xfffeffff
 8002ce8:	00001388 	.word	0x00001388
 8002cec:	efffffff 	.word	0xefffffff
 8002cf0:	ffffcfff 	.word	0xffffcfff
 8002cf4:	ffff3fff 	.word	0xffff3fff

08002cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0a8      	b.n	8002e5c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	2382      	movs	r3, #130	; 0x82
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d009      	beq.n	8002d32 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	61da      	str	r2, [r3, #28]
 8002d24:	e005      	b.n	8002d32 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	225d      	movs	r2, #93	; 0x5d
 8002d3c:	5c9b      	ldrb	r3, [r3, r2]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d107      	bne.n	8002d54 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	225c      	movs	r2, #92	; 0x5c
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f7fd fe00 	bl	8000954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	225d      	movs	r2, #93	; 0x5d
 8002d58:	2102      	movs	r1, #2
 8002d5a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2140      	movs	r1, #64	; 0x40
 8002d68:	438a      	bics	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	23e0      	movs	r3, #224	; 0xe0
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d902      	bls.n	8002d7e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	e002      	b.n	8002d84 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	015b      	lsls	r3, r3, #5
 8002d82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	23f0      	movs	r3, #240	; 0xf0
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d008      	beq.n	8002da2 <HAL_SPI_Init+0xaa>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	23e0      	movs	r3, #224	; 0xe0
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d002      	beq.n	8002da2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	2382      	movs	r3, #130	; 0x82
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	401a      	ands	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6899      	ldr	r1, [r3, #8]
 8002db0:	2384      	movs	r3, #132	; 0x84
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	400b      	ands	r3, r1
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	400b      	ands	r3, r1
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	400b      	ands	r3, r1
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6999      	ldr	r1, [r3, #24]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	400b      	ands	r3, r1
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	2138      	movs	r1, #56	; 0x38
 8002dde:	400b      	ands	r3, r1
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	400b      	ands	r3, r1
 8002dea:	431a      	orrs	r2, r3
 8002dec:	0011      	movs	r1, r2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	019b      	lsls	r3, r3, #6
 8002df6:	401a      	ands	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	2204      	movs	r2, #4
 8002e08:	401a      	ands	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2110      	movs	r1, #16
 8002e10:	400b      	ands	r3, r1
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e18:	2108      	movs	r1, #8
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68d9      	ldr	r1, [r3, #12]
 8002e22:	23f0      	movs	r3, #240	; 0xf0
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	400b      	ands	r3, r1
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	0011      	movs	r1, r2
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	015b      	lsls	r3, r3, #5
 8002e32:	401a      	ands	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4907      	ldr	r1, [pc, #28]	; (8002e64 <HAL_SPI_Init+0x16c>)
 8002e48:	400a      	ands	r2, r1
 8002e4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	225d      	movs	r2, #93	; 0x5d
 8002e56:	2101      	movs	r1, #1
 8002e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b004      	add	sp, #16
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	fffff7ff 	.word	0xfffff7ff

08002e68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	1dbb      	adds	r3, r7, #6
 8002e76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e78:	231f      	movs	r3, #31
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	225c      	movs	r2, #92	; 0x5c
 8002e84:	5c9b      	ldrb	r3, [r3, r2]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_SPI_Transmit+0x26>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e147      	b.n	800311e <HAL_SPI_Transmit+0x2b6>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	225c      	movs	r2, #92	; 0x5c
 8002e92:	2101      	movs	r1, #1
 8002e94:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e96:	f7fe f875 	bl	8000f84 <HAL_GetTick>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e9e:	2316      	movs	r3, #22
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	1dba      	adds	r2, r7, #6
 8002ea4:	8812      	ldrh	r2, [r2, #0]
 8002ea6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	225d      	movs	r2, #93	; 0x5d
 8002eac:	5c9b      	ldrb	r3, [r3, r2]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d004      	beq.n	8002ebe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002eb4:	231f      	movs	r3, #31
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	2202      	movs	r2, #2
 8002eba:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ebc:	e128      	b.n	8003110 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_SPI_Transmit+0x64>
 8002ec4:	1dbb      	adds	r3, r7, #6
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002ecc:	231f      	movs	r3, #31
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ed4:	e11c      	b.n	8003110 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	225d      	movs	r2, #93	; 0x5d
 8002eda:	2103      	movs	r1, #3
 8002edc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1dba      	adds	r2, r7, #6
 8002eee:	8812      	ldrh	r2, [r2, #0]
 8002ef0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1dba      	adds	r2, r7, #6
 8002ef6:	8812      	ldrh	r2, [r2, #0]
 8002ef8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2244      	movs	r2, #68	; 0x44
 8002f04:	2100      	movs	r1, #0
 8002f06:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2246      	movs	r2, #70	; 0x46
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d110      	bne.n	8002f4a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2140      	movs	r1, #64	; 0x40
 8002f34:	438a      	bics	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	01c9      	lsls	r1, r1, #7
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2240      	movs	r2, #64	; 0x40
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d007      	beq.n	8002f68 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2140      	movs	r1, #64	; 0x40
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	23e0      	movs	r3, #224	; 0xe0
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d952      	bls.n	800301a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <HAL_SPI_Transmit+0x11e>
 8002f7c:	2316      	movs	r3, #22
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d143      	bne.n	800300e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	881a      	ldrh	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	1c9a      	adds	r2, r3, #2
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002faa:	e030      	b.n	800300e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d112      	bne.n	8002fe0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	881a      	ldrh	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	1c9a      	adds	r2, r3, #2
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fde:	e016      	b.n	800300e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe0:	f7fd ffd0 	bl	8000f84 <HAL_GetTick>
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d802      	bhi.n	8002ff6 <HAL_SPI_Transmit+0x18e>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	d102      	bne.n	8002ffc <HAL_SPI_Transmit+0x194>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d108      	bne.n	800300e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002ffc:	231f      	movs	r3, #31
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	2203      	movs	r2, #3
 8003002:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	225d      	movs	r2, #93	; 0x5d
 8003008:	2101      	movs	r1, #1
 800300a:	5499      	strb	r1, [r3, r2]
          goto error;
 800300c:	e080      	b.n	8003110 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1c9      	bne.n	8002fac <HAL_SPI_Transmit+0x144>
 8003018:	e053      	b.n	80030c2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <HAL_SPI_Transmit+0x1c4>
 8003022:	2316      	movs	r3, #22
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d145      	bne.n	80030b8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	330c      	adds	r3, #12
 8003036:	7812      	ldrb	r2, [r2, #0]
 8003038:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003052:	e031      	b.n	80030b8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2202      	movs	r2, #2
 800305c:	4013      	ands	r3, r2
 800305e:	2b02      	cmp	r3, #2
 8003060:	d113      	bne.n	800308a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	7812      	ldrb	r2, [r2, #0]
 800306e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003088:	e016      	b.n	80030b8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800308a:	f7fd ff7b 	bl	8000f84 <HAL_GetTick>
 800308e:	0002      	movs	r2, r0
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d802      	bhi.n	80030a0 <HAL_SPI_Transmit+0x238>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	d102      	bne.n	80030a6 <HAL_SPI_Transmit+0x23e>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80030a6:	231f      	movs	r3, #31
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	2203      	movs	r2, #3
 80030ac:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	225d      	movs	r2, #93	; 0x5d
 80030b2:	2101      	movs	r1, #1
 80030b4:	5499      	strb	r1, [r3, r2]
          goto error;
 80030b6:	e02b      	b.n	8003110 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1c8      	bne.n	8003054 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	6839      	ldr	r1, [r7, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f000 f95d 	bl	8003388 <SPI_EndRxTxTransaction>
 80030ce:	1e03      	subs	r3, r0, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80030fe:	231f      	movs	r3, #31
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
 8003106:	e003      	b.n	8003110 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	225d      	movs	r2, #93	; 0x5d
 800310c:	2101      	movs	r1, #1
 800310e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	225c      	movs	r2, #92	; 0x5c
 8003114:	2100      	movs	r1, #0
 8003116:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003118:	231f      	movs	r3, #31
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	781b      	ldrb	r3, [r3, #0]
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b008      	add	sp, #32
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	1dfb      	adds	r3, r7, #7
 8003136:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003138:	f7fd ff24 	bl	8000f84 <HAL_GetTick>
 800313c:	0002      	movs	r2, r0
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	18d3      	adds	r3, r2, r3
 8003146:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003148:	f7fd ff1c 	bl	8000f84 <HAL_GetTick>
 800314c:	0003      	movs	r3, r0
 800314e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003150:	4b3a      	ldr	r3, [pc, #232]	; (800323c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	015b      	lsls	r3, r3, #5
 8003156:	0d1b      	lsrs	r3, r3, #20
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	4353      	muls	r3, r2
 800315c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800315e:	e058      	b.n	8003212 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	3301      	adds	r3, #1
 8003164:	d055      	beq.n	8003212 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003166:	f7fd ff0d 	bl	8000f84 <HAL_GetTick>
 800316a:	0002      	movs	r2, r0
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	429a      	cmp	r2, r3
 8003174:	d902      	bls.n	800317c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d142      	bne.n	8003202 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	21e0      	movs	r1, #224	; 0xe0
 8003188:	438a      	bics	r2, r1
 800318a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	2382      	movs	r3, #130	; 0x82
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	429a      	cmp	r2, r3
 8003196:	d113      	bne.n	80031c0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d005      	beq.n	80031b0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d107      	bne.n	80031c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2140      	movs	r1, #64	; 0x40
 80031bc:	438a      	bics	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	019b      	lsls	r3, r3, #6
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d110      	bne.n	80031ee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	491a      	ldr	r1, [pc, #104]	; (8003240 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80031d8:	400a      	ands	r2, r1
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	0189      	lsls	r1, r1, #6
 80031ea:	430a      	orrs	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	225d      	movs	r2, #93	; 0x5d
 80031f2:	2101      	movs	r1, #1
 80031f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	225c      	movs	r2, #92	; 0x5c
 80031fa:	2100      	movs	r1, #0
 80031fc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e017      	b.n	8003232 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	3b01      	subs	r3, #1
 8003210:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	4013      	ands	r3, r2
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	425a      	negs	r2, r3
 8003222:	4153      	adcs	r3, r2
 8003224:	b2db      	uxtb	r3, r3
 8003226:	001a      	movs	r2, r3
 8003228:	1dfb      	adds	r3, r7, #7
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d197      	bne.n	8003160 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	0018      	movs	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	b008      	add	sp, #32
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	20000000 	.word	0x20000000
 8003240:	ffffdfff 	.word	0xffffdfff

08003244 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	; 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003252:	2317      	movs	r3, #23
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800325a:	f7fd fe93 	bl	8000f84 <HAL_GetTick>
 800325e:	0002      	movs	r2, r0
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	18d3      	adds	r3, r2, r3
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800326a:	f7fd fe8b 	bl	8000f84 <HAL_GetTick>
 800326e:	0003      	movs	r3, r0
 8003270:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	330c      	adds	r3, #12
 8003278:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800327a:	4b41      	ldr	r3, [pc, #260]	; (8003380 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	0013      	movs	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	189b      	adds	r3, r3, r2
 8003284:	00da      	lsls	r2, r3, #3
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	0d1b      	lsrs	r3, r3, #20
 800328a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328c:	4353      	muls	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003290:	e068      	b.n	8003364 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	23c0      	movs	r3, #192	; 0xc0
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	429a      	cmp	r2, r3
 800329a:	d10a      	bne.n	80032b2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d107      	bne.n	80032b2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	2117      	movs	r1, #23
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	d055      	beq.n	8003364 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032b8:	f7fd fe64 	bl	8000f84 <HAL_GetTick>
 80032bc:	0002      	movs	r2, r0
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d902      	bls.n	80032ce <SPI_WaitFifoStateUntilTimeout+0x8a>
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d142      	bne.n	8003354 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	21e0      	movs	r1, #224	; 0xe0
 80032da:	438a      	bics	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	2382      	movs	r3, #130	; 0x82
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d113      	bne.n	8003312 <SPI_WaitFifoStateUntilTimeout+0xce>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d005      	beq.n	8003302 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	429a      	cmp	r2, r3
 8003300:	d107      	bne.n	8003312 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2140      	movs	r1, #64	; 0x40
 800330e:	438a      	bics	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	019b      	lsls	r3, r3, #6
 800331a:	429a      	cmp	r2, r3
 800331c:	d110      	bne.n	8003340 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4916      	ldr	r1, [pc, #88]	; (8003384 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800332a:	400a      	ands	r2, r1
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	0189      	lsls	r1, r1, #6
 800333c:	430a      	orrs	r2, r1
 800333e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	225d      	movs	r2, #93	; 0x5d
 8003344:	2101      	movs	r1, #1
 8003346:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	225c      	movs	r2, #92	; 0x5c
 800334c:	2100      	movs	r1, #0
 800334e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e010      	b.n	8003376 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	3b01      	subs	r3, #1
 8003362:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	4013      	ands	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	429a      	cmp	r2, r3
 8003372:	d18e      	bne.n	8003292 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b00a      	add	sp, #40	; 0x28
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	20000000 	.word	0x20000000
 8003384:	ffffdfff 	.word	0xffffdfff

08003388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	23c0      	movs	r3, #192	; 0xc0
 8003398:	0159      	lsls	r1, r3, #5
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	0013      	movs	r3, r2
 80033a2:	2200      	movs	r2, #0
 80033a4:	f7ff ff4e 	bl	8003244 <SPI_WaitFifoStateUntilTimeout>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d007      	beq.n	80033bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b0:	2220      	movs	r2, #32
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e027      	b.n	800340c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	0013      	movs	r3, r2
 80033c6:	2200      	movs	r2, #0
 80033c8:	2180      	movs	r1, #128	; 0x80
 80033ca:	f7ff fead 	bl	8003128 <SPI_WaitFlagStateUntilTimeout>
 80033ce:	1e03      	subs	r3, r0, #0
 80033d0:	d007      	beq.n	80033e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d6:	2220      	movs	r2, #32
 80033d8:	431a      	orrs	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e014      	b.n	800340c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	23c0      	movs	r3, #192	; 0xc0
 80033e6:	00d9      	lsls	r1, r3, #3
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	0013      	movs	r3, r2
 80033f0:	2200      	movs	r2, #0
 80033f2:	f7ff ff27 	bl	8003244 <SPI_WaitFifoStateUntilTimeout>
 80033f6:	1e03      	subs	r3, r0, #0
 80033f8:	d007      	beq.n	800340a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fe:	2220      	movs	r2, #32
 8003400:	431a      	orrs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e000      	b.n	800340c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b004      	add	sp, #16
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e04a      	b.n	80034bc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	223d      	movs	r2, #61	; 0x3d
 800342a:	5c9b      	ldrb	r3, [r3, r2]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d107      	bne.n	8003442 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	223c      	movs	r2, #60	; 0x3c
 8003436:	2100      	movs	r1, #0
 8003438:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	0018      	movs	r0, r3
 800343e:	f7fd fbed 	bl	8000c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	223d      	movs	r2, #61	; 0x3d
 8003446:	2102      	movs	r1, #2
 8003448:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	0019      	movs	r1, r3
 8003454:	0010      	movs	r0, r2
 8003456:	f000 fa6d 	bl	8003934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2248      	movs	r2, #72	; 0x48
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	223e      	movs	r2, #62	; 0x3e
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	223f      	movs	r2, #63	; 0x3f
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2240      	movs	r2, #64	; 0x40
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2241      	movs	r2, #65	; 0x41
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2242      	movs	r2, #66	; 0x42
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2243      	movs	r2, #67	; 0x43
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2244      	movs	r2, #68	; 0x44
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2245      	movs	r2, #69	; 0x45
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2246      	movs	r2, #70	; 0x46
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2247      	movs	r2, #71	; 0x47
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	223d      	movs	r2, #61	; 0x3d
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	0018      	movs	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e04a      	b.n	800356c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	223d      	movs	r2, #61	; 0x3d
 80034da:	5c9b      	ldrb	r3, [r3, r2]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d107      	bne.n	80034f2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	223c      	movs	r2, #60	; 0x3c
 80034e6:	2100      	movs	r1, #0
 80034e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	0018      	movs	r0, r3
 80034ee:	f000 f841 	bl	8003574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	223d      	movs	r2, #61	; 0x3d
 80034f6:	2102      	movs	r1, #2
 80034f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	0019      	movs	r1, r3
 8003504:	0010      	movs	r0, r2
 8003506:	f000 fa15 	bl	8003934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2248      	movs	r2, #72	; 0x48
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	223e      	movs	r2, #62	; 0x3e
 8003516:	2101      	movs	r1, #1
 8003518:	5499      	strb	r1, [r3, r2]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	223f      	movs	r2, #63	; 0x3f
 800351e:	2101      	movs	r1, #1
 8003520:	5499      	strb	r1, [r3, r2]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2240      	movs	r2, #64	; 0x40
 8003526:	2101      	movs	r1, #1
 8003528:	5499      	strb	r1, [r3, r2]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2241      	movs	r2, #65	; 0x41
 800352e:	2101      	movs	r1, #1
 8003530:	5499      	strb	r1, [r3, r2]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2242      	movs	r2, #66	; 0x42
 8003536:	2101      	movs	r1, #1
 8003538:	5499      	strb	r1, [r3, r2]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2243      	movs	r2, #67	; 0x43
 800353e:	2101      	movs	r1, #1
 8003540:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2244      	movs	r2, #68	; 0x44
 8003546:	2101      	movs	r1, #1
 8003548:	5499      	strb	r1, [r3, r2]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2245      	movs	r2, #69	; 0x45
 800354e:	2101      	movs	r1, #1
 8003550:	5499      	strb	r1, [r3, r2]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2246      	movs	r2, #70	; 0x46
 8003556:	2101      	movs	r1, #1
 8003558:	5499      	strb	r1, [r3, r2]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2247      	movs	r2, #71	; 0x47
 800355e:	2101      	movs	r1, #1
 8003560:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	223d      	movs	r2, #61	; 0x3d
 8003566:	2101      	movs	r1, #1
 8003568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	b002      	add	sp, #8
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d108      	bne.n	80035a6 <HAL_TIM_PWM_Start+0x22>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	223e      	movs	r2, #62	; 0x3e
 8003598:	5c9b      	ldrb	r3, [r3, r2]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	1e5a      	subs	r2, r3, #1
 80035a0:	4193      	sbcs	r3, r2
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	e037      	b.n	8003616 <HAL_TIM_PWM_Start+0x92>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d108      	bne.n	80035be <HAL_TIM_PWM_Start+0x3a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	223f      	movs	r2, #63	; 0x3f
 80035b0:	5c9b      	ldrb	r3, [r3, r2]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	1e5a      	subs	r2, r3, #1
 80035b8:	4193      	sbcs	r3, r2
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e02b      	b.n	8003616 <HAL_TIM_PWM_Start+0x92>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d108      	bne.n	80035d6 <HAL_TIM_PWM_Start+0x52>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2240      	movs	r2, #64	; 0x40
 80035c8:	5c9b      	ldrb	r3, [r3, r2]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	1e5a      	subs	r2, r3, #1
 80035d0:	4193      	sbcs	r3, r2
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	e01f      	b.n	8003616 <HAL_TIM_PWM_Start+0x92>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b0c      	cmp	r3, #12
 80035da:	d108      	bne.n	80035ee <HAL_TIM_PWM_Start+0x6a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2241      	movs	r2, #65	; 0x41
 80035e0:	5c9b      	ldrb	r3, [r3, r2]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	1e5a      	subs	r2, r3, #1
 80035e8:	4193      	sbcs	r3, r2
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	e013      	b.n	8003616 <HAL_TIM_PWM_Start+0x92>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b10      	cmp	r3, #16
 80035f2:	d108      	bne.n	8003606 <HAL_TIM_PWM_Start+0x82>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2242      	movs	r2, #66	; 0x42
 80035f8:	5c9b      	ldrb	r3, [r3, r2]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	1e5a      	subs	r2, r3, #1
 8003600:	4193      	sbcs	r3, r2
 8003602:	b2db      	uxtb	r3, r3
 8003604:	e007      	b.n	8003616 <HAL_TIM_PWM_Start+0x92>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2243      	movs	r2, #67	; 0x43
 800360a:	5c9b      	ldrb	r3, [r3, r2]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	1e5a      	subs	r2, r3, #1
 8003612:	4193      	sbcs	r3, r2
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e07b      	b.n	8003716 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d104      	bne.n	800362e <HAL_TIM_PWM_Start+0xaa>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	223e      	movs	r2, #62	; 0x3e
 8003628:	2102      	movs	r1, #2
 800362a:	5499      	strb	r1, [r3, r2]
 800362c:	e023      	b.n	8003676 <HAL_TIM_PWM_Start+0xf2>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d104      	bne.n	800363e <HAL_TIM_PWM_Start+0xba>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	223f      	movs	r2, #63	; 0x3f
 8003638:	2102      	movs	r1, #2
 800363a:	5499      	strb	r1, [r3, r2]
 800363c:	e01b      	b.n	8003676 <HAL_TIM_PWM_Start+0xf2>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d104      	bne.n	800364e <HAL_TIM_PWM_Start+0xca>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2240      	movs	r2, #64	; 0x40
 8003648:	2102      	movs	r1, #2
 800364a:	5499      	strb	r1, [r3, r2]
 800364c:	e013      	b.n	8003676 <HAL_TIM_PWM_Start+0xf2>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b0c      	cmp	r3, #12
 8003652:	d104      	bne.n	800365e <HAL_TIM_PWM_Start+0xda>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2241      	movs	r2, #65	; 0x41
 8003658:	2102      	movs	r1, #2
 800365a:	5499      	strb	r1, [r3, r2]
 800365c:	e00b      	b.n	8003676 <HAL_TIM_PWM_Start+0xf2>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b10      	cmp	r3, #16
 8003662:	d104      	bne.n	800366e <HAL_TIM_PWM_Start+0xea>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2242      	movs	r2, #66	; 0x42
 8003668:	2102      	movs	r1, #2
 800366a:	5499      	strb	r1, [r3, r2]
 800366c:	e003      	b.n	8003676 <HAL_TIM_PWM_Start+0xf2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2243      	movs	r2, #67	; 0x43
 8003672:	2102      	movs	r1, #2
 8003674:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6839      	ldr	r1, [r7, #0]
 800367c:	2201      	movs	r2, #1
 800367e:	0018      	movs	r0, r3
 8003680:	f000 fc6e 	bl	8003f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a25      	ldr	r2, [pc, #148]	; (8003720 <HAL_TIM_PWM_Start+0x19c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_TIM_PWM_Start+0x11e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a24      	ldr	r2, [pc, #144]	; (8003724 <HAL_TIM_PWM_Start+0x1a0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_TIM_PWM_Start+0x11e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a22      	ldr	r2, [pc, #136]	; (8003728 <HAL_TIM_PWM_Start+0x1a4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_TIM_PWM_Start+0x122>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_TIM_PWM_Start+0x124>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	0209      	lsls	r1, r1, #8
 80036ba:	430a      	orrs	r2, r1
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a17      	ldr	r2, [pc, #92]	; (8003720 <HAL_TIM_PWM_Start+0x19c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_TIM_PWM_Start+0x14e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_TIM_PWM_Start+0x1a8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d116      	bne.n	8003700 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <HAL_TIM_PWM_Start+0x1ac>)
 80036da:	4013      	ands	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	d016      	beq.n	8003712 <HAL_TIM_PWM_Start+0x18e>
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	025b      	lsls	r3, r3, #9
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d011      	beq.n	8003712 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2101      	movs	r1, #1
 80036fa:	430a      	orrs	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fe:	e008      	b.n	8003712 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2101      	movs	r1, #1
 800370c:	430a      	orrs	r2, r1
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e000      	b.n	8003714 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003712:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40014400 	.word	0x40014400
 8003728:	40014800 	.word	0x40014800
 800372c:	40000400 	.word	0x40000400
 8003730:	00010007 	.word	0x00010007

08003734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003740:	2317      	movs	r3, #23
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	223c      	movs	r2, #60	; 0x3c
 800374c:	5c9b      	ldrb	r3, [r3, r2]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003752:	2302      	movs	r3, #2
 8003754:	e0e5      	b.n	8003922 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	223c      	movs	r2, #60	; 0x3c
 800375a:	2101      	movs	r1, #1
 800375c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b14      	cmp	r3, #20
 8003762:	d900      	bls.n	8003766 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003764:	e0d1      	b.n	800390a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	009a      	lsls	r2, r3, #2
 800376a:	4b70      	ldr	r3, [pc, #448]	; (800392c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800376c:	18d3      	adds	r3, r2, r3
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	0011      	movs	r1, r2
 800377a:	0018      	movs	r0, r3
 800377c:	f000 f954 	bl	8003a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2108      	movs	r1, #8
 800378c:	430a      	orrs	r2, r1
 800378e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2104      	movs	r1, #4
 800379c:	438a      	bics	r2, r1
 800379e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6999      	ldr	r1, [r3, #24]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	619a      	str	r2, [r3, #24]
      break;
 80037b2:	e0af      	b.n	8003914 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	0011      	movs	r1, r2
 80037bc:	0018      	movs	r0, r3
 80037be:	f000 f9b3 	bl	8003b28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699a      	ldr	r2, [r3, #24]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2180      	movs	r1, #128	; 0x80
 80037ce:	0109      	lsls	r1, r1, #4
 80037d0:	430a      	orrs	r2, r1
 80037d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4954      	ldr	r1, [pc, #336]	; (8003930 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80037e0:	400a      	ands	r2, r1
 80037e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6999      	ldr	r1, [r3, #24]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	021a      	lsls	r2, r3, #8
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	619a      	str	r2, [r3, #24]
      break;
 80037f8:	e08c      	b.n	8003914 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	0011      	movs	r1, r2
 8003802:	0018      	movs	r0, r3
 8003804:	f000 fa0e 	bl	8003c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2108      	movs	r1, #8
 8003814:	430a      	orrs	r2, r1
 8003816:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2104      	movs	r1, #4
 8003824:	438a      	bics	r2, r1
 8003826:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69d9      	ldr	r1, [r3, #28]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	61da      	str	r2, [r3, #28]
      break;
 800383a:	e06b      	b.n	8003914 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	0011      	movs	r1, r2
 8003844:	0018      	movs	r0, r3
 8003846:	f000 fa6f 	bl	8003d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2180      	movs	r1, #128	; 0x80
 8003856:	0109      	lsls	r1, r1, #4
 8003858:	430a      	orrs	r2, r1
 800385a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4932      	ldr	r1, [pc, #200]	; (8003930 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003868:	400a      	ands	r2, r1
 800386a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69d9      	ldr	r1, [r3, #28]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	021a      	lsls	r2, r3, #8
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	61da      	str	r2, [r3, #28]
      break;
 8003880:	e048      	b.n	8003914 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	0011      	movs	r1, r2
 800388a:	0018      	movs	r0, r3
 800388c:	f000 fab0 	bl	8003df0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2108      	movs	r1, #8
 800389c:	430a      	orrs	r2, r1
 800389e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2104      	movs	r1, #4
 80038ac:	438a      	bics	r2, r1
 80038ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038c2:	e027      	b.n	8003914 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	0011      	movs	r1, r2
 80038cc:	0018      	movs	r0, r3
 80038ce:	f000 fae9 	bl	8003ea4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	0109      	lsls	r1, r1, #4
 80038e0:	430a      	orrs	r2, r1
 80038e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4910      	ldr	r1, [pc, #64]	; (8003930 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80038f0:	400a      	ands	r2, r1
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	021a      	lsls	r2, r3, #8
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003908:	e004      	b.n	8003914 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800390a:	2317      	movs	r3, #23
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
      break;
 8003912:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	223c      	movs	r2, #60	; 0x3c
 8003918:	2100      	movs	r1, #0
 800391a:	5499      	strb	r1, [r3, r2]

  return status;
 800391c:	2317      	movs	r3, #23
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	781b      	ldrb	r3, [r3, #0]
}
 8003922:	0018      	movs	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	b006      	add	sp, #24
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	080060b4 	.word	0x080060b4
 8003930:	fffffbff 	.word	0xfffffbff

08003934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a32      	ldr	r2, [pc, #200]	; (8003a10 <TIM_Base_SetConfig+0xdc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d003      	beq.n	8003954 <TIM_Base_SetConfig+0x20>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a31      	ldr	r2, [pc, #196]	; (8003a14 <TIM_Base_SetConfig+0xe0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d108      	bne.n	8003966 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2270      	movs	r2, #112	; 0x70
 8003958:	4393      	bics	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a29      	ldr	r2, [pc, #164]	; (8003a10 <TIM_Base_SetConfig+0xdc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00f      	beq.n	800398e <TIM_Base_SetConfig+0x5a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a28      	ldr	r2, [pc, #160]	; (8003a14 <TIM_Base_SetConfig+0xe0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00b      	beq.n	800398e <TIM_Base_SetConfig+0x5a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a27      	ldr	r2, [pc, #156]	; (8003a18 <TIM_Base_SetConfig+0xe4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <TIM_Base_SetConfig+0x5a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <TIM_Base_SetConfig+0xe8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_Base_SetConfig+0x5a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a25      	ldr	r2, [pc, #148]	; (8003a20 <TIM_Base_SetConfig+0xec>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d108      	bne.n	80039a0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4a24      	ldr	r2, [pc, #144]	; (8003a24 <TIM_Base_SetConfig+0xf0>)
 8003992:	4013      	ands	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	4393      	bics	r3, r2
 80039a6:	001a      	movs	r2, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <TIM_Base_SetConfig+0xdc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <TIM_Base_SetConfig+0xaa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <TIM_Base_SetConfig+0xe8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d003      	beq.n	80039de <TIM_Base_SetConfig+0xaa>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <TIM_Base_SetConfig+0xec>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d103      	bne.n	80039e6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	2201      	movs	r2, #1
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d106      	bne.n	8003a06 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2201      	movs	r2, #1
 80039fe:	4393      	bics	r3, r2
 8003a00:	001a      	movs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	611a      	str	r2, [r3, #16]
  }
}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b004      	add	sp, #16
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40002000 	.word	0x40002000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800
 8003a24:	fffffcff 	.word	0xfffffcff

08003a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4393      	bics	r3, r2
 8003a40:	001a      	movs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4a2e      	ldr	r2, [pc, #184]	; (8003b10 <TIM_OC1_SetConfig+0xe8>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	4393      	bics	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	4393      	bics	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a24      	ldr	r2, [pc, #144]	; (8003b14 <TIM_OC1_SetConfig+0xec>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_OC1_SetConfig+0x6e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a23      	ldr	r2, [pc, #140]	; (8003b18 <TIM_OC1_SetConfig+0xf0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_OC1_SetConfig+0x6e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a22      	ldr	r2, [pc, #136]	; (8003b1c <TIM_OC1_SetConfig+0xf4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d10c      	bne.n	8003ab0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2208      	movs	r2, #8
 8003a9a:	4393      	bics	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	4393      	bics	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <TIM_OC1_SetConfig+0xec>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d007      	beq.n	8003ac8 <TIM_OC1_SetConfig+0xa0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <TIM_OC1_SetConfig+0xf0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_OC1_SetConfig+0xa0>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a16      	ldr	r2, [pc, #88]	; (8003b1c <TIM_OC1_SetConfig+0xf4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d111      	bne.n	8003aec <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4a15      	ldr	r2, [pc, #84]	; (8003b20 <TIM_OC1_SetConfig+0xf8>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <TIM_OC1_SetConfig+0xfc>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	621a      	str	r2, [r3, #32]
}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b006      	add	sp, #24
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	fffeff8f 	.word	0xfffeff8f
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40014400 	.word	0x40014400
 8003b1c:	40014800 	.word	0x40014800
 8003b20:	fffffeff 	.word	0xfffffeff
 8003b24:	fffffdff 	.word	0xfffffdff

08003b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	4393      	bics	r3, r2
 8003b40:	001a      	movs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a2c      	ldr	r2, [pc, #176]	; (8003c08 <TIM_OC2_SetConfig+0xe0>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a2b      	ldr	r2, [pc, #172]	; (8003c0c <TIM_OC2_SetConfig+0xe4>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2220      	movs	r2, #32
 8003b72:	4393      	bics	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a22      	ldr	r2, [pc, #136]	; (8003c10 <TIM_OC2_SetConfig+0xe8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10d      	bne.n	8003ba6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2280      	movs	r2, #128	; 0x80
 8003b8e:	4393      	bics	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2240      	movs	r2, #64	; 0x40
 8003ba2:	4393      	bics	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a19      	ldr	r2, [pc, #100]	; (8003c10 <TIM_OC2_SetConfig+0xe8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d007      	beq.n	8003bbe <TIM_OC2_SetConfig+0x96>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <TIM_OC2_SetConfig+0xec>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <TIM_OC2_SetConfig+0x96>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a17      	ldr	r2, [pc, #92]	; (8003c18 <TIM_OC2_SetConfig+0xf0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d113      	bne.n	8003be6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <TIM_OC2_SetConfig+0xf4>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <TIM_OC2_SetConfig+0xf8>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	621a      	str	r2, [r3, #32]
}
 8003c00:	46c0      	nop			; (mov r8, r8)
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b006      	add	sp, #24
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	feff8fff 	.word	0xfeff8fff
 8003c0c:	fffffcff 	.word	0xfffffcff
 8003c10:	40012c00 	.word	0x40012c00
 8003c14:	40014400 	.word	0x40014400
 8003c18:	40014800 	.word	0x40014800
 8003c1c:	fffffbff 	.word	0xfffffbff
 8003c20:	fffff7ff 	.word	0xfffff7ff

08003c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4a31      	ldr	r2, [pc, #196]	; (8003d00 <TIM_OC3_SetConfig+0xdc>)
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a2d      	ldr	r2, [pc, #180]	; (8003d04 <TIM_OC3_SetConfig+0xe0>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2203      	movs	r2, #3
 8003c58:	4393      	bics	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	4a27      	ldr	r2, [pc, #156]	; (8003d08 <TIM_OC3_SetConfig+0xe4>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a23      	ldr	r2, [pc, #140]	; (8003d0c <TIM_OC3_SetConfig+0xe8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d10d      	bne.n	8003c9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <TIM_OC3_SetConfig+0xec>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4a1e      	ldr	r2, [pc, #120]	; (8003d14 <TIM_OC3_SetConfig+0xf0>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <TIM_OC3_SetConfig+0xe8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <TIM_OC3_SetConfig+0x92>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <TIM_OC3_SetConfig+0xf4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d003      	beq.n	8003cb6 <TIM_OC3_SetConfig+0x92>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a1a      	ldr	r2, [pc, #104]	; (8003d1c <TIM_OC3_SetConfig+0xf8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d113      	bne.n	8003cde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4a19      	ldr	r2, [pc, #100]	; (8003d20 <TIM_OC3_SetConfig+0xfc>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4a18      	ldr	r2, [pc, #96]	; (8003d24 <TIM_OC3_SetConfig+0x100>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	621a      	str	r2, [r3, #32]
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b006      	add	sp, #24
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	fffffeff 	.word	0xfffffeff
 8003d04:	fffeff8f 	.word	0xfffeff8f
 8003d08:	fffffdff 	.word	0xfffffdff
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	fffff7ff 	.word	0xfffff7ff
 8003d14:	fffffbff 	.word	0xfffffbff
 8003d18:	40014400 	.word	0x40014400
 8003d1c:	40014800 	.word	0x40014800
 8003d20:	ffffefff 	.word	0xffffefff
 8003d24:	ffffdfff 	.word	0xffffdfff

08003d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	4a24      	ldr	r2, [pc, #144]	; (8003dd0 <TIM_OC4_SetConfig+0xa8>)
 8003d3e:	401a      	ands	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4a20      	ldr	r2, [pc, #128]	; (8003dd4 <TIM_OC4_SetConfig+0xac>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <TIM_OC4_SetConfig+0xb0>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <TIM_OC4_SetConfig+0xb4>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	031b      	lsls	r3, r3, #12
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <TIM_OC4_SetConfig+0xb8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d007      	beq.n	8003d98 <TIM_OC4_SetConfig+0x70>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a16      	ldr	r2, [pc, #88]	; (8003de4 <TIM_OC4_SetConfig+0xbc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_OC4_SetConfig+0x70>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a15      	ldr	r2, [pc, #84]	; (8003de8 <TIM_OC4_SetConfig+0xc0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d109      	bne.n	8003dac <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	4a14      	ldr	r2, [pc, #80]	; (8003dec <TIM_OC4_SetConfig+0xc4>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	019b      	lsls	r3, r3, #6
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	621a      	str	r2, [r3, #32]
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b006      	add	sp, #24
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	ffffefff 	.word	0xffffefff
 8003dd4:	feff8fff 	.word	0xfeff8fff
 8003dd8:	fffffcff 	.word	0xfffffcff
 8003ddc:	ffffdfff 	.word	0xffffdfff
 8003de0:	40012c00 	.word	0x40012c00
 8003de4:	40014400 	.word	0x40014400
 8003de8:	40014800 	.word	0x40014800
 8003dec:	ffffbfff 	.word	0xffffbfff

08003df0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	4a21      	ldr	r2, [pc, #132]	; (8003e8c <TIM_OC5_SetConfig+0x9c>)
 8003e06:	401a      	ands	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a1d      	ldr	r2, [pc, #116]	; (8003e90 <TIM_OC5_SetConfig+0xa0>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4a19      	ldr	r2, [pc, #100]	; (8003e94 <TIM_OC5_SetConfig+0xa4>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	041b      	lsls	r3, r3, #16
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a15      	ldr	r2, [pc, #84]	; (8003e98 <TIM_OC5_SetConfig+0xa8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d007      	beq.n	8003e56 <TIM_OC5_SetConfig+0x66>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <TIM_OC5_SetConfig+0xac>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d003      	beq.n	8003e56 <TIM_OC5_SetConfig+0x66>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <TIM_OC5_SetConfig+0xb0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d109      	bne.n	8003e6a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <TIM_OC5_SetConfig+0x9c>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b006      	add	sp, #24
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	fffeffff 	.word	0xfffeffff
 8003e90:	fffeff8f 	.word	0xfffeff8f
 8003e94:	fffdffff 	.word	0xfffdffff
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40014400 	.word	0x40014400
 8003ea0:	40014800 	.word	0x40014800

08003ea4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	4a22      	ldr	r2, [pc, #136]	; (8003f44 <TIM_OC6_SetConfig+0xa0>)
 8003eba:	401a      	ands	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <TIM_OC6_SetConfig+0xa4>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <TIM_OC6_SetConfig+0xa8>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	051b      	lsls	r3, r3, #20
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <TIM_OC6_SetConfig+0xac>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d007      	beq.n	8003f0c <TIM_OC6_SetConfig+0x68>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <TIM_OC6_SetConfig+0xb0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d003      	beq.n	8003f0c <TIM_OC6_SetConfig+0x68>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <TIM_OC6_SetConfig+0xb4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d109      	bne.n	8003f20 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <TIM_OC6_SetConfig+0xb8>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	029b      	lsls	r3, r3, #10
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	621a      	str	r2, [r3, #32]
}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b006      	add	sp, #24
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	ffefffff 	.word	0xffefffff
 8003f48:	feff8fff 	.word	0xfeff8fff
 8003f4c:	ffdfffff 	.word	0xffdfffff
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800
 8003f5c:	fffbffff 	.word	0xfffbffff

08003f60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	221f      	movs	r2, #31
 8003f70:	4013      	ands	r3, r2
 8003f72:	2201      	movs	r2, #1
 8003f74:	409a      	lsls	r2, r3
 8003f76:	0013      	movs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	43d2      	mvns	r2, r2
 8003f82:	401a      	ands	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1a      	ldr	r2, [r3, #32]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	211f      	movs	r1, #31
 8003f90:	400b      	ands	r3, r1
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4099      	lsls	r1, r3
 8003f96:	000b      	movs	r3, r1
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b006      	add	sp, #24
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	223c      	movs	r2, #60	; 0x3c
 8003fba:	5c9b      	ldrb	r3, [r3, r2]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e06f      	b.n	80040a4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	223c      	movs	r2, #60	; 0x3c
 8003fc8:	2101      	movs	r1, #1
 8003fca:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	22ff      	movs	r2, #255	; 0xff
 8003fd0:	4393      	bics	r3, r2
 8003fd2:	001a      	movs	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a33      	ldr	r2, [pc, #204]	; (80040ac <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4a30      	ldr	r2, [pc, #192]	; (80040b0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003fee:	401a      	ands	r2, r3
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4a2e      	ldr	r2, [pc, #184]	; (80040b4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003ffc:	401a      	ands	r2, r3
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4a2b      	ldr	r2, [pc, #172]	; (80040b8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800400a:	401a      	ands	r2, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a29      	ldr	r2, [pc, #164]	; (80040bc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004018:	401a      	ands	r2, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004026:	401a      	ands	r2, r3
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a24      	ldr	r2, [pc, #144]	; (80040c4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004034:	401a      	ands	r2, r3
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a21      	ldr	r2, [pc, #132]	; (80040c8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004044:	401a      	ands	r2, r3
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1e      	ldr	r2, [pc, #120]	; (80040cc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d11c      	bne.n	8004092 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800405c:	401a      	ands	r2, r3
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	051b      	lsls	r3, r3, #20
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a1a      	ldr	r2, [pc, #104]	; (80040d4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800406c:	401a      	ands	r2, r3
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800407a:	401a      	ands	r2, r3
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a15      	ldr	r2, [pc, #84]	; (80040dc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004088:	401a      	ands	r2, r3
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	223c      	movs	r2, #60	; 0x3c
 800409e:	2100      	movs	r1, #0
 80040a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	0018      	movs	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b004      	add	sp, #16
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	fffffcff 	.word	0xfffffcff
 80040b0:	fffffbff 	.word	0xfffffbff
 80040b4:	fffff7ff 	.word	0xfffff7ff
 80040b8:	ffffefff 	.word	0xffffefff
 80040bc:	ffffdfff 	.word	0xffffdfff
 80040c0:	ffffbfff 	.word	0xffffbfff
 80040c4:	fff0ffff 	.word	0xfff0ffff
 80040c8:	efffffff 	.word	0xefffffff
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	ff0fffff 	.word	0xff0fffff
 80040d4:	feffffff 	.word	0xfeffffff
 80040d8:	fdffffff 	.word	0xfdffffff
 80040dc:	dfffffff 	.word	0xdfffffff

080040e0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e04e      	b.n	8004190 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2288      	movs	r2, #136	; 0x88
 80040f6:	589b      	ldr	r3, [r3, r2]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d107      	bne.n	800410c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2284      	movs	r2, #132	; 0x84
 8004100:	2100      	movs	r1, #0
 8004102:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	0018      	movs	r0, r3
 8004108:	f7fc fe34 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2288      	movs	r2, #136	; 0x88
 8004110:	2124      	movs	r1, #36	; 0x24
 8004112:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2101      	movs	r1, #1
 8004120:	438a      	bics	r2, r1
 8004122:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	0018      	movs	r0, r3
 8004130:	f000 f99e 	bl	8004470 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	0018      	movs	r0, r3
 8004138:	f000 f830 	bl	800419c <UART_SetConfig>
 800413c:	0003      	movs	r3, r0
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e024      	b.n	8004190 <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4911      	ldr	r1, [pc, #68]	; (8004198 <HAL_HalfDuplex_Init+0xb8>)
 8004152:	400a      	ands	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2122      	movs	r1, #34	; 0x22
 8004162:	438a      	bics	r2, r1
 8004164:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2108      	movs	r1, #8
 8004172:	430a      	orrs	r2, r1
 8004174:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2101      	movs	r1, #1
 8004182:	430a      	orrs	r2, r1
 8004184:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	0018      	movs	r0, r3
 800418a:	f000 fa25 	bl	80045d8 <UART_CheckIdleState>
 800418e:	0003      	movs	r3, r0
}
 8004190:	0018      	movs	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	b002      	add	sp, #8
 8004196:	bd80      	pop	{r7, pc}
 8004198:	ffffb7ff 	.word	0xffffb7ff

0800419c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041a4:	231a      	movs	r3, #26
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4aa1      	ldr	r2, [pc, #644]	; (8004450 <UART_SetConfig+0x2b4>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	0019      	movs	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4a9c      	ldr	r2, [pc, #624]	; (8004454 <UART_SetConfig+0x2b8>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	0019      	movs	r1, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a93      	ldr	r2, [pc, #588]	; (8004458 <UART_SetConfig+0x2bc>)
 800420a:	4013      	ands	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	430a      	orrs	r2, r1
 8004216:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	220f      	movs	r2, #15
 8004220:	4393      	bics	r3, r2
 8004222:	0019      	movs	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a89      	ldr	r2, [pc, #548]	; (800445c <UART_SetConfig+0x2c0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d127      	bne.n	800428a <UART_SetConfig+0xee>
 800423a:	4b89      	ldr	r3, [pc, #548]	; (8004460 <UART_SetConfig+0x2c4>)
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	2203      	movs	r2, #3
 8004240:	4013      	ands	r3, r2
 8004242:	2b03      	cmp	r3, #3
 8004244:	d017      	beq.n	8004276 <UART_SetConfig+0xda>
 8004246:	d81b      	bhi.n	8004280 <UART_SetConfig+0xe4>
 8004248:	2b02      	cmp	r3, #2
 800424a:	d00a      	beq.n	8004262 <UART_SetConfig+0xc6>
 800424c:	d818      	bhi.n	8004280 <UART_SetConfig+0xe4>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <UART_SetConfig+0xbc>
 8004252:	2b01      	cmp	r3, #1
 8004254:	d00a      	beq.n	800426c <UART_SetConfig+0xd0>
 8004256:	e013      	b.n	8004280 <UART_SetConfig+0xe4>
 8004258:	231b      	movs	r3, #27
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	e021      	b.n	80042a6 <UART_SetConfig+0x10a>
 8004262:	231b      	movs	r3, #27
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	2202      	movs	r2, #2
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e01c      	b.n	80042a6 <UART_SetConfig+0x10a>
 800426c:	231b      	movs	r3, #27
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	2204      	movs	r2, #4
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e017      	b.n	80042a6 <UART_SetConfig+0x10a>
 8004276:	231b      	movs	r3, #27
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	2208      	movs	r2, #8
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	e012      	b.n	80042a6 <UART_SetConfig+0x10a>
 8004280:	231b      	movs	r3, #27
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	2210      	movs	r2, #16
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	e00d      	b.n	80042a6 <UART_SetConfig+0x10a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a75      	ldr	r2, [pc, #468]	; (8004464 <UART_SetConfig+0x2c8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d104      	bne.n	800429e <UART_SetConfig+0x102>
 8004294:	231b      	movs	r3, #27
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e003      	b.n	80042a6 <UART_SetConfig+0x10a>
 800429e:	231b      	movs	r3, #27
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	2210      	movs	r2, #16
 80042a4:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69da      	ldr	r2, [r3, #28]
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d000      	beq.n	80042b4 <UART_SetConfig+0x118>
 80042b2:	e065      	b.n	8004380 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80042b4:	231b      	movs	r3, #27
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d015      	beq.n	80042ea <UART_SetConfig+0x14e>
 80042be:	dc18      	bgt.n	80042f2 <UART_SetConfig+0x156>
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d00d      	beq.n	80042e0 <UART_SetConfig+0x144>
 80042c4:	dc15      	bgt.n	80042f2 <UART_SetConfig+0x156>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <UART_SetConfig+0x134>
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d005      	beq.n	80042da <UART_SetConfig+0x13e>
 80042ce:	e010      	b.n	80042f2 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d0:	f7fe fbd6 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 80042d4:	0003      	movs	r3, r0
 80042d6:	617b      	str	r3, [r7, #20]
        break;
 80042d8:	e012      	b.n	8004300 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042da:	4b63      	ldr	r3, [pc, #396]	; (8004468 <UART_SetConfig+0x2cc>)
 80042dc:	617b      	str	r3, [r7, #20]
        break;
 80042de:	e00f      	b.n	8004300 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e0:	f7fe fb42 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 80042e4:	0003      	movs	r3, r0
 80042e6:	617b      	str	r3, [r7, #20]
        break;
 80042e8:	e00a      	b.n	8004300 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	617b      	str	r3, [r7, #20]
        break;
 80042f0:	e006      	b.n	8004300 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042f6:	231a      	movs	r3, #26
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
        break;
 80042fe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d100      	bne.n	8004308 <UART_SetConfig+0x16c>
 8004306:	e08d      	b.n	8004424 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800430c:	4b57      	ldr	r3, [pc, #348]	; (800446c <UART_SetConfig+0x2d0>)
 800430e:	0052      	lsls	r2, r2, #1
 8004310:	5ad3      	ldrh	r3, [r2, r3]
 8004312:	0019      	movs	r1, r3
 8004314:	6978      	ldr	r0, [r7, #20]
 8004316:	f7fb fef3 	bl	8000100 <__udivsi3>
 800431a:	0003      	movs	r3, r0
 800431c:	005a      	lsls	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	18d2      	adds	r2, r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	0019      	movs	r1, r3
 800432c:	0010      	movs	r0, r2
 800432e:	f7fb fee7 	bl	8000100 <__udivsi3>
 8004332:	0003      	movs	r3, r0
 8004334:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b0f      	cmp	r3, #15
 800433a:	d91c      	bls.n	8004376 <UART_SetConfig+0x1da>
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	2380      	movs	r3, #128	; 0x80
 8004340:	025b      	lsls	r3, r3, #9
 8004342:	429a      	cmp	r2, r3
 8004344:	d217      	bcs.n	8004376 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	b29a      	uxth	r2, r3
 800434a:	200e      	movs	r0, #14
 800434c:	183b      	adds	r3, r7, r0
 800434e:	210f      	movs	r1, #15
 8004350:	438a      	bics	r2, r1
 8004352:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	085b      	lsrs	r3, r3, #1
 8004358:	b29b      	uxth	r3, r3
 800435a:	2207      	movs	r2, #7
 800435c:	4013      	ands	r3, r2
 800435e:	b299      	uxth	r1, r3
 8004360:	183b      	adds	r3, r7, r0
 8004362:	183a      	adds	r2, r7, r0
 8004364:	8812      	ldrh	r2, [r2, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	183a      	adds	r2, r7, r0
 8004370:	8812      	ldrh	r2, [r2, #0]
 8004372:	60da      	str	r2, [r3, #12]
 8004374:	e056      	b.n	8004424 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004376:	231a      	movs	r3, #26
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	2201      	movs	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e051      	b.n	8004424 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004380:	231b      	movs	r3, #27
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b08      	cmp	r3, #8
 8004388:	d015      	beq.n	80043b6 <UART_SetConfig+0x21a>
 800438a:	dc18      	bgt.n	80043be <UART_SetConfig+0x222>
 800438c:	2b04      	cmp	r3, #4
 800438e:	d00d      	beq.n	80043ac <UART_SetConfig+0x210>
 8004390:	dc15      	bgt.n	80043be <UART_SetConfig+0x222>
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <UART_SetConfig+0x200>
 8004396:	2b02      	cmp	r3, #2
 8004398:	d005      	beq.n	80043a6 <UART_SetConfig+0x20a>
 800439a:	e010      	b.n	80043be <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800439c:	f7fe fb70 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 80043a0:	0003      	movs	r3, r0
 80043a2:	617b      	str	r3, [r7, #20]
        break;
 80043a4:	e012      	b.n	80043cc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a6:	4b30      	ldr	r3, [pc, #192]	; (8004468 <UART_SetConfig+0x2cc>)
 80043a8:	617b      	str	r3, [r7, #20]
        break;
 80043aa:	e00f      	b.n	80043cc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ac:	f7fe fadc 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 80043b0:	0003      	movs	r3, r0
 80043b2:	617b      	str	r3, [r7, #20]
        break;
 80043b4:	e00a      	b.n	80043cc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	617b      	str	r3, [r7, #20]
        break;
 80043bc:	e006      	b.n	80043cc <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043c2:	231a      	movs	r3, #26
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	2201      	movs	r2, #1
 80043c8:	701a      	strb	r2, [r3, #0]
        break;
 80043ca:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d028      	beq.n	8004424 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d6:	4b25      	ldr	r3, [pc, #148]	; (800446c <UART_SetConfig+0x2d0>)
 80043d8:	0052      	lsls	r2, r2, #1
 80043da:	5ad3      	ldrh	r3, [r2, r3]
 80043dc:	0019      	movs	r1, r3
 80043de:	6978      	ldr	r0, [r7, #20]
 80043e0:	f7fb fe8e 	bl	8000100 <__udivsi3>
 80043e4:	0003      	movs	r3, r0
 80043e6:	001a      	movs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	18d2      	adds	r2, r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	0019      	movs	r1, r3
 80043f6:	0010      	movs	r0, r2
 80043f8:	f7fb fe82 	bl	8000100 <__udivsi3>
 80043fc:	0003      	movs	r3, r0
 80043fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b0f      	cmp	r3, #15
 8004404:	d90a      	bls.n	800441c <UART_SetConfig+0x280>
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	025b      	lsls	r3, r3, #9
 800440c:	429a      	cmp	r2, r3
 800440e:	d205      	bcs.n	800441c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	b29a      	uxth	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60da      	str	r2, [r3, #12]
 800441a:	e003      	b.n	8004424 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800441c:	231a      	movs	r3, #26
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	2201      	movs	r2, #1
 8004422:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	226a      	movs	r2, #106	; 0x6a
 8004428:	2101      	movs	r1, #1
 800442a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2268      	movs	r2, #104	; 0x68
 8004430:	2101      	movs	r1, #1
 8004432:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004440:	231a      	movs	r3, #26
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	781b      	ldrb	r3, [r3, #0]
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b008      	add	sp, #32
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	cfff69f3 	.word	0xcfff69f3
 8004454:	ffffcfff 	.word	0xffffcfff
 8004458:	11fff4ff 	.word	0x11fff4ff
 800445c:	40013800 	.word	0x40013800
 8004460:	40021000 	.word	0x40021000
 8004464:	40004400 	.word	0x40004400
 8004468:	00f42400 	.word	0x00f42400
 800446c:	08006108 	.word	0x08006108

08004470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	2208      	movs	r2, #8
 800447e:	4013      	ands	r3, r2
 8004480:	d00b      	beq.n	800449a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4a4a      	ldr	r2, [pc, #296]	; (80045b4 <UART_AdvFeatureConfig+0x144>)
 800448a:	4013      	ands	r3, r2
 800448c:	0019      	movs	r1, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	2201      	movs	r2, #1
 80044a0:	4013      	ands	r3, r2
 80044a2:	d00b      	beq.n	80044bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4a43      	ldr	r2, [pc, #268]	; (80045b8 <UART_AdvFeatureConfig+0x148>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	0019      	movs	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	2202      	movs	r2, #2
 80044c2:	4013      	ands	r3, r2
 80044c4:	d00b      	beq.n	80044de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4a3b      	ldr	r2, [pc, #236]	; (80045bc <UART_AdvFeatureConfig+0x14c>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	0019      	movs	r1, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	2204      	movs	r2, #4
 80044e4:	4013      	ands	r3, r2
 80044e6:	d00b      	beq.n	8004500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	4a34      	ldr	r2, [pc, #208]	; (80045c0 <UART_AdvFeatureConfig+0x150>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	0019      	movs	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	2210      	movs	r2, #16
 8004506:	4013      	ands	r3, r2
 8004508:	d00b      	beq.n	8004522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4a2c      	ldr	r2, [pc, #176]	; (80045c4 <UART_AdvFeatureConfig+0x154>)
 8004512:	4013      	ands	r3, r2
 8004514:	0019      	movs	r1, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004526:	2220      	movs	r2, #32
 8004528:	4013      	ands	r3, r2
 800452a:	d00b      	beq.n	8004544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	4a25      	ldr	r2, [pc, #148]	; (80045c8 <UART_AdvFeatureConfig+0x158>)
 8004534:	4013      	ands	r3, r2
 8004536:	0019      	movs	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	2240      	movs	r2, #64	; 0x40
 800454a:	4013      	ands	r3, r2
 800454c:	d01d      	beq.n	800458a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <UART_AdvFeatureConfig+0x15c>)
 8004556:	4013      	ands	r3, r2
 8004558:	0019      	movs	r1, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	035b      	lsls	r3, r3, #13
 800456e:	429a      	cmp	r2, r3
 8004570:	d10b      	bne.n	800458a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <UART_AdvFeatureConfig+0x160>)
 800457a:	4013      	ands	r3, r2
 800457c:	0019      	movs	r1, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	2280      	movs	r2, #128	; 0x80
 8004590:	4013      	ands	r3, r2
 8004592:	d00b      	beq.n	80045ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4a0e      	ldr	r2, [pc, #56]	; (80045d4 <UART_AdvFeatureConfig+0x164>)
 800459c:	4013      	ands	r3, r2
 800459e:	0019      	movs	r1, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
  }
}
 80045ac:	46c0      	nop			; (mov r8, r8)
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b002      	add	sp, #8
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	ffff7fff 	.word	0xffff7fff
 80045b8:	fffdffff 	.word	0xfffdffff
 80045bc:	fffeffff 	.word	0xfffeffff
 80045c0:	fffbffff 	.word	0xfffbffff
 80045c4:	ffffefff 	.word	0xffffefff
 80045c8:	ffffdfff 	.word	0xffffdfff
 80045cc:	ffefffff 	.word	0xffefffff
 80045d0:	ff9fffff 	.word	0xff9fffff
 80045d4:	fff7ffff 	.word	0xfff7ffff

080045d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b092      	sub	sp, #72	; 0x48
 80045dc:	af02      	add	r7, sp, #8
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2290      	movs	r2, #144	; 0x90
 80045e4:	2100      	movs	r1, #0
 80045e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045e8:	f7fc fccc 	bl	8000f84 <HAL_GetTick>
 80045ec:	0003      	movs	r3, r0
 80045ee:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2208      	movs	r2, #8
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d12d      	bne.n	800465a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004600:	2280      	movs	r2, #128	; 0x80
 8004602:	0391      	lsls	r1, r2, #14
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	4a47      	ldr	r2, [pc, #284]	; (8004724 <UART_CheckIdleState+0x14c>)
 8004608:	9200      	str	r2, [sp, #0]
 800460a:	2200      	movs	r2, #0
 800460c:	f000 f88e 	bl	800472c <UART_WaitOnFlagUntilTimeout>
 8004610:	1e03      	subs	r3, r0, #0
 8004612:	d022      	beq.n	800465a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004614:	f3ef 8310 	mrs	r3, PRIMASK
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800461c:	63bb      	str	r3, [r7, #56]	; 0x38
 800461e:	2301      	movs	r3, #1
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	f383 8810 	msr	PRIMASK, r3
}
 8004628:	46c0      	nop			; (mov r8, r8)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2180      	movs	r1, #128	; 0x80
 8004636:	438a      	bics	r2, r1
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	f383 8810 	msr	PRIMASK, r3
}
 8004644:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2288      	movs	r2, #136	; 0x88
 800464a:	2120      	movs	r1, #32
 800464c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2284      	movs	r2, #132	; 0x84
 8004652:	2100      	movs	r1, #0
 8004654:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e060      	b.n	800471c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2204      	movs	r2, #4
 8004662:	4013      	ands	r3, r2
 8004664:	2b04      	cmp	r3, #4
 8004666:	d146      	bne.n	80046f6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466a:	2280      	movs	r2, #128	; 0x80
 800466c:	03d1      	lsls	r1, r2, #15
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	4a2c      	ldr	r2, [pc, #176]	; (8004724 <UART_CheckIdleState+0x14c>)
 8004672:	9200      	str	r2, [sp, #0]
 8004674:	2200      	movs	r2, #0
 8004676:	f000 f859 	bl	800472c <UART_WaitOnFlagUntilTimeout>
 800467a:	1e03      	subs	r3, r0, #0
 800467c:	d03b      	beq.n	80046f6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800467e:	f3ef 8310 	mrs	r3, PRIMASK
 8004682:	60fb      	str	r3, [r7, #12]
  return(result);
 8004684:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
 8004688:	2301      	movs	r3, #1
 800468a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f383 8810 	msr	PRIMASK, r3
}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4922      	ldr	r1, [pc, #136]	; (8004728 <UART_CheckIdleState+0x150>)
 80046a0:	400a      	ands	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f383 8810 	msr	PRIMASK, r3
}
 80046ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b0:	f3ef 8310 	mrs	r3, PRIMASK
 80046b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80046b6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b8:	633b      	str	r3, [r7, #48]	; 0x30
 80046ba:	2301      	movs	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f383 8810 	msr	PRIMASK, r3
}
 80046c4:	46c0      	nop			; (mov r8, r8)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2101      	movs	r1, #1
 80046d2:	438a      	bics	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f383 8810 	msr	PRIMASK, r3
}
 80046e0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	228c      	movs	r2, #140	; 0x8c
 80046e6:	2120      	movs	r1, #32
 80046e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2284      	movs	r2, #132	; 0x84
 80046ee:	2100      	movs	r1, #0
 80046f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e012      	b.n	800471c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2288      	movs	r2, #136	; 0x88
 80046fa:	2120      	movs	r1, #32
 80046fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	228c      	movs	r2, #140	; 0x8c
 8004702:	2120      	movs	r1, #32
 8004704:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2284      	movs	r2, #132	; 0x84
 8004716:	2100      	movs	r1, #0
 8004718:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	0018      	movs	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	b010      	add	sp, #64	; 0x40
 8004722:	bd80      	pop	{r7, pc}
 8004724:	01ffffff 	.word	0x01ffffff
 8004728:	fffffedf 	.word	0xfffffedf

0800472c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	1dfb      	adds	r3, r7, #7
 800473a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800473c:	e051      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	3301      	adds	r3, #1
 8004742:	d04e      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004744:	f7fc fc1e 	bl	8000f84 <HAL_GetTick>
 8004748:	0002      	movs	r2, r0
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	429a      	cmp	r2, r3
 8004752:	d302      	bcc.n	800475a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e051      	b.n	8004802 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2204      	movs	r2, #4
 8004766:	4013      	ands	r3, r2
 8004768:	d03b      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b80      	cmp	r3, #128	; 0x80
 800476e:	d038      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b40      	cmp	r3, #64	; 0x40
 8004774:	d035      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	2208      	movs	r2, #8
 800477e:	4013      	ands	r3, r2
 8004780:	2b08      	cmp	r3, #8
 8004782:	d111      	bne.n	80047a8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2208      	movs	r2, #8
 800478a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	0018      	movs	r0, r3
 8004790:	f000 f83c 	bl	800480c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2290      	movs	r2, #144	; 0x90
 8004798:	2108      	movs	r1, #8
 800479a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2284      	movs	r2, #132	; 0x84
 80047a0:	2100      	movs	r1, #0
 80047a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e02c      	b.n	8004802 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69da      	ldr	r2, [r3, #28]
 80047ae:	2380      	movs	r3, #128	; 0x80
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	401a      	ands	r2, r3
 80047b4:	2380      	movs	r3, #128	; 0x80
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d112      	bne.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2280      	movs	r2, #128	; 0x80
 80047c2:	0112      	lsls	r2, r2, #4
 80047c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	0018      	movs	r0, r3
 80047ca:	f000 f81f 	bl	800480c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2290      	movs	r2, #144	; 0x90
 80047d2:	2120      	movs	r1, #32
 80047d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2284      	movs	r2, #132	; 0x84
 80047da:	2100      	movs	r1, #0
 80047dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e00f      	b.n	8004802 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	4013      	ands	r3, r2
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	425a      	negs	r2, r3
 80047f2:	4153      	adcs	r3, r2
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	001a      	movs	r2, r3
 80047f8:	1dfb      	adds	r3, r7, #7
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d09e      	beq.n	800473e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	0018      	movs	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	b004      	add	sp, #16
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08e      	sub	sp, #56	; 0x38
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004814:	f3ef 8310 	mrs	r3, PRIMASK
 8004818:	617b      	str	r3, [r7, #20]
  return(result);
 800481a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800481c:	637b      	str	r3, [r7, #52]	; 0x34
 800481e:	2301      	movs	r3, #1
 8004820:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	f383 8810 	msr	PRIMASK, r3
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4926      	ldr	r1, [pc, #152]	; (80048d0 <UART_EndRxTransfer+0xc4>)
 8004836:	400a      	ands	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	f383 8810 	msr	PRIMASK, r3
}
 8004844:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004846:	f3ef 8310 	mrs	r3, PRIMASK
 800484a:	623b      	str	r3, [r7, #32]
  return(result);
 800484c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800484e:	633b      	str	r3, [r7, #48]	; 0x30
 8004850:	2301      	movs	r3, #1
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	f383 8810 	msr	PRIMASK, r3
}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	491b      	ldr	r1, [pc, #108]	; (80048d4 <UART_EndRxTransfer+0xc8>)
 8004868:	400a      	ands	r2, r1
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	f383 8810 	msr	PRIMASK, r3
}
 8004876:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487c:	2b01      	cmp	r3, #1
 800487e:	d118      	bne.n	80048b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004880:	f3ef 8310 	mrs	r3, PRIMASK
 8004884:	60bb      	str	r3, [r7, #8]
  return(result);
 8004886:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488a:	2301      	movs	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f383 8810 	msr	PRIMASK, r3
}
 8004894:	46c0      	nop			; (mov r8, r8)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2110      	movs	r1, #16
 80048a2:	438a      	bics	r2, r1
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f383 8810 	msr	PRIMASK, r3
}
 80048b0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	228c      	movs	r2, #140	; 0x8c
 80048b6:	2120      	movs	r1, #32
 80048b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b00e      	add	sp, #56	; 0x38
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	fffffedf 	.word	0xfffffedf
 80048d4:	effffffe 	.word	0xeffffffe

080048d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2284      	movs	r2, #132	; 0x84
 80048e4:	5c9b      	ldrb	r3, [r3, r2]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_UARTEx_DisableFifoMode+0x16>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e027      	b.n	800493e <HAL_UARTEx_DisableFifoMode+0x66>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2284      	movs	r2, #132	; 0x84
 80048f2:	2101      	movs	r1, #1
 80048f4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2288      	movs	r2, #136	; 0x88
 80048fa:	2124      	movs	r1, #36	; 0x24
 80048fc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2101      	movs	r1, #1
 8004912:	438a      	bics	r2, r1
 8004914:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a0b      	ldr	r2, [pc, #44]	; (8004948 <HAL_UARTEx_DisableFifoMode+0x70>)
 800491a:	4013      	ands	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2288      	movs	r2, #136	; 0x88
 8004930:	2120      	movs	r1, #32
 8004932:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2284      	movs	r2, #132	; 0x84
 8004938:	2100      	movs	r1, #0
 800493a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	0018      	movs	r0, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	b004      	add	sp, #16
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	dfffffff 	.word	0xdfffffff

0800494c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2284      	movs	r2, #132	; 0x84
 800495a:	5c9b      	ldrb	r3, [r3, r2]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004960:	2302      	movs	r3, #2
 8004962:	e02e      	b.n	80049c2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2284      	movs	r2, #132	; 0x84
 8004968:	2101      	movs	r1, #1
 800496a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2288      	movs	r2, #136	; 0x88
 8004970:	2124      	movs	r1, #36	; 0x24
 8004972:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2101      	movs	r1, #1
 8004988:	438a      	bics	r2, r1
 800498a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	08d9      	lsrs	r1, r3, #3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	0018      	movs	r0, r3
 80049a4:	f000 f854 	bl	8004a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2288      	movs	r2, #136	; 0x88
 80049b4:	2120      	movs	r1, #32
 80049b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2284      	movs	r2, #132	; 0x84
 80049bc:	2100      	movs	r1, #0
 80049be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b004      	add	sp, #16
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2284      	movs	r2, #132	; 0x84
 80049da:	5c9b      	ldrb	r3, [r3, r2]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e02f      	b.n	8004a44 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2284      	movs	r2, #132	; 0x84
 80049e8:	2101      	movs	r1, #1
 80049ea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2288      	movs	r2, #136	; 0x88
 80049f0:	2124      	movs	r1, #36	; 0x24
 80049f2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2101      	movs	r1, #1
 8004a08:	438a      	bics	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	4a0e      	ldr	r2, [pc, #56]	; (8004a4c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	0019      	movs	r1, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 f813 	bl	8004a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2288      	movs	r2, #136	; 0x88
 8004a36:	2120      	movs	r1, #32
 8004a38:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2284      	movs	r2, #132	; 0x84
 8004a3e:	2100      	movs	r1, #0
 8004a40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	0018      	movs	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b004      	add	sp, #16
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	f1ffffff 	.word	0xf1ffffff

08004a50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d108      	bne.n	8004a72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	226a      	movs	r2, #106	; 0x6a
 8004a64:	2101      	movs	r1, #1
 8004a66:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2268      	movs	r2, #104	; 0x68
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a70:	e043      	b.n	8004afa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a72:	260f      	movs	r6, #15
 8004a74:	19bb      	adds	r3, r7, r6
 8004a76:	2208      	movs	r2, #8
 8004a78:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a7a:	200e      	movs	r0, #14
 8004a7c:	183b      	adds	r3, r7, r0
 8004a7e:	2208      	movs	r2, #8
 8004a80:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	0e5b      	lsrs	r3, r3, #25
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	240d      	movs	r4, #13
 8004a8e:	193b      	adds	r3, r7, r4
 8004a90:	2107      	movs	r1, #7
 8004a92:	400a      	ands	r2, r1
 8004a94:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	0f5b      	lsrs	r3, r3, #29
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	250c      	movs	r5, #12
 8004aa2:	197b      	adds	r3, r7, r5
 8004aa4:	2107      	movs	r1, #7
 8004aa6:	400a      	ands	r2, r1
 8004aa8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004aaa:	183b      	adds	r3, r7, r0
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	197a      	adds	r2, r7, r5
 8004ab0:	7812      	ldrb	r2, [r2, #0]
 8004ab2:	4914      	ldr	r1, [pc, #80]	; (8004b04 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ab4:	5c8a      	ldrb	r2, [r1, r2]
 8004ab6:	435a      	muls	r2, r3
 8004ab8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004aba:	197b      	adds	r3, r7, r5
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	4a12      	ldr	r2, [pc, #72]	; (8004b08 <UARTEx_SetNbDataToProcess+0xb8>)
 8004ac0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	f7fb fba6 	bl	8000214 <__divsi3>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	b299      	uxth	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	226a      	movs	r2, #106	; 0x6a
 8004ad0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ad2:	19bb      	adds	r3, r7, r6
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	193a      	adds	r2, r7, r4
 8004ad8:	7812      	ldrb	r2, [r2, #0]
 8004ada:	490a      	ldr	r1, [pc, #40]	; (8004b04 <UARTEx_SetNbDataToProcess+0xb4>)
 8004adc:	5c8a      	ldrb	r2, [r1, r2]
 8004ade:	435a      	muls	r2, r3
 8004ae0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ae2:	193b      	adds	r3, r7, r4
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <UARTEx_SetNbDataToProcess+0xb8>)
 8004ae8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004aea:	0019      	movs	r1, r3
 8004aec:	f7fb fb92 	bl	8000214 <__divsi3>
 8004af0:	0003      	movs	r3, r0
 8004af2:	b299      	uxth	r1, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2268      	movs	r2, #104	; 0x68
 8004af8:	5299      	strh	r1, [r3, r2]
}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b005      	add	sp, #20
 8004b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	08006120 	.word	0x08006120
 8004b08:	08006128 	.word	0x08006128

08004b0c <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	0002      	movs	r2, r0
 8004b14:	1dfb      	adds	r3, r7, #7
 8004b16:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 8004b18:	23fa      	movs	r3, #250	; 0xfa
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	1df9      	adds	r1, r7, #7
 8004b1e:	4804      	ldr	r0, [pc, #16]	; (8004b30 <DEV_SPI_WRite+0x24>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	f7fe f9a1 	bl	8002e68 <HAL_SPI_Transmit>
}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b002      	add	sp, #8
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	200000f8 	.word	0x200000f8

08004b34 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	480d      	ldr	r0, [pc, #52]	; (8004b74 <DEV_Module_Init+0x40>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	0019      	movs	r1, r3
 8004b42:	f7fd fa8f 	bl	8002064 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	480b      	ldr	r0, [pc, #44]	; (8004b78 <DEV_Module_Init+0x44>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	0019      	movs	r1, r3
 8004b50:	f7fd fa88 	bl	8002064 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8004b54:	23a0      	movs	r3, #160	; 0xa0
 8004b56:	05db      	lsls	r3, r3, #23
 8004b58:	2201      	movs	r2, #1
 8004b5a:	2108      	movs	r1, #8
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7fd fa81 	bl	8002064 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <DEV_Module_Init+0x48>)
 8004b64:	2100      	movs	r1, #0
 8004b66:	0018      	movs	r0, r3
 8004b68:	f7fe fd0c 	bl	8003584 <HAL_TIM_PWM_Start>
		return 0;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	0018      	movs	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	50000800 	.word	0x50000800
 8004b78:	50000400 	.word	0x50000400
 8004b7c:	2000015c 	.word	0x2000015c

08004b80 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8004b80:	b5b0      	push	{r4, r5, r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	0005      	movs	r5, r0
 8004b88:	000c      	movs	r4, r1
 8004b8a:	0010      	movs	r0, r2
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	1dbb      	adds	r3, r7, #6
 8004b90:	1c2a      	adds	r2, r5, #0
 8004b92:	801a      	strh	r2, [r3, #0]
 8004b94:	1d3b      	adds	r3, r7, #4
 8004b96:	1c22      	adds	r2, r4, #0
 8004b98:	801a      	strh	r2, [r3, #0]
 8004b9a:	1cbb      	adds	r3, r7, #2
 8004b9c:	1c02      	adds	r2, r0, #0
 8004b9e:	801a      	strh	r2, [r3, #0]
 8004ba0:	003b      	movs	r3, r7
 8004ba2:	1c0a      	adds	r2, r1, #0
 8004ba4:	801a      	strh	r2, [r3, #0]
    Paint.WidthMemory = Width;
 8004ba6:	4b1c      	ldr	r3, [pc, #112]	; (8004c18 <Paint_NewImage+0x98>)
 8004ba8:	1dba      	adds	r2, r7, #6
 8004baa:	8812      	ldrh	r2, [r2, #0]
 8004bac:	811a      	strh	r2, [r3, #8]
    Paint.HeightMemory = Height;
 8004bae:	4b1a      	ldr	r3, [pc, #104]	; (8004c18 <Paint_NewImage+0x98>)
 8004bb0:	1d3a      	adds	r2, r7, #4
 8004bb2:	8812      	ldrh	r2, [r2, #0]
 8004bb4:	815a      	strh	r2, [r3, #10]
    Paint.Color = Color;    
 8004bb6:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <Paint_NewImage+0x98>)
 8004bb8:	003a      	movs	r2, r7
 8004bba:	8812      	ldrh	r2, [r2, #0]
 8004bbc:	819a      	strh	r2, [r3, #12]
    Paint.WidthByte = Width;
 8004bbe:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <Paint_NewImage+0x98>)
 8004bc0:	1dba      	adds	r2, r7, #6
 8004bc2:	8812      	ldrh	r2, [r2, #0]
 8004bc4:	825a      	strh	r2, [r3, #18]
    Paint.HeightByte = Height;    
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <Paint_NewImage+0x98>)
 8004bc8:	1d3a      	adds	r2, r7, #4
 8004bca:	8812      	ldrh	r2, [r2, #0]
 8004bcc:	829a      	strh	r2, [r3, #20]
   
    Paint.Rotate = Rotate;
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <Paint_NewImage+0x98>)
 8004bd0:	1cba      	adds	r2, r7, #2
 8004bd2:	8812      	ldrh	r2, [r2, #0]
 8004bd4:	81da      	strh	r2, [r3, #14]
    Paint.Mirror = MIRROR_NONE;
 8004bd6:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <Paint_NewImage+0x98>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8004bdc:	1cbb      	adds	r3, r7, #2
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <Paint_NewImage+0x6c>
 8004be4:	1cbb      	adds	r3, r7, #2
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	2bb4      	cmp	r3, #180	; 0xb4
 8004bea:	d108      	bne.n	8004bfe <Paint_NewImage+0x7e>
        Paint.Width = Width;
 8004bec:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <Paint_NewImage+0x98>)
 8004bee:	1dba      	adds	r2, r7, #6
 8004bf0:	8812      	ldrh	r2, [r2, #0]
 8004bf2:	809a      	strh	r2, [r3, #4]
        Paint.Height = Height;
 8004bf4:	4b08      	ldr	r3, [pc, #32]	; (8004c18 <Paint_NewImage+0x98>)
 8004bf6:	1d3a      	adds	r2, r7, #4
 8004bf8:	8812      	ldrh	r2, [r2, #0]
 8004bfa:	80da      	strh	r2, [r3, #6]
 8004bfc:	e008      	b.n	8004c10 <Paint_NewImage+0x90>
    } else {
        Paint.Width = Height;
 8004bfe:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <Paint_NewImage+0x98>)
 8004c00:	1d3a      	adds	r2, r7, #4
 8004c02:	8812      	ldrh	r2, [r2, #0]
 8004c04:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 8004c06:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <Paint_NewImage+0x98>)
 8004c08:	1dba      	adds	r2, r7, #6
 8004c0a:	8812      	ldrh	r2, [r2, #0]
 8004c0c:	80da      	strh	r2, [r3, #6]
    }
}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	46c0      	nop			; (mov r8, r8)
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b002      	add	sp, #8
 8004c16:	bdb0      	pop	{r4, r5, r7, pc}
 8004c18:	20000240 	.word	0x20000240

08004c1c <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <Paint_SetClearFuntion+0x18>)
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	601a      	str	r2, [r3, #0]
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b002      	add	sp, #8
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	2000025c 	.word	0x2000025c

08004c38 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8004c40:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <Paint_SetDisplayFuntion+0x18>)
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]
}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b002      	add	sp, #8
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	20000258 	.word	0x20000258

08004c54 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8004c54:	b590      	push	{r4, r7, lr}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	0004      	movs	r4, r0
 8004c5c:	0008      	movs	r0, r1
 8004c5e:	0011      	movs	r1, r2
 8004c60:	1dbb      	adds	r3, r7, #6
 8004c62:	1c22      	adds	r2, r4, #0
 8004c64:	801a      	strh	r2, [r3, #0]
 8004c66:	1d3b      	adds	r3, r7, #4
 8004c68:	1c02      	adds	r2, r0, #0
 8004c6a:	801a      	strh	r2, [r3, #0]
 8004c6c:	1cbb      	adds	r3, r7, #2
 8004c6e:	1c0a      	adds	r2, r1, #0
 8004c70:	801a      	strh	r2, [r3, #0]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8004c72:	4b66      	ldr	r3, [pc, #408]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004c74:	889b      	ldrh	r3, [r3, #4]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	1dba      	adds	r2, r7, #6
 8004c7a:	8812      	ldrh	r2, [r2, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d900      	bls.n	8004c82 <Paint_SetPixel+0x2e>
 8004c80:	e0b9      	b.n	8004df6 <Paint_SetPixel+0x1a2>
 8004c82:	4b62      	ldr	r3, [pc, #392]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004c84:	88db      	ldrh	r3, [r3, #6]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	1d3a      	adds	r2, r7, #4
 8004c8a:	8812      	ldrh	r2, [r2, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d900      	bls.n	8004c92 <Paint_SetPixel+0x3e>
 8004c90:	e0b1      	b.n	8004df6 <Paint_SetPixel+0x1a2>
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8004c92:	4b5e      	ldr	r3, [pc, #376]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004c94:	89db      	ldrh	r3, [r3, #14]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2287      	movs	r2, #135	; 0x87
 8004c9a:	0052      	lsls	r2, r2, #1
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d040      	beq.n	8004d22 <Paint_SetPixel+0xce>
 8004ca0:	2287      	movs	r2, #135	; 0x87
 8004ca2:	0052      	lsls	r2, r2, #1
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	dd00      	ble.n	8004caa <Paint_SetPixel+0x56>
 8004ca8:	e0a7      	b.n	8004dfa <Paint_SetPixel+0x1a6>
 8004caa:	2bb4      	cmp	r3, #180	; 0xb4
 8004cac:	d022      	beq.n	8004cf4 <Paint_SetPixel+0xa0>
 8004cae:	dd00      	ble.n	8004cb2 <Paint_SetPixel+0x5e>
 8004cb0:	e0a3      	b.n	8004dfa <Paint_SetPixel+0x1a6>
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <Paint_SetPixel+0x68>
 8004cb6:	2b5a      	cmp	r3, #90	; 0x5a
 8004cb8:	d00b      	beq.n	8004cd2 <Paint_SetPixel+0x7e>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8004cba:	e09e      	b.n	8004dfa <Paint_SetPixel+0x1a6>
        X = Xpoint;
 8004cbc:	230e      	movs	r3, #14
 8004cbe:	18fb      	adds	r3, r7, r3
 8004cc0:	1dba      	adds	r2, r7, #6
 8004cc2:	8812      	ldrh	r2, [r2, #0]
 8004cc4:	801a      	strh	r2, [r3, #0]
        Y = Ypoint;  
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	1d3a      	adds	r2, r7, #4
 8004ccc:	8812      	ldrh	r2, [r2, #0]
 8004cce:	801a      	strh	r2, [r3, #0]
        break;
 8004cd0:	e038      	b.n	8004d44 <Paint_SetPixel+0xf0>
        X = Paint.WidthMemory - Ypoint - 1;
 8004cd2:	4b4e      	ldr	r3, [pc, #312]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004cd4:	891b      	ldrh	r3, [r3, #8]
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	1d3b      	adds	r3, r7, #4
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	230e      	movs	r3, #14
 8004ce2:	18fb      	adds	r3, r7, r3
 8004ce4:	3a01      	subs	r2, #1
 8004ce6:	801a      	strh	r2, [r3, #0]
        Y = Xpoint;
 8004ce8:	230c      	movs	r3, #12
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	1dba      	adds	r2, r7, #6
 8004cee:	8812      	ldrh	r2, [r2, #0]
 8004cf0:	801a      	strh	r2, [r3, #0]
        break;
 8004cf2:	e027      	b.n	8004d44 <Paint_SetPixel+0xf0>
        X = Paint.WidthMemory - Xpoint - 1;
 8004cf4:	4b45      	ldr	r3, [pc, #276]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004cf6:	891b      	ldrh	r3, [r3, #8]
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	1dbb      	adds	r3, r7, #6
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	230e      	movs	r3, #14
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	3a01      	subs	r2, #1
 8004d08:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Ypoint - 1;
 8004d0a:	4b40      	ldr	r3, [pc, #256]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004d0c:	895b      	ldrh	r3, [r3, #10]
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	1d3b      	adds	r3, r7, #4
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	230c      	movs	r3, #12
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	3a01      	subs	r2, #1
 8004d1e:	801a      	strh	r2, [r3, #0]
        break;
 8004d20:	e010      	b.n	8004d44 <Paint_SetPixel+0xf0>
        X = Ypoint;
 8004d22:	230e      	movs	r3, #14
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	1d3a      	adds	r2, r7, #4
 8004d28:	8812      	ldrh	r2, [r2, #0]
 8004d2a:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Xpoint - 1;
 8004d2c:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004d2e:	895b      	ldrh	r3, [r3, #10]
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	1dbb      	adds	r3, r7, #6
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	3a01      	subs	r2, #1
 8004d40:	801a      	strh	r2, [r3, #0]
        break;
 8004d42:	46c0      	nop			; (mov r8, r8)
    }
    
    switch(Paint.Mirror) {
 8004d44:	4b31      	ldr	r3, [pc, #196]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004d46:	8a1b      	ldrh	r3, [r3, #16]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d020      	beq.n	8004d90 <Paint_SetPixel+0x13c>
 8004d4e:	dc56      	bgt.n	8004dfe <Paint_SetPixel+0x1aa>
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d011      	beq.n	8004d78 <Paint_SetPixel+0x124>
 8004d54:	dc53      	bgt.n	8004dfe <Paint_SetPixel+0x1aa>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d031      	beq.n	8004dbe <Paint_SetPixel+0x16a>
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d000      	beq.n	8004d60 <Paint_SetPixel+0x10c>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
        Y = Paint.HeightMemory - Y - 1;
        break;
    default:
        return;
 8004d5e:	e04e      	b.n	8004dfe <Paint_SetPixel+0x1aa>
        X = Paint.WidthMemory - X - 1;
 8004d60:	4b2a      	ldr	r3, [pc, #168]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004d62:	891b      	ldrh	r3, [r3, #8]
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	210e      	movs	r1, #14
 8004d68:	187b      	adds	r3, r7, r1
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	187b      	adds	r3, r7, r1
 8004d72:	3a01      	subs	r2, #1
 8004d74:	801a      	strh	r2, [r3, #0]
        break;
 8004d76:	e023      	b.n	8004dc0 <Paint_SetPixel+0x16c>
        Y = Paint.HeightMemory - Y - 1;
 8004d78:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004d7a:	895b      	ldrh	r3, [r3, #10]
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	210c      	movs	r1, #12
 8004d80:	187b      	adds	r3, r7, r1
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	187b      	adds	r3, r7, r1
 8004d8a:	3a01      	subs	r2, #1
 8004d8c:	801a      	strh	r2, [r3, #0]
        break;
 8004d8e:	e017      	b.n	8004dc0 <Paint_SetPixel+0x16c>
        X = Paint.WidthMemory - X - 1;
 8004d90:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004d92:	891b      	ldrh	r3, [r3, #8]
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	210e      	movs	r1, #14
 8004d98:	187b      	adds	r3, r7, r1
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	187b      	adds	r3, r7, r1
 8004da2:	3a01      	subs	r2, #1
 8004da4:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Y - 1;
 8004da6:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004da8:	895b      	ldrh	r3, [r3, #10]
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	210c      	movs	r1, #12
 8004dae:	187b      	adds	r3, r7, r1
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	3a01      	subs	r2, #1
 8004dba:	801a      	strh	r2, [r3, #0]
        break;
 8004dbc:	e000      	b.n	8004dc0 <Paint_SetPixel+0x16c>
        break;
 8004dbe:	46c0      	nop			; (mov r8, r8)
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8004dc0:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004dc2:	891b      	ldrh	r3, [r3, #8]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	200e      	movs	r0, #14
 8004dc8:	183a      	adds	r2, r7, r0
 8004dca:	8812      	ldrh	r2, [r2, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d818      	bhi.n	8004e02 <Paint_SetPixel+0x1ae>
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <Paint_SetPixel+0x1b8>)
 8004dd2:	895b      	ldrh	r3, [r3, #10]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	210c      	movs	r1, #12
 8004dd8:	187a      	adds	r2, r7, r1
 8004dda:	8812      	ldrh	r2, [r2, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d810      	bhi.n	8004e02 <Paint_SetPixel+0x1ae>
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <Paint_SetPixel+0x1bc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	1cba      	adds	r2, r7, #2
 8004de6:	8814      	ldrh	r4, [r2, #0]
 8004de8:	187a      	adds	r2, r7, r1
 8004dea:	8811      	ldrh	r1, [r2, #0]
 8004dec:	183a      	adds	r2, r7, r0
 8004dee:	8810      	ldrh	r0, [r2, #0]
 8004df0:	0022      	movs	r2, r4
 8004df2:	4798      	blx	r3
 8004df4:	e006      	b.n	8004e04 <Paint_SetPixel+0x1b0>
        return;
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	e004      	b.n	8004e04 <Paint_SetPixel+0x1b0>
        return;
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	e002      	b.n	8004e04 <Paint_SetPixel+0x1b0>
        return;
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	e000      	b.n	8004e04 <Paint_SetPixel+0x1b0>
        return;
 8004e02:	46c0      	nop			; (mov r8, r8)
}
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b005      	add	sp, #20
 8004e08:	bd90      	pop	{r4, r7, pc}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	20000240 	.word	0x20000240
 8004e10:	20000258 	.word	0x20000258

08004e14 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	0002      	movs	r2, r0
 8004e1c:	1dbb      	adds	r3, r7, #6
 8004e1e:	801a      	strh	r2, [r3, #0]
	CLEAR(Color);
 8004e20:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <Paint_Clear+0x20>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	1dba      	adds	r2, r7, #6
 8004e26:	8812      	ldrh	r2, [r2, #0]
 8004e28:	0010      	movs	r0, r2
 8004e2a:	4798      	blx	r3
}
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b002      	add	sp, #8
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	2000025c 	.word	0x2000025c

08004e38 <Paint_ClearWindows>:
    Ystart :   Y starting point
    Xend   :   x end point
    Yend   :   y end point
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8004e38:	b5b0      	push	{r4, r5, r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	0005      	movs	r5, r0
 8004e40:	000c      	movs	r4, r1
 8004e42:	0010      	movs	r0, r2
 8004e44:	0019      	movs	r1, r3
 8004e46:	1dbb      	adds	r3, r7, #6
 8004e48:	1c2a      	adds	r2, r5, #0
 8004e4a:	801a      	strh	r2, [r3, #0]
 8004e4c:	1d3b      	adds	r3, r7, #4
 8004e4e:	1c22      	adds	r2, r4, #0
 8004e50:	801a      	strh	r2, [r3, #0]
 8004e52:	1cbb      	adds	r3, r7, #2
 8004e54:	1c02      	adds	r2, r0, #0
 8004e56:	801a      	strh	r2, [r3, #0]
 8004e58:	003b      	movs	r3, r7
 8004e5a:	1c0a      	adds	r2, r1, #0
 8004e5c:	801a      	strh	r2, [r3, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 8004e5e:	230c      	movs	r3, #12
 8004e60:	18fb      	adds	r3, r7, r3
 8004e62:	1d3a      	adds	r2, r7, #4
 8004e64:	8812      	ldrh	r2, [r2, #0]
 8004e66:	801a      	strh	r2, [r3, #0]
 8004e68:	e024      	b.n	8004eb4 <Paint_ClearWindows+0x7c>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8004e6a:	230e      	movs	r3, #14
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	1dba      	adds	r2, r7, #6
 8004e70:	8812      	ldrh	r2, [r2, #0]
 8004e72:	801a      	strh	r2, [r3, #0]
 8004e74:	e011      	b.n	8004e9a <Paint_ClearWindows+0x62>
            Paint_SetPixel(X, Y, Color);
 8004e76:	2320      	movs	r3, #32
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	881a      	ldrh	r2, [r3, #0]
 8004e7c:	230c      	movs	r3, #12
 8004e7e:	18fb      	adds	r3, r7, r3
 8004e80:	8819      	ldrh	r1, [r3, #0]
 8004e82:	240e      	movs	r4, #14
 8004e84:	193b      	adds	r3, r7, r4
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7ff fee3 	bl	8004c54 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8004e8e:	0021      	movs	r1, r4
 8004e90:	187b      	adds	r3, r7, r1
 8004e92:	881a      	ldrh	r2, [r3, #0]
 8004e94:	187b      	adds	r3, r7, r1
 8004e96:	3201      	adds	r2, #1
 8004e98:	801a      	strh	r2, [r3, #0]
 8004e9a:	230e      	movs	r3, #14
 8004e9c:	18fa      	adds	r2, r7, r3
 8004e9e:	1cbb      	adds	r3, r7, #2
 8004ea0:	8812      	ldrh	r2, [r2, #0]
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d3e6      	bcc.n	8004e76 <Paint_ClearWindows+0x3e>
    for (Y = Ystart; Y < Yend; Y++) {
 8004ea8:	210c      	movs	r1, #12
 8004eaa:	187b      	adds	r3, r7, r1
 8004eac:	881a      	ldrh	r2, [r3, #0]
 8004eae:	187b      	adds	r3, r7, r1
 8004eb0:	3201      	adds	r2, #1
 8004eb2:	801a      	strh	r2, [r3, #0]
 8004eb4:	230c      	movs	r3, #12
 8004eb6:	18fa      	adds	r2, r7, r3
 8004eb8:	003b      	movs	r3, r7
 8004eba:	8812      	ldrh	r2, [r2, #0]
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d3d3      	bcc.n	8004e6a <Paint_ClearWindows+0x32>
        }
    }
}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b004      	add	sp, #16
 8004eca:	bdb0      	pop	{r4, r5, r7, pc}

08004ecc <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8004ecc:	b5b0      	push	{r4, r5, r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	0005      	movs	r5, r0
 8004ed4:	000c      	movs	r4, r1
 8004ed6:	0010      	movs	r0, r2
 8004ed8:	0019      	movs	r1, r3
 8004eda:	1dbb      	adds	r3, r7, #6
 8004edc:	1c2a      	adds	r2, r5, #0
 8004ede:	801a      	strh	r2, [r3, #0]
 8004ee0:	1d3b      	adds	r3, r7, #4
 8004ee2:	1c22      	adds	r2, r4, #0
 8004ee4:	801a      	strh	r2, [r3, #0]
 8004ee6:	1cbb      	adds	r3, r7, #2
 8004ee8:	1c02      	adds	r2, r0, #0
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	1c7b      	adds	r3, r7, #1
 8004eee:	1c0a      	adds	r2, r1, #0
 8004ef0:	701a      	strb	r2, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004ef2:	4b5f      	ldr	r3, [pc, #380]	; (8005070 <Paint_DrawPoint+0x1a4>)
 8004ef4:	889b      	ldrh	r3, [r3, #4]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	1dba      	adds	r2, r7, #6
 8004efa:	8812      	ldrh	r2, [r2, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d900      	bls.n	8004f02 <Paint_DrawPoint+0x36>
 8004f00:	e0b1      	b.n	8005066 <Paint_DrawPoint+0x19a>
 8004f02:	4b5b      	ldr	r3, [pc, #364]	; (8005070 <Paint_DrawPoint+0x1a4>)
 8004f04:	88db      	ldrh	r3, [r3, #6]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	1d3a      	adds	r2, r7, #4
 8004f0a:	8812      	ldrh	r2, [r2, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d900      	bls.n	8004f12 <Paint_DrawPoint+0x46>
 8004f10:	e0a9      	b.n	8005066 <Paint_DrawPoint+0x19a>
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 8004f12:	2320      	movs	r3, #32
 8004f14:	18fb      	adds	r3, r7, r3
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d161      	bne.n	8004fe0 <Paint_DrawPoint+0x114>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8004f1c:	230e      	movs	r3, #14
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	2200      	movs	r2, #0
 8004f22:	801a      	strh	r2, [r3, #0]
 8004f24:	e051      	b.n	8004fca <Paint_DrawPoint+0xfe>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8004f26:	230c      	movs	r3, #12
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	801a      	strh	r2, [r3, #0]
 8004f2e:	e039      	b.n	8004fa4 <Paint_DrawPoint+0xd8>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8004f30:	1dbb      	adds	r3, r7, #6
 8004f32:	881a      	ldrh	r2, [r3, #0]
 8004f34:	200e      	movs	r0, #14
 8004f36:	183b      	adds	r3, r7, r0
 8004f38:	2100      	movs	r1, #0
 8004f3a:	5e5b      	ldrsh	r3, [r3, r1]
 8004f3c:	18d2      	adds	r2, r2, r3
 8004f3e:	1c7b      	adds	r3, r7, #1
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	d438      	bmi.n	8004fb8 <Paint_DrawPoint+0xec>
 8004f46:	1d3b      	adds	r3, r7, #4
 8004f48:	881a      	ldrh	r2, [r3, #0]
 8004f4a:	210c      	movs	r1, #12
 8004f4c:	187b      	adds	r3, r7, r1
 8004f4e:	2400      	movs	r4, #0
 8004f50:	5f1b      	ldrsh	r3, [r3, r4]
 8004f52:	18d2      	adds	r2, r2, r3
 8004f54:	1c7b      	adds	r3, r7, #1
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	d42d      	bmi.n	8004fb8 <Paint_DrawPoint+0xec>
                    break;
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8004f5c:	183b      	adds	r3, r7, r0
 8004f5e:	881a      	ldrh	r2, [r3, #0]
 8004f60:	1dbb      	adds	r3, r7, #6
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	18d3      	adds	r3, r2, r3
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	1c7b      	adds	r3, r7, #1
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	b298      	uxth	r0, r3
 8004f72:	000c      	movs	r4, r1
 8004f74:	187b      	adds	r3, r7, r1
 8004f76:	881a      	ldrh	r2, [r3, #0]
 8004f78:	1d3b      	adds	r3, r7, #4
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	18d3      	adds	r3, r2, r3
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	1c7b      	adds	r3, r7, #1
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	b299      	uxth	r1, r3
 8004f8a:	1cbb      	adds	r3, r7, #2
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	001a      	movs	r2, r3
 8004f90:	f7ff fe60 	bl	8004c54 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8004f94:	193b      	adds	r3, r7, r4
 8004f96:	2200      	movs	r2, #0
 8004f98:	5e9b      	ldrsh	r3, [r3, r2]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	193b      	adds	r3, r7, r4
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	230c      	movs	r3, #12
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	2200      	movs	r2, #0
 8004faa:	5e9a      	ldrsh	r2, [r3, r2]
 8004fac:	1c7b      	adds	r3, r7, #1
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	dbbb      	blt.n	8004f30 <Paint_DrawPoint+0x64>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8004fb8:	210e      	movs	r1, #14
 8004fba:	187b      	adds	r3, r7, r1
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	5e9b      	ldrsh	r3, [r3, r2]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	187b      	adds	r3, r7, r1
 8004fc8:	801a      	strh	r2, [r3, #0]
 8004fca:	230e      	movs	r3, #14
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	2200      	movs	r2, #0
 8004fd0:	5e9a      	ldrsh	r2, [r3, r2]
 8004fd2:	1c7b      	adds	r3, r7, #1
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	dba3      	blt.n	8004f26 <Paint_DrawPoint+0x5a>
 8004fde:	e043      	b.n	8005068 <Paint_DrawPoint+0x19c>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8004fe0:	230e      	movs	r3, #14
 8004fe2:	18fb      	adds	r3, r7, r3
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	801a      	strh	r2, [r3, #0]
 8004fe8:	e034      	b.n	8005054 <Paint_DrawPoint+0x188>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8004fea:	230c      	movs	r3, #12
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	2200      	movs	r2, #0
 8004ff0:	801a      	strh	r2, [r3, #0]
 8004ff2:	e01e      	b.n	8005032 <Paint_DrawPoint+0x166>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8004ff4:	230e      	movs	r3, #14
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	881a      	ldrh	r2, [r3, #0]
 8004ffa:	1dbb      	adds	r3, r7, #6
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	18d3      	adds	r3, r2, r3
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b298      	uxth	r0, r3
 8005006:	240c      	movs	r4, #12
 8005008:	193b      	adds	r3, r7, r4
 800500a:	881a      	ldrh	r2, [r3, #0]
 800500c:	1d3b      	adds	r3, r7, #4
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	18d3      	adds	r3, r2, r3
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b299      	uxth	r1, r3
 8005018:	1cbb      	adds	r3, r7, #2
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	001a      	movs	r2, r3
 800501e:	f7ff fe19 	bl	8004c54 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8005022:	193b      	adds	r3, r7, r4
 8005024:	2200      	movs	r2, #0
 8005026:	5e9b      	ldrsh	r3, [r3, r2]
 8005028:	b29b      	uxth	r3, r3
 800502a:	3301      	adds	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	193b      	adds	r3, r7, r4
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	230c      	movs	r3, #12
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	2200      	movs	r2, #0
 8005038:	5e9a      	ldrsh	r2, [r3, r2]
 800503a:	1c7b      	adds	r3, r7, #1
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	dbd8      	blt.n	8004ff4 <Paint_DrawPoint+0x128>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8005042:	210e      	movs	r1, #14
 8005044:	187b      	adds	r3, r7, r1
 8005046:	2200      	movs	r2, #0
 8005048:	5e9b      	ldrsh	r3, [r3, r2]
 800504a:	b29b      	uxth	r3, r3
 800504c:	3301      	adds	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	187b      	adds	r3, r7, r1
 8005052:	801a      	strh	r2, [r3, #0]
 8005054:	230e      	movs	r3, #14
 8005056:	18fb      	adds	r3, r7, r3
 8005058:	2200      	movs	r2, #0
 800505a:	5e9a      	ldrsh	r2, [r3, r2]
 800505c:	1c7b      	adds	r3, r7, #1
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	dbc2      	blt.n	8004fea <Paint_DrawPoint+0x11e>
 8005064:	e000      	b.n	8005068 <Paint_DrawPoint+0x19c>
        return;
 8005066:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
}
 8005068:	46bd      	mov	sp, r7
 800506a:	b004      	add	sp, #16
 800506c:	bdb0      	pop	{r4, r5, r7, pc}
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	20000240 	.word	0x20000240

08005074 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8005074:	b5b0      	push	{r4, r5, r7, lr}
 8005076:	b08c      	sub	sp, #48	; 0x30
 8005078:	af02      	add	r7, sp, #8
 800507a:	0005      	movs	r5, r0
 800507c:	000c      	movs	r4, r1
 800507e:	0010      	movs	r0, r2
 8005080:	0019      	movs	r1, r3
 8005082:	1dbb      	adds	r3, r7, #6
 8005084:	1c2a      	adds	r2, r5, #0
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	1d3b      	adds	r3, r7, #4
 800508a:	1c22      	adds	r2, r4, #0
 800508c:	801a      	strh	r2, [r3, #0]
 800508e:	1cbb      	adds	r3, r7, #2
 8005090:	1c02      	adds	r2, r0, #0
 8005092:	801a      	strh	r2, [r3, #0]
 8005094:	003b      	movs	r3, r7
 8005096:	1c0a      	adds	r2, r1, #0
 8005098:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800509a:	4b66      	ldr	r3, [pc, #408]	; (8005234 <Paint_DrawLine+0x1c0>)
 800509c:	889b      	ldrh	r3, [r3, #4]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	1dba      	adds	r2, r7, #6
 80050a2:	8812      	ldrh	r2, [r2, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d900      	bls.n	80050aa <Paint_DrawLine+0x36>
 80050a8:	e0bb      	b.n	8005222 <Paint_DrawLine+0x1ae>
 80050aa:	4b62      	ldr	r3, [pc, #392]	; (8005234 <Paint_DrawLine+0x1c0>)
 80050ac:	88db      	ldrh	r3, [r3, #6]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	1d3a      	adds	r2, r7, #4
 80050b2:	8812      	ldrh	r2, [r2, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d900      	bls.n	80050ba <Paint_DrawLine+0x46>
 80050b8:	e0b3      	b.n	8005222 <Paint_DrawLine+0x1ae>
        Xend > Paint.Width || Yend > Paint.Height) {
 80050ba:	4b5e      	ldr	r3, [pc, #376]	; (8005234 <Paint_DrawLine+0x1c0>)
 80050bc:	889b      	ldrh	r3, [r3, #4]
 80050be:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80050c0:	1cba      	adds	r2, r7, #2
 80050c2:	8812      	ldrh	r2, [r2, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d900      	bls.n	80050ca <Paint_DrawLine+0x56>
 80050c8:	e0ab      	b.n	8005222 <Paint_DrawLine+0x1ae>
        Xend > Paint.Width || Yend > Paint.Height) {
 80050ca:	4b5a      	ldr	r3, [pc, #360]	; (8005234 <Paint_DrawLine+0x1c0>)
 80050cc:	88db      	ldrh	r3, [r3, #6]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	003a      	movs	r2, r7
 80050d2:	8812      	ldrh	r2, [r2, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d900      	bls.n	80050da <Paint_DrawLine+0x66>
 80050d8:	e0a3      	b.n	8005222 <Paint_DrawLine+0x1ae>
        return;
    }

    UWORD Xpoint = Xstart;
 80050da:	2326      	movs	r3, #38	; 0x26
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	1dba      	adds	r2, r7, #6
 80050e0:	8812      	ldrh	r2, [r2, #0]
 80050e2:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 80050e4:	2324      	movs	r3, #36	; 0x24
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	1d3a      	adds	r2, r7, #4
 80050ea:	8812      	ldrh	r2, [r2, #0]
 80050ec:	801a      	strh	r2, [r3, #0]
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80050ee:	1cbb      	adds	r3, r7, #2
 80050f0:	881a      	ldrh	r2, [r3, #0]
 80050f2:	1dbb      	adds	r3, r7, #6
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	17da      	asrs	r2, r3, #31
 80050fa:	189b      	adds	r3, r3, r2
 80050fc:	4053      	eors	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8005100:	003b      	movs	r3, r7
 8005102:	881a      	ldrh	r2, [r3, #0]
 8005104:	1d3b      	adds	r3, r7, #4
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	17da      	asrs	r2, r3, #31
 800510c:	189b      	adds	r3, r3, r2
 800510e:	4053      	eors	r3, r2
 8005110:	425b      	negs	r3, r3
 8005112:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8005114:	1dba      	adds	r2, r7, #6
 8005116:	1cbb      	adds	r3, r7, #2
 8005118:	8812      	ldrh	r2, [r2, #0]
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d201      	bcs.n	8005124 <Paint_DrawLine+0xb0>
 8005120:	2301      	movs	r3, #1
 8005122:	e001      	b.n	8005128 <Paint_DrawLine+0xb4>
 8005124:	2301      	movs	r3, #1
 8005126:	425b      	negs	r3, r3
 8005128:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800512a:	1d3a      	adds	r2, r7, #4
 800512c:	003b      	movs	r3, r7
 800512e:	8812      	ldrh	r2, [r2, #0]
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d201      	bcs.n	800513a <Paint_DrawLine+0xc6>
 8005136:	2301      	movs	r3, #1
 8005138:	e001      	b.n	800513e <Paint_DrawLine+0xca>
 800513a:	2301      	movs	r3, #1
 800513c:	425b      	negs	r3, r3
 800513e:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	18d3      	adds	r3, r2, r3
 8005146:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8005148:	231f      	movs	r3, #31
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]

    for (;;) {
        Dotted_Len++;
 8005150:	251f      	movs	r5, #31
 8005152:	197b      	adds	r3, r7, r5
 8005154:	781a      	ldrb	r2, [r3, #0]
 8005156:	197b      	adds	r3, r7, r5
 8005158:	3201      	adds	r2, #1
 800515a:	701a      	strb	r2, [r3, #0]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800515c:	2340      	movs	r3, #64	; 0x40
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d11d      	bne.n	80051a2 <Paint_DrawLine+0x12e>
 8005166:	197b      	adds	r3, r7, r5
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2103      	movs	r1, #3
 800516c:	0018      	movs	r0, r3
 800516e:	f7fb f84d 	bl	800020c <__aeabi_uidivmod>
 8005172:	000b      	movs	r3, r1
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d113      	bne.n	80051a2 <Paint_DrawLine+0x12e>
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800517a:	233c      	movs	r3, #60	; 0x3c
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	4c2d      	ldr	r4, [pc, #180]	; (8005238 <Paint_DrawLine+0x1c4>)
 8005182:	2324      	movs	r3, #36	; 0x24
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	8819      	ldrh	r1, [r3, #0]
 8005188:	2326      	movs	r3, #38	; 0x26
 800518a:	18fb      	adds	r3, r7, r3
 800518c:	8818      	ldrh	r0, [r3, #0]
 800518e:	2301      	movs	r3, #1
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	0013      	movs	r3, r2
 8005194:	0022      	movs	r2, r4
 8005196:	f7ff fe99 	bl	8004ecc <Paint_DrawPoint>
            Dotted_Len = 0;
 800519a:	197b      	adds	r3, r7, r5
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	e010      	b.n	80051c4 <Paint_DrawLine+0x150>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80051a2:	233c      	movs	r3, #60	; 0x3c
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	781c      	ldrb	r4, [r3, #0]
 80051a8:	2338      	movs	r3, #56	; 0x38
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	881a      	ldrh	r2, [r3, #0]
 80051ae:	2324      	movs	r3, #36	; 0x24
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	8819      	ldrh	r1, [r3, #0]
 80051b4:	2326      	movs	r3, #38	; 0x26
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	8818      	ldrh	r0, [r3, #0]
 80051ba:	2301      	movs	r3, #1
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	0023      	movs	r3, r4
 80051c0:	f7ff fe84 	bl	8004ecc <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	dc11      	bgt.n	80051f2 <Paint_DrawLine+0x17e>
            if (Xpoint == Xend)
 80051ce:	2026      	movs	r0, #38	; 0x26
 80051d0:	183a      	adds	r2, r7, r0
 80051d2:	1cbb      	adds	r3, r7, #2
 80051d4:	8812      	ldrh	r2, [r2, #0]
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d024      	beq.n	8005226 <Paint_DrawLine+0x1b2>
                break;
            Esp += dy;
 80051dc:	6a3a      	ldr	r2, [r7, #32]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	18d3      	adds	r3, r2, r3
 80051e2:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	b299      	uxth	r1, r3
 80051e8:	183b      	adds	r3, r7, r0
 80051ea:	183a      	adds	r2, r7, r0
 80051ec:	8812      	ldrh	r2, [r2, #0]
 80051ee:	188a      	adds	r2, r1, r2
 80051f0:	801a      	strh	r2, [r3, #0]
        }
        if (2 * Esp <= dx) {
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	dba9      	blt.n	8005150 <Paint_DrawLine+0xdc>
            if (Ypoint == Yend)
 80051fc:	2024      	movs	r0, #36	; 0x24
 80051fe:	183a      	adds	r2, r7, r0
 8005200:	003b      	movs	r3, r7
 8005202:	8812      	ldrh	r2, [r2, #0]
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d00f      	beq.n	800522a <Paint_DrawLine+0x1b6>
                break;
            Esp += dx;
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	18d3      	adds	r3, r2, r3
 8005210:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	b299      	uxth	r1, r3
 8005216:	183b      	adds	r3, r7, r0
 8005218:	183a      	adds	r2, r7, r0
 800521a:	8812      	ldrh	r2, [r2, #0]
 800521c:	188a      	adds	r2, r1, r2
 800521e:	801a      	strh	r2, [r3, #0]
        Dotted_Len++;
 8005220:	e796      	b.n	8005150 <Paint_DrawLine+0xdc>
        return;
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	e002      	b.n	800522c <Paint_DrawLine+0x1b8>
                break;
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	e000      	b.n	800522c <Paint_DrawLine+0x1b8>
                break;
 800522a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800522c:	46bd      	mov	sp, r7
 800522e:	b00a      	add	sp, #40	; 0x28
 8005230:	bdb0      	pop	{r4, r5, r7, pc}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	20000240 	.word	0x20000240
 8005238:	0000ffff 	.word	0x0000ffff

0800523c <Paint_DrawRectangle>:
    Color  ：The color of the Rectangular segment
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
 800523c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800523e:	b089      	sub	sp, #36	; 0x24
 8005240:	af04      	add	r7, sp, #16
 8005242:	0005      	movs	r5, r0
 8005244:	000c      	movs	r4, r1
 8005246:	0010      	movs	r0, r2
 8005248:	0019      	movs	r1, r3
 800524a:	1dbb      	adds	r3, r7, #6
 800524c:	1c2a      	adds	r2, r5, #0
 800524e:	801a      	strh	r2, [r3, #0]
 8005250:	1d3b      	adds	r3, r7, #4
 8005252:	1c22      	adds	r2, r4, #0
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	1cbb      	adds	r3, r7, #2
 8005258:	1c02      	adds	r2, r0, #0
 800525a:	801a      	strh	r2, [r3, #0]
 800525c:	003b      	movs	r3, r7
 800525e:	1c0a      	adds	r2, r1, #0
 8005260:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8005262:	4b5b      	ldr	r3, [pc, #364]	; (80053d0 <Paint_DrawRectangle+0x194>)
 8005264:	889b      	ldrh	r3, [r3, #4]
 8005266:	b29b      	uxth	r3, r3
 8005268:	1dba      	adds	r2, r7, #6
 800526a:	8812      	ldrh	r2, [r2, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d900      	bls.n	8005272 <Paint_DrawRectangle+0x36>
 8005270:	e0a9      	b.n	80053c6 <Paint_DrawRectangle+0x18a>
 8005272:	4b57      	ldr	r3, [pc, #348]	; (80053d0 <Paint_DrawRectangle+0x194>)
 8005274:	88db      	ldrh	r3, [r3, #6]
 8005276:	b29b      	uxth	r3, r3
 8005278:	1d3a      	adds	r2, r7, #4
 800527a:	8812      	ldrh	r2, [r2, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d900      	bls.n	8005282 <Paint_DrawRectangle+0x46>
 8005280:	e0a1      	b.n	80053c6 <Paint_DrawRectangle+0x18a>
        Xend > Paint.Width || Yend > Paint.Height) {
 8005282:	4b53      	ldr	r3, [pc, #332]	; (80053d0 <Paint_DrawRectangle+0x194>)
 8005284:	889b      	ldrh	r3, [r3, #4]
 8005286:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8005288:	1cba      	adds	r2, r7, #2
 800528a:	8812      	ldrh	r2, [r2, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d900      	bls.n	8005292 <Paint_DrawRectangle+0x56>
 8005290:	e099      	b.n	80053c6 <Paint_DrawRectangle+0x18a>
        Xend > Paint.Width || Yend > Paint.Height) {
 8005292:	4b4f      	ldr	r3, [pc, #316]	; (80053d0 <Paint_DrawRectangle+0x194>)
 8005294:	88db      	ldrh	r3, [r3, #6]
 8005296:	b29b      	uxth	r3, r3
 8005298:	003a      	movs	r2, r7
 800529a:	8812      	ldrh	r2, [r2, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d900      	bls.n	80052a2 <Paint_DrawRectangle+0x66>
 80052a0:	e091      	b.n	80053c6 <Paint_DrawRectangle+0x18a>
        return;
    }

    if (Filled ) {
 80052a2:	2328      	movs	r3, #40	; 0x28
 80052a4:	2208      	movs	r2, #8
 80052a6:	189b      	adds	r3, r3, r2
 80052a8:	19db      	adds	r3, r3, r7
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d02b      	beq.n	8005308 <Paint_DrawRectangle+0xcc>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80052b0:	230e      	movs	r3, #14
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	1d3a      	adds	r2, r7, #4
 80052b6:	8812      	ldrh	r2, [r2, #0]
 80052b8:	801a      	strh	r2, [r3, #0]
 80052ba:	e01d      	b.n	80052f8 <Paint_DrawRectangle+0xbc>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
 80052bc:	250e      	movs	r5, #14
 80052be:	197b      	adds	r3, r7, r5
 80052c0:	881c      	ldrh	r4, [r3, #0]
 80052c2:	1cbb      	adds	r3, r7, #2
 80052c4:	881a      	ldrh	r2, [r3, #0]
 80052c6:	197b      	adds	r3, r7, r5
 80052c8:	8819      	ldrh	r1, [r3, #0]
 80052ca:	1dbb      	adds	r3, r7, #6
 80052cc:	8818      	ldrh	r0, [r3, #0]
 80052ce:	2300      	movs	r3, #0
 80052d0:	9302      	str	r3, [sp, #8]
 80052d2:	2324      	movs	r3, #36	; 0x24
 80052d4:	2608      	movs	r6, #8
 80052d6:	199b      	adds	r3, r3, r6
 80052d8:	19db      	adds	r3, r3, r7
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	9301      	str	r3, [sp, #4]
 80052de:	2320      	movs	r3, #32
 80052e0:	199b      	adds	r3, r3, r6
 80052e2:	19db      	adds	r3, r3, r7
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	0023      	movs	r3, r4
 80052ea:	f7ff fec3 	bl	8005074 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 80052ee:	197b      	adds	r3, r7, r5
 80052f0:	881a      	ldrh	r2, [r3, #0]
 80052f2:	197b      	adds	r3, r7, r5
 80052f4:	3201      	adds	r2, #1
 80052f6:	801a      	strh	r2, [r3, #0]
 80052f8:	230e      	movs	r3, #14
 80052fa:	18fa      	adds	r2, r7, r3
 80052fc:	003b      	movs	r3, r7
 80052fe:	8812      	ldrh	r2, [r2, #0]
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d3da      	bcc.n	80052bc <Paint_DrawRectangle+0x80>
 8005306:	e05f      	b.n	80053c8 <Paint_DrawRectangle+0x18c>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8005308:	1d3b      	adds	r3, r7, #4
 800530a:	881c      	ldrh	r4, [r3, #0]
 800530c:	1cbb      	adds	r3, r7, #2
 800530e:	881a      	ldrh	r2, [r3, #0]
 8005310:	1d3b      	adds	r3, r7, #4
 8005312:	8819      	ldrh	r1, [r3, #0]
 8005314:	1dbb      	adds	r3, r7, #6
 8005316:	8818      	ldrh	r0, [r3, #0]
 8005318:	2300      	movs	r3, #0
 800531a:	9302      	str	r3, [sp, #8]
 800531c:	2524      	movs	r5, #36	; 0x24
 800531e:	2308      	movs	r3, #8
 8005320:	18ee      	adds	r6, r5, r3
 8005322:	19f3      	adds	r3, r6, r7
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	2620      	movs	r6, #32
 800532a:	2308      	movs	r3, #8
 800532c:	18f3      	adds	r3, r6, r3
 800532e:	19db      	adds	r3, r3, r7
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	0023      	movs	r3, r4
 8005336:	f7ff fe9d 	bl	8005074 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 800533a:	003b      	movs	r3, r7
 800533c:	881c      	ldrh	r4, [r3, #0]
 800533e:	1dbb      	adds	r3, r7, #6
 8005340:	881a      	ldrh	r2, [r3, #0]
 8005342:	1d3b      	adds	r3, r7, #4
 8005344:	8819      	ldrh	r1, [r3, #0]
 8005346:	1dbb      	adds	r3, r7, #6
 8005348:	8818      	ldrh	r0, [r3, #0]
 800534a:	2300      	movs	r3, #0
 800534c:	9302      	str	r3, [sp, #8]
 800534e:	2308      	movs	r3, #8
 8005350:	18eb      	adds	r3, r5, r3
 8005352:	19db      	adds	r3, r3, r7
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	2308      	movs	r3, #8
 800535a:	18f3      	adds	r3, r6, r3
 800535c:	19db      	adds	r3, r3, r7
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	0023      	movs	r3, r4
 8005364:	f7ff fe86 	bl	8005074 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8005368:	1d3b      	adds	r3, r7, #4
 800536a:	881c      	ldrh	r4, [r3, #0]
 800536c:	1cbb      	adds	r3, r7, #2
 800536e:	881a      	ldrh	r2, [r3, #0]
 8005370:	003b      	movs	r3, r7
 8005372:	8819      	ldrh	r1, [r3, #0]
 8005374:	1cbb      	adds	r3, r7, #2
 8005376:	8818      	ldrh	r0, [r3, #0]
 8005378:	2300      	movs	r3, #0
 800537a:	9302      	str	r3, [sp, #8]
 800537c:	2308      	movs	r3, #8
 800537e:	18eb      	adds	r3, r5, r3
 8005380:	19db      	adds	r3, r3, r7
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	2308      	movs	r3, #8
 8005388:	18f3      	adds	r3, r6, r3
 800538a:	19db      	adds	r3, r3, r7
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	0023      	movs	r3, r4
 8005392:	f7ff fe6f 	bl	8005074 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 8005396:	003b      	movs	r3, r7
 8005398:	881c      	ldrh	r4, [r3, #0]
 800539a:	1dbb      	adds	r3, r7, #6
 800539c:	881a      	ldrh	r2, [r3, #0]
 800539e:	003b      	movs	r3, r7
 80053a0:	8819      	ldrh	r1, [r3, #0]
 80053a2:	1cbb      	adds	r3, r7, #2
 80053a4:	8818      	ldrh	r0, [r3, #0]
 80053a6:	2300      	movs	r3, #0
 80053a8:	9302      	str	r3, [sp, #8]
 80053aa:	2308      	movs	r3, #8
 80053ac:	18ed      	adds	r5, r5, r3
 80053ae:	19eb      	adds	r3, r5, r7
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	9301      	str	r3, [sp, #4]
 80053b4:	2308      	movs	r3, #8
 80053b6:	18f3      	adds	r3, r6, r3
 80053b8:	19db      	adds	r3, r3, r7
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	0023      	movs	r3, r4
 80053c0:	f7ff fe58 	bl	8005074 <Paint_DrawLine>
 80053c4:	e000      	b.n	80053c8 <Paint_DrawRectangle+0x18c>
        return;
 80053c6:	46c0      	nop			; (mov r8, r8)
    }
}
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b005      	add	sp, #20
 80053cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	20000240 	.word	0x20000240

080053d4 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 80053d4:	b5b0      	push	{r4, r5, r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	0004      	movs	r4, r0
 80053dc:	0008      	movs	r0, r1
 80053de:	0011      	movs	r1, r2
 80053e0:	607b      	str	r3, [r7, #4]
 80053e2:	250e      	movs	r5, #14
 80053e4:	197b      	adds	r3, r7, r5
 80053e6:	1c22      	adds	r2, r4, #0
 80053e8:	801a      	strh	r2, [r3, #0]
 80053ea:	240c      	movs	r4, #12
 80053ec:	193b      	adds	r3, r7, r4
 80053ee:	1c02      	adds	r2, r0, #0
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	200b      	movs	r0, #11
 80053f4:	183b      	adds	r3, r7, r0
 80053f6:	1c0a      	adds	r2, r1, #0
 80053f8:	701a      	strb	r2, [r3, #0]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80053fa:	4b66      	ldr	r3, [pc, #408]	; (8005594 <Paint_DrawChar+0x1c0>)
 80053fc:	889b      	ldrh	r3, [r3, #4]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	197a      	adds	r2, r7, r5
 8005402:	8812      	ldrh	r2, [r2, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d900      	bls.n	800540a <Paint_DrawChar+0x36>
 8005408:	e0c0      	b.n	800558c <Paint_DrawChar+0x1b8>
 800540a:	4b62      	ldr	r3, [pc, #392]	; (8005594 <Paint_DrawChar+0x1c0>)
 800540c:	88db      	ldrh	r3, [r3, #6]
 800540e:	b29b      	uxth	r3, r3
 8005410:	193a      	adds	r2, r7, r4
 8005412:	8812      	ldrh	r2, [r2, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d900      	bls.n	800541a <Paint_DrawChar+0x46>
 8005418:	e0b8      	b.n	800558c <Paint_DrawChar+0x1b8>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800541a:	183b      	adds	r3, r7, r0
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	3b20      	subs	r3, #32
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	88d2      	ldrh	r2, [r2, #6]
 8005424:	4353      	muls	r3, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	8892      	ldrh	r2, [r2, #4]
 800542a:	08d2      	lsrs	r2, r2, #3
 800542c:	b292      	uxth	r2, r2
 800542e:	0010      	movs	r0, r2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	8892      	ldrh	r2, [r2, #4]
 8005434:	2107      	movs	r1, #7
 8005436:	400a      	ands	r2, r1
 8005438:	b292      	uxth	r2, r2
 800543a:	1e51      	subs	r1, r2, #1
 800543c:	418a      	sbcs	r2, r1
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	1882      	adds	r2, r0, r2
 8005442:	4353      	muls	r3, r2
 8005444:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	18d3      	adds	r3, r2, r3
 800544e:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8005450:	231e      	movs	r3, #30
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	2200      	movs	r2, #0
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	e08f      	b.n	800557a <Paint_DrawChar+0x1a6>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800545a:	231c      	movs	r3, #28
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	2200      	movs	r2, #0
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	e072      	b.n	800554a <Paint_DrawChar+0x176>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8005464:	2330      	movs	r3, #48	; 0x30
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	4a4b      	ldr	r2, [pc, #300]	; (8005598 <Paint_DrawChar+0x1c4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d122      	bne.n	80054b6 <Paint_DrawChar+0xe2>
                if (*ptr & (0x80 >> (Column % 8)))
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	0019      	movs	r1, r3
 8005476:	201c      	movs	r0, #28
 8005478:	183b      	adds	r3, r7, r0
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	2207      	movs	r2, #7
 800547e:	4013      	ands	r3, r2
 8005480:	2280      	movs	r2, #128	; 0x80
 8005482:	411a      	asrs	r2, r3
 8005484:	0013      	movs	r3, r2
 8005486:	400b      	ands	r3, r1
 8005488:	d04e      	beq.n	8005528 <Paint_DrawChar+0x154>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800548a:	230e      	movs	r3, #14
 800548c:	18fa      	adds	r2, r7, r3
 800548e:	183b      	adds	r3, r7, r0
 8005490:	8812      	ldrh	r2, [r2, #0]
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	18d3      	adds	r3, r2, r3
 8005496:	b298      	uxth	r0, r3
 8005498:	230c      	movs	r3, #12
 800549a:	18fa      	adds	r2, r7, r3
 800549c:	231e      	movs	r3, #30
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	8812      	ldrh	r2, [r2, #0]
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	18d3      	adds	r3, r2, r3
 80054a6:	b299      	uxth	r1, r3
 80054a8:	2334      	movs	r3, #52	; 0x34
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	001a      	movs	r2, r3
 80054b0:	f7ff fbd0 	bl	8004c54 <Paint_SetPixel>
 80054b4:	e038      	b.n	8005528 <Paint_DrawChar+0x154>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	0019      	movs	r1, r3
 80054bc:	201c      	movs	r0, #28
 80054be:	183b      	adds	r3, r7, r0
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	2207      	movs	r2, #7
 80054c4:	4013      	ands	r3, r2
 80054c6:	2280      	movs	r2, #128	; 0x80
 80054c8:	411a      	asrs	r2, r3
 80054ca:	0013      	movs	r3, r2
 80054cc:	400b      	ands	r3, r1
 80054ce:	d015      	beq.n	80054fc <Paint_DrawChar+0x128>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80054d0:	230e      	movs	r3, #14
 80054d2:	18fa      	adds	r2, r7, r3
 80054d4:	183b      	adds	r3, r7, r0
 80054d6:	8812      	ldrh	r2, [r2, #0]
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	18d3      	adds	r3, r2, r3
 80054dc:	b298      	uxth	r0, r3
 80054de:	230c      	movs	r3, #12
 80054e0:	18fa      	adds	r2, r7, r3
 80054e2:	231e      	movs	r3, #30
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	8812      	ldrh	r2, [r2, #0]
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	18d3      	adds	r3, r2, r3
 80054ec:	b299      	uxth	r1, r3
 80054ee:	2334      	movs	r3, #52	; 0x34
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	001a      	movs	r2, r3
 80054f6:	f7ff fbad 	bl	8004c54 <Paint_SetPixel>
 80054fa:	e015      	b.n	8005528 <Paint_DrawChar+0x154>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80054fc:	230e      	movs	r3, #14
 80054fe:	18fa      	adds	r2, r7, r3
 8005500:	231c      	movs	r3, #28
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	8812      	ldrh	r2, [r2, #0]
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	18d3      	adds	r3, r2, r3
 800550a:	b298      	uxth	r0, r3
 800550c:	230c      	movs	r3, #12
 800550e:	18fa      	adds	r2, r7, r3
 8005510:	231e      	movs	r3, #30
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	8812      	ldrh	r2, [r2, #0]
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	18d3      	adds	r3, r2, r3
 800551a:	b299      	uxth	r1, r3
 800551c:	2330      	movs	r3, #48	; 0x30
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	001a      	movs	r2, r3
 8005524:	f7ff fb96 	bl	8004c54 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8005528:	231c      	movs	r3, #28
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	2207      	movs	r2, #7
 8005530:	4013      	ands	r3, r2
 8005532:	b29b      	uxth	r3, r3
 8005534:	2b07      	cmp	r3, #7
 8005536:	d102      	bne.n	800553e <Paint_DrawChar+0x16a>
                ptr++;
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	3301      	adds	r3, #1
 800553c:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800553e:	211c      	movs	r1, #28
 8005540:	187b      	adds	r3, r7, r1
 8005542:	881a      	ldrh	r2, [r3, #0]
 8005544:	187b      	adds	r3, r7, r1
 8005546:	3201      	adds	r2, #1
 8005548:	801a      	strh	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	889b      	ldrh	r3, [r3, #4]
 800554e:	221c      	movs	r2, #28
 8005550:	18ba      	adds	r2, r7, r2
 8005552:	8812      	ldrh	r2, [r2, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d200      	bcs.n	800555a <Paint_DrawChar+0x186>
 8005558:	e784      	b.n	8005464 <Paint_DrawChar+0x90>
        }// Write a line
        if (Font->Width % 8 != 0)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	889b      	ldrh	r3, [r3, #4]
 800555e:	2207      	movs	r2, #7
 8005560:	4013      	ands	r3, r2
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <Paint_DrawChar+0x19a>
            ptr++;
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	3301      	adds	r3, #1
 800556c:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800556e:	211e      	movs	r1, #30
 8005570:	187b      	adds	r3, r7, r1
 8005572:	881a      	ldrh	r2, [r3, #0]
 8005574:	187b      	adds	r3, r7, r1
 8005576:	3201      	adds	r2, #1
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	88db      	ldrh	r3, [r3, #6]
 800557e:	221e      	movs	r2, #30
 8005580:	18ba      	adds	r2, r7, r2
 8005582:	8812      	ldrh	r2, [r2, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d200      	bcs.n	800558a <Paint_DrawChar+0x1b6>
 8005588:	e767      	b.n	800545a <Paint_DrawChar+0x86>
 800558a:	e000      	b.n	800558e <Paint_DrawChar+0x1ba>
        return;
 800558c:	46c0      	nop			; (mov r8, r8)
    }// Write all
}
 800558e:	46bd      	mov	sp, r7
 8005590:	b008      	add	sp, #32
 8005592:	bdb0      	pop	{r4, r5, r7, pc}
 8005594:	20000240 	.word	0x20000240
 8005598:	0000ffff 	.word	0x0000ffff

0800559c <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 800559c:	b5b0      	push	{r4, r5, r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60ba      	str	r2, [r7, #8]
 80055a4:	607b      	str	r3, [r7, #4]
 80055a6:	240e      	movs	r4, #14
 80055a8:	193b      	adds	r3, r7, r4
 80055aa:	1c02      	adds	r2, r0, #0
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	200c      	movs	r0, #12
 80055b0:	183b      	adds	r3, r7, r0
 80055b2:	1c0a      	adds	r2, r1, #0
 80055b4:	801a      	strh	r2, [r3, #0]
    UWORD Xpoint = Xstart;
 80055b6:	2316      	movs	r3, #22
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	0021      	movs	r1, r4
 80055bc:	187a      	adds	r2, r7, r1
 80055be:	8812      	ldrh	r2, [r2, #0]
 80055c0:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 80055c2:	2314      	movs	r3, #20
 80055c4:	18fb      	adds	r3, r7, r3
 80055c6:	183a      	adds	r2, r7, r0
 80055c8:	8812      	ldrh	r2, [r2, #0]
 80055ca:	801a      	strh	r2, [r3, #0]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80055cc:	4b31      	ldr	r3, [pc, #196]	; (8005694 <Paint_DrawString_EN+0xf8>)
 80055ce:	889b      	ldrh	r3, [r3, #4]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	187a      	adds	r2, r7, r1
 80055d4:	8812      	ldrh	r2, [r2, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d858      	bhi.n	800568c <Paint_DrawString_EN+0xf0>
 80055da:	4b2e      	ldr	r3, [pc, #184]	; (8005694 <Paint_DrawString_EN+0xf8>)
 80055dc:	88db      	ldrh	r3, [r3, #6]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	183a      	adds	r2, r7, r0
 80055e2:	8812      	ldrh	r2, [r2, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d851      	bhi.n	800568c <Paint_DrawString_EN+0xf0>
        return;
    }

    while (* pString != '\0') {
 80055e8:	e04b      	b.n	8005682 <Paint_DrawString_EN+0xe6>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80055ea:	2116      	movs	r1, #22
 80055ec:	187b      	adds	r3, r7, r1
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	8892      	ldrh	r2, [r2, #4]
 80055f4:	189b      	adds	r3, r3, r2
 80055f6:	4a27      	ldr	r2, [pc, #156]	; (8005694 <Paint_DrawString_EN+0xf8>)
 80055f8:	8892      	ldrh	r2, [r2, #4]
 80055fa:	b292      	uxth	r2, r2
 80055fc:	4293      	cmp	r3, r2
 80055fe:	dd0c      	ble.n	800561a <Paint_DrawString_EN+0x7e>
            Xpoint = Xstart;
 8005600:	187b      	adds	r3, r7, r1
 8005602:	220e      	movs	r2, #14
 8005604:	18ba      	adds	r2, r7, r2
 8005606:	8812      	ldrh	r2, [r2, #0]
 8005608:	801a      	strh	r2, [r3, #0]
            Ypoint += Font->Height;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	88d9      	ldrh	r1, [r3, #6]
 800560e:	2214      	movs	r2, #20
 8005610:	18bb      	adds	r3, r7, r2
 8005612:	18ba      	adds	r2, r7, r2
 8005614:	8812      	ldrh	r2, [r2, #0]
 8005616:	188a      	adds	r2, r1, r2
 8005618:	801a      	strh	r2, [r3, #0]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800561a:	2114      	movs	r1, #20
 800561c:	187b      	adds	r3, r7, r1
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	88d2      	ldrh	r2, [r2, #6]
 8005624:	189b      	adds	r3, r3, r2
 8005626:	4a1b      	ldr	r2, [pc, #108]	; (8005694 <Paint_DrawString_EN+0xf8>)
 8005628:	88d2      	ldrh	r2, [r2, #6]
 800562a:	b292      	uxth	r2, r2
 800562c:	4293      	cmp	r3, r2
 800562e:	dd0a      	ble.n	8005646 <Paint_DrawString_EN+0xaa>
            Xpoint = Xstart;
 8005630:	2316      	movs	r3, #22
 8005632:	18fb      	adds	r3, r7, r3
 8005634:	220e      	movs	r2, #14
 8005636:	18ba      	adds	r2, r7, r2
 8005638:	8812      	ldrh	r2, [r2, #0]
 800563a:	801a      	strh	r2, [r3, #0]
            Ypoint = Ystart;
 800563c:	187b      	adds	r3, r7, r1
 800563e:	220c      	movs	r2, #12
 8005640:	18ba      	adds	r2, r7, r2
 8005642:	8812      	ldrh	r2, [r2, #0]
 8005644:	801a      	strh	r2, [r3, #0]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	687c      	ldr	r4, [r7, #4]
 800564c:	2314      	movs	r3, #20
 800564e:	18fb      	adds	r3, r7, r3
 8005650:	8819      	ldrh	r1, [r3, #0]
 8005652:	2516      	movs	r5, #22
 8005654:	197b      	adds	r3, r7, r5
 8005656:	8818      	ldrh	r0, [r3, #0]
 8005658:	232c      	movs	r3, #44	; 0x2c
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	2328      	movs	r3, #40	; 0x28
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	0023      	movs	r3, r4
 800566a:	f7ff feb3 	bl	80053d4 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	3301      	adds	r3, #1
 8005672:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8899      	ldrh	r1, [r3, #4]
 8005678:	197b      	adds	r3, r7, r5
 800567a:	197a      	adds	r2, r7, r5
 800567c:	8812      	ldrh	r2, [r2, #0]
 800567e:	188a      	adds	r2, r1, r2
 8005680:	801a      	strh	r2, [r3, #0]
    while (* pString != '\0') {
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1af      	bne.n	80055ea <Paint_DrawString_EN+0x4e>
 800568a:	e000      	b.n	800568e <Paint_DrawString_EN+0xf2>
        return;
 800568c:	46c0      	nop			; (mov r8, r8)
    }
}
 800568e:	46bd      	mov	sp, r7
 8005690:	b006      	add	sp, #24
 8005692:	bdb0      	pop	{r4, r5, r7, pc}
 8005694:	20000240 	.word	0x20000240

08005698 <Paint_DrawNum>:
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8005698:	b5b0      	push	{r4, r5, r7, lr}
 800569a:	4c5f      	ldr	r4, [pc, #380]	; (8005818 <Paint_DrawNum+0x180>)
 800569c:	44a5      	add	sp, r4
 800569e:	af02      	add	r7, sp, #8
 80056a0:	60ba      	str	r2, [r7, #8]
 80056a2:	607b      	str	r3, [r7, #4]
 80056a4:	4b5d      	ldr	r3, [pc, #372]	; (800581c <Paint_DrawNum+0x184>)
 80056a6:	2486      	movs	r4, #134	; 0x86
 80056a8:	00a4      	lsls	r4, r4, #2
 80056aa:	191b      	adds	r3, r3, r4
 80056ac:	19db      	adds	r3, r3, r7
 80056ae:	1c02      	adds	r2, r0, #0
 80056b0:	801a      	strh	r2, [r3, #0]
 80056b2:	4b5b      	ldr	r3, [pc, #364]	; (8005820 <Paint_DrawNum+0x188>)
 80056b4:	0020      	movs	r0, r4
 80056b6:	181b      	adds	r3, r3, r0
 80056b8:	19db      	adds	r3, r3, r7
 80056ba:	1c0a      	adds	r2, r1, #0
 80056bc:	801a      	strh	r2, [r3, #0]
    int16_t Num_Bit = 0, Str_Bit = 0;
 80056be:	4b59      	ldr	r3, [pc, #356]	; (8005824 <Paint_DrawNum+0x18c>)
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	2200      	movs	r2, #0
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	2385      	movs	r3, #133	; 0x85
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	2200      	movs	r2, #0
 80056ce:	801a      	strh	r2, [r3, #0]
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 80056d0:	4b55      	ldr	r3, [pc, #340]	; (8005828 <Paint_DrawNum+0x190>)
 80056d2:	0004      	movs	r4, r0
 80056d4:	191b      	adds	r3, r3, r4
 80056d6:	19db      	adds	r3, r3, r7
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	3304      	adds	r3, #4
 80056de:	22fb      	movs	r2, #251	; 0xfb
 80056e0:	2100      	movs	r1, #0
 80056e2:	0018      	movs	r0, r3
 80056e4:	f000 fc78 	bl	8005fd8 <memset>
 80056e8:	4b50      	ldr	r3, [pc, #320]	; (800582c <Paint_DrawNum+0x194>)
 80056ea:	191b      	adds	r3, r3, r4
 80056ec:	19db      	adds	r3, r3, r7
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	3304      	adds	r3, #4
 80056f4:	22fb      	movs	r2, #251	; 0xfb
 80056f6:	2100      	movs	r1, #0
 80056f8:	0018      	movs	r0, r3
 80056fa:	f000 fc6d 	bl	8005fd8 <memset>
    uint8_t *pStr = Str_Array;
 80056fe:	2388      	movs	r3, #136	; 0x88
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	18fb      	adds	r3, r7, r3
 8005704:	2284      	movs	r2, #132	; 0x84
 8005706:	0092      	lsls	r2, r2, #2
 8005708:	18ba      	adds	r2, r7, r2
 800570a:	6013      	str	r3, [r2, #0]

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800570c:	4b48      	ldr	r3, [pc, #288]	; (8005830 <Paint_DrawNum+0x198>)
 800570e:	889b      	ldrh	r3, [r3, #4]
 8005710:	b29b      	uxth	r3, r3
 8005712:	4a42      	ldr	r2, [pc, #264]	; (800581c <Paint_DrawNum+0x184>)
 8005714:	1912      	adds	r2, r2, r4
 8005716:	19d2      	adds	r2, r2, r7
 8005718:	8812      	ldrh	r2, [r2, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d900      	bls.n	8005720 <Paint_DrawNum+0x88>
 800571e:	e075      	b.n	800580c <Paint_DrawNum+0x174>
 8005720:	4b43      	ldr	r3, [pc, #268]	; (8005830 <Paint_DrawNum+0x198>)
 8005722:	88db      	ldrh	r3, [r3, #6]
 8005724:	b29b      	uxth	r3, r3
 8005726:	4a3e      	ldr	r2, [pc, #248]	; (8005820 <Paint_DrawNum+0x188>)
 8005728:	1912      	adds	r2, r2, r4
 800572a:	19d2      	adds	r2, r2, r7
 800572c:	8812      	ldrh	r2, [r2, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d86c      	bhi.n	800580c <Paint_DrawNum+0x174>
        return;
    }

    //Converts a number to a string
     do{
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	210a      	movs	r1, #10
 8005736:	0018      	movs	r0, r3
 8005738:	f7fa fe52 	bl	80003e0 <__aeabi_idivmod>
 800573c:	000b      	movs	r3, r1
 800573e:	b2da      	uxtb	r2, r3
 8005740:	4838      	ldr	r0, [pc, #224]	; (8005824 <Paint_DrawNum+0x18c>)
 8005742:	183b      	adds	r3, r7, r0
 8005744:	2100      	movs	r1, #0
 8005746:	5e5b      	ldrsh	r3, [r3, r1]
 8005748:	3230      	adds	r2, #48	; 0x30
 800574a:	b2d1      	uxtb	r1, r2
 800574c:	4a37      	ldr	r2, [pc, #220]	; (800582c <Paint_DrawNum+0x194>)
 800574e:	2486      	movs	r4, #134	; 0x86
 8005750:	00a4      	lsls	r4, r4, #2
 8005752:	1912      	adds	r2, r2, r4
 8005754:	19d2      	adds	r2, r2, r7
 8005756:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 8005758:	183b      	adds	r3, r7, r0
 800575a:	2200      	movs	r2, #0
 800575c:	5e9b      	ldrsh	r3, [r3, r2]
 800575e:	b29b      	uxth	r3, r3
 8005760:	3301      	adds	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	183b      	adds	r3, r7, r0
 8005766:	801a      	strh	r2, [r3, #0]
        Nummber /= 10;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	210a      	movs	r1, #10
 800576c:	0018      	movs	r0, r3
 800576e:	f7fa fd51 	bl	8000214 <__divsi3>
 8005772:	0003      	movs	r3, r0
 8005774:	60bb      	str	r3, [r7, #8]
    }while (Nummber);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1da      	bne.n	8005732 <Paint_DrawNum+0x9a>

    //The string is inverted
    while (Num_Bit > 0) {
 800577c:	e023      	b.n	80057c6 <Paint_DrawNum+0x12e>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 800577e:	4829      	ldr	r0, [pc, #164]	; (8005824 <Paint_DrawNum+0x18c>)
 8005780:	183b      	adds	r3, r7, r0
 8005782:	2200      	movs	r2, #0
 8005784:	5e9b      	ldrsh	r3, [r3, r2]
 8005786:	1e5a      	subs	r2, r3, #1
 8005788:	2485      	movs	r4, #133	; 0x85
 800578a:	00a4      	lsls	r4, r4, #2
 800578c:	193b      	adds	r3, r7, r4
 800578e:	2100      	movs	r1, #0
 8005790:	5e5b      	ldrsh	r3, [r3, r1]
 8005792:	4926      	ldr	r1, [pc, #152]	; (800582c <Paint_DrawNum+0x194>)
 8005794:	2586      	movs	r5, #134	; 0x86
 8005796:	00ad      	lsls	r5, r5, #2
 8005798:	1949      	adds	r1, r1, r5
 800579a:	19c9      	adds	r1, r1, r7
 800579c:	5c89      	ldrb	r1, [r1, r2]
 800579e:	4a22      	ldr	r2, [pc, #136]	; (8005828 <Paint_DrawNum+0x190>)
 80057a0:	1952      	adds	r2, r2, r5
 80057a2:	19d2      	adds	r2, r2, r7
 80057a4:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 80057a6:	193b      	adds	r3, r7, r4
 80057a8:	2200      	movs	r2, #0
 80057aa:	5e9b      	ldrsh	r3, [r3, r2]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3301      	adds	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	193b      	adds	r3, r7, r4
 80057b4:	801a      	strh	r2, [r3, #0]
        Num_Bit --;
 80057b6:	183b      	adds	r3, r7, r0
 80057b8:	2200      	movs	r2, #0
 80057ba:	5e9b      	ldrsh	r3, [r3, r2]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	183b      	adds	r3, r7, r0
 80057c4:	801a      	strh	r2, [r3, #0]
    while (Num_Bit > 0) {
 80057c6:	4b17      	ldr	r3, [pc, #92]	; (8005824 <Paint_DrawNum+0x18c>)
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	2200      	movs	r2, #0
 80057cc:	5e9b      	ldrsh	r3, [r3, r2]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	dcd5      	bgt.n	800577e <Paint_DrawNum+0xe6>
    }
    
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 80057d2:	687c      	ldr	r4, [r7, #4]
 80057d4:	2384      	movs	r3, #132	; 0x84
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	18fb      	adds	r3, r7, r3
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4b10      	ldr	r3, [pc, #64]	; (8005820 <Paint_DrawNum+0x188>)
 80057de:	2086      	movs	r0, #134	; 0x86
 80057e0:	0080      	lsls	r0, r0, #2
 80057e2:	181b      	adds	r3, r3, r0
 80057e4:	19db      	adds	r3, r3, r7
 80057e6:	8819      	ldrh	r1, [r3, #0]
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <Paint_DrawNum+0x184>)
 80057ea:	181b      	adds	r3, r3, r0
 80057ec:	19db      	adds	r3, r3, r7
 80057ee:	8818      	ldrh	r0, [r3, #0]
 80057f0:	238b      	movs	r3, #139	; 0x8b
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	238a      	movs	r3, #138	; 0x8a
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	0023      	movs	r3, r4
 8005806:	f7ff fec9 	bl	800559c <Paint_DrawString_EN>
 800580a:	e000      	b.n	800580e <Paint_DrawNum+0x176>
        return;
 800580c:	46c0      	nop			; (mov r8, r8)
}
 800580e:	46bd      	mov	sp, r7
 8005810:	2386      	movs	r3, #134	; 0x86
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	449d      	add	sp, r3
 8005816:	bdb0      	pop	{r4, r5, r7, pc}
 8005818:	fffffde0 	.word	0xfffffde0
 800581c:	fffffdf6 	.word	0xfffffdf6
 8005820:	fffffdf4 	.word	0xfffffdf4
 8005824:	00000216 	.word	0x00000216
 8005828:	fffffef8 	.word	0xfffffef8
 800582c:	fffffdf8 	.word	0xfffffdf8
 8005830:	20000240 	.word	0x20000240

08005834 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
	LCD_1IN28_CS_0;
 8005838:	2380      	movs	r3, #128	; 0x80
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	480f      	ldr	r0, [pc, #60]	; (800587c <LCD_1IN28_Reset+0x48>)
 800583e:	2200      	movs	r2, #0
 8005840:	0019      	movs	r1, r3
 8005842:	f7fc fc0f 	bl	8002064 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8005846:	2064      	movs	r0, #100	; 0x64
 8005848:	f7fb fba6 	bl	8000f98 <HAL_Delay>
    LCD_1IN28_RST_0;
 800584c:	23a0      	movs	r3, #160	; 0xa0
 800584e:	05db      	lsls	r3, r3, #23
 8005850:	2200      	movs	r2, #0
 8005852:	2108      	movs	r1, #8
 8005854:	0018      	movs	r0, r3
 8005856:	f7fc fc05 	bl	8002064 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800585a:	2064      	movs	r0, #100	; 0x64
 800585c:	f7fb fb9c 	bl	8000f98 <HAL_Delay>
    LCD_1IN28_RST_1;
 8005860:	23a0      	movs	r3, #160	; 0xa0
 8005862:	05db      	lsls	r3, r3, #23
 8005864:	2201      	movs	r2, #1
 8005866:	2108      	movs	r1, #8
 8005868:	0018      	movs	r0, r3
 800586a:	f7fc fbfb 	bl	8002064 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800586e:	2064      	movs	r0, #100	; 0x64
 8005870:	f7fb fb92 	bl	8000f98 <HAL_Delay>
}
 8005874:	46c0      	nop			; (mov r8, r8)
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	50000400 	.word	0x50000400

08005880 <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	0002      	movs	r2, r0
 8005888:	1dfb      	adds	r3, r7, #7
 800588a:	701a      	strb	r2, [r3, #0]
    LCD_1IN28_CS_0;
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	480d      	ldr	r0, [pc, #52]	; (80058c8 <LCD_1IN28_SendCommand+0x48>)
 8005892:	2200      	movs	r2, #0
 8005894:	0019      	movs	r1, r3
 8005896:	f7fc fbe5 	bl	8002064 <HAL_GPIO_WritePin>
    LCD_1IN28_DC_0;
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	480b      	ldr	r0, [pc, #44]	; (80058cc <LCD_1IN28_SendCommand+0x4c>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	0019      	movs	r1, r3
 80058a4:	f7fc fbde 	bl	8002064 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 80058a8:	1dfb      	adds	r3, r7, #7
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7ff f92d 	bl	8004b0c <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 80058b2:	2380      	movs	r3, #128	; 0x80
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4804      	ldr	r0, [pc, #16]	; (80058c8 <LCD_1IN28_SendCommand+0x48>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	0019      	movs	r1, r3
 80058bc:	f7fc fbd2 	bl	8002064 <HAL_GPIO_WritePin>
}
 80058c0:	46c0      	nop			; (mov r8, r8)
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b002      	add	sp, #8
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	50000400 	.word	0x50000400
 80058cc:	50000800 	.word	0x50000800

080058d0 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	0002      	movs	r2, r0
 80058d8:	1dfb      	adds	r3, r7, #7
 80058da:	701a      	strb	r2, [r3, #0]
    LCD_1IN28_CS_0;
 80058dc:	2380      	movs	r3, #128	; 0x80
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	480d      	ldr	r0, [pc, #52]	; (8005918 <LCD_1IN28_SendData_8Bit+0x48>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	0019      	movs	r1, r3
 80058e6:	f7fc fbbd 	bl	8002064 <HAL_GPIO_WritePin>
    LCD_1IN28_DC_1;
 80058ea:	2380      	movs	r3, #128	; 0x80
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	480b      	ldr	r0, [pc, #44]	; (800591c <LCD_1IN28_SendData_8Bit+0x4c>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	0019      	movs	r1, r3
 80058f4:	f7fc fbb6 	bl	8002064 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 80058f8:	1dfb      	adds	r3, r7, #7
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	0018      	movs	r0, r3
 80058fe:	f7ff f905 	bl	8004b0c <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8005902:	2380      	movs	r3, #128	; 0x80
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4804      	ldr	r0, [pc, #16]	; (8005918 <LCD_1IN28_SendData_8Bit+0x48>)
 8005908:	2201      	movs	r2, #1
 800590a:	0019      	movs	r1, r3
 800590c:	f7fc fbaa 	bl	8002064 <HAL_GPIO_WritePin>
}
 8005910:	46c0      	nop			; (mov r8, r8)
 8005912:	46bd      	mov	sp, r7
 8005914:	b002      	add	sp, #8
 8005916:	bd80      	pop	{r7, pc}
 8005918:	50000400 	.word	0x50000400
 800591c:	50000800 	.word	0x50000800

08005920 <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	0002      	movs	r2, r0
 8005928:	1dbb      	adds	r3, r7, #6
 800592a:	801a      	strh	r2, [r3, #0]
    LCD_1IN28_CS_0;
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4812      	ldr	r0, [pc, #72]	; (800597c <LCD_1IN28_SendData_16Bit+0x5c>)
 8005932:	2200      	movs	r2, #0
 8005934:	0019      	movs	r1, r3
 8005936:	f7fc fb95 	bl	8002064 <HAL_GPIO_WritePin>
    LCD_1IN28_DC_1;
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	4810      	ldr	r0, [pc, #64]	; (8005980 <LCD_1IN28_SendData_16Bit+0x60>)
 8005940:	2201      	movs	r2, #1
 8005942:	0019      	movs	r1, r3
 8005944:	f7fc fb8e 	bl	8002064 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data >> 8);
 8005948:	1dbb      	adds	r3, r7, #6
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	0a1b      	lsrs	r3, r3, #8
 800594e:	b29b      	uxth	r3, r3
 8005950:	b2db      	uxtb	r3, r3
 8005952:	0018      	movs	r0, r3
 8005954:	f7ff f8da 	bl	8004b0c <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data);
 8005958:	1dbb      	adds	r3, r7, #6
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	0018      	movs	r0, r3
 8005960:	f7ff f8d4 	bl	8004b0c <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4804      	ldr	r0, [pc, #16]	; (800597c <LCD_1IN28_SendData_16Bit+0x5c>)
 800596a:	2201      	movs	r2, #1
 800596c:	0019      	movs	r1, r3
 800596e:	f7fc fb79 	bl	8002064 <HAL_GPIO_WritePin>
}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	46bd      	mov	sp, r7
 8005976:	b002      	add	sp, #8
 8005978:	bd80      	pop	{r7, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	50000400 	.word	0x50000400
 8005980:	50000800 	.word	0x50000800

08005984 <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  LCD_1IN28_SendCommand(0xEF);
 8005988:	20ef      	movs	r0, #239	; 0xef
 800598a:	f7ff ff79 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 800598e:	20eb      	movs	r0, #235	; 0xeb
 8005990:	f7ff ff76 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8005994:	2014      	movs	r0, #20
 8005996:	f7ff ff9b 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0xFE);			 
 800599a:	20fe      	movs	r0, #254	; 0xfe
 800599c:	f7ff ff70 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 80059a0:	20ef      	movs	r0, #239	; 0xef
 80059a2:	f7ff ff6d 	bl	8005880 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 80059a6:	20eb      	movs	r0, #235	; 0xeb
 80059a8:	f7ff ff6a 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 80059ac:	2014      	movs	r0, #20
 80059ae:	f7ff ff8f 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 80059b2:	2084      	movs	r0, #132	; 0x84
 80059b4:	f7ff ff64 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 80059b8:	2040      	movs	r0, #64	; 0x40
 80059ba:	f7ff ff89 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 80059be:	2085      	movs	r0, #133	; 0x85
 80059c0:	f7ff ff5e 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80059c4:	20ff      	movs	r0, #255	; 0xff
 80059c6:	f7ff ff83 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 80059ca:	2086      	movs	r0, #134	; 0x86
 80059cc:	f7ff ff58 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80059d0:	20ff      	movs	r0, #255	; 0xff
 80059d2:	f7ff ff7d 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 80059d6:	2087      	movs	r0, #135	; 0x87
 80059d8:	f7ff ff52 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 80059dc:	20ff      	movs	r0, #255	; 0xff
 80059de:	f7ff ff77 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 80059e2:	2088      	movs	r0, #136	; 0x88
 80059e4:	f7ff ff4c 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 80059e8:	200a      	movs	r0, #10
 80059ea:	f7ff ff71 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 80059ee:	2089      	movs	r0, #137	; 0x89
 80059f0:	f7ff ff46 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 80059f4:	2021      	movs	r0, #33	; 0x21
 80059f6:	f7ff ff6b 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 80059fa:	208a      	movs	r0, #138	; 0x8a
 80059fc:	f7ff ff40 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 8005a00:	2000      	movs	r0, #0
 8005a02:	f7ff ff65 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 8005a06:	208b      	movs	r0, #139	; 0x8b
 8005a08:	f7ff ff3a 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 8005a0c:	2080      	movs	r0, #128	; 0x80
 8005a0e:	f7ff ff5f 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 8005a12:	208c      	movs	r0, #140	; 0x8c
 8005a14:	f7ff ff34 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8005a18:	2001      	movs	r0, #1
 8005a1a:	f7ff ff59 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 8005a1e:	208d      	movs	r0, #141	; 0x8d
 8005a20:	f7ff ff2e 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8005a24:	2001      	movs	r0, #1
 8005a26:	f7ff ff53 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 8005a2a:	208e      	movs	r0, #142	; 0x8e
 8005a2c:	f7ff ff28 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8005a30:	20ff      	movs	r0, #255	; 0xff
 8005a32:	f7ff ff4d 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 8005a36:	208f      	movs	r0, #143	; 0x8f
 8005a38:	f7ff ff22 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8005a3c:	20ff      	movs	r0, #255	; 0xff
 8005a3e:	f7ff ff47 	bl	80058d0 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 8005a42:	20b6      	movs	r0, #182	; 0xb6
 8005a44:	f7ff ff1c 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8005a48:	2000      	movs	r0, #0
 8005a4a:	f7ff ff41 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 8005a4e:	2020      	movs	r0, #32
 8005a50:	f7ff ff3e 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 8005a54:	2036      	movs	r0, #54	; 0x36
 8005a56:	f7ff ff13 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 8005a5a:	2008      	movs	r0, #8
 8005a5c:	f7ff ff38 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 8005a60:	203a      	movs	r0, #58	; 0x3a
 8005a62:	f7ff ff0d 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 8005a66:	2005      	movs	r0, #5
 8005a68:	f7ff ff32 	bl	80058d0 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 8005a6c:	2090      	movs	r0, #144	; 0x90
 8005a6e:	f7ff ff07 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 8005a72:	2008      	movs	r0, #8
 8005a74:	f7ff ff2c 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8005a78:	2008      	movs	r0, #8
 8005a7a:	f7ff ff29 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8005a7e:	2008      	movs	r0, #8
 8005a80:	f7ff ff26 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 8005a84:	2008      	movs	r0, #8
 8005a86:	f7ff ff23 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 8005a8a:	20bd      	movs	r0, #189	; 0xbd
 8005a8c:	f7ff fef8 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 8005a90:	2006      	movs	r0, #6
 8005a92:	f7ff ff1d 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 8005a96:	20bc      	movs	r0, #188	; 0xbc
 8005a98:	f7ff fef2 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	f7ff ff17 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 8005aa2:	20ff      	movs	r0, #255	; 0xff
 8005aa4:	f7ff feec 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8005aa8:	2060      	movs	r0, #96	; 0x60
 8005aaa:	f7ff ff11 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8005aae:	2001      	movs	r0, #1
 8005ab0:	f7ff ff0e 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8005ab4:	2004      	movs	r0, #4
 8005ab6:	f7ff ff0b 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 8005aba:	20c3      	movs	r0, #195	; 0xc3
 8005abc:	f7ff fee0 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8005ac0:	2013      	movs	r0, #19
 8005ac2:	f7ff ff05 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 8005ac6:	20c4      	movs	r0, #196	; 0xc4
 8005ac8:	f7ff feda 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8005acc:	2013      	movs	r0, #19
 8005ace:	f7ff feff 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 8005ad2:	20c9      	movs	r0, #201	; 0xc9
 8005ad4:	f7ff fed4 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8005ad8:	2022      	movs	r0, #34	; 0x22
 8005ada:	f7ff fef9 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 8005ade:	20be      	movs	r0, #190	; 0xbe
 8005ae0:	f7ff fece 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 8005ae4:	2011      	movs	r0, #17
 8005ae6:	f7ff fef3 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 8005aea:	20e1      	movs	r0, #225	; 0xe1
 8005aec:	f7ff fec8 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8005af0:	2010      	movs	r0, #16
 8005af2:	f7ff feed 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8005af6:	200e      	movs	r0, #14
 8005af8:	f7ff feea 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8005afc:	20df      	movs	r0, #223	; 0xdf
 8005afe:	f7ff febf 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 8005b02:	2021      	movs	r0, #33	; 0x21
 8005b04:	f7ff fee4 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8005b08:	200c      	movs	r0, #12
 8005b0a:	f7ff fee1 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 8005b0e:	2002      	movs	r0, #2
 8005b10:	f7ff fede 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 8005b14:	20f0      	movs	r0, #240	; 0xf0
 8005b16:	f7ff feb3 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8005b1a:	2045      	movs	r0, #69	; 0x45
 8005b1c:	f7ff fed8 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8005b20:	2009      	movs	r0, #9
 8005b22:	f7ff fed5 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8005b26:	2008      	movs	r0, #8
 8005b28:	f7ff fed2 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8005b2c:	2008      	movs	r0, #8
 8005b2e:	f7ff fecf 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 8005b32:	2026      	movs	r0, #38	; 0x26
 8005b34:	f7ff fecc 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8005b38:	202a      	movs	r0, #42	; 0x2a
 8005b3a:	f7ff fec9 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 8005b3e:	20f1      	movs	r0, #241	; 0xf1
 8005b40:	f7ff fe9e 	bl	8005880 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8005b44:	2043      	movs	r0, #67	; 0x43
 8005b46:	f7ff fec3 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8005b4a:	2070      	movs	r0, #112	; 0x70
 8005b4c:	f7ff fec0 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8005b50:	2072      	movs	r0, #114	; 0x72
 8005b52:	f7ff febd 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8005b56:	2036      	movs	r0, #54	; 0x36
 8005b58:	f7ff feba 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 8005b5c:	2037      	movs	r0, #55	; 0x37
 8005b5e:	f7ff feb7 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8005b62:	206f      	movs	r0, #111	; 0x6f
 8005b64:	f7ff feb4 	bl	80058d0 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8005b68:	20f2      	movs	r0, #242	; 0xf2
 8005b6a:	f7ff fe89 	bl	8005880 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 8005b6e:	2045      	movs	r0, #69	; 0x45
 8005b70:	f7ff feae 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8005b74:	2009      	movs	r0, #9
 8005b76:	f7ff feab 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8005b7a:	2008      	movs	r0, #8
 8005b7c:	f7ff fea8 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8005b80:	2008      	movs	r0, #8
 8005b82:	f7ff fea5 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8005b86:	2026      	movs	r0, #38	; 0x26
 8005b88:	f7ff fea2 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8005b8c:	202a      	movs	r0, #42	; 0x2a
 8005b8e:	f7ff fe9f 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 8005b92:	20f3      	movs	r0, #243	; 0xf3
 8005b94:	f7ff fe74 	bl	8005880 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8005b98:	2043      	movs	r0, #67	; 0x43
 8005b9a:	f7ff fe99 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8005b9e:	2070      	movs	r0, #112	; 0x70
 8005ba0:	f7ff fe96 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8005ba4:	2072      	movs	r0, #114	; 0x72
 8005ba6:	f7ff fe93 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8005baa:	2036      	movs	r0, #54	; 0x36
 8005bac:	f7ff fe90 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 8005bb0:	2037      	movs	r0, #55	; 0x37
 8005bb2:	f7ff fe8d 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8005bb6:	206f      	movs	r0, #111	; 0x6f
 8005bb8:	f7ff fe8a 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8005bbc:	20ed      	movs	r0, #237	; 0xed
 8005bbe:	f7ff fe5f 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 8005bc2:	201b      	movs	r0, #27
 8005bc4:	f7ff fe84 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8005bc8:	200b      	movs	r0, #11
 8005bca:	f7ff fe81 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 8005bce:	20ae      	movs	r0, #174	; 0xae
 8005bd0:	f7ff fe56 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8005bd4:	2077      	movs	r0, #119	; 0x77
 8005bd6:	f7ff fe7b 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8005bda:	20cd      	movs	r0, #205	; 0xcd
 8005bdc:	f7ff fe50 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 8005be0:	2063      	movs	r0, #99	; 0x63
 8005be2:	f7ff fe75 	bl	80058d0 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 8005be6:	2070      	movs	r0, #112	; 0x70
 8005be8:	f7ff fe4a 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8005bec:	2007      	movs	r0, #7
 8005bee:	f7ff fe6f 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8005bf2:	2007      	movs	r0, #7
 8005bf4:	f7ff fe6c 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8005bf8:	2004      	movs	r0, #4
 8005bfa:	f7ff fe69 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 8005bfe:	200e      	movs	r0, #14
 8005c00:	f7ff fe66 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 8005c04:	200f      	movs	r0, #15
 8005c06:	f7ff fe63 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8005c0a:	2009      	movs	r0, #9
 8005c0c:	f7ff fe60 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8005c10:	2007      	movs	r0, #7
 8005c12:	f7ff fe5d 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8005c16:	2008      	movs	r0, #8
 8005c18:	f7ff fe5a 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8005c1c:	2003      	movs	r0, #3
 8005c1e:	f7ff fe57 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 8005c22:	20e8      	movs	r0, #232	; 0xe8
 8005c24:	f7ff fe2c 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8005c28:	2034      	movs	r0, #52	; 0x34
 8005c2a:	f7ff fe51 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 8005c2e:	2062      	movs	r0, #98	; 0x62
 8005c30:	f7ff fe26 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8005c34:	2018      	movs	r0, #24
 8005c36:	f7ff fe4b 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 8005c3a:	200d      	movs	r0, #13
 8005c3c:	f7ff fe48 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8005c40:	2071      	movs	r0, #113	; 0x71
 8005c42:	f7ff fe45 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8005c46:	20ed      	movs	r0, #237	; 0xed
 8005c48:	f7ff fe42 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8005c4c:	2070      	movs	r0, #112	; 0x70
 8005c4e:	f7ff fe3f 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8005c52:	2070      	movs	r0, #112	; 0x70
 8005c54:	f7ff fe3c 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8005c58:	2018      	movs	r0, #24
 8005c5a:	f7ff fe39 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 8005c5e:	200f      	movs	r0, #15
 8005c60:	f7ff fe36 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8005c64:	2071      	movs	r0, #113	; 0x71
 8005c66:	f7ff fe33 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8005c6a:	20ef      	movs	r0, #239	; 0xef
 8005c6c:	f7ff fe30 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8005c70:	2070      	movs	r0, #112	; 0x70
 8005c72:	f7ff fe2d 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8005c76:	2070      	movs	r0, #112	; 0x70
 8005c78:	f7ff fe2a 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 8005c7c:	2063      	movs	r0, #99	; 0x63
 8005c7e:	f7ff fdff 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8005c82:	2018      	movs	r0, #24
 8005c84:	f7ff fe24 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8005c88:	2011      	movs	r0, #17
 8005c8a:	f7ff fe21 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8005c8e:	2071      	movs	r0, #113	; 0x71
 8005c90:	f7ff fe1e 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8005c94:	20f1      	movs	r0, #241	; 0xf1
 8005c96:	f7ff fe1b 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8005c9a:	2070      	movs	r0, #112	; 0x70
 8005c9c:	f7ff fe18 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8005ca0:	2070      	movs	r0, #112	; 0x70
 8005ca2:	f7ff fe15 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8005ca6:	2018      	movs	r0, #24
 8005ca8:	f7ff fe12 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8005cac:	2013      	movs	r0, #19
 8005cae:	f7ff fe0f 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8005cb2:	2071      	movs	r0, #113	; 0x71
 8005cb4:	f7ff fe0c 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8005cb8:	20f3      	movs	r0, #243	; 0xf3
 8005cba:	f7ff fe09 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8005cbe:	2070      	movs	r0, #112	; 0x70
 8005cc0:	f7ff fe06 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8005cc4:	2070      	movs	r0, #112	; 0x70
 8005cc6:	f7ff fe03 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8005cca:	2064      	movs	r0, #100	; 0x64
 8005ccc:	f7ff fdd8 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 8005cd0:	2028      	movs	r0, #40	; 0x28
 8005cd2:	f7ff fdfd 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8005cd6:	2029      	movs	r0, #41	; 0x29
 8005cd8:	f7ff fdfa 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8005cdc:	20f1      	movs	r0, #241	; 0xf1
 8005cde:	f7ff fdf7 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8005ce2:	2001      	movs	r0, #1
 8005ce4:	f7ff fdf4 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8005ce8:	20f1      	movs	r0, #241	; 0xf1
 8005cea:	f7ff fdf1 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005cee:	2000      	movs	r0, #0
 8005cf0:	f7ff fdee 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8005cf4:	2007      	movs	r0, #7
 8005cf6:	f7ff fdeb 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8005cfa:	2066      	movs	r0, #102	; 0x66
 8005cfc:	f7ff fdc0 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 8005d00:	203c      	movs	r0, #60	; 0x3c
 8005d02:	f7ff fde5 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d06:	2000      	movs	r0, #0
 8005d08:	f7ff fde2 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8005d0c:	20cd      	movs	r0, #205	; 0xcd
 8005d0e:	f7ff fddf 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 8005d12:	2067      	movs	r0, #103	; 0x67
 8005d14:	f7ff fddc 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8005d18:	2045      	movs	r0, #69	; 0x45
 8005d1a:	f7ff fdd9 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8005d1e:	2045      	movs	r0, #69	; 0x45
 8005d20:	f7ff fdd6 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8005d24:	2010      	movs	r0, #16
 8005d26:	f7ff fdd3 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	f7ff fdd0 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d30:	2000      	movs	r0, #0
 8005d32:	f7ff fdcd 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d36:	2000      	movs	r0, #0
 8005d38:	f7ff fdca 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 8005d3c:	2067      	movs	r0, #103	; 0x67
 8005d3e:	f7ff fd9f 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d42:	2000      	movs	r0, #0
 8005d44:	f7ff fdc4 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8005d48:	203c      	movs	r0, #60	; 0x3c
 8005d4a:	f7ff fdc1 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d4e:	2000      	movs	r0, #0
 8005d50:	f7ff fdbe 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d54:	2000      	movs	r0, #0
 8005d56:	f7ff fdbb 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f7ff fdb8 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8005d60:	2001      	movs	r0, #1
 8005d62:	f7ff fdb5 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8005d66:	2054      	movs	r0, #84	; 0x54
 8005d68:	f7ff fdb2 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8005d6c:	2010      	movs	r0, #16
 8005d6e:	f7ff fdaf 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 8005d72:	2032      	movs	r0, #50	; 0x32
 8005d74:	f7ff fdac 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8005d78:	2098      	movs	r0, #152	; 0x98
 8005d7a:	f7ff fda9 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 8005d7e:	2074      	movs	r0, #116	; 0x74
 8005d80:	f7ff fd7e 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 8005d84:	2010      	movs	r0, #16
 8005d86:	f7ff fda3 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 8005d8a:	2085      	movs	r0, #133	; 0x85
 8005d8c:	f7ff fda0 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 8005d90:	2080      	movs	r0, #128	; 0x80
 8005d92:	f7ff fd9d 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8005d96:	2000      	movs	r0, #0
 8005d98:	f7ff fd9a 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	f7ff fd97 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 8005da2:	204e      	movs	r0, #78	; 0x4e
 8005da4:	f7ff fd94 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8005da8:	2000      	movs	r0, #0
 8005daa:	f7ff fd91 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0x98);			
 8005dae:	2098      	movs	r0, #152	; 0x98
 8005db0:	f7ff fd66 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8005db4:	203e      	movs	r0, #62	; 0x3e
 8005db6:	f7ff fd8b 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8005dba:	2007      	movs	r0, #7
 8005dbc:	f7ff fd88 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 8005dc0:	2035      	movs	r0, #53	; 0x35
 8005dc2:	f7ff fd5d 	bl	8005880 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8005dc6:	2021      	movs	r0, #33	; 0x21
 8005dc8:	f7ff fd5a 	bl	8005880 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8005dcc:	2011      	movs	r0, #17
 8005dce:	f7ff fd57 	bl	8005880 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 8005dd2:	2078      	movs	r0, #120	; 0x78
 8005dd4:	f7fb f8e0 	bl	8000f98 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8005dd8:	2029      	movs	r0, #41	; 0x29
 8005dda:	f7ff fd51 	bl	8005880 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 8005dde:	2014      	movs	r0, #20
 8005de0:	f7fb f8da 	bl	8000f98 <HAL_Delay>
}
 8005de4:	46c0      	nop			; (mov r8, r8)
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	0002      	movs	r2, r0
 8005df4:	1dfb      	adds	r3, r7, #7
 8005df6:	701a      	strb	r2, [r3, #0]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 8005df8:	4b16      	ldr	r3, [pc, #88]	; (8005e54 <LCD_1IN28_SetAttributes+0x68>)
 8005dfa:	1dfa      	adds	r2, r7, #7
 8005dfc:	7812      	ldrb	r2, [r2, #0]
 8005dfe:	711a      	strb	r2, [r3, #4]
    UBYTE MemoryAccessReg = 0x08;
 8005e00:	210f      	movs	r1, #15
 8005e02:	187b      	adds	r3, r7, r1
 8005e04:	2208      	movs	r2, #8
 8005e06:	701a      	strb	r2, [r3, #0]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 8005e08:	1dfb      	adds	r3, r7, #7
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d109      	bne.n	8005e24 <LCD_1IN28_SetAttributes+0x38>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 8005e10:	4b10      	ldr	r3, [pc, #64]	; (8005e54 <LCD_1IN28_SetAttributes+0x68>)
 8005e12:	22f0      	movs	r2, #240	; 0xf0
 8005e14:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 8005e16:	4b0f      	ldr	r3, [pc, #60]	; (8005e54 <LCD_1IN28_SetAttributes+0x68>)
 8005e18:	22f0      	movs	r2, #240	; 0xf0
 8005e1a:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 8005e1c:	187b      	adds	r3, r7, r1
 8005e1e:	22c8      	movs	r2, #200	; 0xc8
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	e009      	b.n	8005e38 <LCD_1IN28_SetAttributes+0x4c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <LCD_1IN28_SetAttributes+0x68>)
 8005e26:	22f0      	movs	r2, #240	; 0xf0
 8005e28:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 8005e2a:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <LCD_1IN28_SetAttributes+0x68>)
 8005e2c:	22f0      	movs	r2, #240	; 0xf0
 8005e2e:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 8005e30:	230f      	movs	r3, #15
 8005e32:	18fb      	adds	r3, r7, r3
 8005e34:	2268      	movs	r2, #104	; 0x68
 8005e36:	701a      	strb	r2, [r3, #0]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 8005e38:	2036      	movs	r0, #54	; 0x36
 8005e3a:	f7ff fd21 	bl	8005880 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 8005e3e:	230f      	movs	r3, #15
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	0018      	movs	r0, r3
 8005e46:	f7ff fd43 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
}
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	b004      	add	sp, #16
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	20000260 	.word	0x20000260

08005e58 <LCD_1IN28_Init>:
function :	Initialize the lcd
parameter:
********************************************************************************/

void LCD_1IN28_Init(UBYTE Scan_dir)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	0002      	movs	r2, r0
 8005e60:	1dfb      	adds	r3, r7, #7
 8005e62:	701a      	strb	r2, [r3, #0]

    //Hardware reset
    LCD_1IN28_Reset();
 8005e64:	f7ff fce6 	bl	8005834 <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    //Not sure if this is needed
    LCD_1IN28_SetAttributes(Scan_dir);
 8005e68:	1dfb      	adds	r3, r7, #7
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f7ff ffbd 	bl	8005dec <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 8005e72:	f7ff fd87 	bl	8005984 <LCD_1IN28_InitReg>

}
 8005e76:	46c0      	nop			; (mov r8, r8)
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	b002      	add	sp, #8
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8005e7e:	b5b0      	push	{r4, r5, r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	0005      	movs	r5, r0
 8005e86:	000c      	movs	r4, r1
 8005e88:	0010      	movs	r0, r2
 8005e8a:	0019      	movs	r1, r3
 8005e8c:	1dbb      	adds	r3, r7, #6
 8005e8e:	1c2a      	adds	r2, r5, #0
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	1d3b      	adds	r3, r7, #4
 8005e94:	1c22      	adds	r2, r4, #0
 8005e96:	801a      	strh	r2, [r3, #0]
 8005e98:	1cbb      	adds	r3, r7, #2
 8005e9a:	1c02      	adds	r2, r0, #0
 8005e9c:	801a      	strh	r2, [r3, #0]
 8005e9e:	003b      	movs	r3, r7
 8005ea0:	1c0a      	adds	r2, r1, #0
 8005ea2:	801a      	strh	r2, [r3, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8005ea4:	202a      	movs	r0, #42	; 0x2a
 8005ea6:	f7ff fceb 	bl	8005880 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8005eaa:	2000      	movs	r0, #0
 8005eac:	f7ff fd10 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 8005eb0:	1dbb      	adds	r3, r7, #6
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	f7ff fd0a 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	f7ff fd07 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 8005ec2:	1cbb      	adds	r3, r7, #2
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f7ff fd01 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 8005ece:	202b      	movs	r0, #43	; 0x2b
 8005ed0:	f7ff fcd6 	bl	8005880 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	f7ff fcfb 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f7ff fcf5 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	f7ff fcf2 	bl	80058d0 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 8005eec:	003b      	movs	r3, r7
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7ff fcec 	bl	80058d0 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 8005ef8:	202c      	movs	r0, #44	; 0x2c
 8005efa:	f7ff fcc1 	bl	8005880 <LCD_1IN28_SendCommand>
}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	46bd      	mov	sp, r7
 8005f02:	b002      	add	sp, #8
 8005f04:	bdb0      	pop	{r4, r5, r7, pc}

08005f06 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	0002      	movs	r2, r0
 8005f0e:	1dbb      	adds	r3, r7, #6
 8005f10:	801a      	strh	r2, [r3, #0]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 8005f12:	23ef      	movs	r3, #239	; 0xef
 8005f14:	22ef      	movs	r2, #239	; 0xef
 8005f16:	2100      	movs	r1, #0
 8005f18:	2000      	movs	r0, #0
 8005f1a:	f7ff ffb0 	bl	8005e7e <LCD_1IN28_SetWindows>

	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8005f1e:	230e      	movs	r3, #14
 8005f20:	18fb      	adds	r3, r7, r3
 8005f22:	2200      	movs	r2, #0
 8005f24:	801a      	strh	r2, [r3, #0]
 8005f26:	e01a      	b.n	8005f5e <LCD_1IN28_Clear+0x58>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8005f28:	230c      	movs	r3, #12
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	e00a      	b.n	8005f48 <LCD_1IN28_Clear+0x42>
			LCD_1IN28_SendData_16Bit(Color);
 8005f32:	1dbb      	adds	r3, r7, #6
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	0018      	movs	r0, r3
 8005f38:	f7ff fcf2 	bl	8005920 <LCD_1IN28_SendData_16Bit>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8005f3c:	210c      	movs	r1, #12
 8005f3e:	187b      	adds	r3, r7, r1
 8005f40:	881a      	ldrh	r2, [r3, #0]
 8005f42:	187b      	adds	r3, r7, r1
 8005f44:	3201      	adds	r2, #1
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	230c      	movs	r3, #12
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	2bef      	cmp	r3, #239	; 0xef
 8005f50:	d9ef      	bls.n	8005f32 <LCD_1IN28_Clear+0x2c>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8005f52:	210e      	movs	r1, #14
 8005f54:	187b      	adds	r3, r7, r1
 8005f56:	881a      	ldrh	r2, [r3, #0]
 8005f58:	187b      	adds	r3, r7, r1
 8005f5a:	3201      	adds	r2, #1
 8005f5c:	801a      	strh	r2, [r3, #0]
 8005f5e:	230e      	movs	r3, #14
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	2bef      	cmp	r3, #239	; 0xef
 8005f66:	d9df      	bls.n	8005f28 <LCD_1IN28_Clear+0x22>
		}
	 }
}
 8005f68:	46c0      	nop			; (mov r8, r8)
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b004      	add	sp, #16
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8005f72:	b590      	push	{r4, r7, lr}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	0004      	movs	r4, r0
 8005f7a:	0008      	movs	r0, r1
 8005f7c:	0011      	movs	r1, r2
 8005f7e:	1dbb      	adds	r3, r7, #6
 8005f80:	1c22      	adds	r2, r4, #0
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	1d3b      	adds	r3, r7, #4
 8005f86:	1c02      	adds	r2, r0, #0
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	1cbb      	adds	r3, r7, #2
 8005f8c:	1c0a      	adds	r2, r1, #0
 8005f8e:	801a      	strh	r2, [r3, #0]
	LCD_1IN28_SetWindows(x,y,x,y);
 8005f90:	1d3b      	adds	r3, r7, #4
 8005f92:	881c      	ldrh	r4, [r3, #0]
 8005f94:	1dbb      	adds	r3, r7, #6
 8005f96:	881a      	ldrh	r2, [r3, #0]
 8005f98:	1d3b      	adds	r3, r7, #4
 8005f9a:	8819      	ldrh	r1, [r3, #0]
 8005f9c:	1dbb      	adds	r3, r7, #6
 8005f9e:	8818      	ldrh	r0, [r3, #0]
 8005fa0:	0023      	movs	r3, r4
 8005fa2:	f7ff ff6c 	bl	8005e7e <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 8005fa6:	1cbb      	adds	r3, r7, #2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	0018      	movs	r0, r3
 8005fac:	f7ff fcb8 	bl	8005920 <LCD_1IN28_SendData_16Bit>
}
 8005fb0:	46c0      	nop			; (mov r8, r8)
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b003      	add	sp, #12
 8005fb6:	bd90      	pop	{r4, r7, pc}

08005fb8 <LCD_1IN28_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN28_SetBackLight(UWORD Value)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	0002      	movs	r2, r0
 8005fc0:	1dbb      	adds	r3, r7, #6
 8005fc2:	801a      	strh	r2, [r3, #0]
	DEV_Set_PWM(Value);
 8005fc4:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <LCD_1IN28_SetBackLight+0x1c>)
 8005fc6:	1dba      	adds	r2, r7, #6
 8005fc8:	8812      	ldrh	r2, [r2, #0]
 8005fca:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005fcc:	46c0      	nop			; (mov r8, r8)
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b002      	add	sp, #8
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40014400 	.word	0x40014400

08005fd8 <memset>:
 8005fd8:	0003      	movs	r3, r0
 8005fda:	1882      	adds	r2, r0, r2
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d100      	bne.n	8005fe2 <memset+0xa>
 8005fe0:	4770      	bx	lr
 8005fe2:	7019      	strb	r1, [r3, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	e7f9      	b.n	8005fdc <memset+0x4>

08005fe8 <__libc_init_array>:
 8005fe8:	b570      	push	{r4, r5, r6, lr}
 8005fea:	2600      	movs	r6, #0
 8005fec:	4c0c      	ldr	r4, [pc, #48]	; (8006020 <__libc_init_array+0x38>)
 8005fee:	4d0d      	ldr	r5, [pc, #52]	; (8006024 <__libc_init_array+0x3c>)
 8005ff0:	1b64      	subs	r4, r4, r5
 8005ff2:	10a4      	asrs	r4, r4, #2
 8005ff4:	42a6      	cmp	r6, r4
 8005ff6:	d109      	bne.n	800600c <__libc_init_array+0x24>
 8005ff8:	2600      	movs	r6, #0
 8005ffa:	f000 f819 	bl	8006030 <_init>
 8005ffe:	4c0a      	ldr	r4, [pc, #40]	; (8006028 <__libc_init_array+0x40>)
 8006000:	4d0a      	ldr	r5, [pc, #40]	; (800602c <__libc_init_array+0x44>)
 8006002:	1b64      	subs	r4, r4, r5
 8006004:	10a4      	asrs	r4, r4, #2
 8006006:	42a6      	cmp	r6, r4
 8006008:	d105      	bne.n	8006016 <__libc_init_array+0x2e>
 800600a:	bd70      	pop	{r4, r5, r6, pc}
 800600c:	00b3      	lsls	r3, r6, #2
 800600e:	58eb      	ldr	r3, [r5, r3]
 8006010:	4798      	blx	r3
 8006012:	3601      	adds	r6, #1
 8006014:	e7ee      	b.n	8005ff4 <__libc_init_array+0xc>
 8006016:	00b3      	lsls	r3, r6, #2
 8006018:	58eb      	ldr	r3, [r5, r3]
 800601a:	4798      	blx	r3
 800601c:	3601      	adds	r6, #1
 800601e:	e7f2      	b.n	8006006 <__libc_init_array+0x1e>
 8006020:	08006d10 	.word	0x08006d10
 8006024:	08006d10 	.word	0x08006d10
 8006028:	08006d14 	.word	0x08006d14
 800602c:	08006d10 	.word	0x08006d10

08006030 <_init>:
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006036:	bc08      	pop	{r3}
 8006038:	469e      	mov	lr, r3
 800603a:	4770      	bx	lr

0800603c <_fini>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006042:	bc08      	pop	{r3}
 8006044:	469e      	mov	lr, r3
 8006046:	4770      	bx	lr
