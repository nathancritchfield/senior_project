
Remote_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e5c  08004e5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e5c  08004e5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e5c  08004e5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e60  08004e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000000c  08004e70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08004e70  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e12  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cc9  00000000  00000000  00033e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  00036b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfd  00000000  00000000  00037d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017044  00000000  00000000  00038b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f1b  00000000  00000000  0004fb79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092660  00000000  00000000  00066a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000405c  00000000  00000000  000f90f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000fd150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004d68 	.word	0x08004d68

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004d68 	.word	0x08004d68

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	230c      	movs	r3, #12
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f004 fc88 	bl	8004d10 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000400:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000402:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <MX_ADC1_Init+0xd0>)
 8000404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000406:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	05d2      	lsls	r2, r2, #23
 800040c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000414:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041a:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000422:	2204      	movs	r2, #4
 8000424:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000426:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000428:	2200      	movs	r2, #0
 800042a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800042c:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800042e:	2200      	movs	r2, #0
 8000430:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000434:	2200      	movs	r2, #0
 8000436:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000438:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800043a:	2201      	movs	r2, #1
 800043c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000440:	2220      	movs	r2, #32
 8000442:	2100      	movs	r1, #0
 8000444:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800044e:	2200      	movs	r2, #0
 8000450:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000454:	222c      	movs	r2, #44	; 0x2c
 8000456:	2100      	movs	r1, #0
 8000458:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800045c:	2200      	movs	r2, #0
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000462:	2200      	movs	r2, #0
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000468:	2200      	movs	r2, #0
 800046a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800046e:	223c      	movs	r2, #60	; 0x3c
 8000470:	2100      	movs	r1, #0
 8000472:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_ADC1_Init+0xcc>)
 8000476:	2200      	movs	r2, #0
 8000478:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_ADC1_Init+0xcc>)
 800047c:	0018      	movs	r0, r3
 800047e:	f001 f95b 	bl	8001738 <HAL_ADC_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000486:	f000 fc92 	bl	8000dae <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <MX_ADC1_Init+0xd4>)
 800048e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049c:	1d3a      	adds	r2, r7, #4
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_ADC1_Init+0xcc>)
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 faf0 	bl	8001a88 <HAL_ADC_ConfigChannel>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004ac:	f000 fc7f 	bl	8000dae <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000028 	.word	0x20000028
 80004bc:	40012400 	.word	0x40012400
 80004c0:	04000002 	.word	0x04000002

080004c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b08b      	sub	sp, #44	; 0x2c
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	2414      	movs	r4, #20
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	0018      	movs	r0, r3
 80004d2:	2314      	movs	r3, #20
 80004d4:	001a      	movs	r2, r3
 80004d6:	2100      	movs	r1, #0
 80004d8:	f004 fc1a 	bl	8004d10 <memset>
  if(adcHandle->Instance==ADC1)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a18      	ldr	r2, [pc, #96]	; (8000544 <HAL_ADC_MspInit+0x80>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d129      	bne.n	800053a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004e6:	4b18      	ldr	r3, [pc, #96]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0349      	lsls	r1, r1, #13
 80004f0:	430a      	orrs	r2, r1
 80004f2:	641a      	str	r2, [r3, #64]	; 0x40
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <HAL_ADC_MspInit+0x84>)
 80004f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	035b      	lsls	r3, r3, #13
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000508:	2101      	movs	r1, #1
 800050a:	430a      	orrs	r2, r1
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_ADC_MspInit+0x84>)
 8000510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000512:	2201      	movs	r2, #1
 8000514:	4013      	ands	r3, r2
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Analog_In_Pin;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2202      	movs	r2, #2
 800051e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2203      	movs	r2, #3
 8000524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Analog_In_GPIO_Port, &GPIO_InitStruct);
 800052c:	193a      	adds	r2, r7, r4
 800052e:	23a0      	movs	r3, #160	; 0xa0
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fd33 	bl	8001fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b00b      	add	sp, #44	; 0x2c
 8000540:	bd90      	pop	{r4, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40012400 	.word	0x40012400
 8000548:	40021000 	.word	0x40021000

0800054c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b089      	sub	sp, #36	; 0x24
 8000550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	240c      	movs	r4, #12
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	2314      	movs	r3, #20
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f004 fbd7 	bl	8004d10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b44      	ldr	r3, [pc, #272]	; (8000674 <MX_GPIO_Init+0x128>)
 8000564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000566:	4b43      	ldr	r3, [pc, #268]	; (8000674 <MX_GPIO_Init+0x128>)
 8000568:	2102      	movs	r1, #2
 800056a:	430a      	orrs	r2, r1
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
 800056e:	4b41      	ldr	r3, [pc, #260]	; (8000674 <MX_GPIO_Init+0x128>)
 8000570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000572:	2202      	movs	r2, #2
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b3e      	ldr	r3, [pc, #248]	; (8000674 <MX_GPIO_Init+0x128>)
 800057c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <MX_GPIO_Init+0x128>)
 8000580:	2104      	movs	r1, #4
 8000582:	430a      	orrs	r2, r1
 8000584:	635a      	str	r2, [r3, #52]	; 0x34
 8000586:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <MX_GPIO_Init+0x128>)
 8000588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058a:	2204      	movs	r2, #4
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b38      	ldr	r3, [pc, #224]	; (8000674 <MX_GPIO_Init+0x128>)
 8000594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000596:	4b37      	ldr	r3, [pc, #220]	; (8000674 <MX_GPIO_Init+0x128>)
 8000598:	2101      	movs	r1, #1
 800059a:	430a      	orrs	r2, r1
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
 800059e:	4b35      	ldr	r3, [pc, #212]	; (8000674 <MX_GPIO_Init+0x128>)
 80005a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a2:	2201      	movs	r2, #1
 80005a4:	4013      	ands	r3, r2
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|SPI1_CSN_Pin, GPIO_PIN_RESET);
 80005aa:	4933      	ldr	r1, [pc, #204]	; (8000678 <MX_GPIO_Init+0x12c>)
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <MX_GPIO_Init+0x130>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fe59 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	021b      	lsls	r3, r3, #8
 80005ba:	4831      	ldr	r0, [pc, #196]	; (8000680 <MX_GPIO_Init+0x134>)
 80005bc:	2200      	movs	r2, #0
 80005be:	0019      	movs	r1, r3
 80005c0:	f001 fe52 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80005c4:	492f      	ldr	r1, [pc, #188]	; (8000684 <MX_GPIO_Init+0x138>)
 80005c6:	23a0      	movs	r3, #160	; 0xa0
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2200      	movs	r2, #0
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fe4b 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_Pin|SPI1_CSN_Pin;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <MX_GPIO_Init+0x12c>)
 80005d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2201      	movs	r2, #1
 80005dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	4a23      	ldr	r2, [pc, #140]	; (800067c <MX_GPIO_Init+0x130>)
 80005ee:	0019      	movs	r1, r3
 80005f0:	0010      	movs	r0, r2
 80005f2:	f001 fcd5 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DC_Pin;
 80005f6:	0021      	movs	r1, r4
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	0212      	lsls	r2, r2, #8
 80005fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	000c      	movs	r4, r1
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2201      	movs	r2, #1
 8000606:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000614:	193b      	adds	r3, r7, r4
 8000616:	4a1a      	ldr	r2, [pc, #104]	; (8000680 <MX_GPIO_Init+0x134>)
 8000618:	0019      	movs	r1, r3
 800061a:	0010      	movs	r0, r2
 800061c:	f001 fcc0 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RST_Pin|LED_Pin|NRF_CE_Pin;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <MX_GPIO_Init+0x138>)
 8000624:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	2201      	movs	r2, #1
 800062a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	193a      	adds	r2, r7, r4
 800063a:	23a0      	movs	r3, #160	; 0xa0
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fcad 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_In_Pin;
 8000646:	0021      	movs	r1, r4
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	0152      	lsls	r2, r2, #5
 800064e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_In_GPIO_Port, &GPIO_InitStruct);
 800065c:	187a      	adds	r2, r7, r1
 800065e:	23a0      	movs	r3, #160	; 0xa0
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fc9b 	bl	8001fa0 <HAL_GPIO_Init>

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b009      	add	sp, #36	; 0x24
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000
 8000678:	00000201 	.word	0x00000201
 800067c:	50000400 	.word	0x50000400
 8000680:	50000800 	.word	0x50000800
 8000684:	00000888 	.word	0x00000888

08000688 <LCD_WriteReg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void LCD_WriteReg(uint8_t _dat)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	0002      	movs	r2, r0
 8000690:	1dfb      	adds	r3, r7, #7
 8000692:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_RESET);
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <LCD_WriteReg+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	0019      	movs	r1, r3
 800069e:	f001 fde3 	bl	8002268 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC_GPIO_Port,DC_Pin,GPIO_PIN_RESET);
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	480c      	ldr	r0, [pc, #48]	; (80006d8 <LCD_WriteReg+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	0019      	movs	r1, r3
 80006ac:	f001 fddc 	bl	8002268 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 80006b0:	23fa      	movs	r3, #250	; 0xfa
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	1df9      	adds	r1, r7, #7
 80006b6:	4809      	ldr	r0, [pc, #36]	; (80006dc <LCD_WriteReg+0x54>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	f002 fcd7 	bl	800306c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_SET);
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4804      	ldr	r0, [pc, #16]	; (80006d4 <LCD_WriteReg+0x4c>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	0019      	movs	r1, r3
 80006c8:	f001 fdce 	bl	8002268 <HAL_GPIO_WritePin>
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b002      	add	sp, #8
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	50000400 	.word	0x50000400
 80006d8:	50000800 	.word	0x50000800
 80006dc:	200000f0 	.word	0x200000f0

080006e0 <LCD_WriteData_Byte>:

void LCD_WriteData_Byte(uint8_t _dat){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	0002      	movs	r2, r0
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_RESET);
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	480e      	ldr	r0, [pc, #56]	; (800072c <LCD_WriteData_Byte+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	0019      	movs	r1, r3
 80006f6:	f001 fdb7 	bl	8002268 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC_GPIO_Port,DC_Pin,GPIO_PIN_SET);
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	021b      	lsls	r3, r3, #8
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <LCD_WriteData_Byte+0x50>)
 8000700:	2201      	movs	r2, #1
 8000702:	0019      	movs	r1, r3
 8000704:	f001 fdb0 	bl	8002268 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 8000708:	23fa      	movs	r3, #250	; 0xfa
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	1df9      	adds	r1, r7, #7
 800070e:	4809      	ldr	r0, [pc, #36]	; (8000734 <LCD_WriteData_Byte+0x54>)
 8000710:	2201      	movs	r2, #1
 8000712:	f002 fcab 	bl	800306c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_SET);
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4804      	ldr	r0, [pc, #16]	; (800072c <LCD_WriteData_Byte+0x4c>)
 800071c:	2201      	movs	r2, #1
 800071e:	0019      	movs	r1, r3
 8000720:	f001 fda2 	bl	8002268 <HAL_GPIO_WritePin>
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}
 800072c:	50000400 	.word	0x50000400
 8000730:	50000800 	.word	0x50000800
 8000734:	200000f0 	.word	0x200000f0

08000738 <LCD_WriteData_Word>:

void LCD_WriteData_Word(uint16_t _dat)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	0002      	movs	r2, r0
 8000740:	1dbb      	adds	r3, r7, #6
 8000742:	801a      	strh	r2, [r3, #0]
  uint8_t i = (_dat >> 8);// & 0xff;
 8000744:	1dbb      	adds	r3, r7, #6
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	b29b      	uxth	r3, r3
 800074c:	b2da      	uxtb	r2, r3
 800074e:	240f      	movs	r4, #15
 8000750:	193b      	adds	r3, r7, r4
 8000752:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_RESET);
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4812      	ldr	r0, [pc, #72]	; (80007a4 <LCD_WriteData_Word+0x6c>)
 800075a:	2200      	movs	r2, #0
 800075c:	0019      	movs	r1, r3
 800075e:	f001 fd83 	bl	8002268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DC_GPIO_Port,DC_Pin,GPIO_PIN_SET);
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	021b      	lsls	r3, r3, #8
 8000766:	4810      	ldr	r0, [pc, #64]	; (80007a8 <LCD_WriteData_Word+0x70>)
 8000768:	2201      	movs	r2, #1
 800076a:	0019      	movs	r1, r3
 800076c:	f001 fd7c 	bl	8002268 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, (uint8_t *)&i, 1, 500);
 8000770:	23fa      	movs	r3, #250	; 0xfa
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	1939      	adds	r1, r7, r4
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <LCD_WriteData_Word+0x74>)
 8000778:	2201      	movs	r2, #1
 800077a:	f002 fc77 	bl	800306c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 800077e:	23fa      	movs	r3, #250	; 0xfa
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	1db9      	adds	r1, r7, #6
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <LCD_WriteData_Word+0x74>)
 8000786:	2201      	movs	r2, #1
 8000788:	f002 fc70 	bl	800306c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_SET);
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <LCD_WriteData_Word+0x6c>)
 8000792:	2201      	movs	r2, #1
 8000794:	0019      	movs	r1, r3
 8000796:	f001 fd67 	bl	8002268 <HAL_GPIO_WritePin>
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b005      	add	sp, #20
 80007a0:	bd90      	pop	{r4, r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	50000400 	.word	0x50000400
 80007a8:	50000800 	.word	0x50000800
 80007ac:	200000f0 	.word	0x200000f0

080007b0 <LCD1in28works>:

void LCD1in28works(void){//LCD_Reset
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	48fe      	ldr	r0, [pc, #1016]	; (8000bb4 <LCD1in28works+0x404>)
 80007bc:	2200      	movs	r2, #0
 80007be:	0019      	movs	r1, r3
 80007c0:	f001 fd52 	bl	8002268 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80007c4:	2064      	movs	r0, #100	; 0x64
 80007c6:	f000 fe95 	bl	80014f4 <HAL_Delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80007ca:	23a0      	movs	r3, #160	; 0xa0
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	2200      	movs	r2, #0
 80007d0:	2108      	movs	r1, #8
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fd48 	bl	8002268 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80007d8:	2064      	movs	r0, #100	; 0x64
 80007da:	f000 fe8b 	bl	80014f4 <HAL_Delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80007de:	23a0      	movs	r3, #160	; 0xa0
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	2201      	movs	r2, #1
 80007e4:	2108      	movs	r1, #8
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 fd3e 	bl	8002268 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80007ec:	2064      	movs	r0, #100	; 0x64
 80007ee:	f000 fe81 	bl	80014f4 <HAL_Delay>

    /************* Start Initial Sequence **********/
      LCD_WriteReg(0xEF);
 80007f2:	20ef      	movs	r0, #239	; 0xef
 80007f4:	f7ff ff48 	bl	8000688 <LCD_WriteReg>
      LCD_WriteReg(0xEB);
 80007f8:	20eb      	movs	r0, #235	; 0xeb
 80007fa:	f7ff ff45 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x14);
 80007fe:	2014      	movs	r0, #20
 8000800:	f7ff ff6e 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xFE);
 8000804:	20fe      	movs	r0, #254	; 0xfe
 8000806:	f7ff ff3f 	bl	8000688 <LCD_WriteReg>
      LCD_WriteReg(0xEF);
 800080a:	20ef      	movs	r0, #239	; 0xef
 800080c:	f7ff ff3c 	bl	8000688 <LCD_WriteReg>

      LCD_WriteReg(0xEB);
 8000810:	20eb      	movs	r0, #235	; 0xeb
 8000812:	f7ff ff39 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x14);
 8000816:	2014      	movs	r0, #20
 8000818:	f7ff ff62 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x84);
 800081c:	2084      	movs	r0, #132	; 0x84
 800081e:	f7ff ff33 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x40);
 8000822:	2040      	movs	r0, #64	; 0x40
 8000824:	f7ff ff5c 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x85);
 8000828:	2085      	movs	r0, #133	; 0x85
 800082a:	f7ff ff2d 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0xFF);
 800082e:	20ff      	movs	r0, #255	; 0xff
 8000830:	f7ff ff56 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x86);
 8000834:	2086      	movs	r0, #134	; 0x86
 8000836:	f7ff ff27 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0xFF);
 800083a:	20ff      	movs	r0, #255	; 0xff
 800083c:	f7ff ff50 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x87);
 8000840:	2087      	movs	r0, #135	; 0x87
 8000842:	f7ff ff21 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0xFF);
 8000846:	20ff      	movs	r0, #255	; 0xff
 8000848:	f7ff ff4a 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x88);
 800084c:	2088      	movs	r0, #136	; 0x88
 800084e:	f7ff ff1b 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x0A);
 8000852:	200a      	movs	r0, #10
 8000854:	f7ff ff44 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x89);
 8000858:	2089      	movs	r0, #137	; 0x89
 800085a:	f7ff ff15 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x21);
 800085e:	2021      	movs	r0, #33	; 0x21
 8000860:	f7ff ff3e 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x8A);
 8000864:	208a      	movs	r0, #138	; 0x8a
 8000866:	f7ff ff0f 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x00);
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff ff38 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x8B);
 8000870:	208b      	movs	r0, #139	; 0x8b
 8000872:	f7ff ff09 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x80);
 8000876:	2080      	movs	r0, #128	; 0x80
 8000878:	f7ff ff32 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x8C);
 800087c:	208c      	movs	r0, #140	; 0x8c
 800087e:	f7ff ff03 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x01);
 8000882:	2001      	movs	r0, #1
 8000884:	f7ff ff2c 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x8D);
 8000888:	208d      	movs	r0, #141	; 0x8d
 800088a:	f7ff fefd 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x01);
 800088e:	2001      	movs	r0, #1
 8000890:	f7ff ff26 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x8E);
 8000894:	208e      	movs	r0, #142	; 0x8e
 8000896:	f7ff fef7 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0xFF);
 800089a:	20ff      	movs	r0, #255	; 0xff
 800089c:	f7ff ff20 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x8F);
 80008a0:	208f      	movs	r0, #143	; 0x8f
 80008a2:	f7ff fef1 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0xFF);
 80008a6:	20ff      	movs	r0, #255	; 0xff
 80008a8:	f7ff ff1a 	bl	80006e0 <LCD_WriteData_Byte>


      LCD_WriteReg(0xB6);
 80008ac:	20b6      	movs	r0, #182	; 0xb6
 80008ae:	f7ff feeb 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x00);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff ff14 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x20);
 80008b8:	2020      	movs	r0, #32
 80008ba:	f7ff ff11 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x36);
 80008be:	2036      	movs	r0, #54	; 0x36
 80008c0:	f7ff fee2 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x08);//�?剧疆涓虹�?��?��
 80008c4:	2008      	movs	r0, #8
 80008c6:	f7ff ff0b 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x3A);
 80008ca:	203a      	movs	r0, #58	; 0x3a
 80008cc:	f7ff fedc 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x05);
 80008d0:	2005      	movs	r0, #5
 80008d2:	f7ff ff05 	bl	80006e0 <LCD_WriteData_Byte>


      LCD_WriteReg(0x90);
 80008d6:	2090      	movs	r0, #144	; 0x90
 80008d8:	f7ff fed6 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x08);
 80008dc:	2008      	movs	r0, #8
 80008de:	f7ff feff 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x08);
 80008e2:	2008      	movs	r0, #8
 80008e4:	f7ff fefc 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x08);
 80008e8:	2008      	movs	r0, #8
 80008ea:	f7ff fef9 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x08);
 80008ee:	2008      	movs	r0, #8
 80008f0:	f7ff fef6 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xBD);
 80008f4:	20bd      	movs	r0, #189	; 0xbd
 80008f6:	f7ff fec7 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x06);
 80008fa:	2006      	movs	r0, #6
 80008fc:	f7ff fef0 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xBC);
 8000900:	20bc      	movs	r0, #188	; 0xbc
 8000902:	f7ff fec1 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x00);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff feea 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xFF);
 800090c:	20ff      	movs	r0, #255	; 0xff
 800090e:	f7ff febb 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x60);
 8000912:	2060      	movs	r0, #96	; 0x60
 8000914:	f7ff fee4 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x01);
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff fee1 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x04);
 800091e:	2004      	movs	r0, #4
 8000920:	f7ff fede 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xC3);
 8000924:	20c3      	movs	r0, #195	; 0xc3
 8000926:	f7ff feaf 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x13);
 800092a:	2013      	movs	r0, #19
 800092c:	f7ff fed8 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteReg(0xC4);
 8000930:	20c4      	movs	r0, #196	; 0xc4
 8000932:	f7ff fea9 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x13);
 8000936:	2013      	movs	r0, #19
 8000938:	f7ff fed2 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xC9);
 800093c:	20c9      	movs	r0, #201	; 0xc9
 800093e:	f7ff fea3 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x22);
 8000942:	2022      	movs	r0, #34	; 0x22
 8000944:	f7ff fecc 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xBE);
 8000948:	20be      	movs	r0, #190	; 0xbe
 800094a:	f7ff fe9d 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x11);
 800094e:	2011      	movs	r0, #17
 8000950:	f7ff fec6 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xE1);
 8000954:	20e1      	movs	r0, #225	; 0xe1
 8000956:	f7ff fe97 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x10);
 800095a:	2010      	movs	r0, #16
 800095c:	f7ff fec0 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x0E);
 8000960:	200e      	movs	r0, #14
 8000962:	f7ff febd 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xDF);
 8000966:	20df      	movs	r0, #223	; 0xdf
 8000968:	f7ff fe8e 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x21);
 800096c:	2021      	movs	r0, #33	; 0x21
 800096e:	f7ff feb7 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x0c);
 8000972:	200c      	movs	r0, #12
 8000974:	f7ff feb4 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x02);
 8000978:	2002      	movs	r0, #2
 800097a:	f7ff feb1 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xF0);
 800097e:	20f0      	movs	r0, #240	; 0xf0
 8000980:	f7ff fe82 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x45);
 8000984:	2045      	movs	r0, #69	; 0x45
 8000986:	f7ff feab 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x09);
 800098a:	2009      	movs	r0, #9
 800098c:	f7ff fea8 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x08);
 8000990:	2008      	movs	r0, #8
 8000992:	f7ff fea5 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x08);
 8000996:	2008      	movs	r0, #8
 8000998:	f7ff fea2 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x26);
 800099c:	2026      	movs	r0, #38	; 0x26
 800099e:	f7ff fe9f 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x2A);
 80009a2:	202a      	movs	r0, #42	; 0x2a
 80009a4:	f7ff fe9c 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xF1);
 80009a8:	20f1      	movs	r0, #241	; 0xf1
 80009aa:	f7ff fe6d 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x43);
 80009ae:	2043      	movs	r0, #67	; 0x43
 80009b0:	f7ff fe96 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x70);
 80009b4:	2070      	movs	r0, #112	; 0x70
 80009b6:	f7ff fe93 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x72);
 80009ba:	2072      	movs	r0, #114	; 0x72
 80009bc:	f7ff fe90 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x36);
 80009c0:	2036      	movs	r0, #54	; 0x36
 80009c2:	f7ff fe8d 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x37);
 80009c6:	2037      	movs	r0, #55	; 0x37
 80009c8:	f7ff fe8a 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x6F);
 80009cc:	206f      	movs	r0, #111	; 0x6f
 80009ce:	f7ff fe87 	bl	80006e0 <LCD_WriteData_Byte>


      LCD_WriteReg(0xF2);
 80009d2:	20f2      	movs	r0, #242	; 0xf2
 80009d4:	f7ff fe58 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x45);
 80009d8:	2045      	movs	r0, #69	; 0x45
 80009da:	f7ff fe81 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x09);
 80009de:	2009      	movs	r0, #9
 80009e0:	f7ff fe7e 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x08);
 80009e4:	2008      	movs	r0, #8
 80009e6:	f7ff fe7b 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x08);
 80009ea:	2008      	movs	r0, #8
 80009ec:	f7ff fe78 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x26);
 80009f0:	2026      	movs	r0, #38	; 0x26
 80009f2:	f7ff fe75 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x2A);
 80009f6:	202a      	movs	r0, #42	; 0x2a
 80009f8:	f7ff fe72 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xF3);
 80009fc:	20f3      	movs	r0, #243	; 0xf3
 80009fe:	f7ff fe43 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x43);
 8000a02:	2043      	movs	r0, #67	; 0x43
 8000a04:	f7ff fe6c 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x70);
 8000a08:	2070      	movs	r0, #112	; 0x70
 8000a0a:	f7ff fe69 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x72);
 8000a0e:	2072      	movs	r0, #114	; 0x72
 8000a10:	f7ff fe66 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x36);
 8000a14:	2036      	movs	r0, #54	; 0x36
 8000a16:	f7ff fe63 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x37);
 8000a1a:	2037      	movs	r0, #55	; 0x37
 8000a1c:	f7ff fe60 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x6F);
 8000a20:	206f      	movs	r0, #111	; 0x6f
 8000a22:	f7ff fe5d 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xED);
 8000a26:	20ed      	movs	r0, #237	; 0xed
 8000a28:	f7ff fe2e 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x1B);
 8000a2c:	201b      	movs	r0, #27
 8000a2e:	f7ff fe57 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x0B);
 8000a32:	200b      	movs	r0, #11
 8000a34:	f7ff fe54 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xAE);
 8000a38:	20ae      	movs	r0, #174	; 0xae
 8000a3a:	f7ff fe25 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x77);
 8000a3e:	2077      	movs	r0, #119	; 0x77
 8000a40:	f7ff fe4e 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xCD);
 8000a44:	20cd      	movs	r0, #205	; 0xcd
 8000a46:	f7ff fe1f 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x63);
 8000a4a:	2063      	movs	r0, #99	; 0x63
 8000a4c:	f7ff fe48 	bl	80006e0 <LCD_WriteData_Byte>


      LCD_WriteReg(0x70);
 8000a50:	2070      	movs	r0, #112	; 0x70
 8000a52:	f7ff fe19 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x07);
 8000a56:	2007      	movs	r0, #7
 8000a58:	f7ff fe42 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x07);
 8000a5c:	2007      	movs	r0, #7
 8000a5e:	f7ff fe3f 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x04);
 8000a62:	2004      	movs	r0, #4
 8000a64:	f7ff fe3c 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x0E);
 8000a68:	200e      	movs	r0, #14
 8000a6a:	f7ff fe39 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x0F);
 8000a6e:	200f      	movs	r0, #15
 8000a70:	f7ff fe36 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x09);
 8000a74:	2009      	movs	r0, #9
 8000a76:	f7ff fe33 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x07);
 8000a7a:	2007      	movs	r0, #7
 8000a7c:	f7ff fe30 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x08);
 8000a80:	2008      	movs	r0, #8
 8000a82:	f7ff fe2d 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x03);
 8000a86:	2003      	movs	r0, #3
 8000a88:	f7ff fe2a 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0xE8);
 8000a8c:	20e8      	movs	r0, #232	; 0xe8
 8000a8e:	f7ff fdfb 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x34);
 8000a92:	2034      	movs	r0, #52	; 0x34
 8000a94:	f7ff fe24 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x62);
 8000a98:	2062      	movs	r0, #98	; 0x62
 8000a9a:	f7ff fdf5 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x18);
 8000a9e:	2018      	movs	r0, #24
 8000aa0:	f7ff fe1e 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x0D);
 8000aa4:	200d      	movs	r0, #13
 8000aa6:	f7ff fe1b 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x71);
 8000aaa:	2071      	movs	r0, #113	; 0x71
 8000aac:	f7ff fe18 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0xED);
 8000ab0:	20ed      	movs	r0, #237	; 0xed
 8000ab2:	f7ff fe15 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x70);
 8000ab6:	2070      	movs	r0, #112	; 0x70
 8000ab8:	f7ff fe12 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x70);
 8000abc:	2070      	movs	r0, #112	; 0x70
 8000abe:	f7ff fe0f 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x18);
 8000ac2:	2018      	movs	r0, #24
 8000ac4:	f7ff fe0c 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x0F);
 8000ac8:	200f      	movs	r0, #15
 8000aca:	f7ff fe09 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x71);
 8000ace:	2071      	movs	r0, #113	; 0x71
 8000ad0:	f7ff fe06 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0xEF);
 8000ad4:	20ef      	movs	r0, #239	; 0xef
 8000ad6:	f7ff fe03 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x70);
 8000ada:	2070      	movs	r0, #112	; 0x70
 8000adc:	f7ff fe00 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x70);
 8000ae0:	2070      	movs	r0, #112	; 0x70
 8000ae2:	f7ff fdfd 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x63);
 8000ae6:	2063      	movs	r0, #99	; 0x63
 8000ae8:	f7ff fdce 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x18);
 8000aec:	2018      	movs	r0, #24
 8000aee:	f7ff fdf7 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x11);
 8000af2:	2011      	movs	r0, #17
 8000af4:	f7ff fdf4 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x71);
 8000af8:	2071      	movs	r0, #113	; 0x71
 8000afa:	f7ff fdf1 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0xF1);
 8000afe:	20f1      	movs	r0, #241	; 0xf1
 8000b00:	f7ff fdee 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x70);
 8000b04:	2070      	movs	r0, #112	; 0x70
 8000b06:	f7ff fdeb 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x70);
 8000b0a:	2070      	movs	r0, #112	; 0x70
 8000b0c:	f7ff fde8 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x18);
 8000b10:	2018      	movs	r0, #24
 8000b12:	f7ff fde5 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x13);
 8000b16:	2013      	movs	r0, #19
 8000b18:	f7ff fde2 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x71);
 8000b1c:	2071      	movs	r0, #113	; 0x71
 8000b1e:	f7ff fddf 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0xF3);
 8000b22:	20f3      	movs	r0, #243	; 0xf3
 8000b24:	f7ff fddc 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x70);
 8000b28:	2070      	movs	r0, #112	; 0x70
 8000b2a:	f7ff fdd9 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x70);
 8000b2e:	2070      	movs	r0, #112	; 0x70
 8000b30:	f7ff fdd6 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x64);
 8000b34:	2064      	movs	r0, #100	; 0x64
 8000b36:	f7ff fda7 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x28);
 8000b3a:	2028      	movs	r0, #40	; 0x28
 8000b3c:	f7ff fdd0 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x29);
 8000b40:	2029      	movs	r0, #41	; 0x29
 8000b42:	f7ff fdcd 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0xF1);
 8000b46:	20f1      	movs	r0, #241	; 0xf1
 8000b48:	f7ff fdca 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x01);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fdc7 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0xF1);
 8000b52:	20f1      	movs	r0, #241	; 0xf1
 8000b54:	f7ff fdc4 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x00);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff fdc1 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x07);
 8000b5e:	2007      	movs	r0, #7
 8000b60:	f7ff fdbe 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x66);
 8000b64:	2066      	movs	r0, #102	; 0x66
 8000b66:	f7ff fd8f 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x3C);
 8000b6a:	203c      	movs	r0, #60	; 0x3c
 8000b6c:	f7ff fdb8 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x00);
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff fdb5 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0xCD);
 8000b76:	20cd      	movs	r0, #205	; 0xcd
 8000b78:	f7ff fdb2 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x67);
 8000b7c:	2067      	movs	r0, #103	; 0x67
 8000b7e:	f7ff fdaf 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x45);
 8000b82:	2045      	movs	r0, #69	; 0x45
 8000b84:	f7ff fdac 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x45);
 8000b88:	2045      	movs	r0, #69	; 0x45
 8000b8a:	f7ff fda9 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x10);
 8000b8e:	2010      	movs	r0, #16
 8000b90:	f7ff fda6 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x00);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fda3 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x00);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff fda0 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x00);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff fd9d 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x67);
 8000ba6:	2067      	movs	r0, #103	; 0x67
 8000ba8:	f7ff fd6e 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x00);
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff fd97 	bl	80006e0 <LCD_WriteData_Byte>
 8000bb2:	e001      	b.n	8000bb8 <LCD1in28works+0x408>
 8000bb4:	50000400 	.word	0x50000400
      LCD_WriteData_Byte(0x3C);
 8000bb8:	203c      	movs	r0, #60	; 0x3c
 8000bba:	f7ff fd91 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x00);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fd8e 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x00);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff fd8b 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x00);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff fd88 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x01);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff fd85 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x54);
 8000bd6:	2054      	movs	r0, #84	; 0x54
 8000bd8:	f7ff fd82 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x10);
 8000bdc:	2010      	movs	r0, #16
 8000bde:	f7ff fd7f 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x32);
 8000be2:	2032      	movs	r0, #50	; 0x32
 8000be4:	f7ff fd7c 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x98);
 8000be8:	2098      	movs	r0, #152	; 0x98
 8000bea:	f7ff fd79 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x74);
 8000bee:	2074      	movs	r0, #116	; 0x74
 8000bf0:	f7ff fd4a 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x10);
 8000bf4:	2010      	movs	r0, #16
 8000bf6:	f7ff fd73 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x85);
 8000bfa:	2085      	movs	r0, #133	; 0x85
 8000bfc:	f7ff fd70 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x80);
 8000c00:	2080      	movs	r0, #128	; 0x80
 8000c02:	f7ff fd6d 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x00);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff fd6a 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x00);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff fd67 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x4E);
 8000c12:	204e      	movs	r0, #78	; 0x4e
 8000c14:	f7ff fd64 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x00);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fd61 	bl	80006e0 <LCD_WriteData_Byte>

        LCD_WriteReg(0x98);
 8000c1e:	2098      	movs	r0, #152	; 0x98
 8000c20:	f7ff fd32 	bl	8000688 <LCD_WriteReg>
      LCD_WriteData_Byte(0x3e);
 8000c24:	203e      	movs	r0, #62	; 0x3e
 8000c26:	f7ff fd5b 	bl	80006e0 <LCD_WriteData_Byte>
      LCD_WriteData_Byte(0x07);
 8000c2a:	2007      	movs	r0, #7
 8000c2c:	f7ff fd58 	bl	80006e0 <LCD_WriteData_Byte>

      LCD_WriteReg(0x35);
 8000c30:	2035      	movs	r0, #53	; 0x35
 8000c32:	f7ff fd29 	bl	8000688 <LCD_WriteReg>
      LCD_WriteReg(0x21);
 8000c36:	2021      	movs	r0, #33	; 0x21
 8000c38:	f7ff fd26 	bl	8000688 <LCD_WriteReg>

      LCD_WriteReg(0x11);
 8000c3c:	2011      	movs	r0, #17
 8000c3e:	f7ff fd23 	bl	8000688 <LCD_WriteReg>
      HAL_Delay(120);
 8000c42:	2078      	movs	r0, #120	; 0x78
 8000c44:	f000 fc56 	bl	80014f4 <HAL_Delay>
      LCD_WriteReg(0x29);
 8000c48:	2029      	movs	r0, #41	; 0x29
 8000c4a:	f7ff fd1d 	bl	8000688 <LCD_WriteReg>
      HAL_Delay(20);
 8000c4e:	2014      	movs	r0, #20
 8000c50:	f000 fc50 	bl	80014f4 <HAL_Delay>

      //Start Backlight
      HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <LCD1in28works+0x53c>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f002 fd95 	bl	8003788 <HAL_TIM_PWM_Start>
      TIM16->CCR1 = 1000;
 8000c5e:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <LCD1in28works+0x540>)
 8000c60:	22fa      	movs	r2, #250	; 0xfa
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	635a      	str	r2, [r3, #52]	; 0x34

      //Set Cursor
      LCD_WriteReg(0x2a);
 8000c66:	202a      	movs	r0, #42	; 0x2a
 8000c68:	f7ff fd0e 	bl	8000688 <LCD_WriteReg>
        LCD_WriteData_Byte(0x00);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fd37 	bl	80006e0 <LCD_WriteData_Byte>
        LCD_WriteData_Byte(0x00);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fd34 	bl	80006e0 <LCD_WriteData_Byte>
        LCD_WriteData_Byte(0x00);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fd31 	bl	80006e0 <LCD_WriteData_Byte>
        LCD_WriteData_Byte(0xEF);/*********Xend-1********/
 8000c7e:	20ef      	movs	r0, #239	; 0xef
 8000c80:	f7ff fd2e 	bl	80006e0 <LCD_WriteData_Byte>

        LCD_WriteReg(0x2b);
 8000c84:	202b      	movs	r0, #43	; 0x2b
 8000c86:	f7ff fcff 	bl	8000688 <LCD_WriteReg>
        LCD_WriteData_Byte(0x00);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fd28 	bl	80006e0 <LCD_WriteData_Byte>
        LCD_WriteData_Byte(0x00);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fd25 	bl	80006e0 <LCD_WriteData_Byte>
        LCD_WriteData_Byte(0x00);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff fd22 	bl	80006e0 <LCD_WriteData_Byte>
        LCD_WriteData_Byte(0xEF);
 8000c9c:	20ef      	movs	r0, #239	; 0xef
 8000c9e:	f7ff fd1f 	bl	80006e0 <LCD_WriteData_Byte>

        LCD_WriteReg(0x2c);
 8000ca2:	202c      	movs	r0, #44	; 0x2c
 8000ca4:	f7ff fcf0 	bl	8000688 <LCD_WriteReg>

        //Write Color to display
        for(uint8_t i = 0; i <= 239; i++){
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	e014      	b.n	8000cda <LCD1in28works+0x52a>
            for(uint8_t j = 0; j <= 239; j++){
 8000cb0:	1dbb      	adds	r3, r7, #6
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	e007      	b.n	8000cc8 <LCD1in28works+0x518>
                LCD_WriteData_Word(0x00FF);
 8000cb8:	20ff      	movs	r0, #255	; 0xff
 8000cba:	f7ff fd3d 	bl	8000738 <LCD_WriteData_Word>
            for(uint8_t j = 0; j <= 239; j++){
 8000cbe:	1dbb      	adds	r3, r7, #6
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	1dbb      	adds	r3, r7, #6
 8000cc4:	3201      	adds	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	1dbb      	adds	r3, r7, #6
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2bef      	cmp	r3, #239	; 0xef
 8000cce:	d9f3      	bls.n	8000cb8 <LCD1in28works+0x508>
        for(uint8_t i = 0; i <= 239; i++){
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	3201      	adds	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2bef      	cmp	r3, #239	; 0xef
 8000ce0:	d9e6      	bls.n	8000cb0 <LCD1in28works+0x500>
            }
        }
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b002      	add	sp, #8
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000154 	.word	0x20000154
 8000cf0:	40014400 	.word	0x40014400

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f000 fb76 	bl	80013e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f80f 	bl	8000d1e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f7ff fc24 	bl	800054c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d04:	f7ff fb72 	bl	80003ec <MX_ADC1_Init>
  MX_SPI1_Init();
 8000d08:	f000 f856 	bl	8000db8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d0c:	f000 f892 	bl	8000e34 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000d10:	f000 fa90 	bl	8001234 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000d14:	f000 f9a6 	bl	8001064 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  LCD1in28works();
 8000d18:	f7ff fd4a 	bl	80007b0 <LCD1in28works>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <main+0x28>

08000d1e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1e:	b590      	push	{r4, r7, lr}
 8000d20:	b093      	sub	sp, #76	; 0x4c
 8000d22:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d24:	2414      	movs	r4, #20
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	0018      	movs	r0, r3
 8000d2a:	2334      	movs	r3, #52	; 0x34
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	2100      	movs	r1, #0
 8000d30:	f003 ffee 	bl	8004d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	0018      	movs	r0, r3
 8000d38:	2310      	movs	r3, #16
 8000d3a:	001a      	movs	r2, r3
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f003 ffe7 	bl	8004d10 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	0018      	movs	r0, r3
 8000d48:	f001 faac 	bl	80022a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	2202      	movs	r2, #2
 8000d50:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	0052      	lsls	r2, r2, #1
 8000d58:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d60:	193b      	adds	r3, r7, r4
 8000d62:	2240      	movs	r2, #64	; 0x40
 8000d64:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	193b      	adds	r3, r7, r4
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f001 fae4 	bl	800233c <HAL_RCC_OscConfig>
 8000d74:	1e03      	subs	r3, r0, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000d78:	f000 f819 	bl	8000dae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2207      	movs	r2, #7
 8000d80:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2100      	movs	r1, #0
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f001 fddf 	bl	800295c <HAL_RCC_ClockConfig>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000da2:	f000 f804 	bl	8000dae <Error_Handler>
  }
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b013      	add	sp, #76	; 0x4c
 8000dac:	bd90      	pop	{r4, r7, pc}

08000dae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db2:	b672      	cpsid	i
}
 8000db4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <Error_Handler+0x8>

08000db8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000dbe:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <MX_SPI1_Init+0x78>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000dc4:	2282      	movs	r2, #130	; 0x82
 8000dc6:	0052      	lsls	r2, r2, #1
 8000dc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000dd2:	22e0      	movs	r2, #224	; 0xe0
 8000dd4:	00d2      	lsls	r2, r2, #3
 8000dd6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000de6:	2280      	movs	r2, #128	; 0x80
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000e06:	2207      	movs	r2, #7
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000e12:	2208      	movs	r2, #8
 8000e14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <MX_SPI1_Init+0x74>)
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f002 f86f 	bl	8002efc <HAL_SPI_Init>
 8000e1e:	1e03      	subs	r3, r0, #0
 8000e20:	d001      	beq.n	8000e26 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e22:	f7ff ffc4 	bl	8000dae <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000008c 	.word	0x2000008c
 8000e30:	40013000 	.word	0x40013000

08000e34 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	; (8000eac <MX_SPI2_Init+0x78>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e40:	2282      	movs	r2, #130	; 0x82
 8000e42:	0052      	lsls	r2, r2, #1
 8000e44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e4e:	22e0      	movs	r2, #224	; 0xe0
 8000e50:	00d2      	lsls	r2, r2, #3
 8000e52:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e82:	2207      	movs	r2, #7
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <MX_SPI2_Init+0x74>)
 8000e94:	0018      	movs	r0, r3
 8000e96:	f002 f831 	bl	8002efc <HAL_SPI_Init>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e9e:	f7ff ff86 	bl	8000dae <Error_Handler>
  /* USER CODE BEGIN SPI2_Init 2 */
//ALways change line 77 to
  //hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  /* USER CODE END SPI2_Init 2 */

}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200000f0 	.word	0x200000f0
 8000eac:	40003800 	.word	0x40003800

08000eb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b08d      	sub	sp, #52	; 0x34
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	241c      	movs	r4, #28
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	2314      	movs	r3, #20
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	f003 ff24 	bl	8004d10 <memset>
  if(spiHandle->Instance==SPI1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a42      	ldr	r2, [pc, #264]	; (8000fd8 <HAL_SPI_MspInit+0x128>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d131      	bne.n	8000f36 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ed2:	4b42      	ldr	r3, [pc, #264]	; (8000fdc <HAL_SPI_MspInit+0x12c>)
 8000ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed6:	4b41      	ldr	r3, [pc, #260]	; (8000fdc <HAL_SPI_MspInit+0x12c>)
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	0149      	lsls	r1, r1, #5
 8000edc:	430a      	orrs	r2, r1
 8000ede:	641a      	str	r2, [r3, #64]	; 0x40
 8000ee0:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <HAL_SPI_MspInit+0x12c>)
 8000ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	015b      	lsls	r3, r3, #5
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b3b      	ldr	r3, [pc, #236]	; (8000fdc <HAL_SPI_MspInit+0x12c>)
 8000ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <HAL_SPI_MspInit+0x12c>)
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	635a      	str	r2, [r3, #52]	; 0x34
 8000efa:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <HAL_SPI_MspInit+0x12c>)
 8000efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000efe:	2201      	movs	r2, #1
 8000f00:	4013      	ands	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000f06:	0021      	movs	r1, r4
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2264      	movs	r2, #100	; 0x64
 8000f0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2202      	movs	r2, #2
 8000f12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	187a      	adds	r2, r7, r1
 8000f28:	23a0      	movs	r3, #160	; 0xa0
 8000f2a:	05db      	lsls	r3, r3, #23
 8000f2c:	0011      	movs	r1, r2
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f001 f836 	bl	8001fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f34:	e04c      	b.n	8000fd0 <HAL_SPI_MspInit+0x120>
  else if(spiHandle->Instance==SPI2)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a29      	ldr	r2, [pc, #164]	; (8000fe0 <HAL_SPI_MspInit+0x130>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d147      	bne.n	8000fd0 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <HAL_SPI_MspInit+0x12c>)
 8000f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f44:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <HAL_SPI_MspInit+0x12c>)
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	01c9      	lsls	r1, r1, #7
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <HAL_SPI_MspInit+0x12c>)
 8000f50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	01db      	lsls	r3, r3, #7
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <HAL_SPI_MspInit+0x12c>)
 8000f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_SPI_MspInit+0x12c>)
 8000f62:	2101      	movs	r1, #1
 8000f64:	430a      	orrs	r2, r1
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_SPI_MspInit+0x12c>)
 8000f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4013      	ands	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f74:	241c      	movs	r4, #28
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	2201      	movs	r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	2202      	movs	r2, #2
 8000f80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	193a      	adds	r2, r7, r4
 8000f96:	23a0      	movs	r3, #160	; 0xa0
 8000f98:	05db      	lsls	r3, r3, #23
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 ffff 	bl	8001fa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fa2:	0021      	movs	r1, r4
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2202      	movs	r2, #2
 8000fae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2202      	movs	r2, #2
 8000fba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	187a      	adds	r2, r7, r1
 8000fc4:	23a0      	movs	r3, #160	; 0xa0
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	0011      	movs	r1, r2
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 ffe8 	bl	8001fa0 <HAL_GPIO_Init>
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b00d      	add	sp, #52	; 0x34
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	40013000 	.word	0x40013000
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40003800 	.word	0x40003800

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <HAL_MspInit+0x44>)
 8000fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_MspInit+0x44>)
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_MspInit+0x44>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_MspInit+0x44>)
 8001004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_MspInit+0x44>)
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	0549      	lsls	r1, r1, #21
 800100c:	430a      	orrs	r2, r1
 800100e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_MspInit+0x44>)
 8001012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	055b      	lsls	r3, r3, #21
 8001018:	4013      	ands	r3, r2
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	40021000 	.word	0x40021000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001050:	f000 fa34 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	; 0x50
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800106a:	2334      	movs	r3, #52	; 0x34
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	0018      	movs	r0, r3
 8001070:	231c      	movs	r3, #28
 8001072:	001a      	movs	r2, r3
 8001074:	2100      	movs	r1, #0
 8001076:	f003 fe4b 	bl	8004d10 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800107a:	003b      	movs	r3, r7
 800107c:	0018      	movs	r0, r3
 800107e:	2334      	movs	r3, #52	; 0x34
 8001080:	001a      	movs	r2, r3
 8001082:	2100      	movs	r1, #0
 8001084:	f003 fe44 	bl	8004d10 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001088:	4b38      	ldr	r3, [pc, #224]	; (800116c <MX_TIM16_Init+0x108>)
 800108a:	4a39      	ldr	r2, [pc, #228]	; (8001170 <MX_TIM16_Init+0x10c>)
 800108c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 300-1;
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <MX_TIM16_Init+0x108>)
 8001090:	222c      	movs	r2, #44	; 0x2c
 8001092:	32ff      	adds	r2, #255	; 0xff
 8001094:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b35      	ldr	r3, [pc, #212]	; (800116c <MX_TIM16_Init+0x108>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 800109c:	4b33      	ldr	r3, [pc, #204]	; (800116c <MX_TIM16_Init+0x108>)
 800109e:	4a35      	ldr	r2, [pc, #212]	; (8001174 <MX_TIM16_Init+0x110>)
 80010a0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <MX_TIM16_Init+0x108>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80010a8:	4b30      	ldr	r3, [pc, #192]	; (800116c <MX_TIM16_Init+0x108>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <MX_TIM16_Init+0x108>)
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <MX_TIM16_Init+0x108>)
 80010b6:	0018      	movs	r0, r3
 80010b8:	f002 faae 	bl	8003618 <HAL_TIM_Base_Init>
 80010bc:	1e03      	subs	r3, r0, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80010c0:	f7ff fe75 	bl	8000dae <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80010c4:	4b29      	ldr	r3, [pc, #164]	; (800116c <MX_TIM16_Init+0x108>)
 80010c6:	0018      	movs	r0, r3
 80010c8:	f002 fafe 	bl	80036c8 <HAL_TIM_PWM_Init>
 80010cc:	1e03      	subs	r3, r0, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80010d0:	f7ff fe6d 	bl	8000dae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d4:	2134      	movs	r1, #52	; 0x34
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2260      	movs	r2, #96	; 0x60
 80010da:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2200      	movs	r2, #0
 80010e0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001100:	1879      	adds	r1, r7, r1
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_TIM16_Init+0x108>)
 8001104:	2200      	movs	r2, #0
 8001106:	0018      	movs	r0, r3
 8001108:	f002 fc16 	bl	8003938 <HAL_TIM_PWM_ConfigChannel>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001110:	f7ff fe4d 	bl	8000dae <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001114:	003b      	movs	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800111a:	003b      	movs	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001120:	003b      	movs	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001126:	003b      	movs	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800112c:	003b      	movs	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001132:	003b      	movs	r3, r7
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	0192      	lsls	r2, r2, #6
 8001138:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800113a:	003b      	movs	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001140:	003b      	movs	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001146:	003a      	movs	r2, r7
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_TIM16_Init+0x108>)
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f003 f82d 	bl	80041ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d001      	beq.n	800115a <MX_TIM16_Init+0xf6>
  {
    Error_Handler();
 8001156:	f7ff fe2a 	bl	8000dae <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <MX_TIM16_Init+0x108>)
 800115c:	0018      	movs	r0, r3
 800115e:	f000 f82b 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b014      	add	sp, #80	; 0x50
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	20000154 	.word	0x20000154
 8001170:	40014400 	.word	0x40014400
 8001174:	000003e7 	.word	0x000003e7

08001178 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <HAL_TIM_Base_MspInit+0x38>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10d      	bne.n	80011a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_TIM_Base_MspInit+0x3c>)
 800118c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	0289      	lsls	r1, r1, #10
 8001194:	430a      	orrs	r2, r1
 8001196:	641a      	str	r2, [r3, #64]	; 0x40
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_TIM_Base_MspInit+0x3c>)
 800119a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	029b      	lsls	r3, r3, #10
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b004      	add	sp, #16
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	40014400 	.word	0x40014400
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	240c      	movs	r4, #12
 80011c2:	193b      	adds	r3, r7, r4
 80011c4:	0018      	movs	r0, r3
 80011c6:	2314      	movs	r3, #20
 80011c8:	001a      	movs	r2, r3
 80011ca:	2100      	movs	r1, #0
 80011cc:	f003 fda0 	bl	8004d10 <memset>
  if(timHandle->Instance==TIM16)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <HAL_TIM_MspPostInit+0x70>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d122      	bne.n	8001220 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_TIM_MspPostInit+0x74>)
 80011dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_TIM_MspPostInit+0x74>)
 80011e0:	2102      	movs	r1, #2
 80011e2:	430a      	orrs	r2, r1
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_TIM_MspPostInit+0x74>)
 80011e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ea:	2202      	movs	r2, #2
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BL_Pin;
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	0052      	lsls	r2, r2, #1
 80011f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	0021      	movs	r1, r4
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	2202      	movs	r2, #2
 8001200:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2202      	movs	r2, #2
 8001212:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BL_GPIO_Port, &GPIO_InitStruct);
 8001214:	187b      	adds	r3, r7, r1
 8001216:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_TIM_MspPostInit+0x78>)
 8001218:	0019      	movs	r1, r3
 800121a:	0010      	movs	r0, r2
 800121c:	f000 fec0 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b009      	add	sp, #36	; 0x24
 8001226:	bd90      	pop	{r4, r7, pc}
 8001228:	40014400 	.word	0x40014400
 800122c:	40021000 	.word	0x40021000
 8001230:	50000400 	.word	0x50000400

08001234 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001238:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 800123a:	4a24      	ldr	r2, [pc, #144]	; (80012cc <MX_USART1_UART_Init+0x98>)
 800123c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 8001240:	22e1      	movs	r2, #225	; 0xe1
 8001242:	0252      	lsls	r2, r2, #9
 8001244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 8001278:	2200      	movs	r2, #0
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 800127e:	0018      	movs	r0, r3
 8001280:	f003 f830 	bl	80042e4 <HAL_HalfDuplex_Init>
 8001284:	1e03      	subs	r3, r0, #0
 8001286:	d001      	beq.n	800128c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001288:	f7ff fd91 	bl	8000dae <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 800128e:	2100      	movs	r1, #0
 8001290:	0018      	movs	r0, r3
 8001292:	f003 fc5d 	bl	8004b50 <HAL_UARTEx_SetTxFifoThreshold>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d001      	beq.n	800129e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800129a:	f7ff fd88 	bl	8000dae <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 80012a0:	2100      	movs	r1, #0
 80012a2:	0018      	movs	r0, r3
 80012a4:	f003 fc94 	bl	8004bd0 <HAL_UARTEx_SetRxFifoThreshold>
 80012a8:	1e03      	subs	r3, r0, #0
 80012aa:	d001      	beq.n	80012b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012ac:	f7ff fd7f 	bl	8000dae <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <MX_USART1_UART_Init+0x94>)
 80012b2:	0018      	movs	r0, r3
 80012b4:	f003 fc12 	bl	8004adc <HAL_UARTEx_DisableFifoMode>
 80012b8:	1e03      	subs	r3, r0, #0
 80012ba:	d001      	beq.n	80012c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012bc:	f7ff fd77 	bl	8000dae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012c0:	46c0      	nop			; (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	200001a0 	.word	0x200001a0
 80012cc:	40013800 	.word	0x40013800

080012d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b091      	sub	sp, #68	; 0x44
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	232c      	movs	r3, #44	; 0x2c
 80012da:	18fb      	adds	r3, r7, r3
 80012dc:	0018      	movs	r0, r3
 80012de:	2314      	movs	r3, #20
 80012e0:	001a      	movs	r2, r3
 80012e2:	2100      	movs	r1, #0
 80012e4:	f003 fd14 	bl	8004d10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e8:	2414      	movs	r4, #20
 80012ea:	193b      	adds	r3, r7, r4
 80012ec:	0018      	movs	r0, r3
 80012ee:	2318      	movs	r3, #24
 80012f0:	001a      	movs	r2, r3
 80012f2:	2100      	movs	r1, #0
 80012f4:	f003 fd0c 	bl	8004d10 <memset>
  if(uartHandle->Instance==USART1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a22      	ldr	r2, [pc, #136]	; (8001388 <HAL_UART_MspInit+0xb8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d13d      	bne.n	800137e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001302:	193b      	adds	r3, r7, r4
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001308:	193b      	adds	r3, r7, r4
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130e:	193b      	adds	r3, r7, r4
 8001310:	0018      	movs	r0, r3
 8001312:	f001 fccd 	bl	8002cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001316:	1e03      	subs	r3, r0, #0
 8001318:	d001      	beq.n	800131e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800131a:	f7ff fd48 	bl	8000dae <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800131e:	4b1b      	ldr	r3, [pc, #108]	; (800138c <HAL_UART_MspInit+0xbc>)
 8001320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_UART_MspInit+0xbc>)
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	01c9      	lsls	r1, r1, #7
 8001328:	430a      	orrs	r2, r1
 800132a:	641a      	str	r2, [r3, #64]	; 0x40
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_UART_MspInit+0xbc>)
 800132e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	01db      	lsls	r3, r3, #7
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_UART_MspInit+0xbc>)
 800133c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_UART_MspInit+0xbc>)
 8001340:	2102      	movs	r1, #2
 8001342:	430a      	orrs	r2, r1
 8001344:	635a      	str	r2, [r3, #52]	; 0x34
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_UART_MspInit+0xbc>)
 8001348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001352:	212c      	movs	r1, #44	; 0x2c
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2240      	movs	r2, #64	; 0x40
 8001358:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2212      	movs	r2, #18
 800135e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2201      	movs	r2, #1
 8001364:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	187b      	adds	r3, r7, r1
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800136c:	187b      	adds	r3, r7, r1
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	187b      	adds	r3, r7, r1
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <HAL_UART_MspInit+0xc0>)
 8001376:	0019      	movs	r1, r3
 8001378:	0010      	movs	r0, r2
 800137a:	f000 fe11 	bl	8001fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b011      	add	sp, #68	; 0x44
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	40013800 	.word	0x40013800
 800138c:	40021000 	.word	0x40021000
 8001390:	50000400 	.word	0x50000400

08001394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001396:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001398:	f7ff fe5f 	bl	800105a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800139e:	490d      	ldr	r1, [pc, #52]	; (80013d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <LoopForever+0xe>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b4:	4c0a      	ldr	r4, [pc, #40]	; (80013e0 <LoopForever+0x16>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013c2:	f003 fcad 	bl	8004d20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013c6:	f7ff fc95 	bl	8000cf4 <main>

080013ca <LoopForever>:

LoopForever:
  b LoopForever
 80013ca:	e7fe      	b.n	80013ca <LoopForever>
  ldr   r0, =_estack
 80013cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013d8:	08004e64 	.word	0x08004e64
  ldr r2, =_sbss
 80013dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013e0:	20000238 	.word	0x20000238

080013e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC1_IRQHandler>
	...

080013e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_Init+0x3c>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_Init+0x3c>)
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	0049      	lsls	r1, r1, #1
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001402:	2003      	movs	r0, #3
 8001404:	f000 f810 	bl	8001428 <HAL_InitTick>
 8001408:	1e03      	subs	r3, r0, #0
 800140a:	d003      	beq.n	8001414 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800140c:	1dfb      	adds	r3, r7, #7
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	e001      	b.n	8001418 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001414:	f7ff fde6 	bl	8000fe4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001418:	1dfb      	adds	r3, r7, #7
 800141a:	781b      	ldrb	r3, [r3, #0]
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40022000 	.word	0x40022000

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001430:	230f      	movs	r3, #15
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <HAL_InitTick+0x88>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d02b      	beq.n	8001498 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <HAL_InitTick+0x8c>)
 8001442:	681c      	ldr	r4, [r3, #0]
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <HAL_InitTick+0x88>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	0019      	movs	r1, r3
 800144a:	23fa      	movs	r3, #250	; 0xfa
 800144c:	0098      	lsls	r0, r3, #2
 800144e:	f7fe fe57 	bl	8000100 <__udivsi3>
 8001452:	0003      	movs	r3, r0
 8001454:	0019      	movs	r1, r3
 8001456:	0020      	movs	r0, r4
 8001458:	f7fe fe52 	bl	8000100 <__udivsi3>
 800145c:	0003      	movs	r3, r0
 800145e:	0018      	movs	r0, r3
 8001460:	f000 fd91 	bl	8001f86 <HAL_SYSTICK_Config>
 8001464:	1e03      	subs	r3, r0, #0
 8001466:	d112      	bne.n	800148e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d80a      	bhi.n	8001484 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	2301      	movs	r3, #1
 8001472:	425b      	negs	r3, r3
 8001474:	2200      	movs	r2, #0
 8001476:	0018      	movs	r0, r3
 8001478:	f000 fd70 	bl	8001f5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_InitTick+0x90>)
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e00d      	b.n	80014a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001484:	230f      	movs	r3, #15
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e008      	b.n	80014a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800148e:	230f      	movs	r3, #15
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e003      	b.n	80014a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001498:	230f      	movs	r3, #15
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80014a0:	230f      	movs	r3, #15
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	781b      	ldrb	r3, [r3, #0]
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b005      	add	sp, #20
 80014ac:	bd90      	pop	{r4, r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	20000008 	.word	0x20000008
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_IncTick+0x1c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	001a      	movs	r2, r3
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_IncTick+0x20>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	18d2      	adds	r2, r2, r3
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_IncTick+0x20>)
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	20000008 	.word	0x20000008
 80014dc:	20000234 	.word	0x20000234

080014e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <HAL_GetTick+0x10>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	20000234 	.word	0x20000234

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff fff0 	bl	80014e0 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3301      	adds	r3, #1
 800150c:	d005      	beq.n	800151a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_Delay+0x44>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	001a      	movs	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	189b      	adds	r3, r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	f7ff ffe0 	bl	80014e0 <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f7      	bhi.n	800151c <HAL_Delay+0x28>
  {
  }
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	b004      	add	sp, #16
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	20000008 	.word	0x20000008

0800153c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800154c:	401a      	ands	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	601a      	str	r2, [r3, #0]
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	fe3fffff 	.word	0xfe3fffff

08001564 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	23e0      	movs	r3, #224	; 0xe0
 8001572:	045b      	lsls	r3, r3, #17
 8001574:	4013      	ands	r3, r2
}
 8001576:	0018      	movs	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}

0800157e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	2104      	movs	r1, #4
 8001592:	400a      	ands	r2, r1
 8001594:	2107      	movs	r1, #7
 8001596:	4091      	lsls	r1, r2
 8001598:	000a      	movs	r2, r1
 800159a:	43d2      	mvns	r2, r2
 800159c:	401a      	ands	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	2104      	movs	r1, #4
 80015a2:	400b      	ands	r3, r1
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4099      	lsls	r1, r3
 80015a8:	000b      	movs	r3, r1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b004      	add	sp, #16
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	2104      	movs	r1, #4
 80015ca:	400a      	ands	r2, r1
 80015cc:	2107      	movs	r1, #7
 80015ce:	4091      	lsls	r1, r2
 80015d0:	000a      	movs	r2, r1
 80015d2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	2104      	movs	r1, #4
 80015d8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80015da:	40da      	lsrs	r2, r3
 80015dc:	0013      	movs	r3, r2
}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	211f      	movs	r1, #31
 80015fa:	400a      	ands	r2, r1
 80015fc:	210f      	movs	r1, #15
 80015fe:	4091      	lsls	r1, r2
 8001600:	000a      	movs	r2, r1
 8001602:	43d2      	mvns	r2, r2
 8001604:	401a      	ands	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	0e9b      	lsrs	r3, r3, #26
 800160a:	210f      	movs	r1, #15
 800160c:	4019      	ands	r1, r3
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	201f      	movs	r0, #31
 8001612:	4003      	ands	r3, r0
 8001614:	4099      	lsls	r1, r3
 8001616:	000b      	movs	r3, r1
 8001618:	431a      	orrs	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	b004      	add	sp, #16
 8001624:	bd80      	pop	{r7, pc}

08001626 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	035b      	lsls	r3, r3, #13
 8001638:	0b5b      	lsrs	r3, r3, #13
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	b002      	add	sp, #8
 8001646:	bd80      	pop	{r7, pc}

08001648 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	0352      	lsls	r2, r2, #13
 800165a:	0b52      	lsrs	r2, r2, #13
 800165c:	43d2      	mvns	r2, r2
 800165e:	401a      	ands	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}

0800166c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	0212      	lsls	r2, r2, #8
 8001680:	43d2      	mvns	r2, r2
 8001682:	401a      	ands	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	400b      	ands	r3, r1
 800168c:	4904      	ldr	r1, [pc, #16]	; (80016a0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800168e:	400b      	ands	r3, r1
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b004      	add	sp, #16
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	07ffff00 	.word	0x07ffff00

080016a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	0552      	lsls	r2, r2, #21
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b002      	add	sp, #8
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	6fffffe8 	.word	0x6fffffe8

080016cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	055b      	lsls	r3, r3, #21
 80016dc:	401a      	ands	r2, r3
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	055b      	lsls	r3, r3, #21
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d101      	bne.n	80016ea <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2201      	movs	r2, #1
 8001702:	4013      	ands	r3, r2
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <LL_ADC_IsEnabled+0x18>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <LL_ADC_IsEnabled+0x1a>
 800170c:	2300      	movs	r3, #0
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b002      	add	sp, #8
 8001714:	bd80      	pop	{r7, pc}

08001716 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2204      	movs	r2, #4
 8001724:	4013      	ands	r3, r2
 8001726:	2b04      	cmp	r3, #4
 8001728:	d101      	bne.n	800172e <LL_ADC_REG_IsConversionOngoing+0x18>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800172e:	2300      	movs	r3, #0
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b002      	add	sp, #8
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	231f      	movs	r3, #31
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e17f      	b.n	8001a5e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10a      	bne.n	800177c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	0018      	movs	r0, r3
 800176a:	f7fe feab 	bl	80004c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2254      	movs	r2, #84	; 0x54
 8001778:	2100      	movs	r1, #0
 800177a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff ffa3 	bl	80016cc <LL_ADC_IsInternalRegulatorEnabled>
 8001786:	1e03      	subs	r3, r0, #0
 8001788:	d115      	bne.n	80017b6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	0018      	movs	r0, r3
 8001790:	f7ff ff88 	bl	80016a4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001794:	4bb4      	ldr	r3, [pc, #720]	; (8001a68 <HAL_ADC_Init+0x330>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	49b4      	ldr	r1, [pc, #720]	; (8001a6c <HAL_ADC_Init+0x334>)
 800179a:	0018      	movs	r0, r3
 800179c:	f7fe fcb0 	bl	8000100 <__udivsi3>
 80017a0:	0003      	movs	r3, r0
 80017a2:	3301      	adds	r3, #1
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017a8:	e002      	b.n	80017b0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f9      	bne.n	80017aa <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7ff ff86 	bl	80016cc <LL_ADC_IsInternalRegulatorEnabled>
 80017c0:	1e03      	subs	r3, r0, #0
 80017c2:	d10f      	bne.n	80017e4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	2210      	movs	r2, #16
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	2201      	movs	r2, #1
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017dc:	231f      	movs	r3, #31
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff ff94 	bl	8001716 <LL_ADC_REG_IsConversionOngoing>
 80017ee:	0003      	movs	r3, r0
 80017f0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	2210      	movs	r2, #16
 80017f8:	4013      	ands	r3, r2
 80017fa:	d000      	beq.n	80017fe <HAL_ADC_Init+0xc6>
 80017fc:	e122      	b.n	8001a44 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d000      	beq.n	8001806 <HAL_ADC_Init+0xce>
 8001804:	e11e      	b.n	8001a44 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	4a99      	ldr	r2, [pc, #612]	; (8001a70 <HAL_ADC_Init+0x338>)
 800180c:	4013      	ands	r3, r2
 800180e:	2202      	movs	r2, #2
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff ff6a 	bl	80016f4 <LL_ADC_IsEnabled>
 8001820:	1e03      	subs	r3, r0, #0
 8001822:	d000      	beq.n	8001826 <HAL_ADC_Init+0xee>
 8001824:	e0ad      	b.n	8001982 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7e1b      	ldrb	r3, [r3, #24]
 800182e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001830:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7e5b      	ldrb	r3, [r3, #25]
 8001836:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001838:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7e9b      	ldrb	r3, [r3, #26]
 800183e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001840:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <HAL_ADC_Init+0x118>
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	015b      	lsls	r3, r3, #5
 800184e:	e000      	b.n	8001852 <HAL_ADC_Init+0x11a>
 8001850:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001852:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001858:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	2b00      	cmp	r3, #0
 8001860:	da04      	bge.n	800186c <HAL_ADC_Init+0x134>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	e001      	b.n	8001870 <HAL_ADC_Init+0x138>
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001870:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	212c      	movs	r1, #44	; 0x2c
 8001876:	5c5b      	ldrb	r3, [r3, r1]
 8001878:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800187a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2220      	movs	r2, #32
 8001886:	5c9b      	ldrb	r3, [r3, r2]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d115      	bne.n	80018b8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	7e9b      	ldrb	r3, [r3, #26]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	0252      	lsls	r2, r2, #9
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	e00b      	b.n	80018b8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	2220      	movs	r2, #32
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b0:	2201      	movs	r2, #1
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00a      	beq.n	80018d6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c4:	23e0      	movs	r3, #224	; 0xe0
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80018ce:	4313      	orrs	r3, r2
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4a65      	ldr	r2, [pc, #404]	; (8001a74 <HAL_ADC_Init+0x33c>)
 80018de:	4013      	ands	r3, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	0f9b      	lsrs	r3, r3, #30
 80018f2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018f8:	4313      	orrs	r3, r2
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	223c      	movs	r2, #60	; 0x3c
 8001904:	5c9b      	ldrb	r3, [r3, r2]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d111      	bne.n	800192e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	0f9b      	lsrs	r3, r3, #30
 8001910:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001916:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 800191c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001922:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	4313      	orrs	r3, r2
 8001928:	2201      	movs	r2, #1
 800192a:	4313      	orrs	r3, r2
 800192c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	4a50      	ldr	r2, [pc, #320]	; (8001a78 <HAL_ADC_Init+0x340>)
 8001936:	4013      	ands	r3, r2
 8001938:	0019      	movs	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	430a      	orrs	r2, r1
 8001942:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	23c0      	movs	r3, #192	; 0xc0
 800194a:	061b      	lsls	r3, r3, #24
 800194c:	429a      	cmp	r2, r3
 800194e:	d018      	beq.n	8001982 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	05db      	lsls	r3, r3, #23
 8001958:	429a      	cmp	r2, r3
 800195a:	d012      	beq.n	8001982 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	061b      	lsls	r3, r3, #24
 8001964:	429a      	cmp	r2, r3
 8001966:	d00c      	beq.n	8001982 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001968:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <HAL_ADC_Init+0x344>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a44      	ldr	r2, [pc, #272]	; (8001a80 <HAL_ADC_Init+0x348>)
 800196e:	4013      	ands	r3, r2
 8001970:	0019      	movs	r1, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	23f0      	movs	r3, #240	; 0xf0
 8001978:	039b      	lsls	r3, r3, #14
 800197a:	401a      	ands	r2, r3
 800197c:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <HAL_ADC_Init+0x344>)
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198a:	001a      	movs	r2, r3
 800198c:	2100      	movs	r1, #0
 800198e:	f7ff fdf6 	bl	800157e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199a:	493a      	ldr	r1, [pc, #232]	; (8001a84 <HAL_ADC_Init+0x34c>)
 800199c:	001a      	movs	r2, r3
 800199e:	f7ff fdee 	bl	800157e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2110      	movs	r1, #16
 80019b6:	4249      	negs	r1, r1
 80019b8:	430a      	orrs	r2, r1
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
 80019bc:	e018      	b.n	80019f0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	039b      	lsls	r3, r3, #14
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d112      	bne.n	80019f0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	221c      	movs	r2, #28
 80019da:	4013      	ands	r3, r2
 80019dc:	2210      	movs	r2, #16
 80019de:	4252      	negs	r2, r2
 80019e0:	409a      	lsls	r2, r3
 80019e2:	0011      	movs	r1, r2
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2100      	movs	r1, #0
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7ff fdde 	bl	80015b8 <LL_ADC_GetSamplingTimeCommonChannels>
 80019fc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d10b      	bne.n	8001a1e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	2203      	movs	r2, #3
 8001a12:	4393      	bics	r3, r2
 8001a14:	2201      	movs	r2, #1
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a1c:	e01c      	b.n	8001a58 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	2212      	movs	r2, #18
 8001a24:	4393      	bics	r3, r2
 8001a26:	2210      	movs	r2, #16
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a32:	2201      	movs	r2, #1
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001a3a:	231f      	movs	r3, #31
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a42:	e009      	b.n	8001a58 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	2210      	movs	r2, #16
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a50:	231f      	movs	r3, #31
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001a58:	231f      	movs	r3, #31
 8001a5a:	18fb      	adds	r3, r7, r3
 8001a5c:	781b      	ldrb	r3, [r3, #0]
}
 8001a5e:	0018      	movs	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b008      	add	sp, #32
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	00030d40 	.word	0x00030d40
 8001a70:	fffffefd 	.word	0xfffffefd
 8001a74:	ffde0201 	.word	0xffde0201
 8001a78:	1ffffc02 	.word	0x1ffffc02
 8001a7c:	40012708 	.word	0x40012708
 8001a80:	ffc3ffff 	.word	0xffc3ffff
 8001a84:	07ffff04 	.word	0x07ffff04

08001a88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a92:	2317      	movs	r3, #23
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2254      	movs	r2, #84	; 0x54
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x24>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e1c0      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x3a6>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2254      	movs	r2, #84	; 0x54
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7ff fe2c 	bl	8001716 <LL_ADC_REG_IsConversionOngoing>
 8001abe:	1e03      	subs	r3, r0, #0
 8001ac0:	d000      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0x3c>
 8001ac2:	e1a3      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d100      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x46>
 8001acc:	e143      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691a      	ldr	r2, [r3, #16]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d004      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ade:	4ac1      	ldr	r2, [pc, #772]	; (8001de4 <HAL_ADC_ConfigChannel+0x35c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d108      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	0019      	movs	r1, r3
 8001aee:	0010      	movs	r0, r2
 8001af0:	f7ff fd99 	bl	8001626 <LL_ADC_REG_SetSequencerChAdd>
 8001af4:	e0c9      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	211f      	movs	r1, #31
 8001b00:	400b      	ands	r3, r1
 8001b02:	210f      	movs	r1, #15
 8001b04:	4099      	lsls	r1, r3
 8001b06:	000b      	movs	r3, r1
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	035b      	lsls	r3, r3, #13
 8001b14:	0b5b      	lsrs	r3, r3, #13
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x9c>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	0e9b      	lsrs	r3, r3, #26
 8001b1e:	221f      	movs	r2, #31
 8001b20:	4013      	ands	r3, r2
 8001b22:	e098      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d000      	beq.n	8001b30 <HAL_ADC_ConfigChannel+0xa8>
 8001b2e:	e091      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x1cc>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2202      	movs	r2, #2
 8001b36:	4013      	ands	r3, r2
 8001b38:	d000      	beq.n	8001b3c <HAL_ADC_ConfigChannel+0xb4>
 8001b3a:	e089      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x1c8>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2204      	movs	r2, #4
 8001b42:	4013      	ands	r3, r2
 8001b44:	d000      	beq.n	8001b48 <HAL_ADC_ConfigChannel+0xc0>
 8001b46:	e081      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x1c4>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d000      	beq.n	8001b54 <HAL_ADC_ConfigChannel+0xcc>
 8001b52:	e079      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x1c0>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2210      	movs	r2, #16
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d000      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0xd8>
 8001b5e:	e071      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x1bc>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2220      	movs	r2, #32
 8001b66:	4013      	ands	r3, r2
 8001b68:	d000      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0xe4>
 8001b6a:	e069      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x1b8>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2240      	movs	r2, #64	; 0x40
 8001b72:	4013      	ands	r3, r2
 8001b74:	d000      	beq.n	8001b78 <HAL_ADC_ConfigChannel+0xf0>
 8001b76:	e061      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x1b4>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d000      	beq.n	8001b84 <HAL_ADC_ConfigChannel+0xfc>
 8001b82:	e059      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x1b0>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d151      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1ac>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d149      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1a8>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d141      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1a4>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d139      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x1a0>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	015b      	lsls	r3, r3, #5
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d131      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x19c>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	019b      	lsls	r3, r3, #6
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d129      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x198>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	01db      	lsls	r3, r3, #7
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d121      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x194>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	4013      	ands	r3, r2
 8001be2:	d119      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x190>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	025b      	lsls	r3, r3, #9
 8001bec:	4013      	ands	r3, r2
 8001bee:	d111      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x18c>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	029b      	lsls	r3, r3, #10
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d109      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x188>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	02db      	lsls	r3, r3, #11
 8001c04:	4013      	ands	r3, r2
 8001c06:	d001      	beq.n	8001c0c <HAL_ADC_ConfigChannel+0x184>
 8001c08:	2312      	movs	r3, #18
 8001c0a:	e024      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e022      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c10:	2311      	movs	r3, #17
 8001c12:	e020      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c14:	2310      	movs	r3, #16
 8001c16:	e01e      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c18:	230f      	movs	r3, #15
 8001c1a:	e01c      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c1c:	230e      	movs	r3, #14
 8001c1e:	e01a      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c20:	230d      	movs	r3, #13
 8001c22:	e018      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c24:	230c      	movs	r3, #12
 8001c26:	e016      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c28:	230b      	movs	r3, #11
 8001c2a:	e014      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c2c:	230a      	movs	r3, #10
 8001c2e:	e012      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c30:	2309      	movs	r3, #9
 8001c32:	e010      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c34:	2308      	movs	r3, #8
 8001c36:	e00e      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c38:	2307      	movs	r3, #7
 8001c3a:	e00c      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c3c:	2306      	movs	r3, #6
 8001c3e:	e00a      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c40:	2305      	movs	r3, #5
 8001c42:	e008      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c44:	2304      	movs	r3, #4
 8001c46:	e006      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e004      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e002      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c54:	2300      	movs	r3, #0
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	6852      	ldr	r2, [r2, #4]
 8001c5a:	201f      	movs	r0, #31
 8001c5c:	4002      	ands	r2, r0
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	000a      	movs	r2, r1
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d808      	bhi.n	8001c8a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	001a      	movs	r2, r3
 8001c86:	f7ff fcae 	bl	80015e6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6819      	ldr	r1, [r3, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	001a      	movs	r2, r3
 8001c98:	f7ff fce8 	bl	800166c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db00      	blt.n	8001ca6 <HAL_ADC_ConfigChannel+0x21e>
 8001ca4:	e0bc      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ca6:	4b50      	ldr	r3, [pc, #320]	; (8001de8 <HAL_ADC_ConfigChannel+0x360>)
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7ff fc5b 	bl	8001564 <LL_ADC_GetCommonPathInternalCh>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a4d      	ldr	r2, [pc, #308]	; (8001dec <HAL_ADC_ConfigChannel+0x364>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d122      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	041b      	lsls	r3, r3, #16
 8001cc2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cc4:	d11d      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2280      	movs	r2, #128	; 0x80
 8001cca:	0412      	lsls	r2, r2, #16
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	4a46      	ldr	r2, [pc, #280]	; (8001de8 <HAL_ADC_ConfigChannel+0x360>)
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	0010      	movs	r0, r2
 8001cd4:	f7ff fc32 	bl	800153c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cd8:	4b45      	ldr	r3, [pc, #276]	; (8001df0 <HAL_ADC_ConfigChannel+0x368>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4945      	ldr	r1, [pc, #276]	; (8001df4 <HAL_ADC_ConfigChannel+0x36c>)
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f7fe fa0e 	bl	8000100 <__udivsi3>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	0013      	movs	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	189b      	adds	r3, r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cf2:	e002      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f9      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d00:	e08e      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a3c      	ldr	r2, [pc, #240]	; (8001df8 <HAL_ADC_ConfigChannel+0x370>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d10e      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	045b      	lsls	r3, r3, #17
 8001d12:	4013      	ands	r3, r2
 8001d14:	d109      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	0452      	lsls	r2, r2, #17
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	4a32      	ldr	r2, [pc, #200]	; (8001de8 <HAL_ADC_ConfigChannel+0x360>)
 8001d20:	0019      	movs	r1, r3
 8001d22:	0010      	movs	r0, r2
 8001d24:	f7ff fc0a 	bl	800153c <LL_ADC_SetCommonPathInternalCh>
 8001d28:	e07a      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a33      	ldr	r2, [pc, #204]	; (8001dfc <HAL_ADC_ConfigChannel+0x374>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d000      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x2ae>
 8001d34:	e074      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	03db      	lsls	r3, r3, #15
 8001d3c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d3e:	d000      	beq.n	8001d42 <HAL_ADC_ConfigChannel+0x2ba>
 8001d40:	e06e      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2280      	movs	r2, #128	; 0x80
 8001d46:	03d2      	lsls	r2, r2, #15
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	4a27      	ldr	r2, [pc, #156]	; (8001de8 <HAL_ADC_ConfigChannel+0x360>)
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	0010      	movs	r0, r2
 8001d50:	f7ff fbf4 	bl	800153c <LL_ADC_SetCommonPathInternalCh>
 8001d54:	e064      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	061b      	lsls	r3, r3, #24
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d004      	beq.n	8001d6c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d66:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_ADC_ConfigChannel+0x35c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d107      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0019      	movs	r1, r3
 8001d76:	0010      	movs	r0, r2
 8001d78:	f7ff fc66 	bl	8001648 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	da4d      	bge.n	8001e20 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_ADC_ConfigChannel+0x360>)
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7ff fbec 	bl	8001564 <LL_ADC_GetCommonPathInternalCh>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a15      	ldr	r2, [pc, #84]	; (8001dec <HAL_ADC_ConfigChannel+0x364>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d108      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <HAL_ADC_ConfigChannel+0x378>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_ADC_ConfigChannel+0x360>)
 8001da2:	0019      	movs	r1, r3
 8001da4:	0010      	movs	r0, r2
 8001da6:	f7ff fbc9 	bl	800153c <LL_ADC_SetCommonPathInternalCh>
 8001daa:	e039      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <HAL_ADC_ConfigChannel+0x370>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d108      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <HAL_ADC_ConfigChannel+0x37c>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <HAL_ADC_ConfigChannel+0x360>)
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	0010      	movs	r0, r2
 8001dc2:	f7ff fbbb 	bl	800153c <LL_ADC_SetCommonPathInternalCh>
 8001dc6:	e02b      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <HAL_ADC_ConfigChannel+0x374>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d126      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <HAL_ADC_ConfigChannel+0x380>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <HAL_ADC_ConfigChannel+0x360>)
 8001dda:	0019      	movs	r1, r3
 8001ddc:	0010      	movs	r0, r2
 8001dde:	f7ff fbad 	bl	800153c <LL_ADC_SetCommonPathInternalCh>
 8001de2:	e01d      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x398>
 8001de4:	80000004 	.word	0x80000004
 8001de8:	40012708 	.word	0x40012708
 8001dec:	b0001000 	.word	0xb0001000
 8001df0:	20000000 	.word	0x20000000
 8001df4:	00030d40 	.word	0x00030d40
 8001df8:	b8004000 	.word	0xb8004000
 8001dfc:	b4002000 	.word	0xb4002000
 8001e00:	ff7fffff 	.word	0xff7fffff
 8001e04:	feffffff 	.word	0xfeffffff
 8001e08:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	2220      	movs	r2, #32
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e18:	2317      	movs	r3, #23
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2254      	movs	r2, #84	; 0x54
 8001e24:	2100      	movs	r1, #0
 8001e26:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001e28:	2317      	movs	r3, #23
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	781b      	ldrb	r3, [r3, #0]
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b006      	add	sp, #24
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	0002      	movs	r2, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e4c:	d828      	bhi.n	8001ea0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e4e:	4a2f      	ldr	r2, [pc, #188]	; (8001f0c <__NVIC_SetPriority+0xd4>)
 8001e50:	1dfb      	adds	r3, r7, #7
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	33c0      	adds	r3, #192	; 0xc0
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	589b      	ldr	r3, [r3, r2]
 8001e5e:	1dfa      	adds	r2, r7, #7
 8001e60:	7812      	ldrb	r2, [r2, #0]
 8001e62:	0011      	movs	r1, r2
 8001e64:	2203      	movs	r2, #3
 8001e66:	400a      	ands	r2, r1
 8001e68:	00d2      	lsls	r2, r2, #3
 8001e6a:	21ff      	movs	r1, #255	; 0xff
 8001e6c:	4091      	lsls	r1, r2
 8001e6e:	000a      	movs	r2, r1
 8001e70:	43d2      	mvns	r2, r2
 8001e72:	401a      	ands	r2, r3
 8001e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	019b      	lsls	r3, r3, #6
 8001e7a:	22ff      	movs	r2, #255	; 0xff
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	1dfb      	adds	r3, r7, #7
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	0018      	movs	r0, r3
 8001e84:	2303      	movs	r3, #3
 8001e86:	4003      	ands	r3, r0
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e8c:	481f      	ldr	r0, [pc, #124]	; (8001f0c <__NVIC_SetPriority+0xd4>)
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	b25b      	sxtb	r3, r3
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	430a      	orrs	r2, r1
 8001e98:	33c0      	adds	r3, #192	; 0xc0
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e9e:	e031      	b.n	8001f04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ea0:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <__NVIC_SetPriority+0xd8>)
 8001ea2:	1dfb      	adds	r3, r7, #7
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	400b      	ands	r3, r1
 8001eac:	3b08      	subs	r3, #8
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3306      	adds	r3, #6
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	18d3      	adds	r3, r2, r3
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	1dfa      	adds	r2, r7, #7
 8001ebc:	7812      	ldrb	r2, [r2, #0]
 8001ebe:	0011      	movs	r1, r2
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	00d2      	lsls	r2, r2, #3
 8001ec6:	21ff      	movs	r1, #255	; 0xff
 8001ec8:	4091      	lsls	r1, r2
 8001eca:	000a      	movs	r2, r1
 8001ecc:	43d2      	mvns	r2, r2
 8001ece:	401a      	ands	r2, r3
 8001ed0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	019b      	lsls	r3, r3, #6
 8001ed6:	22ff      	movs	r2, #255	; 0xff
 8001ed8:	401a      	ands	r2, r3
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	0018      	movs	r0, r3
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	4003      	ands	r3, r0
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ee8:	4809      	ldr	r0, [pc, #36]	; (8001f10 <__NVIC_SetPriority+0xd8>)
 8001eea:	1dfb      	adds	r3, r7, #7
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	001c      	movs	r4, r3
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	4023      	ands	r3, r4
 8001ef4:	3b08      	subs	r3, #8
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	3306      	adds	r3, #6
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	18c3      	adds	r3, r0, r3
 8001f00:	3304      	adds	r3, #4
 8001f02:	601a      	str	r2, [r3, #0]
}
 8001f04:	46c0      	nop			; (mov r8, r8)
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b003      	add	sp, #12
 8001f0a:	bd90      	pop	{r4, r7, pc}
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	1e5a      	subs	r2, r3, #1
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	045b      	lsls	r3, r3, #17
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d301      	bcc.n	8001f2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e010      	b.n	8001f4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <SysTick_Config+0x44>)
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	3a01      	subs	r2, #1
 8001f32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f34:	2301      	movs	r3, #1
 8001f36:	425b      	negs	r3, r3
 8001f38:	2103      	movs	r1, #3
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f7ff ff7c 	bl	8001e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <SysTick_Config+0x44>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <SysTick_Config+0x44>)
 8001f48:	2207      	movs	r2, #7
 8001f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b002      	add	sp, #8
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	e000e010 	.word	0xe000e010

08001f5c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	210f      	movs	r1, #15
 8001f68:	187b      	adds	r3, r7, r1
 8001f6a:	1c02      	adds	r2, r0, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	b25b      	sxtb	r3, r3
 8001f76:	0011      	movs	r1, r2
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f7ff ff5d 	bl	8001e38 <__NVIC_SetPriority>
}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b004      	add	sp, #16
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7ff ffbf 	bl	8001f14 <SysTick_Config>
 8001f96:	0003      	movs	r3, r0
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fae:	e147      	b.n	8002240 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4091      	lsls	r1, r2
 8001fba:	000a      	movs	r2, r1
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d100      	bne.n	8001fc8 <HAL_GPIO_Init+0x28>
 8001fc6:	e138      	b.n	800223a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2203      	movs	r2, #3
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d005      	beq.n	8001fe0 <HAL_GPIO_Init+0x40>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2203      	movs	r2, #3
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d130      	bne.n	8002042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	409a      	lsls	r2, r3
 8001fee:	0013      	movs	r3, r2
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	409a      	lsls	r2, r3
 8002002:	0013      	movs	r3, r2
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002016:	2201      	movs	r2, #1
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	409a      	lsls	r2, r3
 800201c:	0013      	movs	r3, r2
 800201e:	43da      	mvns	r2, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	2201      	movs	r2, #1
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
 8002034:	0013      	movs	r3, r2
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2203      	movs	r2, #3
 8002048:	4013      	ands	r3, r2
 800204a:	2b03      	cmp	r3, #3
 800204c:	d017      	beq.n	800207e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	2203      	movs	r2, #3
 800205a:	409a      	lsls	r2, r3
 800205c:	0013      	movs	r3, r2
 800205e:	43da      	mvns	r2, r3
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	409a      	lsls	r2, r3
 8002070:	0013      	movs	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2203      	movs	r2, #3
 8002084:	4013      	ands	r3, r2
 8002086:	2b02      	cmp	r3, #2
 8002088:	d123      	bne.n	80020d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	08da      	lsrs	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3208      	adds	r2, #8
 8002092:	0092      	lsls	r2, r2, #2
 8002094:	58d3      	ldr	r3, [r2, r3]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2207      	movs	r2, #7
 800209c:	4013      	ands	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	409a      	lsls	r2, r3
 80020a4:	0013      	movs	r3, r2
 80020a6:	43da      	mvns	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2107      	movs	r1, #7
 80020b6:	400b      	ands	r3, r1
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	409a      	lsls	r2, r3
 80020bc:	0013      	movs	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	0092      	lsls	r2, r2, #2
 80020ce:	6939      	ldr	r1, [r7, #16]
 80020d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	2203      	movs	r2, #3
 80020de:	409a      	lsls	r2, r3
 80020e0:	0013      	movs	r3, r2
 80020e2:	43da      	mvns	r2, r3
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2203      	movs	r2, #3
 80020f0:	401a      	ands	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	409a      	lsls	r2, r3
 80020f8:	0013      	movs	r3, r2
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	23c0      	movs	r3, #192	; 0xc0
 800210c:	029b      	lsls	r3, r3, #10
 800210e:	4013      	ands	r3, r2
 8002110:	d100      	bne.n	8002114 <HAL_GPIO_Init+0x174>
 8002112:	e092      	b.n	800223a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002114:	4a50      	ldr	r2, [pc, #320]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3318      	adds	r3, #24
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	589b      	ldr	r3, [r3, r2]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2203      	movs	r2, #3
 8002126:	4013      	ands	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	220f      	movs	r2, #15
 800212c:	409a      	lsls	r2, r3
 800212e:	0013      	movs	r3, r2
 8002130:	43da      	mvns	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	23a0      	movs	r3, #160	; 0xa0
 800213c:	05db      	lsls	r3, r3, #23
 800213e:	429a      	cmp	r2, r3
 8002140:	d013      	beq.n	800216a <HAL_GPIO_Init+0x1ca>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a45      	ldr	r2, [pc, #276]	; (800225c <HAL_GPIO_Init+0x2bc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00d      	beq.n	8002166 <HAL_GPIO_Init+0x1c6>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a44      	ldr	r2, [pc, #272]	; (8002260 <HAL_GPIO_Init+0x2c0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <HAL_GPIO_Init+0x1c2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a43      	ldr	r2, [pc, #268]	; (8002264 <HAL_GPIO_Init+0x2c4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d101      	bne.n	800215e <HAL_GPIO_Init+0x1be>
 800215a:	2303      	movs	r3, #3
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x1cc>
 800215e:	2305      	movs	r3, #5
 8002160:	e004      	b.n	800216c <HAL_GPIO_Init+0x1cc>
 8002162:	2302      	movs	r3, #2
 8002164:	e002      	b.n	800216c <HAL_GPIO_Init+0x1cc>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x1cc>
 800216a:	2300      	movs	r3, #0
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	2103      	movs	r1, #3
 8002170:	400a      	ands	r2, r1
 8002172:	00d2      	lsls	r2, r2, #3
 8002174:	4093      	lsls	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800217c:	4936      	ldr	r1, [pc, #216]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3318      	adds	r3, #24
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800218a:	4b33      	ldr	r3, [pc, #204]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	43da      	mvns	r2, r3
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	035b      	lsls	r3, r3, #13
 80021a2:	4013      	ands	r3, r2
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43da      	mvns	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	039b      	lsls	r3, r3, #14
 80021cc:	4013      	ands	r3, r2
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021de:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 80021e0:	2384      	movs	r3, #132	; 0x84
 80021e2:	58d3      	ldr	r3, [r2, r3]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	43da      	mvns	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	029b      	lsls	r3, r3, #10
 80021f8:	4013      	ands	r3, r2
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002204:	4914      	ldr	r1, [pc, #80]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 8002206:	2284      	movs	r2, #132	; 0x84
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800220c:	4a12      	ldr	r2, [pc, #72]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	58d3      	ldr	r3, [r2, r3]
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	43da      	mvns	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	025b      	lsls	r3, r3, #9
 8002226:	4013      	ands	r3, r2
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002232:	4909      	ldr	r1, [pc, #36]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 8002234:	2280      	movs	r2, #128	; 0x80
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3301      	adds	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	40da      	lsrs	r2, r3
 8002248:	1e13      	subs	r3, r2, #0
 800224a:	d000      	beq.n	800224e <HAL_GPIO_Init+0x2ae>
 800224c:	e6b0      	b.n	8001fb0 <HAL_GPIO_Init+0x10>
  }
}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b006      	add	sp, #24
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021800 	.word	0x40021800
 800225c:	50000400 	.word	0x50000400
 8002260:	50000800 	.word	0x50000800
 8002264:	50000c00 	.word	0x50000c00

08002268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	0008      	movs	r0, r1
 8002272:	0011      	movs	r1, r2
 8002274:	1cbb      	adds	r3, r7, #2
 8002276:	1c02      	adds	r2, r0, #0
 8002278:	801a      	strh	r2, [r3, #0]
 800227a:	1c7b      	adds	r3, r7, #1
 800227c:	1c0a      	adds	r2, r1, #0
 800227e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002280:	1c7b      	adds	r3, r7, #1
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002288:	1cbb      	adds	r3, r7, #2
 800228a:	881a      	ldrh	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002290:	e003      	b.n	800229a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002292:	1cbb      	adds	r3, r7, #2
 8002294:	881a      	ldrh	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b002      	add	sp, #8
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d11f      	bne.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	0013      	movs	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	189b      	adds	r3, r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4912      	ldr	r1, [pc, #72]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80022d6:	0018      	movs	r0, r3
 80022d8:	f7fd ff12 	bl	8000100 <__udivsi3>
 80022dc:	0003      	movs	r3, r0
 80022de:	3301      	adds	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022e2:	e008      	b.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e001      	b.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e009      	b.n	800230a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	401a      	ands	r2, r3
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	429a      	cmp	r2, r3
 8002306:	d0ed      	beq.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	b004      	add	sp, #16
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	40007000 	.word	0x40007000
 8002318:	fffff9ff 	.word	0xfffff9ff
 800231c:	20000000 	.word	0x20000000
 8002320:	000f4240 	.word	0x000f4240

08002324 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <LL_RCC_GetAPB1Prescaler+0x14>)
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	23e0      	movs	r3, #224	; 0xe0
 800232e:	01db      	lsls	r3, r3, #7
 8002330:	4013      	ands	r3, r2
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000

0800233c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e2f3      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2201      	movs	r2, #1
 8002354:	4013      	ands	r3, r2
 8002356:	d100      	bne.n	800235a <HAL_RCC_OscConfig+0x1e>
 8002358:	e07c      	b.n	8002454 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235a:	4bc3      	ldr	r3, [pc, #780]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2238      	movs	r2, #56	; 0x38
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002364:	4bc0      	ldr	r3, [pc, #768]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2203      	movs	r2, #3
 800236a:	4013      	ands	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b10      	cmp	r3, #16
 8002372:	d102      	bne.n	800237a <HAL_RCC_OscConfig+0x3e>
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d002      	beq.n	8002380 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d10b      	bne.n	8002398 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	4bb9      	ldr	r3, [pc, #740]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	029b      	lsls	r3, r3, #10
 8002388:	4013      	ands	r3, r2
 800238a:	d062      	beq.n	8002452 <HAL_RCC_OscConfig+0x116>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d15e      	bne.n	8002452 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e2ce      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	025b      	lsls	r3, r3, #9
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_OscConfig+0x78>
 80023a4:	4bb0      	ldr	r3, [pc, #704]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4baf      	ldr	r3, [pc, #700]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	0249      	lsls	r1, r1, #9
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e020      	b.n	80023f6 <HAL_RCC_OscConfig+0xba>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	23a0      	movs	r3, #160	; 0xa0
 80023ba:	02db      	lsls	r3, r3, #11
 80023bc:	429a      	cmp	r2, r3
 80023be:	d10e      	bne.n	80023de <HAL_RCC_OscConfig+0xa2>
 80023c0:	4ba9      	ldr	r3, [pc, #676]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4ba8      	ldr	r3, [pc, #672]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80023c6:	2180      	movs	r1, #128	; 0x80
 80023c8:	02c9      	lsls	r1, r1, #11
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	4ba6      	ldr	r3, [pc, #664]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4ba5      	ldr	r3, [pc, #660]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80023d4:	2180      	movs	r1, #128	; 0x80
 80023d6:	0249      	lsls	r1, r1, #9
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e00b      	b.n	80023f6 <HAL_RCC_OscConfig+0xba>
 80023de:	4ba2      	ldr	r3, [pc, #648]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4ba1      	ldr	r3, [pc, #644]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80023e4:	49a1      	ldr	r1, [pc, #644]	; (800266c <HAL_RCC_OscConfig+0x330>)
 80023e6:	400a      	ands	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	4b9f      	ldr	r3, [pc, #636]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4b9e      	ldr	r3, [pc, #632]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80023f0:	499f      	ldr	r1, [pc, #636]	; (8002670 <HAL_RCC_OscConfig+0x334>)
 80023f2:	400a      	ands	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d014      	beq.n	8002428 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7ff f86f 	bl	80014e0 <HAL_GetTick>
 8002402:	0003      	movs	r3, r0
 8002404:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002408:	f7ff f86a 	bl	80014e0 <HAL_GetTick>
 800240c:	0002      	movs	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	; 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e28d      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800241a:	4b93      	ldr	r3, [pc, #588]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	029b      	lsls	r3, r3, #10
 8002422:	4013      	ands	r3, r2
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0xcc>
 8002426:	e015      	b.n	8002454 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7ff f85a 	bl	80014e0 <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002432:	f7ff f855 	bl	80014e0 <HAL_GetTick>
 8002436:	0002      	movs	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	; 0x64
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e278      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002444:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	029b      	lsls	r3, r3, #10
 800244c:	4013      	ands	r3, r2
 800244e:	d1f0      	bne.n	8002432 <HAL_RCC_OscConfig+0xf6>
 8002450:	e000      	b.n	8002454 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002452:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2202      	movs	r2, #2
 800245a:	4013      	ands	r3, r2
 800245c:	d100      	bne.n	8002460 <HAL_RCC_OscConfig+0x124>
 800245e:	e099      	b.n	8002594 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002460:	4b81      	ldr	r3, [pc, #516]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2238      	movs	r2, #56	; 0x38
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800246a:	4b7f      	ldr	r3, [pc, #508]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2203      	movs	r2, #3
 8002470:	4013      	ands	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2b10      	cmp	r3, #16
 8002478:	d102      	bne.n	8002480 <HAL_RCC_OscConfig+0x144>
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d002      	beq.n	8002486 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d135      	bne.n	80024f2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002486:	4b78      	ldr	r3, [pc, #480]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4013      	ands	r3, r2
 8002490:	d005      	beq.n	800249e <HAL_RCC_OscConfig+0x162>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e24b      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249e:	4b72      	ldr	r3, [pc, #456]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4a74      	ldr	r2, [pc, #464]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	021a      	lsls	r2, r3, #8
 80024ae:	4b6e      	ldr	r3, [pc, #440]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d112      	bne.n	80024e0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024ba:	4b6b      	ldr	r3, [pc, #428]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6e      	ldr	r2, [pc, #440]	; (8002678 <HAL_RCC_OscConfig+0x33c>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	0019      	movs	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	4b67      	ldr	r3, [pc, #412]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80024ce:	4b66      	ldr	r3, [pc, #408]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0adb      	lsrs	r3, r3, #11
 80024d4:	2207      	movs	r2, #7
 80024d6:	4013      	ands	r3, r2
 80024d8:	4a68      	ldr	r2, [pc, #416]	; (800267c <HAL_RCC_OscConfig+0x340>)
 80024da:	40da      	lsrs	r2, r3
 80024dc:	4b68      	ldr	r3, [pc, #416]	; (8002680 <HAL_RCC_OscConfig+0x344>)
 80024de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024e0:	4b68      	ldr	r3, [pc, #416]	; (8002684 <HAL_RCC_OscConfig+0x348>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7fe ff9f 	bl	8001428 <HAL_InitTick>
 80024ea:	1e03      	subs	r3, r0, #0
 80024ec:	d051      	beq.n	8002592 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e221      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d030      	beq.n	800255c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024fa:	4b5b      	ldr	r3, [pc, #364]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a5e      	ldr	r2, [pc, #376]	; (8002678 <HAL_RCC_OscConfig+0x33c>)
 8002500:	4013      	ands	r3, r2
 8002502:	0019      	movs	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	4b57      	ldr	r3, [pc, #348]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800250e:	4b56      	ldr	r3, [pc, #344]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b55      	ldr	r3, [pc, #340]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	0049      	lsls	r1, r1, #1
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7fe ffe0 	bl	80014e0 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002526:	f7fe ffdb 	bl	80014e0 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e1fe      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002538:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4013      	ands	r3, r2
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4b48      	ldr	r3, [pc, #288]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <HAL_RCC_OscConfig+0x338>)
 800254a:	4013      	ands	r3, r2
 800254c:	0019      	movs	r1, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	021a      	lsls	r2, r3, #8
 8002554:	4b44      	ldr	r3, [pc, #272]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	e01b      	b.n	8002594 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800255c:	4b42      	ldr	r3, [pc, #264]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002562:	4949      	ldr	r1, [pc, #292]	; (8002688 <HAL_RCC_OscConfig+0x34c>)
 8002564:	400a      	ands	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe ffba 	bl	80014e0 <HAL_GetTick>
 800256c:	0003      	movs	r3, r0
 800256e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002572:	f7fe ffb5 	bl	80014e0 <HAL_GetTick>
 8002576:	0002      	movs	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e1d8      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002584:	4b38      	ldr	r3, [pc, #224]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4013      	ands	r3, r2
 800258e:	d1f0      	bne.n	8002572 <HAL_RCC_OscConfig+0x236>
 8002590:	e000      	b.n	8002594 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002592:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2208      	movs	r2, #8
 800259a:	4013      	ands	r3, r2
 800259c:	d047      	beq.n	800262e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800259e:	4b32      	ldr	r3, [pc, #200]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2238      	movs	r2, #56	; 0x38
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b18      	cmp	r3, #24
 80025a8:	d10a      	bne.n	80025c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80025aa:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80025ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ae:	2202      	movs	r2, #2
 80025b0:	4013      	ands	r3, r2
 80025b2:	d03c      	beq.n	800262e <HAL_RCC_OscConfig+0x2f2>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d138      	bne.n	800262e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e1ba      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d019      	beq.n	80025fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80025c8:	4b27      	ldr	r3, [pc, #156]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80025ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80025ce:	2101      	movs	r1, #1
 80025d0:	430a      	orrs	r2, r1
 80025d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe ff84 	bl	80014e0 <HAL_GetTick>
 80025d8:	0003      	movs	r3, r0
 80025da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025de:	f7fe ff7f 	bl	80014e0 <HAL_GetTick>
 80025e2:	0002      	movs	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e1a2      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80025f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f4:	2202      	movs	r2, #2
 80025f6:	4013      	ands	r3, r2
 80025f8:	d0f1      	beq.n	80025de <HAL_RCC_OscConfig+0x2a2>
 80025fa:	e018      	b.n	800262e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 80025fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002602:	2101      	movs	r1, #1
 8002604:	438a      	bics	r2, r1
 8002606:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe ff6a 	bl	80014e0 <HAL_GetTick>
 800260c:	0003      	movs	r3, r0
 800260e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002612:	f7fe ff65 	bl	80014e0 <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e188      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002624:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002628:	2202      	movs	r2, #2
 800262a:	4013      	ands	r3, r2
 800262c:	d1f1      	bne.n	8002612 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2204      	movs	r2, #4
 8002634:	4013      	ands	r3, r2
 8002636:	d100      	bne.n	800263a <HAL_RCC_OscConfig+0x2fe>
 8002638:	e0c6      	b.n	80027c8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263a:	231f      	movs	r3, #31
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2238      	movs	r2, #56	; 0x38
 8002648:	4013      	ands	r3, r2
 800264a:	2b20      	cmp	r3, #32
 800264c:	d11e      	bne.n	800268c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_OscConfig+0x32c>)
 8002650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002652:	2202      	movs	r2, #2
 8002654:	4013      	ands	r3, r2
 8002656:	d100      	bne.n	800265a <HAL_RCC_OscConfig+0x31e>
 8002658:	e0b6      	b.n	80027c8 <HAL_RCC_OscConfig+0x48c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d000      	beq.n	8002664 <HAL_RCC_OscConfig+0x328>
 8002662:	e0b1      	b.n	80027c8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e166      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
 8002668:	40021000 	.word	0x40021000
 800266c:	fffeffff 	.word	0xfffeffff
 8002670:	fffbffff 	.word	0xfffbffff
 8002674:	ffff80ff 	.word	0xffff80ff
 8002678:	ffffc7ff 	.word	0xffffc7ff
 800267c:	00f42400 	.word	0x00f42400
 8002680:	20000000 	.word	0x20000000
 8002684:	20000004 	.word	0x20000004
 8002688:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800268c:	4bac      	ldr	r3, [pc, #688]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 800268e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	055b      	lsls	r3, r3, #21
 8002694:	4013      	ands	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_RCC_OscConfig+0x360>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_RCC_OscConfig+0x362>
 800269c:	2300      	movs	r3, #0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d011      	beq.n	80026c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	4ba7      	ldr	r3, [pc, #668]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 80026a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026a6:	4ba6      	ldr	r3, [pc, #664]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	0549      	lsls	r1, r1, #21
 80026ac:	430a      	orrs	r2, r1
 80026ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80026b0:	4ba3      	ldr	r3, [pc, #652]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 80026b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	055b      	lsls	r3, r3, #21
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80026be:	231f      	movs	r3, #31
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c6:	4b9f      	ldr	r3, [pc, #636]	; (8002944 <HAL_RCC_OscConfig+0x608>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4013      	ands	r3, r2
 80026d0:	d11a      	bne.n	8002708 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d2:	4b9c      	ldr	r3, [pc, #624]	; (8002944 <HAL_RCC_OscConfig+0x608>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b9b      	ldr	r3, [pc, #620]	; (8002944 <HAL_RCC_OscConfig+0x608>)
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	0049      	lsls	r1, r1, #1
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fefe 	bl	80014e0 <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ea:	f7fe fef9 	bl	80014e0 <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e11c      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fc:	4b91      	ldr	r3, [pc, #580]	; (8002944 <HAL_RCC_OscConfig+0x608>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4013      	ands	r3, r2
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x3e2>
 8002710:	4b8b      	ldr	r3, [pc, #556]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002712:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002714:	4b8a      	ldr	r3, [pc, #552]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002716:	2101      	movs	r1, #1
 8002718:	430a      	orrs	r2, r1
 800271a:	65da      	str	r2, [r3, #92]	; 0x5c
 800271c:	e01c      	b.n	8002758 <HAL_RCC_OscConfig+0x41c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b05      	cmp	r3, #5
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x404>
 8002726:	4b86      	ldr	r3, [pc, #536]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002728:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800272a:	4b85      	ldr	r3, [pc, #532]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 800272c:	2104      	movs	r1, #4
 800272e:	430a      	orrs	r2, r1
 8002730:	65da      	str	r2, [r3, #92]	; 0x5c
 8002732:	4b83      	ldr	r3, [pc, #524]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002734:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002736:	4b82      	ldr	r3, [pc, #520]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002738:	2101      	movs	r1, #1
 800273a:	430a      	orrs	r2, r1
 800273c:	65da      	str	r2, [r3, #92]	; 0x5c
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0x41c>
 8002740:	4b7f      	ldr	r3, [pc, #508]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002742:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002744:	4b7e      	ldr	r3, [pc, #504]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002746:	2101      	movs	r1, #1
 8002748:	438a      	bics	r2, r1
 800274a:	65da      	str	r2, [r3, #92]	; 0x5c
 800274c:	4b7c      	ldr	r3, [pc, #496]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 800274e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002750:	4b7b      	ldr	r3, [pc, #492]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002752:	2104      	movs	r1, #4
 8002754:	438a      	bics	r2, r1
 8002756:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d014      	beq.n	800278a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe febe 	bl	80014e0 <HAL_GetTick>
 8002764:	0003      	movs	r3, r0
 8002766:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002768:	e009      	b.n	800277e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe feb9 	bl	80014e0 <HAL_GetTick>
 800276e:	0002      	movs	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	4a74      	ldr	r2, [pc, #464]	; (8002948 <HAL_RCC_OscConfig+0x60c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0db      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277e:	4b70      	ldr	r3, [pc, #448]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	2202      	movs	r2, #2
 8002784:	4013      	ands	r3, r2
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x42e>
 8002788:	e013      	b.n	80027b2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7fe fea9 	bl	80014e0 <HAL_GetTick>
 800278e:	0003      	movs	r3, r0
 8002790:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002792:	e009      	b.n	80027a8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7fe fea4 	bl	80014e0 <HAL_GetTick>
 8002798:	0002      	movs	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	4a6a      	ldr	r2, [pc, #424]	; (8002948 <HAL_RCC_OscConfig+0x60c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e0c6      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027a8:	4b65      	ldr	r3, [pc, #404]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	2202      	movs	r2, #2
 80027ae:	4013      	ands	r3, r2
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027b2:	231f      	movs	r3, #31
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027bc:	4b60      	ldr	r3, [pc, #384]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 80027be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027c0:	4b5f      	ldr	r3, [pc, #380]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 80027c2:	4962      	ldr	r1, [pc, #392]	; (800294c <HAL_RCC_OscConfig+0x610>)
 80027c4:	400a      	ands	r2, r1
 80027c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d100      	bne.n	80027d2 <HAL_RCC_OscConfig+0x496>
 80027d0:	e0b0      	b.n	8002934 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d2:	4b5b      	ldr	r3, [pc, #364]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2238      	movs	r2, #56	; 0x38
 80027d8:	4013      	ands	r3, r2
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d100      	bne.n	80027e0 <HAL_RCC_OscConfig+0x4a4>
 80027de:	e078      	b.n	80028d2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d153      	bne.n	8002890 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e8:	4b55      	ldr	r3, [pc, #340]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b54      	ldr	r3, [pc, #336]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 80027ee:	4958      	ldr	r1, [pc, #352]	; (8002950 <HAL_RCC_OscConfig+0x614>)
 80027f0:	400a      	ands	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fe74 	bl	80014e0 <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe fe6f 	bl	80014e0 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e092      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002810:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	049b      	lsls	r3, r3, #18
 8002818:	4013      	ands	r3, r2
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800281c:	4b48      	ldr	r3, [pc, #288]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a4c      	ldr	r2, [pc, #304]	; (8002954 <HAL_RCC_OscConfig+0x618>)
 8002822:	4013      	ands	r3, r2
 8002824:	0019      	movs	r1, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1a      	ldr	r2, [r3, #32]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	431a      	orrs	r2, r3
 8002844:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002846:	430a      	orrs	r2, r1
 8002848:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284a:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4b3c      	ldr	r3, [pc, #240]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	0449      	lsls	r1, r1, #17
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	0549      	lsls	r1, r1, #21
 8002862:	430a      	orrs	r2, r1
 8002864:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7fe fe3b 	bl	80014e0 <HAL_GetTick>
 800286a:	0003      	movs	r3, r0
 800286c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe fe36 	bl	80014e0 <HAL_GetTick>
 8002874:	0002      	movs	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e059      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002882:	4b2f      	ldr	r3, [pc, #188]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	049b      	lsls	r3, r3, #18
 800288a:	4013      	ands	r3, r2
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x534>
 800288e:	e051      	b.n	8002934 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 8002896:	492e      	ldr	r1, [pc, #184]	; (8002950 <HAL_RCC_OscConfig+0x614>)
 8002898:	400a      	ands	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fe20 	bl	80014e0 <HAL_GetTick>
 80028a0:	0003      	movs	r3, r0
 80028a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7fe fe1b 	bl	80014e0 <HAL_GetTick>
 80028aa:	0002      	movs	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e03e      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	049b      	lsls	r3, r3, #18
 80028c0:	4013      	ands	r3, r2
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80028c4:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 80028ca:	4923      	ldr	r1, [pc, #140]	; (8002958 <HAL_RCC_OscConfig+0x61c>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	e030      	b.n	8002934 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e02b      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_RCC_OscConfig+0x604>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2203      	movs	r2, #3
 80028e8:	401a      	ands	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d11e      	bne.n	8002930 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2270      	movs	r2, #112	; 0x70
 80028f6:	401a      	ands	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d117      	bne.n	8002930 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	23fe      	movs	r3, #254	; 0xfe
 8002904:	01db      	lsls	r3, r3, #7
 8002906:	401a      	ands	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d10e      	bne.n	8002930 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	23f8      	movs	r3, #248	; 0xf8
 8002916:	039b      	lsls	r3, r3, #14
 8002918:	401a      	ands	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d106      	bne.n	8002930 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	0f5b      	lsrs	r3, r3, #29
 8002926:	075a      	lsls	r2, r3, #29
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b008      	add	sp, #32
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	40021000 	.word	0x40021000
 8002944:	40007000 	.word	0x40007000
 8002948:	00001388 	.word	0x00001388
 800294c:	efffffff 	.word	0xefffffff
 8002950:	feffffff 	.word	0xfeffffff
 8002954:	1fc1808c 	.word	0x1fc1808c
 8002958:	effefffc 	.word	0xeffefffc

0800295c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0e9      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b76      	ldr	r3, [pc, #472]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2207      	movs	r2, #7
 8002976:	4013      	ands	r3, r2
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d91e      	bls.n	80029bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b73      	ldr	r3, [pc, #460]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2207      	movs	r2, #7
 8002984:	4393      	bics	r3, r2
 8002986:	0019      	movs	r1, r3
 8002988:	4b70      	ldr	r3, [pc, #448]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002990:	f7fe fda6 	bl	80014e0 <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002998:	e009      	b.n	80029ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299a:	f7fe fda1 	bl	80014e0 <HAL_GetTick>
 800299e:	0002      	movs	r2, r0
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	4a6a      	ldr	r2, [pc, #424]	; (8002b50 <HAL_RCC_ClockConfig+0x1f4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e0ca      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029ae:	4b67      	ldr	r3, [pc, #412]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2207      	movs	r2, #7
 80029b4:	4013      	ands	r3, r2
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d1ee      	bne.n	800299a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	d015      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2204      	movs	r2, #4
 80029cc:	4013      	ands	r3, r2
 80029ce:	d006      	beq.n	80029de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80029d0:	4b60      	ldr	r3, [pc, #384]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	4b5f      	ldr	r3, [pc, #380]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 80029d6:	21e0      	movs	r1, #224	; 0xe0
 80029d8:	01c9      	lsls	r1, r1, #7
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029de:	4b5d      	ldr	r3, [pc, #372]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	4a5d      	ldr	r2, [pc, #372]	; (8002b58 <HAL_RCC_ClockConfig+0x1fc>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2201      	movs	r2, #1
 80029f8:	4013      	ands	r3, r2
 80029fa:	d057      	beq.n	8002aac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a04:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	029b      	lsls	r3, r3, #10
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d12b      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e097      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1c:	4b4d      	ldr	r3, [pc, #308]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	049b      	lsls	r3, r3, #18
 8002a24:	4013      	ands	r3, r2
 8002a26:	d11f      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e08b      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a34:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d113      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e07f      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a4c:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 8002a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a50:	2202      	movs	r2, #2
 8002a52:	4013      	ands	r3, r2
 8002a54:	d108      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e074      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a5a:	4b3e      	ldr	r3, [pc, #248]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	2202      	movs	r2, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e06d      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a68:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	4393      	bics	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7c:	f7fe fd30 	bl	80014e0 <HAL_GetTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a84:	e009      	b.n	8002a9a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a86:	f7fe fd2b 	bl	80014e0 <HAL_GetTick>
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	4a2f      	ldr	r2, [pc, #188]	; (8002b50 <HAL_RCC_ClockConfig+0x1f4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e054      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2238      	movs	r2, #56	; 0x38
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1ec      	bne.n	8002a86 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aac:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d21e      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2207      	movs	r2, #7
 8002ac0:	4393      	bics	r3, r2
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002acc:	f7fe fd08 	bl	80014e0 <HAL_GetTick>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ad4:	e009      	b.n	8002aea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad6:	f7fe fd03 	bl	80014e0 <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	4a1b      	ldr	r2, [pc, #108]	; (8002b50 <HAL_RCC_ClockConfig+0x1f4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e02c      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002aea:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_RCC_ClockConfig+0x1f0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2207      	movs	r2, #7
 8002af0:	4013      	ands	r3, r2
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1ee      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2204      	movs	r2, #4
 8002afe:	4013      	ands	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b02:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <HAL_RCC_ClockConfig+0x200>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 8002b12:	430a      	orrs	r2, r1
 8002b14:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b16:	f000 f829 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002b1a:	0001      	movs	r1, r0
 8002b1c:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	220f      	movs	r2, #15
 8002b24:	401a      	ands	r2, r3
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <HAL_RCC_ClockConfig+0x204>)
 8002b28:	0092      	lsls	r2, r2, #2
 8002b2a:	58d3      	ldr	r3, [r2, r3]
 8002b2c:	221f      	movs	r2, #31
 8002b2e:	4013      	ands	r3, r2
 8002b30:	000a      	movs	r2, r1
 8002b32:	40da      	lsrs	r2, r3
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_ClockConfig+0x208>)
 8002b36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCC_ClockConfig+0x20c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f7fe fc73 	bl	8001428 <HAL_InitTick>
 8002b42:	0003      	movs	r3, r0
}
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b004      	add	sp, #16
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	00001388 	.word	0x00001388
 8002b54:	40021000 	.word	0x40021000
 8002b58:	fffff0ff 	.word	0xfffff0ff
 8002b5c:	ffff8fff 	.word	0xffff8fff
 8002b60:	08004d80 	.word	0x08004d80
 8002b64:	20000000 	.word	0x20000000
 8002b68:	20000004 	.word	0x20000004

08002b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b72:	4b3c      	ldr	r3, [pc, #240]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2238      	movs	r2, #56	; 0x38
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d10f      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b7c:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0adb      	lsrs	r3, r3, #11
 8002b82:	2207      	movs	r2, #7
 8002b84:	4013      	ands	r3, r2
 8002b86:	2201      	movs	r2, #1
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	0013      	movs	r3, r2
 8002b8c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b8e:	6839      	ldr	r1, [r7, #0]
 8002b90:	4835      	ldr	r0, [pc, #212]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b92:	f7fd fab5 	bl	8000100 <__udivsi3>
 8002b96:	0003      	movs	r3, r0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	e05d      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b9c:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2238      	movs	r2, #56	; 0x38
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d102      	bne.n	8002bae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ba8:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x100>)
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	e054      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bae:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2238      	movs	r2, #56	; 0x38
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d138      	bne.n	8002c2c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002bba:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bc4:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	2207      	movs	r2, #7
 8002bcc:	4013      	ands	r3, r2
 8002bce:	3301      	adds	r3, #1
 8002bd0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d10d      	bne.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	4824      	ldr	r0, [pc, #144]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x100>)
 8002bdc:	f7fd fa90 	bl	8000100 <__udivsi3>
 8002be0:	0003      	movs	r3, r0
 8002be2:	0019      	movs	r1, r3
 8002be4:	4b1f      	ldr	r3, [pc, #124]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	0a1b      	lsrs	r3, r3, #8
 8002bea:	227f      	movs	r2, #127	; 0x7f
 8002bec:	4013      	ands	r3, r2
 8002bee:	434b      	muls	r3, r1
 8002bf0:	617b      	str	r3, [r7, #20]
        break;
 8002bf2:	e00d      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	481c      	ldr	r0, [pc, #112]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bf8:	f7fd fa82 	bl	8000100 <__udivsi3>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	0019      	movs	r1, r3
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	227f      	movs	r2, #127	; 0x7f
 8002c08:	4013      	ands	r3, r2
 8002c0a:	434b      	muls	r3, r1
 8002c0c:	617b      	str	r3, [r7, #20]
        break;
 8002c0e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0f5b      	lsrs	r3, r3, #29
 8002c16:	2207      	movs	r2, #7
 8002c18:	4013      	ands	r3, r2
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	6978      	ldr	r0, [r7, #20]
 8002c22:	f7fd fa6d 	bl	8000100 <__udivsi3>
 8002c26:	0003      	movs	r3, r0
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	e015      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2238      	movs	r2, #56	; 0x38
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d103      	bne.n	8002c40 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2238      	movs	r2, #56	; 0x38
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b18      	cmp	r3, #24
 8002c4a:	d103      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c4c:	23fa      	movs	r3, #250	; 0xfa
 8002c4e:	01db      	lsls	r3, r3, #7
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	e001      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c58:	693b      	ldr	r3, [r7, #16]
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b006      	add	sp, #24
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	40021000 	.word	0x40021000
 8002c68:	00f42400 	.word	0x00f42400
 8002c6c:	007a1200 	.word	0x007a1200

08002c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c74:	4b02      	ldr	r3, [pc, #8]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	20000000 	.word	0x20000000

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b5b0      	push	{r4, r5, r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c88:	f7ff fff2 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002c8c:	0004      	movs	r4, r0
 8002c8e:	f7ff fb49 	bl	8002324 <LL_RCC_GetAPB1Prescaler>
 8002c92:	0003      	movs	r3, r0
 8002c94:	0b1a      	lsrs	r2, r3, #12
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c98:	0092      	lsls	r2, r2, #2
 8002c9a:	58d3      	ldr	r3, [r2, r3]
 8002c9c:	221f      	movs	r2, #31
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	40dc      	lsrs	r4, r3
 8002ca2:	0023      	movs	r3, r4
}
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	08004dc0 	.word	0x08004dc0

08002cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002cb8:	2313      	movs	r3, #19
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cc0:	2312      	movs	r3, #18
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	029b      	lsls	r3, r3, #10
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d100      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002cd4:	e0a3      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd6:	2011      	movs	r0, #17
 8002cd8:	183b      	adds	r3, r7, r0
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cde:	4b7f      	ldr	r3, [pc, #508]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	055b      	lsls	r3, r3, #21
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d110      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cea:	4b7c      	ldr	r3, [pc, #496]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cee:	4b7b      	ldr	r3, [pc, #492]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	0549      	lsls	r1, r1, #21
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cf8:	4b78      	ldr	r3, [pc, #480]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	055b      	lsls	r3, r3, #21
 8002d00:	4013      	ands	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d06:	183b      	adds	r3, r7, r0
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d0c:	4b74      	ldr	r3, [pc, #464]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b73      	ldr	r3, [pc, #460]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d12:	2180      	movs	r1, #128	; 0x80
 8002d14:	0049      	lsls	r1, r1, #1
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d1a:	f7fe fbe1 	bl	80014e0 <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d22:	e00b      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7fe fbdc 	bl	80014e0 <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d904      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002d32:	2313      	movs	r3, #19
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	2203      	movs	r2, #3
 8002d38:	701a      	strb	r2, [r3, #0]
        break;
 8002d3a:	e005      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d3c:	4b68      	ldr	r3, [pc, #416]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4013      	ands	r3, r2
 8002d46:	d0ed      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002d48:	2313      	movs	r3, #19
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d154      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d52:	4b62      	ldr	r3, [pc, #392]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d56:	23c0      	movs	r3, #192	; 0xc0
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d019      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d014      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d6e:	4b5b      	ldr	r3, [pc, #364]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d72:	4a5c      	ldr	r2, [pc, #368]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d78:	4b58      	ldr	r3, [pc, #352]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d7c:	4b57      	ldr	r3, [pc, #348]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	0249      	lsls	r1, r1, #9
 8002d82:	430a      	orrs	r2, r1
 8002d84:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d86:	4b55      	ldr	r3, [pc, #340]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d8a:	4b54      	ldr	r3, [pc, #336]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d8c:	4956      	ldr	r1, [pc, #344]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d92:	4b52      	ldr	r3, [pc, #328]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d016      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe fb9e 	bl	80014e0 <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da8:	e00c      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe fb99 	bl	80014e0 <HAL_GetTick>
 8002dae:	0002      	movs	r2, r0
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	4a4d      	ldr	r2, [pc, #308]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d904      	bls.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002dba:	2313      	movs	r3, #19
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	701a      	strb	r2, [r3, #0]
            break;
 8002dc2:	e004      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc4:	4b45      	ldr	r3, [pc, #276]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	2202      	movs	r2, #2
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d0ed      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002dce:	2313      	movs	r3, #19
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd8:	4b40      	ldr	r3, [pc, #256]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ddc:	4a41      	ldr	r2, [pc, #260]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002de8:	430a      	orrs	r2, r1
 8002dea:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dec:	e00c      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dee:	2312      	movs	r3, #18
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	2213      	movs	r2, #19
 8002df4:	18ba      	adds	r2, r7, r2
 8002df6:	7812      	ldrb	r2, [r2, #0]
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e005      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfc:	2312      	movs	r3, #18
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	2213      	movs	r2, #19
 8002e02:	18ba      	adds	r2, r7, r2
 8002e04:	7812      	ldrb	r2, [r2, #0]
 8002e06:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e08:	2311      	movs	r3, #17
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d105      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e12:	4b32      	ldr	r3, [pc, #200]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e16:	4b31      	ldr	r3, [pc, #196]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e18:	4935      	ldr	r1, [pc, #212]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2201      	movs	r2, #1
 8002e24:	4013      	ands	r3, r2
 8002e26:	d009      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e28:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	4393      	bics	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	4b29      	ldr	r3, [pc, #164]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2220      	movs	r2, #32
 8002e42:	4013      	ands	r3, r2
 8002e44:	d009      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e46:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	4a2a      	ldr	r2, [pc, #168]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	4b21      	ldr	r3, [pc, #132]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e56:	430a      	orrs	r2, r1
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	01db      	lsls	r3, r3, #7
 8002e62:	4013      	ands	r3, r2
 8002e64:	d015      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	0899      	lsrs	r1, r3, #2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e74:	430a      	orrs	r2, r1
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	05db      	lsls	r3, r3, #23
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d106      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e8a:	2180      	movs	r1, #128	; 0x80
 8002e8c:	0249      	lsls	r1, r1, #9
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d016      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	01db      	lsls	r3, r3, #7
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ec4:	2180      	movs	r1, #128	; 0x80
 8002ec6:	0249      	lsls	r1, r1, #9
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ecc:	2312      	movs	r3, #18
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	781b      	ldrb	r3, [r3, #0]
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b006      	add	sp, #24
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	fffffcff 	.word	0xfffffcff
 8002ee8:	fffeffff 	.word	0xfffeffff
 8002eec:	00001388 	.word	0x00001388
 8002ef0:	efffffff 	.word	0xefffffff
 8002ef4:	ffffcfff 	.word	0xffffcfff
 8002ef8:	ffff3fff 	.word	0xffff3fff

08002efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e0a8      	b.n	8003060 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	2382      	movs	r3, #130	; 0x82
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d009      	beq.n	8002f36 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	61da      	str	r2, [r3, #28]
 8002f28:	e005      	b.n	8002f36 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	225d      	movs	r2, #93	; 0x5d
 8002f40:	5c9b      	ldrb	r3, [r3, r2]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	225c      	movs	r2, #92	; 0x5c
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7fd ffac 	bl	8000eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	225d      	movs	r2, #93	; 0x5d
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2140      	movs	r1, #64	; 0x40
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	23e0      	movs	r3, #224	; 0xe0
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d902      	bls.n	8002f82 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e002      	b.n	8002f88 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	015b      	lsls	r3, r3, #5
 8002f86:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	23f0      	movs	r3, #240	; 0xf0
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d008      	beq.n	8002fa6 <HAL_SPI_Init+0xaa>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	23e0      	movs	r3, #224	; 0xe0
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d002      	beq.n	8002fa6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	2382      	movs	r3, #130	; 0x82
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	401a      	ands	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6899      	ldr	r1, [r3, #8]
 8002fb4:	2384      	movs	r3, #132	; 0x84
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	400b      	ands	r3, r1
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	400b      	ands	r3, r1
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	2101      	movs	r1, #1
 8002fcc:	400b      	ands	r3, r1
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6999      	ldr	r1, [r3, #24]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	400b      	ands	r3, r1
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	2138      	movs	r1, #56	; 0x38
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	2180      	movs	r1, #128	; 0x80
 8002fec:	400b      	ands	r3, r1
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	0011      	movs	r1, r2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	019b      	lsls	r3, r3, #6
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	2204      	movs	r2, #4
 800300c:	401a      	ands	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	2110      	movs	r1, #16
 8003014:	400b      	ands	r3, r1
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	2108      	movs	r1, #8
 800301e:	400b      	ands	r3, r1
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68d9      	ldr	r1, [r3, #12]
 8003026:	23f0      	movs	r3, #240	; 0xf0
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	400b      	ands	r3, r1
 800302c:	431a      	orrs	r2, r3
 800302e:	0011      	movs	r1, r2
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	015b      	lsls	r3, r3, #5
 8003036:	401a      	ands	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4907      	ldr	r1, [pc, #28]	; (8003068 <HAL_SPI_Init+0x16c>)
 800304c:	400a      	ands	r2, r1
 800304e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	225d      	movs	r2, #93	; 0x5d
 800305a:	2101      	movs	r1, #1
 800305c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b004      	add	sp, #16
 8003066:	bd80      	pop	{r7, pc}
 8003068:	fffff7ff 	.word	0xfffff7ff

0800306c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	1dbb      	adds	r3, r7, #6
 800307a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800307c:	231f      	movs	r3, #31
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	225c      	movs	r2, #92	; 0x5c
 8003088:	5c9b      	ldrb	r3, [r3, r2]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_SPI_Transmit+0x26>
 800308e:	2302      	movs	r3, #2
 8003090:	e147      	b.n	8003322 <HAL_SPI_Transmit+0x2b6>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	225c      	movs	r2, #92	; 0x5c
 8003096:	2101      	movs	r1, #1
 8003098:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800309a:	f7fe fa21 	bl	80014e0 <HAL_GetTick>
 800309e:	0003      	movs	r3, r0
 80030a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80030a2:	2316      	movs	r3, #22
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	1dba      	adds	r2, r7, #6
 80030a8:	8812      	ldrh	r2, [r2, #0]
 80030aa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	225d      	movs	r2, #93	; 0x5d
 80030b0:	5c9b      	ldrb	r3, [r3, r2]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d004      	beq.n	80030c2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80030b8:	231f      	movs	r3, #31
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	2202      	movs	r2, #2
 80030be:	701a      	strb	r2, [r3, #0]
    goto error;
 80030c0:	e128      	b.n	8003314 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_SPI_Transmit+0x64>
 80030c8:	1dbb      	adds	r3, r7, #6
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80030d0:	231f      	movs	r3, #31
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80030d8:	e11c      	b.n	8003314 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	225d      	movs	r2, #93	; 0x5d
 80030de:	2103      	movs	r1, #3
 80030e0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1dba      	adds	r2, r7, #6
 80030f2:	8812      	ldrh	r2, [r2, #0]
 80030f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1dba      	adds	r2, r7, #6
 80030fa:	8812      	ldrh	r2, [r2, #0]
 80030fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2244      	movs	r2, #68	; 0x44
 8003108:	2100      	movs	r1, #0
 800310a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2246      	movs	r2, #70	; 0x46
 8003110:	2100      	movs	r1, #0
 8003112:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	429a      	cmp	r2, r3
 800312a:	d110      	bne.n	800314e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2140      	movs	r1, #64	; 0x40
 8003138:	438a      	bics	r2, r1
 800313a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2180      	movs	r1, #128	; 0x80
 8003148:	01c9      	lsls	r1, r1, #7
 800314a:	430a      	orrs	r2, r1
 800314c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2240      	movs	r2, #64	; 0x40
 8003156:	4013      	ands	r3, r2
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d007      	beq.n	800316c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2140      	movs	r1, #64	; 0x40
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	23e0      	movs	r3, #224	; 0xe0
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	429a      	cmp	r2, r3
 8003176:	d952      	bls.n	800321e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <HAL_SPI_Transmit+0x11e>
 8003180:	2316      	movs	r3, #22
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d143      	bne.n	8003212 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	881a      	ldrh	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	1c9a      	adds	r2, r3, #2
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031ae:	e030      	b.n	8003212 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2202      	movs	r2, #2
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d112      	bne.n	80031e4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	881a      	ldrh	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	1c9a      	adds	r2, r3, #2
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031e2:	e016      	b.n	8003212 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e4:	f7fe f97c 	bl	80014e0 <HAL_GetTick>
 80031e8:	0002      	movs	r2, r0
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d802      	bhi.n	80031fa <HAL_SPI_Transmit+0x18e>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	3301      	adds	r3, #1
 80031f8:	d102      	bne.n	8003200 <HAL_SPI_Transmit+0x194>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d108      	bne.n	8003212 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003200:	231f      	movs	r3, #31
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2203      	movs	r2, #3
 8003206:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	225d      	movs	r2, #93	; 0x5d
 800320c:	2101      	movs	r1, #1
 800320e:	5499      	strb	r1, [r3, r2]
          goto error;
 8003210:	e080      	b.n	8003314 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1c9      	bne.n	80031b0 <HAL_SPI_Transmit+0x144>
 800321c:	e053      	b.n	80032c6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <HAL_SPI_Transmit+0x1c4>
 8003226:	2316      	movs	r3, #22
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d145      	bne.n	80032bc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	7812      	ldrb	r2, [r2, #0]
 800323c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003256:	e031      	b.n	80032bc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2202      	movs	r2, #2
 8003260:	4013      	ands	r3, r2
 8003262:	2b02      	cmp	r3, #2
 8003264:	d113      	bne.n	800328e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	330c      	adds	r3, #12
 8003270:	7812      	ldrb	r2, [r2, #0]
 8003272:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800328c:	e016      	b.n	80032bc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800328e:	f7fe f927 	bl	80014e0 <HAL_GetTick>
 8003292:	0002      	movs	r2, r0
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d802      	bhi.n	80032a4 <HAL_SPI_Transmit+0x238>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	d102      	bne.n	80032aa <HAL_SPI_Transmit+0x23e>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d108      	bne.n	80032bc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80032aa:	231f      	movs	r3, #31
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	2203      	movs	r2, #3
 80032b0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	225d      	movs	r2, #93	; 0x5d
 80032b6:	2101      	movs	r1, #1
 80032b8:	5499      	strb	r1, [r3, r2]
          goto error;
 80032ba:	e02b      	b.n	8003314 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1c8      	bne.n	8003258 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	6839      	ldr	r1, [r7, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 f95d 	bl	800358c <SPI_EndRxTxTransaction>
 80032d2:	1e03      	subs	r3, r0, #0
 80032d4:	d002      	beq.n	80032dc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d004      	beq.n	800330c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003302:	231f      	movs	r3, #31
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	e003      	b.n	8003314 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	225d      	movs	r2, #93	; 0x5d
 8003310:	2101      	movs	r1, #1
 8003312:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	225c      	movs	r2, #92	; 0x5c
 8003318:	2100      	movs	r1, #0
 800331a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800331c:	231f      	movs	r3, #31
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	781b      	ldrb	r3, [r3, #0]
}
 8003322:	0018      	movs	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	b008      	add	sp, #32
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	1dfb      	adds	r3, r7, #7
 800333a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800333c:	f7fe f8d0 	bl	80014e0 <HAL_GetTick>
 8003340:	0002      	movs	r2, r0
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	18d3      	adds	r3, r2, r3
 800334a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800334c:	f7fe f8c8 	bl	80014e0 <HAL_GetTick>
 8003350:	0003      	movs	r3, r0
 8003352:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003354:	4b3a      	ldr	r3, [pc, #232]	; (8003440 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	015b      	lsls	r3, r3, #5
 800335a:	0d1b      	lsrs	r3, r3, #20
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	4353      	muls	r3, r2
 8003360:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003362:	e058      	b.n	8003416 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	d055      	beq.n	8003416 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800336a:	f7fe f8b9 	bl	80014e0 <HAL_GetTick>
 800336e:	0002      	movs	r2, r0
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	429a      	cmp	r2, r3
 8003378:	d902      	bls.n	8003380 <SPI_WaitFlagStateUntilTimeout+0x54>
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d142      	bne.n	8003406 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	21e0      	movs	r1, #224	; 0xe0
 800338c:	438a      	bics	r2, r1
 800338e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	2382      	movs	r3, #130	; 0x82
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	429a      	cmp	r2, r3
 800339a:	d113      	bne.n	80033c4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	021b      	lsls	r3, r3, #8
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d005      	beq.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d107      	bne.n	80033c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2140      	movs	r1, #64	; 0x40
 80033c0:	438a      	bics	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033c8:	2380      	movs	r3, #128	; 0x80
 80033ca:	019b      	lsls	r3, r3, #6
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d110      	bne.n	80033f2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	491a      	ldr	r1, [pc, #104]	; (8003444 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80033dc:	400a      	ands	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2180      	movs	r1, #128	; 0x80
 80033ec:	0189      	lsls	r1, r1, #6
 80033ee:	430a      	orrs	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	225d      	movs	r2, #93	; 0x5d
 80033f6:	2101      	movs	r1, #1
 80033f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	225c      	movs	r2, #92	; 0x5c
 80033fe:	2100      	movs	r1, #0
 8003400:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e017      	b.n	8003436 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	3b01      	subs	r3, #1
 8003414:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	4013      	ands	r3, r2
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	425a      	negs	r2, r3
 8003426:	4153      	adcs	r3, r2
 8003428:	b2db      	uxtb	r3, r3
 800342a:	001a      	movs	r2, r3
 800342c:	1dfb      	adds	r3, r7, #7
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d197      	bne.n	8003364 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b008      	add	sp, #32
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	20000000 	.word	0x20000000
 8003444:	ffffdfff 	.word	0xffffdfff

08003448 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003456:	2317      	movs	r3, #23
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800345e:	f7fe f83f 	bl	80014e0 <HAL_GetTick>
 8003462:	0002      	movs	r2, r0
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	18d3      	adds	r3, r2, r3
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800346e:	f7fe f837 	bl	80014e0 <HAL_GetTick>
 8003472:	0003      	movs	r3, r0
 8003474:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	330c      	adds	r3, #12
 800347c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800347e:	4b41      	ldr	r3, [pc, #260]	; (8003584 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	0013      	movs	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	189b      	adds	r3, r3, r2
 8003488:	00da      	lsls	r2, r3, #3
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	0d1b      	lsrs	r3, r3, #20
 800348e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003490:	4353      	muls	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003494:	e068      	b.n	8003568 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	23c0      	movs	r3, #192	; 0xc0
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	429a      	cmp	r2, r3
 800349e:	d10a      	bne.n	80034b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d107      	bne.n	80034b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	2117      	movs	r1, #23
 80034ae:	187b      	adds	r3, r7, r1
 80034b0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	3301      	adds	r3, #1
 80034ba:	d055      	beq.n	8003568 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034bc:	f7fe f810 	bl	80014e0 <HAL_GetTick>
 80034c0:	0002      	movs	r2, r0
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d902      	bls.n	80034d2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d142      	bne.n	8003558 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	21e0      	movs	r1, #224	; 0xe0
 80034de:	438a      	bics	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	2382      	movs	r3, #130	; 0x82
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d113      	bne.n	8003516 <SPI_WaitFifoStateUntilTimeout+0xce>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d005      	beq.n	8003506 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	429a      	cmp	r2, r3
 8003504:	d107      	bne.n	8003516 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2140      	movs	r1, #64	; 0x40
 8003512:	438a      	bics	r2, r1
 8003514:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	019b      	lsls	r3, r3, #6
 800351e:	429a      	cmp	r2, r3
 8003520:	d110      	bne.n	8003544 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4916      	ldr	r1, [pc, #88]	; (8003588 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800352e:	400a      	ands	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	0189      	lsls	r1, r1, #6
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	225d      	movs	r2, #93	; 0x5d
 8003548:	2101      	movs	r1, #1
 800354a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	225c      	movs	r2, #92	; 0x5c
 8003550:	2100      	movs	r1, #0
 8003552:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e010      	b.n	800357a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	3b01      	subs	r3, #1
 8003566:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	d18e      	bne.n	8003496 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b00a      	add	sp, #40	; 0x28
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	20000000 	.word	0x20000000
 8003588:	ffffdfff 	.word	0xffffdfff

0800358c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	23c0      	movs	r3, #192	; 0xc0
 800359c:	0159      	lsls	r1, r3, #5
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	0013      	movs	r3, r2
 80035a6:	2200      	movs	r2, #0
 80035a8:	f7ff ff4e 	bl	8003448 <SPI_WaitFifoStateUntilTimeout>
 80035ac:	1e03      	subs	r3, r0, #0
 80035ae:	d007      	beq.n	80035c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b4:	2220      	movs	r2, #32
 80035b6:	431a      	orrs	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e027      	b.n	8003610 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	0013      	movs	r3, r2
 80035ca:	2200      	movs	r2, #0
 80035cc:	2180      	movs	r1, #128	; 0x80
 80035ce:	f7ff fead 	bl	800332c <SPI_WaitFlagStateUntilTimeout>
 80035d2:	1e03      	subs	r3, r0, #0
 80035d4:	d007      	beq.n	80035e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035da:	2220      	movs	r2, #32
 80035dc:	431a      	orrs	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e014      	b.n	8003610 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	23c0      	movs	r3, #192	; 0xc0
 80035ea:	00d9      	lsls	r1, r3, #3
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	0013      	movs	r3, r2
 80035f4:	2200      	movs	r2, #0
 80035f6:	f7ff ff27 	bl	8003448 <SPI_WaitFifoStateUntilTimeout>
 80035fa:	1e03      	subs	r3, r0, #0
 80035fc:	d007      	beq.n	800360e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003602:	2220      	movs	r2, #32
 8003604:	431a      	orrs	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e000      	b.n	8003610 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b004      	add	sp, #16
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e04a      	b.n	80036c0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	223d      	movs	r2, #61	; 0x3d
 800362e:	5c9b      	ldrb	r3, [r3, r2]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d107      	bne.n	8003646 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	223c      	movs	r2, #60	; 0x3c
 800363a:	2100      	movs	r1, #0
 800363c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	0018      	movs	r0, r3
 8003642:	f7fd fd99 	bl	8001178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	223d      	movs	r2, #61	; 0x3d
 800364a:	2102      	movs	r1, #2
 800364c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	0019      	movs	r1, r3
 8003658:	0010      	movs	r0, r2
 800365a:	f000 fa6d 	bl	8003b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2248      	movs	r2, #72	; 0x48
 8003662:	2101      	movs	r1, #1
 8003664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	223e      	movs	r2, #62	; 0x3e
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	223f      	movs	r2, #63	; 0x3f
 8003672:	2101      	movs	r1, #1
 8003674:	5499      	strb	r1, [r3, r2]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2240      	movs	r2, #64	; 0x40
 800367a:	2101      	movs	r1, #1
 800367c:	5499      	strb	r1, [r3, r2]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2241      	movs	r2, #65	; 0x41
 8003682:	2101      	movs	r1, #1
 8003684:	5499      	strb	r1, [r3, r2]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2242      	movs	r2, #66	; 0x42
 800368a:	2101      	movs	r1, #1
 800368c:	5499      	strb	r1, [r3, r2]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2243      	movs	r2, #67	; 0x43
 8003692:	2101      	movs	r1, #1
 8003694:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2244      	movs	r2, #68	; 0x44
 800369a:	2101      	movs	r1, #1
 800369c:	5499      	strb	r1, [r3, r2]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2245      	movs	r2, #69	; 0x45
 80036a2:	2101      	movs	r1, #1
 80036a4:	5499      	strb	r1, [r3, r2]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2246      	movs	r2, #70	; 0x46
 80036aa:	2101      	movs	r1, #1
 80036ac:	5499      	strb	r1, [r3, r2]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2247      	movs	r2, #71	; 0x47
 80036b2:	2101      	movs	r1, #1
 80036b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	223d      	movs	r2, #61	; 0x3d
 80036ba:	2101      	movs	r1, #1
 80036bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	0018      	movs	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b002      	add	sp, #8
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e04a      	b.n	8003770 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	223d      	movs	r2, #61	; 0x3d
 80036de:	5c9b      	ldrb	r3, [r3, r2]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d107      	bne.n	80036f6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	223c      	movs	r2, #60	; 0x3c
 80036ea:	2100      	movs	r1, #0
 80036ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	0018      	movs	r0, r3
 80036f2:	f000 f841 	bl	8003778 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	223d      	movs	r2, #61	; 0x3d
 80036fa:	2102      	movs	r1, #2
 80036fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3304      	adds	r3, #4
 8003706:	0019      	movs	r1, r3
 8003708:	0010      	movs	r0, r2
 800370a:	f000 fa15 	bl	8003b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2248      	movs	r2, #72	; 0x48
 8003712:	2101      	movs	r1, #1
 8003714:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	223e      	movs	r2, #62	; 0x3e
 800371a:	2101      	movs	r1, #1
 800371c:	5499      	strb	r1, [r3, r2]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	223f      	movs	r2, #63	; 0x3f
 8003722:	2101      	movs	r1, #1
 8003724:	5499      	strb	r1, [r3, r2]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2240      	movs	r2, #64	; 0x40
 800372a:	2101      	movs	r1, #1
 800372c:	5499      	strb	r1, [r3, r2]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2241      	movs	r2, #65	; 0x41
 8003732:	2101      	movs	r1, #1
 8003734:	5499      	strb	r1, [r3, r2]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2242      	movs	r2, #66	; 0x42
 800373a:	2101      	movs	r1, #1
 800373c:	5499      	strb	r1, [r3, r2]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2243      	movs	r2, #67	; 0x43
 8003742:	2101      	movs	r1, #1
 8003744:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2244      	movs	r2, #68	; 0x44
 800374a:	2101      	movs	r1, #1
 800374c:	5499      	strb	r1, [r3, r2]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2245      	movs	r2, #69	; 0x45
 8003752:	2101      	movs	r1, #1
 8003754:	5499      	strb	r1, [r3, r2]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2246      	movs	r2, #70	; 0x46
 800375a:	2101      	movs	r1, #1
 800375c:	5499      	strb	r1, [r3, r2]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2247      	movs	r2, #71	; 0x47
 8003762:	2101      	movs	r1, #1
 8003764:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	223d      	movs	r2, #61	; 0x3d
 800376a:	2101      	movs	r1, #1
 800376c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	0018      	movs	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d108      	bne.n	80037aa <HAL_TIM_PWM_Start+0x22>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	223e      	movs	r2, #62	; 0x3e
 800379c:	5c9b      	ldrb	r3, [r3, r2]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	1e5a      	subs	r2, r3, #1
 80037a4:	4193      	sbcs	r3, r2
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	e037      	b.n	800381a <HAL_TIM_PWM_Start+0x92>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d108      	bne.n	80037c2 <HAL_TIM_PWM_Start+0x3a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	223f      	movs	r2, #63	; 0x3f
 80037b4:	5c9b      	ldrb	r3, [r3, r2]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	1e5a      	subs	r2, r3, #1
 80037bc:	4193      	sbcs	r3, r2
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	e02b      	b.n	800381a <HAL_TIM_PWM_Start+0x92>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d108      	bne.n	80037da <HAL_TIM_PWM_Start+0x52>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2240      	movs	r2, #64	; 0x40
 80037cc:	5c9b      	ldrb	r3, [r3, r2]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	1e5a      	subs	r2, r3, #1
 80037d4:	4193      	sbcs	r3, r2
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	e01f      	b.n	800381a <HAL_TIM_PWM_Start+0x92>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	d108      	bne.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2241      	movs	r2, #65	; 0x41
 80037e4:	5c9b      	ldrb	r3, [r3, r2]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	4193      	sbcs	r3, r2
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	e013      	b.n	800381a <HAL_TIM_PWM_Start+0x92>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b10      	cmp	r3, #16
 80037f6:	d108      	bne.n	800380a <HAL_TIM_PWM_Start+0x82>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2242      	movs	r2, #66	; 0x42
 80037fc:	5c9b      	ldrb	r3, [r3, r2]
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	1e5a      	subs	r2, r3, #1
 8003804:	4193      	sbcs	r3, r2
 8003806:	b2db      	uxtb	r3, r3
 8003808:	e007      	b.n	800381a <HAL_TIM_PWM_Start+0x92>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2243      	movs	r2, #67	; 0x43
 800380e:	5c9b      	ldrb	r3, [r3, r2]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	1e5a      	subs	r2, r3, #1
 8003816:	4193      	sbcs	r3, r2
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e07b      	b.n	800391a <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d104      	bne.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	223e      	movs	r2, #62	; 0x3e
 800382c:	2102      	movs	r1, #2
 800382e:	5499      	strb	r1, [r3, r2]
 8003830:	e023      	b.n	800387a <HAL_TIM_PWM_Start+0xf2>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d104      	bne.n	8003842 <HAL_TIM_PWM_Start+0xba>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	223f      	movs	r2, #63	; 0x3f
 800383c:	2102      	movs	r1, #2
 800383e:	5499      	strb	r1, [r3, r2]
 8003840:	e01b      	b.n	800387a <HAL_TIM_PWM_Start+0xf2>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d104      	bne.n	8003852 <HAL_TIM_PWM_Start+0xca>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2240      	movs	r2, #64	; 0x40
 800384c:	2102      	movs	r1, #2
 800384e:	5499      	strb	r1, [r3, r2]
 8003850:	e013      	b.n	800387a <HAL_TIM_PWM_Start+0xf2>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b0c      	cmp	r3, #12
 8003856:	d104      	bne.n	8003862 <HAL_TIM_PWM_Start+0xda>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2241      	movs	r2, #65	; 0x41
 800385c:	2102      	movs	r1, #2
 800385e:	5499      	strb	r1, [r3, r2]
 8003860:	e00b      	b.n	800387a <HAL_TIM_PWM_Start+0xf2>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b10      	cmp	r3, #16
 8003866:	d104      	bne.n	8003872 <HAL_TIM_PWM_Start+0xea>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2242      	movs	r2, #66	; 0x42
 800386c:	2102      	movs	r1, #2
 800386e:	5499      	strb	r1, [r3, r2]
 8003870:	e003      	b.n	800387a <HAL_TIM_PWM_Start+0xf2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2243      	movs	r2, #67	; 0x43
 8003876:	2102      	movs	r1, #2
 8003878:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6839      	ldr	r1, [r7, #0]
 8003880:	2201      	movs	r2, #1
 8003882:	0018      	movs	r0, r3
 8003884:	f000 fc6e 	bl	8004164 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a25      	ldr	r2, [pc, #148]	; (8003924 <HAL_TIM_PWM_Start+0x19c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x11e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a24      	ldr	r2, [pc, #144]	; (8003928 <HAL_TIM_PWM_Start+0x1a0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x11e>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a22      	ldr	r2, [pc, #136]	; (800392c <HAL_TIM_PWM_Start+0x1a4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_PWM_Start+0x122>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_TIM_PWM_Start+0x124>
 80038aa:	2300      	movs	r3, #0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	0209      	lsls	r1, r1, #8
 80038be:	430a      	orrs	r2, r1
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a17      	ldr	r2, [pc, #92]	; (8003924 <HAL_TIM_PWM_Start+0x19c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_TIM_PWM_Start+0x14e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a17      	ldr	r2, [pc, #92]	; (8003930 <HAL_TIM_PWM_Start+0x1a8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d116      	bne.n	8003904 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a15      	ldr	r2, [pc, #84]	; (8003934 <HAL_TIM_PWM_Start+0x1ac>)
 80038de:	4013      	ands	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b06      	cmp	r3, #6
 80038e6:	d016      	beq.n	8003916 <HAL_TIM_PWM_Start+0x18e>
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	025b      	lsls	r3, r3, #9
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d011      	beq.n	8003916 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2101      	movs	r1, #1
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003902:	e008      	b.n	8003916 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2101      	movs	r1, #1
 8003910:	430a      	orrs	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e000      	b.n	8003918 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003916:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	b004      	add	sp, #16
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40014400 	.word	0x40014400
 800392c:	40014800 	.word	0x40014800
 8003930:	40000400 	.word	0x40000400
 8003934:	00010007 	.word	0x00010007

08003938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2317      	movs	r3, #23
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	223c      	movs	r2, #60	; 0x3c
 8003950:	5c9b      	ldrb	r3, [r3, r2]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003956:	2302      	movs	r3, #2
 8003958:	e0e5      	b.n	8003b26 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	223c      	movs	r2, #60	; 0x3c
 800395e:	2101      	movs	r1, #1
 8003960:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b14      	cmp	r3, #20
 8003966:	d900      	bls.n	800396a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003968:	e0d1      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	009a      	lsls	r2, r3, #2
 800396e:	4b70      	ldr	r3, [pc, #448]	; (8003b30 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003970:	18d3      	adds	r3, r2, r3
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	0011      	movs	r1, r2
 800397e:	0018      	movs	r0, r3
 8003980:	f000 f954 	bl	8003c2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2108      	movs	r1, #8
 8003990:	430a      	orrs	r2, r1
 8003992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2104      	movs	r1, #4
 80039a0:	438a      	bics	r2, r1
 80039a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6999      	ldr	r1, [r3, #24]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	619a      	str	r2, [r3, #24]
      break;
 80039b6:	e0af      	b.n	8003b18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	0011      	movs	r1, r2
 80039c0:	0018      	movs	r0, r3
 80039c2:	f000 f9b3 	bl	8003d2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699a      	ldr	r2, [r3, #24]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2180      	movs	r1, #128	; 0x80
 80039d2:	0109      	lsls	r1, r1, #4
 80039d4:	430a      	orrs	r2, r1
 80039d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4954      	ldr	r1, [pc, #336]	; (8003b34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80039e4:	400a      	ands	r2, r1
 80039e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6999      	ldr	r1, [r3, #24]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	619a      	str	r2, [r3, #24]
      break;
 80039fc:	e08c      	b.n	8003b18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	0011      	movs	r1, r2
 8003a06:	0018      	movs	r0, r3
 8003a08:	f000 fa0e 	bl	8003e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69da      	ldr	r2, [r3, #28]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2108      	movs	r1, #8
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2104      	movs	r1, #4
 8003a28:	438a      	bics	r2, r1
 8003a2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69d9      	ldr	r1, [r3, #28]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	61da      	str	r2, [r3, #28]
      break;
 8003a3e:	e06b      	b.n	8003b18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	0011      	movs	r1, r2
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f000 fa6f 	bl	8003f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2180      	movs	r1, #128	; 0x80
 8003a5a:	0109      	lsls	r1, r1, #4
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4932      	ldr	r1, [pc, #200]	; (8003b34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69d9      	ldr	r1, [r3, #28]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	021a      	lsls	r2, r3, #8
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	61da      	str	r2, [r3, #28]
      break;
 8003a84:	e048      	b.n	8003b18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	0011      	movs	r1, r2
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f000 fab0 	bl	8003ff4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2108      	movs	r1, #8
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2104      	movs	r1, #4
 8003ab0:	438a      	bics	r2, r1
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ac6:	e027      	b.n	8003b18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	0011      	movs	r1, r2
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 fae9 	bl	80040a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2180      	movs	r1, #128	; 0x80
 8003ae2:	0109      	lsls	r1, r1, #4
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4910      	ldr	r1, [pc, #64]	; (8003b34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003af4:	400a      	ands	r2, r1
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	021a      	lsls	r2, r3, #8
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b0c:	e004      	b.n	8003b18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003b0e:	2317      	movs	r3, #23
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	2201      	movs	r2, #1
 8003b14:	701a      	strb	r2, [r3, #0]
      break;
 8003b16:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	223c      	movs	r2, #60	; 0x3c
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	5499      	strb	r1, [r3, r2]

  return status;
 8003b20:	2317      	movs	r3, #23
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	781b      	ldrb	r3, [r3, #0]
}
 8003b26:	0018      	movs	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b006      	add	sp, #24
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	08004de0 	.word	0x08004de0
 8003b34:	fffffbff 	.word	0xfffffbff

08003b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a32      	ldr	r2, [pc, #200]	; (8003c14 <TIM_Base_SetConfig+0xdc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_Base_SetConfig+0x20>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a31      	ldr	r2, [pc, #196]	; (8003c18 <TIM_Base_SetConfig+0xe0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d108      	bne.n	8003b6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2270      	movs	r2, #112	; 0x70
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a29      	ldr	r2, [pc, #164]	; (8003c14 <TIM_Base_SetConfig+0xdc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00f      	beq.n	8003b92 <TIM_Base_SetConfig+0x5a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a28      	ldr	r2, [pc, #160]	; (8003c18 <TIM_Base_SetConfig+0xe0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <TIM_Base_SetConfig+0x5a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a27      	ldr	r2, [pc, #156]	; (8003c1c <TIM_Base_SetConfig+0xe4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <TIM_Base_SetConfig+0x5a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a26      	ldr	r2, [pc, #152]	; (8003c20 <TIM_Base_SetConfig+0xe8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <TIM_Base_SetConfig+0x5a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a25      	ldr	r2, [pc, #148]	; (8003c24 <TIM_Base_SetConfig+0xec>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d108      	bne.n	8003ba4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a24      	ldr	r2, [pc, #144]	; (8003c28 <TIM_Base_SetConfig+0xf0>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2280      	movs	r2, #128	; 0x80
 8003ba8:	4393      	bics	r3, r2
 8003baa:	001a      	movs	r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a11      	ldr	r2, [pc, #68]	; (8003c14 <TIM_Base_SetConfig+0xdc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <TIM_Base_SetConfig+0xaa>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <TIM_Base_SetConfig+0xe8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_Base_SetConfig+0xaa>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a11      	ldr	r2, [pc, #68]	; (8003c24 <TIM_Base_SetConfig+0xec>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d103      	bne.n	8003bea <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d106      	bne.n	8003c0a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2201      	movs	r2, #1
 8003c02:	4393      	bics	r3, r2
 8003c04:	001a      	movs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	611a      	str	r2, [r3, #16]
  }
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b004      	add	sp, #16
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40002000 	.word	0x40002000
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800
 8003c28:	fffffcff 	.word	0xfffffcff

08003c2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	2201      	movs	r2, #1
 8003c42:	4393      	bics	r3, r2
 8003c44:	001a      	movs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a2e      	ldr	r2, [pc, #184]	; (8003d14 <TIM_OC1_SetConfig+0xe8>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2203      	movs	r2, #3
 8003c62:	4393      	bics	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2202      	movs	r2, #2
 8003c74:	4393      	bics	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a24      	ldr	r2, [pc, #144]	; (8003d18 <TIM_OC1_SetConfig+0xec>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d007      	beq.n	8003c9a <TIM_OC1_SetConfig+0x6e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a23      	ldr	r2, [pc, #140]	; (8003d1c <TIM_OC1_SetConfig+0xf0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d003      	beq.n	8003c9a <TIM_OC1_SetConfig+0x6e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <TIM_OC1_SetConfig+0xf4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10c      	bne.n	8003cb4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	4393      	bics	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2204      	movs	r2, #4
 8003cb0:	4393      	bics	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <TIM_OC1_SetConfig+0xec>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <TIM_OC1_SetConfig+0xa0>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a17      	ldr	r2, [pc, #92]	; (8003d1c <TIM_OC1_SetConfig+0xf0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_OC1_SetConfig+0xa0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <TIM_OC1_SetConfig+0xf4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d111      	bne.n	8003cf0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <TIM_OC1_SetConfig+0xf8>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <TIM_OC1_SetConfig+0xfc>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	621a      	str	r2, [r3, #32]
}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b006      	add	sp, #24
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	fffeff8f 	.word	0xfffeff8f
 8003d18:	40012c00 	.word	0x40012c00
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800
 8003d24:	fffffeff 	.word	0xfffffeff
 8003d28:	fffffdff 	.word	0xfffffdff

08003d2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	2210      	movs	r2, #16
 8003d42:	4393      	bics	r3, r2
 8003d44:	001a      	movs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a2c      	ldr	r2, [pc, #176]	; (8003e0c <TIM_OC2_SetConfig+0xe0>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a2b      	ldr	r2, [pc, #172]	; (8003e10 <TIM_OC2_SetConfig+0xe4>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2220      	movs	r2, #32
 8003d76:	4393      	bics	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <TIM_OC2_SetConfig+0xe8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10d      	bne.n	8003daa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2280      	movs	r2, #128	; 0x80
 8003d92:	4393      	bics	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2240      	movs	r2, #64	; 0x40
 8003da6:	4393      	bics	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <TIM_OC2_SetConfig+0xe8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <TIM_OC2_SetConfig+0x96>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <TIM_OC2_SetConfig+0xec>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_OC2_SetConfig+0x96>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a17      	ldr	r2, [pc, #92]	; (8003e1c <TIM_OC2_SetConfig+0xf0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d113      	bne.n	8003dea <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4a16      	ldr	r2, [pc, #88]	; (8003e20 <TIM_OC2_SetConfig+0xf4>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <TIM_OC2_SetConfig+0xf8>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b006      	add	sp, #24
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	feff8fff 	.word	0xfeff8fff
 8003e10:	fffffcff 	.word	0xfffffcff
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40014400 	.word	0x40014400
 8003e1c:	40014800 	.word	0x40014800
 8003e20:	fffffbff 	.word	0xfffffbff
 8003e24:	fffff7ff 	.word	0xfffff7ff

08003e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4a31      	ldr	r2, [pc, #196]	; (8003f04 <TIM_OC3_SetConfig+0xdc>)
 8003e3e:	401a      	ands	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a2d      	ldr	r2, [pc, #180]	; (8003f08 <TIM_OC3_SetConfig+0xe0>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	4393      	bics	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	4a27      	ldr	r2, [pc, #156]	; (8003f0c <TIM_OC3_SetConfig+0xe4>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a23      	ldr	r2, [pc, #140]	; (8003f10 <TIM_OC3_SetConfig+0xe8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d10d      	bne.n	8003ea2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	4a22      	ldr	r2, [pc, #136]	; (8003f14 <TIM_OC3_SetConfig+0xec>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <TIM_OC3_SetConfig+0xf0>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a1a      	ldr	r2, [pc, #104]	; (8003f10 <TIM_OC3_SetConfig+0xe8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <TIM_OC3_SetConfig+0x92>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a1b      	ldr	r2, [pc, #108]	; (8003f1c <TIM_OC3_SetConfig+0xf4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_OC3_SetConfig+0x92>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a1a      	ldr	r2, [pc, #104]	; (8003f20 <TIM_OC3_SetConfig+0xf8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d113      	bne.n	8003ee2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <TIM_OC3_SetConfig+0xfc>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <TIM_OC3_SetConfig+0x100>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	621a      	str	r2, [r3, #32]
}
 8003efc:	46c0      	nop			; (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b006      	add	sp, #24
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	fffffeff 	.word	0xfffffeff
 8003f08:	fffeff8f 	.word	0xfffeff8f
 8003f0c:	fffffdff 	.word	0xfffffdff
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	fffff7ff 	.word	0xfffff7ff
 8003f18:	fffffbff 	.word	0xfffffbff
 8003f1c:	40014400 	.word	0x40014400
 8003f20:	40014800 	.word	0x40014800
 8003f24:	ffffefff 	.word	0xffffefff
 8003f28:	ffffdfff 	.word	0xffffdfff

08003f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <TIM_OC4_SetConfig+0xa8>)
 8003f42:	401a      	ands	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4a20      	ldr	r2, [pc, #128]	; (8003fd8 <TIM_OC4_SetConfig+0xac>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <TIM_OC4_SetConfig+0xb0>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <TIM_OC4_SetConfig+0xb4>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	031b      	lsls	r3, r3, #12
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a17      	ldr	r2, [pc, #92]	; (8003fe4 <TIM_OC4_SetConfig+0xb8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d007      	beq.n	8003f9c <TIM_OC4_SetConfig+0x70>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <TIM_OC4_SetConfig+0xbc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d003      	beq.n	8003f9c <TIM_OC4_SetConfig+0x70>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a15      	ldr	r2, [pc, #84]	; (8003fec <TIM_OC4_SetConfig+0xc0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d109      	bne.n	8003fb0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <TIM_OC4_SetConfig+0xc4>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	019b      	lsls	r3, r3, #6
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b006      	add	sp, #24
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	ffffefff 	.word	0xffffefff
 8003fd8:	feff8fff 	.word	0xfeff8fff
 8003fdc:	fffffcff 	.word	0xfffffcff
 8003fe0:	ffffdfff 	.word	0xffffdfff
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40014400 	.word	0x40014400
 8003fec:	40014800 	.word	0x40014800
 8003ff0:	ffffbfff 	.word	0xffffbfff

08003ff4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	4a21      	ldr	r2, [pc, #132]	; (8004090 <TIM_OC5_SetConfig+0x9c>)
 800400a:	401a      	ands	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <TIM_OC5_SetConfig+0xa0>)
 8004020:	4013      	ands	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <TIM_OC5_SetConfig+0xa4>)
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <TIM_OC5_SetConfig+0xa8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d007      	beq.n	800405a <TIM_OC5_SetConfig+0x66>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <TIM_OC5_SetConfig+0xac>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d003      	beq.n	800405a <TIM_OC5_SetConfig+0x66>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <TIM_OC5_SetConfig+0xb0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d109      	bne.n	800406e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	4a0c      	ldr	r2, [pc, #48]	; (8004090 <TIM_OC5_SetConfig+0x9c>)
 800405e:	4013      	ands	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	621a      	str	r2, [r3, #32]
}
 8004088:	46c0      	nop			; (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bd80      	pop	{r7, pc}
 8004090:	fffeffff 	.word	0xfffeffff
 8004094:	fffeff8f 	.word	0xfffeff8f
 8004098:	fffdffff 	.word	0xfffdffff
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40014400 	.word	0x40014400
 80040a4:	40014800 	.word	0x40014800

080040a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	4a22      	ldr	r2, [pc, #136]	; (8004148 <TIM_OC6_SetConfig+0xa0>)
 80040be:	401a      	ands	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a1e      	ldr	r2, [pc, #120]	; (800414c <TIM_OC6_SetConfig+0xa4>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4a1a      	ldr	r2, [pc, #104]	; (8004150 <TIM_OC6_SetConfig+0xa8>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	051b      	lsls	r3, r3, #20
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a16      	ldr	r2, [pc, #88]	; (8004154 <TIM_OC6_SetConfig+0xac>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d007      	beq.n	8004110 <TIM_OC6_SetConfig+0x68>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a15      	ldr	r2, [pc, #84]	; (8004158 <TIM_OC6_SetConfig+0xb0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_OC6_SetConfig+0x68>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a14      	ldr	r2, [pc, #80]	; (800415c <TIM_OC6_SetConfig+0xb4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d109      	bne.n	8004124 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	4a13      	ldr	r2, [pc, #76]	; (8004160 <TIM_OC6_SetConfig+0xb8>)
 8004114:	4013      	ands	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	029b      	lsls	r3, r3, #10
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	b006      	add	sp, #24
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	ffefffff 	.word	0xffefffff
 800414c:	feff8fff 	.word	0xfeff8fff
 8004150:	ffdfffff 	.word	0xffdfffff
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40014400 	.word	0x40014400
 800415c:	40014800 	.word	0x40014800
 8004160:	fffbffff 	.word	0xfffbffff

08004164 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	221f      	movs	r2, #31
 8004174:	4013      	ands	r3, r2
 8004176:	2201      	movs	r2, #1
 8004178:	409a      	lsls	r2, r3
 800417a:	0013      	movs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	43d2      	mvns	r2, r2
 8004186:	401a      	ands	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	211f      	movs	r1, #31
 8004194:	400b      	ands	r3, r1
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4099      	lsls	r1, r3
 800419a:	000b      	movs	r3, r1
 800419c:	431a      	orrs	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b006      	add	sp, #24
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	223c      	movs	r2, #60	; 0x3c
 80041be:	5c9b      	ldrb	r3, [r3, r2]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e06f      	b.n	80042a8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	223c      	movs	r2, #60	; 0x3c
 80041cc:	2101      	movs	r1, #1
 80041ce:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	22ff      	movs	r2, #255	; 0xff
 80041d4:	4393      	bics	r3, r2
 80041d6:	001a      	movs	r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4a33      	ldr	r2, [pc, #204]	; (80042b0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80041e4:	401a      	ands	r2, r3
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4a30      	ldr	r2, [pc, #192]	; (80042b4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80041f2:	401a      	ands	r2, r3
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4a2e      	ldr	r2, [pc, #184]	; (80042b8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004200:	401a      	ands	r2, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4a2b      	ldr	r2, [pc, #172]	; (80042bc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800420e:	401a      	ands	r2, r3
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4a29      	ldr	r2, [pc, #164]	; (80042c0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800421c:	401a      	ands	r2, r3
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4a26      	ldr	r2, [pc, #152]	; (80042c4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800422a:	401a      	ands	r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4a24      	ldr	r2, [pc, #144]	; (80042c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004238:	401a      	ands	r2, r3
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	041b      	lsls	r3, r3, #16
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4a21      	ldr	r2, [pc, #132]	; (80042cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004248:	401a      	ands	r2, r3
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d11c      	bne.n	8004296 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004260:	401a      	ands	r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	051b      	lsls	r3, r3, #20
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a1a      	ldr	r2, [pc, #104]	; (80042d8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004270:	401a      	ands	r2, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4a17      	ldr	r2, [pc, #92]	; (80042dc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800427e:	401a      	ands	r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800428c:	401a      	ands	r2, r3
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	223c      	movs	r2, #60	; 0x3c
 80042a2:	2100      	movs	r1, #0
 80042a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b004      	add	sp, #16
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	fffffcff 	.word	0xfffffcff
 80042b4:	fffffbff 	.word	0xfffffbff
 80042b8:	fffff7ff 	.word	0xfffff7ff
 80042bc:	ffffefff 	.word	0xffffefff
 80042c0:	ffffdfff 	.word	0xffffdfff
 80042c4:	ffffbfff 	.word	0xffffbfff
 80042c8:	fff0ffff 	.word	0xfff0ffff
 80042cc:	efffffff 	.word	0xefffffff
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	ff0fffff 	.word	0xff0fffff
 80042d8:	feffffff 	.word	0xfeffffff
 80042dc:	fdffffff 	.word	0xfdffffff
 80042e0:	dfffffff 	.word	0xdfffffff

080042e4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e04e      	b.n	8004394 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2288      	movs	r2, #136	; 0x88
 80042fa:	589b      	ldr	r3, [r3, r2]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2284      	movs	r2, #132	; 0x84
 8004304:	2100      	movs	r1, #0
 8004306:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	0018      	movs	r0, r3
 800430c:	f7fc ffe0 	bl	80012d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2288      	movs	r2, #136	; 0x88
 8004314:	2124      	movs	r1, #36	; 0x24
 8004316:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2101      	movs	r1, #1
 8004324:	438a      	bics	r2, r1
 8004326:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	0018      	movs	r0, r3
 8004334:	f000 f99e 	bl	8004674 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	0018      	movs	r0, r3
 800433c:	f000 f830 	bl	80043a0 <UART_SetConfig>
 8004340:	0003      	movs	r3, r0
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e024      	b.n	8004394 <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4911      	ldr	r1, [pc, #68]	; (800439c <HAL_HalfDuplex_Init+0xb8>)
 8004356:	400a      	ands	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2122      	movs	r1, #34	; 0x22
 8004366:	438a      	bics	r2, r1
 8004368:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2108      	movs	r1, #8
 8004376:	430a      	orrs	r2, r1
 8004378:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2101      	movs	r1, #1
 8004386:	430a      	orrs	r2, r1
 8004388:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	0018      	movs	r0, r3
 800438e:	f000 fa25 	bl	80047dc <UART_CheckIdleState>
 8004392:	0003      	movs	r3, r0
}
 8004394:	0018      	movs	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	b002      	add	sp, #8
 800439a:	bd80      	pop	{r7, pc}
 800439c:	ffffb7ff 	.word	0xffffb7ff

080043a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043a8:	231a      	movs	r3, #26
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4aa1      	ldr	r2, [pc, #644]	; (8004654 <UART_SetConfig+0x2b4>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	0019      	movs	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	430a      	orrs	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4a9c      	ldr	r2, [pc, #624]	; (8004658 <UART_SetConfig+0x2b8>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	0019      	movs	r1, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	4313      	orrs	r3, r2
 8004404:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4a93      	ldr	r2, [pc, #588]	; (800465c <UART_SetConfig+0x2bc>)
 800440e:	4013      	ands	r3, r2
 8004410:	0019      	movs	r1, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	430a      	orrs	r2, r1
 800441a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	220f      	movs	r2, #15
 8004424:	4393      	bics	r3, r2
 8004426:	0019      	movs	r1, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a89      	ldr	r2, [pc, #548]	; (8004660 <UART_SetConfig+0x2c0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d127      	bne.n	800448e <UART_SetConfig+0xee>
 800443e:	4b89      	ldr	r3, [pc, #548]	; (8004664 <UART_SetConfig+0x2c4>)
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	2203      	movs	r2, #3
 8004444:	4013      	ands	r3, r2
 8004446:	2b03      	cmp	r3, #3
 8004448:	d017      	beq.n	800447a <UART_SetConfig+0xda>
 800444a:	d81b      	bhi.n	8004484 <UART_SetConfig+0xe4>
 800444c:	2b02      	cmp	r3, #2
 800444e:	d00a      	beq.n	8004466 <UART_SetConfig+0xc6>
 8004450:	d818      	bhi.n	8004484 <UART_SetConfig+0xe4>
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <UART_SetConfig+0xbc>
 8004456:	2b01      	cmp	r3, #1
 8004458:	d00a      	beq.n	8004470 <UART_SetConfig+0xd0>
 800445a:	e013      	b.n	8004484 <UART_SetConfig+0xe4>
 800445c:	231b      	movs	r3, #27
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	e021      	b.n	80044aa <UART_SetConfig+0x10a>
 8004466:	231b      	movs	r3, #27
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	2202      	movs	r2, #2
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	e01c      	b.n	80044aa <UART_SetConfig+0x10a>
 8004470:	231b      	movs	r3, #27
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	2204      	movs	r2, #4
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e017      	b.n	80044aa <UART_SetConfig+0x10a>
 800447a:	231b      	movs	r3, #27
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	2208      	movs	r2, #8
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	e012      	b.n	80044aa <UART_SetConfig+0x10a>
 8004484:	231b      	movs	r3, #27
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	2210      	movs	r2, #16
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e00d      	b.n	80044aa <UART_SetConfig+0x10a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a75      	ldr	r2, [pc, #468]	; (8004668 <UART_SetConfig+0x2c8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d104      	bne.n	80044a2 <UART_SetConfig+0x102>
 8004498:	231b      	movs	r3, #27
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	e003      	b.n	80044aa <UART_SetConfig+0x10a>
 80044a2:	231b      	movs	r3, #27
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	2210      	movs	r2, #16
 80044a8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	2380      	movs	r3, #128	; 0x80
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d000      	beq.n	80044b8 <UART_SetConfig+0x118>
 80044b6:	e065      	b.n	8004584 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80044b8:	231b      	movs	r3, #27
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d015      	beq.n	80044ee <UART_SetConfig+0x14e>
 80044c2:	dc18      	bgt.n	80044f6 <UART_SetConfig+0x156>
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d00d      	beq.n	80044e4 <UART_SetConfig+0x144>
 80044c8:	dc15      	bgt.n	80044f6 <UART_SetConfig+0x156>
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <UART_SetConfig+0x134>
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d005      	beq.n	80044de <UART_SetConfig+0x13e>
 80044d2:	e010      	b.n	80044f6 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d4:	f7fe fbd6 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80044d8:	0003      	movs	r3, r0
 80044da:	617b      	str	r3, [r7, #20]
        break;
 80044dc:	e012      	b.n	8004504 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044de:	4b63      	ldr	r3, [pc, #396]	; (800466c <UART_SetConfig+0x2cc>)
 80044e0:	617b      	str	r3, [r7, #20]
        break;
 80044e2:	e00f      	b.n	8004504 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e4:	f7fe fb42 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 80044e8:	0003      	movs	r3, r0
 80044ea:	617b      	str	r3, [r7, #20]
        break;
 80044ec:	e00a      	b.n	8004504 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	617b      	str	r3, [r7, #20]
        break;
 80044f4:	e006      	b.n	8004504 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044fa:	231a      	movs	r3, #26
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	2201      	movs	r2, #1
 8004500:	701a      	strb	r2, [r3, #0]
        break;
 8004502:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d100      	bne.n	800450c <UART_SetConfig+0x16c>
 800450a:	e08d      	b.n	8004628 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004510:	4b57      	ldr	r3, [pc, #348]	; (8004670 <UART_SetConfig+0x2d0>)
 8004512:	0052      	lsls	r2, r2, #1
 8004514:	5ad3      	ldrh	r3, [r2, r3]
 8004516:	0019      	movs	r1, r3
 8004518:	6978      	ldr	r0, [r7, #20]
 800451a:	f7fb fdf1 	bl	8000100 <__udivsi3>
 800451e:	0003      	movs	r3, r0
 8004520:	005a      	lsls	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	085b      	lsrs	r3, r3, #1
 8004528:	18d2      	adds	r2, r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	0019      	movs	r1, r3
 8004530:	0010      	movs	r0, r2
 8004532:	f7fb fde5 	bl	8000100 <__udivsi3>
 8004536:	0003      	movs	r3, r0
 8004538:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b0f      	cmp	r3, #15
 800453e:	d91c      	bls.n	800457a <UART_SetConfig+0x1da>
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	025b      	lsls	r3, r3, #9
 8004546:	429a      	cmp	r2, r3
 8004548:	d217      	bcs.n	800457a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	b29a      	uxth	r2, r3
 800454e:	200e      	movs	r0, #14
 8004550:	183b      	adds	r3, r7, r0
 8004552:	210f      	movs	r1, #15
 8004554:	438a      	bics	r2, r1
 8004556:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	b29b      	uxth	r3, r3
 800455e:	2207      	movs	r2, #7
 8004560:	4013      	ands	r3, r2
 8004562:	b299      	uxth	r1, r3
 8004564:	183b      	adds	r3, r7, r0
 8004566:	183a      	adds	r2, r7, r0
 8004568:	8812      	ldrh	r2, [r2, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	183a      	adds	r2, r7, r0
 8004574:	8812      	ldrh	r2, [r2, #0]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	e056      	b.n	8004628 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800457a:	231a      	movs	r3, #26
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	2201      	movs	r2, #1
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	e051      	b.n	8004628 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004584:	231b      	movs	r3, #27
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b08      	cmp	r3, #8
 800458c:	d015      	beq.n	80045ba <UART_SetConfig+0x21a>
 800458e:	dc18      	bgt.n	80045c2 <UART_SetConfig+0x222>
 8004590:	2b04      	cmp	r3, #4
 8004592:	d00d      	beq.n	80045b0 <UART_SetConfig+0x210>
 8004594:	dc15      	bgt.n	80045c2 <UART_SetConfig+0x222>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <UART_SetConfig+0x200>
 800459a:	2b02      	cmp	r3, #2
 800459c:	d005      	beq.n	80045aa <UART_SetConfig+0x20a>
 800459e:	e010      	b.n	80045c2 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a0:	f7fe fb70 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80045a4:	0003      	movs	r3, r0
 80045a6:	617b      	str	r3, [r7, #20]
        break;
 80045a8:	e012      	b.n	80045d0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045aa:	4b30      	ldr	r3, [pc, #192]	; (800466c <UART_SetConfig+0x2cc>)
 80045ac:	617b      	str	r3, [r7, #20]
        break;
 80045ae:	e00f      	b.n	80045d0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045b0:	f7fe fadc 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 80045b4:	0003      	movs	r3, r0
 80045b6:	617b      	str	r3, [r7, #20]
        break;
 80045b8:	e00a      	b.n	80045d0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	617b      	str	r3, [r7, #20]
        break;
 80045c0:	e006      	b.n	80045d0 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045c6:	231a      	movs	r3, #26
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
        break;
 80045ce:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d028      	beq.n	8004628 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045da:	4b25      	ldr	r3, [pc, #148]	; (8004670 <UART_SetConfig+0x2d0>)
 80045dc:	0052      	lsls	r2, r2, #1
 80045de:	5ad3      	ldrh	r3, [r2, r3]
 80045e0:	0019      	movs	r1, r3
 80045e2:	6978      	ldr	r0, [r7, #20]
 80045e4:	f7fb fd8c 	bl	8000100 <__udivsi3>
 80045e8:	0003      	movs	r3, r0
 80045ea:	001a      	movs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	18d2      	adds	r2, r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	0019      	movs	r1, r3
 80045fa:	0010      	movs	r0, r2
 80045fc:	f7fb fd80 	bl	8000100 <__udivsi3>
 8004600:	0003      	movs	r3, r0
 8004602:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b0f      	cmp	r3, #15
 8004608:	d90a      	bls.n	8004620 <UART_SetConfig+0x280>
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	025b      	lsls	r3, r3, #9
 8004610:	429a      	cmp	r2, r3
 8004612:	d205      	bcs.n	8004620 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	b29a      	uxth	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	e003      	b.n	8004628 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004620:	231a      	movs	r3, #26
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	2201      	movs	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	226a      	movs	r2, #106	; 0x6a
 800462c:	2101      	movs	r1, #1
 800462e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2268      	movs	r2, #104	; 0x68
 8004634:	2101      	movs	r1, #1
 8004636:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004644:	231a      	movs	r3, #26
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	781b      	ldrb	r3, [r3, #0]
}
 800464a:	0018      	movs	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	b008      	add	sp, #32
 8004650:	bd80      	pop	{r7, pc}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	cfff69f3 	.word	0xcfff69f3
 8004658:	ffffcfff 	.word	0xffffcfff
 800465c:	11fff4ff 	.word	0x11fff4ff
 8004660:	40013800 	.word	0x40013800
 8004664:	40021000 	.word	0x40021000
 8004668:	40004400 	.word	0x40004400
 800466c:	00f42400 	.word	0x00f42400
 8004670:	08004e34 	.word	0x08004e34

08004674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	2208      	movs	r2, #8
 8004682:	4013      	ands	r3, r2
 8004684:	d00b      	beq.n	800469e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4a4a      	ldr	r2, [pc, #296]	; (80047b8 <UART_AdvFeatureConfig+0x144>)
 800468e:	4013      	ands	r3, r2
 8004690:	0019      	movs	r1, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	2201      	movs	r2, #1
 80046a4:	4013      	ands	r3, r2
 80046a6:	d00b      	beq.n	80046c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4a43      	ldr	r2, [pc, #268]	; (80047bc <UART_AdvFeatureConfig+0x148>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	0019      	movs	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	2202      	movs	r2, #2
 80046c6:	4013      	ands	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4a3b      	ldr	r2, [pc, #236]	; (80047c0 <UART_AdvFeatureConfig+0x14c>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	0019      	movs	r1, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	2204      	movs	r2, #4
 80046e8:	4013      	ands	r3, r2
 80046ea:	d00b      	beq.n	8004704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4a34      	ldr	r2, [pc, #208]	; (80047c4 <UART_AdvFeatureConfig+0x150>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	0019      	movs	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	2210      	movs	r2, #16
 800470a:	4013      	ands	r3, r2
 800470c:	d00b      	beq.n	8004726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4a2c      	ldr	r2, [pc, #176]	; (80047c8 <UART_AdvFeatureConfig+0x154>)
 8004716:	4013      	ands	r3, r2
 8004718:	0019      	movs	r1, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	2220      	movs	r2, #32
 800472c:	4013      	ands	r3, r2
 800472e:	d00b      	beq.n	8004748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	4a25      	ldr	r2, [pc, #148]	; (80047cc <UART_AdvFeatureConfig+0x158>)
 8004738:	4013      	ands	r3, r2
 800473a:	0019      	movs	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	2240      	movs	r2, #64	; 0x40
 800474e:	4013      	ands	r3, r2
 8004750:	d01d      	beq.n	800478e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <UART_AdvFeatureConfig+0x15c>)
 800475a:	4013      	ands	r3, r2
 800475c:	0019      	movs	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	035b      	lsls	r3, r3, #13
 8004772:	429a      	cmp	r2, r3
 8004774:	d10b      	bne.n	800478e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <UART_AdvFeatureConfig+0x160>)
 800477e:	4013      	ands	r3, r2
 8004780:	0019      	movs	r1, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	2280      	movs	r2, #128	; 0x80
 8004794:	4013      	ands	r3, r2
 8004796:	d00b      	beq.n	80047b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <UART_AdvFeatureConfig+0x164>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	0019      	movs	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }
}
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b002      	add	sp, #8
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	ffff7fff 	.word	0xffff7fff
 80047bc:	fffdffff 	.word	0xfffdffff
 80047c0:	fffeffff 	.word	0xfffeffff
 80047c4:	fffbffff 	.word	0xfffbffff
 80047c8:	ffffefff 	.word	0xffffefff
 80047cc:	ffffdfff 	.word	0xffffdfff
 80047d0:	ffefffff 	.word	0xffefffff
 80047d4:	ff9fffff 	.word	0xff9fffff
 80047d8:	fff7ffff 	.word	0xfff7ffff

080047dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b092      	sub	sp, #72	; 0x48
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2290      	movs	r2, #144	; 0x90
 80047e8:	2100      	movs	r1, #0
 80047ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047ec:	f7fc fe78 	bl	80014e0 <HAL_GetTick>
 80047f0:	0003      	movs	r3, r0
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2208      	movs	r2, #8
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d12d      	bne.n	800485e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004804:	2280      	movs	r2, #128	; 0x80
 8004806:	0391      	lsls	r1, r2, #14
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4a47      	ldr	r2, [pc, #284]	; (8004928 <UART_CheckIdleState+0x14c>)
 800480c:	9200      	str	r2, [sp, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	f000 f88e 	bl	8004930 <UART_WaitOnFlagUntilTimeout>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d022      	beq.n	800485e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004818:	f3ef 8310 	mrs	r3, PRIMASK
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004820:	63bb      	str	r3, [r7, #56]	; 0x38
 8004822:	2301      	movs	r3, #1
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	f383 8810 	msr	PRIMASK, r3
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2180      	movs	r1, #128	; 0x80
 800483a:	438a      	bics	r2, r1
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004844:	f383 8810 	msr	PRIMASK, r3
}
 8004848:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2288      	movs	r2, #136	; 0x88
 800484e:	2120      	movs	r1, #32
 8004850:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2284      	movs	r2, #132	; 0x84
 8004856:	2100      	movs	r1, #0
 8004858:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e060      	b.n	8004920 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2204      	movs	r2, #4
 8004866:	4013      	ands	r3, r2
 8004868:	2b04      	cmp	r3, #4
 800486a:	d146      	bne.n	80048fa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800486c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486e:	2280      	movs	r2, #128	; 0x80
 8004870:	03d1      	lsls	r1, r2, #15
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4a2c      	ldr	r2, [pc, #176]	; (8004928 <UART_CheckIdleState+0x14c>)
 8004876:	9200      	str	r2, [sp, #0]
 8004878:	2200      	movs	r2, #0
 800487a:	f000 f859 	bl	8004930 <UART_WaitOnFlagUntilTimeout>
 800487e:	1e03      	subs	r3, r0, #0
 8004880:	d03b      	beq.n	80048fa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004882:	f3ef 8310 	mrs	r3, PRIMASK
 8004886:	60fb      	str	r3, [r7, #12]
  return(result);
 8004888:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800488a:	637b      	str	r3, [r7, #52]	; 0x34
 800488c:	2301      	movs	r3, #1
 800488e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f383 8810 	msr	PRIMASK, r3
}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4922      	ldr	r1, [pc, #136]	; (800492c <UART_CheckIdleState+0x150>)
 80048a4:	400a      	ands	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f383 8810 	msr	PRIMASK, r3
}
 80048b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b4:	f3ef 8310 	mrs	r3, PRIMASK
 80048b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80048ba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048bc:	633b      	str	r3, [r7, #48]	; 0x30
 80048be:	2301      	movs	r3, #1
 80048c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f383 8810 	msr	PRIMASK, r3
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2101      	movs	r1, #1
 80048d6:	438a      	bics	r2, r1
 80048d8:	609a      	str	r2, [r3, #8]
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	f383 8810 	msr	PRIMASK, r3
}
 80048e4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	228c      	movs	r2, #140	; 0x8c
 80048ea:	2120      	movs	r1, #32
 80048ec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2284      	movs	r2, #132	; 0x84
 80048f2:	2100      	movs	r1, #0
 80048f4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e012      	b.n	8004920 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2288      	movs	r2, #136	; 0x88
 80048fe:	2120      	movs	r1, #32
 8004900:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	228c      	movs	r2, #140	; 0x8c
 8004906:	2120      	movs	r1, #32
 8004908:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2284      	movs	r2, #132	; 0x84
 800491a:	2100      	movs	r1, #0
 800491c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	b010      	add	sp, #64	; 0x40
 8004926:	bd80      	pop	{r7, pc}
 8004928:	01ffffff 	.word	0x01ffffff
 800492c:	fffffedf 	.word	0xfffffedf

08004930 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	1dfb      	adds	r3, r7, #7
 800493e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004940:	e051      	b.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	3301      	adds	r3, #1
 8004946:	d04e      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004948:	f7fc fdca 	bl	80014e0 <HAL_GetTick>
 800494c:	0002      	movs	r2, r0
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e051      	b.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2204      	movs	r2, #4
 800496a:	4013      	ands	r3, r2
 800496c:	d03b      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b80      	cmp	r3, #128	; 0x80
 8004972:	d038      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d035      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	2208      	movs	r2, #8
 8004982:	4013      	ands	r3, r2
 8004984:	2b08      	cmp	r3, #8
 8004986:	d111      	bne.n	80049ac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2208      	movs	r2, #8
 800498e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	0018      	movs	r0, r3
 8004994:	f000 f83c 	bl	8004a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2290      	movs	r2, #144	; 0x90
 800499c:	2108      	movs	r1, #8
 800499e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2284      	movs	r2, #132	; 0x84
 80049a4:	2100      	movs	r1, #0
 80049a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e02c      	b.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69da      	ldr	r2, [r3, #28]
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	401a      	ands	r2, r3
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	429a      	cmp	r2, r3
 80049be:	d112      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2280      	movs	r2, #128	; 0x80
 80049c6:	0112      	lsls	r2, r2, #4
 80049c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 f81f 	bl	8004a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2290      	movs	r2, #144	; 0x90
 80049d6:	2120      	movs	r1, #32
 80049d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2284      	movs	r2, #132	; 0x84
 80049de:	2100      	movs	r1, #0
 80049e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e00f      	b.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	4013      	ands	r3, r2
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	425a      	negs	r2, r3
 80049f6:	4153      	adcs	r3, r2
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	001a      	movs	r2, r3
 80049fc:	1dfb      	adds	r3, r7, #7
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d09e      	beq.n	8004942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	0018      	movs	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b004      	add	sp, #16
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08e      	sub	sp, #56	; 0x38
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a18:	f3ef 8310 	mrs	r3, PRIMASK
 8004a1c:	617b      	str	r3, [r7, #20]
  return(result);
 8004a1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
 8004a22:	2301      	movs	r3, #1
 8004a24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	f383 8810 	msr	PRIMASK, r3
}
 8004a2c:	46c0      	nop			; (mov r8, r8)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4926      	ldr	r1, [pc, #152]	; (8004ad4 <UART_EndRxTransfer+0xc4>)
 8004a3a:	400a      	ands	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f383 8810 	msr	PRIMASK, r3
}
 8004a48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a4e:	623b      	str	r3, [r7, #32]
  return(result);
 8004a50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a52:	633b      	str	r3, [r7, #48]	; 0x30
 8004a54:	2301      	movs	r3, #1
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f383 8810 	msr	PRIMASK, r3
}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	491b      	ldr	r1, [pc, #108]	; (8004ad8 <UART_EndRxTransfer+0xc8>)
 8004a6c:	400a      	ands	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	f383 8810 	msr	PRIMASK, r3
}
 8004a7a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d118      	bne.n	8004ab6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a84:	f3ef 8310 	mrs	r3, PRIMASK
 8004a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8e:	2301      	movs	r3, #1
 8004a90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f383 8810 	msr	PRIMASK, r3
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2110      	movs	r1, #16
 8004aa6:	438a      	bics	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f383 8810 	msr	PRIMASK, r3
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	228c      	movs	r2, #140	; 0x8c
 8004aba:	2120      	movs	r1, #32
 8004abc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b00e      	add	sp, #56	; 0x38
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	fffffedf 	.word	0xfffffedf
 8004ad8:	effffffe 	.word	0xeffffffe

08004adc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2284      	movs	r2, #132	; 0x84
 8004ae8:	5c9b      	ldrb	r3, [r3, r2]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_UARTEx_DisableFifoMode+0x16>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e027      	b.n	8004b42 <HAL_UARTEx_DisableFifoMode+0x66>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2284      	movs	r2, #132	; 0x84
 8004af6:	2101      	movs	r1, #1
 8004af8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2288      	movs	r2, #136	; 0x88
 8004afe:	2124      	movs	r1, #36	; 0x24
 8004b00:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2101      	movs	r1, #1
 8004b16:	438a      	bics	r2, r1
 8004b18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4a0b      	ldr	r2, [pc, #44]	; (8004b4c <HAL_UARTEx_DisableFifoMode+0x70>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2288      	movs	r2, #136	; 0x88
 8004b34:	2120      	movs	r1, #32
 8004b36:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2284      	movs	r2, #132	; 0x84
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	0018      	movs	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b004      	add	sp, #16
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	dfffffff 	.word	0xdfffffff

08004b50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2284      	movs	r2, #132	; 0x84
 8004b5e:	5c9b      	ldrb	r3, [r3, r2]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e02e      	b.n	8004bc6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2284      	movs	r2, #132	; 0x84
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2288      	movs	r2, #136	; 0x88
 8004b74:	2124      	movs	r1, #36	; 0x24
 8004b76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	438a      	bics	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	08d9      	lsrs	r1, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f000 f854 	bl	8004c54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2288      	movs	r2, #136	; 0x88
 8004bb8:	2120      	movs	r1, #32
 8004bba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2284      	movs	r2, #132	; 0x84
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b004      	add	sp, #16
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2284      	movs	r2, #132	; 0x84
 8004bde:	5c9b      	ldrb	r3, [r3, r2]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e02f      	b.n	8004c48 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2284      	movs	r2, #132	; 0x84
 8004bec:	2101      	movs	r1, #1
 8004bee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2288      	movs	r2, #136	; 0x88
 8004bf4:	2124      	movs	r1, #36	; 0x24
 8004bf6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	438a      	bics	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	4a0e      	ldr	r2, [pc, #56]	; (8004c50 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	0019      	movs	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 f813 	bl	8004c54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2288      	movs	r2, #136	; 0x88
 8004c3a:	2120      	movs	r1, #32
 8004c3c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2284      	movs	r2, #132	; 0x84
 8004c42:	2100      	movs	r1, #0
 8004c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	0018      	movs	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	b004      	add	sp, #16
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	f1ffffff 	.word	0xf1ffffff

08004c54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d108      	bne.n	8004c76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	226a      	movs	r2, #106	; 0x6a
 8004c68:	2101      	movs	r1, #1
 8004c6a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2268      	movs	r2, #104	; 0x68
 8004c70:	2101      	movs	r1, #1
 8004c72:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c74:	e043      	b.n	8004cfe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c76:	260f      	movs	r6, #15
 8004c78:	19bb      	adds	r3, r7, r6
 8004c7a:	2208      	movs	r2, #8
 8004c7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c7e:	200e      	movs	r0, #14
 8004c80:	183b      	adds	r3, r7, r0
 8004c82:	2208      	movs	r2, #8
 8004c84:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	0e5b      	lsrs	r3, r3, #25
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	240d      	movs	r4, #13
 8004c92:	193b      	adds	r3, r7, r4
 8004c94:	2107      	movs	r1, #7
 8004c96:	400a      	ands	r2, r1
 8004c98:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	0f5b      	lsrs	r3, r3, #29
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	250c      	movs	r5, #12
 8004ca6:	197b      	adds	r3, r7, r5
 8004ca8:	2107      	movs	r1, #7
 8004caa:	400a      	ands	r2, r1
 8004cac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cae:	183b      	adds	r3, r7, r0
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	197a      	adds	r2, r7, r5
 8004cb4:	7812      	ldrb	r2, [r2, #0]
 8004cb6:	4914      	ldr	r1, [pc, #80]	; (8004d08 <UARTEx_SetNbDataToProcess+0xb4>)
 8004cb8:	5c8a      	ldrb	r2, [r1, r2]
 8004cba:	435a      	muls	r2, r3
 8004cbc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004cbe:	197b      	adds	r3, r7, r5
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <UARTEx_SetNbDataToProcess+0xb8>)
 8004cc4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	f7fb faa4 	bl	8000214 <__divsi3>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	b299      	uxth	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	226a      	movs	r2, #106	; 0x6a
 8004cd4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cd6:	19bb      	adds	r3, r7, r6
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	193a      	adds	r2, r7, r4
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	490a      	ldr	r1, [pc, #40]	; (8004d08 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ce0:	5c8a      	ldrb	r2, [r1, r2]
 8004ce2:	435a      	muls	r2, r3
 8004ce4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ce6:	193b      	adds	r3, r7, r4
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <UARTEx_SetNbDataToProcess+0xb8>)
 8004cec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cee:	0019      	movs	r1, r3
 8004cf0:	f7fb fa90 	bl	8000214 <__divsi3>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	b299      	uxth	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2268      	movs	r2, #104	; 0x68
 8004cfc:	5299      	strh	r1, [r3, r2]
}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b005      	add	sp, #20
 8004d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	08004e4c 	.word	0x08004e4c
 8004d0c:	08004e54 	.word	0x08004e54

08004d10 <memset>:
 8004d10:	0003      	movs	r3, r0
 8004d12:	1882      	adds	r2, r0, r2
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d100      	bne.n	8004d1a <memset+0xa>
 8004d18:	4770      	bx	lr
 8004d1a:	7019      	strb	r1, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	e7f9      	b.n	8004d14 <memset+0x4>

08004d20 <__libc_init_array>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	2600      	movs	r6, #0
 8004d24:	4c0c      	ldr	r4, [pc, #48]	; (8004d58 <__libc_init_array+0x38>)
 8004d26:	4d0d      	ldr	r5, [pc, #52]	; (8004d5c <__libc_init_array+0x3c>)
 8004d28:	1b64      	subs	r4, r4, r5
 8004d2a:	10a4      	asrs	r4, r4, #2
 8004d2c:	42a6      	cmp	r6, r4
 8004d2e:	d109      	bne.n	8004d44 <__libc_init_array+0x24>
 8004d30:	2600      	movs	r6, #0
 8004d32:	f000 f819 	bl	8004d68 <_init>
 8004d36:	4c0a      	ldr	r4, [pc, #40]	; (8004d60 <__libc_init_array+0x40>)
 8004d38:	4d0a      	ldr	r5, [pc, #40]	; (8004d64 <__libc_init_array+0x44>)
 8004d3a:	1b64      	subs	r4, r4, r5
 8004d3c:	10a4      	asrs	r4, r4, #2
 8004d3e:	42a6      	cmp	r6, r4
 8004d40:	d105      	bne.n	8004d4e <__libc_init_array+0x2e>
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	00b3      	lsls	r3, r6, #2
 8004d46:	58eb      	ldr	r3, [r5, r3]
 8004d48:	4798      	blx	r3
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7ee      	b.n	8004d2c <__libc_init_array+0xc>
 8004d4e:	00b3      	lsls	r3, r6, #2
 8004d50:	58eb      	ldr	r3, [r5, r3]
 8004d52:	4798      	blx	r3
 8004d54:	3601      	adds	r6, #1
 8004d56:	e7f2      	b.n	8004d3e <__libc_init_array+0x1e>
 8004d58:	08004e5c 	.word	0x08004e5c
 8004d5c:	08004e5c 	.word	0x08004e5c
 8004d60:	08004e60 	.word	0x08004e60
 8004d64:	08004e5c 	.word	0x08004e5c

08004d68 <_init>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr

08004d74 <_fini>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr
