
Remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007948  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd8  08007a04  08007a04  00017a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086dc  080086dc  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080086dc  080086dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086e4  080086e4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e4  080086e4  000186e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086e8  080086e8  000186e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080086ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000018  08008704  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08008704  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c25  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000377d  00000000  00000000  00037ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  0003b428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fbe  00000000  00000000  0003c870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019fc5  00000000  00000000  0003d82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b01a  00000000  00000000  000577f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0967  00000000  00000000  0007280d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048a8  00000000  00000000  00113174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00117a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080079ec 	.word	0x080079ec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	080079ec 	.word	0x080079ec

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	0018      	movs	r0, r3
 8000626:	230c      	movs	r3, #12
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f007 f9b2 	bl	8007994 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000630:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000632:	4a2e      	ldr	r2, [pc, #184]	; (80006ec <MX_ADC1_Init+0xd0>)
 8000634:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000636:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	05d2      	lsls	r2, r2, #23
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063e:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064a:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000652:	2204      	movs	r2, #4
 8000654:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000656:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000658:	2200      	movs	r2, #0
 800065a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800065e:	2200      	movs	r2, #0
 8000660:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000664:	2200      	movs	r2, #0
 8000666:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800066a:	2201      	movs	r2, #1
 800066c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000670:	2220      	movs	r2, #32
 8000672:	2100      	movs	r1, #0
 8000674:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000684:	222c      	movs	r2, #44	; 0x2c
 8000686:	2100      	movs	r1, #0
 8000688:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800068c:	2200      	movs	r2, #0
 800068e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000692:	2200      	movs	r2, #0
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000698:	2200      	movs	r2, #0
 800069a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800069e:	223c      	movs	r2, #60	; 0x3c
 80006a0:	2100      	movs	r1, #0
 80006a2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_ADC1_Init+0xcc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_ADC1_Init+0xcc>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 ffc7 	bl	8001640 <HAL_ADC_Init>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80006b6:	f000 fa49 	bl	8000b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <MX_ADC1_Init+0xd4>)
 80006be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	1d3a      	adds	r2, r7, #4
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_ADC1_Init+0xcc>)
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fa4a 	bl	8001b6c <HAL_ADC_ConfigChannel>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80006dc:	f000 fa36 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b004      	add	sp, #16
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000034 	.word	0x20000034
 80006ec:	40012400 	.word	0x40012400
 80006f0:	04000002 	.word	0x04000002

080006f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b08b      	sub	sp, #44	; 0x2c
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	2414      	movs	r4, #20
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	0018      	movs	r0, r3
 8000702:	2314      	movs	r3, #20
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f007 f944 	bl	8007994 <memset>
  if(adcHandle->Instance==ADC1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a18      	ldr	r2, [pc, #96]	; (8000774 <HAL_ADC_MspInit+0x80>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d129      	bne.n	800076a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <HAL_ADC_MspInit+0x84>)
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	0349      	lsls	r1, r1, #13
 8000720:	430a      	orrs	r2, r1
 8000722:	641a      	str	r2, [r3, #64]	; 0x40
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	035b      	lsls	r3, r3, #13
 800072c:	4013      	ands	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000738:	2101      	movs	r1, #1
 800073a:	430a      	orrs	r2, r1
 800073c:	635a      	str	r2, [r3, #52]	; 0x34
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000742:	2201      	movs	r2, #1
 8000744:	4013      	ands	r3, r2
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Analog_In_Pin;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2202      	movs	r2, #2
 800074e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2203      	movs	r2, #3
 8000754:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Analog_In_GPIO_Port, &GPIO_InitStruct);
 800075c:	193a      	adds	r2, r7, r4
 800075e:	23a0      	movs	r3, #160	; 0xa0
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f001 fd3d 	bl	80021e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b00b      	add	sp, #44	; 0x2c
 8000770:	bd90      	pop	{r4, r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40012400 	.word	0x40012400
 8000778:	40021000 	.word	0x40021000

0800077c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	240c      	movs	r4, #12
 8000784:	193b      	adds	r3, r7, r4
 8000786:	0018      	movs	r0, r3
 8000788:	2314      	movs	r3, #20
 800078a:	001a      	movs	r2, r3
 800078c:	2100      	movs	r1, #0
 800078e:	f007 f901 	bl	8007994 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b45      	ldr	r3, [pc, #276]	; (80008a8 <MX_GPIO_Init+0x12c>)
 8000794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000796:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <MX_GPIO_Init+0x12c>)
 8000798:	2102      	movs	r1, #2
 800079a:	430a      	orrs	r2, r1
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
 800079e:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a2:	2202      	movs	r2, #2
 80007a4:	4013      	ands	r3, r2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b3f      	ldr	r3, [pc, #252]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007b0:	2104      	movs	r1, #4
 80007b2:	430a      	orrs	r2, r1
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ba:	2204      	movs	r2, #4
 80007bc:	4013      	ands	r3, r2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c6:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4833      	ldr	r0, [pc, #204]	; (80008ac <MX_GPIO_Init+0x130>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	0019      	movs	r1, r3
 80007e4:	f001 fe7f 	bl	80024e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	4830      	ldr	r0, [pc, #192]	; (80008b0 <MX_GPIO_Init+0x134>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	0019      	movs	r1, r3
 80007f2:	f001 fe78 	bl	80024e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|SPI1_CSN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80007f6:	492f      	ldr	r1, [pc, #188]	; (80008b4 <MX_GPIO_Init+0x138>)
 80007f8:	23a0      	movs	r3, #160	; 0xa0
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	2200      	movs	r2, #0
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 fe71 	bl	80024e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	0092      	lsls	r2, r2, #2
 800080a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2201      	movs	r2, #1
 8000810:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800081e:	193b      	adds	r3, r7, r4
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <MX_GPIO_Init+0x130>)
 8000822:	0019      	movs	r1, r3
 8000824:	0010      	movs	r0, r2
 8000826:	f001 fcdd 	bl	80021e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DC_Pin;
 800082a:	0021      	movs	r1, r4
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	0212      	lsls	r2, r2, #8
 8000832:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	000c      	movs	r4, r1
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2201      	movs	r2, #1
 800083a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000848:	193b      	adds	r3, r7, r4
 800084a:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <MX_GPIO_Init+0x134>)
 800084c:	0019      	movs	r1, r3
 800084e:	0010      	movs	r0, r2
 8000850:	f001 fcc8 	bl	80021e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RST_Pin|LED_Pin|SPI1_CSN_Pin|NRF_CE_Pin;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <MX_GPIO_Init+0x138>)
 8000858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	193a      	adds	r2, r7, r4
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f001 fcb5 	bl	80021e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_In_Pin;
 800087a:	0021      	movs	r1, r4
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	0152      	lsls	r2, r2, #5
 8000882:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_In_GPIO_Port, &GPIO_InitStruct);
 8000890:	187a      	adds	r2, r7, r1
 8000892:	23a0      	movs	r3, #160	; 0xa0
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f001 fca3 	bl	80021e4 <HAL_GPIO_Init>

}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b009      	add	sp, #36	; 0x24
 80008a4:	bd90      	pop	{r4, r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000
 80008ac:	50000400 	.word	0x50000400
 80008b0:	50000800 	.word	0x50000800
 80008b4:	00000988 	.word	0x00000988

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b093      	sub	sp, #76	; 0x4c
 80008bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fcdf 	bl	8001280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f8b9 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f7ff ff59 	bl	800077c <MX_GPIO_Init>
  MX_ADC1_Init();
 80008ca:	f7ff fea7 	bl	800061c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80008ce:	f000 fbfd 	bl	80010cc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80008d2:	f000 f941 	bl	8000b58 <MX_SPI1_Init>
  MX_TIM16_Init();
 80008d6:	f000 faf7 	bl	8000ec8 <MX_TIM16_Init>
  MX_TIM2_Init();
 80008da:	f000 faa1 	bl	8000e20 <MX_TIM2_Init>
  MX_SPI2_Init();
 80008de:	f000 f979 	bl	8000bd4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */



  uint8_t TX_addr[] = {0xEE, 0xDD, 0xCC, 0xBB, 0xAA};
 80008e2:	242c      	movs	r4, #44	; 0x2c
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	4a46      	ldr	r2, [pc, #280]	; (8000a00 <main+0x148>)
 80008e8:	6811      	ldr	r1, [r2, #0]
 80008ea:	6019      	str	r1, [r3, #0]
 80008ec:	7912      	ldrb	r2, [r2, #4]
 80008ee:	711a      	strb	r2, [r3, #4]
  uint8_t RX_addr[] = {0x99, 0x88, 0x77, 0x66, 0x55};
 80008f0:	2324      	movs	r3, #36	; 0x24
 80008f2:	18fb      	adds	r3, r7, r3
 80008f4:	4a43      	ldr	r2, [pc, #268]	; (8000a04 <main+0x14c>)
 80008f6:	6811      	ldr	r1, [r2, #0]
 80008f8:	6019      	str	r1, [r3, #0]
 80008fa:	7912      	ldrb	r2, [r2, #4]
 80008fc:	711a      	strb	r2, [r3, #4]

  uint32_t counter = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	2201      	movs	r2, #1
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0018      	movs	r0, r3
 800090c:	f001 fdeb 	bl	80024e6 <HAL_GPIO_WritePin>


  nrf_init();
 8000910:	f005 fcdc 	bl	80062cc <nrf_init>

  nrf_tx_mode(TX_addr, 10);
 8000914:	193b      	adds	r3, r7, r4
 8000916:	210a      	movs	r1, #10
 8000918:	0018      	movs	r0, r3
 800091a:	f005 fd08 	bl	800632e <nrf_tx_mode>



	DEV_Module_Init();
 800091e:	f005 fde7 	bl	80064f0 <DEV_Module_Init>

	LCD_1IN28_SetBackLight(1000);
 8000922:	23fa      	movs	r3, #250	; 0xfa
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	0018      	movs	r0, r3
 8000928:	f007 f824 	bl	8007974 <LCD_1IN28_SetBackLight>
	LCD_1IN28_Init(VERTICAL);
 800092c:	2001      	movs	r0, #1
 800092e:	f006 ff71 	bl	8007814 <LCD_1IN28_Init>
	//LCD_1IN28_Clear(BLACK);

	Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, BLACK);
 8000932:	2300      	movs	r3, #0
 8000934:	2200      	movs	r2, #0
 8000936:	21f0      	movs	r1, #240	; 0xf0
 8000938:	20f0      	movs	r0, #240	; 0xf0
 800093a:	f005 fdff 	bl	800653c <Paint_NewImage>

	Paint_SetClearFuntion(LCD_1IN28_Clear);
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <main+0x150>)
 8000940:	0018      	movs	r0, r3
 8000942:	f005 fe49 	bl	80065d8 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 8000946:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <main+0x154>)
 8000948:	0018      	movs	r0, r3
 800094a:	f005 fe53 	bl	80065f4 <Paint_SetDisplayFuntion>
	Paint_DrawString_EN(70, 100, "LOADING...", &Font16, BLACK, DARKORANGE);
 800094e:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <main+0x158>)
 8000950:	4a30      	ldr	r2, [pc, #192]	; (8000a14 <main+0x15c>)
 8000952:	4931      	ldr	r1, [pc, #196]	; (8000a18 <main+0x160>)
 8000954:	9101      	str	r1, [sp, #4]
 8000956:	2100      	movs	r1, #0
 8000958:	9100      	str	r1, [sp, #0]
 800095a:	2164      	movs	r1, #100	; 0x64
 800095c:	2046      	movs	r0, #70	; 0x46
 800095e:	f006 fafb 	bl	8006f58 <Paint_DrawString_EN>

	Paint_Clear(WHITE);
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <main+0x164>)
 8000964:	0018      	movs	r0, r3
 8000966:	f005 ff33 	bl	80067d0 <Paint_Clear>
	DEV_Delay_ms(100);
 800096a:	2064      	movs	r0, #100	; 0x64
 800096c:	f000 fd0e 	bl	800138c <HAL_Delay>

	Paint_DrawRectangle(115, 115, 136, 141, DARKRED, 2, 0);
 8000970:	2300      	movs	r3, #0
 8000972:	9302      	str	r3, [sp, #8]
 8000974:	2302      	movs	r3, #2
 8000976:	9301      	str	r3, [sp, #4]
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <main+0x168>)
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	238d      	movs	r3, #141	; 0x8d
 800097e:	2288      	movs	r2, #136	; 0x88
 8000980:	2173      	movs	r1, #115	; 0x73
 8000982:	2073      	movs	r0, #115	; 0x73
 8000984:	f006 f938 	bl	8006bf8 <Paint_DrawRectangle>
	Paint_DrawNum(120, 120, counter, &Font16, DARKBLUE, DARKGREEN);
 8000988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <main+0x158>)
 800098c:	4925      	ldr	r1, [pc, #148]	; (8000a24 <main+0x16c>)
 800098e:	9101      	str	r1, [sp, #4]
 8000990:	4925      	ldr	r1, [pc, #148]	; (8000a28 <main+0x170>)
 8000992:	9100      	str	r1, [sp, #0]
 8000994:	2178      	movs	r1, #120	; 0x78
 8000996:	2078      	movs	r0, #120	; 0x78
 8000998:	f006 fb5c 	bl	8007054 <Paint_DrawNum>


  //Setup the interrupt last
  HAL_TIM_Base_Start_IT(&htim2);
 800099c:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <main+0x174>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f003 fbc0 	bl	8004124 <HAL_TIM_Base_Start_IT>


  uint8_t RX_data[32] = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	3304      	adds	r3, #4
 80009ac:	221c      	movs	r2, #28
 80009ae:	2100      	movs	r1, #0
 80009b0:	0018      	movs	r0, r3
 80009b2:	f006 ffef 	bl	8007994 <memset>
//	  HAL_Delay(500);
//	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
//	  TX_data[6]++;


	Paint_ClearWindows(120, 100, 164, 116, BLACK);
 80009b6:	2300      	movs	r3, #0
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2374      	movs	r3, #116	; 0x74
 80009bc:	22a4      	movs	r2, #164	; 0xa4
 80009be:	2164      	movs	r1, #100	; 0x64
 80009c0:	2078      	movs	r0, #120	; 0x78
 80009c2:	f005 ff17 	bl	80067f4 <Paint_ClearWindows>
	Paint_DrawNum(120, 120, adc_val, &Font16, DARKBLUE, DARKGREEN);
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <main+0x178>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	0019      	movs	r1, r3
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <main+0x158>)
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <main+0x16c>)
 80009d0:	9201      	str	r2, [sp, #4]
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <main+0x170>)
 80009d4:	9200      	str	r2, [sp, #0]
 80009d6:	000a      	movs	r2, r1
 80009d8:	2178      	movs	r1, #120	; 0x78
 80009da:	2078      	movs	r0, #120	; 0x78
 80009dc:	f006 fb3a 	bl	8007054 <Paint_DrawNum>
//	counter++;
//	HAL_Delay(250);


	if(HAL_GPIO_ReadPin(Button_In_GPIO_Port, Button_In_Pin) == 0){
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	015a      	lsls	r2, r3, #5
 80009e4:	23a0      	movs	r3, #160	; 0xa0
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	0011      	movs	r1, r2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 fd5e 	bl	80024ac <HAL_GPIO_ReadPin>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d1e0      	bne.n	80009b6 <main+0xfe>
		while(1){
			nrf_send_adc(3300);
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <main+0x17c>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f005 fd2c 	bl	8006454 <nrf_send_adc>
 80009fc:	e7fa      	b.n	80009f4 <main+0x13c>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	08007a10 	.word	0x08007a10
 8000a04:	08007a18 	.word	0x08007a18
 8000a08:	080078c3 	.word	0x080078c3
 8000a0c:	0800792f 	.word	0x0800792f
 8000a10:	20000010 	.word	0x20000010
 8000a14:	08007a04 	.word	0x08007a04
 8000a18:	0000ab84 	.word	0x0000ab84
 8000a1c:	0000ffff 	.word	0x0000ffff
 8000a20:	00006862 	.word	0x00006862
 8000a24:	00004c42 	.word	0x00004c42
 8000a28:	00000908 	.word	0x00000908
 8000a2c:	20000160 	.word	0x20000160
 8000a30:	20000000 	.word	0x20000000
 8000a34:	00000ce4 	.word	0x00000ce4

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b093      	sub	sp, #76	; 0x4c
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	2410      	movs	r4, #16
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	0018      	movs	r0, r3
 8000a44:	2338      	movs	r3, #56	; 0x38
 8000a46:	001a      	movs	r2, r3
 8000a48:	2100      	movs	r1, #0
 8000a4a:	f006 ffa3 	bl	8007994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4e:	003b      	movs	r3, r7
 8000a50:	0018      	movs	r0, r3
 8000a52:	2310      	movs	r3, #16
 8000a54:	001a      	movs	r2, r3
 8000a56:	2100      	movs	r1, #0
 8000a58:	f006 ff9c 	bl	8007994 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f001 fd5d 	bl	8002520 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2202      	movs	r2, #2
 8000a6a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	0052      	lsls	r2, r2, #1
 8000a72:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a74:	0021      	movs	r1, r4
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2240      	movs	r2, #64	; 0x40
 8000a80:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2202      	movs	r2, #2
 8000a86:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2208      	movs	r2, #8
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	0292      	lsls	r2, r2, #10
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	0492      	lsls	r2, r2, #18
 8000aa8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	0592      	lsls	r2, r2, #22
 8000ab0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 fd7f 	bl	80025b8 <HAL_RCC_OscConfig>
 8000aba:	1e03      	subs	r3, r0, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000abe:	f000 f845 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	003b      	movs	r3, r7
 8000aca:	2202      	movs	r2, #2
 8000acc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	003b      	movs	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ada:	003b      	movs	r3, r7
 8000adc:	2102      	movs	r1, #2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f002 f884 	bl	8002bec <HAL_RCC_ClockConfig>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ae8:	f000 f830 	bl	8000b4c <Error_Handler>
  }
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b013      	add	sp, #76	; 0x4c
 8000af2:	bd90      	pop	{r4, r7, pc}

08000af4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  if (htim == &htim2 ){
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d118      	bne.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x42>
	//Code to run for TIM2 IRQuint32_t adc_val = 0;
	HAL_ADC_Start(&hadc1);
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 ff42 	bl	8001990 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	425a      	negs	r2, r3
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 ff89 	bl	8001a2c <HAL_ADC_PollForConversion>
	adc_val = HAL_ADC_GetValue(&hadc1);
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 f819 	bl	8001b54 <HAL_ADC_GetValue>
 8000b22:	0002      	movs	r2, r0
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b26:	601a      	str	r2, [r3, #0]

	//NRF Transmission Code
	int trans_stat = nrf_send_adc(adc_val);
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f005 fc91 	bl	8006454 <nrf_send_adc>
 8000b32:	0003      	movs	r3, r0
 8000b34:	60fb      	str	r3, [r7, #12]

  }
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b004      	add	sp, #16
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	20000160 	.word	0x20000160
 8000b44:	20000034 	.word	0x20000034
 8000b48:	20000000 	.word	0x20000000

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <MX_SPI1_Init+0x78>)
 8000b60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b64:	2282      	movs	r2, #130	; 0x82
 8000b66:	0052      	lsls	r2, r2, #1
 8000b68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b72:	22e0      	movs	r2, #224	; 0xe0
 8000b74:	00d2      	lsls	r2, r2, #3
 8000b76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	0092      	lsls	r2, r2, #2
 8000b8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b8e:	2210      	movs	r2, #16
 8000b90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000ba6:	2207      	movs	r2, #7
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <MX_SPI1_Init+0x74>)
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f002 fb3b 	bl	8003234 <HAL_SPI_Init>
 8000bbe:	1e03      	subs	r3, r0, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bc2:	f7ff ffc3 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000098 	.word	0x20000098
 8000bd0:	40013000 	.word	0x40013000

08000bd4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <MX_SPI2_Init+0x78>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000be0:	2282      	movs	r2, #130	; 0x82
 8000be2:	0052      	lsls	r2, r2, #1
 8000be4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000bee:	22e0      	movs	r2, #224	; 0xe0
 8000bf0:	00d2      	lsls	r2, r2, #3
 8000bf2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000c22:	2207      	movs	r2, #7
 8000c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000c2e:	2208      	movs	r2, #8
 8000c30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <MX_SPI2_Init+0x74>)
 8000c34:	0018      	movs	r0, r3
 8000c36:	f002 fafd 	bl	8003234 <HAL_SPI_Init>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f7ff ff85 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200000fc 	.word	0x200000fc
 8000c4c:	40003800 	.word	0x40003800

08000c50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b08d      	sub	sp, #52	; 0x34
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	241c      	movs	r4, #28
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	2314      	movs	r3, #20
 8000c60:	001a      	movs	r2, r3
 8000c62:	2100      	movs	r1, #0
 8000c64:	f006 fe96 	bl	8007994 <memset>
  if(spiHandle->Instance==SPI1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a42      	ldr	r2, [pc, #264]	; (8000d78 <HAL_SPI_MspInit+0x128>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d131      	bne.n	8000cd6 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c72:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <HAL_SPI_MspInit+0x12c>)
 8000c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c76:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <HAL_SPI_MspInit+0x12c>)
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	0149      	lsls	r1, r1, #5
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c80:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <HAL_SPI_MspInit+0x12c>)
 8000c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	015b      	lsls	r3, r3, #5
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
 8000c8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <HAL_SPI_MspInit+0x12c>)
 8000c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c92:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <HAL_SPI_MspInit+0x12c>)
 8000c94:	2101      	movs	r1, #1
 8000c96:	430a      	orrs	r2, r1
 8000c98:	635a      	str	r2, [r3, #52]	; 0x34
 8000c9a:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <HAL_SPI_MspInit+0x12c>)
 8000c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000ca6:	0021      	movs	r1, r4
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2264      	movs	r2, #100	; 0x64
 8000cac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	187a      	adds	r2, r7, r1
 8000cc8:	23a0      	movs	r3, #160	; 0xa0
 8000cca:	05db      	lsls	r3, r3, #23
 8000ccc:	0011      	movs	r1, r2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f001 fa88 	bl	80021e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cd4:	e04c      	b.n	8000d70 <HAL_SPI_MspInit+0x120>
  else if(spiHandle->Instance==SPI2)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a29      	ldr	r2, [pc, #164]	; (8000d80 <HAL_SPI_MspInit+0x130>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d147      	bne.n	8000d70 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <HAL_SPI_MspInit+0x12c>)
 8000ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ce4:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <HAL_SPI_MspInit+0x12c>)
 8000ce6:	2180      	movs	r1, #128	; 0x80
 8000ce8:	01c9      	lsls	r1, r1, #7
 8000cea:	430a      	orrs	r2, r1
 8000cec:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <HAL_SPI_MspInit+0x12c>)
 8000cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	01db      	lsls	r3, r3, #7
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <HAL_SPI_MspInit+0x12c>)
 8000cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <HAL_SPI_MspInit+0x12c>)
 8000d02:	2101      	movs	r1, #1
 8000d04:	430a      	orrs	r2, r1
 8000d06:	635a      	str	r2, [r3, #52]	; 0x34
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_SPI_MspInit+0x12c>)
 8000d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4013      	ands	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d14:	241c      	movs	r4, #28
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	2202      	movs	r2, #2
 8000d20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	193a      	adds	r2, r7, r4
 8000d36:	23a0      	movs	r3, #160	; 0xa0
 8000d38:	05db      	lsls	r3, r3, #23
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f001 fa51 	bl	80021e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d42:	0021      	movs	r1, r4
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2210      	movs	r2, #16
 8000d48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2201      	movs	r2, #1
 8000d60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	187a      	adds	r2, r7, r1
 8000d64:	23a0      	movs	r3, #160	; 0xa0
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	0011      	movs	r1, r2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f001 fa3a 	bl	80021e4 <HAL_GPIO_Init>
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b00d      	add	sp, #52	; 0x34
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	40013000 	.word	0x40013000
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40003800 	.word	0x40003800

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	430a      	orrs	r2, r1
 8000d94:	641a      	str	r2, [r3, #64]	; 0x40
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0549      	lsls	r1, r1, #21
 8000dac:	430a      	orrs	r2, r1
 8000dae:	63da      	str	r2, [r3, #60]	; 0x3c
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_MspInit+0x44>)
 8000db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	055b      	lsls	r3, r3, #21
 8000db8:	4013      	ands	r3, r2
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	40021000 	.word	0x40021000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f000 fab0 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <TIM2_IRQHandler+0x14>)
 8000e02:	0018      	movs	r0, r3
 8000e04:	f003 fb20 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	20000160 	.word	0x20000160

08000e14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	2310      	movs	r3, #16
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	001a      	movs	r2, r3
 8000e30:	2100      	movs	r1, #0
 8000e32:	f006 fdaf 	bl	8007994 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	0018      	movs	r0, r3
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	2100      	movs	r1, #0
 8000e40:	f006 fda8 	bl	8007994 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <MX_TIM2_Init+0xa0>)
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	05d2      	lsls	r2, r2, #23
 8000e4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <MX_TIM2_Init+0xa0>)
 8000e4e:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <MX_TIM2_Init+0xa4>)
 8000e50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <MX_TIM2_Init+0xa0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <MX_TIM2_Init+0xa0>)
 8000e5a:	2263      	movs	r2, #99	; 0x63
 8000e5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_TIM2_Init+0xa0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <MX_TIM2_Init+0xa0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_TIM2_Init+0xa0>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f003 f901 	bl	8004074 <HAL_TIM_Base_Init>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e76:	f7ff fe69 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	0152      	lsls	r2, r2, #5
 8000e82:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e84:	187a      	adds	r2, r7, r1
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_TIM2_Init+0xa0>)
 8000e88:	0011      	movs	r1, r2
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f003 fce4 	bl	8004858 <HAL_TIM_ConfigClockSource>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e94:	f7ff fe5a 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ea4:	1d3a      	adds	r2, r7, #4
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_TIM2_Init+0xa0>)
 8000ea8:	0011      	movs	r1, r2
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f004 f9aa 	bl	8005204 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000eb4:	f7ff fe4a 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b008      	add	sp, #32
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000160 	.word	0x20000160
 8000ec4:	000018ff 	.word	0x000018ff

08000ec8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	; 0x50
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ece:	2334      	movs	r3, #52	; 0x34
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	231c      	movs	r3, #28
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f006 fd5b 	bl	8007994 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ede:	003b      	movs	r3, r7
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	2334      	movs	r3, #52	; 0x34
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	f006 fd54 	bl	8007994 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000eec:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <MX_TIM16_Init+0x108>)
 8000eee:	4a39      	ldr	r2, [pc, #228]	; (8000fd4 <MX_TIM16_Init+0x10c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 300-1;
 8000ef2:	4b37      	ldr	r3, [pc, #220]	; (8000fd0 <MX_TIM16_Init+0x108>)
 8000ef4:	222c      	movs	r2, #44	; 0x2c
 8000ef6:	32ff      	adds	r2, #255	; 0xff
 8000ef8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <MX_TIM16_Init+0x108>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8000f00:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <MX_TIM16_Init+0x108>)
 8000f02:	4a35      	ldr	r2, [pc, #212]	; (8000fd8 <MX_TIM16_Init+0x110>)
 8000f04:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b32      	ldr	r3, [pc, #200]	; (8000fd0 <MX_TIM16_Init+0x108>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000f0c:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <MX_TIM16_Init+0x108>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f12:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <MX_TIM16_Init+0x108>)
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000f18:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <MX_TIM16_Init+0x108>)
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f003 f8aa 	bl	8004074 <HAL_TIM_Base_Init>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000f24:	f7ff fe12 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <MX_TIM16_Init+0x108>)
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f003 f94e 	bl	80041cc <HAL_TIM_PWM_Init>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000f34:	f7ff fe0a 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f38:	2134      	movs	r1, #52	; 0x34
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2260      	movs	r2, #96	; 0x60
 8000f3e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2200      	movs	r2, #0
 8000f44:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f64:	1879      	adds	r1, r7, r1
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_TIM16_Init+0x108>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f003 fb74 	bl	8004658 <HAL_TIM_PWM_ConfigChannel>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8000f74:	f7ff fdea 	bl	8000b4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f78:	003b      	movs	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f7e:	003b      	movs	r3, r7
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f84:	003b      	movs	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f8a:	003b      	movs	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f90:	003b      	movs	r3, r7
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f96:	003b      	movs	r3, r7
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	0192      	lsls	r2, r2, #6
 8000f9c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f9e:	003b      	movs	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fa4:	003b      	movs	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000faa:	003a      	movs	r2, r7
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_TIM16_Init+0x108>)
 8000fae:	0011      	movs	r1, r2
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f004 f98f 	bl	80052d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fb6:	1e03      	subs	r3, r0, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM16_Init+0xf6>
  {
    Error_Handler();
 8000fba:	f7ff fdc7 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <MX_TIM16_Init+0x108>)
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f000 f845 	bl	8001050 <HAL_TIM_MspPostInit>

}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b014      	add	sp, #80	; 0x50
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	200001ac 	.word	0x200001ac
 8000fd4:	40014400 	.word	0x40014400
 8000fd8:	000003e7 	.word	0x000003e7

08000fdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	05db      	lsls	r3, r3, #23
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d114      	bne.n	800101a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8000ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001000:	2201      	movs	r2, #1
 8001002:	4013      	ands	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	200f      	movs	r0, #15
 800100e:	f001 f8b7 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001012:	200f      	movs	r0, #15
 8001014:	f001 f8c9 	bl	80021aa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001018:	e012      	b.n	8001040 <HAL_TIM_Base_MspInit+0x64>
  else if(tim_baseHandle->Instance==TIM16)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_TIM_Base_MspInit+0x70>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d10d      	bne.n	8001040 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8001026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	0289      	lsls	r1, r1, #10
 800102e:	430a      	orrs	r2, r1
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8001034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	029b      	lsls	r3, r3, #10
 800103a:	4013      	ands	r3, r2
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b004      	add	sp, #16
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000
 800104c:	40014400 	.word	0x40014400

08001050 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	240c      	movs	r4, #12
 800105a:	193b      	adds	r3, r7, r4
 800105c:	0018      	movs	r0, r3
 800105e:	2314      	movs	r3, #20
 8001060:	001a      	movs	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	f006 fc96 	bl	8007994 <memset>
  if(timHandle->Instance==TIM16)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <HAL_TIM_MspPostInit+0x70>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d122      	bne.n	80010b8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_TIM_MspPostInit+0x74>)
 8001074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <HAL_TIM_MspPostInit+0x74>)
 8001078:	2102      	movs	r1, #2
 800107a:	430a      	orrs	r2, r1
 800107c:	635a      	str	r2, [r3, #52]	; 0x34
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_TIM_MspPostInit+0x74>)
 8001080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001082:	2202      	movs	r2, #2
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BL_Pin;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	0052      	lsls	r2, r2, #1
 8001090:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	0021      	movs	r1, r4
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2202      	movs	r2, #2
 8001098:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2202      	movs	r2, #2
 80010aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BL_GPIO_Port, &GPIO_InitStruct);
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <HAL_TIM_MspPostInit+0x78>)
 80010b0:	0019      	movs	r1, r3
 80010b2:	0010      	movs	r0, r2
 80010b4:	f001 f896 	bl	80021e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b009      	add	sp, #36	; 0x24
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	40014400 	.word	0x40014400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	50000400 	.word	0x50000400

080010cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <MX_USART1_UART_Init+0x94>)
 80010d2:	4a24      	ldr	r2, [pc, #144]	; (8001164 <MX_USART1_UART_Init+0x98>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <MX_USART1_UART_Init+0x94>)
 80010d8:	22e1      	movs	r2, #225	; 0xe1
 80010da:	0252      	lsls	r2, r2, #9
 80010dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <MX_USART1_UART_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <MX_USART1_UART_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_USART1_UART_Init+0x94>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_USART1_UART_Init+0x94>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_USART1_UART_Init+0x94>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_USART1_UART_Init+0x94>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_USART1_UART_Init+0x94>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_USART1_UART_Init+0x94>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_USART1_UART_Init+0x94>)
 8001110:	2200      	movs	r2, #0
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_USART1_UART_Init+0x94>)
 8001116:	0018      	movs	r0, r3
 8001118:	f004 f990 	bl	800543c <HAL_HalfDuplex_Init>
 800111c:	1e03      	subs	r3, r0, #0
 800111e:	d001      	beq.n	8001124 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001120:	f7ff fd14 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_USART1_UART_Init+0x94>)
 8001126:	2100      	movs	r1, #0
 8001128:	0018      	movs	r0, r3
 800112a:	f004 fecb 	bl	8005ec4 <HAL_UARTEx_SetTxFifoThreshold>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d001      	beq.n	8001136 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001132:	f7ff fd0b 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_USART1_UART_Init+0x94>)
 8001138:	2100      	movs	r1, #0
 800113a:	0018      	movs	r0, r3
 800113c:	f004 ff02 	bl	8005f44 <HAL_UARTEx_SetRxFifoThreshold>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d001      	beq.n	8001148 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001144:	f7ff fd02 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <MX_USART1_UART_Init+0x94>)
 800114a:	0018      	movs	r0, r3
 800114c:	f004 fe80 	bl	8005e50 <HAL_UARTEx_DisableFifoMode>
 8001150:	1e03      	subs	r3, r0, #0
 8001152:	d001      	beq.n	8001158 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001154:	f7ff fcfa 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	200001f8 	.word	0x200001f8
 8001164:	40013800 	.word	0x40013800

08001168 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b095      	sub	sp, #84	; 0x54
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	233c      	movs	r3, #60	; 0x3c
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	0018      	movs	r0, r3
 8001176:	2314      	movs	r3, #20
 8001178:	001a      	movs	r2, r3
 800117a:	2100      	movs	r1, #0
 800117c:	f006 fc0a 	bl	8007994 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	2414      	movs	r4, #20
 8001182:	193b      	adds	r3, r7, r4
 8001184:	0018      	movs	r0, r3
 8001186:	2328      	movs	r3, #40	; 0x28
 8001188:	001a      	movs	r2, r3
 800118a:	2100      	movs	r1, #0
 800118c:	f006 fc02 	bl	8007994 <memset>
  if(uartHandle->Instance==USART1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a22      	ldr	r2, [pc, #136]	; (8001220 <HAL_UART_MspInit+0xb8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d13d      	bne.n	8001216 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800119a:	193b      	adds	r3, r7, r4
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	0018      	movs	r0, r3
 80011aa:	f001 fec9 	bl	8002f40 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	1e03      	subs	r3, r0, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011b2:	f7ff fccb 	bl	8000b4c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_UART_MspInit+0xbc>)
 80011b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <HAL_UART_MspInit+0xbc>)
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	01c9      	lsls	r1, r1, #7
 80011c0:	430a      	orrs	r2, r1
 80011c2:	641a      	str	r2, [r3, #64]	; 0x40
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_UART_MspInit+0xbc>)
 80011c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	01db      	lsls	r3, r3, #7
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_UART_MspInit+0xbc>)
 80011d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_UART_MspInit+0xbc>)
 80011d8:	2102      	movs	r1, #2
 80011da:	430a      	orrs	r2, r1
 80011dc:	635a      	str	r2, [r3, #52]	; 0x34
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_UART_MspInit+0xbc>)
 80011e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e2:	2202      	movs	r2, #2
 80011e4:	4013      	ands	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011ea:	213c      	movs	r1, #60	; 0x3c
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2240      	movs	r2, #64	; 0x40
 80011f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2212      	movs	r2, #18
 80011f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	2201      	movs	r2, #1
 80011fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001204:	187b      	adds	r3, r7, r1
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	187b      	adds	r3, r7, r1
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <HAL_UART_MspInit+0xc0>)
 800120e:	0019      	movs	r1, r3
 8001210:	0010      	movs	r0, r2
 8001212:	f000 ffe7 	bl	80021e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b015      	add	sp, #84	; 0x54
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	40013800 	.word	0x40013800
 8001224:	40021000 	.word	0x40021000
 8001228:	50000400 	.word	0x50000400

0800122c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800122e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001230:	f7ff fdf0 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <LoopForever+0x6>)
  ldr r1, =_edata
 8001236:	490d      	ldr	r1, [pc, #52]	; (800126c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <LoopForever+0xe>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800124c:	4c0a      	ldr	r4, [pc, #40]	; (8001278 <LoopForever+0x16>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800125a:	f006 fba3 	bl	80079a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800125e:	f7ff fb2b 	bl	80008b8 <main>

08001262 <LoopForever>:

LoopForever:
  b LoopForever
 8001262:	e7fe      	b.n	8001262 <LoopForever>
  ldr   r0, =_estack
 8001264:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800126c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001270:	080086ec 	.word	0x080086ec
  ldr r2, =_sbss
 8001274:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001278:	200002b8 	.word	0x200002b8

0800127c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC1_IRQHandler>
	...

08001280 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_Init+0x3c>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Init+0x3c>)
 8001292:	2180      	movs	r1, #128	; 0x80
 8001294:	0049      	lsls	r1, r1, #1
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800129a:	2003      	movs	r0, #3
 800129c:	f000 f810 	bl	80012c0 <HAL_InitTick>
 80012a0:	1e03      	subs	r3, r0, #0
 80012a2:	d003      	beq.n	80012ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e001      	b.n	80012b0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80012ac:	f7ff fd6a 	bl	8000d84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	781b      	ldrb	r3, [r3, #0]
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b002      	add	sp, #8
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40022000 	.word	0x40022000

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c8:	230f      	movs	r3, #15
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_InitTick+0x88>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d02b      	beq.n	8001330 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <HAL_InitTick+0x8c>)
 80012da:	681c      	ldr	r4, [r3, #0]
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_InitTick+0x88>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	0019      	movs	r1, r3
 80012e2:	23fa      	movs	r3, #250	; 0xfa
 80012e4:	0098      	lsls	r0, r3, #2
 80012e6:	f7fe ff0d 	bl	8000104 <__udivsi3>
 80012ea:	0003      	movs	r3, r0
 80012ec:	0019      	movs	r1, r3
 80012ee:	0020      	movs	r0, r4
 80012f0:	f7fe ff08 	bl	8000104 <__udivsi3>
 80012f4:	0003      	movs	r3, r0
 80012f6:	0018      	movs	r0, r3
 80012f8:	f000 ff67 	bl	80021ca <HAL_SYSTICK_Config>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d112      	bne.n	8001326 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d80a      	bhi.n	800131c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	2301      	movs	r3, #1
 800130a:	425b      	negs	r3, r3
 800130c:	2200      	movs	r2, #0
 800130e:	0018      	movs	r0, r3
 8001310:	f000 ff36 	bl	8002180 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_InitTick+0x90>)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	e00d      	b.n	8001338 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800131c:	230f      	movs	r3, #15
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	e008      	b.n	8001338 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001326:	230f      	movs	r3, #15
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e003      	b.n	8001338 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001330:	230f      	movs	r3, #15
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001338:	230f      	movs	r3, #15
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	781b      	ldrb	r3, [r3, #0]
}
 800133e:	0018      	movs	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	b005      	add	sp, #20
 8001344:	bd90      	pop	{r4, r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	2000000c 	.word	0x2000000c
 800134c:	20000004 	.word	0x20000004
 8001350:	20000008 	.word	0x20000008

08001354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_IncTick+0x1c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	001a      	movs	r2, r3
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_IncTick+0x20>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	18d2      	adds	r2, r2, r3
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_IncTick+0x20>)
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	2000000c 	.word	0x2000000c
 8001374:	2000028c 	.word	0x2000028c

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b02      	ldr	r3, [pc, #8]	; (8001388 <HAL_GetTick+0x10>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	2000028c 	.word	0x2000028c

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff fff0 	bl	8001378 <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3301      	adds	r3, #1
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	001a      	movs	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	189b      	adds	r3, r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	f7ff ffe0 	bl	8001378 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b004      	add	sp, #16
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	2000000c 	.word	0x2000000c

080013d4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80013e4:	401a      	ands	r2, r3
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	fe3fffff 	.word	0xfe3fffff

080013fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	23e0      	movs	r3, #224	; 0xe0
 800140a:	045b      	lsls	r3, r3, #17
 800140c:	4013      	ands	r3, r2
}
 800140e:	0018      	movs	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}

08001416 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	2104      	movs	r1, #4
 800142a:	400a      	ands	r2, r1
 800142c:	2107      	movs	r1, #7
 800142e:	4091      	lsls	r1, r2
 8001430:	000a      	movs	r2, r1
 8001432:	43d2      	mvns	r2, r2
 8001434:	401a      	ands	r2, r3
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2104      	movs	r1, #4
 800143a:	400b      	ands	r3, r1
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	4099      	lsls	r1, r3
 8001440:	000b      	movs	r3, r1
 8001442:	431a      	orrs	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b004      	add	sp, #16
 800144e:	bd80      	pop	{r7, pc}

08001450 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	2104      	movs	r1, #4
 8001462:	400a      	ands	r2, r1
 8001464:	2107      	movs	r1, #7
 8001466:	4091      	lsls	r1, r2
 8001468:	000a      	movs	r2, r1
 800146a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2104      	movs	r1, #4
 8001470:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001472:	40da      	lsrs	r2, r3
 8001474:	0013      	movs	r3, r2
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	b002      	add	sp, #8
 800147c:	bd80      	pop	{r7, pc}

0800147e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	23c0      	movs	r3, #192	; 0xc0
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	4013      	ands	r3, r2
 8001490:	d101      	bne.n	8001496 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001496:	2300      	movs	r3, #0
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}

080014a0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	211f      	movs	r1, #31
 80014b4:	400a      	ands	r2, r1
 80014b6:	210f      	movs	r1, #15
 80014b8:	4091      	lsls	r1, r2
 80014ba:	000a      	movs	r2, r1
 80014bc:	43d2      	mvns	r2, r2
 80014be:	401a      	ands	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	0e9b      	lsrs	r3, r3, #26
 80014c4:	210f      	movs	r1, #15
 80014c6:	4019      	ands	r1, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	201f      	movs	r0, #31
 80014cc:	4003      	ands	r3, r0
 80014ce:	4099      	lsls	r1, r3
 80014d0:	000b      	movs	r3, r1
 80014d2:	431a      	orrs	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b004      	add	sp, #16
 80014de:	bd80      	pop	{r7, pc}

080014e0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	035b      	lsls	r3, r3, #13
 80014f2:	0b5b      	lsrs	r3, r3, #13
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b002      	add	sp, #8
 8001500:	bd80      	pop	{r7, pc}

08001502 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	0352      	lsls	r2, r2, #13
 8001514:	0b52      	lsrs	r2, r2, #13
 8001516:	43d2      	mvns	r2, r2
 8001518:	401a      	ands	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b002      	add	sp, #8
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	0212      	lsls	r2, r2, #8
 800153c:	43d2      	mvns	r2, r2
 800153e:	401a      	ands	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	400b      	ands	r3, r1
 8001548:	4904      	ldr	r1, [pc, #16]	; (800155c <LL_ADC_SetChannelSamplingTime+0x34>)
 800154a:	400b      	ands	r3, r1
 800154c:	431a      	orrs	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b004      	add	sp, #16
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	07ffff00 	.word	0x07ffff00

08001560 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4a05      	ldr	r2, [pc, #20]	; (8001584 <LL_ADC_EnableInternalRegulator+0x24>)
 800156e:	4013      	ands	r3, r2
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	0552      	lsls	r2, r2, #21
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	6fffffe8 	.word	0x6fffffe8

08001588 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	055b      	lsls	r3, r3, #21
 8001598:	401a      	ands	r2, r3
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	055b      	lsls	r3, r3, #21
 800159e:	429a      	cmp	r2, r3
 80015a0:	d101      	bne.n	80015a6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <LL_ADC_Enable+0x20>)
 80015be:	4013      	ands	r3, r2
 80015c0:	2201      	movs	r2, #1
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b002      	add	sp, #8
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	7fffffe8 	.word	0x7fffffe8

080015d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2201      	movs	r2, #1
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <LL_ADC_IsEnabled+0x18>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <LL_ADC_IsEnabled+0x1a>
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	0018      	movs	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b002      	add	sp, #8
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <LL_ADC_REG_StartConversion+0x20>)
 8001606:	4013      	ands	r3, r2
 8001608:	2204      	movs	r2, #4
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}
 8001618:	7fffffe8 	.word	0x7fffffe8

0800161c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2204      	movs	r2, #4
 800162a:	4013      	ands	r3, r2
 800162c:	2b04      	cmp	r3, #4
 800162e:	d101      	bne.n	8001634 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001634:	2300      	movs	r3, #0
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b002      	add	sp, #8
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001648:	231f      	movs	r3, #31
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e17f      	b.n	8001966 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10a      	bne.n	8001684 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	0018      	movs	r0, r3
 8001672:	f7ff f83f 	bl	80006f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2254      	movs	r2, #84	; 0x54
 8001680:	2100      	movs	r1, #0
 8001682:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff ff7d 	bl	8001588 <LL_ADC_IsInternalRegulatorEnabled>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d115      	bne.n	80016be <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	0018      	movs	r0, r3
 8001698:	f7ff ff62 	bl	8001560 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800169c:	4bb4      	ldr	r3, [pc, #720]	; (8001970 <HAL_ADC_Init+0x330>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	49b4      	ldr	r1, [pc, #720]	; (8001974 <HAL_ADC_Init+0x334>)
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7fe fd2e 	bl	8000104 <__udivsi3>
 80016a8:	0003      	movs	r3, r0
 80016aa:	3301      	adds	r3, #1
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016b0:	e002      	b.n	80016b8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f9      	bne.n	80016b2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7ff ff60 	bl	8001588 <LL_ADC_IsInternalRegulatorEnabled>
 80016c8:	1e03      	subs	r3, r0, #0
 80016ca:	d10f      	bne.n	80016ec <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	2210      	movs	r2, #16
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016dc:	2201      	movs	r2, #1
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80016e4:	231f      	movs	r3, #31
 80016e6:	18fb      	adds	r3, r7, r3
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7ff ff93 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 80016f6:	0003      	movs	r3, r0
 80016f8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	2210      	movs	r2, #16
 8001700:	4013      	ands	r3, r2
 8001702:	d000      	beq.n	8001706 <HAL_ADC_Init+0xc6>
 8001704:	e122      	b.n	800194c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d000      	beq.n	800170e <HAL_ADC_Init+0xce>
 800170c:	e11e      	b.n	800194c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	4a99      	ldr	r2, [pc, #612]	; (8001978 <HAL_ADC_Init+0x338>)
 8001714:	4013      	ands	r3, r2
 8001716:	2202      	movs	r2, #2
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0018      	movs	r0, r3
 8001724:	f7ff ff56 	bl	80015d4 <LL_ADC_IsEnabled>
 8001728:	1e03      	subs	r3, r0, #0
 800172a:	d000      	beq.n	800172e <HAL_ADC_Init+0xee>
 800172c:	e0ad      	b.n	800188a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7e1b      	ldrb	r3, [r3, #24]
 8001736:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001738:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7e5b      	ldrb	r3, [r3, #25]
 800173e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001740:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7e9b      	ldrb	r3, [r3, #26]
 8001746:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001748:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_ADC_Init+0x118>
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	015b      	lsls	r3, r3, #5
 8001756:	e000      	b.n	800175a <HAL_ADC_Init+0x11a>
 8001758:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800175a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001760:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2b00      	cmp	r3, #0
 8001768:	da04      	bge.n	8001774 <HAL_ADC_Init+0x134>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	e001      	b.n	8001778 <HAL_ADC_Init+0x138>
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001778:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	212c      	movs	r1, #44	; 0x2c
 800177e:	5c5b      	ldrb	r3, [r3, r1]
 8001780:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001782:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2220      	movs	r2, #32
 800178e:	5c9b      	ldrb	r3, [r3, r2]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d115      	bne.n	80017c0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7e9b      	ldrb	r3, [r3, #26]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	0252      	lsls	r2, r2, #9
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	e00b      	b.n	80017c0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	2220      	movs	r2, #32
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	2201      	movs	r2, #1
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00a      	beq.n	80017de <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017cc:	23e0      	movs	r3, #224	; 0xe0
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80017d6:	4313      	orrs	r3, r2
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4a65      	ldr	r2, [pc, #404]	; (800197c <HAL_ADC_Init+0x33c>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	0f9b      	lsrs	r3, r3, #30
 80017fa:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001800:	4313      	orrs	r3, r2
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4313      	orrs	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	223c      	movs	r2, #60	; 0x3c
 800180c:	5c9b      	ldrb	r3, [r3, r2]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d111      	bne.n	8001836 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	0f9b      	lsrs	r3, r3, #30
 8001818:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800181e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001824:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800182a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	4313      	orrs	r3, r2
 8001830:	2201      	movs	r2, #1
 8001832:	4313      	orrs	r3, r2
 8001834:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	4a50      	ldr	r2, [pc, #320]	; (8001980 <HAL_ADC_Init+0x340>)
 800183e:	4013      	ands	r3, r2
 8001840:	0019      	movs	r1, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	430a      	orrs	r2, r1
 800184a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	23c0      	movs	r3, #192	; 0xc0
 8001852:	061b      	lsls	r3, r3, #24
 8001854:	429a      	cmp	r2, r3
 8001856:	d018      	beq.n	800188a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	05db      	lsls	r3, r3, #23
 8001860:	429a      	cmp	r2, r3
 8001862:	d012      	beq.n	800188a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	061b      	lsls	r3, r3, #24
 800186c:	429a      	cmp	r2, r3
 800186e:	d00c      	beq.n	800188a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <HAL_ADC_Init+0x344>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a44      	ldr	r2, [pc, #272]	; (8001988 <HAL_ADC_Init+0x348>)
 8001876:	4013      	ands	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	23f0      	movs	r3, #240	; 0xf0
 8001880:	039b      	lsls	r3, r3, #14
 8001882:	401a      	ands	r2, r3
 8001884:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <HAL_ADC_Init+0x344>)
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001892:	001a      	movs	r2, r3
 8001894:	2100      	movs	r1, #0
 8001896:	f7ff fdbe 	bl	8001416 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a2:	493a      	ldr	r1, [pc, #232]	; (800198c <HAL_ADC_Init+0x34c>)
 80018a4:	001a      	movs	r2, r3
 80018a6:	f7ff fdb6 	bl	8001416 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2110      	movs	r1, #16
 80018be:	4249      	negs	r1, r1
 80018c0:	430a      	orrs	r2, r1
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
 80018c4:	e018      	b.n	80018f8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691a      	ldr	r2, [r3, #16]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	039b      	lsls	r3, r3, #14
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d112      	bne.n	80018f8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	3b01      	subs	r3, #1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	221c      	movs	r2, #28
 80018e2:	4013      	ands	r3, r2
 80018e4:	2210      	movs	r2, #16
 80018e6:	4252      	negs	r2, r2
 80018e8:	409a      	lsls	r2, r3
 80018ea:	0011      	movs	r1, r2
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2100      	movs	r1, #0
 80018fe:	0018      	movs	r0, r3
 8001900:	f7ff fda6 	bl	8001450 <LL_ADC_GetSamplingTimeCommonChannels>
 8001904:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800190a:	429a      	cmp	r2, r3
 800190c:	d10b      	bne.n	8001926 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	2203      	movs	r2, #3
 800191a:	4393      	bics	r3, r2
 800191c:	2201      	movs	r2, #1
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001924:	e01c      	b.n	8001960 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	2212      	movs	r2, #18
 800192c:	4393      	bics	r3, r2
 800192e:	2210      	movs	r2, #16
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	2201      	movs	r2, #1
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001942:	231f      	movs	r3, #31
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800194a:	e009      	b.n	8001960 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	2210      	movs	r2, #16
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001958:	231f      	movs	r3, #31
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001960:	231f      	movs	r3, #31
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	781b      	ldrb	r3, [r3, #0]
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b008      	add	sp, #32
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	20000004 	.word	0x20000004
 8001974:	00030d40 	.word	0x00030d40
 8001978:	fffffefd 	.word	0xfffffefd
 800197c:	ffde0201 	.word	0xffde0201
 8001980:	1ffffc02 	.word	0x1ffffc02
 8001984:	40012708 	.word	0x40012708
 8001988:	ffc3ffff 	.word	0xffc3ffff
 800198c:	07ffff04 	.word	0x07ffff04

08001990 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff fe3d 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d135      	bne.n	8001a12 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2254      	movs	r2, #84	; 0x54
 80019aa:	5c9b      	ldrb	r3, [r3, r2]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_Start+0x24>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e035      	b.n	8001a20 <HAL_ADC_Start+0x90>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2254      	movs	r2, #84	; 0x54
 80019b8:	2101      	movs	r1, #1
 80019ba:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019bc:	250f      	movs	r5, #15
 80019be:	197c      	adds	r4, r7, r5
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	0018      	movs	r0, r3
 80019c4:	f000 faaa 	bl	8001f1c <ADC_Enable>
 80019c8:	0003      	movs	r3, r0
 80019ca:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019cc:	197b      	adds	r3, r7, r5
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d119      	bne.n	8001a08 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <HAL_ADC_Start+0x98>)
 80019da:	4013      	ands	r3, r2
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	0052      	lsls	r2, r2, #1
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	221c      	movs	r2, #28
 80019f2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2254      	movs	r2, #84	; 0x54
 80019f8:	2100      	movs	r1, #0
 80019fa:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff fdf9 	bl	80015f8 <LL_ADC_REG_StartConversion>
 8001a06:	e008      	b.n	8001a1a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2254      	movs	r2, #84	; 0x54
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	5499      	strb	r1, [r3, r2]
 8001a10:	e003      	b.n	8001a1a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a12:	230f      	movs	r3, #15
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	2202      	movs	r2, #2
 8001a18:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001a1a:	230f      	movs	r3, #15
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	781b      	ldrb	r3, [r3, #0]
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b004      	add	sp, #16
 8001a26:	bdb0      	pop	{r4, r5, r7, pc}
 8001a28:	fffff0fe 	.word	0xfffff0fe

08001a2c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d102      	bne.n	8001a44 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001a3e:	2308      	movs	r3, #8
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e00f      	b.n	8001a64 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d007      	beq.n	8001a60 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	2220      	movs	r2, #32
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e072      	b.n	8001b46 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001a60:	2304      	movs	r3, #4
 8001a62:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a64:	f7ff fc88 	bl	8001378 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001a6c:	e01f      	b.n	8001aae <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	d01c      	beq.n	8001aae <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a74:	f7ff fc80 	bl	8001378 <HAL_GetTick>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d302      	bcc.n	8001a8a <HAL_ADC_PollForConversion+0x5e>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d111      	bne.n	8001aae <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4013      	ands	r3, r2
 8001a94:	d10b      	bne.n	8001aae <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2254      	movs	r2, #84	; 0x54
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e04b      	b.n	8001b46 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d0d9      	beq.n	8001a6e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	0092      	lsls	r2, r2, #2
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7ff fcd6 	bl	800147e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ad2:	1e03      	subs	r3, r0, #0
 8001ad4:	d02e      	beq.n	8001b34 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7e9b      	ldrb	r3, [r3, #26]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d12a      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d123      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff fd93 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 8001af6:	1e03      	subs	r3, r0, #0
 8001af8:	d110      	bne.n	8001b1c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	210c      	movs	r1, #12
 8001b06:	438a      	bics	r2, r1
 8001b08:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <HAL_ADC_PollForConversion+0x124>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	2201      	movs	r2, #1
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	659a      	str	r2, [r3, #88]	; 0x58
 8001b1a:	e00b      	b.n	8001b34 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b20:	2220      	movs	r2, #32
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7e1b      	ldrb	r3, [r3, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d103      	bne.n	8001b44 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	220c      	movs	r2, #12
 8001b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b004      	add	sp, #16
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	fffffefe 	.word	0xfffffefe

08001b54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b002      	add	sp, #8
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b76:	2317      	movs	r3, #23
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2254      	movs	r2, #84	; 0x54
 8001b86:	5c9b      	ldrb	r3, [r3, r2]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x24>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e1c0      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x3a6>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2254      	movs	r2, #84	; 0x54
 8001b94:	2101      	movs	r1, #1
 8001b96:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff fd3d 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 8001ba2:	1e03      	subs	r3, r0, #0
 8001ba4:	d000      	beq.n	8001ba8 <HAL_ADC_ConfigChannel+0x3c>
 8001ba6:	e1a3      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d100      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x46>
 8001bb0:	e143      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d004      	beq.n	8001bc8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bc2:	4ac1      	ldr	r2, [pc, #772]	; (8001ec8 <HAL_ADC_ConfigChannel+0x35c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d108      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	0010      	movs	r0, r2
 8001bd4:	f7ff fc84 	bl	80014e0 <LL_ADC_REG_SetSequencerChAdd>
 8001bd8:	e0c9      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	211f      	movs	r1, #31
 8001be4:	400b      	ands	r3, r1
 8001be6:	210f      	movs	r1, #15
 8001be8:	4099      	lsls	r1, r3
 8001bea:	000b      	movs	r3, r1
 8001bec:	43db      	mvns	r3, r3
 8001bee:	4013      	ands	r3, r2
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	035b      	lsls	r3, r3, #13
 8001bf8:	0b5b      	lsrs	r3, r3, #13
 8001bfa:	d105      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x9c>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	0e9b      	lsrs	r3, r3, #26
 8001c02:	221f      	movs	r2, #31
 8001c04:	4013      	ands	r3, r2
 8001c06:	e098      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d000      	beq.n	8001c14 <HAL_ADC_ConfigChannel+0xa8>
 8001c12:	e091      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x1cc>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d000      	beq.n	8001c20 <HAL_ADC_ConfigChannel+0xb4>
 8001c1e:	e089      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x1c8>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2204      	movs	r2, #4
 8001c26:	4013      	ands	r3, r2
 8001c28:	d000      	beq.n	8001c2c <HAL_ADC_ConfigChannel+0xc0>
 8001c2a:	e081      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x1c4>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2208      	movs	r2, #8
 8001c32:	4013      	ands	r3, r2
 8001c34:	d000      	beq.n	8001c38 <HAL_ADC_ConfigChannel+0xcc>
 8001c36:	e079      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x1c0>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d000      	beq.n	8001c44 <HAL_ADC_ConfigChannel+0xd8>
 8001c42:	e071      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x1bc>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d000      	beq.n	8001c50 <HAL_ADC_ConfigChannel+0xe4>
 8001c4e:	e069      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x1b8>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	4013      	ands	r3, r2
 8001c58:	d000      	beq.n	8001c5c <HAL_ADC_ConfigChannel+0xf0>
 8001c5a:	e061      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x1b4>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	4013      	ands	r3, r2
 8001c64:	d000      	beq.n	8001c68 <HAL_ADC_ConfigChannel+0xfc>
 8001c66:	e059      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x1b0>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4013      	ands	r3, r2
 8001c72:	d151      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1ac>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d149      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1a8>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d141      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x1a4>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4013      	ands	r3, r2
 8001c96:	d139      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x1a0>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	015b      	lsls	r3, r3, #5
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d131      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x19c>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	019b      	lsls	r3, r3, #6
 8001cac:	4013      	ands	r3, r2
 8001cae:	d129      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x198>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	01db      	lsls	r3, r3, #7
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d121      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x194>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d119      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x190>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	025b      	lsls	r3, r3, #9
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d111      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x18c>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	029b      	lsls	r3, r3, #10
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d109      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x188>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	02db      	lsls	r3, r3, #11
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d001      	beq.n	8001cf0 <HAL_ADC_ConfigChannel+0x184>
 8001cec:	2312      	movs	r3, #18
 8001cee:	e024      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e022      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001cf4:	2311      	movs	r3, #17
 8001cf6:	e020      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001cf8:	2310      	movs	r3, #16
 8001cfa:	e01e      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	e01c      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d00:	230e      	movs	r3, #14
 8001d02:	e01a      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d04:	230d      	movs	r3, #13
 8001d06:	e018      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d08:	230c      	movs	r3, #12
 8001d0a:	e016      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d0c:	230b      	movs	r3, #11
 8001d0e:	e014      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d10:	230a      	movs	r3, #10
 8001d12:	e012      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d14:	2309      	movs	r3, #9
 8001d16:	e010      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d18:	2308      	movs	r3, #8
 8001d1a:	e00e      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d1c:	2307      	movs	r3, #7
 8001d1e:	e00c      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d20:	2306      	movs	r3, #6
 8001d22:	e00a      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d24:	2305      	movs	r3, #5
 8001d26:	e008      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d28:	2304      	movs	r3, #4
 8001d2a:	e006      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e004      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e002      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1ce>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	6852      	ldr	r2, [r2, #4]
 8001d3e:	201f      	movs	r0, #31
 8001d40:	4002      	ands	r2, r0
 8001d42:	4093      	lsls	r3, r2
 8001d44:	000a      	movs	r2, r1
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d808      	bhi.n	8001d6e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	001a      	movs	r2, r3
 8001d6a:	f7ff fb99 	bl	80014a0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6819      	ldr	r1, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	f7ff fbd4 	bl	8001528 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db00      	blt.n	8001d8a <HAL_ADC_ConfigChannel+0x21e>
 8001d88:	e0bc      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d8a:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_ADC_ConfigChannel+0x360>)
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff fb35 	bl	80013fc <LL_ADC_GetCommonPathInternalCh>
 8001d92:	0003      	movs	r3, r0
 8001d94:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a4d      	ldr	r2, [pc, #308]	; (8001ed0 <HAL_ADC_ConfigChannel+0x364>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d122      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001da8:	d11d      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2280      	movs	r2, #128	; 0x80
 8001dae:	0412      	lsls	r2, r2, #16
 8001db0:	4313      	orrs	r3, r2
 8001db2:	4a46      	ldr	r2, [pc, #280]	; (8001ecc <HAL_ADC_ConfigChannel+0x360>)
 8001db4:	0019      	movs	r1, r3
 8001db6:	0010      	movs	r0, r2
 8001db8:	f7ff fb0c 	bl	80013d4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dbc:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <HAL_ADC_ConfigChannel+0x368>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4945      	ldr	r1, [pc, #276]	; (8001ed8 <HAL_ADC_ConfigChannel+0x36c>)
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7fe f99e 	bl	8000104 <__udivsi3>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	0013      	movs	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	189b      	adds	r3, r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dd6:	e002      	b.n	8001dde <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f9      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001de4:	e08e      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a3c      	ldr	r2, [pc, #240]	; (8001edc <HAL_ADC_ConfigChannel+0x370>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d10e      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	045b      	lsls	r3, r3, #17
 8001df6:	4013      	ands	r3, r2
 8001df8:	d109      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2280      	movs	r2, #128	; 0x80
 8001dfe:	0452      	lsls	r2, r2, #17
 8001e00:	4313      	orrs	r3, r2
 8001e02:	4a32      	ldr	r2, [pc, #200]	; (8001ecc <HAL_ADC_ConfigChannel+0x360>)
 8001e04:	0019      	movs	r1, r3
 8001e06:	0010      	movs	r0, r2
 8001e08:	f7ff fae4 	bl	80013d4 <LL_ADC_SetCommonPathInternalCh>
 8001e0c:	e07a      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a33      	ldr	r2, [pc, #204]	; (8001ee0 <HAL_ADC_ConfigChannel+0x374>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d000      	beq.n	8001e1a <HAL_ADC_ConfigChannel+0x2ae>
 8001e18:	e074      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	03db      	lsls	r3, r3, #15
 8001e20:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e22:	d000      	beq.n	8001e26 <HAL_ADC_ConfigChannel+0x2ba>
 8001e24:	e06e      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	03d2      	lsls	r2, r2, #15
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <HAL_ADC_ConfigChannel+0x360>)
 8001e30:	0019      	movs	r1, r3
 8001e32:	0010      	movs	r0, r2
 8001e34:	f7ff face 	bl	80013d4 <LL_ADC_SetCommonPathInternalCh>
 8001e38:	e064      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	061b      	lsls	r3, r3, #24
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d004      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <HAL_ADC_ConfigChannel+0x35c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d107      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0019      	movs	r1, r3
 8001e5a:	0010      	movs	r0, r2
 8001e5c:	f7ff fb51 	bl	8001502 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da4d      	bge.n	8001f04 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_ADC_ConfigChannel+0x360>)
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f7ff fac6 	bl	80013fc <LL_ADC_GetCommonPathInternalCh>
 8001e70:	0003      	movs	r3, r0
 8001e72:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <HAL_ADC_ConfigChannel+0x364>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d108      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_ADC_ConfigChannel+0x378>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_ADC_ConfigChannel+0x360>)
 8001e86:	0019      	movs	r1, r3
 8001e88:	0010      	movs	r0, r2
 8001e8a:	f7ff faa3 	bl	80013d4 <LL_ADC_SetCommonPathInternalCh>
 8001e8e:	e039      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a11      	ldr	r2, [pc, #68]	; (8001edc <HAL_ADC_ConfigChannel+0x370>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d108      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <HAL_ADC_ConfigChannel+0x37c>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <HAL_ADC_ConfigChannel+0x360>)
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	0010      	movs	r0, r2
 8001ea6:	f7ff fa95 	bl	80013d4 <LL_ADC_SetCommonPathInternalCh>
 8001eaa:	e02b      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <HAL_ADC_ConfigChannel+0x374>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d126      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <HAL_ADC_ConfigChannel+0x380>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <HAL_ADC_ConfigChannel+0x360>)
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	f7ff fa87 	bl	80013d4 <LL_ADC_SetCommonPathInternalCh>
 8001ec6:	e01d      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x398>
 8001ec8:	80000004 	.word	0x80000004
 8001ecc:	40012708 	.word	0x40012708
 8001ed0:	b0001000 	.word	0xb0001000
 8001ed4:	20000004 	.word	0x20000004
 8001ed8:	00030d40 	.word	0x00030d40
 8001edc:	b8004000 	.word	0xb8004000
 8001ee0:	b4002000 	.word	0xb4002000
 8001ee4:	ff7fffff 	.word	0xff7fffff
 8001ee8:	feffffff 	.word	0xfeffffff
 8001eec:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001efc:	2317      	movs	r3, #23
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2254      	movs	r2, #84	; 0x54
 8001f08:	2100      	movs	r1, #0
 8001f0a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f0c:	2317      	movs	r3, #23
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781b      	ldrb	r3, [r3, #0]
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b006      	add	sp, #24
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)

08001f1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff fb51 	bl	80015d4 <LL_ADC_IsEnabled>
 8001f32:	1e03      	subs	r3, r0, #0
 8001f34:	d000      	beq.n	8001f38 <ADC_Enable+0x1c>
 8001f36:	e069      	b.n	800200c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	4a36      	ldr	r2, [pc, #216]	; (8002018 <ADC_Enable+0xfc>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	d00d      	beq.n	8001f60 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	2210      	movs	r2, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	2201      	movs	r2, #1
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e056      	b.n	800200e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7ff fb23 	bl	80015b0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	; (800201c <ADC_Enable+0x100>)
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7ff fa45 	bl	80013fc <LL_ADC_GetCommonPathInternalCh>
 8001f72:	0002      	movs	r2, r0
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	041b      	lsls	r3, r3, #16
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d00f      	beq.n	8001f9c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <ADC_Enable+0x104>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4928      	ldr	r1, [pc, #160]	; (8002024 <ADC_Enable+0x108>)
 8001f82:	0018      	movs	r0, r3
 8001f84:	f7fe f8be 	bl	8000104 <__udivsi3>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001f8c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f8e:	e002      	b.n	8001f96 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f9      	bne.n	8001f90 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7e5b      	ldrb	r3, [r3, #25]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d033      	beq.n	800200c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001fa4:	f7ff f9e8 	bl	8001378 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fac:	e027      	b.n	8001ffe <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f7ff fb0e 	bl	80015d4 <LL_ADC_IsEnabled>
 8001fb8:	1e03      	subs	r3, r0, #0
 8001fba:	d104      	bne.n	8001fc6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff faf5 	bl	80015b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fc6:	f7ff f9d7 	bl	8001378 <HAL_GetTick>
 8001fca:	0002      	movs	r2, r0
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d914      	bls.n	8001ffe <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d00d      	beq.n	8001ffe <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e007      	b.n	800200e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2201      	movs	r2, #1
 8002006:	4013      	ands	r3, r2
 8002008:	2b01      	cmp	r3, #1
 800200a:	d1d0      	bne.n	8001fae <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	b004      	add	sp, #16
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	80000017 	.word	0x80000017
 800201c:	40012708 	.word	0x40012708
 8002020:	20000004 	.word	0x20000004
 8002024:	00030d40 	.word	0x00030d40

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	0002      	movs	r2, r0
 8002030:	1dfb      	adds	r3, r7, #7
 8002032:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002034:	1dfb      	adds	r3, r7, #7
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b7f      	cmp	r3, #127	; 0x7f
 800203a:	d809      	bhi.n	8002050 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203c:	1dfb      	adds	r3, r7, #7
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	001a      	movs	r2, r3
 8002042:	231f      	movs	r3, #31
 8002044:	401a      	ands	r2, r3
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <__NVIC_EnableIRQ+0x30>)
 8002048:	2101      	movs	r1, #1
 800204a:	4091      	lsls	r1, r2
 800204c:	000a      	movs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b002      	add	sp, #8
 8002056:	bd80      	pop	{r7, pc}
 8002058:	e000e100 	.word	0xe000e100

0800205c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	0002      	movs	r2, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b7f      	cmp	r3, #127	; 0x7f
 8002070:	d828      	bhi.n	80020c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002072:	4a2f      	ldr	r2, [pc, #188]	; (8002130 <__NVIC_SetPriority+0xd4>)
 8002074:	1dfb      	adds	r3, r7, #7
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b25b      	sxtb	r3, r3
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	33c0      	adds	r3, #192	; 0xc0
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	589b      	ldr	r3, [r3, r2]
 8002082:	1dfa      	adds	r2, r7, #7
 8002084:	7812      	ldrb	r2, [r2, #0]
 8002086:	0011      	movs	r1, r2
 8002088:	2203      	movs	r2, #3
 800208a:	400a      	ands	r2, r1
 800208c:	00d2      	lsls	r2, r2, #3
 800208e:	21ff      	movs	r1, #255	; 0xff
 8002090:	4091      	lsls	r1, r2
 8002092:	000a      	movs	r2, r1
 8002094:	43d2      	mvns	r2, r2
 8002096:	401a      	ands	r2, r3
 8002098:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	019b      	lsls	r3, r3, #6
 800209e:	22ff      	movs	r2, #255	; 0xff
 80020a0:	401a      	ands	r2, r3
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	0018      	movs	r0, r3
 80020a8:	2303      	movs	r3, #3
 80020aa:	4003      	ands	r3, r0
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020b0:	481f      	ldr	r0, [pc, #124]	; (8002130 <__NVIC_SetPriority+0xd4>)
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	430a      	orrs	r2, r1
 80020bc:	33c0      	adds	r3, #192	; 0xc0
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020c2:	e031      	b.n	8002128 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020c4:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <__NVIC_SetPriority+0xd8>)
 80020c6:	1dfb      	adds	r3, r7, #7
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	0019      	movs	r1, r3
 80020cc:	230f      	movs	r3, #15
 80020ce:	400b      	ands	r3, r1
 80020d0:	3b08      	subs	r3, #8
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3306      	adds	r3, #6
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	18d3      	adds	r3, r2, r3
 80020da:	3304      	adds	r3, #4
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	1dfa      	adds	r2, r7, #7
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	0011      	movs	r1, r2
 80020e4:	2203      	movs	r2, #3
 80020e6:	400a      	ands	r2, r1
 80020e8:	00d2      	lsls	r2, r2, #3
 80020ea:	21ff      	movs	r1, #255	; 0xff
 80020ec:	4091      	lsls	r1, r2
 80020ee:	000a      	movs	r2, r1
 80020f0:	43d2      	mvns	r2, r2
 80020f2:	401a      	ands	r2, r3
 80020f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	019b      	lsls	r3, r3, #6
 80020fa:	22ff      	movs	r2, #255	; 0xff
 80020fc:	401a      	ands	r2, r3
 80020fe:	1dfb      	adds	r3, r7, #7
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	0018      	movs	r0, r3
 8002104:	2303      	movs	r3, #3
 8002106:	4003      	ands	r3, r0
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800210c:	4809      	ldr	r0, [pc, #36]	; (8002134 <__NVIC_SetPriority+0xd8>)
 800210e:	1dfb      	adds	r3, r7, #7
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	001c      	movs	r4, r3
 8002114:	230f      	movs	r3, #15
 8002116:	4023      	ands	r3, r4
 8002118:	3b08      	subs	r3, #8
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	430a      	orrs	r2, r1
 800211e:	3306      	adds	r3, #6
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	18c3      	adds	r3, r0, r3
 8002124:	3304      	adds	r3, #4
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	46c0      	nop			; (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	b003      	add	sp, #12
 800212e:	bd90      	pop	{r4, r7, pc}
 8002130:	e000e100 	.word	0xe000e100
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	1e5a      	subs	r2, r3, #1
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	045b      	lsls	r3, r3, #17
 8002148:	429a      	cmp	r2, r3
 800214a:	d301      	bcc.n	8002150 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214c:	2301      	movs	r3, #1
 800214e:	e010      	b.n	8002172 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <SysTick_Config+0x44>)
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	3a01      	subs	r2, #1
 8002156:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002158:	2301      	movs	r3, #1
 800215a:	425b      	negs	r3, r3
 800215c:	2103      	movs	r1, #3
 800215e:	0018      	movs	r0, r3
 8002160:	f7ff ff7c 	bl	800205c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <SysTick_Config+0x44>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <SysTick_Config+0x44>)
 800216c:	2207      	movs	r2, #7
 800216e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002170:	2300      	movs	r3, #0
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b002      	add	sp, #8
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	e000e010 	.word	0xe000e010

08002180 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	210f      	movs	r1, #15
 800218c:	187b      	adds	r3, r7, r1
 800218e:	1c02      	adds	r2, r0, #0
 8002190:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	187b      	adds	r3, r7, r1
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b25b      	sxtb	r3, r3
 800219a:	0011      	movs	r1, r2
 800219c:	0018      	movs	r0, r3
 800219e:	f7ff ff5d 	bl	800205c <__NVIC_SetPriority>
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b004      	add	sp, #16
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	0002      	movs	r2, r0
 80021b2:	1dfb      	adds	r3, r7, #7
 80021b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b6:	1dfb      	adds	r3, r7, #7
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff ff33 	bl	8002028 <__NVIC_EnableIRQ>
}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b002      	add	sp, #8
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7ff ffaf 	bl	8002138 <SysTick_Config>
 80021da:	0003      	movs	r3, r0
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f2:	e147      	b.n	8002484 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4091      	lsls	r1, r2
 80021fe:	000a      	movs	r2, r1
 8002200:	4013      	ands	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d100      	bne.n	800220c <HAL_GPIO_Init+0x28>
 800220a:	e138      	b.n	800247e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2203      	movs	r2, #3
 8002212:	4013      	ands	r3, r2
 8002214:	2b01      	cmp	r3, #1
 8002216:	d005      	beq.n	8002224 <HAL_GPIO_Init+0x40>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2203      	movs	r2, #3
 800221e:	4013      	ands	r3, r2
 8002220:	2b02      	cmp	r3, #2
 8002222:	d130      	bne.n	8002286 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	409a      	lsls	r2, r3
 8002232:	0013      	movs	r3, r2
 8002234:	43da      	mvns	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	409a      	lsls	r2, r3
 8002246:	0013      	movs	r3, r2
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800225a:	2201      	movs	r2, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
 8002260:	0013      	movs	r3, r2
 8002262:	43da      	mvns	r2, r3
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	2201      	movs	r2, #1
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
 8002278:	0013      	movs	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2203      	movs	r2, #3
 800228c:	4013      	ands	r3, r2
 800228e:	2b03      	cmp	r3, #3
 8002290:	d017      	beq.n	80022c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	2203      	movs	r2, #3
 800229e:	409a      	lsls	r2, r3
 80022a0:	0013      	movs	r3, r2
 80022a2:	43da      	mvns	r2, r3
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	409a      	lsls	r2, r3
 80022b4:	0013      	movs	r3, r2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2203      	movs	r2, #3
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d123      	bne.n	8002316 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	58d3      	ldr	r3, [r2, r3]
 80022da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2207      	movs	r2, #7
 80022e0:	4013      	ands	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	409a      	lsls	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	43da      	mvns	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2107      	movs	r1, #7
 80022fa:	400b      	ands	r3, r1
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	409a      	lsls	r2, r3
 8002300:	0013      	movs	r3, r2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	08da      	lsrs	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3208      	adds	r2, #8
 8002310:	0092      	lsls	r2, r2, #2
 8002312:	6939      	ldr	r1, [r7, #16]
 8002314:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	409a      	lsls	r2, r3
 8002324:	0013      	movs	r3, r2
 8002326:	43da      	mvns	r2, r3
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2203      	movs	r2, #3
 8002334:	401a      	ands	r2, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	409a      	lsls	r2, r3
 800233c:	0013      	movs	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	23c0      	movs	r3, #192	; 0xc0
 8002350:	029b      	lsls	r3, r3, #10
 8002352:	4013      	ands	r3, r2
 8002354:	d100      	bne.n	8002358 <HAL_GPIO_Init+0x174>
 8002356:	e092      	b.n	800247e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002358:	4a50      	ldr	r2, [pc, #320]	; (800249c <HAL_GPIO_Init+0x2b8>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3318      	adds	r3, #24
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	589b      	ldr	r3, [r3, r2]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2203      	movs	r2, #3
 800236a:	4013      	ands	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	220f      	movs	r2, #15
 8002370:	409a      	lsls	r2, r3
 8002372:	0013      	movs	r3, r2
 8002374:	43da      	mvns	r2, r3
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	23a0      	movs	r3, #160	; 0xa0
 8002380:	05db      	lsls	r3, r3, #23
 8002382:	429a      	cmp	r2, r3
 8002384:	d013      	beq.n	80023ae <HAL_GPIO_Init+0x1ca>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a45      	ldr	r2, [pc, #276]	; (80024a0 <HAL_GPIO_Init+0x2bc>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00d      	beq.n	80023aa <HAL_GPIO_Init+0x1c6>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a44      	ldr	r2, [pc, #272]	; (80024a4 <HAL_GPIO_Init+0x2c0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d007      	beq.n	80023a6 <HAL_GPIO_Init+0x1c2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a43      	ldr	r2, [pc, #268]	; (80024a8 <HAL_GPIO_Init+0x2c4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_GPIO_Init+0x1be>
 800239e:	2303      	movs	r3, #3
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x1cc>
 80023a2:	2305      	movs	r3, #5
 80023a4:	e004      	b.n	80023b0 <HAL_GPIO_Init+0x1cc>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e002      	b.n	80023b0 <HAL_GPIO_Init+0x1cc>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x1cc>
 80023ae:	2300      	movs	r3, #0
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	2103      	movs	r1, #3
 80023b4:	400a      	ands	r2, r1
 80023b6:	00d2      	lsls	r2, r2, #3
 80023b8:	4093      	lsls	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80023c0:	4936      	ldr	r1, [pc, #216]	; (800249c <HAL_GPIO_Init+0x2b8>)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3318      	adds	r3, #24
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023ce:	4b33      	ldr	r3, [pc, #204]	; (800249c <HAL_GPIO_Init+0x2b8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	43da      	mvns	r2, r3
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	035b      	lsls	r3, r3, #13
 80023e6:	4013      	ands	r3, r2
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023f2:	4b2a      	ldr	r3, [pc, #168]	; (800249c <HAL_GPIO_Init+0x2b8>)
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80023f8:	4b28      	ldr	r3, [pc, #160]	; (800249c <HAL_GPIO_Init+0x2b8>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	43da      	mvns	r2, r3
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	039b      	lsls	r3, r3, #14
 8002410:	4013      	ands	r3, r2
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800241c:	4b1f      	ldr	r3, [pc, #124]	; (800249c <HAL_GPIO_Init+0x2b8>)
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002422:	4a1e      	ldr	r2, [pc, #120]	; (800249c <HAL_GPIO_Init+0x2b8>)
 8002424:	2384      	movs	r3, #132	; 0x84
 8002426:	58d3      	ldr	r3, [r2, r3]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	43da      	mvns	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	029b      	lsls	r3, r3, #10
 800243c:	4013      	ands	r3, r2
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002448:	4914      	ldr	r1, [pc, #80]	; (800249c <HAL_GPIO_Init+0x2b8>)
 800244a:	2284      	movs	r2, #132	; 0x84
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002450:	4a12      	ldr	r2, [pc, #72]	; (800249c <HAL_GPIO_Init+0x2b8>)
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	58d3      	ldr	r3, [r2, r3]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43da      	mvns	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	025b      	lsls	r3, r3, #9
 800246a:	4013      	ands	r3, r2
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002476:	4909      	ldr	r1, [pc, #36]	; (800249c <HAL_GPIO_Init+0x2b8>)
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3301      	adds	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	40da      	lsrs	r2, r3
 800248c:	1e13      	subs	r3, r2, #0
 800248e:	d000      	beq.n	8002492 <HAL_GPIO_Init+0x2ae>
 8002490:	e6b0      	b.n	80021f4 <HAL_GPIO_Init+0x10>
  }
}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b006      	add	sp, #24
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021800 	.word	0x40021800
 80024a0:	50000400 	.word	0x50000400
 80024a4:	50000800 	.word	0x50000800
 80024a8:	50000c00 	.word	0x50000c00

080024ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	000a      	movs	r2, r1
 80024b6:	1cbb      	adds	r3, r7, #2
 80024b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	1cba      	adds	r2, r7, #2
 80024c0:	8812      	ldrh	r2, [r2, #0]
 80024c2:	4013      	ands	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80024c6:	230f      	movs	r3, #15
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e003      	b.n	80024d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024d0:	230f      	movs	r3, #15
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80024d8:	230f      	movs	r3, #15
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	781b      	ldrb	r3, [r3, #0]
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b004      	add	sp, #16
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	0008      	movs	r0, r1
 80024f0:	0011      	movs	r1, r2
 80024f2:	1cbb      	adds	r3, r7, #2
 80024f4:	1c02      	adds	r2, r0, #0
 80024f6:	801a      	strh	r2, [r3, #0]
 80024f8:	1c7b      	adds	r3, r7, #1
 80024fa:	1c0a      	adds	r2, r1, #0
 80024fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024fe:	1c7b      	adds	r3, r7, #1
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002506:	1cbb      	adds	r3, r7, #2
 8002508:	881a      	ldrh	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800250e:	e003      	b.n	8002518 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002510:	1cbb      	adds	r3, r7, #2
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002518:	46c0      	nop			; (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b002      	add	sp, #8
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a19      	ldr	r2, [pc, #100]	; (8002594 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800252e:	4013      	ands	r3, r2
 8002530:	0019      	movs	r1, r3
 8002532:	4b17      	ldr	r3, [pc, #92]	; (8002590 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	d11f      	bne.n	8002584 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	0013      	movs	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	189b      	adds	r3, r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4912      	ldr	r1, [pc, #72]	; (800259c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002552:	0018      	movs	r0, r3
 8002554:	f7fd fdd6 	bl	8000104 <__udivsi3>
 8002558:	0003      	movs	r3, r0
 800255a:	3301      	adds	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800255e:	e008      	b.n	8002572 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3b01      	subs	r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e001      	b.n	8002572 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e009      	b.n	8002586 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	401a      	ands	r2, r3
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	429a      	cmp	r2, r3
 8002582:	d0ed      	beq.n	8002560 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b004      	add	sp, #16
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	40007000 	.word	0x40007000
 8002594:	fffff9ff 	.word	0xfffff9ff
 8002598:	20000004 	.word	0x20000004
 800259c:	000f4240 	.word	0x000f4240

080025a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	23e0      	movs	r3, #224	; 0xe0
 80025aa:	01db      	lsls	r3, r3, #7
 80025ac:	4013      	ands	r3, r2
}
 80025ae:	0018      	movs	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000

080025b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e2fe      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2201      	movs	r2, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	d100      	bne.n	80025d6 <HAL_RCC_OscConfig+0x1e>
 80025d4:	e07c      	b.n	80026d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025d6:	4bc3      	ldr	r3, [pc, #780]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2238      	movs	r2, #56	; 0x38
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e0:	4bc0      	ldr	r3, [pc, #768]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2203      	movs	r2, #3
 80025e6:	4013      	ands	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d102      	bne.n	80025f6 <HAL_RCC_OscConfig+0x3e>
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d002      	beq.n	80025fc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d10b      	bne.n	8002614 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	4bb9      	ldr	r3, [pc, #740]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	029b      	lsls	r3, r3, #10
 8002604:	4013      	ands	r3, r2
 8002606:	d062      	beq.n	80026ce <HAL_RCC_OscConfig+0x116>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d15e      	bne.n	80026ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e2d9      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	025b      	lsls	r3, r3, #9
 800261c:	429a      	cmp	r2, r3
 800261e:	d107      	bne.n	8002630 <HAL_RCC_OscConfig+0x78>
 8002620:	4bb0      	ldr	r3, [pc, #704]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4baf      	ldr	r3, [pc, #700]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002626:	2180      	movs	r1, #128	; 0x80
 8002628:	0249      	lsls	r1, r1, #9
 800262a:	430a      	orrs	r2, r1
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e020      	b.n	8002672 <HAL_RCC_OscConfig+0xba>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	23a0      	movs	r3, #160	; 0xa0
 8002636:	02db      	lsls	r3, r3, #11
 8002638:	429a      	cmp	r2, r3
 800263a:	d10e      	bne.n	800265a <HAL_RCC_OscConfig+0xa2>
 800263c:	4ba9      	ldr	r3, [pc, #676]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4ba8      	ldr	r3, [pc, #672]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002642:	2180      	movs	r1, #128	; 0x80
 8002644:	02c9      	lsls	r1, r1, #11
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	4ba6      	ldr	r3, [pc, #664]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4ba5      	ldr	r3, [pc, #660]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	0249      	lsls	r1, r1, #9
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e00b      	b.n	8002672 <HAL_RCC_OscConfig+0xba>
 800265a:	4ba2      	ldr	r3, [pc, #648]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4ba1      	ldr	r3, [pc, #644]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002660:	49a1      	ldr	r1, [pc, #644]	; (80028e8 <HAL_RCC_OscConfig+0x330>)
 8002662:	400a      	ands	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	4b9f      	ldr	r3, [pc, #636]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b9e      	ldr	r3, [pc, #632]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 800266c:	499f      	ldr	r1, [pc, #636]	; (80028ec <HAL_RCC_OscConfig+0x334>)
 800266e:	400a      	ands	r2, r1
 8002670:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d014      	beq.n	80026a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe fe7d 	bl	8001378 <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe fe78 	bl	8001378 <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e298      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002696:	4b93      	ldr	r3, [pc, #588]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	029b      	lsls	r3, r3, #10
 800269e:	4013      	ands	r3, r2
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xcc>
 80026a2:	e015      	b.n	80026d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fe68 	bl	8001378 <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ae:	f7fe fe63 	bl	8001378 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b64      	cmp	r3, #100	; 0x64
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e283      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026c0:	4b88      	ldr	r3, [pc, #544]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	4013      	ands	r3, r2
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCC_OscConfig+0xf6>
 80026cc:	e000      	b.n	80026d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2202      	movs	r2, #2
 80026d6:	4013      	ands	r3, r2
 80026d8:	d100      	bne.n	80026dc <HAL_RCC_OscConfig+0x124>
 80026da:	e099      	b.n	8002810 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026dc:	4b81      	ldr	r3, [pc, #516]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2238      	movs	r2, #56	; 0x38
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e6:	4b7f      	ldr	r3, [pc, #508]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2203      	movs	r2, #3
 80026ec:	4013      	ands	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d102      	bne.n	80026fc <HAL_RCC_OscConfig+0x144>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d002      	beq.n	8002702 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d135      	bne.n	800276e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002702:	4b78      	ldr	r3, [pc, #480]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4013      	ands	r3, r2
 800270c:	d005      	beq.n	800271a <HAL_RCC_OscConfig+0x162>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e256      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	4b72      	ldr	r3, [pc, #456]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4a74      	ldr	r2, [pc, #464]	; (80028f0 <HAL_RCC_OscConfig+0x338>)
 8002720:	4013      	ands	r3, r2
 8002722:	0019      	movs	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	021a      	lsls	r2, r3, #8
 800272a:	4b6e      	ldr	r3, [pc, #440]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 800272c:	430a      	orrs	r2, r1
 800272e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d112      	bne.n	800275c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002736:	4b6b      	ldr	r3, [pc, #428]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6e      	ldr	r2, [pc, #440]	; (80028f4 <HAL_RCC_OscConfig+0x33c>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	4b67      	ldr	r3, [pc, #412]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800274a:	4b66      	ldr	r3, [pc, #408]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0adb      	lsrs	r3, r3, #11
 8002750:	2207      	movs	r2, #7
 8002752:	4013      	ands	r3, r2
 8002754:	4a68      	ldr	r2, [pc, #416]	; (80028f8 <HAL_RCC_OscConfig+0x340>)
 8002756:	40da      	lsrs	r2, r3
 8002758:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_OscConfig+0x344>)
 800275a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800275c:	4b68      	ldr	r3, [pc, #416]	; (8002900 <HAL_RCC_OscConfig+0x348>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0018      	movs	r0, r3
 8002762:	f7fe fdad 	bl	80012c0 <HAL_InitTick>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d051      	beq.n	800280e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e22c      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d030      	beq.n	80027d8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002776:	4b5b      	ldr	r3, [pc, #364]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a5e      	ldr	r2, [pc, #376]	; (80028f4 <HAL_RCC_OscConfig+0x33c>)
 800277c:	4013      	ands	r3, r2
 800277e:	0019      	movs	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002786:	430a      	orrs	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800278a:	4b56      	ldr	r3, [pc, #344]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b55      	ldr	r3, [pc, #340]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	0049      	lsls	r1, r1, #1
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fdee 	bl	8001378 <HAL_GetTick>
 800279c:	0003      	movs	r3, r0
 800279e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a2:	f7fe fde9 	bl	8001378 <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e209      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b4:	4b4b      	ldr	r3, [pc, #300]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4013      	ands	r3, r2
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c0:	4b48      	ldr	r3, [pc, #288]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a4a      	ldr	r2, [pc, #296]	; (80028f0 <HAL_RCC_OscConfig+0x338>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	021a      	lsls	r2, r3, #8
 80027d0:	4b44      	ldr	r3, [pc, #272]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	e01b      	b.n	8002810 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80027d8:	4b42      	ldr	r3, [pc, #264]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80027de:	4949      	ldr	r1, [pc, #292]	; (8002904 <HAL_RCC_OscConfig+0x34c>)
 80027e0:	400a      	ands	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe fdc8 	bl	8001378 <HAL_GetTick>
 80027e8:	0003      	movs	r3, r0
 80027ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ee:	f7fe fdc3 	bl	8001378 <HAL_GetTick>
 80027f2:	0002      	movs	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1e3      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002800:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4013      	ands	r3, r2
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x236>
 800280c:	e000      	b.n	8002810 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800280e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2208      	movs	r2, #8
 8002816:	4013      	ands	r3, r2
 8002818:	d047      	beq.n	80028aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800281a:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2238      	movs	r2, #56	; 0x38
 8002820:	4013      	ands	r3, r2
 8002822:	2b18      	cmp	r3, #24
 8002824:	d10a      	bne.n	800283c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002826:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282a:	2202      	movs	r2, #2
 800282c:	4013      	ands	r3, r2
 800282e:	d03c      	beq.n	80028aa <HAL_RCC_OscConfig+0x2f2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d138      	bne.n	80028aa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e1c5      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d019      	beq.n	8002878 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002844:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 8002846:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002848:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 800284a:	2101      	movs	r1, #1
 800284c:	430a      	orrs	r2, r1
 800284e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fd92 	bl	8001378 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285a:	f7fe fd8d 	bl	8001378 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e1ad      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 800286e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002870:	2202      	movs	r2, #2
 8002872:	4013      	ands	r3, r2
 8002874:	d0f1      	beq.n	800285a <HAL_RCC_OscConfig+0x2a2>
 8002876:	e018      	b.n	80028aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002878:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 800287a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 800287e:	2101      	movs	r1, #1
 8002880:	438a      	bics	r2, r1
 8002882:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fd78 	bl	8001378 <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288e:	f7fe fd73 	bl	8001378 <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e193      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80028a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a4:	2202      	movs	r2, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	d1f1      	bne.n	800288e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2204      	movs	r2, #4
 80028b0:	4013      	ands	r3, r2
 80028b2:	d100      	bne.n	80028b6 <HAL_RCC_OscConfig+0x2fe>
 80028b4:	e0c6      	b.n	8002a44 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b6:	231f      	movs	r3, #31
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2238      	movs	r2, #56	; 0x38
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d11e      	bne.n	8002908 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_RCC_OscConfig+0x32c>)
 80028cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ce:	2202      	movs	r2, #2
 80028d0:	4013      	ands	r3, r2
 80028d2:	d100      	bne.n	80028d6 <HAL_RCC_OscConfig+0x31e>
 80028d4:	e0b6      	b.n	8002a44 <HAL_RCC_OscConfig+0x48c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d000      	beq.n	80028e0 <HAL_RCC_OscConfig+0x328>
 80028de:	e0b1      	b.n	8002a44 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e171      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
 80028e4:	40021000 	.word	0x40021000
 80028e8:	fffeffff 	.word	0xfffeffff
 80028ec:	fffbffff 	.word	0xfffbffff
 80028f0:	ffff80ff 	.word	0xffff80ff
 80028f4:	ffffc7ff 	.word	0xffffc7ff
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	20000004 	.word	0x20000004
 8002900:	20000008 	.word	0x20000008
 8002904:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002908:	4bb1      	ldr	r3, [pc, #708]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 800290a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	055b      	lsls	r3, r3, #21
 8002910:	4013      	ands	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_RCC_OscConfig+0x360>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <HAL_RCC_OscConfig+0x362>
 8002918:	2300      	movs	r3, #0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d011      	beq.n	8002942 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	4bac      	ldr	r3, [pc, #688]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002922:	4bab      	ldr	r3, [pc, #684]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	0549      	lsls	r1, r1, #21
 8002928:	430a      	orrs	r2, r1
 800292a:	63da      	str	r2, [r3, #60]	; 0x3c
 800292c:	4ba8      	ldr	r3, [pc, #672]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 800292e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	055b      	lsls	r3, r3, #21
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800293a:	231f      	movs	r3, #31
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002942:	4ba4      	ldr	r3, [pc, #656]	; (8002bd4 <HAL_RCC_OscConfig+0x61c>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4013      	ands	r3, r2
 800294c:	d11a      	bne.n	8002984 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800294e:	4ba1      	ldr	r3, [pc, #644]	; (8002bd4 <HAL_RCC_OscConfig+0x61c>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4ba0      	ldr	r3, [pc, #640]	; (8002bd4 <HAL_RCC_OscConfig+0x61c>)
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	0049      	lsls	r1, r1, #1
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800295c:	f7fe fd0c 	bl	8001378 <HAL_GetTick>
 8002960:	0003      	movs	r3, r0
 8002962:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002966:	f7fe fd07 	bl	8001378 <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e127      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002978:	4b96      	ldr	r3, [pc, #600]	; (8002bd4 <HAL_RCC_OscConfig+0x61c>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4013      	ands	r3, r2
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x3e2>
 800298c:	4b90      	ldr	r3, [pc, #576]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 800298e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002990:	4b8f      	ldr	r3, [pc, #572]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002992:	2101      	movs	r1, #1
 8002994:	430a      	orrs	r2, r1
 8002996:	65da      	str	r2, [r3, #92]	; 0x5c
 8002998:	e01c      	b.n	80029d4 <HAL_RCC_OscConfig+0x41c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b05      	cmp	r3, #5
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x404>
 80029a2:	4b8b      	ldr	r3, [pc, #556]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 80029a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029a6:	4b8a      	ldr	r3, [pc, #552]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 80029a8:	2104      	movs	r1, #4
 80029aa:	430a      	orrs	r2, r1
 80029ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80029ae:	4b88      	ldr	r3, [pc, #544]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 80029b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029b2:	4b87      	ldr	r3, [pc, #540]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 80029b4:	2101      	movs	r1, #1
 80029b6:	430a      	orrs	r2, r1
 80029b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80029ba:	e00b      	b.n	80029d4 <HAL_RCC_OscConfig+0x41c>
 80029bc:	4b84      	ldr	r3, [pc, #528]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 80029be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029c0:	4b83      	ldr	r3, [pc, #524]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	438a      	bics	r2, r1
 80029c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80029c8:	4b81      	ldr	r3, [pc, #516]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 80029ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029cc:	4b80      	ldr	r3, [pc, #512]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 80029ce:	2104      	movs	r1, #4
 80029d0:	438a      	bics	r2, r1
 80029d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d014      	beq.n	8002a06 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe fccc 	bl	8001378 <HAL_GetTick>
 80029e0:	0003      	movs	r3, r0
 80029e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e4:	e009      	b.n	80029fa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7fe fcc7 	bl	8001378 <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	4a79      	ldr	r2, [pc, #484]	; (8002bd8 <HAL_RCC_OscConfig+0x620>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e0e6      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fa:	4b75      	ldr	r3, [pc, #468]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	2202      	movs	r2, #2
 8002a00:	4013      	ands	r3, r2
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x42e>
 8002a04:	e013      	b.n	8002a2e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7fe fcb7 	bl	8001378 <HAL_GetTick>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a0e:	e009      	b.n	8002a24 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fe fcb2 	bl	8001378 <HAL_GetTick>
 8002a14:	0002      	movs	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	4a6f      	ldr	r2, [pc, #444]	; (8002bd8 <HAL_RCC_OscConfig+0x620>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e0d1      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a24:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	2202      	movs	r2, #2
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a2e:	231f      	movs	r3, #31
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a38:	4b65      	ldr	r3, [pc, #404]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a3c:	4b64      	ldr	r3, [pc, #400]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002a3e:	4967      	ldr	r1, [pc, #412]	; (8002bdc <HAL_RCC_OscConfig+0x624>)
 8002a40:	400a      	ands	r2, r1
 8002a42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d100      	bne.n	8002a4e <HAL_RCC_OscConfig+0x496>
 8002a4c:	e0bb      	b.n	8002bc6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a4e:	4b60      	ldr	r3, [pc, #384]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2238      	movs	r2, #56	; 0x38
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d100      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4a4>
 8002a5a:	e07b      	b.n	8002b54 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d156      	bne.n	8002b12 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a64:	4b5a      	ldr	r3, [pc, #360]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002a6a:	495d      	ldr	r1, [pc, #372]	; (8002be0 <HAL_RCC_OscConfig+0x628>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fe fc82 	bl	8001378 <HAL_GetTick>
 8002a74:	0003      	movs	r3, r0
 8002a76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7fe fc7d 	bl	8001378 <HAL_GetTick>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e09d      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8c:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	049b      	lsls	r3, r3, #18
 8002a94:	4013      	ands	r3, r2
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a98:	4b4d      	ldr	r3, [pc, #308]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a51      	ldr	r2, [pc, #324]	; (8002be4 <HAL_RCC_OscConfig+0x62c>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1a      	ldr	r2, [r3, #32]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	4b42      	ldr	r3, [pc, #264]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002acc:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b3f      	ldr	r3, [pc, #252]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002ad2:	2180      	movs	r1, #128	; 0x80
 8002ad4:	0449      	lsls	r1, r1, #17
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ada:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	4b3c      	ldr	r3, [pc, #240]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002ae0:	2180      	movs	r1, #128	; 0x80
 8002ae2:	0549      	lsls	r1, r1, #21
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fc46 	bl	8001378 <HAL_GetTick>
 8002aec:	0003      	movs	r3, r0
 8002aee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe fc41 	bl	8001378 <HAL_GetTick>
 8002af6:	0002      	movs	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e061      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b04:	4b32      	ldr	r3, [pc, #200]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	049b      	lsls	r3, r3, #18
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x53a>
 8002b10:	e059      	b.n	8002bc6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b12:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b2e      	ldr	r3, [pc, #184]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002b18:	4931      	ldr	r1, [pc, #196]	; (8002be0 <HAL_RCC_OscConfig+0x628>)
 8002b1a:	400a      	ands	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fc2b 	bl	8001378 <HAL_GetTick>
 8002b22:	0003      	movs	r3, r0
 8002b24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b28:	f7fe fc26 	bl	8001378 <HAL_GetTick>
 8002b2c:	0002      	movs	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e046      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b3a:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	049b      	lsls	r3, r3, #18
 8002b42:	4013      	ands	r3, r2
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	4b21      	ldr	r3, [pc, #132]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002b4c:	4926      	ldr	r1, [pc, #152]	; (8002be8 <HAL_RCC_OscConfig+0x630>)
 8002b4e:	400a      	ands	r2, r1
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	e038      	b.n	8002bc6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e033      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_RCC_OscConfig+0x618>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2203      	movs	r2, #3
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d126      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2270      	movs	r2, #112	; 0x70
 8002b78:	401a      	ands	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d11f      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	23fe      	movs	r3, #254	; 0xfe
 8002b86:	01db      	lsls	r3, r3, #7
 8002b88:	401a      	ands	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d116      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	23f8      	movs	r3, #248	; 0xf8
 8002b98:	039b      	lsls	r3, r3, #14
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d10e      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	23e0      	movs	r3, #224	; 0xe0
 8002ba8:	051b      	lsls	r3, r3, #20
 8002baa:	401a      	ands	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	0f5b      	lsrs	r3, r3, #29
 8002bb8:	075a      	lsls	r2, r3, #29
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	0018      	movs	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b008      	add	sp, #32
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	00001388 	.word	0x00001388
 8002bdc:	efffffff 	.word	0xefffffff
 8002be0:	feffffff 	.word	0xfeffffff
 8002be4:	11c1808c 	.word	0x11c1808c
 8002be8:	eefefffc 	.word	0xeefefffc

08002bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0e9      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c00:	4b76      	ldr	r3, [pc, #472]	; (8002ddc <HAL_RCC_ClockConfig+0x1f0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2207      	movs	r2, #7
 8002c06:	4013      	ands	r3, r2
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d91e      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b73      	ldr	r3, [pc, #460]	; (8002ddc <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2207      	movs	r2, #7
 8002c14:	4393      	bics	r3, r2
 8002c16:	0019      	movs	r1, r3
 8002c18:	4b70      	ldr	r3, [pc, #448]	; (8002ddc <HAL_RCC_ClockConfig+0x1f0>)
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c20:	f7fe fbaa 	bl	8001378 <HAL_GetTick>
 8002c24:	0003      	movs	r3, r0
 8002c26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c28:	e009      	b.n	8002c3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2a:	f7fe fba5 	bl	8001378 <HAL_GetTick>
 8002c2e:	0002      	movs	r2, r0
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	4a6a      	ldr	r2, [pc, #424]	; (8002de0 <HAL_RCC_ClockConfig+0x1f4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0ca      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c3e:	4b67      	ldr	r3, [pc, #412]	; (8002ddc <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2207      	movs	r2, #7
 8002c44:	4013      	ands	r3, r2
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1ee      	bne.n	8002c2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2202      	movs	r2, #2
 8002c52:	4013      	ands	r3, r2
 8002c54:	d015      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d006      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c60:	4b60      	ldr	r3, [pc, #384]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c66:	21e0      	movs	r1, #224	; 0xe0
 8002c68:	01c9      	lsls	r1, r1, #7
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6e:	4b5d      	ldr	r3, [pc, #372]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	4a5d      	ldr	r2, [pc, #372]	; (8002de8 <HAL_RCC_ClockConfig+0x1fc>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	0019      	movs	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	4b59      	ldr	r3, [pc, #356]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2201      	movs	r2, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d057      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c94:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d12b      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e097      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d107      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cac:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	049b      	lsls	r3, r3, #18
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d11f      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e08b      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc4:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d113      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e07f      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cdc:	4b41      	ldr	r3, [pc, #260]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d108      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e074      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cea:	4b3e      	ldr	r3, [pc, #248]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cee:	2202      	movs	r2, #2
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e06d      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cf8:	4b3a      	ldr	r3, [pc, #232]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	4393      	bics	r3, r2
 8002d00:	0019      	movs	r1, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	4b37      	ldr	r3, [pc, #220]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d0c:	f7fe fb34 	bl	8001378 <HAL_GetTick>
 8002d10:	0003      	movs	r3, r0
 8002d12:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d14:	e009      	b.n	8002d2a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d16:	f7fe fb2f 	bl	8001378 <HAL_GetTick>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <HAL_RCC_ClockConfig+0x1f4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e054      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	4b2e      	ldr	r3, [pc, #184]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2238      	movs	r2, #56	; 0x38
 8002d30:	401a      	ands	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d1ec      	bne.n	8002d16 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <HAL_RCC_ClockConfig+0x1f0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2207      	movs	r2, #7
 8002d42:	4013      	ands	r3, r2
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d21e      	bcs.n	8002d88 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_RCC_ClockConfig+0x1f0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2207      	movs	r2, #7
 8002d50:	4393      	bics	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_RCC_ClockConfig+0x1f0>)
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d5c:	f7fe fb0c 	bl	8001378 <HAL_GetTick>
 8002d60:	0003      	movs	r3, r0
 8002d62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d64:	e009      	b.n	8002d7a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d66:	f7fe fb07 	bl	8001378 <HAL_GetTick>
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	4a1b      	ldr	r2, [pc, #108]	; (8002de0 <HAL_RCC_ClockConfig+0x1f4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e02c      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_RCC_ClockConfig+0x1f0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2207      	movs	r2, #7
 8002d80:	4013      	ands	r3, r2
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d1ee      	bne.n	8002d66 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	4a15      	ldr	r2, [pc, #84]	; (8002dec <HAL_RCC_ClockConfig+0x200>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002da2:	430a      	orrs	r2, r1
 8002da4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002da6:	f000 f829 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002daa:	0001      	movs	r1, r0
 8002dac:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	220f      	movs	r2, #15
 8002db4:	401a      	ands	r2, r3
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_RCC_ClockConfig+0x204>)
 8002db8:	0092      	lsls	r2, r2, #2
 8002dba:	58d3      	ldr	r3, [r2, r3]
 8002dbc:	221f      	movs	r2, #31
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	000a      	movs	r2, r1
 8002dc2:	40da      	lsrs	r2, r3
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_ClockConfig+0x208>)
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_ClockConfig+0x20c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7fe fa77 	bl	80012c0 <HAL_InitTick>
 8002dd2:	0003      	movs	r3, r0
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b004      	add	sp, #16
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	00001388 	.word	0x00001388
 8002de4:	40021000 	.word	0x40021000
 8002de8:	fffff0ff 	.word	0xfffff0ff
 8002dec:	ffff8fff 	.word	0xffff8fff
 8002df0:	08007a20 	.word	0x08007a20
 8002df4:	20000004 	.word	0x20000004
 8002df8:	20000008 	.word	0x20000008

08002dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e02:	4b3c      	ldr	r3, [pc, #240]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2238      	movs	r2, #56	; 0x38
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d10f      	bne.n	8002e2c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e0c:	4b39      	ldr	r3, [pc, #228]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	0adb      	lsrs	r3, r3, #11
 8002e12:	2207      	movs	r2, #7
 8002e14:	4013      	ands	r3, r2
 8002e16:	2201      	movs	r2, #1
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	0013      	movs	r3, r2
 8002e1c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e1e:	6839      	ldr	r1, [r7, #0]
 8002e20:	4835      	ldr	r0, [pc, #212]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e22:	f7fd f96f 	bl	8000104 <__udivsi3>
 8002e26:	0003      	movs	r3, r0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	e05d      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e2c:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2238      	movs	r2, #56	; 0x38
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d102      	bne.n	8002e3e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e38:	4b30      	ldr	r3, [pc, #192]	; (8002efc <HAL_RCC_GetSysClockFreq+0x100>)
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	e054      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2238      	movs	r2, #56	; 0x38
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d138      	bne.n	8002ebc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2203      	movs	r2, #3
 8002e50:	4013      	ands	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	3301      	adds	r3, #1
 8002e60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d10d      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	4824      	ldr	r0, [pc, #144]	; (8002efc <HAL_RCC_GetSysClockFreq+0x100>)
 8002e6c:	f7fd f94a 	bl	8000104 <__udivsi3>
 8002e70:	0003      	movs	r3, r0
 8002e72:	0019      	movs	r1, r3
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	227f      	movs	r2, #127	; 0x7f
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	434b      	muls	r3, r1
 8002e80:	617b      	str	r3, [r7, #20]
        break;
 8002e82:	e00d      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	481c      	ldr	r0, [pc, #112]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e88:	f7fd f93c 	bl	8000104 <__udivsi3>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	0019      	movs	r1, r3
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	227f      	movs	r2, #127	; 0x7f
 8002e98:	4013      	ands	r3, r2
 8002e9a:	434b      	muls	r3, r1
 8002e9c:	617b      	str	r3, [r7, #20]
        break;
 8002e9e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0f5b      	lsrs	r3, r3, #29
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	3301      	adds	r3, #1
 8002eac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	6978      	ldr	r0, [r7, #20]
 8002eb2:	f7fd f927 	bl	8000104 <__udivsi3>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	e015      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2238      	movs	r2, #56	; 0x38
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d103      	bne.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	e00b      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2238      	movs	r2, #56	; 0x38
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b18      	cmp	r3, #24
 8002eda:	d103      	bne.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002edc:	23fa      	movs	r3, #250	; 0xfa
 8002ede:	01db      	lsls	r3, r3, #7
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	e001      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ee8:	693b      	ldr	r3, [r7, #16]
}
 8002eea:	0018      	movs	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b006      	add	sp, #24
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	00f42400 	.word	0x00f42400
 8002efc:	007a1200 	.word	0x007a1200

08002f00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f04:	4b02      	ldr	r3, [pc, #8]	; (8002f10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	0018      	movs	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	20000004 	.word	0x20000004

08002f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f14:	b5b0      	push	{r4, r5, r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f18:	f7ff fff2 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f1c:	0004      	movs	r4, r0
 8002f1e:	f7ff fb3f 	bl	80025a0 <LL_RCC_GetAPB1Prescaler>
 8002f22:	0003      	movs	r3, r0
 8002f24:	0b1a      	lsrs	r2, r3, #12
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f28:	0092      	lsls	r2, r2, #2
 8002f2a:	58d3      	ldr	r3, [r2, r3]
 8002f2c:	221f      	movs	r2, #31
 8002f2e:	4013      	ands	r3, r2
 8002f30:	40dc      	lsrs	r4, r3
 8002f32:	0023      	movs	r3, r4
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	08007a60 	.word	0x08007a60

08002f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f48:	2313      	movs	r3, #19
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f50:	2312      	movs	r3, #18
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	029b      	lsls	r3, r3, #10
 8002f60:	4013      	ands	r3, r2
 8002f62:	d100      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002f64:	e0a3      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2011      	movs	r0, #17
 8002f68:	183b      	adds	r3, r7, r0
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6e:	4ba5      	ldr	r3, [pc, #660]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	055b      	lsls	r3, r3, #21
 8002f76:	4013      	ands	r3, r2
 8002f78:	d110      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	4ba2      	ldr	r3, [pc, #648]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f7e:	4ba1      	ldr	r3, [pc, #644]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f80:	2180      	movs	r1, #128	; 0x80
 8002f82:	0549      	lsls	r1, r1, #21
 8002f84:	430a      	orrs	r2, r1
 8002f86:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f88:	4b9e      	ldr	r3, [pc, #632]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	055b      	lsls	r3, r3, #21
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f96:	183b      	adds	r3, r7, r0
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f9c:	4b9a      	ldr	r3, [pc, #616]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4b99      	ldr	r3, [pc, #612]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	0049      	lsls	r1, r1, #1
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002faa:	f7fe f9e5 	bl	8001378 <HAL_GetTick>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb4:	f7fe f9e0 	bl	8001378 <HAL_GetTick>
 8002fb8:	0002      	movs	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d904      	bls.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002fc2:	2313      	movs	r3, #19
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	701a      	strb	r2, [r3, #0]
        break;
 8002fca:	e005      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fcc:	4b8e      	ldr	r3, [pc, #568]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d0ed      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002fd8:	2313      	movs	r3, #19
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d154      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fe2:	4b88      	ldr	r3, [pc, #544]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fe4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fe6:	23c0      	movs	r3, #192	; 0xc0
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4013      	ands	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d019      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d014      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ffe:	4b81      	ldr	r3, [pc, #516]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003002:	4a82      	ldr	r2, [pc, #520]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003004:	4013      	ands	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003008:	4b7e      	ldr	r3, [pc, #504]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800300a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800300c:	4b7d      	ldr	r3, [pc, #500]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	0249      	lsls	r1, r1, #9
 8003012:	430a      	orrs	r2, r1
 8003014:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003016:	4b7b      	ldr	r3, [pc, #492]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003018:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800301a:	4b7a      	ldr	r3, [pc, #488]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800301c:	497c      	ldr	r1, [pc, #496]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800301e:	400a      	ands	r2, r1
 8003020:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003022:	4b78      	ldr	r3, [pc, #480]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2201      	movs	r2, #1
 800302c:	4013      	ands	r3, r2
 800302e:	d016      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe f9a2 	bl	8001378 <HAL_GetTick>
 8003034:	0003      	movs	r3, r0
 8003036:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003038:	e00c      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fe f99d 	bl	8001378 <HAL_GetTick>
 800303e:	0002      	movs	r2, r0
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	4a73      	ldr	r2, [pc, #460]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d904      	bls.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800304a:	2313      	movs	r3, #19
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2203      	movs	r2, #3
 8003050:	701a      	strb	r2, [r3, #0]
            break;
 8003052:	e004      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003054:	4b6b      	ldr	r3, [pc, #428]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	2202      	movs	r2, #2
 800305a:	4013      	ands	r3, r2
 800305c:	d0ed      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800305e:	2313      	movs	r3, #19
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003068:	4b66      	ldr	r3, [pc, #408]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	4a67      	ldr	r2, [pc, #412]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800306e:	4013      	ands	r3, r2
 8003070:	0019      	movs	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003076:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003078:	430a      	orrs	r2, r1
 800307a:	65da      	str	r2, [r3, #92]	; 0x5c
 800307c:	e00c      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800307e:	2312      	movs	r3, #18
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	2213      	movs	r2, #19
 8003084:	18ba      	adds	r2, r7, r2
 8003086:	7812      	ldrb	r2, [r2, #0]
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e005      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308c:	2312      	movs	r3, #18
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2213      	movs	r2, #19
 8003092:	18ba      	adds	r2, r7, r2
 8003094:	7812      	ldrb	r2, [r2, #0]
 8003096:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003098:	2311      	movs	r3, #17
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d105      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a2:	4b58      	ldr	r3, [pc, #352]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a6:	4b57      	ldr	r3, [pc, #348]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030a8:	495b      	ldr	r1, [pc, #364]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80030aa:	400a      	ands	r2, r1
 80030ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2201      	movs	r2, #1
 80030b4:	4013      	ands	r3, r2
 80030b6:	d009      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030b8:	4b52      	ldr	r3, [pc, #328]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	2203      	movs	r2, #3
 80030be:	4393      	bics	r3, r2
 80030c0:	0019      	movs	r1, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	4b4f      	ldr	r3, [pc, #316]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030c8:	430a      	orrs	r2, r1
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2210      	movs	r2, #16
 80030d2:	4013      	ands	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030d6:	4b4b      	ldr	r3, [pc, #300]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	4a50      	ldr	r2, [pc, #320]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80030dc:	4013      	ands	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	4b47      	ldr	r3, [pc, #284]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030e6:	430a      	orrs	r2, r1
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4013      	ands	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030f6:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	4a49      	ldr	r2, [pc, #292]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	0019      	movs	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	4b3f      	ldr	r3, [pc, #252]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003106:	430a      	orrs	r2, r1
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4013      	ands	r3, r2
 8003114:	d009      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003116:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	4a42      	ldr	r2, [pc, #264]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800311c:	4013      	ands	r3, r2
 800311e:	0019      	movs	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699a      	ldr	r2, [r3, #24]
 8003124:	4b37      	ldr	r3, [pc, #220]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003126:	430a      	orrs	r2, r1
 8003128:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2220      	movs	r2, #32
 8003130:	4013      	ands	r3, r2
 8003132:	d009      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003134:	4b33      	ldr	r3, [pc, #204]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	4a3b      	ldr	r2, [pc, #236]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	4b30      	ldr	r3, [pc, #192]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003144:	430a      	orrs	r2, r1
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	01db      	lsls	r3, r3, #7
 8003150:	4013      	ands	r3, r2
 8003152:	d015      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003154:	4b2b      	ldr	r3, [pc, #172]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	0899      	lsrs	r1, r3, #2
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	4b28      	ldr	r3, [pc, #160]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003162:	430a      	orrs	r2, r1
 8003164:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	05db      	lsls	r3, r3, #23
 800316e:	429a      	cmp	r2, r3
 8003170:	d106      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	0249      	lsls	r1, r1, #9
 800317c:	430a      	orrs	r2, r1
 800317e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	039b      	lsls	r3, r3, #14
 8003188:	4013      	ands	r3, r2
 800318a:	d016      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800318c:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	4a26      	ldr	r2, [pc, #152]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003192:	4013      	ands	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1a      	ldr	r2, [r3, #32]
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800319c:	430a      	orrs	r2, r1
 800319e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	03db      	lsls	r3, r3, #15
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d106      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031ac:	4b15      	ldr	r3, [pc, #84]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031b2:	2180      	movs	r1, #128	; 0x80
 80031b4:	0449      	lsls	r1, r1, #17
 80031b6:	430a      	orrs	r2, r1
 80031b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	4013      	ands	r3, r2
 80031c4:	d016      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80031c6:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	4a19      	ldr	r2, [pc, #100]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	0019      	movs	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031d6:	430a      	orrs	r2, r1
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	01db      	lsls	r3, r3, #7
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d106      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	0249      	lsls	r1, r1, #9
 80031f0:	430a      	orrs	r2, r1
 80031f2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80031f4:	2312      	movs	r3, #18
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	781b      	ldrb	r3, [r3, #0]
}
 80031fa:	0018      	movs	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b006      	add	sp, #24
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	40021000 	.word	0x40021000
 8003208:	40007000 	.word	0x40007000
 800320c:	fffffcff 	.word	0xfffffcff
 8003210:	fffeffff 	.word	0xfffeffff
 8003214:	00001388 	.word	0x00001388
 8003218:	efffffff 	.word	0xefffffff
 800321c:	fffff3ff 	.word	0xfffff3ff
 8003220:	fff3ffff 	.word	0xfff3ffff
 8003224:	ffcfffff 	.word	0xffcfffff
 8003228:	ffffcfff 	.word	0xffffcfff
 800322c:	ffbfffff 	.word	0xffbfffff
 8003230:	ffff3fff 	.word	0xffff3fff

08003234 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e0a8      	b.n	8003398 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	2382      	movs	r3, #130	; 0x82
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	429a      	cmp	r2, r3
 8003258:	d009      	beq.n	800326e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	61da      	str	r2, [r3, #28]
 8003260:	e005      	b.n	800326e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	225d      	movs	r2, #93	; 0x5d
 8003278:	5c9b      	ldrb	r3, [r3, r2]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d107      	bne.n	8003290 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	225c      	movs	r2, #92	; 0x5c
 8003284:	2100      	movs	r1, #0
 8003286:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	0018      	movs	r0, r3
 800328c:	f7fd fce0 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	225d      	movs	r2, #93	; 0x5d
 8003294:	2102      	movs	r1, #2
 8003296:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2140      	movs	r1, #64	; 0x40
 80032a4:	438a      	bics	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	23e0      	movs	r3, #224	; 0xe0
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d902      	bls.n	80032ba <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	e002      	b.n	80032c0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	015b      	lsls	r3, r3, #5
 80032be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	23f0      	movs	r3, #240	; 0xf0
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d008      	beq.n	80032de <HAL_SPI_Init+0xaa>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	23e0      	movs	r3, #224	; 0xe0
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d002      	beq.n	80032de <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	2382      	movs	r3, #130	; 0x82
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	401a      	ands	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6899      	ldr	r1, [r3, #8]
 80032ec:	2384      	movs	r3, #132	; 0x84
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	400b      	ands	r3, r1
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2102      	movs	r1, #2
 80032fa:	400b      	ands	r3, r1
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	2101      	movs	r1, #1
 8003304:	400b      	ands	r3, r1
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6999      	ldr	r1, [r3, #24]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	400b      	ands	r3, r1
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	2138      	movs	r1, #56	; 0x38
 800331a:	400b      	ands	r3, r1
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	2180      	movs	r1, #128	; 0x80
 8003324:	400b      	ands	r3, r1
 8003326:	431a      	orrs	r2, r3
 8003328:	0011      	movs	r1, r2
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	019b      	lsls	r3, r3, #6
 8003332:	401a      	ands	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	2204      	movs	r2, #4
 8003344:	401a      	ands	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	2110      	movs	r1, #16
 800334c:	400b      	ands	r3, r1
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003354:	2108      	movs	r1, #8
 8003356:	400b      	ands	r3, r1
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68d9      	ldr	r1, [r3, #12]
 800335e:	23f0      	movs	r3, #240	; 0xf0
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	400b      	ands	r3, r1
 8003364:	431a      	orrs	r2, r3
 8003366:	0011      	movs	r1, r2
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	015b      	lsls	r3, r3, #5
 800336e:	401a      	ands	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4907      	ldr	r1, [pc, #28]	; (80033a0 <HAL_SPI_Init+0x16c>)
 8003384:	400a      	ands	r2, r1
 8003386:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	225d      	movs	r2, #93	; 0x5d
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b004      	add	sp, #16
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	fffff7ff 	.word	0xfffff7ff

080033a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	1dbb      	adds	r3, r7, #6
 80033b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033b4:	231f      	movs	r3, #31
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	225c      	movs	r2, #92	; 0x5c
 80033c0:	5c9b      	ldrb	r3, [r3, r2]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_SPI_Transmit+0x26>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e147      	b.n	800365a <HAL_SPI_Transmit+0x2b6>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	225c      	movs	r2, #92	; 0x5c
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033d2:	f7fd ffd1 	bl	8001378 <HAL_GetTick>
 80033d6:	0003      	movs	r3, r0
 80033d8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80033da:	2316      	movs	r3, #22
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	1dba      	adds	r2, r7, #6
 80033e0:	8812      	ldrh	r2, [r2, #0]
 80033e2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	225d      	movs	r2, #93	; 0x5d
 80033e8:	5c9b      	ldrb	r3, [r3, r2]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d004      	beq.n	80033fa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80033f0:	231f      	movs	r3, #31
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	2202      	movs	r2, #2
 80033f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80033f8:	e128      	b.n	800364c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_SPI_Transmit+0x64>
 8003400:	1dbb      	adds	r3, r7, #6
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d104      	bne.n	8003412 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003408:	231f      	movs	r3, #31
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003410:	e11c      	b.n	800364c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	225d      	movs	r2, #93	; 0x5d
 8003416:	2103      	movs	r1, #3
 8003418:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1dba      	adds	r2, r7, #6
 800342a:	8812      	ldrh	r2, [r2, #0]
 800342c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1dba      	adds	r2, r7, #6
 8003432:	8812      	ldrh	r2, [r2, #0]
 8003434:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2244      	movs	r2, #68	; 0x44
 8003440:	2100      	movs	r1, #0
 8003442:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2246      	movs	r2, #70	; 0x46
 8003448:	2100      	movs	r1, #0
 800344a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	429a      	cmp	r2, r3
 8003462:	d110      	bne.n	8003486 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2140      	movs	r1, #64	; 0x40
 8003470:	438a      	bics	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2180      	movs	r1, #128	; 0x80
 8003480:	01c9      	lsls	r1, r1, #7
 8003482:	430a      	orrs	r2, r1
 8003484:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2240      	movs	r2, #64	; 0x40
 800348e:	4013      	ands	r3, r2
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d007      	beq.n	80034a4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2140      	movs	r1, #64	; 0x40
 80034a0:	430a      	orrs	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	23e0      	movs	r3, #224	; 0xe0
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d952      	bls.n	8003556 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <HAL_SPI_Transmit+0x11e>
 80034b8:	2316      	movs	r3, #22
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d143      	bne.n	800354a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	881a      	ldrh	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	1c9a      	adds	r2, r3, #2
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034e6:	e030      	b.n	800354a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2202      	movs	r2, #2
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d112      	bne.n	800351c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	881a      	ldrh	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	1c9a      	adds	r2, r3, #2
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	87da      	strh	r2, [r3, #62]	; 0x3e
 800351a:	e016      	b.n	800354a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800351c:	f7fd ff2c 	bl	8001378 <HAL_GetTick>
 8003520:	0002      	movs	r2, r0
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d802      	bhi.n	8003532 <HAL_SPI_Transmit+0x18e>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	3301      	adds	r3, #1
 8003530:	d102      	bne.n	8003538 <HAL_SPI_Transmit+0x194>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d108      	bne.n	800354a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003538:	231f      	movs	r3, #31
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	2203      	movs	r2, #3
 800353e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	225d      	movs	r2, #93	; 0x5d
 8003544:	2101      	movs	r1, #1
 8003546:	5499      	strb	r1, [r3, r2]
          goto error;
 8003548:	e080      	b.n	800364c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1c9      	bne.n	80034e8 <HAL_SPI_Transmit+0x144>
 8003554:	e053      	b.n	80035fe <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <HAL_SPI_Transmit+0x1c4>
 800355e:	2316      	movs	r3, #22
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d145      	bne.n	80035f4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	330c      	adds	r3, #12
 8003572:	7812      	ldrb	r2, [r2, #0]
 8003574:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800358e:	e031      	b.n	80035f4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2202      	movs	r2, #2
 8003598:	4013      	ands	r3, r2
 800359a:	2b02      	cmp	r3, #2
 800359c:	d113      	bne.n	80035c6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	7812      	ldrb	r2, [r2, #0]
 80035aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035c4:	e016      	b.n	80035f4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035c6:	f7fd fed7 	bl	8001378 <HAL_GetTick>
 80035ca:	0002      	movs	r2, r0
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d802      	bhi.n	80035dc <HAL_SPI_Transmit+0x238>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	3301      	adds	r3, #1
 80035da:	d102      	bne.n	80035e2 <HAL_SPI_Transmit+0x23e>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d108      	bne.n	80035f4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80035e2:	231f      	movs	r3, #31
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	2203      	movs	r2, #3
 80035e8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	225d      	movs	r2, #93	; 0x5d
 80035ee:	2101      	movs	r1, #1
 80035f0:	5499      	strb	r1, [r3, r2]
          goto error;
 80035f2:	e02b      	b.n	800364c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1c8      	bne.n	8003590 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	0018      	movs	r0, r3
 8003606:	f000 fcef 	bl	8003fe8 <SPI_EndRxTxTransaction>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d002      	beq.n	8003614 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800363a:	231f      	movs	r3, #31
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	2201      	movs	r2, #1
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e003      	b.n	800364c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	225d      	movs	r2, #93	; 0x5d
 8003648:	2101      	movs	r1, #1
 800364a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	225c      	movs	r2, #92	; 0x5c
 8003650:	2100      	movs	r1, #0
 8003652:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003654:	231f      	movs	r3, #31
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	781b      	ldrb	r3, [r3, #0]
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	b008      	add	sp, #32
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	1dbb      	adds	r3, r7, #6
 8003672:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003674:	2117      	movs	r1, #23
 8003676:	187b      	adds	r3, r7, r1
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	225d      	movs	r2, #93	; 0x5d
 8003680:	5c9b      	ldrb	r3, [r3, r2]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	d003      	beq.n	8003690 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8003688:	187b      	adds	r3, r7, r1
 800368a:	2202      	movs	r2, #2
 800368c:	701a      	strb	r2, [r3, #0]
    goto error;
 800368e:	e12b      	b.n	80038e8 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	2382      	movs	r3, #130	; 0x82
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	429a      	cmp	r2, r3
 800369a:	d113      	bne.n	80036c4 <HAL_SPI_Receive+0x60>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10f      	bne.n	80036c4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	225d      	movs	r2, #93	; 0x5d
 80036a8:	2104      	movs	r1, #4
 80036aa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036ac:	1dbb      	adds	r3, r7, #6
 80036ae:	881c      	ldrh	r4, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	0023      	movs	r3, r4
 80036bc:	f000 f924 	bl	8003908 <HAL_SPI_TransmitReceive>
 80036c0:	0003      	movs	r3, r0
 80036c2:	e118      	b.n	80038f6 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	225c      	movs	r2, #92	; 0x5c
 80036c8:	5c9b      	ldrb	r3, [r3, r2]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_SPI_Receive+0x6e>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e111      	b.n	80038f6 <HAL_SPI_Receive+0x292>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	225c      	movs	r2, #92	; 0x5c
 80036d6:	2101      	movs	r1, #1
 80036d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036da:	f7fd fe4d 	bl	8001378 <HAL_GetTick>
 80036de:	0003      	movs	r3, r0
 80036e0:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_SPI_Receive+0x8c>
 80036e8:	1dbb      	adds	r3, r7, #6
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d104      	bne.n	80036fa <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80036f0:	2317      	movs	r3, #23
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80036f8:	e0f6      	b.n	80038e8 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	225d      	movs	r2, #93	; 0x5d
 80036fe:	2104      	movs	r1, #4
 8003700:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1dba      	adds	r2, r7, #6
 8003712:	2144      	movs	r1, #68	; 0x44
 8003714:	8812      	ldrh	r2, [r2, #0]
 8003716:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1dba      	adds	r2, r7, #6
 800371c:	2146      	movs	r1, #70	; 0x46
 800371e:	8812      	ldrh	r2, [r2, #0]
 8003720:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	23e0      	movs	r3, #224	; 0xe0
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	429a      	cmp	r2, r3
 800374a:	d908      	bls.n	800375e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	496a      	ldr	r1, [pc, #424]	; (8003900 <HAL_SPI_Receive+0x29c>)
 8003758:	400a      	ands	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
 800375c:	e008      	b.n	8003770 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2180      	movs	r1, #128	; 0x80
 800376a:	0149      	lsls	r1, r1, #5
 800376c:	430a      	orrs	r2, r1
 800376e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	429a      	cmp	r2, r3
 800377a:	d10f      	bne.n	800379c <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2140      	movs	r1, #64	; 0x40
 8003788:	438a      	bics	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	495b      	ldr	r1, [pc, #364]	; (8003904 <HAL_SPI_Receive+0x2a0>)
 8003798:	400a      	ands	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2240      	movs	r2, #64	; 0x40
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	d007      	beq.n	80037ba <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2140      	movs	r1, #64	; 0x40
 80037b6:	430a      	orrs	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	23e0      	movs	r3, #224	; 0xe0
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d900      	bls.n	80037c8 <HAL_SPI_Receive+0x164>
 80037c6:	e071      	b.n	80038ac <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80037c8:	e035      	b.n	8003836 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2201      	movs	r2, #1
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d117      	bne.n	8003808 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	330c      	adds	r3, #12
 80037de:	001a      	movs	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	7812      	ldrb	r2, [r2, #0]
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2246      	movs	r2, #70	; 0x46
 80037f8:	5a9b      	ldrh	r3, [r3, r2]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b299      	uxth	r1, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2246      	movs	r2, #70	; 0x46
 8003804:	5299      	strh	r1, [r3, r2]
 8003806:	e016      	b.n	8003836 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003808:	f7fd fdb6 	bl	8001378 <HAL_GetTick>
 800380c:	0002      	movs	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d802      	bhi.n	800381e <HAL_SPI_Receive+0x1ba>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	3301      	adds	r3, #1
 800381c:	d102      	bne.n	8003824 <HAL_SPI_Receive+0x1c0>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d108      	bne.n	8003836 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8003824:	2317      	movs	r3, #23
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	2203      	movs	r2, #3
 800382a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	225d      	movs	r2, #93	; 0x5d
 8003830:	2101      	movs	r1, #1
 8003832:	5499      	strb	r1, [r3, r2]
          goto error;
 8003834:	e058      	b.n	80038e8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2246      	movs	r2, #70	; 0x46
 800383a:	5a9b      	ldrh	r3, [r3, r2]
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1c3      	bne.n	80037ca <HAL_SPI_Receive+0x166>
 8003842:	e039      	b.n	80038b8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2201      	movs	r2, #1
 800384c:	4013      	ands	r3, r2
 800384e:	2b01      	cmp	r3, #1
 8003850:	d115      	bne.n	800387e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	b292      	uxth	r2, r2
 800385e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	1c9a      	adds	r2, r3, #2
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2246      	movs	r2, #70	; 0x46
 800386e:	5a9b      	ldrh	r3, [r3, r2]
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b299      	uxth	r1, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2246      	movs	r2, #70	; 0x46
 800387a:	5299      	strh	r1, [r3, r2]
 800387c:	e016      	b.n	80038ac <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800387e:	f7fd fd7b 	bl	8001378 <HAL_GetTick>
 8003882:	0002      	movs	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d802      	bhi.n	8003894 <HAL_SPI_Receive+0x230>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	3301      	adds	r3, #1
 8003892:	d102      	bne.n	800389a <HAL_SPI_Receive+0x236>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d108      	bne.n	80038ac <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800389a:	2317      	movs	r3, #23
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	2203      	movs	r2, #3
 80038a0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	225d      	movs	r2, #93	; 0x5d
 80038a6:	2101      	movs	r1, #1
 80038a8:	5499      	strb	r1, [r3, r2]
          goto error;
 80038aa:	e01d      	b.n	80038e8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2246      	movs	r2, #70	; 0x46
 80038b0:	5a9b      	ldrh	r3, [r3, r2]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1c5      	bne.n	8003844 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	6839      	ldr	r1, [r7, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 fb34 	bl	8003f2c <SPI_EndRxTransaction>
 80038c4:	1e03      	subs	r3, r0, #0
 80038c6:	d002      	beq.n	80038ce <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80038d6:	2317      	movs	r3, #23
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e003      	b.n	80038e8 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	225d      	movs	r2, #93	; 0x5d
 80038e4:	2101      	movs	r1, #1
 80038e6:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	225c      	movs	r2, #92	; 0x5c
 80038ec:	2100      	movs	r1, #0
 80038ee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80038f0:	2317      	movs	r3, #23
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	781b      	ldrb	r3, [r3, #0]
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b007      	add	sp, #28
 80038fc:	bd90      	pop	{r4, r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	ffffefff 	.word	0xffffefff
 8003904:	ffffbfff 	.word	0xffffbfff

08003908 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	; 0x28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	001a      	movs	r2, r3
 8003916:	1cbb      	adds	r3, r7, #2
 8003918:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800391a:	2301      	movs	r3, #1
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800391e:	2323      	movs	r3, #35	; 0x23
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	225c      	movs	r2, #92	; 0x5c
 800392a:	5c9b      	ldrb	r3, [r3, r2]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_SPI_TransmitReceive+0x2c>
 8003930:	2302      	movs	r3, #2
 8003932:	e1c4      	b.n	8003cbe <HAL_SPI_TransmitReceive+0x3b6>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	225c      	movs	r2, #92	; 0x5c
 8003938:	2101      	movs	r1, #1
 800393a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800393c:	f7fd fd1c 	bl	8001378 <HAL_GetTick>
 8003940:	0003      	movs	r3, r0
 8003942:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003944:	201b      	movs	r0, #27
 8003946:	183b      	adds	r3, r7, r0
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	215d      	movs	r1, #93	; 0x5d
 800394c:	5c52      	ldrb	r2, [r2, r1]
 800394e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003956:	2312      	movs	r3, #18
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	1cba      	adds	r2, r7, #2
 800395c:	8812      	ldrh	r2, [r2, #0]
 800395e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003960:	183b      	adds	r3, r7, r0
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d011      	beq.n	800398c <HAL_SPI_TransmitReceive+0x84>
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	2382      	movs	r3, #130	; 0x82
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	429a      	cmp	r2, r3
 8003970:	d107      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x7a>
 800397a:	183b      	adds	r3, r7, r0
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b04      	cmp	r3, #4
 8003980:	d004      	beq.n	800398c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003982:	2323      	movs	r3, #35	; 0x23
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2202      	movs	r2, #2
 8003988:	701a      	strb	r2, [r3, #0]
    goto error;
 800398a:	e191      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d006      	beq.n	80039a0 <HAL_SPI_TransmitReceive+0x98>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_SPI_TransmitReceive+0x98>
 8003998:	1cbb      	adds	r3, r7, #2
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80039a0:	2323      	movs	r3, #35	; 0x23
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	2201      	movs	r2, #1
 80039a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80039a8:	e182      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	225d      	movs	r2, #93	; 0x5d
 80039ae:	5c9b      	ldrb	r3, [r3, r2]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d003      	beq.n	80039be <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	225d      	movs	r2, #93	; 0x5d
 80039ba:	2105      	movs	r1, #5
 80039bc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1cba      	adds	r2, r7, #2
 80039ce:	2146      	movs	r1, #70	; 0x46
 80039d0:	8812      	ldrh	r2, [r2, #0]
 80039d2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1cba      	adds	r2, r7, #2
 80039d8:	2144      	movs	r1, #68	; 0x44
 80039da:	8812      	ldrh	r2, [r2, #0]
 80039dc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1cba      	adds	r2, r7, #2
 80039e8:	8812      	ldrh	r2, [r2, #0]
 80039ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1cba      	adds	r2, r7, #2
 80039f0:	8812      	ldrh	r2, [r2, #0]
 80039f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	23e0      	movs	r3, #224	; 0xe0
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d908      	bls.n	8003a1e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	49ac      	ldr	r1, [pc, #688]	; (8003cc8 <HAL_SPI_TransmitReceive+0x3c0>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	e008      	b.n	8003a30 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	0149      	lsls	r1, r1, #5
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2240      	movs	r2, #64	; 0x40
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d007      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2140      	movs	r1, #64	; 0x40
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	23e0      	movs	r3, #224	; 0xe0
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d800      	bhi.n	8003a5c <HAL_SPI_TransmitReceive+0x154>
 8003a5a:	e083      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x168>
 8003a64:	2312      	movs	r3, #18
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d000      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x168>
 8003a6e:	e06d      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	881a      	ldrh	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	1c9a      	adds	r2, r3, #2
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a94:	e05a      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d11b      	bne.n	8003adc <HAL_SPI_TransmitReceive+0x1d4>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <HAL_SPI_TransmitReceive+0x1d4>
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d113      	bne.n	8003adc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	881a      	ldrh	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	1c9a      	adds	r2, r3, #2
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d11c      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x21c>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2246      	movs	r2, #70	; 0x46
 8003aee:	5a9b      	ldrh	r3, [r3, r2]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	b292      	uxth	r2, r2
 8003b02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	1c9a      	adds	r2, r3, #2
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2246      	movs	r2, #70	; 0x46
 8003b12:	5a9b      	ldrh	r3, [r3, r2]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b299      	uxth	r1, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2246      	movs	r2, #70	; 0x46
 8003b1e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b20:	2301      	movs	r3, #1
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b24:	f7fd fc28 	bl	8001378 <HAL_GetTick>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d80b      	bhi.n	8003b4c <HAL_SPI_TransmitReceive+0x244>
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	3301      	adds	r3, #1
 8003b38:	d008      	beq.n	8003b4c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003b3a:	2323      	movs	r3, #35	; 0x23
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	2203      	movs	r2, #3
 8003b40:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	225d      	movs	r2, #93	; 0x5d
 8003b46:	2101      	movs	r1, #1
 8003b48:	5499      	strb	r1, [r3, r2]
        goto error;
 8003b4a:	e0b1      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d19f      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x18e>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2246      	movs	r2, #70	; 0x46
 8003b5a:	5a9b      	ldrh	r3, [r3, r2]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d199      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x18e>
 8003b62:	e089      	b.n	8003c78 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_SPI_TransmitReceive+0x270>
 8003b6c:	2312      	movs	r3, #18
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d000      	beq.n	8003b78 <HAL_SPI_TransmitReceive+0x270>
 8003b76:	e074      	b.n	8003c62 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	7812      	ldrb	r2, [r2, #0]
 8003b84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b9e:	e060      	b.n	8003c62 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d11c      	bne.n	8003be8 <HAL_SPI_TransmitReceive+0x2e0>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d017      	beq.n	8003be8 <HAL_SPI_TransmitReceive+0x2e0>
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d114      	bne.n	8003be8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	330c      	adds	r3, #12
 8003bc8:	7812      	ldrb	r2, [r2, #0]
 8003bca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d11e      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x32c>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2246      	movs	r2, #70	; 0x46
 8003bfa:	5a9b      	ldrh	r3, [r3, r2]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d018      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	330c      	adds	r3, #12
 8003c08:	001a      	movs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	7812      	ldrb	r2, [r2, #0]
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2246      	movs	r2, #70	; 0x46
 8003c22:	5a9b      	ldrh	r3, [r3, r2]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b299      	uxth	r1, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2246      	movs	r2, #70	; 0x46
 8003c2e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c30:	2301      	movs	r3, #1
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c34:	f7fd fba0 	bl	8001378 <HAL_GetTick>
 8003c38:	0002      	movs	r2, r0
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d802      	bhi.n	8003c4a <HAL_SPI_TransmitReceive+0x342>
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	3301      	adds	r3, #1
 8003c48:	d102      	bne.n	8003c50 <HAL_SPI_TransmitReceive+0x348>
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d108      	bne.n	8003c62 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003c50:	2323      	movs	r3, #35	; 0x23
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	2203      	movs	r2, #3
 8003c56:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	225d      	movs	r2, #93	; 0x5d
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	5499      	strb	r1, [r3, r2]
        goto error;
 8003c60:	e026      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d199      	bne.n	8003ba0 <HAL_SPI_TransmitReceive+0x298>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2246      	movs	r2, #70	; 0x46
 8003c70:	5a9b      	ldrh	r3, [r3, r2]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d193      	bne.n	8003ba0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 f9b2 	bl	8003fe8 <SPI_EndRxTxTransaction>
 8003c84:	1e03      	subs	r3, r0, #0
 8003c86:	d006      	beq.n	8003c96 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003c88:	2323      	movs	r3, #35	; 0x23
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003c9e:	2323      	movs	r3, #35	; 0x23
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	e003      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	225d      	movs	r2, #93	; 0x5d
 8003cac:	2101      	movs	r1, #1
 8003cae:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	225c      	movs	r2, #92	; 0x5c
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003cb8:	2323      	movs	r3, #35	; 0x23
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	781b      	ldrb	r3, [r3, #0]
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b00a      	add	sp, #40	; 0x28
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	ffffefff 	.word	0xffffefff

08003ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	1dfb      	adds	r3, r7, #7
 8003cda:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cdc:	f7fd fb4c 	bl	8001378 <HAL_GetTick>
 8003ce0:	0002      	movs	r2, r0
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	18d3      	adds	r3, r2, r3
 8003cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cec:	f7fd fb44 	bl	8001378 <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cf4:	4b3a      	ldr	r3, [pc, #232]	; (8003de0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	015b      	lsls	r3, r3, #5
 8003cfa:	0d1b      	lsrs	r3, r3, #20
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	4353      	muls	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d02:	e058      	b.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	3301      	adds	r3, #1
 8003d08:	d055      	beq.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d0a:	f7fd fb35 	bl	8001378 <HAL_GetTick>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d902      	bls.n	8003d20 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d142      	bne.n	8003da6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	21e0      	movs	r1, #224	; 0xe0
 8003d2c:	438a      	bics	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	2382      	movs	r3, #130	; 0x82
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d113      	bne.n	8003d64 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d005      	beq.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d107      	bne.n	8003d64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2140      	movs	r1, #64	; 0x40
 8003d60:	438a      	bics	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	019b      	lsls	r3, r3, #6
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d110      	bne.n	8003d92 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	491a      	ldr	r1, [pc, #104]	; (8003de4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2180      	movs	r1, #128	; 0x80
 8003d8c:	0189      	lsls	r1, r1, #6
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	225d      	movs	r2, #93	; 0x5d
 8003d96:	2101      	movs	r1, #1
 8003d98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	225c      	movs	r2, #92	; 0x5c
 8003d9e:	2100      	movs	r1, #0
 8003da0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e017      	b.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	425a      	negs	r2, r3
 8003dc6:	4153      	adcs	r3, r2
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	001a      	movs	r2, r3
 8003dcc:	1dfb      	adds	r3, r7, #7
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d197      	bne.n	8003d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b008      	add	sp, #32
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	20000004 	.word	0x20000004
 8003de4:	ffffdfff 	.word	0xffffdfff

08003de8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003df6:	2317      	movs	r3, #23
 8003df8:	18fb      	adds	r3, r7, r3
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003dfe:	f7fd fabb 	bl	8001378 <HAL_GetTick>
 8003e02:	0002      	movs	r2, r0
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	18d3      	adds	r3, r2, r3
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003e0e:	f7fd fab3 	bl	8001378 <HAL_GetTick>
 8003e12:	0003      	movs	r3, r0
 8003e14:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e1e:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	0013      	movs	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	00da      	lsls	r2, r3, #3
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	0d1b      	lsrs	r3, r3, #20
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e30:	4353      	muls	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e34:	e068      	b.n	8003f08 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	23c0      	movs	r3, #192	; 0xc0
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d10a      	bne.n	8003e56 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d107      	bne.n	8003e56 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	2117      	movs	r1, #23
 8003e4e:	187b      	adds	r3, r7, r1
 8003e50:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	d055      	beq.n	8003f08 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e5c:	f7fd fa8c 	bl	8001378 <HAL_GetTick>
 8003e60:	0002      	movs	r2, r0
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d902      	bls.n	8003e72 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d142      	bne.n	8003ef8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	21e0      	movs	r1, #224	; 0xe0
 8003e7e:	438a      	bics	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	2382      	movs	r3, #130	; 0x82
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d113      	bne.n	8003eb6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d005      	beq.n	8003ea6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d107      	bne.n	8003eb6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2140      	movs	r1, #64	; 0x40
 8003eb2:	438a      	bics	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eba:	2380      	movs	r3, #128	; 0x80
 8003ebc:	019b      	lsls	r3, r3, #6
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d110      	bne.n	8003ee4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4916      	ldr	r1, [pc, #88]	; (8003f28 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003ece:	400a      	ands	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2180      	movs	r1, #128	; 0x80
 8003ede:	0189      	lsls	r1, r1, #6
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	225d      	movs	r2, #93	; 0x5d
 8003ee8:	2101      	movs	r1, #1
 8003eea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	225c      	movs	r2, #92	; 0x5c
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e010      	b.n	8003f1a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4013      	ands	r3, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d18e      	bne.n	8003e36 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b00a      	add	sp, #40	; 0x28
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	20000004 	.word	0x20000004
 8003f28:	ffffdfff 	.word	0xffffdfff

08003f2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	2382      	movs	r3, #130	; 0x82
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d113      	bne.n	8003f6c <SPI_EndRxTransaction+0x40>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d005      	beq.n	8003f5c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d107      	bne.n	8003f6c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2140      	movs	r1, #64	; 0x40
 8003f68:	438a      	bics	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	0013      	movs	r3, r2
 8003f76:	2200      	movs	r2, #0
 8003f78:	2180      	movs	r1, #128	; 0x80
 8003f7a:	f7ff fea7 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d007      	beq.n	8003f92 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f86:	2220      	movs	r2, #32
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e026      	b.n	8003fe0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	2382      	movs	r3, #130	; 0x82
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d11f      	bne.n	8003fde <SPI_EndRxTransaction+0xb2>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d005      	beq.n	8003fb6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d113      	bne.n	8003fde <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	23c0      	movs	r3, #192	; 0xc0
 8003fba:	00d9      	lsls	r1, r3, #3
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	0013      	movs	r3, r2
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f7ff ff0f 	bl	8003de8 <SPI_WaitFifoStateUntilTimeout>
 8003fca:	1e03      	subs	r3, r0, #0
 8003fcc:	d007      	beq.n	8003fde <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e000      	b.n	8003fe0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	b004      	add	sp, #16
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	23c0      	movs	r3, #192	; 0xc0
 8003ff8:	0159      	lsls	r1, r3, #5
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	0013      	movs	r3, r2
 8004002:	2200      	movs	r2, #0
 8004004:	f7ff fef0 	bl	8003de8 <SPI_WaitFifoStateUntilTimeout>
 8004008:	1e03      	subs	r3, r0, #0
 800400a:	d007      	beq.n	800401c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004010:	2220      	movs	r2, #32
 8004012:	431a      	orrs	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e027      	b.n	800406c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	0013      	movs	r3, r2
 8004026:	2200      	movs	r2, #0
 8004028:	2180      	movs	r1, #128	; 0x80
 800402a:	f7ff fe4f 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 800402e:	1e03      	subs	r3, r0, #0
 8004030:	d007      	beq.n	8004042 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004036:	2220      	movs	r2, #32
 8004038:	431a      	orrs	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e014      	b.n	800406c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	23c0      	movs	r3, #192	; 0xc0
 8004046:	00d9      	lsls	r1, r3, #3
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	0013      	movs	r3, r2
 8004050:	2200      	movs	r2, #0
 8004052:	f7ff fec9 	bl	8003de8 <SPI_WaitFifoStateUntilTimeout>
 8004056:	1e03      	subs	r3, r0, #0
 8004058:	d007      	beq.n	800406a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405e:	2220      	movs	r2, #32
 8004060:	431a      	orrs	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e000      	b.n	800406c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b004      	add	sp, #16
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e04a      	b.n	800411c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	223d      	movs	r2, #61	; 0x3d
 800408a:	5c9b      	ldrb	r3, [r3, r2]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d107      	bne.n	80040a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	223c      	movs	r2, #60	; 0x3c
 8004096:	2100      	movs	r1, #0
 8004098:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	0018      	movs	r0, r3
 800409e:	f7fc ff9d 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	223d      	movs	r2, #61	; 0x3d
 80040a6:	2102      	movs	r1, #2
 80040a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3304      	adds	r3, #4
 80040b2:	0019      	movs	r1, r3
 80040b4:	0010      	movs	r0, r2
 80040b6:	f000 fcc5 	bl	8004a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2248      	movs	r2, #72	; 0x48
 80040be:	2101      	movs	r1, #1
 80040c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	223e      	movs	r2, #62	; 0x3e
 80040c6:	2101      	movs	r1, #1
 80040c8:	5499      	strb	r1, [r3, r2]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	223f      	movs	r2, #63	; 0x3f
 80040ce:	2101      	movs	r1, #1
 80040d0:	5499      	strb	r1, [r3, r2]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2240      	movs	r2, #64	; 0x40
 80040d6:	2101      	movs	r1, #1
 80040d8:	5499      	strb	r1, [r3, r2]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2241      	movs	r2, #65	; 0x41
 80040de:	2101      	movs	r1, #1
 80040e0:	5499      	strb	r1, [r3, r2]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2242      	movs	r2, #66	; 0x42
 80040e6:	2101      	movs	r1, #1
 80040e8:	5499      	strb	r1, [r3, r2]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2243      	movs	r2, #67	; 0x43
 80040ee:	2101      	movs	r1, #1
 80040f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2244      	movs	r2, #68	; 0x44
 80040f6:	2101      	movs	r1, #1
 80040f8:	5499      	strb	r1, [r3, r2]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2245      	movs	r2, #69	; 0x45
 80040fe:	2101      	movs	r1, #1
 8004100:	5499      	strb	r1, [r3, r2]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2246      	movs	r2, #70	; 0x46
 8004106:	2101      	movs	r1, #1
 8004108:	5499      	strb	r1, [r3, r2]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2247      	movs	r2, #71	; 0x47
 800410e:	2101      	movs	r1, #1
 8004110:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	223d      	movs	r2, #61	; 0x3d
 8004116:	2101      	movs	r1, #1
 8004118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b002      	add	sp, #8
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	223d      	movs	r2, #61	; 0x3d
 8004130:	5c9b      	ldrb	r3, [r3, r2]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	d001      	beq.n	800413c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e03d      	b.n	80041b8 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	223d      	movs	r2, #61	; 0x3d
 8004140:	2102      	movs	r1, #2
 8004142:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2101      	movs	r1, #1
 8004150:	430a      	orrs	r2, r1
 8004152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00a      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x50>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	05db      	lsls	r3, r3, #23
 8004166:	429a      	cmp	r2, r3
 8004168:	d004      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x50>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d116      	bne.n	80041a2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <HAL_TIM_Base_Start_IT+0xa4>)
 800417c:	4013      	ands	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b06      	cmp	r3, #6
 8004184:	d016      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x90>
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	025b      	lsls	r3, r3, #9
 800418c:	429a      	cmp	r2, r3
 800418e:	d011      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2101      	movs	r1, #1
 800419c:	430a      	orrs	r2, r1
 800419e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a0:	e008      	b.n	80041b4 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2101      	movs	r1, #1
 80041ae:	430a      	orrs	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e000      	b.n	80041b6 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	0018      	movs	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b004      	add	sp, #16
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40012c00 	.word	0x40012c00
 80041c4:	40000400 	.word	0x40000400
 80041c8:	00010007 	.word	0x00010007

080041cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e04a      	b.n	8004274 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	223d      	movs	r2, #61	; 0x3d
 80041e2:	5c9b      	ldrb	r3, [r3, r2]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d107      	bne.n	80041fa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	223c      	movs	r2, #60	; 0x3c
 80041ee:	2100      	movs	r1, #0
 80041f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0018      	movs	r0, r3
 80041f6:	f000 f841 	bl	800427c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	223d      	movs	r2, #61	; 0x3d
 80041fe:	2102      	movs	r1, #2
 8004200:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3304      	adds	r3, #4
 800420a:	0019      	movs	r1, r3
 800420c:	0010      	movs	r0, r2
 800420e:	f000 fc19 	bl	8004a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2248      	movs	r2, #72	; 0x48
 8004216:	2101      	movs	r1, #1
 8004218:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	223e      	movs	r2, #62	; 0x3e
 800421e:	2101      	movs	r1, #1
 8004220:	5499      	strb	r1, [r3, r2]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	223f      	movs	r2, #63	; 0x3f
 8004226:	2101      	movs	r1, #1
 8004228:	5499      	strb	r1, [r3, r2]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2240      	movs	r2, #64	; 0x40
 800422e:	2101      	movs	r1, #1
 8004230:	5499      	strb	r1, [r3, r2]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2241      	movs	r2, #65	; 0x41
 8004236:	2101      	movs	r1, #1
 8004238:	5499      	strb	r1, [r3, r2]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2242      	movs	r2, #66	; 0x42
 800423e:	2101      	movs	r1, #1
 8004240:	5499      	strb	r1, [r3, r2]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2243      	movs	r2, #67	; 0x43
 8004246:	2101      	movs	r1, #1
 8004248:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2244      	movs	r2, #68	; 0x44
 800424e:	2101      	movs	r1, #1
 8004250:	5499      	strb	r1, [r3, r2]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2245      	movs	r2, #69	; 0x45
 8004256:	2101      	movs	r1, #1
 8004258:	5499      	strb	r1, [r3, r2]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2246      	movs	r2, #70	; 0x46
 800425e:	2101      	movs	r1, #1
 8004260:	5499      	strb	r1, [r3, r2]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2247      	movs	r2, #71	; 0x47
 8004266:	2101      	movs	r1, #1
 8004268:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	223d      	movs	r2, #61	; 0x3d
 800426e:	2101      	movs	r1, #1
 8004270:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	0018      	movs	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	b002      	add	sp, #8
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004284:	46c0      	nop			; (mov r8, r8)
 8004286:	46bd      	mov	sp, r7
 8004288:	b002      	add	sp, #8
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d108      	bne.n	80042ae <HAL_TIM_PWM_Start+0x22>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	223e      	movs	r2, #62	; 0x3e
 80042a0:	5c9b      	ldrb	r3, [r3, r2]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	1e5a      	subs	r2, r3, #1
 80042a8:	4193      	sbcs	r3, r2
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	e037      	b.n	800431e <HAL_TIM_PWM_Start+0x92>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d108      	bne.n	80042c6 <HAL_TIM_PWM_Start+0x3a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	223f      	movs	r2, #63	; 0x3f
 80042b8:	5c9b      	ldrb	r3, [r3, r2]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	1e5a      	subs	r2, r3, #1
 80042c0:	4193      	sbcs	r3, r2
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	e02b      	b.n	800431e <HAL_TIM_PWM_Start+0x92>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d108      	bne.n	80042de <HAL_TIM_PWM_Start+0x52>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2240      	movs	r2, #64	; 0x40
 80042d0:	5c9b      	ldrb	r3, [r3, r2]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	1e5a      	subs	r2, r3, #1
 80042d8:	4193      	sbcs	r3, r2
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	e01f      	b.n	800431e <HAL_TIM_PWM_Start+0x92>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b0c      	cmp	r3, #12
 80042e2:	d108      	bne.n	80042f6 <HAL_TIM_PWM_Start+0x6a>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2241      	movs	r2, #65	; 0x41
 80042e8:	5c9b      	ldrb	r3, [r3, r2]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	1e5a      	subs	r2, r3, #1
 80042f0:	4193      	sbcs	r3, r2
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	e013      	b.n	800431e <HAL_TIM_PWM_Start+0x92>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	d108      	bne.n	800430e <HAL_TIM_PWM_Start+0x82>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2242      	movs	r2, #66	; 0x42
 8004300:	5c9b      	ldrb	r3, [r3, r2]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	1e5a      	subs	r2, r3, #1
 8004308:	4193      	sbcs	r3, r2
 800430a:	b2db      	uxtb	r3, r3
 800430c:	e007      	b.n	800431e <HAL_TIM_PWM_Start+0x92>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2243      	movs	r2, #67	; 0x43
 8004312:	5c9b      	ldrb	r3, [r3, r2]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	1e5a      	subs	r2, r3, #1
 800431a:	4193      	sbcs	r3, r2
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e081      	b.n	800442a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d104      	bne.n	8004336 <HAL_TIM_PWM_Start+0xaa>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	223e      	movs	r2, #62	; 0x3e
 8004330:	2102      	movs	r1, #2
 8004332:	5499      	strb	r1, [r3, r2]
 8004334:	e023      	b.n	800437e <HAL_TIM_PWM_Start+0xf2>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b04      	cmp	r3, #4
 800433a:	d104      	bne.n	8004346 <HAL_TIM_PWM_Start+0xba>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	223f      	movs	r2, #63	; 0x3f
 8004340:	2102      	movs	r1, #2
 8004342:	5499      	strb	r1, [r3, r2]
 8004344:	e01b      	b.n	800437e <HAL_TIM_PWM_Start+0xf2>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d104      	bne.n	8004356 <HAL_TIM_PWM_Start+0xca>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2240      	movs	r2, #64	; 0x40
 8004350:	2102      	movs	r1, #2
 8004352:	5499      	strb	r1, [r3, r2]
 8004354:	e013      	b.n	800437e <HAL_TIM_PWM_Start+0xf2>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b0c      	cmp	r3, #12
 800435a:	d104      	bne.n	8004366 <HAL_TIM_PWM_Start+0xda>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2241      	movs	r2, #65	; 0x41
 8004360:	2102      	movs	r1, #2
 8004362:	5499      	strb	r1, [r3, r2]
 8004364:	e00b      	b.n	800437e <HAL_TIM_PWM_Start+0xf2>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b10      	cmp	r3, #16
 800436a:	d104      	bne.n	8004376 <HAL_TIM_PWM_Start+0xea>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2242      	movs	r2, #66	; 0x42
 8004370:	2102      	movs	r1, #2
 8004372:	5499      	strb	r1, [r3, r2]
 8004374:	e003      	b.n	800437e <HAL_TIM_PWM_Start+0xf2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2243      	movs	r2, #67	; 0x43
 800437a:	2102      	movs	r1, #2
 800437c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6839      	ldr	r1, [r7, #0]
 8004384:	2201      	movs	r2, #1
 8004386:	0018      	movs	r0, r3
 8004388:	f000 ff18 	bl	80051bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a28      	ldr	r2, [pc, #160]	; (8004434 <HAL_TIM_PWM_Start+0x1a8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d009      	beq.n	80043aa <HAL_TIM_PWM_Start+0x11e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a27      	ldr	r2, [pc, #156]	; (8004438 <HAL_TIM_PWM_Start+0x1ac>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_TIM_PWM_Start+0x11e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a25      	ldr	r2, [pc, #148]	; (800443c <HAL_TIM_PWM_Start+0x1b0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d101      	bne.n	80043ae <HAL_TIM_PWM_Start+0x122>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_TIM_PWM_Start+0x124>
 80043ae:	2300      	movs	r3, #0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2180      	movs	r1, #128	; 0x80
 80043c0:	0209      	lsls	r1, r1, #8
 80043c2:	430a      	orrs	r2, r1
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <HAL_TIM_PWM_Start+0x1a8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00a      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x15a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	05db      	lsls	r3, r3, #23
 80043d8:	429a      	cmp	r2, r3
 80043da:	d004      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x15a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a17      	ldr	r2, [pc, #92]	; (8004440 <HAL_TIM_PWM_Start+0x1b4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d116      	bne.n	8004414 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4a15      	ldr	r2, [pc, #84]	; (8004444 <HAL_TIM_PWM_Start+0x1b8>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d016      	beq.n	8004426 <HAL_TIM_PWM_Start+0x19a>
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	025b      	lsls	r3, r3, #9
 80043fe:	429a      	cmp	r2, r3
 8004400:	d011      	beq.n	8004426 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2101      	movs	r1, #1
 800440e:	430a      	orrs	r2, r1
 8004410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004412:	e008      	b.n	8004426 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2101      	movs	r1, #1
 8004420:	430a      	orrs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e000      	b.n	8004428 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	0018      	movs	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	b004      	add	sp, #16
 8004430:	bd80      	pop	{r7, pc}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800
 8004440:	40000400 	.word	0x40000400
 8004444:	00010007 	.word	0x00010007

08004448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2202      	movs	r2, #2
 8004464:	4013      	ands	r3, r2
 8004466:	d021      	beq.n	80044ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2202      	movs	r2, #2
 800446c:	4013      	ands	r3, r2
 800446e:	d01d      	beq.n	80044ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2203      	movs	r2, #3
 8004476:	4252      	negs	r2, r2
 8004478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	2203      	movs	r2, #3
 8004488:	4013      	ands	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	0018      	movs	r0, r3
 8004490:	f000 fac0 	bl	8004a14 <HAL_TIM_IC_CaptureCallback>
 8004494:	e007      	b.n	80044a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	0018      	movs	r0, r3
 800449a:	f000 fab3 	bl	8004a04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f000 fabf 	bl	8004a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2204      	movs	r2, #4
 80044b0:	4013      	ands	r3, r2
 80044b2:	d022      	beq.n	80044fa <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2204      	movs	r2, #4
 80044b8:	4013      	ands	r3, r2
 80044ba:	d01e      	beq.n	80044fa <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2205      	movs	r2, #5
 80044c2:	4252      	negs	r2, r2
 80044c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2202      	movs	r2, #2
 80044ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	23c0      	movs	r3, #192	; 0xc0
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4013      	ands	r3, r2
 80044d8:	d004      	beq.n	80044e4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	0018      	movs	r0, r3
 80044de:	f000 fa99 	bl	8004a14 <HAL_TIM_IC_CaptureCallback>
 80044e2:	e007      	b.n	80044f4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	0018      	movs	r0, r3
 80044e8:	f000 fa8c 	bl	8004a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	0018      	movs	r0, r3
 80044f0:	f000 fa98 	bl	8004a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2208      	movs	r2, #8
 80044fe:	4013      	ands	r3, r2
 8004500:	d021      	beq.n	8004546 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2208      	movs	r2, #8
 8004506:	4013      	ands	r3, r2
 8004508:	d01d      	beq.n	8004546 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2209      	movs	r2, #9
 8004510:	4252      	negs	r2, r2
 8004512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2204      	movs	r2, #4
 8004518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	2203      	movs	r2, #3
 8004522:	4013      	ands	r3, r2
 8004524:	d004      	beq.n	8004530 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	0018      	movs	r0, r3
 800452a:	f000 fa73 	bl	8004a14 <HAL_TIM_IC_CaptureCallback>
 800452e:	e007      	b.n	8004540 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	0018      	movs	r0, r3
 8004534:	f000 fa66 	bl	8004a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	0018      	movs	r0, r3
 800453c:	f000 fa72 	bl	8004a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2210      	movs	r2, #16
 800454a:	4013      	ands	r3, r2
 800454c:	d022      	beq.n	8004594 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2210      	movs	r2, #16
 8004552:	4013      	ands	r3, r2
 8004554:	d01e      	beq.n	8004594 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2211      	movs	r2, #17
 800455c:	4252      	negs	r2, r2
 800455e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2208      	movs	r2, #8
 8004564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	23c0      	movs	r3, #192	; 0xc0
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4013      	ands	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	0018      	movs	r0, r3
 8004578:	f000 fa4c 	bl	8004a14 <HAL_TIM_IC_CaptureCallback>
 800457c:	e007      	b.n	800458e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0018      	movs	r0, r3
 8004582:	f000 fa3f 	bl	8004a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0018      	movs	r0, r3
 800458a:	f000 fa4b 	bl	8004a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2201      	movs	r2, #1
 8004598:	4013      	ands	r3, r2
 800459a:	d00c      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	4013      	ands	r3, r2
 80045a2:	d008      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2202      	movs	r2, #2
 80045aa:	4252      	negs	r2, r2
 80045ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7fc fa9f 	bl	8000af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2280      	movs	r2, #128	; 0x80
 80045ba:	4013      	ands	r3, r2
 80045bc:	d104      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	2380      	movs	r3, #128	; 0x80
 80045c2:	019b      	lsls	r3, r3, #6
 80045c4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045c6:	d00b      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2280      	movs	r2, #128	; 0x80
 80045cc:	4013      	ands	r3, r2
 80045ce:	d007      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <HAL_TIM_IRQHandler+0x208>)
 80045d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	0018      	movs	r0, r3
 80045dc:	f000 ff1e 	bl	800541c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	4013      	ands	r3, r2
 80045e8:	d00b      	beq.n	8004602 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2280      	movs	r2, #128	; 0x80
 80045ee:	4013      	ands	r3, r2
 80045f0:	d007      	beq.n	8004602 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a17      	ldr	r2, [pc, #92]	; (8004654 <HAL_TIM_IRQHandler+0x20c>)
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f000 ff15 	bl	800542c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2240      	movs	r2, #64	; 0x40
 8004606:	4013      	ands	r3, r2
 8004608:	d00c      	beq.n	8004624 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2240      	movs	r2, #64	; 0x40
 800460e:	4013      	ands	r3, r2
 8004610:	d008      	beq.n	8004624 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2241      	movs	r2, #65	; 0x41
 8004618:	4252      	negs	r2, r2
 800461a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	0018      	movs	r0, r3
 8004620:	f000 fa08 	bl	8004a34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2220      	movs	r2, #32
 8004628:	4013      	ands	r3, r2
 800462a:	d00c      	beq.n	8004646 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	4013      	ands	r3, r2
 8004632:	d008      	beq.n	8004646 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2221      	movs	r2, #33	; 0x21
 800463a:	4252      	negs	r2, r2
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	0018      	movs	r0, r3
 8004642:	f000 fee3 	bl	800540c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	46bd      	mov	sp, r7
 800464a:	b004      	add	sp, #16
 800464c:	bd80      	pop	{r7, pc}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	ffffdf7f 	.word	0xffffdf7f
 8004654:	fffffeff 	.word	0xfffffeff

08004658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004664:	2317      	movs	r3, #23
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	223c      	movs	r2, #60	; 0x3c
 8004670:	5c9b      	ldrb	r3, [r3, r2]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004676:	2302      	movs	r3, #2
 8004678:	e0e5      	b.n	8004846 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	223c      	movs	r2, #60	; 0x3c
 800467e:	2101      	movs	r1, #1
 8004680:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b14      	cmp	r3, #20
 8004686:	d900      	bls.n	800468a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004688:	e0d1      	b.n	800482e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	009a      	lsls	r2, r3, #2
 800468e:	4b70      	ldr	r3, [pc, #448]	; (8004850 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004690:	18d3      	adds	r3, r2, r3
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	0011      	movs	r1, r2
 800469e:	0018      	movs	r0, r3
 80046a0:	f000 fa54 	bl	8004b4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2108      	movs	r1, #8
 80046b0:	430a      	orrs	r2, r1
 80046b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2104      	movs	r1, #4
 80046c0:	438a      	bics	r2, r1
 80046c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6999      	ldr	r1, [r3, #24]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	619a      	str	r2, [r3, #24]
      break;
 80046d6:	e0af      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	0011      	movs	r1, r2
 80046e0:	0018      	movs	r0, r3
 80046e2:	f000 fab3 	bl	8004c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699a      	ldr	r2, [r3, #24]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2180      	movs	r1, #128	; 0x80
 80046f2:	0109      	lsls	r1, r1, #4
 80046f4:	430a      	orrs	r2, r1
 80046f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4954      	ldr	r1, [pc, #336]	; (8004854 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004704:	400a      	ands	r2, r1
 8004706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	021a      	lsls	r2, r3, #8
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	619a      	str	r2, [r3, #24]
      break;
 800471c:	e08c      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	0011      	movs	r1, r2
 8004726:	0018      	movs	r0, r3
 8004728:	f000 fb0e 	bl	8004d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2108      	movs	r1, #8
 8004738:	430a      	orrs	r2, r1
 800473a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2104      	movs	r1, #4
 8004748:	438a      	bics	r2, r1
 800474a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69d9      	ldr	r1, [r3, #28]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	61da      	str	r2, [r3, #28]
      break;
 800475e:	e06b      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	0011      	movs	r1, r2
 8004768:	0018      	movs	r0, r3
 800476a:	f000 fb6f 	bl	8004e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2180      	movs	r1, #128	; 0x80
 800477a:	0109      	lsls	r1, r1, #4
 800477c:	430a      	orrs	r2, r1
 800477e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69da      	ldr	r2, [r3, #28]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4932      	ldr	r1, [pc, #200]	; (8004854 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800478c:	400a      	ands	r2, r1
 800478e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69d9      	ldr	r1, [r3, #28]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	021a      	lsls	r2, r3, #8
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	61da      	str	r2, [r3, #28]
      break;
 80047a4:	e048      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	0011      	movs	r1, r2
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 fbb0 	bl	8004f14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2108      	movs	r1, #8
 80047c0:	430a      	orrs	r2, r1
 80047c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2104      	movs	r1, #4
 80047d0:	438a      	bics	r2, r1
 80047d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047e6:	e027      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	0011      	movs	r1, r2
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 fbe9 	bl	8004fc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2180      	movs	r1, #128	; 0x80
 8004802:	0109      	lsls	r1, r1, #4
 8004804:	430a      	orrs	r2, r1
 8004806:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4910      	ldr	r1, [pc, #64]	; (8004854 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004814:	400a      	ands	r2, r1
 8004816:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	021a      	lsls	r2, r3, #8
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800482c:	e004      	b.n	8004838 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800482e:	2317      	movs	r3, #23
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	2201      	movs	r2, #1
 8004834:	701a      	strb	r2, [r3, #0]
      break;
 8004836:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	223c      	movs	r2, #60	; 0x3c
 800483c:	2100      	movs	r1, #0
 800483e:	5499      	strb	r1, [r3, r2]

  return status;
 8004840:	2317      	movs	r3, #23
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	781b      	ldrb	r3, [r3, #0]
}
 8004846:	0018      	movs	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	b006      	add	sp, #24
 800484c:	bd80      	pop	{r7, pc}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	08007a80 	.word	0x08007a80
 8004854:	fffffbff 	.word	0xfffffbff

08004858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004862:	230f      	movs	r3, #15
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	2200      	movs	r2, #0
 8004868:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	223c      	movs	r2, #60	; 0x3c
 800486e:	5c9b      	ldrb	r3, [r3, r2]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_TIM_ConfigClockSource+0x20>
 8004874:	2302      	movs	r3, #2
 8004876:	e0bc      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x19a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	223c      	movs	r2, #60	; 0x3c
 800487c:	2101      	movs	r1, #1
 800487e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	223d      	movs	r2, #61	; 0x3d
 8004884:	2102      	movs	r1, #2
 8004886:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4a5a      	ldr	r2, [pc, #360]	; (80049fc <HAL_TIM_ConfigClockSource+0x1a4>)
 8004894:	4013      	ands	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4a59      	ldr	r2, [pc, #356]	; (8004a00 <HAL_TIM_ConfigClockSource+0x1a8>)
 800489c:	4013      	ands	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2280      	movs	r2, #128	; 0x80
 80048ae:	0192      	lsls	r2, r2, #6
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d040      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0xde>
 80048b4:	2280      	movs	r2, #128	; 0x80
 80048b6:	0192      	lsls	r2, r2, #6
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d900      	bls.n	80048be <HAL_TIM_ConfigClockSource+0x66>
 80048bc:	e088      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x178>
 80048be:	2280      	movs	r2, #128	; 0x80
 80048c0:	0152      	lsls	r2, r2, #5
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d100      	bne.n	80048c8 <HAL_TIM_ConfigClockSource+0x70>
 80048c6:	e088      	b.n	80049da <HAL_TIM_ConfigClockSource+0x182>
 80048c8:	2280      	movs	r2, #128	; 0x80
 80048ca:	0152      	lsls	r2, r2, #5
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d900      	bls.n	80048d2 <HAL_TIM_ConfigClockSource+0x7a>
 80048d0:	e07e      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x178>
 80048d2:	2b70      	cmp	r3, #112	; 0x70
 80048d4:	d018      	beq.n	8004908 <HAL_TIM_ConfigClockSource+0xb0>
 80048d6:	d900      	bls.n	80048da <HAL_TIM_ConfigClockSource+0x82>
 80048d8:	e07a      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x178>
 80048da:	2b60      	cmp	r3, #96	; 0x60
 80048dc:	d04f      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x126>
 80048de:	d900      	bls.n	80048e2 <HAL_TIM_ConfigClockSource+0x8a>
 80048e0:	e076      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x178>
 80048e2:	2b50      	cmp	r3, #80	; 0x50
 80048e4:	d03b      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x106>
 80048e6:	d900      	bls.n	80048ea <HAL_TIM_ConfigClockSource+0x92>
 80048e8:	e072      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x178>
 80048ea:	2b40      	cmp	r3, #64	; 0x40
 80048ec:	d057      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x146>
 80048ee:	d900      	bls.n	80048f2 <HAL_TIM_ConfigClockSource+0x9a>
 80048f0:	e06e      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x178>
 80048f2:	2b30      	cmp	r3, #48	; 0x30
 80048f4:	d063      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x166>
 80048f6:	d86b      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x178>
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d060      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x166>
 80048fc:	d868      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x178>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d05d      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x166>
 8004902:	2b10      	cmp	r3, #16
 8004904:	d05b      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x166>
 8004906:	e063      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004918:	f000 fc30 	bl	800517c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2277      	movs	r2, #119	; 0x77
 8004928:	4313      	orrs	r3, r2
 800492a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	609a      	str	r2, [r3, #8]
      break;
 8004934:	e052      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004946:	f000 fc19 	bl	800517c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2180      	movs	r1, #128	; 0x80
 8004956:	01c9      	lsls	r1, r1, #7
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]
      break;
 800495c:	e03e      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800496a:	001a      	movs	r2, r3
 800496c:	f000 fb8a 	bl	8005084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2150      	movs	r1, #80	; 0x50
 8004976:	0018      	movs	r0, r3
 8004978:	f000 fbe4 	bl	8005144 <TIM_ITRx_SetConfig>
      break;
 800497c:	e02e      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800498a:	001a      	movs	r2, r3
 800498c:	f000 fba8 	bl	80050e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2160      	movs	r1, #96	; 0x60
 8004996:	0018      	movs	r0, r3
 8004998:	f000 fbd4 	bl	8005144 <TIM_ITRx_SetConfig>
      break;
 800499c:	e01e      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049aa:	001a      	movs	r2, r3
 80049ac:	f000 fb6a 	bl	8005084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2140      	movs	r1, #64	; 0x40
 80049b6:	0018      	movs	r0, r3
 80049b8:	f000 fbc4 	bl	8005144 <TIM_ITRx_SetConfig>
      break;
 80049bc:	e00e      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	0019      	movs	r1, r3
 80049c8:	0010      	movs	r0, r2
 80049ca:	f000 fbbb 	bl	8005144 <TIM_ITRx_SetConfig>
      break;
 80049ce:	e005      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80049d0:	230f      	movs	r3, #15
 80049d2:	18fb      	adds	r3, r7, r3
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
      break;
 80049d8:	e000      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80049da:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	223d      	movs	r2, #61	; 0x3d
 80049e0:	2101      	movs	r1, #1
 80049e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	223c      	movs	r2, #60	; 0x3c
 80049e8:	2100      	movs	r1, #0
 80049ea:	5499      	strb	r1, [r3, r2]

  return status;
 80049ec:	230f      	movs	r3, #15
 80049ee:	18fb      	adds	r3, r7, r3
 80049f0:	781b      	ldrb	r3, [r3, #0]
}
 80049f2:	0018      	movs	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	b004      	add	sp, #16
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	ffceff88 	.word	0xffceff88
 8004a00:	ffff00ff 	.word	0xffff00ff

08004a04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a0c:	46c0      	nop			; (mov r8, r8)
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b002      	add	sp, #8
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b002      	add	sp, #8
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a2c:	46c0      	nop			; (mov r8, r8)
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b002      	add	sp, #8
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a3c:	46c0      	nop			; (mov r8, r8)
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b002      	add	sp, #8
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a37      	ldr	r2, [pc, #220]	; (8004b34 <TIM_Base_SetConfig+0xf0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d008      	beq.n	8004a6e <TIM_Base_SetConfig+0x2a>
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	05db      	lsls	r3, r3, #23
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d003      	beq.n	8004a6e <TIM_Base_SetConfig+0x2a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a33      	ldr	r2, [pc, #204]	; (8004b38 <TIM_Base_SetConfig+0xf4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d108      	bne.n	8004a80 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2270      	movs	r2, #112	; 0x70
 8004a72:	4393      	bics	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a2c      	ldr	r2, [pc, #176]	; (8004b34 <TIM_Base_SetConfig+0xf0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d014      	beq.n	8004ab2 <TIM_Base_SetConfig+0x6e>
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	2380      	movs	r3, #128	; 0x80
 8004a8c:	05db      	lsls	r3, r3, #23
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d00f      	beq.n	8004ab2 <TIM_Base_SetConfig+0x6e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a28      	ldr	r2, [pc, #160]	; (8004b38 <TIM_Base_SetConfig+0xf4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00b      	beq.n	8004ab2 <TIM_Base_SetConfig+0x6e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a27      	ldr	r2, [pc, #156]	; (8004b3c <TIM_Base_SetConfig+0xf8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <TIM_Base_SetConfig+0x6e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a26      	ldr	r2, [pc, #152]	; (8004b40 <TIM_Base_SetConfig+0xfc>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d003      	beq.n	8004ab2 <TIM_Base_SetConfig+0x6e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a25      	ldr	r2, [pc, #148]	; (8004b44 <TIM_Base_SetConfig+0x100>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d108      	bne.n	8004ac4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a24      	ldr	r2, [pc, #144]	; (8004b48 <TIM_Base_SetConfig+0x104>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2280      	movs	r2, #128	; 0x80
 8004ac8:	4393      	bics	r3, r2
 8004aca:	001a      	movs	r2, r3
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a11      	ldr	r2, [pc, #68]	; (8004b34 <TIM_Base_SetConfig+0xf0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d007      	beq.n	8004b02 <TIM_Base_SetConfig+0xbe>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a12      	ldr	r2, [pc, #72]	; (8004b40 <TIM_Base_SetConfig+0xfc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_Base_SetConfig+0xbe>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <TIM_Base_SetConfig+0x100>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d103      	bne.n	8004b0a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2201      	movs	r2, #1
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d106      	bne.n	8004b2a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2201      	movs	r2, #1
 8004b22:	4393      	bics	r3, r2
 8004b24:	001a      	movs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	611a      	str	r2, [r3, #16]
  }
}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	b004      	add	sp, #16
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	40012c00 	.word	0x40012c00
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40002000 	.word	0x40002000
 8004b40:	40014400 	.word	0x40014400
 8004b44:	40014800 	.word	0x40014800
 8004b48:	fffffcff 	.word	0xfffffcff

08004b4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	2201      	movs	r2, #1
 8004b62:	4393      	bics	r3, r2
 8004b64:	001a      	movs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4a2e      	ldr	r2, [pc, #184]	; (8004c34 <TIM_OC1_SetConfig+0xe8>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2203      	movs	r2, #3
 8004b82:	4393      	bics	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2202      	movs	r2, #2
 8004b94:	4393      	bics	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a24      	ldr	r2, [pc, #144]	; (8004c38 <TIM_OC1_SetConfig+0xec>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d007      	beq.n	8004bba <TIM_OC1_SetConfig+0x6e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a23      	ldr	r2, [pc, #140]	; (8004c3c <TIM_OC1_SetConfig+0xf0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d003      	beq.n	8004bba <TIM_OC1_SetConfig+0x6e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a22      	ldr	r2, [pc, #136]	; (8004c40 <TIM_OC1_SetConfig+0xf4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d10c      	bne.n	8004bd4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2208      	movs	r2, #8
 8004bbe:	4393      	bics	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2204      	movs	r2, #4
 8004bd0:	4393      	bics	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a18      	ldr	r2, [pc, #96]	; (8004c38 <TIM_OC1_SetConfig+0xec>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d007      	beq.n	8004bec <TIM_OC1_SetConfig+0xa0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <TIM_OC1_SetConfig+0xf0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_OC1_SetConfig+0xa0>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <TIM_OC1_SetConfig+0xf4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d111      	bne.n	8004c10 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <TIM_OC1_SetConfig+0xf8>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <TIM_OC1_SetConfig+0xfc>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b006      	add	sp, #24
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	fffeff8f 	.word	0xfffeff8f
 8004c38:	40012c00 	.word	0x40012c00
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800
 8004c44:	fffffeff 	.word	0xfffffeff
 8004c48:	fffffdff 	.word	0xfffffdff

08004c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	2210      	movs	r2, #16
 8004c62:	4393      	bics	r3, r2
 8004c64:	001a      	movs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a2c      	ldr	r2, [pc, #176]	; (8004d2c <TIM_OC2_SetConfig+0xe0>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4a2b      	ldr	r2, [pc, #172]	; (8004d30 <TIM_OC2_SetConfig+0xe4>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2220      	movs	r2, #32
 8004c96:	4393      	bics	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a22      	ldr	r2, [pc, #136]	; (8004d34 <TIM_OC2_SetConfig+0xe8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d10d      	bne.n	8004cca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2280      	movs	r2, #128	; 0x80
 8004cb2:	4393      	bics	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2240      	movs	r2, #64	; 0x40
 8004cc6:	4393      	bics	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a19      	ldr	r2, [pc, #100]	; (8004d34 <TIM_OC2_SetConfig+0xe8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d007      	beq.n	8004ce2 <TIM_OC2_SetConfig+0x96>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <TIM_OC2_SetConfig+0xec>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_OC2_SetConfig+0x96>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a17      	ldr	r2, [pc, #92]	; (8004d3c <TIM_OC2_SetConfig+0xf0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d113      	bne.n	8004d0a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4a16      	ldr	r2, [pc, #88]	; (8004d40 <TIM_OC2_SetConfig+0xf4>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4a15      	ldr	r2, [pc, #84]	; (8004d44 <TIM_OC2_SetConfig+0xf8>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	621a      	str	r2, [r3, #32]
}
 8004d24:	46c0      	nop			; (mov r8, r8)
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b006      	add	sp, #24
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	feff8fff 	.word	0xfeff8fff
 8004d30:	fffffcff 	.word	0xfffffcff
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40014400 	.word	0x40014400
 8004d3c:	40014800 	.word	0x40014800
 8004d40:	fffffbff 	.word	0xfffffbff
 8004d44:	fffff7ff 	.word	0xfffff7ff

08004d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	4a31      	ldr	r2, [pc, #196]	; (8004e24 <TIM_OC3_SetConfig+0xdc>)
 8004d5e:	401a      	ands	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4a2d      	ldr	r2, [pc, #180]	; (8004e28 <TIM_OC3_SetConfig+0xe0>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	4393      	bics	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	4a27      	ldr	r2, [pc, #156]	; (8004e2c <TIM_OC3_SetConfig+0xe4>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a23      	ldr	r2, [pc, #140]	; (8004e30 <TIM_OC3_SetConfig+0xe8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d10d      	bne.n	8004dc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	4a22      	ldr	r2, [pc, #136]	; (8004e34 <TIM_OC3_SetConfig+0xec>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	4a1e      	ldr	r2, [pc, #120]	; (8004e38 <TIM_OC3_SetConfig+0xf0>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a1a      	ldr	r2, [pc, #104]	; (8004e30 <TIM_OC3_SetConfig+0xe8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <TIM_OC3_SetConfig+0x92>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a1b      	ldr	r2, [pc, #108]	; (8004e3c <TIM_OC3_SetConfig+0xf4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <TIM_OC3_SetConfig+0x92>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a1a      	ldr	r2, [pc, #104]	; (8004e40 <TIM_OC3_SetConfig+0xf8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d113      	bne.n	8004e02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4a19      	ldr	r2, [pc, #100]	; (8004e44 <TIM_OC3_SetConfig+0xfc>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <TIM_OC3_SetConfig+0x100>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	621a      	str	r2, [r3, #32]
}
 8004e1c:	46c0      	nop			; (mov r8, r8)
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	b006      	add	sp, #24
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	fffffeff 	.word	0xfffffeff
 8004e28:	fffeff8f 	.word	0xfffeff8f
 8004e2c:	fffffdff 	.word	0xfffffdff
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	fffff7ff 	.word	0xfffff7ff
 8004e38:	fffffbff 	.word	0xfffffbff
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800
 8004e44:	ffffefff 	.word	0xffffefff
 8004e48:	ffffdfff 	.word	0xffffdfff

08004e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	4a24      	ldr	r2, [pc, #144]	; (8004ef4 <TIM_OC4_SetConfig+0xa8>)
 8004e62:	401a      	ands	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a20      	ldr	r2, [pc, #128]	; (8004ef8 <TIM_OC4_SetConfig+0xac>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4a1f      	ldr	r2, [pc, #124]	; (8004efc <TIM_OC4_SetConfig+0xb0>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4a1b      	ldr	r2, [pc, #108]	; (8004f00 <TIM_OC4_SetConfig+0xb4>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	031b      	lsls	r3, r3, #12
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a17      	ldr	r2, [pc, #92]	; (8004f04 <TIM_OC4_SetConfig+0xb8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d007      	beq.n	8004ebc <TIM_OC4_SetConfig+0x70>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <TIM_OC4_SetConfig+0xbc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_OC4_SetConfig+0x70>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <TIM_OC4_SetConfig+0xc0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d109      	bne.n	8004ed0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4a14      	ldr	r2, [pc, #80]	; (8004f10 <TIM_OC4_SetConfig+0xc4>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	019b      	lsls	r3, r3, #6
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b006      	add	sp, #24
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	ffffefff 	.word	0xffffefff
 8004ef8:	feff8fff 	.word	0xfeff8fff
 8004efc:	fffffcff 	.word	0xfffffcff
 8004f00:	ffffdfff 	.word	0xffffdfff
 8004f04:	40012c00 	.word	0x40012c00
 8004f08:	40014400 	.word	0x40014400
 8004f0c:	40014800 	.word	0x40014800
 8004f10:	ffffbfff 	.word	0xffffbfff

08004f14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	4a21      	ldr	r2, [pc, #132]	; (8004fb0 <TIM_OC5_SetConfig+0x9c>)
 8004f2a:	401a      	ands	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <TIM_OC5_SetConfig+0xa0>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4a19      	ldr	r2, [pc, #100]	; (8004fb8 <TIM_OC5_SetConfig+0xa4>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <TIM_OC5_SetConfig+0xa8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d007      	beq.n	8004f7a <TIM_OC5_SetConfig+0x66>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a14      	ldr	r2, [pc, #80]	; (8004fc0 <TIM_OC5_SetConfig+0xac>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_OC5_SetConfig+0x66>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a13      	ldr	r2, [pc, #76]	; (8004fc4 <TIM_OC5_SetConfig+0xb0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d109      	bne.n	8004f8e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	4a0c      	ldr	r2, [pc, #48]	; (8004fb0 <TIM_OC5_SetConfig+0x9c>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	621a      	str	r2, [r3, #32]
}
 8004fa8:	46c0      	nop			; (mov r8, r8)
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b006      	add	sp, #24
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	fffeffff 	.word	0xfffeffff
 8004fb4:	fffeff8f 	.word	0xfffeff8f
 8004fb8:	fffdffff 	.word	0xfffdffff
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40014400 	.word	0x40014400
 8004fc4:	40014800 	.word	0x40014800

08004fc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	4a22      	ldr	r2, [pc, #136]	; (8005068 <TIM_OC6_SetConfig+0xa0>)
 8004fde:	401a      	ands	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a1e      	ldr	r2, [pc, #120]	; (800506c <TIM_OC6_SetConfig+0xa4>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4a1a      	ldr	r2, [pc, #104]	; (8005070 <TIM_OC6_SetConfig+0xa8>)
 8005008:	4013      	ands	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	051b      	lsls	r3, r3, #20
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a16      	ldr	r2, [pc, #88]	; (8005074 <TIM_OC6_SetConfig+0xac>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d007      	beq.n	8005030 <TIM_OC6_SetConfig+0x68>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a15      	ldr	r2, [pc, #84]	; (8005078 <TIM_OC6_SetConfig+0xb0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_OC6_SetConfig+0x68>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a14      	ldr	r2, [pc, #80]	; (800507c <TIM_OC6_SetConfig+0xb4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d109      	bne.n	8005044 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4a13      	ldr	r2, [pc, #76]	; (8005080 <TIM_OC6_SetConfig+0xb8>)
 8005034:	4013      	ands	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	029b      	lsls	r3, r3, #10
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	621a      	str	r2, [r3, #32]
}
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	46bd      	mov	sp, r7
 8005062:	b006      	add	sp, #24
 8005064:	bd80      	pop	{r7, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	ffefffff 	.word	0xffefffff
 800506c:	feff8fff 	.word	0xfeff8fff
 8005070:	ffdfffff 	.word	0xffdfffff
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40014400 	.word	0x40014400
 800507c:	40014800 	.word	0x40014800
 8005080:	fffbffff 	.word	0xfffbffff

08005084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	2201      	movs	r2, #1
 800509c:	4393      	bics	r3, r2
 800509e:	001a      	movs	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	22f0      	movs	r2, #240	; 0xf0
 80050ae:	4393      	bics	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	220a      	movs	r2, #10
 80050c0:	4393      	bics	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	621a      	str	r2, [r3, #32]
}
 80050d8:	46c0      	nop			; (mov r8, r8)
 80050da:	46bd      	mov	sp, r7
 80050dc:	b006      	add	sp, #24
 80050de:	bd80      	pop	{r7, pc}

080050e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	2210      	movs	r2, #16
 80050f8:	4393      	bics	r3, r2
 80050fa:	001a      	movs	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4a0d      	ldr	r2, [pc, #52]	; (8005140 <TIM_TI2_ConfigInputStage+0x60>)
 800510a:	4013      	ands	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	031b      	lsls	r3, r3, #12
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	22a0      	movs	r2, #160	; 0xa0
 800511c:	4393      	bics	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	621a      	str	r2, [r3, #32]
}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	46bd      	mov	sp, r7
 800513a:	b006      	add	sp, #24
 800513c:	bd80      	pop	{r7, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	ffff0fff 	.word	0xffff0fff

08005144 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4a08      	ldr	r2, [pc, #32]	; (8005178 <TIM_ITRx_SetConfig+0x34>)
 8005158:	4013      	ands	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	2207      	movs	r2, #7
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	609a      	str	r2, [r3, #8]
}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	46bd      	mov	sp, r7
 8005172:	b004      	add	sp, #16
 8005174:	bd80      	pop	{r7, pc}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	ffcfff8f 	.word	0xffcfff8f

0800517c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <TIM_ETR_SetConfig+0x3c>)
 8005194:	4013      	ands	r3, r2
 8005196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	021a      	lsls	r2, r3, #8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	431a      	orrs	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	46c0      	nop			; (mov r8, r8)
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b006      	add	sp, #24
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	ffff00ff 	.word	0xffff00ff

080051bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	221f      	movs	r2, #31
 80051cc:	4013      	ands	r3, r2
 80051ce:	2201      	movs	r2, #1
 80051d0:	409a      	lsls	r2, r3
 80051d2:	0013      	movs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	43d2      	mvns	r2, r2
 80051de:	401a      	ands	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	211f      	movs	r1, #31
 80051ec:	400b      	ands	r3, r1
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4099      	lsls	r1, r3
 80051f2:	000b      	movs	r3, r1
 80051f4:	431a      	orrs	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b006      	add	sp, #24
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	223c      	movs	r2, #60	; 0x3c
 8005212:	5c9b      	ldrb	r3, [r3, r2]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005218:	2302      	movs	r3, #2
 800521a:	e050      	b.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	223c      	movs	r2, #60	; 0x3c
 8005220:	2101      	movs	r1, #1
 8005222:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	223d      	movs	r2, #61	; 0x3d
 8005228:	2102      	movs	r1, #2
 800522a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a21      	ldr	r2, [pc, #132]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d108      	bne.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4a20      	ldr	r2, [pc, #128]	; (80052cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800524a:	4013      	ands	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2270      	movs	r2, #112	; 0x70
 800525c:	4393      	bics	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00a      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	2380      	movs	r3, #128	; 0x80
 8005282:	05db      	lsls	r3, r3, #23
 8005284:	429a      	cmp	r2, r3
 8005286:	d004      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a10      	ldr	r2, [pc, #64]	; (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10c      	bne.n	80052ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2280      	movs	r2, #128	; 0x80
 8005296:	4393      	bics	r3, r2
 8005298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	223d      	movs	r2, #61	; 0x3d
 80052b0:	2101      	movs	r1, #1
 80052b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	223c      	movs	r2, #60	; 0x3c
 80052b8:	2100      	movs	r1, #0
 80052ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	0018      	movs	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b004      	add	sp, #16
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	ff0fffff 	.word	0xff0fffff
 80052d0:	40000400 	.word	0x40000400

080052d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	223c      	movs	r2, #60	; 0x3c
 80052e6:	5c9b      	ldrb	r3, [r3, r2]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e06f      	b.n	80053d0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	223c      	movs	r2, #60	; 0x3c
 80052f4:	2101      	movs	r1, #1
 80052f6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	22ff      	movs	r2, #255	; 0xff
 80052fc:	4393      	bics	r3, r2
 80052fe:	001a      	movs	r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4a33      	ldr	r2, [pc, #204]	; (80053d8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800530c:	401a      	ands	r2, r3
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4a30      	ldr	r2, [pc, #192]	; (80053dc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800531a:	401a      	ands	r2, r3
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4a2e      	ldr	r2, [pc, #184]	; (80053e0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005328:	401a      	ands	r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a2b      	ldr	r2, [pc, #172]	; (80053e4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005336:	401a      	ands	r2, r3
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a29      	ldr	r2, [pc, #164]	; (80053e8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005344:	401a      	ands	r2, r3
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4a26      	ldr	r2, [pc, #152]	; (80053ec <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005352:	401a      	ands	r2, r3
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4a24      	ldr	r2, [pc, #144]	; (80053f0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005360:	401a      	ands	r2, r3
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	041b      	lsls	r3, r3, #16
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4a21      	ldr	r2, [pc, #132]	; (80053f4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005370:	401a      	ands	r2, r3
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1e      	ldr	r2, [pc, #120]	; (80053f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d11c      	bne.n	80053be <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005388:	401a      	ands	r2, r3
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	051b      	lsls	r3, r3, #20
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4a1a      	ldr	r2, [pc, #104]	; (8005400 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005398:	401a      	ands	r2, r3
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4a17      	ldr	r2, [pc, #92]	; (8005404 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80053a6:	401a      	ands	r2, r3
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a15      	ldr	r2, [pc, #84]	; (8005408 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80053b4:	401a      	ands	r2, r3
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	223c      	movs	r2, #60	; 0x3c
 80053ca:	2100      	movs	r1, #0
 80053cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	0018      	movs	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b004      	add	sp, #16
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	fffffcff 	.word	0xfffffcff
 80053dc:	fffffbff 	.word	0xfffffbff
 80053e0:	fffff7ff 	.word	0xfffff7ff
 80053e4:	ffffefff 	.word	0xffffefff
 80053e8:	ffffdfff 	.word	0xffffdfff
 80053ec:	ffffbfff 	.word	0xffffbfff
 80053f0:	fff0ffff 	.word	0xfff0ffff
 80053f4:	efffffff 	.word	0xefffffff
 80053f8:	40012c00 	.word	0x40012c00
 80053fc:	ff0fffff 	.word	0xff0fffff
 8005400:	feffffff 	.word	0xfeffffff
 8005404:	fdffffff 	.word	0xfdffffff
 8005408:	dfffffff 	.word	0xdfffffff

0800540c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005414:	46c0      	nop			; (mov r8, r8)
 8005416:	46bd      	mov	sp, r7
 8005418:	b002      	add	sp, #8
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005424:	46c0      	nop			; (mov r8, r8)
 8005426:	46bd      	mov	sp, r7
 8005428:	b002      	add	sp, #8
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005434:	46c0      	nop			; (mov r8, r8)
 8005436:	46bd      	mov	sp, r7
 8005438:	b002      	add	sp, #8
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e04e      	b.n	80054ec <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2288      	movs	r2, #136	; 0x88
 8005452:	589b      	ldr	r3, [r3, r2]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d107      	bne.n	8005468 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2284      	movs	r2, #132	; 0x84
 800545c:	2100      	movs	r1, #0
 800545e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	0018      	movs	r0, r3
 8005464:	f7fb fe80 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2288      	movs	r2, #136	; 0x88
 800546c:	2124      	movs	r1, #36	; 0x24
 800546e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2101      	movs	r1, #1
 800547c:	438a      	bics	r2, r1
 800547e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	0018      	movs	r0, r3
 800548c:	f000 faac 	bl	80059e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	0018      	movs	r0, r3
 8005494:	f000 f830 	bl	80054f8 <UART_SetConfig>
 8005498:	0003      	movs	r3, r0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e024      	b.n	80054ec <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4911      	ldr	r1, [pc, #68]	; (80054f4 <HAL_HalfDuplex_Init+0xb8>)
 80054ae:	400a      	ands	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2122      	movs	r1, #34	; 0x22
 80054be:	438a      	bics	r2, r1
 80054c0:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2108      	movs	r1, #8
 80054ce:	430a      	orrs	r2, r1
 80054d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2101      	movs	r1, #1
 80054de:	430a      	orrs	r2, r1
 80054e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	0018      	movs	r0, r3
 80054e6:	f000 fb33 	bl	8005b50 <UART_CheckIdleState>
 80054ea:	0003      	movs	r3, r0
}
 80054ec:	0018      	movs	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b002      	add	sp, #8
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	ffffb7ff 	.word	0xffffb7ff

080054f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f8:	b5b0      	push	{r4, r5, r7, lr}
 80054fa:	b090      	sub	sp, #64	; 0x40
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005500:	231a      	movs	r3, #26
 8005502:	2220      	movs	r2, #32
 8005504:	189b      	adds	r3, r3, r2
 8005506:	19db      	adds	r3, r3, r7
 8005508:	2200      	movs	r2, #0
 800550a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	431a      	orrs	r2, r3
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	431a      	orrs	r2, r3
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	4313      	orrs	r3, r2
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4ac4      	ldr	r2, [pc, #784]	; (800583c <UART_SetConfig+0x344>)
 800552c:	4013      	ands	r3, r2
 800552e:	0019      	movs	r1, r3
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005536:	430b      	orrs	r3, r1
 8005538:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4abf      	ldr	r2, [pc, #764]	; (8005840 <UART_SetConfig+0x348>)
 8005542:	4013      	ands	r3, r2
 8005544:	0018      	movs	r0, r3
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	68d9      	ldr	r1, [r3, #12]
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	0003      	movs	r3, r0
 8005550:	430b      	orrs	r3, r1
 8005552:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4ab9      	ldr	r2, [pc, #740]	; (8005844 <UART_SetConfig+0x34c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d004      	beq.n	800556e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800556a:	4313      	orrs	r3, r2
 800556c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4ab4      	ldr	r2, [pc, #720]	; (8005848 <UART_SetConfig+0x350>)
 8005576:	4013      	ands	r3, r2
 8005578:	0019      	movs	r1, r3
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005580:	430b      	orrs	r3, r1
 8005582:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	220f      	movs	r2, #15
 800558c:	4393      	bics	r3, r2
 800558e:	0018      	movs	r0, r3
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	0003      	movs	r3, r0
 800559a:	430b      	orrs	r3, r1
 800559c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4aaa      	ldr	r2, [pc, #680]	; (800584c <UART_SetConfig+0x354>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d131      	bne.n	800560c <UART_SetConfig+0x114>
 80055a8:	4ba9      	ldr	r3, [pc, #676]	; (8005850 <UART_SetConfig+0x358>)
 80055aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ac:	2203      	movs	r2, #3
 80055ae:	4013      	ands	r3, r2
 80055b0:	2b03      	cmp	r3, #3
 80055b2:	d01d      	beq.n	80055f0 <UART_SetConfig+0xf8>
 80055b4:	d823      	bhi.n	80055fe <UART_SetConfig+0x106>
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d00c      	beq.n	80055d4 <UART_SetConfig+0xdc>
 80055ba:	d820      	bhi.n	80055fe <UART_SetConfig+0x106>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <UART_SetConfig+0xce>
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d00e      	beq.n	80055e2 <UART_SetConfig+0xea>
 80055c4:	e01b      	b.n	80055fe <UART_SetConfig+0x106>
 80055c6:	231b      	movs	r3, #27
 80055c8:	2220      	movs	r2, #32
 80055ca:	189b      	adds	r3, r3, r2
 80055cc:	19db      	adds	r3, r3, r7
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	e071      	b.n	80056b8 <UART_SetConfig+0x1c0>
 80055d4:	231b      	movs	r3, #27
 80055d6:	2220      	movs	r2, #32
 80055d8:	189b      	adds	r3, r3, r2
 80055da:	19db      	adds	r3, r3, r7
 80055dc:	2202      	movs	r2, #2
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	e06a      	b.n	80056b8 <UART_SetConfig+0x1c0>
 80055e2:	231b      	movs	r3, #27
 80055e4:	2220      	movs	r2, #32
 80055e6:	189b      	adds	r3, r3, r2
 80055e8:	19db      	adds	r3, r3, r7
 80055ea:	2204      	movs	r2, #4
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e063      	b.n	80056b8 <UART_SetConfig+0x1c0>
 80055f0:	231b      	movs	r3, #27
 80055f2:	2220      	movs	r2, #32
 80055f4:	189b      	adds	r3, r3, r2
 80055f6:	19db      	adds	r3, r3, r7
 80055f8:	2208      	movs	r2, #8
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	e05c      	b.n	80056b8 <UART_SetConfig+0x1c0>
 80055fe:	231b      	movs	r3, #27
 8005600:	2220      	movs	r2, #32
 8005602:	189b      	adds	r3, r3, r2
 8005604:	19db      	adds	r3, r3, r7
 8005606:	2210      	movs	r2, #16
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	e055      	b.n	80056b8 <UART_SetConfig+0x1c0>
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a90      	ldr	r2, [pc, #576]	; (8005854 <UART_SetConfig+0x35c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d106      	bne.n	8005624 <UART_SetConfig+0x12c>
 8005616:	231b      	movs	r3, #27
 8005618:	2220      	movs	r2, #32
 800561a:	189b      	adds	r3, r3, r2
 800561c:	19db      	adds	r3, r3, r7
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	e049      	b.n	80056b8 <UART_SetConfig+0x1c0>
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a86      	ldr	r2, [pc, #536]	; (8005844 <UART_SetConfig+0x34c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d13e      	bne.n	80056ac <UART_SetConfig+0x1b4>
 800562e:	4b88      	ldr	r3, [pc, #544]	; (8005850 <UART_SetConfig+0x358>)
 8005630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005632:	23c0      	movs	r3, #192	; 0xc0
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	4013      	ands	r3, r2
 8005638:	22c0      	movs	r2, #192	; 0xc0
 800563a:	0112      	lsls	r2, r2, #4
 800563c:	4293      	cmp	r3, r2
 800563e:	d027      	beq.n	8005690 <UART_SetConfig+0x198>
 8005640:	22c0      	movs	r2, #192	; 0xc0
 8005642:	0112      	lsls	r2, r2, #4
 8005644:	4293      	cmp	r3, r2
 8005646:	d82a      	bhi.n	800569e <UART_SetConfig+0x1a6>
 8005648:	2280      	movs	r2, #128	; 0x80
 800564a:	0112      	lsls	r2, r2, #4
 800564c:	4293      	cmp	r3, r2
 800564e:	d011      	beq.n	8005674 <UART_SetConfig+0x17c>
 8005650:	2280      	movs	r2, #128	; 0x80
 8005652:	0112      	lsls	r2, r2, #4
 8005654:	4293      	cmp	r3, r2
 8005656:	d822      	bhi.n	800569e <UART_SetConfig+0x1a6>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <UART_SetConfig+0x16e>
 800565c:	2280      	movs	r2, #128	; 0x80
 800565e:	00d2      	lsls	r2, r2, #3
 8005660:	4293      	cmp	r3, r2
 8005662:	d00e      	beq.n	8005682 <UART_SetConfig+0x18a>
 8005664:	e01b      	b.n	800569e <UART_SetConfig+0x1a6>
 8005666:	231b      	movs	r3, #27
 8005668:	2220      	movs	r2, #32
 800566a:	189b      	adds	r3, r3, r2
 800566c:	19db      	adds	r3, r3, r7
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	e021      	b.n	80056b8 <UART_SetConfig+0x1c0>
 8005674:	231b      	movs	r3, #27
 8005676:	2220      	movs	r2, #32
 8005678:	189b      	adds	r3, r3, r2
 800567a:	19db      	adds	r3, r3, r7
 800567c:	2202      	movs	r2, #2
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	e01a      	b.n	80056b8 <UART_SetConfig+0x1c0>
 8005682:	231b      	movs	r3, #27
 8005684:	2220      	movs	r2, #32
 8005686:	189b      	adds	r3, r3, r2
 8005688:	19db      	adds	r3, r3, r7
 800568a:	2204      	movs	r2, #4
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e013      	b.n	80056b8 <UART_SetConfig+0x1c0>
 8005690:	231b      	movs	r3, #27
 8005692:	2220      	movs	r2, #32
 8005694:	189b      	adds	r3, r3, r2
 8005696:	19db      	adds	r3, r3, r7
 8005698:	2208      	movs	r2, #8
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	e00c      	b.n	80056b8 <UART_SetConfig+0x1c0>
 800569e:	231b      	movs	r3, #27
 80056a0:	2220      	movs	r2, #32
 80056a2:	189b      	adds	r3, r3, r2
 80056a4:	19db      	adds	r3, r3, r7
 80056a6:	2210      	movs	r2, #16
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	e005      	b.n	80056b8 <UART_SetConfig+0x1c0>
 80056ac:	231b      	movs	r3, #27
 80056ae:	2220      	movs	r2, #32
 80056b0:	189b      	adds	r3, r3, r2
 80056b2:	19db      	adds	r3, r3, r7
 80056b4:	2210      	movs	r2, #16
 80056b6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a61      	ldr	r2, [pc, #388]	; (8005844 <UART_SetConfig+0x34c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d000      	beq.n	80056c4 <UART_SetConfig+0x1cc>
 80056c2:	e092      	b.n	80057ea <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056c4:	231b      	movs	r3, #27
 80056c6:	2220      	movs	r2, #32
 80056c8:	189b      	adds	r3, r3, r2
 80056ca:	19db      	adds	r3, r3, r7
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d015      	beq.n	80056fe <UART_SetConfig+0x206>
 80056d2:	dc18      	bgt.n	8005706 <UART_SetConfig+0x20e>
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d00d      	beq.n	80056f4 <UART_SetConfig+0x1fc>
 80056d8:	dc15      	bgt.n	8005706 <UART_SetConfig+0x20e>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <UART_SetConfig+0x1ec>
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d005      	beq.n	80056ee <UART_SetConfig+0x1f6>
 80056e2:	e010      	b.n	8005706 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e4:	f7fd fc16 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 80056e8:	0003      	movs	r3, r0
 80056ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056ec:	e014      	b.n	8005718 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056ee:	4b5a      	ldr	r3, [pc, #360]	; (8005858 <UART_SetConfig+0x360>)
 80056f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056f2:	e011      	b.n	8005718 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056f4:	f7fd fb82 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 80056f8:	0003      	movs	r3, r0
 80056fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056fc:	e00c      	b.n	8005718 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056fe:	2380      	movs	r3, #128	; 0x80
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005704:	e008      	b.n	8005718 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800570a:	231a      	movs	r3, #26
 800570c:	2220      	movs	r2, #32
 800570e:	189b      	adds	r3, r3, r2
 8005710:	19db      	adds	r3, r3, r7
 8005712:	2201      	movs	r2, #1
 8005714:	701a      	strb	r2, [r3, #0]
        break;
 8005716:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571a:	2b00      	cmp	r3, #0
 800571c:	d100      	bne.n	8005720 <UART_SetConfig+0x228>
 800571e:	e147      	b.n	80059b0 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005724:	4b4d      	ldr	r3, [pc, #308]	; (800585c <UART_SetConfig+0x364>)
 8005726:	0052      	lsls	r2, r2, #1
 8005728:	5ad3      	ldrh	r3, [r2, r3]
 800572a:	0019      	movs	r1, r3
 800572c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800572e:	f7fa fce9 	bl	8000104 <__udivsi3>
 8005732:	0003      	movs	r3, r0
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	0013      	movs	r3, r2
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	189b      	adds	r3, r3, r2
 8005740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005742:	429a      	cmp	r2, r3
 8005744:	d305      	bcc.n	8005752 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800574c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800574e:	429a      	cmp	r2, r3
 8005750:	d906      	bls.n	8005760 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005752:	231a      	movs	r3, #26
 8005754:	2220      	movs	r2, #32
 8005756:	189b      	adds	r3, r3, r2
 8005758:	19db      	adds	r3, r3, r7
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e127      	b.n	80059b0 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	2300      	movs	r3, #0
 8005766:	61fb      	str	r3, [r7, #28]
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800576c:	4b3b      	ldr	r3, [pc, #236]	; (800585c <UART_SetConfig+0x364>)
 800576e:	0052      	lsls	r2, r2, #1
 8005770:	5ad3      	ldrh	r3, [r2, r3]
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	69b8      	ldr	r0, [r7, #24]
 800577e:	69f9      	ldr	r1, [r7, #28]
 8005780:	f7fa fe36 	bl	80003f0 <__aeabi_uldivmod>
 8005784:	0002      	movs	r2, r0
 8005786:	000b      	movs	r3, r1
 8005788:	0e11      	lsrs	r1, r2, #24
 800578a:	021d      	lsls	r5, r3, #8
 800578c:	430d      	orrs	r5, r1
 800578e:	0214      	lsls	r4, r2, #8
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	60bb      	str	r3, [r7, #8]
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68b8      	ldr	r0, [r7, #8]
 800579e:	68f9      	ldr	r1, [r7, #12]
 80057a0:	1900      	adds	r0, r0, r4
 80057a2:	4169      	adcs	r1, r5
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	2300      	movs	r3, #0
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f7fa fe1d 	bl	80003f0 <__aeabi_uldivmod>
 80057b6:	0002      	movs	r2, r0
 80057b8:	000b      	movs	r3, r1
 80057ba:	0013      	movs	r3, r2
 80057bc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c0:	23c0      	movs	r3, #192	; 0xc0
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d309      	bcc.n	80057dc <UART_SetConfig+0x2e4>
 80057c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ca:	2380      	movs	r3, #128	; 0x80
 80057cc:	035b      	lsls	r3, r3, #13
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d204      	bcs.n	80057dc <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	e0e9      	b.n	80059b0 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80057dc:	231a      	movs	r3, #26
 80057de:	2220      	movs	r2, #32
 80057e0:	189b      	adds	r3, r3, r2
 80057e2:	19db      	adds	r3, r3, r7
 80057e4:	2201      	movs	r2, #1
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	e0e2      	b.n	80059b0 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	69da      	ldr	r2, [r3, #28]
 80057ee:	2380      	movs	r3, #128	; 0x80
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d000      	beq.n	80057f8 <UART_SetConfig+0x300>
 80057f6:	e083      	b.n	8005900 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80057f8:	231b      	movs	r3, #27
 80057fa:	2220      	movs	r2, #32
 80057fc:	189b      	adds	r3, r3, r2
 80057fe:	19db      	adds	r3, r3, r7
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b08      	cmp	r3, #8
 8005804:	d015      	beq.n	8005832 <UART_SetConfig+0x33a>
 8005806:	dc2b      	bgt.n	8005860 <UART_SetConfig+0x368>
 8005808:	2b04      	cmp	r3, #4
 800580a:	d00d      	beq.n	8005828 <UART_SetConfig+0x330>
 800580c:	dc28      	bgt.n	8005860 <UART_SetConfig+0x368>
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <UART_SetConfig+0x320>
 8005812:	2b02      	cmp	r3, #2
 8005814:	d005      	beq.n	8005822 <UART_SetConfig+0x32a>
 8005816:	e023      	b.n	8005860 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005818:	f7fd fb7c 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 800581c:	0003      	movs	r3, r0
 800581e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005820:	e027      	b.n	8005872 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005822:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <UART_SetConfig+0x360>)
 8005824:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005826:	e024      	b.n	8005872 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005828:	f7fd fae8 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 800582c:	0003      	movs	r3, r0
 800582e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005830:	e01f      	b.n	8005872 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005832:	2380      	movs	r3, #128	; 0x80
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005838:	e01b      	b.n	8005872 <UART_SetConfig+0x37a>
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	cfff69f3 	.word	0xcfff69f3
 8005840:	ffffcfff 	.word	0xffffcfff
 8005844:	40008000 	.word	0x40008000
 8005848:	11fff4ff 	.word	0x11fff4ff
 800584c:	40013800 	.word	0x40013800
 8005850:	40021000 	.word	0x40021000
 8005854:	40004400 	.word	0x40004400
 8005858:	00f42400 	.word	0x00f42400
 800585c:	08007ad4 	.word	0x08007ad4
      default:
        pclk = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005864:	231a      	movs	r3, #26
 8005866:	2220      	movs	r2, #32
 8005868:	189b      	adds	r3, r3, r2
 800586a:	19db      	adds	r3, r3, r7
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
        break;
 8005870:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005874:	2b00      	cmp	r3, #0
 8005876:	d100      	bne.n	800587a <UART_SetConfig+0x382>
 8005878:	e09a      	b.n	80059b0 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800587e:	4b58      	ldr	r3, [pc, #352]	; (80059e0 <UART_SetConfig+0x4e8>)
 8005880:	0052      	lsls	r2, r2, #1
 8005882:	5ad3      	ldrh	r3, [r2, r3]
 8005884:	0019      	movs	r1, r3
 8005886:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005888:	f7fa fc3c 	bl	8000104 <__udivsi3>
 800588c:	0003      	movs	r3, r0
 800588e:	005a      	lsls	r2, r3, #1
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	18d2      	adds	r2, r2, r3
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	0019      	movs	r1, r3
 800589e:	0010      	movs	r0, r2
 80058a0:	f7fa fc30 	bl	8000104 <__udivsi3>
 80058a4:	0003      	movs	r3, r0
 80058a6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	2b0f      	cmp	r3, #15
 80058ac:	d921      	bls.n	80058f2 <UART_SetConfig+0x3fa>
 80058ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b0:	2380      	movs	r3, #128	; 0x80
 80058b2:	025b      	lsls	r3, r3, #9
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d21c      	bcs.n	80058f2 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	200e      	movs	r0, #14
 80058be:	2420      	movs	r4, #32
 80058c0:	1903      	adds	r3, r0, r4
 80058c2:	19db      	adds	r3, r3, r7
 80058c4:	210f      	movs	r1, #15
 80058c6:	438a      	bics	r2, r1
 80058c8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	085b      	lsrs	r3, r3, #1
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2207      	movs	r2, #7
 80058d2:	4013      	ands	r3, r2
 80058d4:	b299      	uxth	r1, r3
 80058d6:	1903      	adds	r3, r0, r4
 80058d8:	19db      	adds	r3, r3, r7
 80058da:	1902      	adds	r2, r0, r4
 80058dc:	19d2      	adds	r2, r2, r7
 80058de:	8812      	ldrh	r2, [r2, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	1902      	adds	r2, r0, r4
 80058ea:	19d2      	adds	r2, r2, r7
 80058ec:	8812      	ldrh	r2, [r2, #0]
 80058ee:	60da      	str	r2, [r3, #12]
 80058f0:	e05e      	b.n	80059b0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80058f2:	231a      	movs	r3, #26
 80058f4:	2220      	movs	r2, #32
 80058f6:	189b      	adds	r3, r3, r2
 80058f8:	19db      	adds	r3, r3, r7
 80058fa:	2201      	movs	r2, #1
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e057      	b.n	80059b0 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005900:	231b      	movs	r3, #27
 8005902:	2220      	movs	r2, #32
 8005904:	189b      	adds	r3, r3, r2
 8005906:	19db      	adds	r3, r3, r7
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b08      	cmp	r3, #8
 800590c:	d015      	beq.n	800593a <UART_SetConfig+0x442>
 800590e:	dc18      	bgt.n	8005942 <UART_SetConfig+0x44a>
 8005910:	2b04      	cmp	r3, #4
 8005912:	d00d      	beq.n	8005930 <UART_SetConfig+0x438>
 8005914:	dc15      	bgt.n	8005942 <UART_SetConfig+0x44a>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <UART_SetConfig+0x428>
 800591a:	2b02      	cmp	r3, #2
 800591c:	d005      	beq.n	800592a <UART_SetConfig+0x432>
 800591e:	e010      	b.n	8005942 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005920:	f7fd faf8 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 8005924:	0003      	movs	r3, r0
 8005926:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005928:	e014      	b.n	8005954 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800592a:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <UART_SetConfig+0x4ec>)
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800592e:	e011      	b.n	8005954 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005930:	f7fd fa64 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8005934:	0003      	movs	r3, r0
 8005936:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005938:	e00c      	b.n	8005954 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005940:	e008      	b.n	8005954 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005946:	231a      	movs	r3, #26
 8005948:	2220      	movs	r2, #32
 800594a:	189b      	adds	r3, r3, r2
 800594c:	19db      	adds	r3, r3, r7
 800594e:	2201      	movs	r2, #1
 8005950:	701a      	strb	r2, [r3, #0]
        break;
 8005952:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005956:	2b00      	cmp	r3, #0
 8005958:	d02a      	beq.n	80059b0 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800595e:	4b20      	ldr	r3, [pc, #128]	; (80059e0 <UART_SetConfig+0x4e8>)
 8005960:	0052      	lsls	r2, r2, #1
 8005962:	5ad3      	ldrh	r3, [r2, r3]
 8005964:	0019      	movs	r1, r3
 8005966:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005968:	f7fa fbcc 	bl	8000104 <__udivsi3>
 800596c:	0003      	movs	r3, r0
 800596e:	001a      	movs	r2, r3
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	18d2      	adds	r2, r2, r3
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	0019      	movs	r1, r3
 800597e:	0010      	movs	r0, r2
 8005980:	f7fa fbc0 	bl	8000104 <__udivsi3>
 8005984:	0003      	movs	r3, r0
 8005986:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	2b0f      	cmp	r3, #15
 800598c:	d90a      	bls.n	80059a4 <UART_SetConfig+0x4ac>
 800598e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005990:	2380      	movs	r3, #128	; 0x80
 8005992:	025b      	lsls	r3, r3, #9
 8005994:	429a      	cmp	r2, r3
 8005996:	d205      	bcs.n	80059a4 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	b29a      	uxth	r2, r3
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60da      	str	r2, [r3, #12]
 80059a2:	e005      	b.n	80059b0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80059a4:	231a      	movs	r3, #26
 80059a6:	2220      	movs	r2, #32
 80059a8:	189b      	adds	r3, r3, r2
 80059aa:	19db      	adds	r3, r3, r7
 80059ac:	2201      	movs	r2, #1
 80059ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	226a      	movs	r2, #106	; 0x6a
 80059b4:	2101      	movs	r1, #1
 80059b6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	2268      	movs	r2, #104	; 0x68
 80059bc:	2101      	movs	r1, #1
 80059be:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	2200      	movs	r2, #0
 80059c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	2200      	movs	r2, #0
 80059ca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80059cc:	231a      	movs	r3, #26
 80059ce:	2220      	movs	r2, #32
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	19db      	adds	r3, r3, r7
 80059d4:	781b      	ldrb	r3, [r3, #0]
}
 80059d6:	0018      	movs	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	b010      	add	sp, #64	; 0x40
 80059dc:	bdb0      	pop	{r4, r5, r7, pc}
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	08007ad4 	.word	0x08007ad4
 80059e4:	00f42400 	.word	0x00f42400

080059e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	2208      	movs	r2, #8
 80059f6:	4013      	ands	r3, r2
 80059f8:	d00b      	beq.n	8005a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4a4a      	ldr	r2, [pc, #296]	; (8005b2c <UART_AdvFeatureConfig+0x144>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	0019      	movs	r1, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	2201      	movs	r2, #1
 8005a18:	4013      	ands	r3, r2
 8005a1a:	d00b      	beq.n	8005a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4a43      	ldr	r2, [pc, #268]	; (8005b30 <UART_AdvFeatureConfig+0x148>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	0019      	movs	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	2202      	movs	r2, #2
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	4a3b      	ldr	r2, [pc, #236]	; (8005b34 <UART_AdvFeatureConfig+0x14c>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	0019      	movs	r1, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	2204      	movs	r2, #4
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d00b      	beq.n	8005a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	4a34      	ldr	r2, [pc, #208]	; (8005b38 <UART_AdvFeatureConfig+0x150>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	0019      	movs	r1, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	2210      	movs	r2, #16
 8005a7e:	4013      	ands	r3, r2
 8005a80:	d00b      	beq.n	8005a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	4a2c      	ldr	r2, [pc, #176]	; (8005b3c <UART_AdvFeatureConfig+0x154>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	0019      	movs	r1, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d00b      	beq.n	8005abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	4a25      	ldr	r2, [pc, #148]	; (8005b40 <UART_AdvFeatureConfig+0x158>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	0019      	movs	r1, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac0:	2240      	movs	r2, #64	; 0x40
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d01d      	beq.n	8005b02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <UART_AdvFeatureConfig+0x15c>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	0019      	movs	r1, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae2:	2380      	movs	r3, #128	; 0x80
 8005ae4:	035b      	lsls	r3, r3, #13
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d10b      	bne.n	8005b02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4a15      	ldr	r2, [pc, #84]	; (8005b48 <UART_AdvFeatureConfig+0x160>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	0019      	movs	r1, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	2280      	movs	r2, #128	; 0x80
 8005b08:	4013      	ands	r3, r2
 8005b0a:	d00b      	beq.n	8005b24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	4a0e      	ldr	r2, [pc, #56]	; (8005b4c <UART_AdvFeatureConfig+0x164>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	0019      	movs	r1, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	605a      	str	r2, [r3, #4]
  }
}
 8005b24:	46c0      	nop			; (mov r8, r8)
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b002      	add	sp, #8
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	ffff7fff 	.word	0xffff7fff
 8005b30:	fffdffff 	.word	0xfffdffff
 8005b34:	fffeffff 	.word	0xfffeffff
 8005b38:	fffbffff 	.word	0xfffbffff
 8005b3c:	ffffefff 	.word	0xffffefff
 8005b40:	ffffdfff 	.word	0xffffdfff
 8005b44:	ffefffff 	.word	0xffefffff
 8005b48:	ff9fffff 	.word	0xff9fffff
 8005b4c:	fff7ffff 	.word	0xfff7ffff

08005b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b092      	sub	sp, #72	; 0x48
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2290      	movs	r2, #144	; 0x90
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b60:	f7fb fc0a 	bl	8001378 <HAL_GetTick>
 8005b64:	0003      	movs	r3, r0
 8005b66:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2208      	movs	r2, #8
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d12d      	bne.n	8005bd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b78:	2280      	movs	r2, #128	; 0x80
 8005b7a:	0391      	lsls	r1, r2, #14
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	4a47      	ldr	r2, [pc, #284]	; (8005c9c <UART_CheckIdleState+0x14c>)
 8005b80:	9200      	str	r2, [sp, #0]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f000 f88e 	bl	8005ca4 <UART_WaitOnFlagUntilTimeout>
 8005b88:	1e03      	subs	r3, r0, #0
 8005b8a:	d022      	beq.n	8005bd2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b96:	2301      	movs	r3, #1
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	f383 8810 	msr	PRIMASK, r3
}
 8005ba0:	46c0      	nop			; (mov r8, r8)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2180      	movs	r1, #128	; 0x80
 8005bae:	438a      	bics	r2, r1
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	f383 8810 	msr	PRIMASK, r3
}
 8005bbc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2288      	movs	r2, #136	; 0x88
 8005bc2:	2120      	movs	r1, #32
 8005bc4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2284      	movs	r2, #132	; 0x84
 8005bca:	2100      	movs	r1, #0
 8005bcc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e060      	b.n	8005c94 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2204      	movs	r2, #4
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d146      	bne.n	8005c6e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be2:	2280      	movs	r2, #128	; 0x80
 8005be4:	03d1      	lsls	r1, r2, #15
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	4a2c      	ldr	r2, [pc, #176]	; (8005c9c <UART_CheckIdleState+0x14c>)
 8005bea:	9200      	str	r2, [sp, #0]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f000 f859 	bl	8005ca4 <UART_WaitOnFlagUntilTimeout>
 8005bf2:	1e03      	subs	r3, r0, #0
 8005bf4:	d03b      	beq.n	8005c6e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8005c00:	2301      	movs	r3, #1
 8005c02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f383 8810 	msr	PRIMASK, r3
}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4922      	ldr	r1, [pc, #136]	; (8005ca0 <UART_CheckIdleState+0x150>)
 8005c18:	400a      	ands	r2, r1
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f383 8810 	msr	PRIMASK, r3
}
 8005c26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c28:	f3ef 8310 	mrs	r3, PRIMASK
 8005c2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c2e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c30:	633b      	str	r3, [r7, #48]	; 0x30
 8005c32:	2301      	movs	r3, #1
 8005c34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	f383 8810 	msr	PRIMASK, r3
}
 8005c3c:	46c0      	nop			; (mov r8, r8)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2101      	movs	r1, #1
 8005c4a:	438a      	bics	r2, r1
 8005c4c:	609a      	str	r2, [r3, #8]
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	f383 8810 	msr	PRIMASK, r3
}
 8005c58:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	228c      	movs	r2, #140	; 0x8c
 8005c5e:	2120      	movs	r1, #32
 8005c60:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2284      	movs	r2, #132	; 0x84
 8005c66:	2100      	movs	r1, #0
 8005c68:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e012      	b.n	8005c94 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2288      	movs	r2, #136	; 0x88
 8005c72:	2120      	movs	r1, #32
 8005c74:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	228c      	movs	r2, #140	; 0x8c
 8005c7a:	2120      	movs	r1, #32
 8005c7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2284      	movs	r2, #132	; 0x84
 8005c8e:	2100      	movs	r1, #0
 8005c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	0018      	movs	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	b010      	add	sp, #64	; 0x40
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	01ffffff 	.word	0x01ffffff
 8005ca0:	fffffedf 	.word	0xfffffedf

08005ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	603b      	str	r3, [r7, #0]
 8005cb0:	1dfb      	adds	r3, r7, #7
 8005cb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb4:	e051      	b.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	d04e      	beq.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cbc:	f7fb fb5c 	bl	8001378 <HAL_GetTick>
 8005cc0:	0002      	movs	r2, r0
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d302      	bcc.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e051      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2204      	movs	r2, #4
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d03b      	beq.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b80      	cmp	r3, #128	; 0x80
 8005ce6:	d038      	beq.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d035      	beq.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d111      	bne.n	8005d20 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2208      	movs	r2, #8
 8005d02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	0018      	movs	r0, r3
 8005d08:	f000 f83c 	bl	8005d84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2290      	movs	r2, #144	; 0x90
 8005d10:	2108      	movs	r1, #8
 8005d12:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2284      	movs	r2, #132	; 0x84
 8005d18:	2100      	movs	r1, #0
 8005d1a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e02c      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69da      	ldr	r2, [r3, #28]
 8005d26:	2380      	movs	r3, #128	; 0x80
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	2380      	movs	r3, #128	; 0x80
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d112      	bne.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2280      	movs	r2, #128	; 0x80
 8005d3a:	0112      	lsls	r2, r2, #4
 8005d3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	0018      	movs	r0, r3
 8005d42:	f000 f81f 	bl	8005d84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2290      	movs	r2, #144	; 0x90
 8005d4a:	2120      	movs	r1, #32
 8005d4c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2284      	movs	r2, #132	; 0x84
 8005d52:	2100      	movs	r1, #0
 8005d54:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e00f      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	4013      	ands	r3, r2
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	425a      	negs	r2, r3
 8005d6a:	4153      	adcs	r3, r2
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	001a      	movs	r2, r3
 8005d70:	1dfb      	adds	r3, r7, #7
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d09e      	beq.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	b004      	add	sp, #16
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08e      	sub	sp, #56	; 0x38
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d90:	617b      	str	r3, [r7, #20]
  return(result);
 8005d92:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d94:	637b      	str	r3, [r7, #52]	; 0x34
 8005d96:	2301      	movs	r3, #1
 8005d98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	f383 8810 	msr	PRIMASK, r3
}
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4926      	ldr	r1, [pc, #152]	; (8005e48 <UART_EndRxTransfer+0xc4>)
 8005dae:	400a      	ands	r2, r1
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f383 8810 	msr	PRIMASK, r3
}
 8005dbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc2:	623b      	str	r3, [r7, #32]
  return(result);
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005dc8:	2301      	movs	r3, #1
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	f383 8810 	msr	PRIMASK, r3
}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	491b      	ldr	r1, [pc, #108]	; (8005e4c <UART_EndRxTransfer+0xc8>)
 8005de0:	400a      	ands	r2, r1
 8005de2:	609a      	str	r2, [r3, #8]
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	f383 8810 	msr	PRIMASK, r3
}
 8005dee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d118      	bne.n	8005e2a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e02:	2301      	movs	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f383 8810 	msr	PRIMASK, r3
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2110      	movs	r1, #16
 8005e1a:	438a      	bics	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f383 8810 	msr	PRIMASK, r3
}
 8005e28:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	228c      	movs	r2, #140	; 0x8c
 8005e2e:	2120      	movs	r1, #32
 8005e30:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	46bd      	mov	sp, r7
 8005e42:	b00e      	add	sp, #56	; 0x38
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	fffffedf 	.word	0xfffffedf
 8005e4c:	effffffe 	.word	0xeffffffe

08005e50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2284      	movs	r2, #132	; 0x84
 8005e5c:	5c9b      	ldrb	r3, [r3, r2]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e62:	2302      	movs	r3, #2
 8005e64:	e027      	b.n	8005eb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2284      	movs	r2, #132	; 0x84
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2288      	movs	r2, #136	; 0x88
 8005e72:	2124      	movs	r1, #36	; 0x24
 8005e74:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2101      	movs	r1, #1
 8005e8a:	438a      	bics	r2, r1
 8005e8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4a0b      	ldr	r2, [pc, #44]	; (8005ec0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2288      	movs	r2, #136	; 0x88
 8005ea8:	2120      	movs	r1, #32
 8005eaa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2284      	movs	r2, #132	; 0x84
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	b004      	add	sp, #16
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	46c0      	nop			; (mov r8, r8)
 8005ec0:	dfffffff 	.word	0xdfffffff

08005ec4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2284      	movs	r2, #132	; 0x84
 8005ed2:	5c9b      	ldrb	r3, [r3, r2]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e02e      	b.n	8005f3a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2284      	movs	r2, #132	; 0x84
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2288      	movs	r2, #136	; 0x88
 8005ee8:	2124      	movs	r1, #36	; 0x24
 8005eea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2101      	movs	r1, #1
 8005f00:	438a      	bics	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	08d9      	lsrs	r1, r3, #3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f000 f854 	bl	8005fc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2288      	movs	r2, #136	; 0x88
 8005f2c:	2120      	movs	r1, #32
 8005f2e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2284      	movs	r2, #132	; 0x84
 8005f34:	2100      	movs	r1, #0
 8005f36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b004      	add	sp, #16
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2284      	movs	r2, #132	; 0x84
 8005f52:	5c9b      	ldrb	r3, [r3, r2]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e02f      	b.n	8005fbc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2284      	movs	r2, #132	; 0x84
 8005f60:	2101      	movs	r1, #1
 8005f62:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2288      	movs	r2, #136	; 0x88
 8005f68:	2124      	movs	r1, #36	; 0x24
 8005f6a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2101      	movs	r1, #1
 8005f80:	438a      	bics	r2, r1
 8005f82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	4a0e      	ldr	r2, [pc, #56]	; (8005fc4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	0019      	movs	r1, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f000 f813 	bl	8005fc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2288      	movs	r2, #136	; 0x88
 8005fae:	2120      	movs	r1, #32
 8005fb0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2284      	movs	r2, #132	; 0x84
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b004      	add	sp, #16
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	f1ffffff 	.word	0xf1ffffff

08005fc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d108      	bne.n	8005fea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	226a      	movs	r2, #106	; 0x6a
 8005fdc:	2101      	movs	r1, #1
 8005fde:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2268      	movs	r2, #104	; 0x68
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fe8:	e043      	b.n	8006072 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fea:	260f      	movs	r6, #15
 8005fec:	19bb      	adds	r3, r7, r6
 8005fee:	2208      	movs	r2, #8
 8005ff0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ff2:	200e      	movs	r0, #14
 8005ff4:	183b      	adds	r3, r7, r0
 8005ff6:	2208      	movs	r2, #8
 8005ff8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	0e5b      	lsrs	r3, r3, #25
 8006002:	b2da      	uxtb	r2, r3
 8006004:	240d      	movs	r4, #13
 8006006:	193b      	adds	r3, r7, r4
 8006008:	2107      	movs	r1, #7
 800600a:	400a      	ands	r2, r1
 800600c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	0f5b      	lsrs	r3, r3, #29
 8006016:	b2da      	uxtb	r2, r3
 8006018:	250c      	movs	r5, #12
 800601a:	197b      	adds	r3, r7, r5
 800601c:	2107      	movs	r1, #7
 800601e:	400a      	ands	r2, r1
 8006020:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006022:	183b      	adds	r3, r7, r0
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	197a      	adds	r2, r7, r5
 8006028:	7812      	ldrb	r2, [r2, #0]
 800602a:	4914      	ldr	r1, [pc, #80]	; (800607c <UARTEx_SetNbDataToProcess+0xb4>)
 800602c:	5c8a      	ldrb	r2, [r1, r2]
 800602e:	435a      	muls	r2, r3
 8006030:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006032:	197b      	adds	r3, r7, r5
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	4a12      	ldr	r2, [pc, #72]	; (8006080 <UARTEx_SetNbDataToProcess+0xb8>)
 8006038:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800603a:	0019      	movs	r1, r3
 800603c:	f7fa f8ec 	bl	8000218 <__divsi3>
 8006040:	0003      	movs	r3, r0
 8006042:	b299      	uxth	r1, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	226a      	movs	r2, #106	; 0x6a
 8006048:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800604a:	19bb      	adds	r3, r7, r6
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	193a      	adds	r2, r7, r4
 8006050:	7812      	ldrb	r2, [r2, #0]
 8006052:	490a      	ldr	r1, [pc, #40]	; (800607c <UARTEx_SetNbDataToProcess+0xb4>)
 8006054:	5c8a      	ldrb	r2, [r1, r2]
 8006056:	435a      	muls	r2, r3
 8006058:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800605a:	193b      	adds	r3, r7, r4
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	4a08      	ldr	r2, [pc, #32]	; (8006080 <UARTEx_SetNbDataToProcess+0xb8>)
 8006060:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006062:	0019      	movs	r1, r3
 8006064:	f7fa f8d8 	bl	8000218 <__divsi3>
 8006068:	0003      	movs	r3, r0
 800606a:	b299      	uxth	r1, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2268      	movs	r2, #104	; 0x68
 8006070:	5299      	strh	r1, [r3, r2]
}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	46bd      	mov	sp, r7
 8006076:	b005      	add	sp, #20
 8006078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	08007aec 	.word	0x08007aec
 8006080:	08007af4 	.word	0x08007af4

08006084 <nrf_read_reg>:
 */

#include "NRF24L01.h"

uint8_t nrf_read_reg(uint8_t reg)
{
 8006084:	b590      	push	{r4, r7, lr}
 8006086:	b087      	sub	sp, #28
 8006088:	af02      	add	r7, sp, #8
 800608a:	0002      	movs	r2, r0
 800608c:	1dfb      	adds	r3, r7, #7
 800608e:	701a      	strb	r2, [r3, #0]
//    HAL_SPI_Transmit(&hspi1, &command, 1, 100);
//    HAL_SPI_Receive(&hspi1, &status, 1, 100);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
//
//    return status;
	uint8_t command = NRF24_CMD_R_REGISTER | reg;
 8006090:	240f      	movs	r4, #15
 8006092:	193b      	adds	r3, r7, r4
 8006094:	1dfa      	adds	r2, r7, #7
 8006096:	7812      	ldrb	r2, [r2, #0]
 8006098:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t data;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	0059      	lsls	r1, r3, #1
 800609e:	23a0      	movs	r3, #160	; 0xa0
 80060a0:	05db      	lsls	r3, r3, #23
 80060a2:	2200      	movs	r2, #0
 80060a4:	0018      	movs	r0, r3
 80060a6:	f7fc fa1e 	bl	80024e6 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 80060aa:	230e      	movs	r3, #14
 80060ac:	18fa      	adds	r2, r7, r3
 80060ae:	1939      	adds	r1, r7, r4
 80060b0:	480e      	ldr	r0, [pc, #56]	; (80060ec <nrf_read_reg+0x68>)
 80060b2:	23fa      	movs	r3, #250	; 0xfa
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	2301      	movs	r3, #1
 80060ba:	f7fd fc25 	bl	8003908 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&hspi1, &data, 1, 2000);
 80060be:	23fa      	movs	r3, #250	; 0xfa
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	240d      	movs	r4, #13
 80060c4:	1939      	adds	r1, r7, r4
 80060c6:	4809      	ldr	r0, [pc, #36]	; (80060ec <nrf_read_reg+0x68>)
 80060c8:	2201      	movs	r2, #1
 80060ca:	f7fd facb 	bl	8003664 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 80060ce:	2380      	movs	r3, #128	; 0x80
 80060d0:	0059      	lsls	r1, r3, #1
 80060d2:	23a0      	movs	r3, #160	; 0xa0
 80060d4:	05db      	lsls	r3, r3, #23
 80060d6:	2201      	movs	r2, #1
 80060d8:	0018      	movs	r0, r3
 80060da:	f7fc fa04 	bl	80024e6 <HAL_GPIO_WritePin>
	return data;
 80060de:	193b      	adds	r3, r7, r4
 80060e0:	781b      	ldrb	r3, [r3, #0]

}
 80060e2:	0018      	movs	r0, r3
 80060e4:	46bd      	mov	sp, r7
 80060e6:	b005      	add	sp, #20
 80060e8:	bd90      	pop	{r4, r7, pc}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	20000098 	.word	0x20000098

080060f0 <nrf_read_reg_multi>:

void nrf_read_reg_multi (uint8_t reg, uint8_t *data, int size){
 80060f0:	b590      	push	{r4, r7, lr}
 80060f2:	b089      	sub	sp, #36	; 0x24
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	607a      	str	r2, [r7, #4]
 80060fa:	210f      	movs	r1, #15
 80060fc:	187b      	adds	r3, r7, r1
 80060fe:	1c02      	adds	r2, r0, #0
 8006100:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Receive(&hspi1, data, size, 1000);

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
    */

	uint8_t command = NRF24_CMD_R_REGISTER | reg;
 8006102:	2413      	movs	r4, #19
 8006104:	193b      	adds	r3, r7, r4
 8006106:	187a      	adds	r2, r7, r1
 8006108:	7812      	ldrb	r2, [r2, #0]
 800610a:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 800610c:	2380      	movs	r3, #128	; 0x80
 800610e:	0059      	lsls	r1, r3, #1
 8006110:	23a0      	movs	r3, #160	; 0xa0
 8006112:	05db      	lsls	r3, r3, #23
 8006114:	2201      	movs	r2, #1
 8006116:	0018      	movs	r0, r3
 8006118:	f7fc f9e5 	bl	80024e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 800611c:	2380      	movs	r3, #128	; 0x80
 800611e:	0059      	lsls	r1, r3, #1
 8006120:	23a0      	movs	r3, #160	; 0xa0
 8006122:	05db      	lsls	r3, r3, #23
 8006124:	2200      	movs	r2, #0
 8006126:	0018      	movs	r0, r3
 8006128:	f7fc f9dd 	bl	80024e6 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 800612c:	2312      	movs	r3, #18
 800612e:	18fa      	adds	r2, r7, r3
 8006130:	1939      	adds	r1, r7, r4
 8006132:	4813      	ldr	r0, [pc, #76]	; (8006180 <nrf_read_reg_multi+0x90>)
 8006134:	23fa      	movs	r3, #250	; 0xfa
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	2301      	movs	r3, #1
 800613c:	f7fd fbe4 	bl	8003908 <HAL_SPI_TransmitReceive>
	for(int i = 0; i<size; i++)
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	e00b      	b.n	800615e <nrf_read_reg_multi+0x6e>
		HAL_SPI_Receive(&hspi1, &data[i], 1, 2000);
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	18d1      	adds	r1, r2, r3
 800614c:	23fa      	movs	r3, #250	; 0xfa
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	480b      	ldr	r0, [pc, #44]	; (8006180 <nrf_read_reg_multi+0x90>)
 8006152:	2201      	movs	r2, #1
 8006154:	f7fd fa86 	bl	8003664 <HAL_SPI_Receive>
	for(int i = 0; i<size; i++)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	3301      	adds	r3, #1
 800615c:	617b      	str	r3, [r7, #20]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	429a      	cmp	r2, r3
 8006164:	dbef      	blt.n	8006146 <nrf_read_reg_multi+0x56>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8006166:	2380      	movs	r3, #128	; 0x80
 8006168:	0059      	lsls	r1, r3, #1
 800616a:	23a0      	movs	r3, #160	; 0xa0
 800616c:	05db      	lsls	r3, r3, #23
 800616e:	2201      	movs	r2, #1
 8006170:	0018      	movs	r0, r3
 8006172:	f7fc f9b8 	bl	80024e6 <HAL_GPIO_WritePin>
}
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	46bd      	mov	sp, r7
 800617a:	b007      	add	sp, #28
 800617c:	bd90      	pop	{r4, r7, pc}
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	20000098 	.word	0x20000098

08006184 <nrf_write_reg>:

void nrf_write_reg(uint8_t reg, uint8_t value)
{
 8006184:	b5b0      	push	{r4, r5, r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af02      	add	r7, sp, #8
 800618a:	0002      	movs	r2, r0
 800618c:	1dfb      	adds	r3, r7, #7
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	1dbb      	adds	r3, r7, #6
 8006192:	1c0a      	adds	r2, r1, #0
 8006194:	701a      	strb	r2, [r3, #0]
//
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);

	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 8006196:	1dfb      	adds	r3, r7, #7
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2220      	movs	r2, #32
 800619c:	4313      	orrs	r3, r2
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	240f      	movs	r4, #15
 80061a2:	193b      	adds	r3, r7, r4
 80061a4:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t write_val = value;
 80061a6:	250d      	movs	r5, #13
 80061a8:	197b      	adds	r3, r7, r5
 80061aa:	1dba      	adds	r2, r7, #6
 80061ac:	7812      	ldrb	r2, [r2, #0]
 80061ae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 80061b0:	2380      	movs	r3, #128	; 0x80
 80061b2:	0059      	lsls	r1, r3, #1
 80061b4:	23a0      	movs	r3, #160	; 0xa0
 80061b6:	05db      	lsls	r3, r3, #23
 80061b8:	2200      	movs	r2, #0
 80061ba:	0018      	movs	r0, r3
 80061bc:	f7fc f993 	bl	80024e6 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 80061c0:	230e      	movs	r3, #14
 80061c2:	18fa      	adds	r2, r7, r3
 80061c4:	1939      	adds	r1, r7, r4
 80061c6:	480d      	ldr	r0, [pc, #52]	; (80061fc <nrf_write_reg+0x78>)
 80061c8:	23fa      	movs	r3, #250	; 0xfa
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	2301      	movs	r3, #1
 80061d0:	f7fd fb9a 	bl	8003908 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &write_val, 1, 2000);
 80061d4:	23fa      	movs	r3, #250	; 0xfa
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	1979      	adds	r1, r7, r5
 80061da:	4808      	ldr	r0, [pc, #32]	; (80061fc <nrf_write_reg+0x78>)
 80061dc:	2201      	movs	r2, #1
 80061de:	f7fd f8e1 	bl	80033a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 80061e2:	2380      	movs	r3, #128	; 0x80
 80061e4:	0059      	lsls	r1, r3, #1
 80061e6:	23a0      	movs	r3, #160	; 0xa0
 80061e8:	05db      	lsls	r3, r3, #23
 80061ea:	2201      	movs	r2, #1
 80061ec:	0018      	movs	r0, r3
 80061ee:	f7fc f97a 	bl	80024e6 <HAL_GPIO_WritePin>

}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	46bd      	mov	sp, r7
 80061f6:	b004      	add	sp, #16
 80061f8:	bdb0      	pop	{r4, r5, r7, pc}
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	20000098 	.word	0x20000098

08006200 <nrf_write_reg_multi>:

void nrf_write_reg_multi(uint8_t reg, uint8_t *data, int size)
{
 8006200:	b590      	push	{r4, r7, lr}
 8006202:	b089      	sub	sp, #36	; 0x24
 8006204:	af02      	add	r7, sp, #8
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	607a      	str	r2, [r7, #4]
 800620a:	210f      	movs	r1, #15
 800620c:	187b      	adds	r3, r7, r1
 800620e:	1c02      	adds	r2, r0, #0
 8006210:	701a      	strb	r2, [r3, #0]
	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 8006212:	187b      	adds	r3, r7, r1
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2220      	movs	r2, #32
 8006218:	4313      	orrs	r3, r2
 800621a:	b2da      	uxtb	r2, r3
 800621c:	2413      	movs	r4, #19
 800621e:	193b      	adds	r3, r7, r4
 8006220:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	//uint8_t write_val = value;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8006222:	2380      	movs	r3, #128	; 0x80
 8006224:	0059      	lsls	r1, r3, #1
 8006226:	23a0      	movs	r3, #160	; 0xa0
 8006228:	05db      	lsls	r3, r3, #23
 800622a:	2200      	movs	r2, #0
 800622c:	0018      	movs	r0, r3
 800622e:	f7fc f95a 	bl	80024e6 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8006232:	2312      	movs	r3, #18
 8006234:	18fa      	adds	r2, r7, r3
 8006236:	1939      	adds	r1, r7, r4
 8006238:	4812      	ldr	r0, [pc, #72]	; (8006284 <nrf_write_reg_multi+0x84>)
 800623a:	23fa      	movs	r3, #250	; 0xfa
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	2301      	movs	r3, #1
 8006242:	f7fd fb61 	bl	8003908 <HAL_SPI_TransmitReceive>
	for (int i = 0; i <size; i++)
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	e00b      	b.n	8006264 <nrf_write_reg_multi+0x64>
		HAL_SPI_Transmit(&hspi1, &data[i], 1, 2000);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	18d1      	adds	r1, r2, r3
 8006252:	23fa      	movs	r3, #250	; 0xfa
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	480b      	ldr	r0, [pc, #44]	; (8006284 <nrf_write_reg_multi+0x84>)
 8006258:	2201      	movs	r2, #1
 800625a:	f7fd f8a3 	bl	80033a4 <HAL_SPI_Transmit>
	for (int i = 0; i <size; i++)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	3301      	adds	r3, #1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	429a      	cmp	r2, r3
 800626a:	dbef      	blt.n	800624c <nrf_write_reg_multi+0x4c>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	0059      	lsls	r1, r3, #1
 8006270:	23a0      	movs	r3, #160	; 0xa0
 8006272:	05db      	lsls	r3, r3, #23
 8006274:	2201      	movs	r2, #1
 8006276:	0018      	movs	r0, r3
 8006278:	f7fc f935 	bl	80024e6 <HAL_GPIO_WritePin>

}
 800627c:	46c0      	nop			; (mov r8, r8)
 800627e:	46bd      	mov	sp, r7
 8006280:	b007      	add	sp, #28
 8006282:	bd90      	pop	{r4, r7, pc}
 8006284:	20000098 	.word	0x20000098

08006288 <nrf_send_cmd>:

void nrf_send_cmd (uint8_t cmd){
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	0002      	movs	r2, r0
 8006290:	1dfb      	adds	r3, r7, #7
 8006292:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8006294:	2380      	movs	r3, #128	; 0x80
 8006296:	0059      	lsls	r1, r3, #1
 8006298:	23a0      	movs	r3, #160	; 0xa0
 800629a:	05db      	lsls	r3, r3, #23
 800629c:	2200      	movs	r2, #0
 800629e:	0018      	movs	r0, r3
 80062a0:	f7fc f921 	bl	80024e6 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80062a4:	1df9      	adds	r1, r7, #7
 80062a6:	4808      	ldr	r0, [pc, #32]	; (80062c8 <nrf_send_cmd+0x40>)
 80062a8:	2364      	movs	r3, #100	; 0x64
 80062aa:	2201      	movs	r2, #1
 80062ac:	f7fd f87a 	bl	80033a4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 80062b0:	2380      	movs	r3, #128	; 0x80
 80062b2:	0059      	lsls	r1, r3, #1
 80062b4:	23a0      	movs	r3, #160	; 0xa0
 80062b6:	05db      	lsls	r3, r3, #23
 80062b8:	2201      	movs	r2, #1
 80062ba:	0018      	movs	r0, r3
 80062bc:	f7fc f913 	bl	80024e6 <HAL_GPIO_WritePin>
}
 80062c0:	46c0      	nop			; (mov r8, r8)
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b002      	add	sp, #8
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20000098 	.word	0x20000098

080062cc <nrf_init>:

void nrf_init(void){
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80062d0:	2380      	movs	r3, #128	; 0x80
 80062d2:	0119      	lsls	r1, r3, #4
 80062d4:	23a0      	movs	r3, #160	; 0xa0
 80062d6:	05db      	lsls	r3, r3, #23
 80062d8:	2200      	movs	r2, #0
 80062da:	0018      	movs	r0, r3
 80062dc:	f7fc f903 	bl	80024e6 <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_CONFIG, 0);
 80062e0:	2100      	movs	r1, #0
 80062e2:	2000      	movs	r0, #0
 80062e4:	f7ff ff4e 	bl	8006184 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_AA, 0); //Turn off auto ack
 80062e8:	2100      	movs	r1, #0
 80062ea:	2001      	movs	r0, #1
 80062ec:	f7ff ff4a 	bl	8006184 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_RXADDR, 0); //Not enabling any data pipe
 80062f0:	2100      	movs	r1, #0
 80062f2:	2002      	movs	r0, #2
 80062f4:	f7ff ff46 	bl	8006184 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_AW, 0x03); //5 bytes for TX/RX address
 80062f8:	2103      	movs	r1, #3
 80062fa:	2003      	movs	r0, #3
 80062fc:	f7ff ff42 	bl	8006184 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_RETR, 0); //No retransmission
 8006300:	2100      	movs	r1, #0
 8006302:	2004      	movs	r0, #4
 8006304:	f7ff ff3e 	bl	8006184 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_CH, 0); //
 8006308:	2100      	movs	r1, #0
 800630a:	2005      	movs	r0, #5
 800630c:	f7ff ff3a 	bl	8006184 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_SETUP, 0x0E); //Power = 0dB, data rate = 2Mbps
 8006310:	210e      	movs	r1, #14
 8006312:	2006      	movs	r0, #6
 8006314:	f7ff ff36 	bl	8006184 <nrf_write_reg>

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8006318:	2380      	movs	r3, #128	; 0x80
 800631a:	0119      	lsls	r1, r3, #4
 800631c:	23a0      	movs	r3, #160	; 0xa0
 800631e:	05db      	lsls	r3, r3, #23
 8006320:	2200      	movs	r2, #0
 8006322:	0018      	movs	r0, r3
 8006324:	f7fc f8df 	bl	80024e6 <HAL_GPIO_WritePin>

}
 8006328:	46c0      	nop			; (mov r8, r8)
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <nrf_tx_mode>:

void nrf_tx_mode(uint8_t *addr, uint8_t channel){
 800632e:	b5b0      	push	{r4, r5, r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	000a      	movs	r2, r1
 8006338:	1cfb      	adds	r3, r7, #3
 800633a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800633c:	2380      	movs	r3, #128	; 0x80
 800633e:	0119      	lsls	r1, r3, #4
 8006340:	23a0      	movs	r3, #160	; 0xa0
 8006342:	05db      	lsls	r3, r3, #23
 8006344:	2200      	movs	r2, #0
 8006346:	0018      	movs	r0, r3
 8006348:	f7fc f8cd 	bl	80024e6 <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_RF_CH, channel);
 800634c:	1cfb      	adds	r3, r7, #3
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	0019      	movs	r1, r3
 8006352:	2005      	movs	r0, #5
 8006354:	f7ff ff16 	bl	8006184 <nrf_write_reg>
    nrf_write_reg_multi(NRF24_REG_TX_ADDR, addr, 5);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2205      	movs	r2, #5
 800635c:	0019      	movs	r1, r3
 800635e:	2010      	movs	r0, #16
 8006360:	f7ff ff4e 	bl	8006200 <nrf_write_reg_multi>

    uint8_t config = nrf_read_reg(NRF24_REG_CONFIG);
 8006364:	250f      	movs	r5, #15
 8006366:	197c      	adds	r4, r7, r5
 8006368:	2000      	movs	r0, #0
 800636a:	f7ff fe8b 	bl	8006084 <nrf_read_reg>
 800636e:	0003      	movs	r3, r0
 8006370:	7023      	strb	r3, [r4, #0]
    config = (config | ((1<<1) & 0xFE));
 8006372:	0028      	movs	r0, r5
 8006374:	183b      	adds	r3, r7, r0
 8006376:	183a      	adds	r2, r7, r0
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	2102      	movs	r1, #2
 800637c:	430a      	orrs	r2, r1
 800637e:	701a      	strb	r2, [r3, #0]
    nrf_write_reg(NRF24_REG_CONFIG, config);
 8006380:	183b      	adds	r3, r7, r0
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	0019      	movs	r1, r3
 8006386:	2000      	movs	r0, #0
 8006388:	f7ff fefc 	bl	8006184 <nrf_write_reg>

    //Testing I added
    uint8_t test[5] = {0};
 800638c:	2108      	movs	r1, #8
 800638e:	187b      	adds	r3, r7, r1
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	2200      	movs	r2, #0
 8006396:	711a      	strb	r2, [r3, #4]
    nrf_read_reg_multi(NRF24_REG_TX_ADDR, test, 5);
 8006398:	187b      	adds	r3, r7, r1
 800639a:	2205      	movs	r2, #5
 800639c:	0019      	movs	r1, r3
 800639e:	2010      	movs	r0, #16
 80063a0:	f7ff fea6 	bl	80060f0 <nrf_read_reg_multi>

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80063a4:	2380      	movs	r3, #128	; 0x80
 80063a6:	0119      	lsls	r1, r3, #4
 80063a8:	23a0      	movs	r3, #160	; 0xa0
 80063aa:	05db      	lsls	r3, r3, #23
 80063ac:	2201      	movs	r2, #1
 80063ae:	0018      	movs	r0, r3
 80063b0:	f7fc f899 	bl	80024e6 <HAL_GPIO_WritePin>
}
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	46bd      	mov	sp, r7
 80063b8:	b004      	add	sp, #16
 80063ba:	bdb0      	pop	{r4, r5, r7, pc}

080063bc <nrf_transmit>:

uint8_t nrf_transmit(uint8_t *data){
 80063bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 80063c4:	250e      	movs	r5, #14
 80063c6:	197b      	adds	r3, r7, r5
 80063c8:	2200      	movs	r2, #0
 80063ca:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 80063cc:	2380      	movs	r3, #128	; 0x80
 80063ce:	0059      	lsls	r1, r3, #1
 80063d0:	23a0      	movs	r3, #160	; 0xa0
 80063d2:	05db      	lsls	r3, r3, #23
 80063d4:	2200      	movs	r2, #0
 80063d6:	0018      	movs	r0, r3
 80063d8:	f7fc f885 	bl	80024e6 <HAL_GPIO_WritePin>

    //TX command
    cmd = NRF24_CMD_W_TX_PAYLOAD;
 80063dc:	197b      	adds	r3, r7, r5
 80063de:	22a0      	movs	r2, #160	; 0xa0
 80063e0:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80063e2:	1979      	adds	r1, r7, r5
 80063e4:	481a      	ldr	r0, [pc, #104]	; (8006450 <nrf_transmit+0x94>)
 80063e6:	2364      	movs	r3, #100	; 0x64
 80063e8:	2201      	movs	r2, #1
 80063ea:	f7fc ffdb 	bl	80033a4 <HAL_SPI_Transmit>

    //TX data send
    HAL_SPI_Transmit(&hspi1, data, 32, 1000);
 80063ee:	23fa      	movs	r3, #250	; 0xfa
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	4816      	ldr	r0, [pc, #88]	; (8006450 <nrf_transmit+0x94>)
 80063f6:	2220      	movs	r2, #32
 80063f8:	f7fc ffd4 	bl	80033a4 <HAL_SPI_Transmit>


    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 80063fc:	2380      	movs	r3, #128	; 0x80
 80063fe:	0059      	lsls	r1, r3, #1
 8006400:	23a0      	movs	r3, #160	; 0xa0
 8006402:	05db      	lsls	r3, r3, #23
 8006404:	2201      	movs	r2, #1
 8006406:	0018      	movs	r0, r3
 8006408:	f7fc f86d 	bl	80024e6 <HAL_GPIO_WritePin>

    //HAL_Delay(1);

    uint8_t fifo_status = nrf_read_reg(NRF24_REG_FIFO_STATUS);
 800640c:	260f      	movs	r6, #15
 800640e:	19bc      	adds	r4, r7, r6
 8006410:	2017      	movs	r0, #23
 8006412:	f7ff fe37 	bl	8006084 <nrf_read_reg>
 8006416:	0003      	movs	r3, r0
 8006418:	7023      	strb	r3, [r4, #0]

    if((fifo_status & (1<<4)) && (!(fifo_status & (1<<3)))){
 800641a:	0031      	movs	r1, r6
 800641c:	187b      	adds	r3, r7, r1
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2210      	movs	r2, #16
 8006422:	4013      	ands	r3, r2
 8006424:	d00e      	beq.n	8006444 <nrf_transmit+0x88>
 8006426:	187b      	adds	r3, r7, r1
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2208      	movs	r2, #8
 800642c:	4013      	ands	r3, r2
 800642e:	d109      	bne.n	8006444 <nrf_transmit+0x88>
    	cmd = NRF24_CMD_FLUSH_TX;
 8006430:	197b      	adds	r3, r7, r5
 8006432:	22e1      	movs	r2, #225	; 0xe1
 8006434:	701a      	strb	r2, [r3, #0]
    	nrf_send_cmd(cmd);
 8006436:	197b      	adds	r3, r7, r5
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	0018      	movs	r0, r3
 800643c:	f7ff ff24 	bl	8006288 <nrf_send_cmd>

    	return 1;
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <nrf_transmit+0x8a>
    }

    return 0;
 8006444:	2300      	movs	r3, #0


}
 8006446:	0018      	movs	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	b005      	add	sp, #20
 800644c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	20000098 	.word	0x20000098

08006454 <nrf_send_adc>:
    nrf_send_cmd(cmd);


}

int nrf_send_adc(uint32_t adc_val){
 8006454:	b5b0      	push	{r4, r5, r7, lr}
 8006456:	b08c      	sub	sp, #48	; 0x30
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 800645c:	242f      	movs	r4, #47	; 0x2f
 800645e:	193b      	adds	r3, r7, r4
 8006460:	2200      	movs	r2, #0
 8006462:	701a      	strb	r2, [r3, #0]
	uint8_t TX_data[32] = {0};
 8006464:	2508      	movs	r5, #8
 8006466:	197b      	adds	r3, r7, r5
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	3304      	adds	r3, #4
 800646e:	221c      	movs	r2, #28
 8006470:	2100      	movs	r1, #0
 8006472:	0018      	movs	r0, r3
 8006474:	f001 fa8e 	bl	8007994 <memset>

	//Put together 32 byte data packet
	//0: Command Type
	//1-31: Payload
	TX_data[index++] = (uint8_t)CMD_SEND_ADC;
 8006478:	0020      	movs	r0, r4
 800647a:	183b      	adds	r3, r7, r0
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	183a      	adds	r2, r7, r0
 8006480:	1c59      	adds	r1, r3, #1
 8006482:	7011      	strb	r1, [r2, #0]
 8006484:	001a      	movs	r2, r3
 8006486:	197b      	adds	r3, r7, r5
 8006488:	2100      	movs	r1, #0
 800648a:	5499      	strb	r1, [r3, r2]
	TX_data[index++] = (uint8_t)(adc_val >> 8);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	0a19      	lsrs	r1, r3, #8
 8006490:	183b      	adds	r3, r7, r0
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	0004      	movs	r4, r0
 8006496:	183a      	adds	r2, r7, r0
 8006498:	1c58      	adds	r0, r3, #1
 800649a:	7010      	strb	r0, [r2, #0]
 800649c:	001a      	movs	r2, r3
 800649e:	b2c9      	uxtb	r1, r1
 80064a0:	197b      	adds	r3, r7, r5
 80064a2:	5499      	strb	r1, [r3, r2]
	TX_data[index] 	 = (uint8_t)(adc_val & 0xFF);
 80064a4:	193b      	adds	r3, r7, r4
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	b2d1      	uxtb	r1, r2
 80064ac:	197a      	adds	r2, r7, r5
 80064ae:	54d1      	strb	r1, [r2, r3]

	int trans_stat = nrf_transmit(TX_data);
 80064b0:	197b      	adds	r3, r7, r5
 80064b2:	0018      	movs	r0, r3
 80064b4:	f7ff ff82 	bl	80063bc <nrf_transmit>
 80064b8:	0003      	movs	r3, r0
 80064ba:	62bb      	str	r3, [r7, #40]	; 0x28
	return trans_stat;
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80064be:	0018      	movs	r0, r3
 80064c0:	46bd      	mov	sp, r7
 80064c2:	b00c      	add	sp, #48	; 0x30
 80064c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080064c8 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	0002      	movs	r2, r0
 80064d0:	1dfb      	adds	r3, r7, #7
 80064d2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 80064d4:	23fa      	movs	r3, #250	; 0xfa
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	1df9      	adds	r1, r7, #7
 80064da:	4804      	ldr	r0, [pc, #16]	; (80064ec <DEV_SPI_WRite+0x24>)
 80064dc:	2201      	movs	r2, #1
 80064de:	f7fc ff61 	bl	80033a4 <HAL_SPI_Transmit>
}
 80064e2:	46c0      	nop			; (mov r8, r8)
 80064e4:	46bd      	mov	sp, r7
 80064e6:	b002      	add	sp, #8
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	200000fc 	.word	0x200000fc

080064f0 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 80064f4:	2380      	movs	r3, #128	; 0x80
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	480d      	ldr	r0, [pc, #52]	; (8006530 <DEV_Module_Init+0x40>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	0019      	movs	r1, r3
 80064fe:	f7fb fff2 	bl	80024e6 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8006502:	2380      	movs	r3, #128	; 0x80
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	480b      	ldr	r0, [pc, #44]	; (8006534 <DEV_Module_Init+0x44>)
 8006508:	2201      	movs	r2, #1
 800650a:	0019      	movs	r1, r3
 800650c:	f7fb ffeb 	bl	80024e6 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8006510:	23a0      	movs	r3, #160	; 0xa0
 8006512:	05db      	lsls	r3, r3, #23
 8006514:	2201      	movs	r2, #1
 8006516:	2108      	movs	r1, #8
 8006518:	0018      	movs	r0, r3
 800651a:	f7fb ffe4 	bl	80024e6 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800651e:	4b06      	ldr	r3, [pc, #24]	; (8006538 <DEV_Module_Init+0x48>)
 8006520:	2100      	movs	r1, #0
 8006522:	0018      	movs	r0, r3
 8006524:	f7fd feb2 	bl	800428c <HAL_TIM_PWM_Start>
		return 0;
 8006528:	2300      	movs	r3, #0
}
 800652a:	0018      	movs	r0, r3
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	50000800 	.word	0x50000800
 8006534:	50000400 	.word	0x50000400
 8006538:	200001ac 	.word	0x200001ac

0800653c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800653c:	b5b0      	push	{r4, r5, r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	0005      	movs	r5, r0
 8006544:	000c      	movs	r4, r1
 8006546:	0010      	movs	r0, r2
 8006548:	0019      	movs	r1, r3
 800654a:	1dbb      	adds	r3, r7, #6
 800654c:	1c2a      	adds	r2, r5, #0
 800654e:	801a      	strh	r2, [r3, #0]
 8006550:	1d3b      	adds	r3, r7, #4
 8006552:	1c22      	adds	r2, r4, #0
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	1cbb      	adds	r3, r7, #2
 8006558:	1c02      	adds	r2, r0, #0
 800655a:	801a      	strh	r2, [r3, #0]
 800655c:	003b      	movs	r3, r7
 800655e:	1c0a      	adds	r2, r1, #0
 8006560:	801a      	strh	r2, [r3, #0]
    Paint.WidthMemory = Width;
 8006562:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <Paint_NewImage+0x98>)
 8006564:	1dba      	adds	r2, r7, #6
 8006566:	8812      	ldrh	r2, [r2, #0]
 8006568:	811a      	strh	r2, [r3, #8]
    Paint.HeightMemory = Height;
 800656a:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <Paint_NewImage+0x98>)
 800656c:	1d3a      	adds	r2, r7, #4
 800656e:	8812      	ldrh	r2, [r2, #0]
 8006570:	815a      	strh	r2, [r3, #10]
    Paint.Color = Color;    
 8006572:	4b18      	ldr	r3, [pc, #96]	; (80065d4 <Paint_NewImage+0x98>)
 8006574:	003a      	movs	r2, r7
 8006576:	8812      	ldrh	r2, [r2, #0]
 8006578:	819a      	strh	r2, [r3, #12]
    Paint.WidthByte = Width;
 800657a:	4b16      	ldr	r3, [pc, #88]	; (80065d4 <Paint_NewImage+0x98>)
 800657c:	1dba      	adds	r2, r7, #6
 800657e:	8812      	ldrh	r2, [r2, #0]
 8006580:	825a      	strh	r2, [r3, #18]
    Paint.HeightByte = Height;    
 8006582:	4b14      	ldr	r3, [pc, #80]	; (80065d4 <Paint_NewImage+0x98>)
 8006584:	1d3a      	adds	r2, r7, #4
 8006586:	8812      	ldrh	r2, [r2, #0]
 8006588:	829a      	strh	r2, [r3, #20]
   
    Paint.Rotate = Rotate;
 800658a:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <Paint_NewImage+0x98>)
 800658c:	1cba      	adds	r2, r7, #2
 800658e:	8812      	ldrh	r2, [r2, #0]
 8006590:	81da      	strh	r2, [r3, #14]
    Paint.Mirror = MIRROR_NONE;
 8006592:	4b10      	ldr	r3, [pc, #64]	; (80065d4 <Paint_NewImage+0x98>)
 8006594:	2200      	movs	r2, #0
 8006596:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8006598:	1cbb      	adds	r3, r7, #2
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <Paint_NewImage+0x6c>
 80065a0:	1cbb      	adds	r3, r7, #2
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	2bb4      	cmp	r3, #180	; 0xb4
 80065a6:	d108      	bne.n	80065ba <Paint_NewImage+0x7e>
        Paint.Width = Width;
 80065a8:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <Paint_NewImage+0x98>)
 80065aa:	1dba      	adds	r2, r7, #6
 80065ac:	8812      	ldrh	r2, [r2, #0]
 80065ae:	809a      	strh	r2, [r3, #4]
        Paint.Height = Height;
 80065b0:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <Paint_NewImage+0x98>)
 80065b2:	1d3a      	adds	r2, r7, #4
 80065b4:	8812      	ldrh	r2, [r2, #0]
 80065b6:	80da      	strh	r2, [r3, #6]
 80065b8:	e008      	b.n	80065cc <Paint_NewImage+0x90>
    } else {
        Paint.Width = Height;
 80065ba:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <Paint_NewImage+0x98>)
 80065bc:	1d3a      	adds	r2, r7, #4
 80065be:	8812      	ldrh	r2, [r2, #0]
 80065c0:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 80065c2:	4b04      	ldr	r3, [pc, #16]	; (80065d4 <Paint_NewImage+0x98>)
 80065c4:	1dba      	adds	r2, r7, #6
 80065c6:	8812      	ldrh	r2, [r2, #0]
 80065c8:	80da      	strh	r2, [r3, #6]
    }
}
 80065ca:	46c0      	nop			; (mov r8, r8)
 80065cc:	46c0      	nop			; (mov r8, r8)
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b002      	add	sp, #8
 80065d2:	bdb0      	pop	{r4, r5, r7, pc}
 80065d4:	20000290 	.word	0x20000290

080065d8 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 80065e0:	4b03      	ldr	r3, [pc, #12]	; (80065f0 <Paint_SetClearFuntion+0x18>)
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	601a      	str	r2, [r3, #0]
}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	46bd      	mov	sp, r7
 80065ea:	b002      	add	sp, #8
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	200002ac 	.word	0x200002ac

080065f4 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 80065fc:	4b03      	ldr	r3, [pc, #12]	; (800660c <Paint_SetDisplayFuntion+0x18>)
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	601a      	str	r2, [r3, #0]
}
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	46bd      	mov	sp, r7
 8006606:	b002      	add	sp, #8
 8006608:	bd80      	pop	{r7, pc}
 800660a:	46c0      	nop			; (mov r8, r8)
 800660c:	200002a8 	.word	0x200002a8

08006610 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8006610:	b590      	push	{r4, r7, lr}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	0004      	movs	r4, r0
 8006618:	0008      	movs	r0, r1
 800661a:	0011      	movs	r1, r2
 800661c:	1dbb      	adds	r3, r7, #6
 800661e:	1c22      	adds	r2, r4, #0
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	1d3b      	adds	r3, r7, #4
 8006624:	1c02      	adds	r2, r0, #0
 8006626:	801a      	strh	r2, [r3, #0]
 8006628:	1cbb      	adds	r3, r7, #2
 800662a:	1c0a      	adds	r2, r1, #0
 800662c:	801a      	strh	r2, [r3, #0]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800662e:	4b66      	ldr	r3, [pc, #408]	; (80067c8 <Paint_SetPixel+0x1b8>)
 8006630:	889b      	ldrh	r3, [r3, #4]
 8006632:	b29b      	uxth	r3, r3
 8006634:	1dba      	adds	r2, r7, #6
 8006636:	8812      	ldrh	r2, [r2, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d900      	bls.n	800663e <Paint_SetPixel+0x2e>
 800663c:	e0b9      	b.n	80067b2 <Paint_SetPixel+0x1a2>
 800663e:	4b62      	ldr	r3, [pc, #392]	; (80067c8 <Paint_SetPixel+0x1b8>)
 8006640:	88db      	ldrh	r3, [r3, #6]
 8006642:	b29b      	uxth	r3, r3
 8006644:	1d3a      	adds	r2, r7, #4
 8006646:	8812      	ldrh	r2, [r2, #0]
 8006648:	429a      	cmp	r2, r3
 800664a:	d900      	bls.n	800664e <Paint_SetPixel+0x3e>
 800664c:	e0b1      	b.n	80067b2 <Paint_SetPixel+0x1a2>
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800664e:	4b5e      	ldr	r3, [pc, #376]	; (80067c8 <Paint_SetPixel+0x1b8>)
 8006650:	89db      	ldrh	r3, [r3, #14]
 8006652:	b29b      	uxth	r3, r3
 8006654:	2287      	movs	r2, #135	; 0x87
 8006656:	0052      	lsls	r2, r2, #1
 8006658:	4293      	cmp	r3, r2
 800665a:	d040      	beq.n	80066de <Paint_SetPixel+0xce>
 800665c:	2287      	movs	r2, #135	; 0x87
 800665e:	0052      	lsls	r2, r2, #1
 8006660:	4293      	cmp	r3, r2
 8006662:	dd00      	ble.n	8006666 <Paint_SetPixel+0x56>
 8006664:	e0a7      	b.n	80067b6 <Paint_SetPixel+0x1a6>
 8006666:	2bb4      	cmp	r3, #180	; 0xb4
 8006668:	d022      	beq.n	80066b0 <Paint_SetPixel+0xa0>
 800666a:	dd00      	ble.n	800666e <Paint_SetPixel+0x5e>
 800666c:	e0a3      	b.n	80067b6 <Paint_SetPixel+0x1a6>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <Paint_SetPixel+0x68>
 8006672:	2b5a      	cmp	r3, #90	; 0x5a
 8006674:	d00b      	beq.n	800668e <Paint_SetPixel+0x7e>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8006676:	e09e      	b.n	80067b6 <Paint_SetPixel+0x1a6>
        X = Xpoint;
 8006678:	230e      	movs	r3, #14
 800667a:	18fb      	adds	r3, r7, r3
 800667c:	1dba      	adds	r2, r7, #6
 800667e:	8812      	ldrh	r2, [r2, #0]
 8006680:	801a      	strh	r2, [r3, #0]
        Y = Ypoint;  
 8006682:	230c      	movs	r3, #12
 8006684:	18fb      	adds	r3, r7, r3
 8006686:	1d3a      	adds	r2, r7, #4
 8006688:	8812      	ldrh	r2, [r2, #0]
 800668a:	801a      	strh	r2, [r3, #0]
        break;
 800668c:	e038      	b.n	8006700 <Paint_SetPixel+0xf0>
        X = Paint.WidthMemory - Ypoint - 1;
 800668e:	4b4e      	ldr	r3, [pc, #312]	; (80067c8 <Paint_SetPixel+0x1b8>)
 8006690:	891b      	ldrh	r3, [r3, #8]
 8006692:	b29a      	uxth	r2, r3
 8006694:	1d3b      	adds	r3, r7, #4
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	b29a      	uxth	r2, r3
 800669c:	230e      	movs	r3, #14
 800669e:	18fb      	adds	r3, r7, r3
 80066a0:	3a01      	subs	r2, #1
 80066a2:	801a      	strh	r2, [r3, #0]
        Y = Xpoint;
 80066a4:	230c      	movs	r3, #12
 80066a6:	18fb      	adds	r3, r7, r3
 80066a8:	1dba      	adds	r2, r7, #6
 80066aa:	8812      	ldrh	r2, [r2, #0]
 80066ac:	801a      	strh	r2, [r3, #0]
        break;
 80066ae:	e027      	b.n	8006700 <Paint_SetPixel+0xf0>
        X = Paint.WidthMemory - Xpoint - 1;
 80066b0:	4b45      	ldr	r3, [pc, #276]	; (80067c8 <Paint_SetPixel+0x1b8>)
 80066b2:	891b      	ldrh	r3, [r3, #8]
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	1dbb      	adds	r3, r7, #6
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	b29a      	uxth	r2, r3
 80066be:	230e      	movs	r3, #14
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	3a01      	subs	r2, #1
 80066c4:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Ypoint - 1;
 80066c6:	4b40      	ldr	r3, [pc, #256]	; (80067c8 <Paint_SetPixel+0x1b8>)
 80066c8:	895b      	ldrh	r3, [r3, #10]
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	1d3b      	adds	r3, r7, #4
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	230c      	movs	r3, #12
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	3a01      	subs	r2, #1
 80066da:	801a      	strh	r2, [r3, #0]
        break;
 80066dc:	e010      	b.n	8006700 <Paint_SetPixel+0xf0>
        X = Ypoint;
 80066de:	230e      	movs	r3, #14
 80066e0:	18fb      	adds	r3, r7, r3
 80066e2:	1d3a      	adds	r2, r7, #4
 80066e4:	8812      	ldrh	r2, [r2, #0]
 80066e6:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Xpoint - 1;
 80066e8:	4b37      	ldr	r3, [pc, #220]	; (80067c8 <Paint_SetPixel+0x1b8>)
 80066ea:	895b      	ldrh	r3, [r3, #10]
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	1dbb      	adds	r3, r7, #6
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	230c      	movs	r3, #12
 80066f8:	18fb      	adds	r3, r7, r3
 80066fa:	3a01      	subs	r2, #1
 80066fc:	801a      	strh	r2, [r3, #0]
        break;
 80066fe:	46c0      	nop			; (mov r8, r8)
    }
    
    switch(Paint.Mirror) {
 8006700:	4b31      	ldr	r3, [pc, #196]	; (80067c8 <Paint_SetPixel+0x1b8>)
 8006702:	8a1b      	ldrh	r3, [r3, #16]
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b03      	cmp	r3, #3
 8006708:	d020      	beq.n	800674c <Paint_SetPixel+0x13c>
 800670a:	dc56      	bgt.n	80067ba <Paint_SetPixel+0x1aa>
 800670c:	2b02      	cmp	r3, #2
 800670e:	d011      	beq.n	8006734 <Paint_SetPixel+0x124>
 8006710:	dc53      	bgt.n	80067ba <Paint_SetPixel+0x1aa>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d031      	beq.n	800677a <Paint_SetPixel+0x16a>
 8006716:	2b01      	cmp	r3, #1
 8006718:	d000      	beq.n	800671c <Paint_SetPixel+0x10c>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
        Y = Paint.HeightMemory - Y - 1;
        break;
    default:
        return;
 800671a:	e04e      	b.n	80067ba <Paint_SetPixel+0x1aa>
        X = Paint.WidthMemory - X - 1;
 800671c:	4b2a      	ldr	r3, [pc, #168]	; (80067c8 <Paint_SetPixel+0x1b8>)
 800671e:	891b      	ldrh	r3, [r3, #8]
 8006720:	b29a      	uxth	r2, r3
 8006722:	210e      	movs	r1, #14
 8006724:	187b      	adds	r3, r7, r1
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	b29a      	uxth	r2, r3
 800672c:	187b      	adds	r3, r7, r1
 800672e:	3a01      	subs	r2, #1
 8006730:	801a      	strh	r2, [r3, #0]
        break;
 8006732:	e023      	b.n	800677c <Paint_SetPixel+0x16c>
        Y = Paint.HeightMemory - Y - 1;
 8006734:	4b24      	ldr	r3, [pc, #144]	; (80067c8 <Paint_SetPixel+0x1b8>)
 8006736:	895b      	ldrh	r3, [r3, #10]
 8006738:	b29a      	uxth	r2, r3
 800673a:	210c      	movs	r1, #12
 800673c:	187b      	adds	r3, r7, r1
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	b29a      	uxth	r2, r3
 8006744:	187b      	adds	r3, r7, r1
 8006746:	3a01      	subs	r2, #1
 8006748:	801a      	strh	r2, [r3, #0]
        break;
 800674a:	e017      	b.n	800677c <Paint_SetPixel+0x16c>
        X = Paint.WidthMemory - X - 1;
 800674c:	4b1e      	ldr	r3, [pc, #120]	; (80067c8 <Paint_SetPixel+0x1b8>)
 800674e:	891b      	ldrh	r3, [r3, #8]
 8006750:	b29a      	uxth	r2, r3
 8006752:	210e      	movs	r1, #14
 8006754:	187b      	adds	r3, r7, r1
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	b29a      	uxth	r2, r3
 800675c:	187b      	adds	r3, r7, r1
 800675e:	3a01      	subs	r2, #1
 8006760:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Y - 1;
 8006762:	4b19      	ldr	r3, [pc, #100]	; (80067c8 <Paint_SetPixel+0x1b8>)
 8006764:	895b      	ldrh	r3, [r3, #10]
 8006766:	b29a      	uxth	r2, r3
 8006768:	210c      	movs	r1, #12
 800676a:	187b      	adds	r3, r7, r1
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	b29a      	uxth	r2, r3
 8006772:	187b      	adds	r3, r7, r1
 8006774:	3a01      	subs	r2, #1
 8006776:	801a      	strh	r2, [r3, #0]
        break;
 8006778:	e000      	b.n	800677c <Paint_SetPixel+0x16c>
        break;
 800677a:	46c0      	nop			; (mov r8, r8)
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800677c:	4b12      	ldr	r3, [pc, #72]	; (80067c8 <Paint_SetPixel+0x1b8>)
 800677e:	891b      	ldrh	r3, [r3, #8]
 8006780:	b29b      	uxth	r3, r3
 8006782:	200e      	movs	r0, #14
 8006784:	183a      	adds	r2, r7, r0
 8006786:	8812      	ldrh	r2, [r2, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d818      	bhi.n	80067be <Paint_SetPixel+0x1ae>
 800678c:	4b0e      	ldr	r3, [pc, #56]	; (80067c8 <Paint_SetPixel+0x1b8>)
 800678e:	895b      	ldrh	r3, [r3, #10]
 8006790:	b29b      	uxth	r3, r3
 8006792:	210c      	movs	r1, #12
 8006794:	187a      	adds	r2, r7, r1
 8006796:	8812      	ldrh	r2, [r2, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d810      	bhi.n	80067be <Paint_SetPixel+0x1ae>
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 800679c:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <Paint_SetPixel+0x1bc>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	1cba      	adds	r2, r7, #2
 80067a2:	8814      	ldrh	r4, [r2, #0]
 80067a4:	187a      	adds	r2, r7, r1
 80067a6:	8811      	ldrh	r1, [r2, #0]
 80067a8:	183a      	adds	r2, r7, r0
 80067aa:	8810      	ldrh	r0, [r2, #0]
 80067ac:	0022      	movs	r2, r4
 80067ae:	4798      	blx	r3
 80067b0:	e006      	b.n	80067c0 <Paint_SetPixel+0x1b0>
        return;
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	e004      	b.n	80067c0 <Paint_SetPixel+0x1b0>
        return;
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	e002      	b.n	80067c0 <Paint_SetPixel+0x1b0>
        return;
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	e000      	b.n	80067c0 <Paint_SetPixel+0x1b0>
        return;
 80067be:	46c0      	nop			; (mov r8, r8)
}
 80067c0:	46bd      	mov	sp, r7
 80067c2:	b005      	add	sp, #20
 80067c4:	bd90      	pop	{r4, r7, pc}
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	20000290 	.word	0x20000290
 80067cc:	200002a8 	.word	0x200002a8

080067d0 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	0002      	movs	r2, r0
 80067d8:	1dbb      	adds	r3, r7, #6
 80067da:	801a      	strh	r2, [r3, #0]
	CLEAR(Color);
 80067dc:	4b04      	ldr	r3, [pc, #16]	; (80067f0 <Paint_Clear+0x20>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	1dba      	adds	r2, r7, #6
 80067e2:	8812      	ldrh	r2, [r2, #0]
 80067e4:	0010      	movs	r0, r2
 80067e6:	4798      	blx	r3
}
 80067e8:	46c0      	nop			; (mov r8, r8)
 80067ea:	46bd      	mov	sp, r7
 80067ec:	b002      	add	sp, #8
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	200002ac 	.word	0x200002ac

080067f4 <Paint_ClearWindows>:
    Ystart :   Y starting point
    Xend   :   x end point
    Yend   :   y end point
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 80067f4:	b5b0      	push	{r4, r5, r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	0005      	movs	r5, r0
 80067fc:	000c      	movs	r4, r1
 80067fe:	0010      	movs	r0, r2
 8006800:	0019      	movs	r1, r3
 8006802:	1dbb      	adds	r3, r7, #6
 8006804:	1c2a      	adds	r2, r5, #0
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	1d3b      	adds	r3, r7, #4
 800680a:	1c22      	adds	r2, r4, #0
 800680c:	801a      	strh	r2, [r3, #0]
 800680e:	1cbb      	adds	r3, r7, #2
 8006810:	1c02      	adds	r2, r0, #0
 8006812:	801a      	strh	r2, [r3, #0]
 8006814:	003b      	movs	r3, r7
 8006816:	1c0a      	adds	r2, r1, #0
 8006818:	801a      	strh	r2, [r3, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 800681a:	230c      	movs	r3, #12
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	1d3a      	adds	r2, r7, #4
 8006820:	8812      	ldrh	r2, [r2, #0]
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	e024      	b.n	8006870 <Paint_ClearWindows+0x7c>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8006826:	230e      	movs	r3, #14
 8006828:	18fb      	adds	r3, r7, r3
 800682a:	1dba      	adds	r2, r7, #6
 800682c:	8812      	ldrh	r2, [r2, #0]
 800682e:	801a      	strh	r2, [r3, #0]
 8006830:	e011      	b.n	8006856 <Paint_ClearWindows+0x62>
            Paint_SetPixel(X, Y, Color);
 8006832:	2320      	movs	r3, #32
 8006834:	18fb      	adds	r3, r7, r3
 8006836:	881a      	ldrh	r2, [r3, #0]
 8006838:	230c      	movs	r3, #12
 800683a:	18fb      	adds	r3, r7, r3
 800683c:	8819      	ldrh	r1, [r3, #0]
 800683e:	240e      	movs	r4, #14
 8006840:	193b      	adds	r3, r7, r4
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	0018      	movs	r0, r3
 8006846:	f7ff fee3 	bl	8006610 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 800684a:	0021      	movs	r1, r4
 800684c:	187b      	adds	r3, r7, r1
 800684e:	881a      	ldrh	r2, [r3, #0]
 8006850:	187b      	adds	r3, r7, r1
 8006852:	3201      	adds	r2, #1
 8006854:	801a      	strh	r2, [r3, #0]
 8006856:	230e      	movs	r3, #14
 8006858:	18fa      	adds	r2, r7, r3
 800685a:	1cbb      	adds	r3, r7, #2
 800685c:	8812      	ldrh	r2, [r2, #0]
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d3e6      	bcc.n	8006832 <Paint_ClearWindows+0x3e>
    for (Y = Ystart; Y < Yend; Y++) {
 8006864:	210c      	movs	r1, #12
 8006866:	187b      	adds	r3, r7, r1
 8006868:	881a      	ldrh	r2, [r3, #0]
 800686a:	187b      	adds	r3, r7, r1
 800686c:	3201      	adds	r2, #1
 800686e:	801a      	strh	r2, [r3, #0]
 8006870:	230c      	movs	r3, #12
 8006872:	18fa      	adds	r2, r7, r3
 8006874:	003b      	movs	r3, r7
 8006876:	8812      	ldrh	r2, [r2, #0]
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d3d3      	bcc.n	8006826 <Paint_ClearWindows+0x32>
        }
    }
}
 800687e:	46c0      	nop			; (mov r8, r8)
 8006880:	46c0      	nop			; (mov r8, r8)
 8006882:	46bd      	mov	sp, r7
 8006884:	b004      	add	sp, #16
 8006886:	bdb0      	pop	{r4, r5, r7, pc}

08006888 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8006888:	b5b0      	push	{r4, r5, r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	0005      	movs	r5, r0
 8006890:	000c      	movs	r4, r1
 8006892:	0010      	movs	r0, r2
 8006894:	0019      	movs	r1, r3
 8006896:	1dbb      	adds	r3, r7, #6
 8006898:	1c2a      	adds	r2, r5, #0
 800689a:	801a      	strh	r2, [r3, #0]
 800689c:	1d3b      	adds	r3, r7, #4
 800689e:	1c22      	adds	r2, r4, #0
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	1cbb      	adds	r3, r7, #2
 80068a4:	1c02      	adds	r2, r0, #0
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	1c7b      	adds	r3, r7, #1
 80068aa:	1c0a      	adds	r2, r1, #0
 80068ac:	701a      	strb	r2, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80068ae:	4b5f      	ldr	r3, [pc, #380]	; (8006a2c <Paint_DrawPoint+0x1a4>)
 80068b0:	889b      	ldrh	r3, [r3, #4]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	1dba      	adds	r2, r7, #6
 80068b6:	8812      	ldrh	r2, [r2, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d900      	bls.n	80068be <Paint_DrawPoint+0x36>
 80068bc:	e0b1      	b.n	8006a22 <Paint_DrawPoint+0x19a>
 80068be:	4b5b      	ldr	r3, [pc, #364]	; (8006a2c <Paint_DrawPoint+0x1a4>)
 80068c0:	88db      	ldrh	r3, [r3, #6]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	1d3a      	adds	r2, r7, #4
 80068c6:	8812      	ldrh	r2, [r2, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d900      	bls.n	80068ce <Paint_DrawPoint+0x46>
 80068cc:	e0a9      	b.n	8006a22 <Paint_DrawPoint+0x19a>
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 80068ce:	2320      	movs	r3, #32
 80068d0:	18fb      	adds	r3, r7, r3
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d161      	bne.n	800699c <Paint_DrawPoint+0x114>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 80068d8:	230e      	movs	r3, #14
 80068da:	18fb      	adds	r3, r7, r3
 80068dc:	2200      	movs	r2, #0
 80068de:	801a      	strh	r2, [r3, #0]
 80068e0:	e051      	b.n	8006986 <Paint_DrawPoint+0xfe>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80068e2:	230c      	movs	r3, #12
 80068e4:	18fb      	adds	r3, r7, r3
 80068e6:	2200      	movs	r2, #0
 80068e8:	801a      	strh	r2, [r3, #0]
 80068ea:	e039      	b.n	8006960 <Paint_DrawPoint+0xd8>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 80068ec:	1dbb      	adds	r3, r7, #6
 80068ee:	881a      	ldrh	r2, [r3, #0]
 80068f0:	200e      	movs	r0, #14
 80068f2:	183b      	adds	r3, r7, r0
 80068f4:	2100      	movs	r1, #0
 80068f6:	5e5b      	ldrsh	r3, [r3, r1]
 80068f8:	18d2      	adds	r2, r2, r3
 80068fa:	1c7b      	adds	r3, r7, #1
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	d438      	bmi.n	8006974 <Paint_DrawPoint+0xec>
 8006902:	1d3b      	adds	r3, r7, #4
 8006904:	881a      	ldrh	r2, [r3, #0]
 8006906:	210c      	movs	r1, #12
 8006908:	187b      	adds	r3, r7, r1
 800690a:	2400      	movs	r4, #0
 800690c:	5f1b      	ldrsh	r3, [r3, r4]
 800690e:	18d2      	adds	r2, r2, r3
 8006910:	1c7b      	adds	r3, r7, #1
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	d42d      	bmi.n	8006974 <Paint_DrawPoint+0xec>
                    break;
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8006918:	183b      	adds	r3, r7, r0
 800691a:	881a      	ldrh	r2, [r3, #0]
 800691c:	1dbb      	adds	r3, r7, #6
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	18d3      	adds	r3, r2, r3
 8006922:	b29a      	uxth	r2, r3
 8006924:	1c7b      	adds	r3, r7, #1
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	b298      	uxth	r0, r3
 800692e:	000c      	movs	r4, r1
 8006930:	187b      	adds	r3, r7, r1
 8006932:	881a      	ldrh	r2, [r3, #0]
 8006934:	1d3b      	adds	r3, r7, #4
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	18d3      	adds	r3, r2, r3
 800693a:	b29a      	uxth	r2, r3
 800693c:	1c7b      	adds	r3, r7, #1
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	b299      	uxth	r1, r3
 8006946:	1cbb      	adds	r3, r7, #2
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	001a      	movs	r2, r3
 800694c:	f7ff fe60 	bl	8006610 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8006950:	193b      	adds	r3, r7, r4
 8006952:	2200      	movs	r2, #0
 8006954:	5e9b      	ldrsh	r3, [r3, r2]
 8006956:	b29b      	uxth	r3, r3
 8006958:	3301      	adds	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	193b      	adds	r3, r7, r4
 800695e:	801a      	strh	r2, [r3, #0]
 8006960:	230c      	movs	r3, #12
 8006962:	18fb      	adds	r3, r7, r3
 8006964:	2200      	movs	r2, #0
 8006966:	5e9a      	ldrsh	r2, [r3, r2]
 8006968:	1c7b      	adds	r3, r7, #1
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	3b01      	subs	r3, #1
 8006970:	429a      	cmp	r2, r3
 8006972:	dbbb      	blt.n	80068ec <Paint_DrawPoint+0x64>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8006974:	210e      	movs	r1, #14
 8006976:	187b      	adds	r3, r7, r1
 8006978:	2200      	movs	r2, #0
 800697a:	5e9b      	ldrsh	r3, [r3, r2]
 800697c:	b29b      	uxth	r3, r3
 800697e:	3301      	adds	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	187b      	adds	r3, r7, r1
 8006984:	801a      	strh	r2, [r3, #0]
 8006986:	230e      	movs	r3, #14
 8006988:	18fb      	adds	r3, r7, r3
 800698a:	2200      	movs	r2, #0
 800698c:	5e9a      	ldrsh	r2, [r3, r2]
 800698e:	1c7b      	adds	r3, r7, #1
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	3b01      	subs	r3, #1
 8006996:	429a      	cmp	r2, r3
 8006998:	dba3      	blt.n	80068e2 <Paint_DrawPoint+0x5a>
 800699a:	e043      	b.n	8006a24 <Paint_DrawPoint+0x19c>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800699c:	230e      	movs	r3, #14
 800699e:	18fb      	adds	r3, r7, r3
 80069a0:	2200      	movs	r2, #0
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e034      	b.n	8006a10 <Paint_DrawPoint+0x188>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80069a6:	230c      	movs	r3, #12
 80069a8:	18fb      	adds	r3, r7, r3
 80069aa:	2200      	movs	r2, #0
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	e01e      	b.n	80069ee <Paint_DrawPoint+0x166>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 80069b0:	230e      	movs	r3, #14
 80069b2:	18fb      	adds	r3, r7, r3
 80069b4:	881a      	ldrh	r2, [r3, #0]
 80069b6:	1dbb      	adds	r3, r7, #6
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	18d3      	adds	r3, r2, r3
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b298      	uxth	r0, r3
 80069c2:	240c      	movs	r4, #12
 80069c4:	193b      	adds	r3, r7, r4
 80069c6:	881a      	ldrh	r2, [r3, #0]
 80069c8:	1d3b      	adds	r3, r7, #4
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	18d3      	adds	r3, r2, r3
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b299      	uxth	r1, r3
 80069d4:	1cbb      	adds	r3, r7, #2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	001a      	movs	r2, r3
 80069da:	f7ff fe19 	bl	8006610 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80069de:	193b      	adds	r3, r7, r4
 80069e0:	2200      	movs	r2, #0
 80069e2:	5e9b      	ldrsh	r3, [r3, r2]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3301      	adds	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	193b      	adds	r3, r7, r4
 80069ec:	801a      	strh	r2, [r3, #0]
 80069ee:	230c      	movs	r3, #12
 80069f0:	18fb      	adds	r3, r7, r3
 80069f2:	2200      	movs	r2, #0
 80069f4:	5e9a      	ldrsh	r2, [r3, r2]
 80069f6:	1c7b      	adds	r3, r7, #1
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	dbd8      	blt.n	80069b0 <Paint_DrawPoint+0x128>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80069fe:	210e      	movs	r1, #14
 8006a00:	187b      	adds	r3, r7, r1
 8006a02:	2200      	movs	r2, #0
 8006a04:	5e9b      	ldrsh	r3, [r3, r2]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3301      	adds	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	187b      	adds	r3, r7, r1
 8006a0e:	801a      	strh	r2, [r3, #0]
 8006a10:	230e      	movs	r3, #14
 8006a12:	18fb      	adds	r3, r7, r3
 8006a14:	2200      	movs	r2, #0
 8006a16:	5e9a      	ldrsh	r2, [r3, r2]
 8006a18:	1c7b      	adds	r3, r7, #1
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	dbc2      	blt.n	80069a6 <Paint_DrawPoint+0x11e>
 8006a20:	e000      	b.n	8006a24 <Paint_DrawPoint+0x19c>
        return;
 8006a22:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
}
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b004      	add	sp, #16
 8006a28:	bdb0      	pop	{r4, r5, r7, pc}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	20000290 	.word	0x20000290

08006a30 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8006a30:	b5b0      	push	{r4, r5, r7, lr}
 8006a32:	b08c      	sub	sp, #48	; 0x30
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	0005      	movs	r5, r0
 8006a38:	000c      	movs	r4, r1
 8006a3a:	0010      	movs	r0, r2
 8006a3c:	0019      	movs	r1, r3
 8006a3e:	1dbb      	adds	r3, r7, #6
 8006a40:	1c2a      	adds	r2, r5, #0
 8006a42:	801a      	strh	r2, [r3, #0]
 8006a44:	1d3b      	adds	r3, r7, #4
 8006a46:	1c22      	adds	r2, r4, #0
 8006a48:	801a      	strh	r2, [r3, #0]
 8006a4a:	1cbb      	adds	r3, r7, #2
 8006a4c:	1c02      	adds	r2, r0, #0
 8006a4e:	801a      	strh	r2, [r3, #0]
 8006a50:	003b      	movs	r3, r7
 8006a52:	1c0a      	adds	r2, r1, #0
 8006a54:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8006a56:	4b66      	ldr	r3, [pc, #408]	; (8006bf0 <Paint_DrawLine+0x1c0>)
 8006a58:	889b      	ldrh	r3, [r3, #4]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	1dba      	adds	r2, r7, #6
 8006a5e:	8812      	ldrh	r2, [r2, #0]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d900      	bls.n	8006a66 <Paint_DrawLine+0x36>
 8006a64:	e0bb      	b.n	8006bde <Paint_DrawLine+0x1ae>
 8006a66:	4b62      	ldr	r3, [pc, #392]	; (8006bf0 <Paint_DrawLine+0x1c0>)
 8006a68:	88db      	ldrh	r3, [r3, #6]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	1d3a      	adds	r2, r7, #4
 8006a6e:	8812      	ldrh	r2, [r2, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d900      	bls.n	8006a76 <Paint_DrawLine+0x46>
 8006a74:	e0b3      	b.n	8006bde <Paint_DrawLine+0x1ae>
        Xend > Paint.Width || Yend > Paint.Height) {
 8006a76:	4b5e      	ldr	r3, [pc, #376]	; (8006bf0 <Paint_DrawLine+0x1c0>)
 8006a78:	889b      	ldrh	r3, [r3, #4]
 8006a7a:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8006a7c:	1cba      	adds	r2, r7, #2
 8006a7e:	8812      	ldrh	r2, [r2, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d900      	bls.n	8006a86 <Paint_DrawLine+0x56>
 8006a84:	e0ab      	b.n	8006bde <Paint_DrawLine+0x1ae>
        Xend > Paint.Width || Yend > Paint.Height) {
 8006a86:	4b5a      	ldr	r3, [pc, #360]	; (8006bf0 <Paint_DrawLine+0x1c0>)
 8006a88:	88db      	ldrh	r3, [r3, #6]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	003a      	movs	r2, r7
 8006a8e:	8812      	ldrh	r2, [r2, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d900      	bls.n	8006a96 <Paint_DrawLine+0x66>
 8006a94:	e0a3      	b.n	8006bde <Paint_DrawLine+0x1ae>
        return;
    }

    UWORD Xpoint = Xstart;
 8006a96:	2326      	movs	r3, #38	; 0x26
 8006a98:	18fb      	adds	r3, r7, r3
 8006a9a:	1dba      	adds	r2, r7, #6
 8006a9c:	8812      	ldrh	r2, [r2, #0]
 8006a9e:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 8006aa0:	2324      	movs	r3, #36	; 0x24
 8006aa2:	18fb      	adds	r3, r7, r3
 8006aa4:	1d3a      	adds	r2, r7, #4
 8006aa6:	8812      	ldrh	r2, [r2, #0]
 8006aa8:	801a      	strh	r2, [r3, #0]
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8006aaa:	1cbb      	adds	r3, r7, #2
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	1dbb      	adds	r3, r7, #6
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	17da      	asrs	r2, r3, #31
 8006ab6:	189b      	adds	r3, r3, r2
 8006ab8:	4053      	eors	r3, r2
 8006aba:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8006abc:	003b      	movs	r3, r7
 8006abe:	881a      	ldrh	r2, [r3, #0]
 8006ac0:	1d3b      	adds	r3, r7, #4
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	17da      	asrs	r2, r3, #31
 8006ac8:	189b      	adds	r3, r3, r2
 8006aca:	4053      	eors	r3, r2
 8006acc:	425b      	negs	r3, r3
 8006ace:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8006ad0:	1dba      	adds	r2, r7, #6
 8006ad2:	1cbb      	adds	r3, r7, #2
 8006ad4:	8812      	ldrh	r2, [r2, #0]
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d201      	bcs.n	8006ae0 <Paint_DrawLine+0xb0>
 8006adc:	2301      	movs	r3, #1
 8006ade:	e001      	b.n	8006ae4 <Paint_DrawLine+0xb4>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	425b      	negs	r3, r3
 8006ae4:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8006ae6:	1d3a      	adds	r2, r7, #4
 8006ae8:	003b      	movs	r3, r7
 8006aea:	8812      	ldrh	r2, [r2, #0]
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d201      	bcs.n	8006af6 <Paint_DrawLine+0xc6>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e001      	b.n	8006afa <Paint_DrawLine+0xca>
 8006af6:	2301      	movs	r3, #1
 8006af8:	425b      	negs	r3, r3
 8006afa:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	18d3      	adds	r3, r2, r3
 8006b02:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8006b04:	231f      	movs	r3, #31
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]

    for (;;) {
        Dotted_Len++;
 8006b0c:	251f      	movs	r5, #31
 8006b0e:	197b      	adds	r3, r7, r5
 8006b10:	781a      	ldrb	r2, [r3, #0]
 8006b12:	197b      	adds	r3, r7, r5
 8006b14:	3201      	adds	r2, #1
 8006b16:	701a      	strb	r2, [r3, #0]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8006b18:	2340      	movs	r3, #64	; 0x40
 8006b1a:	18fb      	adds	r3, r7, r3
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d11d      	bne.n	8006b5e <Paint_DrawLine+0x12e>
 8006b22:	197b      	adds	r3, r7, r5
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2103      	movs	r1, #3
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f7f9 fb71 	bl	8000210 <__aeabi_uidivmod>
 8006b2e:	000b      	movs	r3, r1
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d113      	bne.n	8006b5e <Paint_DrawLine+0x12e>
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8006b36:	233c      	movs	r3, #60	; 0x3c
 8006b38:	18fb      	adds	r3, r7, r3
 8006b3a:	781a      	ldrb	r2, [r3, #0]
 8006b3c:	4c2d      	ldr	r4, [pc, #180]	; (8006bf4 <Paint_DrawLine+0x1c4>)
 8006b3e:	2324      	movs	r3, #36	; 0x24
 8006b40:	18fb      	adds	r3, r7, r3
 8006b42:	8819      	ldrh	r1, [r3, #0]
 8006b44:	2326      	movs	r3, #38	; 0x26
 8006b46:	18fb      	adds	r3, r7, r3
 8006b48:	8818      	ldrh	r0, [r3, #0]
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	0013      	movs	r3, r2
 8006b50:	0022      	movs	r2, r4
 8006b52:	f7ff fe99 	bl	8006888 <Paint_DrawPoint>
            Dotted_Len = 0;
 8006b56:	197b      	adds	r3, r7, r5
 8006b58:	2200      	movs	r2, #0
 8006b5a:	701a      	strb	r2, [r3, #0]
 8006b5c:	e010      	b.n	8006b80 <Paint_DrawLine+0x150>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8006b5e:	233c      	movs	r3, #60	; 0x3c
 8006b60:	18fb      	adds	r3, r7, r3
 8006b62:	781c      	ldrb	r4, [r3, #0]
 8006b64:	2338      	movs	r3, #56	; 0x38
 8006b66:	18fb      	adds	r3, r7, r3
 8006b68:	881a      	ldrh	r2, [r3, #0]
 8006b6a:	2324      	movs	r3, #36	; 0x24
 8006b6c:	18fb      	adds	r3, r7, r3
 8006b6e:	8819      	ldrh	r1, [r3, #0]
 8006b70:	2326      	movs	r3, #38	; 0x26
 8006b72:	18fb      	adds	r3, r7, r3
 8006b74:	8818      	ldrh	r0, [r3, #0]
 8006b76:	2301      	movs	r3, #1
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	0023      	movs	r3, r4
 8006b7c:	f7ff fe84 	bl	8006888 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	dc11      	bgt.n	8006bae <Paint_DrawLine+0x17e>
            if (Xpoint == Xend)
 8006b8a:	2026      	movs	r0, #38	; 0x26
 8006b8c:	183a      	adds	r2, r7, r0
 8006b8e:	1cbb      	adds	r3, r7, #2
 8006b90:	8812      	ldrh	r2, [r2, #0]
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d024      	beq.n	8006be2 <Paint_DrawLine+0x1b2>
                break;
            Esp += dy;
 8006b98:	6a3a      	ldr	r2, [r7, #32]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	18d3      	adds	r3, r2, r3
 8006b9e:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	b299      	uxth	r1, r3
 8006ba4:	183b      	adds	r3, r7, r0
 8006ba6:	183a      	adds	r2, r7, r0
 8006ba8:	8812      	ldrh	r2, [r2, #0]
 8006baa:	188a      	adds	r2, r1, r2
 8006bac:	801a      	strh	r2, [r3, #0]
        }
        if (2 * Esp <= dx) {
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	dba9      	blt.n	8006b0c <Paint_DrawLine+0xdc>
            if (Ypoint == Yend)
 8006bb8:	2024      	movs	r0, #36	; 0x24
 8006bba:	183a      	adds	r2, r7, r0
 8006bbc:	003b      	movs	r3, r7
 8006bbe:	8812      	ldrh	r2, [r2, #0]
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d00f      	beq.n	8006be6 <Paint_DrawLine+0x1b6>
                break;
            Esp += dx;
 8006bc6:	6a3a      	ldr	r2, [r7, #32]
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	18d3      	adds	r3, r2, r3
 8006bcc:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	b299      	uxth	r1, r3
 8006bd2:	183b      	adds	r3, r7, r0
 8006bd4:	183a      	adds	r2, r7, r0
 8006bd6:	8812      	ldrh	r2, [r2, #0]
 8006bd8:	188a      	adds	r2, r1, r2
 8006bda:	801a      	strh	r2, [r3, #0]
        Dotted_Len++;
 8006bdc:	e796      	b.n	8006b0c <Paint_DrawLine+0xdc>
        return;
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	e002      	b.n	8006be8 <Paint_DrawLine+0x1b8>
                break;
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	e000      	b.n	8006be8 <Paint_DrawLine+0x1b8>
                break;
 8006be6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8006be8:	46bd      	mov	sp, r7
 8006bea:	b00a      	add	sp, #40	; 0x28
 8006bec:	bdb0      	pop	{r4, r5, r7, pc}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	20000290 	.word	0x20000290
 8006bf4:	0000ffff 	.word	0x0000ffff

08006bf8 <Paint_DrawRectangle>:
    Color  ：The color of the Rectangular segment
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
 8006bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bfa:	b089      	sub	sp, #36	; 0x24
 8006bfc:	af04      	add	r7, sp, #16
 8006bfe:	0005      	movs	r5, r0
 8006c00:	000c      	movs	r4, r1
 8006c02:	0010      	movs	r0, r2
 8006c04:	0019      	movs	r1, r3
 8006c06:	1dbb      	adds	r3, r7, #6
 8006c08:	1c2a      	adds	r2, r5, #0
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	1d3b      	adds	r3, r7, #4
 8006c0e:	1c22      	adds	r2, r4, #0
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	1cbb      	adds	r3, r7, #2
 8006c14:	1c02      	adds	r2, r0, #0
 8006c16:	801a      	strh	r2, [r3, #0]
 8006c18:	003b      	movs	r3, r7
 8006c1a:	1c0a      	adds	r2, r1, #0
 8006c1c:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8006c1e:	4b5b      	ldr	r3, [pc, #364]	; (8006d8c <Paint_DrawRectangle+0x194>)
 8006c20:	889b      	ldrh	r3, [r3, #4]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	1dba      	adds	r2, r7, #6
 8006c26:	8812      	ldrh	r2, [r2, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d900      	bls.n	8006c2e <Paint_DrawRectangle+0x36>
 8006c2c:	e0a9      	b.n	8006d82 <Paint_DrawRectangle+0x18a>
 8006c2e:	4b57      	ldr	r3, [pc, #348]	; (8006d8c <Paint_DrawRectangle+0x194>)
 8006c30:	88db      	ldrh	r3, [r3, #6]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	1d3a      	adds	r2, r7, #4
 8006c36:	8812      	ldrh	r2, [r2, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d900      	bls.n	8006c3e <Paint_DrawRectangle+0x46>
 8006c3c:	e0a1      	b.n	8006d82 <Paint_DrawRectangle+0x18a>
        Xend > Paint.Width || Yend > Paint.Height) {
 8006c3e:	4b53      	ldr	r3, [pc, #332]	; (8006d8c <Paint_DrawRectangle+0x194>)
 8006c40:	889b      	ldrh	r3, [r3, #4]
 8006c42:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8006c44:	1cba      	adds	r2, r7, #2
 8006c46:	8812      	ldrh	r2, [r2, #0]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d900      	bls.n	8006c4e <Paint_DrawRectangle+0x56>
 8006c4c:	e099      	b.n	8006d82 <Paint_DrawRectangle+0x18a>
        Xend > Paint.Width || Yend > Paint.Height) {
 8006c4e:	4b4f      	ldr	r3, [pc, #316]	; (8006d8c <Paint_DrawRectangle+0x194>)
 8006c50:	88db      	ldrh	r3, [r3, #6]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	003a      	movs	r2, r7
 8006c56:	8812      	ldrh	r2, [r2, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d900      	bls.n	8006c5e <Paint_DrawRectangle+0x66>
 8006c5c:	e091      	b.n	8006d82 <Paint_DrawRectangle+0x18a>
        return;
    }

    if (Filled ) {
 8006c5e:	2328      	movs	r3, #40	; 0x28
 8006c60:	2208      	movs	r2, #8
 8006c62:	189b      	adds	r3, r3, r2
 8006c64:	19db      	adds	r3, r3, r7
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d02b      	beq.n	8006cc4 <Paint_DrawRectangle+0xcc>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8006c6c:	230e      	movs	r3, #14
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	1d3a      	adds	r2, r7, #4
 8006c72:	8812      	ldrh	r2, [r2, #0]
 8006c74:	801a      	strh	r2, [r3, #0]
 8006c76:	e01d      	b.n	8006cb4 <Paint_DrawRectangle+0xbc>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
 8006c78:	250e      	movs	r5, #14
 8006c7a:	197b      	adds	r3, r7, r5
 8006c7c:	881c      	ldrh	r4, [r3, #0]
 8006c7e:	1cbb      	adds	r3, r7, #2
 8006c80:	881a      	ldrh	r2, [r3, #0]
 8006c82:	197b      	adds	r3, r7, r5
 8006c84:	8819      	ldrh	r1, [r3, #0]
 8006c86:	1dbb      	adds	r3, r7, #6
 8006c88:	8818      	ldrh	r0, [r3, #0]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9302      	str	r3, [sp, #8]
 8006c8e:	2324      	movs	r3, #36	; 0x24
 8006c90:	2608      	movs	r6, #8
 8006c92:	199b      	adds	r3, r3, r6
 8006c94:	19db      	adds	r3, r3, r7
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	2320      	movs	r3, #32
 8006c9c:	199b      	adds	r3, r3, r6
 8006c9e:	19db      	adds	r3, r3, r7
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	0023      	movs	r3, r4
 8006ca6:	f7ff fec3 	bl	8006a30 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8006caa:	197b      	adds	r3, r7, r5
 8006cac:	881a      	ldrh	r2, [r3, #0]
 8006cae:	197b      	adds	r3, r7, r5
 8006cb0:	3201      	adds	r2, #1
 8006cb2:	801a      	strh	r2, [r3, #0]
 8006cb4:	230e      	movs	r3, #14
 8006cb6:	18fa      	adds	r2, r7, r3
 8006cb8:	003b      	movs	r3, r7
 8006cba:	8812      	ldrh	r2, [r2, #0]
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d3da      	bcc.n	8006c78 <Paint_DrawRectangle+0x80>
 8006cc2:	e05f      	b.n	8006d84 <Paint_DrawRectangle+0x18c>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8006cc4:	1d3b      	adds	r3, r7, #4
 8006cc6:	881c      	ldrh	r4, [r3, #0]
 8006cc8:	1cbb      	adds	r3, r7, #2
 8006cca:	881a      	ldrh	r2, [r3, #0]
 8006ccc:	1d3b      	adds	r3, r7, #4
 8006cce:	8819      	ldrh	r1, [r3, #0]
 8006cd0:	1dbb      	adds	r3, r7, #6
 8006cd2:	8818      	ldrh	r0, [r3, #0]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9302      	str	r3, [sp, #8]
 8006cd8:	2524      	movs	r5, #36	; 0x24
 8006cda:	2308      	movs	r3, #8
 8006cdc:	18ee      	adds	r6, r5, r3
 8006cde:	19f3      	adds	r3, r6, r7
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	2620      	movs	r6, #32
 8006ce6:	2308      	movs	r3, #8
 8006ce8:	18f3      	adds	r3, r6, r3
 8006cea:	19db      	adds	r3, r3, r7
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	0023      	movs	r3, r4
 8006cf2:	f7ff fe9d 	bl	8006a30 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 8006cf6:	003b      	movs	r3, r7
 8006cf8:	881c      	ldrh	r4, [r3, #0]
 8006cfa:	1dbb      	adds	r3, r7, #6
 8006cfc:	881a      	ldrh	r2, [r3, #0]
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	8819      	ldrh	r1, [r3, #0]
 8006d02:	1dbb      	adds	r3, r7, #6
 8006d04:	8818      	ldrh	r0, [r3, #0]
 8006d06:	2300      	movs	r3, #0
 8006d08:	9302      	str	r3, [sp, #8]
 8006d0a:	2308      	movs	r3, #8
 8006d0c:	18eb      	adds	r3, r5, r3
 8006d0e:	19db      	adds	r3, r3, r7
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	9301      	str	r3, [sp, #4]
 8006d14:	2308      	movs	r3, #8
 8006d16:	18f3      	adds	r3, r6, r3
 8006d18:	19db      	adds	r3, r3, r7
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	0023      	movs	r3, r4
 8006d20:	f7ff fe86 	bl	8006a30 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8006d24:	1d3b      	adds	r3, r7, #4
 8006d26:	881c      	ldrh	r4, [r3, #0]
 8006d28:	1cbb      	adds	r3, r7, #2
 8006d2a:	881a      	ldrh	r2, [r3, #0]
 8006d2c:	003b      	movs	r3, r7
 8006d2e:	8819      	ldrh	r1, [r3, #0]
 8006d30:	1cbb      	adds	r3, r7, #2
 8006d32:	8818      	ldrh	r0, [r3, #0]
 8006d34:	2300      	movs	r3, #0
 8006d36:	9302      	str	r3, [sp, #8]
 8006d38:	2308      	movs	r3, #8
 8006d3a:	18eb      	adds	r3, r5, r3
 8006d3c:	19db      	adds	r3, r3, r7
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	9301      	str	r3, [sp, #4]
 8006d42:	2308      	movs	r3, #8
 8006d44:	18f3      	adds	r3, r6, r3
 8006d46:	19db      	adds	r3, r3, r7
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	0023      	movs	r3, r4
 8006d4e:	f7ff fe6f 	bl	8006a30 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 8006d52:	003b      	movs	r3, r7
 8006d54:	881c      	ldrh	r4, [r3, #0]
 8006d56:	1dbb      	adds	r3, r7, #6
 8006d58:	881a      	ldrh	r2, [r3, #0]
 8006d5a:	003b      	movs	r3, r7
 8006d5c:	8819      	ldrh	r1, [r3, #0]
 8006d5e:	1cbb      	adds	r3, r7, #2
 8006d60:	8818      	ldrh	r0, [r3, #0]
 8006d62:	2300      	movs	r3, #0
 8006d64:	9302      	str	r3, [sp, #8]
 8006d66:	2308      	movs	r3, #8
 8006d68:	18ed      	adds	r5, r5, r3
 8006d6a:	19eb      	adds	r3, r5, r7
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	2308      	movs	r3, #8
 8006d72:	18f3      	adds	r3, r6, r3
 8006d74:	19db      	adds	r3, r3, r7
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	0023      	movs	r3, r4
 8006d7c:	f7ff fe58 	bl	8006a30 <Paint_DrawLine>
 8006d80:	e000      	b.n	8006d84 <Paint_DrawRectangle+0x18c>
        return;
 8006d82:	46c0      	nop			; (mov r8, r8)
    }
}
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b005      	add	sp, #20
 8006d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d8a:	46c0      	nop			; (mov r8, r8)
 8006d8c:	20000290 	.word	0x20000290

08006d90 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8006d90:	b5b0      	push	{r4, r5, r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	0004      	movs	r4, r0
 8006d98:	0008      	movs	r0, r1
 8006d9a:	0011      	movs	r1, r2
 8006d9c:	607b      	str	r3, [r7, #4]
 8006d9e:	250e      	movs	r5, #14
 8006da0:	197b      	adds	r3, r7, r5
 8006da2:	1c22      	adds	r2, r4, #0
 8006da4:	801a      	strh	r2, [r3, #0]
 8006da6:	240c      	movs	r4, #12
 8006da8:	193b      	adds	r3, r7, r4
 8006daa:	1c02      	adds	r2, r0, #0
 8006dac:	801a      	strh	r2, [r3, #0]
 8006dae:	200b      	movs	r0, #11
 8006db0:	183b      	adds	r3, r7, r0
 8006db2:	1c0a      	adds	r2, r1, #0
 8006db4:	701a      	strb	r2, [r3, #0]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8006db6:	4b66      	ldr	r3, [pc, #408]	; (8006f50 <Paint_DrawChar+0x1c0>)
 8006db8:	889b      	ldrh	r3, [r3, #4]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	197a      	adds	r2, r7, r5
 8006dbe:	8812      	ldrh	r2, [r2, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d900      	bls.n	8006dc6 <Paint_DrawChar+0x36>
 8006dc4:	e0c0      	b.n	8006f48 <Paint_DrawChar+0x1b8>
 8006dc6:	4b62      	ldr	r3, [pc, #392]	; (8006f50 <Paint_DrawChar+0x1c0>)
 8006dc8:	88db      	ldrh	r3, [r3, #6]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	193a      	adds	r2, r7, r4
 8006dce:	8812      	ldrh	r2, [r2, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d900      	bls.n	8006dd6 <Paint_DrawChar+0x46>
 8006dd4:	e0b8      	b.n	8006f48 <Paint_DrawChar+0x1b8>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8006dd6:	183b      	adds	r3, r7, r0
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	3b20      	subs	r3, #32
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	88d2      	ldrh	r2, [r2, #6]
 8006de0:	4353      	muls	r3, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	8892      	ldrh	r2, [r2, #4]
 8006de6:	08d2      	lsrs	r2, r2, #3
 8006de8:	b292      	uxth	r2, r2
 8006dea:	0010      	movs	r0, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	8892      	ldrh	r2, [r2, #4]
 8006df0:	2107      	movs	r1, #7
 8006df2:	400a      	ands	r2, r1
 8006df4:	b292      	uxth	r2, r2
 8006df6:	1e51      	subs	r1, r2, #1
 8006df8:	418a      	sbcs	r2, r1
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	1882      	adds	r2, r0, r2
 8006dfe:	4353      	muls	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	18d3      	adds	r3, r2, r3
 8006e0a:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8006e0c:	231e      	movs	r3, #30
 8006e0e:	18fb      	adds	r3, r7, r3
 8006e10:	2200      	movs	r2, #0
 8006e12:	801a      	strh	r2, [r3, #0]
 8006e14:	e08f      	b.n	8006f36 <Paint_DrawChar+0x1a6>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8006e16:	231c      	movs	r3, #28
 8006e18:	18fb      	adds	r3, r7, r3
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	e072      	b.n	8006f06 <Paint_DrawChar+0x176>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8006e20:	2330      	movs	r3, #48	; 0x30
 8006e22:	18fb      	adds	r3, r7, r3
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	4a4b      	ldr	r2, [pc, #300]	; (8006f54 <Paint_DrawChar+0x1c4>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d122      	bne.n	8006e72 <Paint_DrawChar+0xe2>
                if (*ptr & (0x80 >> (Column % 8)))
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	0019      	movs	r1, r3
 8006e32:	201c      	movs	r0, #28
 8006e34:	183b      	adds	r3, r7, r0
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	2207      	movs	r2, #7
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2280      	movs	r2, #128	; 0x80
 8006e3e:	411a      	asrs	r2, r3
 8006e40:	0013      	movs	r3, r2
 8006e42:	400b      	ands	r3, r1
 8006e44:	d04e      	beq.n	8006ee4 <Paint_DrawChar+0x154>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8006e46:	230e      	movs	r3, #14
 8006e48:	18fa      	adds	r2, r7, r3
 8006e4a:	183b      	adds	r3, r7, r0
 8006e4c:	8812      	ldrh	r2, [r2, #0]
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	18d3      	adds	r3, r2, r3
 8006e52:	b298      	uxth	r0, r3
 8006e54:	230c      	movs	r3, #12
 8006e56:	18fa      	adds	r2, r7, r3
 8006e58:	231e      	movs	r3, #30
 8006e5a:	18fb      	adds	r3, r7, r3
 8006e5c:	8812      	ldrh	r2, [r2, #0]
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	18d3      	adds	r3, r2, r3
 8006e62:	b299      	uxth	r1, r3
 8006e64:	2334      	movs	r3, #52	; 0x34
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	001a      	movs	r2, r3
 8006e6c:	f7ff fbd0 	bl	8006610 <Paint_SetPixel>
 8006e70:	e038      	b.n	8006ee4 <Paint_DrawChar+0x154>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	0019      	movs	r1, r3
 8006e78:	201c      	movs	r0, #28
 8006e7a:	183b      	adds	r3, r7, r0
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	2207      	movs	r2, #7
 8006e80:	4013      	ands	r3, r2
 8006e82:	2280      	movs	r2, #128	; 0x80
 8006e84:	411a      	asrs	r2, r3
 8006e86:	0013      	movs	r3, r2
 8006e88:	400b      	ands	r3, r1
 8006e8a:	d015      	beq.n	8006eb8 <Paint_DrawChar+0x128>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8006e8c:	230e      	movs	r3, #14
 8006e8e:	18fa      	adds	r2, r7, r3
 8006e90:	183b      	adds	r3, r7, r0
 8006e92:	8812      	ldrh	r2, [r2, #0]
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	18d3      	adds	r3, r2, r3
 8006e98:	b298      	uxth	r0, r3
 8006e9a:	230c      	movs	r3, #12
 8006e9c:	18fa      	adds	r2, r7, r3
 8006e9e:	231e      	movs	r3, #30
 8006ea0:	18fb      	adds	r3, r7, r3
 8006ea2:	8812      	ldrh	r2, [r2, #0]
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	18d3      	adds	r3, r2, r3
 8006ea8:	b299      	uxth	r1, r3
 8006eaa:	2334      	movs	r3, #52	; 0x34
 8006eac:	18fb      	adds	r3, r7, r3
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	001a      	movs	r2, r3
 8006eb2:	f7ff fbad 	bl	8006610 <Paint_SetPixel>
 8006eb6:	e015      	b.n	8006ee4 <Paint_DrawChar+0x154>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8006eb8:	230e      	movs	r3, #14
 8006eba:	18fa      	adds	r2, r7, r3
 8006ebc:	231c      	movs	r3, #28
 8006ebe:	18fb      	adds	r3, r7, r3
 8006ec0:	8812      	ldrh	r2, [r2, #0]
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	18d3      	adds	r3, r2, r3
 8006ec6:	b298      	uxth	r0, r3
 8006ec8:	230c      	movs	r3, #12
 8006eca:	18fa      	adds	r2, r7, r3
 8006ecc:	231e      	movs	r3, #30
 8006ece:	18fb      	adds	r3, r7, r3
 8006ed0:	8812      	ldrh	r2, [r2, #0]
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	18d3      	adds	r3, r2, r3
 8006ed6:	b299      	uxth	r1, r3
 8006ed8:	2330      	movs	r3, #48	; 0x30
 8006eda:	18fb      	adds	r3, r7, r3
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	001a      	movs	r2, r3
 8006ee0:	f7ff fb96 	bl	8006610 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8006ee4:	231c      	movs	r3, #28
 8006ee6:	18fb      	adds	r3, r7, r3
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	2207      	movs	r2, #7
 8006eec:	4013      	ands	r3, r2
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b07      	cmp	r3, #7
 8006ef2:	d102      	bne.n	8006efa <Paint_DrawChar+0x16a>
                ptr++;
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8006efa:	211c      	movs	r1, #28
 8006efc:	187b      	adds	r3, r7, r1
 8006efe:	881a      	ldrh	r2, [r3, #0]
 8006f00:	187b      	adds	r3, r7, r1
 8006f02:	3201      	adds	r2, #1
 8006f04:	801a      	strh	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	889b      	ldrh	r3, [r3, #4]
 8006f0a:	221c      	movs	r2, #28
 8006f0c:	18ba      	adds	r2, r7, r2
 8006f0e:	8812      	ldrh	r2, [r2, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d200      	bcs.n	8006f16 <Paint_DrawChar+0x186>
 8006f14:	e784      	b.n	8006e20 <Paint_DrawChar+0x90>
        }// Write a line
        if (Font->Width % 8 != 0)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	889b      	ldrh	r3, [r3, #4]
 8006f1a:	2207      	movs	r2, #7
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <Paint_DrawChar+0x19a>
            ptr++;
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	3301      	adds	r3, #1
 8006f28:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8006f2a:	211e      	movs	r1, #30
 8006f2c:	187b      	adds	r3, r7, r1
 8006f2e:	881a      	ldrh	r2, [r3, #0]
 8006f30:	187b      	adds	r3, r7, r1
 8006f32:	3201      	adds	r2, #1
 8006f34:	801a      	strh	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	88db      	ldrh	r3, [r3, #6]
 8006f3a:	221e      	movs	r2, #30
 8006f3c:	18ba      	adds	r2, r7, r2
 8006f3e:	8812      	ldrh	r2, [r2, #0]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d200      	bcs.n	8006f46 <Paint_DrawChar+0x1b6>
 8006f44:	e767      	b.n	8006e16 <Paint_DrawChar+0x86>
 8006f46:	e000      	b.n	8006f4a <Paint_DrawChar+0x1ba>
        return;
 8006f48:	46c0      	nop			; (mov r8, r8)
    }// Write all
}
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	b008      	add	sp, #32
 8006f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8006f50:	20000290 	.word	0x20000290
 8006f54:	0000ffff 	.word	0x0000ffff

08006f58 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8006f58:	b5b0      	push	{r4, r5, r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af02      	add	r7, sp, #8
 8006f5e:	60ba      	str	r2, [r7, #8]
 8006f60:	607b      	str	r3, [r7, #4]
 8006f62:	240e      	movs	r4, #14
 8006f64:	193b      	adds	r3, r7, r4
 8006f66:	1c02      	adds	r2, r0, #0
 8006f68:	801a      	strh	r2, [r3, #0]
 8006f6a:	200c      	movs	r0, #12
 8006f6c:	183b      	adds	r3, r7, r0
 8006f6e:	1c0a      	adds	r2, r1, #0
 8006f70:	801a      	strh	r2, [r3, #0]
    UWORD Xpoint = Xstart;
 8006f72:	2316      	movs	r3, #22
 8006f74:	18fb      	adds	r3, r7, r3
 8006f76:	0021      	movs	r1, r4
 8006f78:	187a      	adds	r2, r7, r1
 8006f7a:	8812      	ldrh	r2, [r2, #0]
 8006f7c:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 8006f7e:	2314      	movs	r3, #20
 8006f80:	18fb      	adds	r3, r7, r3
 8006f82:	183a      	adds	r2, r7, r0
 8006f84:	8812      	ldrh	r2, [r2, #0]
 8006f86:	801a      	strh	r2, [r3, #0]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8006f88:	4b31      	ldr	r3, [pc, #196]	; (8007050 <Paint_DrawString_EN+0xf8>)
 8006f8a:	889b      	ldrh	r3, [r3, #4]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	187a      	adds	r2, r7, r1
 8006f90:	8812      	ldrh	r2, [r2, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d858      	bhi.n	8007048 <Paint_DrawString_EN+0xf0>
 8006f96:	4b2e      	ldr	r3, [pc, #184]	; (8007050 <Paint_DrawString_EN+0xf8>)
 8006f98:	88db      	ldrh	r3, [r3, #6]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	183a      	adds	r2, r7, r0
 8006f9e:	8812      	ldrh	r2, [r2, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d851      	bhi.n	8007048 <Paint_DrawString_EN+0xf0>
        return;
    }

    while (* pString != '\0') {
 8006fa4:	e04b      	b.n	800703e <Paint_DrawString_EN+0xe6>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8006fa6:	2116      	movs	r1, #22
 8006fa8:	187b      	adds	r3, r7, r1
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	8892      	ldrh	r2, [r2, #4]
 8006fb0:	189b      	adds	r3, r3, r2
 8006fb2:	4a27      	ldr	r2, [pc, #156]	; (8007050 <Paint_DrawString_EN+0xf8>)
 8006fb4:	8892      	ldrh	r2, [r2, #4]
 8006fb6:	b292      	uxth	r2, r2
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	dd0c      	ble.n	8006fd6 <Paint_DrawString_EN+0x7e>
            Xpoint = Xstart;
 8006fbc:	187b      	adds	r3, r7, r1
 8006fbe:	220e      	movs	r2, #14
 8006fc0:	18ba      	adds	r2, r7, r2
 8006fc2:	8812      	ldrh	r2, [r2, #0]
 8006fc4:	801a      	strh	r2, [r3, #0]
            Ypoint += Font->Height;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	88d9      	ldrh	r1, [r3, #6]
 8006fca:	2214      	movs	r2, #20
 8006fcc:	18bb      	adds	r3, r7, r2
 8006fce:	18ba      	adds	r2, r7, r2
 8006fd0:	8812      	ldrh	r2, [r2, #0]
 8006fd2:	188a      	adds	r2, r1, r2
 8006fd4:	801a      	strh	r2, [r3, #0]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8006fd6:	2114      	movs	r1, #20
 8006fd8:	187b      	adds	r3, r7, r1
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	88d2      	ldrh	r2, [r2, #6]
 8006fe0:	189b      	adds	r3, r3, r2
 8006fe2:	4a1b      	ldr	r2, [pc, #108]	; (8007050 <Paint_DrawString_EN+0xf8>)
 8006fe4:	88d2      	ldrh	r2, [r2, #6]
 8006fe6:	b292      	uxth	r2, r2
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	dd0a      	ble.n	8007002 <Paint_DrawString_EN+0xaa>
            Xpoint = Xstart;
 8006fec:	2316      	movs	r3, #22
 8006fee:	18fb      	adds	r3, r7, r3
 8006ff0:	220e      	movs	r2, #14
 8006ff2:	18ba      	adds	r2, r7, r2
 8006ff4:	8812      	ldrh	r2, [r2, #0]
 8006ff6:	801a      	strh	r2, [r3, #0]
            Ypoint = Ystart;
 8006ff8:	187b      	adds	r3, r7, r1
 8006ffa:	220c      	movs	r2, #12
 8006ffc:	18ba      	adds	r2, r7, r2
 8006ffe:	8812      	ldrh	r2, [r2, #0]
 8007000:	801a      	strh	r2, [r3, #0]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	781a      	ldrb	r2, [r3, #0]
 8007006:	687c      	ldr	r4, [r7, #4]
 8007008:	2314      	movs	r3, #20
 800700a:	18fb      	adds	r3, r7, r3
 800700c:	8819      	ldrh	r1, [r3, #0]
 800700e:	2516      	movs	r5, #22
 8007010:	197b      	adds	r3, r7, r5
 8007012:	8818      	ldrh	r0, [r3, #0]
 8007014:	232c      	movs	r3, #44	; 0x2c
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	2328      	movs	r3, #40	; 0x28
 800701e:	18fb      	adds	r3, r7, r3
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	0023      	movs	r3, r4
 8007026:	f7ff feb3 	bl	8006d90 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	3301      	adds	r3, #1
 800702e:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	8899      	ldrh	r1, [r3, #4]
 8007034:	197b      	adds	r3, r7, r5
 8007036:	197a      	adds	r2, r7, r5
 8007038:	8812      	ldrh	r2, [r2, #0]
 800703a:	188a      	adds	r2, r1, r2
 800703c:	801a      	strh	r2, [r3, #0]
    while (* pString != '\0') {
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1af      	bne.n	8006fa6 <Paint_DrawString_EN+0x4e>
 8007046:	e000      	b.n	800704a <Paint_DrawString_EN+0xf2>
        return;
 8007048:	46c0      	nop			; (mov r8, r8)
    }
}
 800704a:	46bd      	mov	sp, r7
 800704c:	b006      	add	sp, #24
 800704e:	bdb0      	pop	{r4, r5, r7, pc}
 8007050:	20000290 	.word	0x20000290

08007054 <Paint_DrawNum>:
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8007054:	b5b0      	push	{r4, r5, r7, lr}
 8007056:	4c5f      	ldr	r4, [pc, #380]	; (80071d4 <Paint_DrawNum+0x180>)
 8007058:	44a5      	add	sp, r4
 800705a:	af02      	add	r7, sp, #8
 800705c:	60ba      	str	r2, [r7, #8]
 800705e:	607b      	str	r3, [r7, #4]
 8007060:	4b5d      	ldr	r3, [pc, #372]	; (80071d8 <Paint_DrawNum+0x184>)
 8007062:	2486      	movs	r4, #134	; 0x86
 8007064:	00a4      	lsls	r4, r4, #2
 8007066:	191b      	adds	r3, r3, r4
 8007068:	19db      	adds	r3, r3, r7
 800706a:	1c02      	adds	r2, r0, #0
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	4b5b      	ldr	r3, [pc, #364]	; (80071dc <Paint_DrawNum+0x188>)
 8007070:	0020      	movs	r0, r4
 8007072:	181b      	adds	r3, r3, r0
 8007074:	19db      	adds	r3, r3, r7
 8007076:	1c0a      	adds	r2, r1, #0
 8007078:	801a      	strh	r2, [r3, #0]
    int16_t Num_Bit = 0, Str_Bit = 0;
 800707a:	4b59      	ldr	r3, [pc, #356]	; (80071e0 <Paint_DrawNum+0x18c>)
 800707c:	18fb      	adds	r3, r7, r3
 800707e:	2200      	movs	r2, #0
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	2385      	movs	r3, #133	; 0x85
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	18fb      	adds	r3, r7, r3
 8007088:	2200      	movs	r2, #0
 800708a:	801a      	strh	r2, [r3, #0]
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 800708c:	4b55      	ldr	r3, [pc, #340]	; (80071e4 <Paint_DrawNum+0x190>)
 800708e:	0004      	movs	r4, r0
 8007090:	191b      	adds	r3, r3, r4
 8007092:	19db      	adds	r3, r3, r7
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	3304      	adds	r3, #4
 800709a:	22fb      	movs	r2, #251	; 0xfb
 800709c:	2100      	movs	r1, #0
 800709e:	0018      	movs	r0, r3
 80070a0:	f000 fc78 	bl	8007994 <memset>
 80070a4:	4b50      	ldr	r3, [pc, #320]	; (80071e8 <Paint_DrawNum+0x194>)
 80070a6:	191b      	adds	r3, r3, r4
 80070a8:	19db      	adds	r3, r3, r7
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	3304      	adds	r3, #4
 80070b0:	22fb      	movs	r2, #251	; 0xfb
 80070b2:	2100      	movs	r1, #0
 80070b4:	0018      	movs	r0, r3
 80070b6:	f000 fc6d 	bl	8007994 <memset>
    uint8_t *pStr = Str_Array;
 80070ba:	2388      	movs	r3, #136	; 0x88
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	18fb      	adds	r3, r7, r3
 80070c0:	2284      	movs	r2, #132	; 0x84
 80070c2:	0092      	lsls	r2, r2, #2
 80070c4:	18ba      	adds	r2, r7, r2
 80070c6:	6013      	str	r3, [r2, #0]

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80070c8:	4b48      	ldr	r3, [pc, #288]	; (80071ec <Paint_DrawNum+0x198>)
 80070ca:	889b      	ldrh	r3, [r3, #4]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	4a42      	ldr	r2, [pc, #264]	; (80071d8 <Paint_DrawNum+0x184>)
 80070d0:	1912      	adds	r2, r2, r4
 80070d2:	19d2      	adds	r2, r2, r7
 80070d4:	8812      	ldrh	r2, [r2, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d900      	bls.n	80070dc <Paint_DrawNum+0x88>
 80070da:	e075      	b.n	80071c8 <Paint_DrawNum+0x174>
 80070dc:	4b43      	ldr	r3, [pc, #268]	; (80071ec <Paint_DrawNum+0x198>)
 80070de:	88db      	ldrh	r3, [r3, #6]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	4a3e      	ldr	r2, [pc, #248]	; (80071dc <Paint_DrawNum+0x188>)
 80070e4:	1912      	adds	r2, r2, r4
 80070e6:	19d2      	adds	r2, r2, r7
 80070e8:	8812      	ldrh	r2, [r2, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d86c      	bhi.n	80071c8 <Paint_DrawNum+0x174>
        return;
    }

    //Converts a number to a string
     do{
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	210a      	movs	r1, #10
 80070f2:	0018      	movs	r0, r3
 80070f4:	f7f9 f976 	bl	80003e4 <__aeabi_idivmod>
 80070f8:	000b      	movs	r3, r1
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	4838      	ldr	r0, [pc, #224]	; (80071e0 <Paint_DrawNum+0x18c>)
 80070fe:	183b      	adds	r3, r7, r0
 8007100:	2100      	movs	r1, #0
 8007102:	5e5b      	ldrsh	r3, [r3, r1]
 8007104:	3230      	adds	r2, #48	; 0x30
 8007106:	b2d1      	uxtb	r1, r2
 8007108:	4a37      	ldr	r2, [pc, #220]	; (80071e8 <Paint_DrawNum+0x194>)
 800710a:	2486      	movs	r4, #134	; 0x86
 800710c:	00a4      	lsls	r4, r4, #2
 800710e:	1912      	adds	r2, r2, r4
 8007110:	19d2      	adds	r2, r2, r7
 8007112:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 8007114:	183b      	adds	r3, r7, r0
 8007116:	2200      	movs	r2, #0
 8007118:	5e9b      	ldrsh	r3, [r3, r2]
 800711a:	b29b      	uxth	r3, r3
 800711c:	3301      	adds	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	183b      	adds	r3, r7, r0
 8007122:	801a      	strh	r2, [r3, #0]
        Nummber /= 10;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	210a      	movs	r1, #10
 8007128:	0018      	movs	r0, r3
 800712a:	f7f9 f875 	bl	8000218 <__divsi3>
 800712e:	0003      	movs	r3, r0
 8007130:	60bb      	str	r3, [r7, #8]
    }while (Nummber);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1da      	bne.n	80070ee <Paint_DrawNum+0x9a>

    //The string is inverted
    while (Num_Bit > 0) {
 8007138:	e023      	b.n	8007182 <Paint_DrawNum+0x12e>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 800713a:	4829      	ldr	r0, [pc, #164]	; (80071e0 <Paint_DrawNum+0x18c>)
 800713c:	183b      	adds	r3, r7, r0
 800713e:	2200      	movs	r2, #0
 8007140:	5e9b      	ldrsh	r3, [r3, r2]
 8007142:	1e5a      	subs	r2, r3, #1
 8007144:	2485      	movs	r4, #133	; 0x85
 8007146:	00a4      	lsls	r4, r4, #2
 8007148:	193b      	adds	r3, r7, r4
 800714a:	2100      	movs	r1, #0
 800714c:	5e5b      	ldrsh	r3, [r3, r1]
 800714e:	4926      	ldr	r1, [pc, #152]	; (80071e8 <Paint_DrawNum+0x194>)
 8007150:	2586      	movs	r5, #134	; 0x86
 8007152:	00ad      	lsls	r5, r5, #2
 8007154:	1949      	adds	r1, r1, r5
 8007156:	19c9      	adds	r1, r1, r7
 8007158:	5c89      	ldrb	r1, [r1, r2]
 800715a:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <Paint_DrawNum+0x190>)
 800715c:	1952      	adds	r2, r2, r5
 800715e:	19d2      	adds	r2, r2, r7
 8007160:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 8007162:	193b      	adds	r3, r7, r4
 8007164:	2200      	movs	r2, #0
 8007166:	5e9b      	ldrsh	r3, [r3, r2]
 8007168:	b29b      	uxth	r3, r3
 800716a:	3301      	adds	r3, #1
 800716c:	b29a      	uxth	r2, r3
 800716e:	193b      	adds	r3, r7, r4
 8007170:	801a      	strh	r2, [r3, #0]
        Num_Bit --;
 8007172:	183b      	adds	r3, r7, r0
 8007174:	2200      	movs	r2, #0
 8007176:	5e9b      	ldrsh	r3, [r3, r2]
 8007178:	b29b      	uxth	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	b29a      	uxth	r2, r3
 800717e:	183b      	adds	r3, r7, r0
 8007180:	801a      	strh	r2, [r3, #0]
    while (Num_Bit > 0) {
 8007182:	4b17      	ldr	r3, [pc, #92]	; (80071e0 <Paint_DrawNum+0x18c>)
 8007184:	18fb      	adds	r3, r7, r3
 8007186:	2200      	movs	r2, #0
 8007188:	5e9b      	ldrsh	r3, [r3, r2]
 800718a:	2b00      	cmp	r3, #0
 800718c:	dcd5      	bgt.n	800713a <Paint_DrawNum+0xe6>
    }
    
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 800718e:	687c      	ldr	r4, [r7, #4]
 8007190:	2384      	movs	r3, #132	; 0x84
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	18fb      	adds	r3, r7, r3
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	4b10      	ldr	r3, [pc, #64]	; (80071dc <Paint_DrawNum+0x188>)
 800719a:	2086      	movs	r0, #134	; 0x86
 800719c:	0080      	lsls	r0, r0, #2
 800719e:	181b      	adds	r3, r3, r0
 80071a0:	19db      	adds	r3, r3, r7
 80071a2:	8819      	ldrh	r1, [r3, #0]
 80071a4:	4b0c      	ldr	r3, [pc, #48]	; (80071d8 <Paint_DrawNum+0x184>)
 80071a6:	181b      	adds	r3, r3, r0
 80071a8:	19db      	adds	r3, r3, r7
 80071aa:	8818      	ldrh	r0, [r3, #0]
 80071ac:	238b      	movs	r3, #139	; 0x8b
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	18fb      	adds	r3, r7, r3
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	238a      	movs	r3, #138	; 0x8a
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	18fb      	adds	r3, r7, r3
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	0023      	movs	r3, r4
 80071c2:	f7ff fec9 	bl	8006f58 <Paint_DrawString_EN>
 80071c6:	e000      	b.n	80071ca <Paint_DrawNum+0x176>
        return;
 80071c8:	46c0      	nop			; (mov r8, r8)
}
 80071ca:	46bd      	mov	sp, r7
 80071cc:	2386      	movs	r3, #134	; 0x86
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	449d      	add	sp, r3
 80071d2:	bdb0      	pop	{r4, r5, r7, pc}
 80071d4:	fffffde0 	.word	0xfffffde0
 80071d8:	fffffdf6 	.word	0xfffffdf6
 80071dc:	fffffdf4 	.word	0xfffffdf4
 80071e0:	00000216 	.word	0x00000216
 80071e4:	fffffef8 	.word	0xfffffef8
 80071e8:	fffffdf8 	.word	0xfffffdf8
 80071ec:	20000290 	.word	0x20000290

080071f0 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
	LCD_1IN28_CS_0;
 80071f4:	2380      	movs	r3, #128	; 0x80
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	480f      	ldr	r0, [pc, #60]	; (8007238 <LCD_1IN28_Reset+0x48>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	0019      	movs	r1, r3
 80071fe:	f7fb f972 	bl	80024e6 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8007202:	2064      	movs	r0, #100	; 0x64
 8007204:	f7fa f8c2 	bl	800138c <HAL_Delay>
    LCD_1IN28_RST_0;
 8007208:	23a0      	movs	r3, #160	; 0xa0
 800720a:	05db      	lsls	r3, r3, #23
 800720c:	2200      	movs	r2, #0
 800720e:	2108      	movs	r1, #8
 8007210:	0018      	movs	r0, r3
 8007212:	f7fb f968 	bl	80024e6 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8007216:	2064      	movs	r0, #100	; 0x64
 8007218:	f7fa f8b8 	bl	800138c <HAL_Delay>
    LCD_1IN28_RST_1;
 800721c:	23a0      	movs	r3, #160	; 0xa0
 800721e:	05db      	lsls	r3, r3, #23
 8007220:	2201      	movs	r2, #1
 8007222:	2108      	movs	r1, #8
 8007224:	0018      	movs	r0, r3
 8007226:	f7fb f95e 	bl	80024e6 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800722a:	2064      	movs	r0, #100	; 0x64
 800722c:	f7fa f8ae 	bl	800138c <HAL_Delay>
}
 8007230:	46c0      	nop			; (mov r8, r8)
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	46c0      	nop			; (mov r8, r8)
 8007238:	50000400 	.word	0x50000400

0800723c <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	0002      	movs	r2, r0
 8007244:	1dfb      	adds	r3, r7, #7
 8007246:	701a      	strb	r2, [r3, #0]
    LCD_1IN28_CS_0;
 8007248:	2380      	movs	r3, #128	; 0x80
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	480d      	ldr	r0, [pc, #52]	; (8007284 <LCD_1IN28_SendCommand+0x48>)
 800724e:	2200      	movs	r2, #0
 8007250:	0019      	movs	r1, r3
 8007252:	f7fb f948 	bl	80024e6 <HAL_GPIO_WritePin>
    LCD_1IN28_DC_0;
 8007256:	2380      	movs	r3, #128	; 0x80
 8007258:	021b      	lsls	r3, r3, #8
 800725a:	480b      	ldr	r0, [pc, #44]	; (8007288 <LCD_1IN28_SendCommand+0x4c>)
 800725c:	2200      	movs	r2, #0
 800725e:	0019      	movs	r1, r3
 8007260:	f7fb f941 	bl	80024e6 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 8007264:	1dfb      	adds	r3, r7, #7
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	0018      	movs	r0, r3
 800726a:	f7ff f92d 	bl	80064c8 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 800726e:	2380      	movs	r3, #128	; 0x80
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4804      	ldr	r0, [pc, #16]	; (8007284 <LCD_1IN28_SendCommand+0x48>)
 8007274:	2201      	movs	r2, #1
 8007276:	0019      	movs	r1, r3
 8007278:	f7fb f935 	bl	80024e6 <HAL_GPIO_WritePin>
}
 800727c:	46c0      	nop			; (mov r8, r8)
 800727e:	46bd      	mov	sp, r7
 8007280:	b002      	add	sp, #8
 8007282:	bd80      	pop	{r7, pc}
 8007284:	50000400 	.word	0x50000400
 8007288:	50000800 	.word	0x50000800

0800728c <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	0002      	movs	r2, r0
 8007294:	1dfb      	adds	r3, r7, #7
 8007296:	701a      	strb	r2, [r3, #0]
    LCD_1IN28_CS_0;
 8007298:	2380      	movs	r3, #128	; 0x80
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	480d      	ldr	r0, [pc, #52]	; (80072d4 <LCD_1IN28_SendData_8Bit+0x48>)
 800729e:	2200      	movs	r2, #0
 80072a0:	0019      	movs	r1, r3
 80072a2:	f7fb f920 	bl	80024e6 <HAL_GPIO_WritePin>
    LCD_1IN28_DC_1;
 80072a6:	2380      	movs	r3, #128	; 0x80
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	480b      	ldr	r0, [pc, #44]	; (80072d8 <LCD_1IN28_SendData_8Bit+0x4c>)
 80072ac:	2201      	movs	r2, #1
 80072ae:	0019      	movs	r1, r3
 80072b0:	f7fb f919 	bl	80024e6 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 80072b4:	1dfb      	adds	r3, r7, #7
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	0018      	movs	r0, r3
 80072ba:	f7ff f905 	bl	80064c8 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 80072be:	2380      	movs	r3, #128	; 0x80
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4804      	ldr	r0, [pc, #16]	; (80072d4 <LCD_1IN28_SendData_8Bit+0x48>)
 80072c4:	2201      	movs	r2, #1
 80072c6:	0019      	movs	r1, r3
 80072c8:	f7fb f90d 	bl	80024e6 <HAL_GPIO_WritePin>
}
 80072cc:	46c0      	nop			; (mov r8, r8)
 80072ce:	46bd      	mov	sp, r7
 80072d0:	b002      	add	sp, #8
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	50000400 	.word	0x50000400
 80072d8:	50000800 	.word	0x50000800

080072dc <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	0002      	movs	r2, r0
 80072e4:	1dbb      	adds	r3, r7, #6
 80072e6:	801a      	strh	r2, [r3, #0]
    LCD_1IN28_CS_0;
 80072e8:	2380      	movs	r3, #128	; 0x80
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4812      	ldr	r0, [pc, #72]	; (8007338 <LCD_1IN28_SendData_16Bit+0x5c>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	0019      	movs	r1, r3
 80072f2:	f7fb f8f8 	bl	80024e6 <HAL_GPIO_WritePin>
    LCD_1IN28_DC_1;
 80072f6:	2380      	movs	r3, #128	; 0x80
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	4810      	ldr	r0, [pc, #64]	; (800733c <LCD_1IN28_SendData_16Bit+0x60>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	0019      	movs	r1, r3
 8007300:	f7fb f8f1 	bl	80024e6 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data >> 8);
 8007304:	1dbb      	adds	r3, r7, #6
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	0a1b      	lsrs	r3, r3, #8
 800730a:	b29b      	uxth	r3, r3
 800730c:	b2db      	uxtb	r3, r3
 800730e:	0018      	movs	r0, r3
 8007310:	f7ff f8da 	bl	80064c8 <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data);
 8007314:	1dbb      	adds	r3, r7, #6
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	0018      	movs	r0, r3
 800731c:	f7ff f8d4 	bl	80064c8 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8007320:	2380      	movs	r3, #128	; 0x80
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4804      	ldr	r0, [pc, #16]	; (8007338 <LCD_1IN28_SendData_16Bit+0x5c>)
 8007326:	2201      	movs	r2, #1
 8007328:	0019      	movs	r1, r3
 800732a:	f7fb f8dc 	bl	80024e6 <HAL_GPIO_WritePin>
}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	46bd      	mov	sp, r7
 8007332:	b002      	add	sp, #8
 8007334:	bd80      	pop	{r7, pc}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	50000400 	.word	0x50000400
 800733c:	50000800 	.word	0x50000800

08007340 <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	af00      	add	r7, sp, #0
  LCD_1IN28_SendCommand(0xEF);
 8007344:	20ef      	movs	r0, #239	; 0xef
 8007346:	f7ff ff79 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 800734a:	20eb      	movs	r0, #235	; 0xeb
 800734c:	f7ff ff76 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8007350:	2014      	movs	r0, #20
 8007352:	f7ff ff9b 	bl	800728c <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0xFE);			 
 8007356:	20fe      	movs	r0, #254	; 0xfe
 8007358:	f7ff ff70 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 800735c:	20ef      	movs	r0, #239	; 0xef
 800735e:	f7ff ff6d 	bl	800723c <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 8007362:	20eb      	movs	r0, #235	; 0xeb
 8007364:	f7ff ff6a 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8007368:	2014      	movs	r0, #20
 800736a:	f7ff ff8f 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 800736e:	2084      	movs	r0, #132	; 0x84
 8007370:	f7ff ff64 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 8007374:	2040      	movs	r0, #64	; 0x40
 8007376:	f7ff ff89 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 800737a:	2085      	movs	r0, #133	; 0x85
 800737c:	f7ff ff5e 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8007380:	20ff      	movs	r0, #255	; 0xff
 8007382:	f7ff ff83 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 8007386:	2086      	movs	r0, #134	; 0x86
 8007388:	f7ff ff58 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 800738c:	20ff      	movs	r0, #255	; 0xff
 800738e:	f7ff ff7d 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 8007392:	2087      	movs	r0, #135	; 0x87
 8007394:	f7ff ff52 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8007398:	20ff      	movs	r0, #255	; 0xff
 800739a:	f7ff ff77 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 800739e:	2088      	movs	r0, #136	; 0x88
 80073a0:	f7ff ff4c 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 80073a4:	200a      	movs	r0, #10
 80073a6:	f7ff ff71 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 80073aa:	2089      	movs	r0, #137	; 0x89
 80073ac:	f7ff ff46 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 80073b0:	2021      	movs	r0, #33	; 0x21
 80073b2:	f7ff ff6b 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 80073b6:	208a      	movs	r0, #138	; 0x8a
 80073b8:	f7ff ff40 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 80073bc:	2000      	movs	r0, #0
 80073be:	f7ff ff65 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 80073c2:	208b      	movs	r0, #139	; 0x8b
 80073c4:	f7ff ff3a 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 80073c8:	2080      	movs	r0, #128	; 0x80
 80073ca:	f7ff ff5f 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 80073ce:	208c      	movs	r0, #140	; 0x8c
 80073d0:	f7ff ff34 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 80073d4:	2001      	movs	r0, #1
 80073d6:	f7ff ff59 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 80073da:	208d      	movs	r0, #141	; 0x8d
 80073dc:	f7ff ff2e 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 80073e0:	2001      	movs	r0, #1
 80073e2:	f7ff ff53 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 80073e6:	208e      	movs	r0, #142	; 0x8e
 80073e8:	f7ff ff28 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80073ec:	20ff      	movs	r0, #255	; 0xff
 80073ee:	f7ff ff4d 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 80073f2:	208f      	movs	r0, #143	; 0x8f
 80073f4:	f7ff ff22 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80073f8:	20ff      	movs	r0, #255	; 0xff
 80073fa:	f7ff ff47 	bl	800728c <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 80073fe:	20b6      	movs	r0, #182	; 0xb6
 8007400:	f7ff ff1c 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8007404:	2000      	movs	r0, #0
 8007406:	f7ff ff41 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 800740a:	2020      	movs	r0, #32
 800740c:	f7ff ff3e 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 8007410:	2036      	movs	r0, #54	; 0x36
 8007412:	f7ff ff13 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 8007416:	2008      	movs	r0, #8
 8007418:	f7ff ff38 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 800741c:	203a      	movs	r0, #58	; 0x3a
 800741e:	f7ff ff0d 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 8007422:	2005      	movs	r0, #5
 8007424:	f7ff ff32 	bl	800728c <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 8007428:	2090      	movs	r0, #144	; 0x90
 800742a:	f7ff ff07 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 800742e:	2008      	movs	r0, #8
 8007430:	f7ff ff2c 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8007434:	2008      	movs	r0, #8
 8007436:	f7ff ff29 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800743a:	2008      	movs	r0, #8
 800743c:	f7ff ff26 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 8007440:	2008      	movs	r0, #8
 8007442:	f7ff ff23 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 8007446:	20bd      	movs	r0, #189	; 0xbd
 8007448:	f7ff fef8 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 800744c:	2006      	movs	r0, #6
 800744e:	f7ff ff1d 	bl	800728c <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 8007452:	20bc      	movs	r0, #188	; 0xbc
 8007454:	f7ff fef2 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8007458:	2000      	movs	r0, #0
 800745a:	f7ff ff17 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 800745e:	20ff      	movs	r0, #255	; 0xff
 8007460:	f7ff feec 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8007464:	2060      	movs	r0, #96	; 0x60
 8007466:	f7ff ff11 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800746a:	2001      	movs	r0, #1
 800746c:	f7ff ff0e 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8007470:	2004      	movs	r0, #4
 8007472:	f7ff ff0b 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 8007476:	20c3      	movs	r0, #195	; 0xc3
 8007478:	f7ff fee0 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 800747c:	2013      	movs	r0, #19
 800747e:	f7ff ff05 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 8007482:	20c4      	movs	r0, #196	; 0xc4
 8007484:	f7ff feda 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8007488:	2013      	movs	r0, #19
 800748a:	f7ff feff 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 800748e:	20c9      	movs	r0, #201	; 0xc9
 8007490:	f7ff fed4 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8007494:	2022      	movs	r0, #34	; 0x22
 8007496:	f7ff fef9 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 800749a:	20be      	movs	r0, #190	; 0xbe
 800749c:	f7ff fece 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 80074a0:	2011      	movs	r0, #17
 80074a2:	f7ff fef3 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 80074a6:	20e1      	movs	r0, #225	; 0xe1
 80074a8:	f7ff fec8 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 80074ac:	2010      	movs	r0, #16
 80074ae:	f7ff feed 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 80074b2:	200e      	movs	r0, #14
 80074b4:	f7ff feea 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 80074b8:	20df      	movs	r0, #223	; 0xdf
 80074ba:	f7ff febf 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 80074be:	2021      	movs	r0, #33	; 0x21
 80074c0:	f7ff fee4 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 80074c4:	200c      	movs	r0, #12
 80074c6:	f7ff fee1 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 80074ca:	2002      	movs	r0, #2
 80074cc:	f7ff fede 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 80074d0:	20f0      	movs	r0, #240	; 0xf0
 80074d2:	f7ff feb3 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 80074d6:	2045      	movs	r0, #69	; 0x45
 80074d8:	f7ff fed8 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 80074dc:	2009      	movs	r0, #9
 80074de:	f7ff fed5 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80074e2:	2008      	movs	r0, #8
 80074e4:	f7ff fed2 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80074e8:	2008      	movs	r0, #8
 80074ea:	f7ff fecf 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 80074ee:	2026      	movs	r0, #38	; 0x26
 80074f0:	f7ff fecc 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 80074f4:	202a      	movs	r0, #42	; 0x2a
 80074f6:	f7ff fec9 	bl	800728c <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 80074fa:	20f1      	movs	r0, #241	; 0xf1
 80074fc:	f7ff fe9e 	bl	800723c <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8007500:	2043      	movs	r0, #67	; 0x43
 8007502:	f7ff fec3 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8007506:	2070      	movs	r0, #112	; 0x70
 8007508:	f7ff fec0 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 800750c:	2072      	movs	r0, #114	; 0x72
 800750e:	f7ff febd 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8007512:	2036      	movs	r0, #54	; 0x36
 8007514:	f7ff feba 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 8007518:	2037      	movs	r0, #55	; 0x37
 800751a:	f7ff feb7 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 800751e:	206f      	movs	r0, #111	; 0x6f
 8007520:	f7ff feb4 	bl	800728c <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8007524:	20f2      	movs	r0, #242	; 0xf2
 8007526:	f7ff fe89 	bl	800723c <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 800752a:	2045      	movs	r0, #69	; 0x45
 800752c:	f7ff feae 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8007530:	2009      	movs	r0, #9
 8007532:	f7ff feab 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8007536:	2008      	movs	r0, #8
 8007538:	f7ff fea8 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 800753c:	2008      	movs	r0, #8
 800753e:	f7ff fea5 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8007542:	2026      	movs	r0, #38	; 0x26
 8007544:	f7ff fea2 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8007548:	202a      	movs	r0, #42	; 0x2a
 800754a:	f7ff fe9f 	bl	800728c <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 800754e:	20f3      	movs	r0, #243	; 0xf3
 8007550:	f7ff fe74 	bl	800723c <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8007554:	2043      	movs	r0, #67	; 0x43
 8007556:	f7ff fe99 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 800755a:	2070      	movs	r0, #112	; 0x70
 800755c:	f7ff fe96 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8007560:	2072      	movs	r0, #114	; 0x72
 8007562:	f7ff fe93 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8007566:	2036      	movs	r0, #54	; 0x36
 8007568:	f7ff fe90 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 800756c:	2037      	movs	r0, #55	; 0x37
 800756e:	f7ff fe8d 	bl	800728c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8007572:	206f      	movs	r0, #111	; 0x6f
 8007574:	f7ff fe8a 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8007578:	20ed      	movs	r0, #237	; 0xed
 800757a:	f7ff fe5f 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 800757e:	201b      	movs	r0, #27
 8007580:	f7ff fe84 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8007584:	200b      	movs	r0, #11
 8007586:	f7ff fe81 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 800758a:	20ae      	movs	r0, #174	; 0xae
 800758c:	f7ff fe56 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8007590:	2077      	movs	r0, #119	; 0x77
 8007592:	f7ff fe7b 	bl	800728c <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8007596:	20cd      	movs	r0, #205	; 0xcd
 8007598:	f7ff fe50 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 800759c:	2063      	movs	r0, #99	; 0x63
 800759e:	f7ff fe75 	bl	800728c <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 80075a2:	2070      	movs	r0, #112	; 0x70
 80075a4:	f7ff fe4a 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 80075a8:	2007      	movs	r0, #7
 80075aa:	f7ff fe6f 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80075ae:	2007      	movs	r0, #7
 80075b0:	f7ff fe6c 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 80075b4:	2004      	movs	r0, #4
 80075b6:	f7ff fe69 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 80075ba:	200e      	movs	r0, #14
 80075bc:	f7ff fe66 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 80075c0:	200f      	movs	r0, #15
 80075c2:	f7ff fe63 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 80075c6:	2009      	movs	r0, #9
 80075c8:	f7ff fe60 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80075cc:	2007      	movs	r0, #7
 80075ce:	f7ff fe5d 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80075d2:	2008      	movs	r0, #8
 80075d4:	f7ff fe5a 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 80075d8:	2003      	movs	r0, #3
 80075da:	f7ff fe57 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 80075de:	20e8      	movs	r0, #232	; 0xe8
 80075e0:	f7ff fe2c 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 80075e4:	2034      	movs	r0, #52	; 0x34
 80075e6:	f7ff fe51 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 80075ea:	2062      	movs	r0, #98	; 0x62
 80075ec:	f7ff fe26 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 80075f0:	2018      	movs	r0, #24
 80075f2:	f7ff fe4b 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 80075f6:	200d      	movs	r0, #13
 80075f8:	f7ff fe48 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80075fc:	2071      	movs	r0, #113	; 0x71
 80075fe:	f7ff fe45 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8007602:	20ed      	movs	r0, #237	; 0xed
 8007604:	f7ff fe42 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8007608:	2070      	movs	r0, #112	; 0x70
 800760a:	f7ff fe3f 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800760e:	2070      	movs	r0, #112	; 0x70
 8007610:	f7ff fe3c 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8007614:	2018      	movs	r0, #24
 8007616:	f7ff fe39 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 800761a:	200f      	movs	r0, #15
 800761c:	f7ff fe36 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8007620:	2071      	movs	r0, #113	; 0x71
 8007622:	f7ff fe33 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8007626:	20ef      	movs	r0, #239	; 0xef
 8007628:	f7ff fe30 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 800762c:	2070      	movs	r0, #112	; 0x70
 800762e:	f7ff fe2d 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8007632:	2070      	movs	r0, #112	; 0x70
 8007634:	f7ff fe2a 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 8007638:	2063      	movs	r0, #99	; 0x63
 800763a:	f7ff fdff 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 800763e:	2018      	movs	r0, #24
 8007640:	f7ff fe24 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8007644:	2011      	movs	r0, #17
 8007646:	f7ff fe21 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800764a:	2071      	movs	r0, #113	; 0x71
 800764c:	f7ff fe1e 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8007650:	20f1      	movs	r0, #241	; 0xf1
 8007652:	f7ff fe1b 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8007656:	2070      	movs	r0, #112	; 0x70
 8007658:	f7ff fe18 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800765c:	2070      	movs	r0, #112	; 0x70
 800765e:	f7ff fe15 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8007662:	2018      	movs	r0, #24
 8007664:	f7ff fe12 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8007668:	2013      	movs	r0, #19
 800766a:	f7ff fe0f 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800766e:	2071      	movs	r0, #113	; 0x71
 8007670:	f7ff fe0c 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8007674:	20f3      	movs	r0, #243	; 0xf3
 8007676:	f7ff fe09 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 800767a:	2070      	movs	r0, #112	; 0x70
 800767c:	f7ff fe06 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8007680:	2070      	movs	r0, #112	; 0x70
 8007682:	f7ff fe03 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8007686:	2064      	movs	r0, #100	; 0x64
 8007688:	f7ff fdd8 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 800768c:	2028      	movs	r0, #40	; 0x28
 800768e:	f7ff fdfd 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8007692:	2029      	movs	r0, #41	; 0x29
 8007694:	f7ff fdfa 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8007698:	20f1      	movs	r0, #241	; 0xf1
 800769a:	f7ff fdf7 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800769e:	2001      	movs	r0, #1
 80076a0:	f7ff fdf4 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 80076a4:	20f1      	movs	r0, #241	; 0xf1
 80076a6:	f7ff fdf1 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80076aa:	2000      	movs	r0, #0
 80076ac:	f7ff fdee 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80076b0:	2007      	movs	r0, #7
 80076b2:	f7ff fdeb 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 80076b6:	2066      	movs	r0, #102	; 0x66
 80076b8:	f7ff fdc0 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 80076bc:	203c      	movs	r0, #60	; 0x3c
 80076be:	f7ff fde5 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80076c2:	2000      	movs	r0, #0
 80076c4:	f7ff fde2 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 80076c8:	20cd      	movs	r0, #205	; 0xcd
 80076ca:	f7ff fddf 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 80076ce:	2067      	movs	r0, #103	; 0x67
 80076d0:	f7ff fddc 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80076d4:	2045      	movs	r0, #69	; 0x45
 80076d6:	f7ff fdd9 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80076da:	2045      	movs	r0, #69	; 0x45
 80076dc:	f7ff fdd6 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 80076e0:	2010      	movs	r0, #16
 80076e2:	f7ff fdd3 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80076e6:	2000      	movs	r0, #0
 80076e8:	f7ff fdd0 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80076ec:	2000      	movs	r0, #0
 80076ee:	f7ff fdcd 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80076f2:	2000      	movs	r0, #0
 80076f4:	f7ff fdca 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 80076f8:	2067      	movs	r0, #103	; 0x67
 80076fa:	f7ff fd9f 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80076fe:	2000      	movs	r0, #0
 8007700:	f7ff fdc4 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8007704:	203c      	movs	r0, #60	; 0x3c
 8007706:	f7ff fdc1 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800770a:	2000      	movs	r0, #0
 800770c:	f7ff fdbe 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8007710:	2000      	movs	r0, #0
 8007712:	f7ff fdbb 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8007716:	2000      	movs	r0, #0
 8007718:	f7ff fdb8 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800771c:	2001      	movs	r0, #1
 800771e:	f7ff fdb5 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8007722:	2054      	movs	r0, #84	; 0x54
 8007724:	f7ff fdb2 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8007728:	2010      	movs	r0, #16
 800772a:	f7ff fdaf 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 800772e:	2032      	movs	r0, #50	; 0x32
 8007730:	f7ff fdac 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8007734:	2098      	movs	r0, #152	; 0x98
 8007736:	f7ff fda9 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 800773a:	2074      	movs	r0, #116	; 0x74
 800773c:	f7ff fd7e 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 8007740:	2010      	movs	r0, #16
 8007742:	f7ff fda3 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 8007746:	2085      	movs	r0, #133	; 0x85
 8007748:	f7ff fda0 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 800774c:	2080      	movs	r0, #128	; 0x80
 800774e:	f7ff fd9d 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8007752:	2000      	movs	r0, #0
 8007754:	f7ff fd9a 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8007758:	2000      	movs	r0, #0
 800775a:	f7ff fd97 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 800775e:	204e      	movs	r0, #78	; 0x4e
 8007760:	f7ff fd94 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8007764:	2000      	movs	r0, #0
 8007766:	f7ff fd91 	bl	800728c <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0x98);			
 800776a:	2098      	movs	r0, #152	; 0x98
 800776c:	f7ff fd66 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8007770:	203e      	movs	r0, #62	; 0x3e
 8007772:	f7ff fd8b 	bl	800728c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8007776:	2007      	movs	r0, #7
 8007778:	f7ff fd88 	bl	800728c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 800777c:	2035      	movs	r0, #53	; 0x35
 800777e:	f7ff fd5d 	bl	800723c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8007782:	2021      	movs	r0, #33	; 0x21
 8007784:	f7ff fd5a 	bl	800723c <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8007788:	2011      	movs	r0, #17
 800778a:	f7ff fd57 	bl	800723c <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 800778e:	2078      	movs	r0, #120	; 0x78
 8007790:	f7f9 fdfc 	bl	800138c <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8007794:	2029      	movs	r0, #41	; 0x29
 8007796:	f7ff fd51 	bl	800723c <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 800779a:	2014      	movs	r0, #20
 800779c:	f7f9 fdf6 	bl	800138c <HAL_Delay>
}
 80077a0:	46c0      	nop			; (mov r8, r8)
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	0002      	movs	r2, r0
 80077b0:	1dfb      	adds	r3, r7, #7
 80077b2:	701a      	strb	r2, [r3, #0]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 80077b4:	4b16      	ldr	r3, [pc, #88]	; (8007810 <LCD_1IN28_SetAttributes+0x68>)
 80077b6:	1dfa      	adds	r2, r7, #7
 80077b8:	7812      	ldrb	r2, [r2, #0]
 80077ba:	711a      	strb	r2, [r3, #4]
    UBYTE MemoryAccessReg = 0x08;
 80077bc:	210f      	movs	r1, #15
 80077be:	187b      	adds	r3, r7, r1
 80077c0:	2208      	movs	r2, #8
 80077c2:	701a      	strb	r2, [r3, #0]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 80077c4:	1dfb      	adds	r3, r7, #7
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d109      	bne.n	80077e0 <LCD_1IN28_SetAttributes+0x38>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 80077cc:	4b10      	ldr	r3, [pc, #64]	; (8007810 <LCD_1IN28_SetAttributes+0x68>)
 80077ce:	22f0      	movs	r2, #240	; 0xf0
 80077d0:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 80077d2:	4b0f      	ldr	r3, [pc, #60]	; (8007810 <LCD_1IN28_SetAttributes+0x68>)
 80077d4:	22f0      	movs	r2, #240	; 0xf0
 80077d6:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 80077d8:	187b      	adds	r3, r7, r1
 80077da:	22c8      	movs	r2, #200	; 0xc8
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	e009      	b.n	80077f4 <LCD_1IN28_SetAttributes+0x4c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <LCD_1IN28_SetAttributes+0x68>)
 80077e2:	22f0      	movs	r2, #240	; 0xf0
 80077e4:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 80077e6:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <LCD_1IN28_SetAttributes+0x68>)
 80077e8:	22f0      	movs	r2, #240	; 0xf0
 80077ea:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 80077ec:	230f      	movs	r3, #15
 80077ee:	18fb      	adds	r3, r7, r3
 80077f0:	2268      	movs	r2, #104	; 0x68
 80077f2:	701a      	strb	r2, [r3, #0]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 80077f4:	2036      	movs	r0, #54	; 0x36
 80077f6:	f7ff fd21 	bl	800723c <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 80077fa:	230f      	movs	r3, #15
 80077fc:	18fb      	adds	r3, r7, r3
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	0018      	movs	r0, r3
 8007802:	f7ff fd43 	bl	800728c <LCD_1IN28_SendData_8Bit>
}
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	46bd      	mov	sp, r7
 800780a:	b004      	add	sp, #16
 800780c:	bd80      	pop	{r7, pc}
 800780e:	46c0      	nop			; (mov r8, r8)
 8007810:	200002b0 	.word	0x200002b0

08007814 <LCD_1IN28_Init>:
function :	Initialize the lcd
parameter:
********************************************************************************/

void LCD_1IN28_Init(UBYTE Scan_dir)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	0002      	movs	r2, r0
 800781c:	1dfb      	adds	r3, r7, #7
 800781e:	701a      	strb	r2, [r3, #0]

    //Hardware reset
    LCD_1IN28_Reset();
 8007820:	f7ff fce6 	bl	80071f0 <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    //Not sure if this is needed
    LCD_1IN28_SetAttributes(Scan_dir);
 8007824:	1dfb      	adds	r3, r7, #7
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	0018      	movs	r0, r3
 800782a:	f7ff ffbd 	bl	80077a8 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 800782e:	f7ff fd87 	bl	8007340 <LCD_1IN28_InitReg>

}
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	46bd      	mov	sp, r7
 8007836:	b002      	add	sp, #8
 8007838:	bd80      	pop	{r7, pc}

0800783a <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 800783a:	b5b0      	push	{r4, r5, r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	0005      	movs	r5, r0
 8007842:	000c      	movs	r4, r1
 8007844:	0010      	movs	r0, r2
 8007846:	0019      	movs	r1, r3
 8007848:	1dbb      	adds	r3, r7, #6
 800784a:	1c2a      	adds	r2, r5, #0
 800784c:	801a      	strh	r2, [r3, #0]
 800784e:	1d3b      	adds	r3, r7, #4
 8007850:	1c22      	adds	r2, r4, #0
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	1cbb      	adds	r3, r7, #2
 8007856:	1c02      	adds	r2, r0, #0
 8007858:	801a      	strh	r2, [r3, #0]
 800785a:	003b      	movs	r3, r7
 800785c:	1c0a      	adds	r2, r1, #0
 800785e:	801a      	strh	r2, [r3, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8007860:	202a      	movs	r0, #42	; 0x2a
 8007862:	f7ff fceb 	bl	800723c <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8007866:	2000      	movs	r0, #0
 8007868:	f7ff fd10 	bl	800728c <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 800786c:	1dbb      	adds	r3, r7, #6
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	0018      	movs	r0, r3
 8007874:	f7ff fd0a 	bl	800728c <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8007878:	2000      	movs	r0, #0
 800787a:	f7ff fd07 	bl	800728c <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 800787e:	1cbb      	adds	r3, r7, #2
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	0018      	movs	r0, r3
 8007886:	f7ff fd01 	bl	800728c <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 800788a:	202b      	movs	r0, #43	; 0x2b
 800788c:	f7ff fcd6 	bl	800723c <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8007890:	2000      	movs	r0, #0
 8007892:	f7ff fcfb 	bl	800728c <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 8007896:	1d3b      	adds	r3, r7, #4
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	0018      	movs	r0, r3
 800789e:	f7ff fcf5 	bl	800728c <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 80078a2:	2000      	movs	r0, #0
 80078a4:	f7ff fcf2 	bl	800728c <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 80078a8:	003b      	movs	r3, r7
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	0018      	movs	r0, r3
 80078b0:	f7ff fcec 	bl	800728c <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 80078b4:	202c      	movs	r0, #44	; 0x2c
 80078b6:	f7ff fcc1 	bl	800723c <LCD_1IN28_SendCommand>
}
 80078ba:	46c0      	nop			; (mov r8, r8)
 80078bc:	46bd      	mov	sp, r7
 80078be:	b002      	add	sp, #8
 80078c0:	bdb0      	pop	{r4, r5, r7, pc}

080078c2 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	0002      	movs	r2, r0
 80078ca:	1dbb      	adds	r3, r7, #6
 80078cc:	801a      	strh	r2, [r3, #0]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 80078ce:	23ef      	movs	r3, #239	; 0xef
 80078d0:	22ef      	movs	r2, #239	; 0xef
 80078d2:	2100      	movs	r1, #0
 80078d4:	2000      	movs	r0, #0
 80078d6:	f7ff ffb0 	bl	800783a <LCD_1IN28_SetWindows>

	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 80078da:	230e      	movs	r3, #14
 80078dc:	18fb      	adds	r3, r7, r3
 80078de:	2200      	movs	r2, #0
 80078e0:	801a      	strh	r2, [r3, #0]
 80078e2:	e01a      	b.n	800791a <LCD_1IN28_Clear+0x58>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 80078e4:	230c      	movs	r3, #12
 80078e6:	18fb      	adds	r3, r7, r3
 80078e8:	2200      	movs	r2, #0
 80078ea:	801a      	strh	r2, [r3, #0]
 80078ec:	e00a      	b.n	8007904 <LCD_1IN28_Clear+0x42>
			LCD_1IN28_SendData_16Bit(Color);
 80078ee:	1dbb      	adds	r3, r7, #6
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	0018      	movs	r0, r3
 80078f4:	f7ff fcf2 	bl	80072dc <LCD_1IN28_SendData_16Bit>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 80078f8:	210c      	movs	r1, #12
 80078fa:	187b      	adds	r3, r7, r1
 80078fc:	881a      	ldrh	r2, [r3, #0]
 80078fe:	187b      	adds	r3, r7, r1
 8007900:	3201      	adds	r2, #1
 8007902:	801a      	strh	r2, [r3, #0]
 8007904:	230c      	movs	r3, #12
 8007906:	18fb      	adds	r3, r7, r3
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	2bef      	cmp	r3, #239	; 0xef
 800790c:	d9ef      	bls.n	80078ee <LCD_1IN28_Clear+0x2c>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 800790e:	210e      	movs	r1, #14
 8007910:	187b      	adds	r3, r7, r1
 8007912:	881a      	ldrh	r2, [r3, #0]
 8007914:	187b      	adds	r3, r7, r1
 8007916:	3201      	adds	r2, #1
 8007918:	801a      	strh	r2, [r3, #0]
 800791a:	230e      	movs	r3, #14
 800791c:	18fb      	adds	r3, r7, r3
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	2bef      	cmp	r3, #239	; 0xef
 8007922:	d9df      	bls.n	80078e4 <LCD_1IN28_Clear+0x22>
		}
	 }
}
 8007924:	46c0      	nop			; (mov r8, r8)
 8007926:	46c0      	nop			; (mov r8, r8)
 8007928:	46bd      	mov	sp, r7
 800792a:	b004      	add	sp, #16
 800792c:	bd80      	pop	{r7, pc}

0800792e <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 800792e:	b590      	push	{r4, r7, lr}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	0004      	movs	r4, r0
 8007936:	0008      	movs	r0, r1
 8007938:	0011      	movs	r1, r2
 800793a:	1dbb      	adds	r3, r7, #6
 800793c:	1c22      	adds	r2, r4, #0
 800793e:	801a      	strh	r2, [r3, #0]
 8007940:	1d3b      	adds	r3, r7, #4
 8007942:	1c02      	adds	r2, r0, #0
 8007944:	801a      	strh	r2, [r3, #0]
 8007946:	1cbb      	adds	r3, r7, #2
 8007948:	1c0a      	adds	r2, r1, #0
 800794a:	801a      	strh	r2, [r3, #0]
	LCD_1IN28_SetWindows(x,y,x,y);
 800794c:	1d3b      	adds	r3, r7, #4
 800794e:	881c      	ldrh	r4, [r3, #0]
 8007950:	1dbb      	adds	r3, r7, #6
 8007952:	881a      	ldrh	r2, [r3, #0]
 8007954:	1d3b      	adds	r3, r7, #4
 8007956:	8819      	ldrh	r1, [r3, #0]
 8007958:	1dbb      	adds	r3, r7, #6
 800795a:	8818      	ldrh	r0, [r3, #0]
 800795c:	0023      	movs	r3, r4
 800795e:	f7ff ff6c 	bl	800783a <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 8007962:	1cbb      	adds	r3, r7, #2
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	0018      	movs	r0, r3
 8007968:	f7ff fcb8 	bl	80072dc <LCD_1IN28_SendData_16Bit>
}
 800796c:	46c0      	nop			; (mov r8, r8)
 800796e:	46bd      	mov	sp, r7
 8007970:	b003      	add	sp, #12
 8007972:	bd90      	pop	{r4, r7, pc}

08007974 <LCD_1IN28_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN28_SetBackLight(UWORD Value)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	0002      	movs	r2, r0
 800797c:	1dbb      	adds	r3, r7, #6
 800797e:	801a      	strh	r2, [r3, #0]
	DEV_Set_PWM(Value);
 8007980:	4b03      	ldr	r3, [pc, #12]	; (8007990 <LCD_1IN28_SetBackLight+0x1c>)
 8007982:	1dba      	adds	r2, r7, #6
 8007984:	8812      	ldrh	r2, [r2, #0]
 8007986:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007988:	46c0      	nop			; (mov r8, r8)
 800798a:	46bd      	mov	sp, r7
 800798c:	b002      	add	sp, #8
 800798e:	bd80      	pop	{r7, pc}
 8007990:	40014400 	.word	0x40014400

08007994 <memset>:
 8007994:	0003      	movs	r3, r0
 8007996:	1882      	adds	r2, r0, r2
 8007998:	4293      	cmp	r3, r2
 800799a:	d100      	bne.n	800799e <memset+0xa>
 800799c:	4770      	bx	lr
 800799e:	7019      	strb	r1, [r3, #0]
 80079a0:	3301      	adds	r3, #1
 80079a2:	e7f9      	b.n	8007998 <memset+0x4>

080079a4 <__libc_init_array>:
 80079a4:	b570      	push	{r4, r5, r6, lr}
 80079a6:	2600      	movs	r6, #0
 80079a8:	4c0c      	ldr	r4, [pc, #48]	; (80079dc <__libc_init_array+0x38>)
 80079aa:	4d0d      	ldr	r5, [pc, #52]	; (80079e0 <__libc_init_array+0x3c>)
 80079ac:	1b64      	subs	r4, r4, r5
 80079ae:	10a4      	asrs	r4, r4, #2
 80079b0:	42a6      	cmp	r6, r4
 80079b2:	d109      	bne.n	80079c8 <__libc_init_array+0x24>
 80079b4:	2600      	movs	r6, #0
 80079b6:	f000 f819 	bl	80079ec <_init>
 80079ba:	4c0a      	ldr	r4, [pc, #40]	; (80079e4 <__libc_init_array+0x40>)
 80079bc:	4d0a      	ldr	r5, [pc, #40]	; (80079e8 <__libc_init_array+0x44>)
 80079be:	1b64      	subs	r4, r4, r5
 80079c0:	10a4      	asrs	r4, r4, #2
 80079c2:	42a6      	cmp	r6, r4
 80079c4:	d105      	bne.n	80079d2 <__libc_init_array+0x2e>
 80079c6:	bd70      	pop	{r4, r5, r6, pc}
 80079c8:	00b3      	lsls	r3, r6, #2
 80079ca:	58eb      	ldr	r3, [r5, r3]
 80079cc:	4798      	blx	r3
 80079ce:	3601      	adds	r6, #1
 80079d0:	e7ee      	b.n	80079b0 <__libc_init_array+0xc>
 80079d2:	00b3      	lsls	r3, r6, #2
 80079d4:	58eb      	ldr	r3, [r5, r3]
 80079d6:	4798      	blx	r3
 80079d8:	3601      	adds	r6, #1
 80079da:	e7f2      	b.n	80079c2 <__libc_init_array+0x1e>
 80079dc:	080086e4 	.word	0x080086e4
 80079e0:	080086e4 	.word	0x080086e4
 80079e4:	080086e8 	.word	0x080086e8
 80079e8:	080086e4 	.word	0x080086e4

080079ec <_init>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	46c0      	nop			; (mov r8, r8)
 80079f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f2:	bc08      	pop	{r3}
 80079f4:	469e      	mov	lr, r3
 80079f6:	4770      	bx	lr

080079f8 <_fini>:
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fa:	46c0      	nop			; (mov r8, r8)
 80079fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fe:	bc08      	pop	{r3}
 8007a00:	469e      	mov	lr, r3
 8007a02:	4770      	bx	lr
