
Remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004870  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c4  080049c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049cc  080049cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  080049e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080049e0  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa4e  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027dd  00000000  00000000  0002fac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d10  00000000  00000000  000322a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0b  00000000  00000000  00032fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001724a  00000000  00000000  000339c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011748  00000000  00000000  0004ac0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091401  00000000  00000000  0005c355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002dc4  00000000  00000000  000ed758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f051c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004914 	.word	0x08004914

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004914 	.word	0x08004914

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	0018      	movs	r0, r3
 8000626:	230c      	movs	r3, #12
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f004 f946 	bl	80048bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000630:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000632:	4a2e      	ldr	r2, [pc, #184]	; (80006ec <MX_ADC1_Init+0xd0>)
 8000634:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000636:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	05d2      	lsls	r2, r2, #23
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063e:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064a:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000652:	2204      	movs	r2, #4
 8000654:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000656:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000658:	2200      	movs	r2, #0
 800065a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800065e:	2200      	movs	r2, #0
 8000660:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000664:	2200      	movs	r2, #0
 8000666:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800066a:	2201      	movs	r2, #1
 800066c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000670:	2220      	movs	r2, #32
 8000672:	2100      	movs	r1, #0
 8000674:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000684:	222c      	movs	r2, #44	; 0x2c
 8000686:	2100      	movs	r1, #0
 8000688:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800068c:	2200      	movs	r2, #0
 800068e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000692:	2200      	movs	r2, #0
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000698:	2200      	movs	r2, #0
 800069a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800069e:	223c      	movs	r2, #60	; 0x3c
 80006a0:	2100      	movs	r1, #0
 80006a2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_ADC1_Init+0xcc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_ADC1_Init+0xcc>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 fd8d 	bl	80011cc <HAL_ADC_Init>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80006b6:	f000 f9ab 	bl	8000a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <MX_ADC1_Init+0xd4>)
 80006be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	1d3a      	adds	r2, r7, #4
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_ADC1_Init+0xcc>)
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 ff22 	bl	800151c <HAL_ADC_ConfigChannel>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80006dc:	f000 f998 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b004      	add	sp, #16
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000028 	.word	0x20000028
 80006ec:	40012400 	.word	0x40012400
 80006f0:	04000002 	.word	0x04000002

080006f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b08b      	sub	sp, #44	; 0x2c
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	2414      	movs	r4, #20
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	0018      	movs	r0, r3
 8000702:	2314      	movs	r3, #20
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f004 f8d8 	bl	80048bc <memset>
  if(adcHandle->Instance==ADC1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a18      	ldr	r2, [pc, #96]	; (8000774 <HAL_ADC_MspInit+0x80>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d129      	bne.n	800076a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <HAL_ADC_MspInit+0x84>)
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	0349      	lsls	r1, r1, #13
 8000720:	430a      	orrs	r2, r1
 8000722:	641a      	str	r2, [r3, #64]	; 0x40
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	035b      	lsls	r3, r3, #13
 800072c:	4013      	ands	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000738:	2101      	movs	r1, #1
 800073a:	430a      	orrs	r2, r1
 800073c:	635a      	str	r2, [r3, #52]	; 0x34
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000742:	2201      	movs	r2, #1
 8000744:	4013      	ands	r3, r2
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Analog_In_Pin;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2202      	movs	r2, #2
 800074e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2203      	movs	r2, #3
 8000754:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Analog_In_GPIO_Port, &GPIO_InitStruct);
 800075c:	193a      	adds	r2, r7, r4
 800075e:	23a0      	movs	r3, #160	; 0xa0
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f001 f965 	bl	8001a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b00b      	add	sp, #44	; 0x2c
 8000770:	bd90      	pop	{r4, r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40012400 	.word	0x40012400
 8000778:	40021000 	.word	0x40021000

0800077c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	240c      	movs	r4, #12
 8000784:	193b      	adds	r3, r7, r4
 8000786:	0018      	movs	r0, r3
 8000788:	2314      	movs	r3, #20
 800078a:	001a      	movs	r2, r3
 800078c:	2100      	movs	r1, #0
 800078e:	f004 f895 	bl	80048bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b45      	ldr	r3, [pc, #276]	; (80008a8 <MX_GPIO_Init+0x12c>)
 8000794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000796:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <MX_GPIO_Init+0x12c>)
 8000798:	2102      	movs	r1, #2
 800079a:	430a      	orrs	r2, r1
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
 800079e:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a2:	2202      	movs	r2, #2
 80007a4:	4013      	ands	r3, r2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b3f      	ldr	r3, [pc, #252]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007b0:	2104      	movs	r1, #4
 80007b2:	430a      	orrs	r2, r1
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ba:	2204      	movs	r2, #4
 80007bc:	4013      	ands	r3, r2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c6:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|CS_Pin, GPIO_PIN_RESET);
 80007da:	23a0      	movs	r3, #160	; 0xa0
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4833      	ldr	r0, [pc, #204]	; (80008ac <MX_GPIO_Init+0x130>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	0019      	movs	r1, r3
 80007e4:	f001 fa8a 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	4830      	ldr	r0, [pc, #192]	; (80008b0 <MX_GPIO_Init+0x134>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	0019      	movs	r1, r3
 80007f2:	f001 fa83 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|SPI1_CSN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80007f6:	492f      	ldr	r1, [pc, #188]	; (80008b4 <MX_GPIO_Init+0x138>)
 80007f8:	23a0      	movs	r3, #160	; 0xa0
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	2200      	movs	r2, #0
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 fa7c 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|CS_Pin;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	22a0      	movs	r2, #160	; 0xa0
 8000808:	0092      	lsls	r2, r2, #2
 800080a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2201      	movs	r2, #1
 8000810:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	193b      	adds	r3, r7, r4
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <MX_GPIO_Init+0x130>)
 8000822:	0019      	movs	r1, r3
 8000824:	0010      	movs	r0, r2
 8000826:	f001 f905 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DC_Pin;
 800082a:	0021      	movs	r1, r4
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	0212      	lsls	r2, r2, #8
 8000832:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	000c      	movs	r4, r1
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2201      	movs	r2, #1
 800083a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000848:	193b      	adds	r3, r7, r4
 800084a:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <MX_GPIO_Init+0x134>)
 800084c:	0019      	movs	r1, r3
 800084e:	0010      	movs	r0, r2
 8000850:	f001 f8f0 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RST_Pin|LED_Pin|SPI1_CSN_Pin|NRF_CE_Pin;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <MX_GPIO_Init+0x138>)
 8000858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	193a      	adds	r2, r7, r4
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f001 f8dd 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_In_Pin;
 800087a:	0021      	movs	r1, r4
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	0152      	lsls	r2, r2, #5
 8000882:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_In_GPIO_Port, &GPIO_InitStruct);
 8000890:	187a      	adds	r2, r7, r1
 8000892:	23a0      	movs	r3, #160	; 0xa0
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f001 f8cb 	bl	8001a34 <HAL_GPIO_Init>

}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b009      	add	sp, #36	; 0x24
 80008a4:	bd90      	pop	{r4, r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000
 80008ac:	50000400 	.word	0x50000400
 80008b0:	50000800 	.word	0x50000800
 80008b4:	00000988 	.word	0x00000988

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fadd 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f847 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f7ff ff59 	bl	800077c <MX_GPIO_Init>
  MX_ADC1_Init();
 80008ca:	f7ff fea7 	bl	800061c <MX_ADC1_Init>
  MX_SPI2_Init();
 80008ce:	f000 f8e3 	bl	8000a98 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80008d2:	f000 f9f9 	bl	8000cc8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80008d6:	f000 f8a1 	bl	8000a1c <MX_SPI1_Init>
//  	read_reg_multi(0x10, data, 5);
//  	if(data[0] == 0xEE)
//  	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);


  uint8_t TX_addr[] = {0xEE, 0xDD, 0xCC, 0xBB, 0xAA};
 80008da:	240c      	movs	r4, #12
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	4a1b      	ldr	r2, [pc, #108]	; (800094c <main+0x94>)
 80008e0:	6811      	ldr	r1, [r2, #0]
 80008e2:	6019      	str	r1, [r3, #0]
 80008e4:	7912      	ldrb	r2, [r2, #4]
 80008e6:	711a      	strb	r2, [r3, #4]
  uint8_t TX_data[] = "Hello\n";
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4a19      	ldr	r2, [pc, #100]	; (8000950 <main+0x98>)
 80008ec:	6811      	ldr	r1, [r2, #0]
 80008ee:	6019      	str	r1, [r3, #0]
 80008f0:	8891      	ldrh	r1, [r2, #4]
 80008f2:	8099      	strh	r1, [r3, #4]
 80008f4:	7992      	ldrb	r2, [r2, #6]
 80008f6:	719a      	strb	r2, [r3, #6]


  nrf_init();
 80008f8:	f003 ff10 	bl	800471c <nrf_init>
  nrf_tx_mode(TX_addr, 10);
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	210a      	movs	r1, #10
 8000900:	0018      	movs	r0, r3
 8000902:	f003 ff3c 	bl	800477e <nrf_tx_mode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 8000906:	23fa      	movs	r3, #250	; 0xfa
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	0018      	movs	r0, r3
 800090c:	f000 fb3c 	bl	8000f88 <HAL_Delay>
	  int trans_stat = nrf_transmit(TX_data);
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	0018      	movs	r0, r3
 8000914:	f003 ff84 	bl	8004820 <nrf_transmit>
 8000918:	0003      	movs	r3, r0
 800091a:	617b      	str	r3, [r7, #20]
	  if( trans_stat == 1){
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d106      	bne.n	8000930 <main+0x78>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000922:	23a0      	movs	r3, #160	; 0xa0
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	2201      	movs	r2, #1
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	0018      	movs	r0, r3
 800092c:	f001 f9e6 	bl	8001cfc <HAL_GPIO_WritePin>

	  }
	  HAL_Delay(500);
 8000930:	23fa      	movs	r3, #250	; 0xfa
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fb27 	bl	8000f88 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	2200      	movs	r2, #0
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	0018      	movs	r0, r3
 8000944:	f001 f9da 	bl	8001cfc <HAL_GPIO_WritePin>
  {
 8000948:	e7dd      	b.n	8000906 <main+0x4e>
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	0800492c 	.word	0x0800492c
 8000950:	08004934 	.word	0x08004934

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b093      	sub	sp, #76	; 0x4c
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	2410      	movs	r4, #16
 800095c:	193b      	adds	r3, r7, r4
 800095e:	0018      	movs	r0, r3
 8000960:	2338      	movs	r3, #56	; 0x38
 8000962:	001a      	movs	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	f003 ffa9 	bl	80048bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096a:	003b      	movs	r3, r7
 800096c:	0018      	movs	r0, r3
 800096e:	2310      	movs	r3, #16
 8000970:	001a      	movs	r2, r3
 8000972:	2100      	movs	r1, #0
 8000974:	f003 ffa2 	bl	80048bc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	0018      	movs	r0, r3
 800097e:	f001 f9db 	bl	8001d38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2202      	movs	r2, #2
 8000986:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	0052      	lsls	r2, r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000990:	0021      	movs	r1, r4
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2240      	movs	r2, #64	; 0x40
 800099c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2202      	movs	r2, #2
 80009a2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2202      	movs	r2, #2
 80009a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2208      	movs	r2, #8
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	0292      	lsls	r2, r2, #10
 80009bc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	0492      	lsls	r2, r2, #18
 80009c4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2280      	movs	r2, #128	; 0x80
 80009ca:	0592      	lsls	r2, r2, #22
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	0018      	movs	r0, r3
 80009d2:	f001 f9fd 	bl	8001dd0 <HAL_RCC_OscConfig>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009da:	f000 f819 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	003b      	movs	r3, r7
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e4:	003b      	movs	r3, r7
 80009e6:	2202      	movs	r2, #2
 80009e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	003b      	movs	r3, r7
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f0:	003b      	movs	r3, r7
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f6:	003b      	movs	r3, r7
 80009f8:	2102      	movs	r1, #2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 fd02 	bl	8002404 <HAL_RCC_ClockConfig>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a04:	f000 f804 	bl	8000a10 <Error_Handler>
  }
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b013      	add	sp, #76	; 0x4c
 8000a0e:	bd90      	pop	{r4, r7, pc}

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a22:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <MX_SPI1_Init+0x78>)
 8000a24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a28:	2282      	movs	r2, #130	; 0x82
 8000a2a:	0052      	lsls	r2, r2, #1
 8000a2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a36:	22e0      	movs	r2, #224	; 0xe0
 8000a38:	00d2      	lsls	r2, r2, #3
 8000a3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a52:	2210      	movs	r2, #16
 8000a54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a6a:	2207      	movs	r2, #7
 8000a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a76:	2208      	movs	r2, #8
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <MX_SPI1_Init+0x74>)
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f001 ffe5 	bl	8002a4c <HAL_SPI_Init>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d001      	beq.n	8000a8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a86:	f7ff ffc3 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2000008c 	.word	0x2000008c
 8000a94:	40013000 	.word	0x40013000

08000a98 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	; (8000b10 <MX_SPI2_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000aa4:	2282      	movs	r2, #130	; 0x82
 8000aa6:	0052      	lsls	r2, r2, #1
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000ab2:	22e0      	movs	r2, #224	; 0xe0
 8000ab4:	00d2      	lsls	r2, r2, #3
 8000ab6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	0092      	lsls	r2, r2, #2
 8000aca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000ace:	2208      	movs	r2, #8
 8000ad0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000ae6:	2207      	movs	r2, #7
 8000ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000af2:	2208      	movs	r2, #8
 8000af4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <MX_SPI2_Init+0x74>)
 8000af8:	0018      	movs	r0, r3
 8000afa:	f001 ffa7 	bl	8002a4c <HAL_SPI_Init>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d001      	beq.n	8000b06 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b02:	f7ff ff85 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200000f0 	.word	0x200000f0
 8000b10:	40003800 	.word	0x40003800

08000b14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b08d      	sub	sp, #52	; 0x34
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	241c      	movs	r4, #28
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	0018      	movs	r0, r3
 8000b22:	2314      	movs	r3, #20
 8000b24:	001a      	movs	r2, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	f003 fec8 	bl	80048bc <memset>
  if(spiHandle->Instance==SPI1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a42      	ldr	r2, [pc, #264]	; (8000c3c <HAL_SPI_MspInit+0x128>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d131      	bne.n	8000b9a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b36:	4b42      	ldr	r3, [pc, #264]	; (8000c40 <HAL_SPI_MspInit+0x12c>)
 8000b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b3a:	4b41      	ldr	r3, [pc, #260]	; (8000c40 <HAL_SPI_MspInit+0x12c>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	0149      	lsls	r1, r1, #5
 8000b40:	430a      	orrs	r2, r1
 8000b42:	641a      	str	r2, [r3, #64]	; 0x40
 8000b44:	4b3e      	ldr	r3, [pc, #248]	; (8000c40 <HAL_SPI_MspInit+0x12c>)
 8000b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	015b      	lsls	r3, r3, #5
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b3b      	ldr	r3, [pc, #236]	; (8000c40 <HAL_SPI_MspInit+0x12c>)
 8000b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b56:	4b3a      	ldr	r3, [pc, #232]	; (8000c40 <HAL_SPI_MspInit+0x12c>)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b5e:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <HAL_SPI_MspInit+0x12c>)
 8000b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b62:	2201      	movs	r2, #1
 8000b64:	4013      	ands	r3, r2
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000b6a:	0021      	movs	r1, r4
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2264      	movs	r2, #100	; 0x64
 8000b70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2202      	movs	r2, #2
 8000b76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	187a      	adds	r2, r7, r1
 8000b8c:	23a0      	movs	r3, #160	; 0xa0
 8000b8e:	05db      	lsls	r3, r3, #23
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 ff4e 	bl	8001a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b98:	e04c      	b.n	8000c34 <HAL_SPI_MspInit+0x120>
  else if(spiHandle->Instance==SPI2)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a29      	ldr	r2, [pc, #164]	; (8000c44 <HAL_SPI_MspInit+0x130>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d147      	bne.n	8000c34 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <HAL_SPI_MspInit+0x12c>)
 8000ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ba8:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <HAL_SPI_MspInit+0x12c>)
 8000baa:	2180      	movs	r1, #128	; 0x80
 8000bac:	01c9      	lsls	r1, r1, #7
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bb2:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <HAL_SPI_MspInit+0x12c>)
 8000bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	01db      	lsls	r3, r3, #7
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <HAL_SPI_MspInit+0x12c>)
 8000bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <HAL_SPI_MspInit+0x12c>)
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	635a      	str	r2, [r3, #52]	; 0x34
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_SPI_MspInit+0x12c>)
 8000bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bd8:	241c      	movs	r4, #28
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	2201      	movs	r2, #1
 8000bde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	2202      	movs	r2, #2
 8000be4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	193a      	adds	r2, r7, r4
 8000bfa:	23a0      	movs	r3, #160	; 0xa0
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 ff17 	bl	8001a34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c06:	0021      	movs	r1, r4
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2210      	movs	r2, #16
 8000c0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2202      	movs	r2, #2
 8000c12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2201      	movs	r2, #1
 8000c24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	187a      	adds	r2, r7, r1
 8000c28:	23a0      	movs	r3, #160	; 0xa0
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	0011      	movs	r1, r2
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 ff00 	bl	8001a34 <HAL_GPIO_Init>
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b00d      	add	sp, #52	; 0x34
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	40013000 	.word	0x40013000
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40003800 	.word	0x40003800

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_MspInit+0x44>)
 8000c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_MspInit+0x44>)
 8000c54:	2101      	movs	r1, #1
 8000c56:	430a      	orrs	r2, r1
 8000c58:	641a      	str	r2, [r3, #64]	; 0x40
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4013      	ands	r3, r2
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x44>)
 8000c68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	0549      	lsls	r1, r1, #21
 8000c70:	430a      	orrs	r2, r1
 8000c72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_MspInit+0x44>)
 8000c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	055b      	lsls	r3, r3, #21
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40021000 	.word	0x40021000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 f94c 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ccc:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000cce:	4a24      	ldr	r2, [pc, #144]	; (8000d60 <MX_USART1_UART_Init+0x98>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000cd4:	22e1      	movs	r2, #225	; 0xe1
 8000cd6:	0252      	lsls	r2, r2, #9
 8000cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f002 fdba 	bl	800388c <HAL_HalfDuplex_Init>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d1c:	f7ff fe78 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000d22:	2100      	movs	r1, #0
 8000d24:	0018      	movs	r0, r3
 8000d26:	f003 faf5 	bl	8004314 <HAL_UARTEx_SetTxFifoThreshold>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d2e:	f7ff fe6f 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000d34:	2100      	movs	r1, #0
 8000d36:	0018      	movs	r0, r3
 8000d38:	f003 fb2c 	bl	8004394 <HAL_UARTEx_SetRxFifoThreshold>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d40:	f7ff fe66 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <MX_USART1_UART_Init+0x94>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f003 faaa 	bl	80042a0 <HAL_UARTEx_DisableFifoMode>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d50:	f7ff fe5e 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	20000154 	.word	0x20000154
 8000d60:	40013800 	.word	0x40013800

08000d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b095      	sub	sp, #84	; 0x54
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	233c      	movs	r3, #60	; 0x3c
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	0018      	movs	r0, r3
 8000d72:	2314      	movs	r3, #20
 8000d74:	001a      	movs	r2, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	f003 fda0 	bl	80048bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	2414      	movs	r4, #20
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	0018      	movs	r0, r3
 8000d82:	2328      	movs	r3, #40	; 0x28
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f003 fd98 	bl	80048bc <memset>
  if(uartHandle->Instance==USART1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <HAL_UART_MspInit+0xb8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d13d      	bne.n	8000e12 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	0018      	movs	r0, r3
 8000da6:	f001 fcd7 	bl	8002758 <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	1e03      	subs	r3, r0, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dae:	f7ff fe2f 	bl	8000a10 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <HAL_UART_MspInit+0xbc>)
 8000db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <HAL_UART_MspInit+0xbc>)
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	01c9      	lsls	r1, r1, #7
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	641a      	str	r2, [r3, #64]	; 0x40
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_UART_MspInit+0xbc>)
 8000dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	01db      	lsls	r3, r3, #7
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_UART_MspInit+0xbc>)
 8000dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_UART_MspInit+0xbc>)
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_UART_MspInit+0xbc>)
 8000ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dde:	2202      	movs	r2, #2
 8000de0:	4013      	ands	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000de6:	213c      	movs	r1, #60	; 0x3c
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2240      	movs	r2, #64	; 0x40
 8000dec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2212      	movs	r2, #18
 8000df2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2201      	movs	r2, #1
 8000df8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_UART_MspInit+0xc0>)
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	0010      	movs	r0, r2
 8000e0e:	f000 fe11 	bl	8001a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b015      	add	sp, #84	; 0x54
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	40013800 	.word	0x40013800
 8000e20:	40021000 	.word	0x40021000
 8000e24:	50000400 	.word	0x50000400

08000e28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e2c:	f7ff ff47 	bl	8000cbe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e56:	f003 fd39 	bl	80048cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e5a:	f7ff fd2d 	bl	80008b8 <main>

08000e5e <LoopForever>:

LoopForever:
  b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   r0, =_estack
 8000e60:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e6c:	080049d4 	.word	0x080049d4
  ldr r2, =_sbss
 8000e70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e74:	200001ec 	.word	0x200001ec

08000e78 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x3c>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Init+0x3c>)
 8000e8e:	2180      	movs	r1, #128	; 0x80
 8000e90:	0049      	lsls	r1, r1, #1
 8000e92:	430a      	orrs	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 f810 	bl	8000ebc <HAL_InitTick>
 8000e9c:	1e03      	subs	r3, r0, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e001      	b.n	8000eac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fece 	bl	8000c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	781b      	ldrb	r3, [r3, #0]
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_InitTick+0x88>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d02b      	beq.n	8000f2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <HAL_InitTick+0x8c>)
 8000ed6:	681c      	ldr	r4, [r3, #0]
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_InitTick+0x88>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	0019      	movs	r1, r3
 8000ede:	23fa      	movs	r3, #250	; 0xfa
 8000ee0:	0098      	lsls	r0, r3, #2
 8000ee2:	f7ff f90f 	bl	8000104 <__udivsi3>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	0019      	movs	r1, r3
 8000eea:	0020      	movs	r0, r4
 8000eec:	f7ff f90a 	bl	8000104 <__udivsi3>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 fd91 	bl	8001a1a <HAL_SYSTICK_Config>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d112      	bne.n	8000f22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d80a      	bhi.n	8000f18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	2301      	movs	r3, #1
 8000f06:	425b      	negs	r3, r3
 8000f08:	2200      	movs	r2, #0
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f000 fd70 	bl	80019f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_InitTick+0x90>)
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e00d      	b.n	8000f34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f18:	230f      	movs	r3, #15
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e008      	b.n	8000f34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f22:	230f      	movs	r3, #15
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	e003      	b.n	8000f34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f34:	230f      	movs	r3, #15
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	781b      	ldrb	r3, [r3, #0]
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b005      	add	sp, #20
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_IncTick+0x1c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	001a      	movs	r2, r3
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_IncTick+0x20>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	18d2      	adds	r2, r2, r3
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_IncTick+0x20>)
 8000f62:	601a      	str	r2, [r3, #0]
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	200001e8 	.word	0x200001e8

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b02      	ldr	r3, [pc, #8]	; (8000f84 <HAL_GetTick+0x10>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	200001e8 	.word	0x200001e8

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff fff0 	bl	8000f74 <HAL_GetTick>
 8000f94:	0003      	movs	r3, r0
 8000f96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	001a      	movs	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	189b      	adds	r3, r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	f7ff ffe0 	bl	8000f74 <HAL_GetTick>
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b004      	add	sp, #16
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	601a      	str	r2, [r3, #0]
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	fe3fffff 	.word	0xfe3fffff

08000ff8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	23e0      	movs	r3, #224	; 0xe0
 8001006:	045b      	lsls	r3, r3, #17
 8001008:	4013      	ands	r3, r2
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}

08001012 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	2104      	movs	r1, #4
 8001026:	400a      	ands	r2, r1
 8001028:	2107      	movs	r1, #7
 800102a:	4091      	lsls	r1, r2
 800102c:	000a      	movs	r2, r1
 800102e:	43d2      	mvns	r2, r2
 8001030:	401a      	ands	r2, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	2104      	movs	r1, #4
 8001036:	400b      	ands	r3, r1
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4099      	lsls	r1, r3
 800103c:	000b      	movs	r3, r1
 800103e:	431a      	orrs	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b004      	add	sp, #16
 800104a:	bd80      	pop	{r7, pc}

0800104c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	2104      	movs	r1, #4
 800105e:	400a      	ands	r2, r1
 8001060:	2107      	movs	r1, #7
 8001062:	4091      	lsls	r1, r2
 8001064:	000a      	movs	r2, r1
 8001066:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2104      	movs	r1, #4
 800106c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800106e:	40da      	lsrs	r2, r3
 8001070:	0013      	movs	r3, r2
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}

0800107a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	211f      	movs	r1, #31
 800108e:	400a      	ands	r2, r1
 8001090:	210f      	movs	r1, #15
 8001092:	4091      	lsls	r1, r2
 8001094:	000a      	movs	r2, r1
 8001096:	43d2      	mvns	r2, r2
 8001098:	401a      	ands	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	0e9b      	lsrs	r3, r3, #26
 800109e:	210f      	movs	r1, #15
 80010a0:	4019      	ands	r1, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	201f      	movs	r0, #31
 80010a6:	4003      	ands	r3, r0
 80010a8:	4099      	lsls	r1, r3
 80010aa:	000b      	movs	r3, r1
 80010ac:	431a      	orrs	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b004      	add	sp, #16
 80010b8:	bd80      	pop	{r7, pc}

080010ba <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	035b      	lsls	r3, r3, #13
 80010cc:	0b5b      	lsrs	r3, r3, #13
 80010ce:	431a      	orrs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b002      	add	sp, #8
 80010da:	bd80      	pop	{r7, pc}

080010dc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	0352      	lsls	r2, r2, #13
 80010ee:	0b52      	lsrs	r2, r2, #13
 80010f0:	43d2      	mvns	r2, r2
 80010f2:	401a      	ands	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}

08001100 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	0212      	lsls	r2, r2, #8
 8001114:	43d2      	mvns	r2, r2
 8001116:	401a      	ands	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	400b      	ands	r3, r1
 8001120:	4904      	ldr	r1, [pc, #16]	; (8001134 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001122:	400b      	ands	r3, r1
 8001124:	431a      	orrs	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b004      	add	sp, #16
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	07ffff00 	.word	0x07ffff00

08001138 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	4a05      	ldr	r2, [pc, #20]	; (800115c <LL_ADC_EnableInternalRegulator+0x24>)
 8001146:	4013      	ands	r3, r2
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	0552      	lsls	r2, r2, #21
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b002      	add	sp, #8
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	6fffffe8 	.word	0x6fffffe8

08001160 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	055b      	lsls	r3, r3, #21
 8001170:	401a      	ands	r2, r3
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	055b      	lsls	r3, r3, #21
 8001176:	429a      	cmp	r2, r3
 8001178:	d101      	bne.n	800117e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800117e:	2300      	movs	r3, #0
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b002      	add	sp, #8
 8001186:	bd80      	pop	{r7, pc}

08001188 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2201      	movs	r2, #1
 8001196:	4013      	ands	r3, r2
 8001198:	2b01      	cmp	r3, #1
 800119a:	d101      	bne.n	80011a0 <LL_ADC_IsEnabled+0x18>
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <LL_ADC_IsEnabled+0x1a>
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	0018      	movs	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b002      	add	sp, #8
 80011a8:	bd80      	pop	{r7, pc}

080011aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2204      	movs	r2, #4
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d101      	bne.n	80011c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	0018      	movs	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b002      	add	sp, #8
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d4:	231f      	movs	r3, #31
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e17f      	b.n	80014f2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10a      	bne.n	8001210 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff fa79 	bl	80006f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2254      	movs	r2, #84	; 0x54
 800120c:	2100      	movs	r1, #0
 800120e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff ffa3 	bl	8001160 <LL_ADC_IsInternalRegulatorEnabled>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d115      	bne.n	800124a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	0018      	movs	r0, r3
 8001224:	f7ff ff88 	bl	8001138 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001228:	4bb4      	ldr	r3, [pc, #720]	; (80014fc <HAL_ADC_Init+0x330>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	49b4      	ldr	r1, [pc, #720]	; (8001500 <HAL_ADC_Init+0x334>)
 800122e:	0018      	movs	r0, r3
 8001230:	f7fe ff68 	bl	8000104 <__udivsi3>
 8001234:	0003      	movs	r3, r0
 8001236:	3301      	adds	r3, #1
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800123c:	e002      	b.n	8001244 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3b01      	subs	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f9      	bne.n	800123e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	0018      	movs	r0, r3
 8001250:	f7ff ff86 	bl	8001160 <LL_ADC_IsInternalRegulatorEnabled>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d10f      	bne.n	8001278 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	2210      	movs	r2, #16
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001268:	2201      	movs	r2, #1
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001270:	231f      	movs	r3, #31
 8001272:	18fb      	adds	r3, r7, r3
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff ff94 	bl	80011aa <LL_ADC_REG_IsConversionOngoing>
 8001282:	0003      	movs	r3, r0
 8001284:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	2210      	movs	r2, #16
 800128c:	4013      	ands	r3, r2
 800128e:	d000      	beq.n	8001292 <HAL_ADC_Init+0xc6>
 8001290:	e122      	b.n	80014d8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d000      	beq.n	800129a <HAL_ADC_Init+0xce>
 8001298:	e11e      	b.n	80014d8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	4a99      	ldr	r2, [pc, #612]	; (8001504 <HAL_ADC_Init+0x338>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	2202      	movs	r2, #2
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7ff ff6a 	bl	8001188 <LL_ADC_IsEnabled>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d000      	beq.n	80012ba <HAL_ADC_Init+0xee>
 80012b8:	e0ad      	b.n	8001416 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7e1b      	ldrb	r3, [r3, #24]
 80012c2:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80012c4:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7e5b      	ldrb	r3, [r3, #25]
 80012ca:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	7e9b      	ldrb	r3, [r3, #26]
 80012d2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012d4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <HAL_ADC_Init+0x118>
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	015b      	lsls	r3, r3, #5
 80012e2:	e000      	b.n	80012e6 <HAL_ADC_Init+0x11a>
 80012e4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012e6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012ec:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da04      	bge.n	8001300 <HAL_ADC_Init+0x134>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	085b      	lsrs	r3, r3, #1
 80012fe:	e001      	b.n	8001304 <HAL_ADC_Init+0x138>
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001304:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	212c      	movs	r1, #44	; 0x2c
 800130a:	5c5b      	ldrb	r3, [r3, r1]
 800130c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800130e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2220      	movs	r2, #32
 800131a:	5c9b      	ldrb	r3, [r3, r2]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d115      	bne.n	800134c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7e9b      	ldrb	r3, [r3, #26]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d105      	bne.n	8001334 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2280      	movs	r2, #128	; 0x80
 800132c:	0252      	lsls	r2, r2, #9
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	e00b      	b.n	800134c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001338:	2220      	movs	r2, #32
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001344:	2201      	movs	r2, #1
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00a      	beq.n	800136a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001358:	23e0      	movs	r3, #224	; 0xe0
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001362:	4313      	orrs	r3, r2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	4a65      	ldr	r2, [pc, #404]	; (8001508 <HAL_ADC_Init+0x33c>)
 8001372:	4013      	ands	r3, r2
 8001374:	0019      	movs	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	430a      	orrs	r2, r1
 800137e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	0f9b      	lsrs	r3, r3, #30
 8001386:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800138c:	4313      	orrs	r3, r2
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4313      	orrs	r3, r2
 8001392:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	223c      	movs	r2, #60	; 0x3c
 8001398:	5c9b      	ldrb	r3, [r3, r2]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d111      	bne.n	80013c2 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	0f9b      	lsrs	r3, r3, #30
 80013a4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80013aa:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 80013b0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80013b6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	2201      	movs	r2, #1
 80013be:	4313      	orrs	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	4a50      	ldr	r2, [pc, #320]	; (800150c <HAL_ADC_Init+0x340>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	0019      	movs	r1, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	23c0      	movs	r3, #192	; 0xc0
 80013de:	061b      	lsls	r3, r3, #24
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d018      	beq.n	8001416 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	05db      	lsls	r3, r3, #23
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d012      	beq.n	8001416 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	061b      	lsls	r3, r3, #24
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d00c      	beq.n	8001416 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80013fc:	4b44      	ldr	r3, [pc, #272]	; (8001510 <HAL_ADC_Init+0x344>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a44      	ldr	r2, [pc, #272]	; (8001514 <HAL_ADC_Init+0x348>)
 8001402:	4013      	ands	r3, r2
 8001404:	0019      	movs	r1, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	23f0      	movs	r3, #240	; 0xf0
 800140c:	039b      	lsls	r3, r3, #14
 800140e:	401a      	ands	r2, r3
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <HAL_ADC_Init+0x344>)
 8001412:	430a      	orrs	r2, r1
 8001414:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141e:	001a      	movs	r2, r3
 8001420:	2100      	movs	r1, #0
 8001422:	f7ff fdf6 	bl	8001012 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142e:	493a      	ldr	r1, [pc, #232]	; (8001518 <HAL_ADC_Init+0x34c>)
 8001430:	001a      	movs	r2, r3
 8001432:	f7ff fdee 	bl	8001012 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d109      	bne.n	8001452 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2110      	movs	r1, #16
 800144a:	4249      	negs	r1, r1
 800144c:	430a      	orrs	r2, r1
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
 8001450:	e018      	b.n	8001484 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	039b      	lsls	r3, r3, #14
 800145a:	429a      	cmp	r2, r3
 800145c:	d112      	bne.n	8001484 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	3b01      	subs	r3, #1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	221c      	movs	r2, #28
 800146e:	4013      	ands	r3, r2
 8001470:	2210      	movs	r2, #16
 8001472:	4252      	negs	r2, r2
 8001474:	409a      	lsls	r2, r3
 8001476:	0011      	movs	r1, r2
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2100      	movs	r1, #0
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff fdde 	bl	800104c <LL_ADC_GetSamplingTimeCommonChannels>
 8001490:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001496:	429a      	cmp	r2, r3
 8001498:	d10b      	bne.n	80014b2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	2203      	movs	r2, #3
 80014a6:	4393      	bics	r3, r2
 80014a8:	2201      	movs	r2, #1
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80014b0:	e01c      	b.n	80014ec <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	2212      	movs	r2, #18
 80014b8:	4393      	bics	r3, r2
 80014ba:	2210      	movs	r2, #16
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c6:	2201      	movs	r2, #1
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80014ce:	231f      	movs	r3, #31
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80014d6:	e009      	b.n	80014ec <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014dc:	2210      	movs	r2, #16
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014e4:	231f      	movs	r3, #31
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80014ec:	231f      	movs	r3, #31
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	781b      	ldrb	r3, [r3, #0]
}
 80014f2:	0018      	movs	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b008      	add	sp, #32
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	20000000 	.word	0x20000000
 8001500:	00030d40 	.word	0x00030d40
 8001504:	fffffefd 	.word	0xfffffefd
 8001508:	ffde0201 	.word	0xffde0201
 800150c:	1ffffc02 	.word	0x1ffffc02
 8001510:	40012708 	.word	0x40012708
 8001514:	ffc3ffff 	.word	0xffc3ffff
 8001518:	07ffff04 	.word	0x07ffff04

0800151c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001526:	2317      	movs	r3, #23
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2254      	movs	r2, #84	; 0x54
 8001536:	5c9b      	ldrb	r3, [r3, r2]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x24>
 800153c:	2302      	movs	r3, #2
 800153e:	e1c0      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x3a6>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2254      	movs	r2, #84	; 0x54
 8001544:	2101      	movs	r1, #1
 8001546:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff fe2c 	bl	80011aa <LL_ADC_REG_IsConversionOngoing>
 8001552:	1e03      	subs	r3, r0, #0
 8001554:	d000      	beq.n	8001558 <HAL_ADC_ConfigChannel+0x3c>
 8001556:	e1a3      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d100      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x46>
 8001560:	e143      	b.n	80017ea <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	061b      	lsls	r3, r3, #24
 800156a:	429a      	cmp	r2, r3
 800156c:	d004      	beq.n	8001578 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001572:	4ac1      	ldr	r2, [pc, #772]	; (8001878 <HAL_ADC_ConfigChannel+0x35c>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d108      	bne.n	800158a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0019      	movs	r1, r3
 8001582:	0010      	movs	r0, r2
 8001584:	f7ff fd99 	bl	80010ba <LL_ADC_REG_SetSequencerChAdd>
 8001588:	e0c9      	b.n	800171e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	211f      	movs	r1, #31
 8001594:	400b      	ands	r3, r1
 8001596:	210f      	movs	r1, #15
 8001598:	4099      	lsls	r1, r3
 800159a:	000b      	movs	r3, r1
 800159c:	43db      	mvns	r3, r3
 800159e:	4013      	ands	r3, r2
 80015a0:	0019      	movs	r1, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	035b      	lsls	r3, r3, #13
 80015a8:	0b5b      	lsrs	r3, r3, #13
 80015aa:	d105      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x9c>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0e9b      	lsrs	r3, r3, #26
 80015b2:	221f      	movs	r2, #31
 80015b4:	4013      	ands	r3, r2
 80015b6:	e098      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	4013      	ands	r3, r2
 80015c0:	d000      	beq.n	80015c4 <HAL_ADC_ConfigChannel+0xa8>
 80015c2:	e091      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x1cc>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2202      	movs	r2, #2
 80015ca:	4013      	ands	r3, r2
 80015cc:	d000      	beq.n	80015d0 <HAL_ADC_ConfigChannel+0xb4>
 80015ce:	e089      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x1c8>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2204      	movs	r2, #4
 80015d6:	4013      	ands	r3, r2
 80015d8:	d000      	beq.n	80015dc <HAL_ADC_ConfigChannel+0xc0>
 80015da:	e081      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x1c4>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2208      	movs	r2, #8
 80015e2:	4013      	ands	r3, r2
 80015e4:	d000      	beq.n	80015e8 <HAL_ADC_ConfigChannel+0xcc>
 80015e6:	e079      	b.n	80016dc <HAL_ADC_ConfigChannel+0x1c0>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2210      	movs	r2, #16
 80015ee:	4013      	ands	r3, r2
 80015f0:	d000      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0xd8>
 80015f2:	e071      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x1bc>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2220      	movs	r2, #32
 80015fa:	4013      	ands	r3, r2
 80015fc:	d000      	beq.n	8001600 <HAL_ADC_ConfigChannel+0xe4>
 80015fe:	e069      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x1b8>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2240      	movs	r2, #64	; 0x40
 8001606:	4013      	ands	r3, r2
 8001608:	d000      	beq.n	800160c <HAL_ADC_ConfigChannel+0xf0>
 800160a:	e061      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x1b4>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2280      	movs	r2, #128	; 0x80
 8001612:	4013      	ands	r3, r2
 8001614:	d000      	beq.n	8001618 <HAL_ADC_ConfigChannel+0xfc>
 8001616:	e059      	b.n	80016cc <HAL_ADC_ConfigChannel+0x1b0>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4013      	ands	r3, r2
 8001622:	d151      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x1ac>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4013      	ands	r3, r2
 800162e:	d149      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x1a8>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4013      	ands	r3, r2
 800163a:	d141      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x1a4>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	4013      	ands	r3, r2
 8001646:	d139      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x1a0>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	015b      	lsls	r3, r3, #5
 8001650:	4013      	ands	r3, r2
 8001652:	d131      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x19c>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	019b      	lsls	r3, r3, #6
 800165c:	4013      	ands	r3, r2
 800165e:	d129      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x198>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	01db      	lsls	r3, r3, #7
 8001668:	4013      	ands	r3, r2
 800166a:	d121      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x194>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	4013      	ands	r3, r2
 8001676:	d119      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x190>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	025b      	lsls	r3, r3, #9
 8001680:	4013      	ands	r3, r2
 8001682:	d111      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x18c>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	029b      	lsls	r3, r3, #10
 800168c:	4013      	ands	r3, r2
 800168e:	d109      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x188>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	02db      	lsls	r3, r3, #11
 8001698:	4013      	ands	r3, r2
 800169a:	d001      	beq.n	80016a0 <HAL_ADC_ConfigChannel+0x184>
 800169c:	2312      	movs	r3, #18
 800169e:	e024      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016a0:	2300      	movs	r3, #0
 80016a2:	e022      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016a4:	2311      	movs	r3, #17
 80016a6:	e020      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016a8:	2310      	movs	r3, #16
 80016aa:	e01e      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016ac:	230f      	movs	r3, #15
 80016ae:	e01c      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016b0:	230e      	movs	r3, #14
 80016b2:	e01a      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016b4:	230d      	movs	r3, #13
 80016b6:	e018      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016b8:	230c      	movs	r3, #12
 80016ba:	e016      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016bc:	230b      	movs	r3, #11
 80016be:	e014      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016c0:	230a      	movs	r3, #10
 80016c2:	e012      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016c4:	2309      	movs	r3, #9
 80016c6:	e010      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016c8:	2308      	movs	r3, #8
 80016ca:	e00e      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016cc:	2307      	movs	r3, #7
 80016ce:	e00c      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016d0:	2306      	movs	r3, #6
 80016d2:	e00a      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016d4:	2305      	movs	r3, #5
 80016d6:	e008      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016d8:	2304      	movs	r3, #4
 80016da:	e006      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016dc:	2303      	movs	r3, #3
 80016de:	e004      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e002      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_ADC_ConfigChannel+0x1ce>
 80016e8:	2300      	movs	r3, #0
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	6852      	ldr	r2, [r2, #4]
 80016ee:	201f      	movs	r0, #31
 80016f0:	4002      	ands	r2, r0
 80016f2:	4093      	lsls	r3, r2
 80016f4:	000a      	movs	r2, r1
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	429a      	cmp	r2, r3
 800170a:	d808      	bhi.n	800171e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	001a      	movs	r2, r3
 800171a:	f7ff fcae 	bl	800107a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	6819      	ldr	r1, [r3, #0]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	001a      	movs	r2, r3
 800172c:	f7ff fce8 	bl	8001100 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db00      	blt.n	800173a <HAL_ADC_ConfigChannel+0x21e>
 8001738:	e0bc      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800173a:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_ADC_ConfigChannel+0x360>)
 800173c:	0018      	movs	r0, r3
 800173e:	f7ff fc5b 	bl	8000ff8 <LL_ADC_GetCommonPathInternalCh>
 8001742:	0003      	movs	r3, r0
 8001744:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a4d      	ldr	r2, [pc, #308]	; (8001880 <HAL_ADC_ConfigChannel+0x364>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d122      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001758:	d11d      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	0412      	lsls	r2, r2, #16
 8001760:	4313      	orrs	r3, r2
 8001762:	4a46      	ldr	r2, [pc, #280]	; (800187c <HAL_ADC_ConfigChannel+0x360>)
 8001764:	0019      	movs	r1, r3
 8001766:	0010      	movs	r0, r2
 8001768:	f7ff fc32 	bl	8000fd0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800176c:	4b45      	ldr	r3, [pc, #276]	; (8001884 <HAL_ADC_ConfigChannel+0x368>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4945      	ldr	r1, [pc, #276]	; (8001888 <HAL_ADC_ConfigChannel+0x36c>)
 8001772:	0018      	movs	r0, r3
 8001774:	f7fe fcc6 	bl	8000104 <__udivsi3>
 8001778:	0003      	movs	r3, r0
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	0013      	movs	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	189b      	adds	r3, r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001786:	e002      	b.n	800178e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3b01      	subs	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f9      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001794:	e08e      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a3c      	ldr	r2, [pc, #240]	; (800188c <HAL_ADC_ConfigChannel+0x370>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d10e      	bne.n	80017be <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	045b      	lsls	r3, r3, #17
 80017a6:	4013      	ands	r3, r2
 80017a8:	d109      	bne.n	80017be <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	0452      	lsls	r2, r2, #17
 80017b0:	4313      	orrs	r3, r2
 80017b2:	4a32      	ldr	r2, [pc, #200]	; (800187c <HAL_ADC_ConfigChannel+0x360>)
 80017b4:	0019      	movs	r1, r3
 80017b6:	0010      	movs	r0, r2
 80017b8:	f7ff fc0a 	bl	8000fd0 <LL_ADC_SetCommonPathInternalCh>
 80017bc:	e07a      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a33      	ldr	r2, [pc, #204]	; (8001890 <HAL_ADC_ConfigChannel+0x374>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d000      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x2ae>
 80017c8:	e074      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	03db      	lsls	r3, r3, #15
 80017d0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80017d2:	d000      	beq.n	80017d6 <HAL_ADC_ConfigChannel+0x2ba>
 80017d4:	e06e      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2280      	movs	r2, #128	; 0x80
 80017da:	03d2      	lsls	r2, r2, #15
 80017dc:	4313      	orrs	r3, r2
 80017de:	4a27      	ldr	r2, [pc, #156]	; (800187c <HAL_ADC_ConfigChannel+0x360>)
 80017e0:	0019      	movs	r1, r3
 80017e2:	0010      	movs	r0, r2
 80017e4:	f7ff fbf4 	bl	8000fd0 <LL_ADC_SetCommonPathInternalCh>
 80017e8:	e064      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	061b      	lsls	r3, r3, #24
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d004      	beq.n	8001800 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017fa:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <HAL_ADC_ConfigChannel+0x35c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d107      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0019      	movs	r1, r3
 800180a:	0010      	movs	r0, r2
 800180c:	f7ff fc66 	bl	80010dc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	da4d      	bge.n	80018b4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_ADC_ConfigChannel+0x360>)
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff fbec 	bl	8000ff8 <LL_ADC_GetCommonPathInternalCh>
 8001820:	0003      	movs	r3, r0
 8001822:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a15      	ldr	r2, [pc, #84]	; (8001880 <HAL_ADC_ConfigChannel+0x364>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d108      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4a18      	ldr	r2, [pc, #96]	; (8001894 <HAL_ADC_ConfigChannel+0x378>)
 8001832:	4013      	ands	r3, r2
 8001834:	4a11      	ldr	r2, [pc, #68]	; (800187c <HAL_ADC_ConfigChannel+0x360>)
 8001836:	0019      	movs	r1, r3
 8001838:	0010      	movs	r0, r2
 800183a:	f7ff fbc9 	bl	8000fd0 <LL_ADC_SetCommonPathInternalCh>
 800183e:	e039      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a11      	ldr	r2, [pc, #68]	; (800188c <HAL_ADC_ConfigChannel+0x370>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d108      	bne.n	800185c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4a12      	ldr	r2, [pc, #72]	; (8001898 <HAL_ADC_ConfigChannel+0x37c>)
 800184e:	4013      	ands	r3, r2
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_ADC_ConfigChannel+0x360>)
 8001852:	0019      	movs	r1, r3
 8001854:	0010      	movs	r0, r2
 8001856:	f7ff fbbb 	bl	8000fd0 <LL_ADC_SetCommonPathInternalCh>
 800185a:	e02b      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <HAL_ADC_ConfigChannel+0x374>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d126      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4a0c      	ldr	r2, [pc, #48]	; (800189c <HAL_ADC_ConfigChannel+0x380>)
 800186a:	4013      	ands	r3, r2
 800186c:	4a03      	ldr	r2, [pc, #12]	; (800187c <HAL_ADC_ConfigChannel+0x360>)
 800186e:	0019      	movs	r1, r3
 8001870:	0010      	movs	r0, r2
 8001872:	f7ff fbad 	bl	8000fd0 <LL_ADC_SetCommonPathInternalCh>
 8001876:	e01d      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x398>
 8001878:	80000004 	.word	0x80000004
 800187c:	40012708 	.word	0x40012708
 8001880:	b0001000 	.word	0xb0001000
 8001884:	20000000 	.word	0x20000000
 8001888:	00030d40 	.word	0x00030d40
 800188c:	b8004000 	.word	0xb8004000
 8001890:	b4002000 	.word	0xb4002000
 8001894:	ff7fffff 	.word	0xff7fffff
 8001898:	feffffff 	.word	0xfeffffff
 800189c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	2220      	movs	r2, #32
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018ac:	2317      	movs	r3, #23
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2254      	movs	r2, #84	; 0x54
 80018b8:	2100      	movs	r1, #0
 80018ba:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80018bc:	2317      	movs	r3, #23
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	781b      	ldrb	r3, [r3, #0]
}
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b006      	add	sp, #24
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	0002      	movs	r2, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018da:	1dfb      	adds	r3, r7, #7
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b7f      	cmp	r3, #127	; 0x7f
 80018e0:	d828      	bhi.n	8001934 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e2:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <__NVIC_SetPriority+0xd4>)
 80018e4:	1dfb      	adds	r3, r7, #7
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b25b      	sxtb	r3, r3
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	33c0      	adds	r3, #192	; 0xc0
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	589b      	ldr	r3, [r3, r2]
 80018f2:	1dfa      	adds	r2, r7, #7
 80018f4:	7812      	ldrb	r2, [r2, #0]
 80018f6:	0011      	movs	r1, r2
 80018f8:	2203      	movs	r2, #3
 80018fa:	400a      	ands	r2, r1
 80018fc:	00d2      	lsls	r2, r2, #3
 80018fe:	21ff      	movs	r1, #255	; 0xff
 8001900:	4091      	lsls	r1, r2
 8001902:	000a      	movs	r2, r1
 8001904:	43d2      	mvns	r2, r2
 8001906:	401a      	ands	r2, r3
 8001908:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	22ff      	movs	r2, #255	; 0xff
 8001910:	401a      	ands	r2, r3
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	0018      	movs	r0, r3
 8001918:	2303      	movs	r3, #3
 800191a:	4003      	ands	r3, r0
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001920:	481f      	ldr	r0, [pc, #124]	; (80019a0 <__NVIC_SetPriority+0xd4>)
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b25b      	sxtb	r3, r3
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	430a      	orrs	r2, r1
 800192c:	33c0      	adds	r3, #192	; 0xc0
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001932:	e031      	b.n	8001998 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001934:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <__NVIC_SetPriority+0xd8>)
 8001936:	1dfb      	adds	r3, r7, #7
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	0019      	movs	r1, r3
 800193c:	230f      	movs	r3, #15
 800193e:	400b      	ands	r3, r1
 8001940:	3b08      	subs	r3, #8
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3306      	adds	r3, #6
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	18d3      	adds	r3, r2, r3
 800194a:	3304      	adds	r3, #4
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	1dfa      	adds	r2, r7, #7
 8001950:	7812      	ldrb	r2, [r2, #0]
 8001952:	0011      	movs	r1, r2
 8001954:	2203      	movs	r2, #3
 8001956:	400a      	ands	r2, r1
 8001958:	00d2      	lsls	r2, r2, #3
 800195a:	21ff      	movs	r1, #255	; 0xff
 800195c:	4091      	lsls	r1, r2
 800195e:	000a      	movs	r2, r1
 8001960:	43d2      	mvns	r2, r2
 8001962:	401a      	ands	r2, r3
 8001964:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	019b      	lsls	r3, r3, #6
 800196a:	22ff      	movs	r2, #255	; 0xff
 800196c:	401a      	ands	r2, r3
 800196e:	1dfb      	adds	r3, r7, #7
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	0018      	movs	r0, r3
 8001974:	2303      	movs	r3, #3
 8001976:	4003      	ands	r3, r0
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800197c:	4809      	ldr	r0, [pc, #36]	; (80019a4 <__NVIC_SetPriority+0xd8>)
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	001c      	movs	r4, r3
 8001984:	230f      	movs	r3, #15
 8001986:	4023      	ands	r3, r4
 8001988:	3b08      	subs	r3, #8
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	430a      	orrs	r2, r1
 800198e:	3306      	adds	r3, #6
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	18c3      	adds	r3, r0, r3
 8001994:	3304      	adds	r3, #4
 8001996:	601a      	str	r2, [r3, #0]
}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b003      	add	sp, #12
 800199e:	bd90      	pop	{r4, r7, pc}
 80019a0:	e000e100 	.word	0xe000e100
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	1e5a      	subs	r2, r3, #1
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	045b      	lsls	r3, r3, #17
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d301      	bcc.n	80019c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019bc:	2301      	movs	r3, #1
 80019be:	e010      	b.n	80019e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <SysTick_Config+0x44>)
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	3a01      	subs	r2, #1
 80019c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c8:	2301      	movs	r3, #1
 80019ca:	425b      	negs	r3, r3
 80019cc:	2103      	movs	r1, #3
 80019ce:	0018      	movs	r0, r3
 80019d0:	f7ff ff7c 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SysTick_Config+0x44>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SysTick_Config+0x44>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	0018      	movs	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b002      	add	sp, #8
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	210f      	movs	r1, #15
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	1c02      	adds	r2, r0, #0
 8001a00:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff ff5d 	bl	80018cc <__NVIC_SetPriority>
}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b004      	add	sp, #16
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff ffbf 	bl	80019a8 <SysTick_Config>
 8001a2a:	0003      	movs	r3, r0
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b002      	add	sp, #8
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a42:	e147      	b.n	8001cd4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4091      	lsls	r1, r2
 8001a4e:	000a      	movs	r2, r1
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d100      	bne.n	8001a5c <HAL_GPIO_Init+0x28>
 8001a5a:	e138      	b.n	8001cce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2203      	movs	r2, #3
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d005      	beq.n	8001a74 <HAL_GPIO_Init+0x40>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d130      	bne.n	8001ad6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	409a      	lsls	r2, r3
 8001a82:	0013      	movs	r3, r2
 8001a84:	43da      	mvns	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	409a      	lsls	r2, r3
 8001a96:	0013      	movs	r3, r2
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aaa:	2201      	movs	r2, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2203      	movs	r2, #3
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d017      	beq.n	8001b12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	409a      	lsls	r2, r3
 8001af0:	0013      	movs	r3, r2
 8001af2:	43da      	mvns	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	409a      	lsls	r2, r3
 8001b04:	0013      	movs	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2203      	movs	r2, #3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d123      	bne.n	8001b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	58d3      	ldr	r3, [r2, r3]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2207      	movs	r2, #7
 8001b30:	4013      	ands	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	409a      	lsls	r2, r3
 8001b38:	0013      	movs	r3, r2
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2107      	movs	r1, #7
 8001b4a:	400b      	ands	r3, r1
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	0013      	movs	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	6939      	ldr	r1, [r7, #16]
 8001b64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	409a      	lsls	r2, r3
 8001b74:	0013      	movs	r3, r2
 8001b76:	43da      	mvns	r2, r3
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2203      	movs	r2, #3
 8001b84:	401a      	ands	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	23c0      	movs	r3, #192	; 0xc0
 8001ba0:	029b      	lsls	r3, r3, #10
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d100      	bne.n	8001ba8 <HAL_GPIO_Init+0x174>
 8001ba6:	e092      	b.n	8001cce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ba8:	4a50      	ldr	r2, [pc, #320]	; (8001cec <HAL_GPIO_Init+0x2b8>)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3318      	adds	r3, #24
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	589b      	ldr	r3, [r3, r2]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2203      	movs	r2, #3
 8001bba:	4013      	ands	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	23a0      	movs	r3, #160	; 0xa0
 8001bd0:	05db      	lsls	r3, r3, #23
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0x1ca>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a45      	ldr	r2, [pc, #276]	; (8001cf0 <HAL_GPIO_Init+0x2bc>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x1c6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a44      	ldr	r2, [pc, #272]	; (8001cf4 <HAL_GPIO_Init+0x2c0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x1c2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a43      	ldr	r2, [pc, #268]	; (8001cf8 <HAL_GPIO_Init+0x2c4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x1be>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x1cc>
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	e004      	b.n	8001c00 <HAL_GPIO_Init+0x1cc>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e002      	b.n	8001c00 <HAL_GPIO_Init+0x1cc>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_GPIO_Init+0x1cc>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	2103      	movs	r1, #3
 8001c04:	400a      	ands	r2, r1
 8001c06:	00d2      	lsls	r2, r2, #3
 8001c08:	4093      	lsls	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c10:	4936      	ldr	r1, [pc, #216]	; (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3318      	adds	r3, #24
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c1e:	4b33      	ldr	r3, [pc, #204]	; (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43da      	mvns	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	035b      	lsls	r3, r3, #13
 8001c36:	4013      	ands	r3, r2
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c42:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43da      	mvns	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	039b      	lsls	r3, r3, #14
 8001c60:	4013      	ands	r3, r2
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c72:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c74:	2384      	movs	r3, #132	; 0x84
 8001c76:	58d3      	ldr	r3, [r2, r3]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	029b      	lsls	r3, r3, #10
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c98:	4914      	ldr	r1, [pc, #80]	; (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c9a:	2284      	movs	r2, #132	; 0x84
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <HAL_GPIO_Init+0x2b8>)
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	58d3      	ldr	r3, [r2, r3]
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43da      	mvns	r2, r3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	025b      	lsls	r3, r3, #9
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cc6:	4909      	ldr	r1, [pc, #36]	; (8001cec <HAL_GPIO_Init+0x2b8>)
 8001cc8:	2280      	movs	r2, #128	; 0x80
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	40da      	lsrs	r2, r3
 8001cdc:	1e13      	subs	r3, r2, #0
 8001cde:	d000      	beq.n	8001ce2 <HAL_GPIO_Init+0x2ae>
 8001ce0:	e6b0      	b.n	8001a44 <HAL_GPIO_Init+0x10>
  }
}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b006      	add	sp, #24
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021800 	.word	0x40021800
 8001cf0:	50000400 	.word	0x50000400
 8001cf4:	50000800 	.word	0x50000800
 8001cf8:	50000c00 	.word	0x50000c00

08001cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	0008      	movs	r0, r1
 8001d06:	0011      	movs	r1, r2
 8001d08:	1cbb      	adds	r3, r7, #2
 8001d0a:	1c02      	adds	r2, r0, #0
 8001d0c:	801a      	strh	r2, [r3, #0]
 8001d0e:	1c7b      	adds	r3, r7, #1
 8001d10:	1c0a      	adds	r2, r1, #0
 8001d12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d14:	1c7b      	adds	r3, r7, #1
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d004      	beq.n	8001d26 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d1c:	1cbb      	adds	r3, r7, #2
 8001d1e:	881a      	ldrh	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d24:	e003      	b.n	8001d2e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d26:	1cbb      	adds	r3, r7, #2
 8001d28:	881a      	ldrh	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b002      	add	sp, #8
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a19      	ldr	r2, [pc, #100]	; (8001dac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d11f      	bne.n	8001d9c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	0013      	movs	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	189b      	adds	r3, r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4912      	ldr	r1, [pc, #72]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f7fe f9ca 	bl	8000104 <__udivsi3>
 8001d70:	0003      	movs	r3, r0
 8001d72:	3301      	adds	r3, #1
 8001d74:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d76:	e008      	b.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	e001      	b.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e009      	b.n	8001d9e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	401a      	ands	r2, r3
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d0ed      	beq.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	0018      	movs	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b004      	add	sp, #16
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	40007000 	.word	0x40007000
 8001dac:	fffff9ff 	.word	0xfffff9ff
 8001db0:	20000000 	.word	0x20000000
 8001db4:	000f4240 	.word	0x000f4240

08001db8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <LL_RCC_GetAPB1Prescaler+0x14>)
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	23e0      	movs	r3, #224	; 0xe0
 8001dc2:	01db      	lsls	r3, r3, #7
 8001dc4:	4013      	ands	r3, r2
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e2fe      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2201      	movs	r2, #1
 8001de8:	4013      	ands	r3, r2
 8001dea:	d100      	bne.n	8001dee <HAL_RCC_OscConfig+0x1e>
 8001dec:	e07c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dee:	4bc3      	ldr	r3, [pc, #780]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2238      	movs	r2, #56	; 0x38
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df8:	4bc0      	ldr	r3, [pc, #768]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	4013      	ands	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d102      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3e>
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d002      	beq.n	8001e14 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d10b      	bne.n	8001e2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e14:	4bb9      	ldr	r3, [pc, #740]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	029b      	lsls	r3, r3, #10
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d062      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x116>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d15e      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e2d9      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	025b      	lsls	r3, r3, #9
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_OscConfig+0x78>
 8001e38:	4bb0      	ldr	r3, [pc, #704]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4baf      	ldr	r3, [pc, #700]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	0249      	lsls	r1, r1, #9
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e020      	b.n	8001e8a <HAL_RCC_OscConfig+0xba>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	23a0      	movs	r3, #160	; 0xa0
 8001e4e:	02db      	lsls	r3, r3, #11
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d10e      	bne.n	8001e72 <HAL_RCC_OscConfig+0xa2>
 8001e54:	4ba9      	ldr	r3, [pc, #676]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4ba8      	ldr	r3, [pc, #672]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	02c9      	lsls	r1, r1, #11
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	4ba6      	ldr	r3, [pc, #664]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4ba5      	ldr	r3, [pc, #660]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	0249      	lsls	r1, r1, #9
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e00b      	b.n	8001e8a <HAL_RCC_OscConfig+0xba>
 8001e72:	4ba2      	ldr	r3, [pc, #648]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4ba1      	ldr	r3, [pc, #644]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001e78:	49a1      	ldr	r1, [pc, #644]	; (8002100 <HAL_RCC_OscConfig+0x330>)
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	4b9f      	ldr	r3, [pc, #636]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b9e      	ldr	r3, [pc, #632]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001e84:	499f      	ldr	r1, [pc, #636]	; (8002104 <HAL_RCC_OscConfig+0x334>)
 8001e86:	400a      	ands	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d014      	beq.n	8001ebc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7ff f86f 	bl	8000f74 <HAL_GetTick>
 8001e96:	0003      	movs	r3, r0
 8001e98:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff f86a 	bl	8000f74 <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e298      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eae:	4b93      	ldr	r3, [pc, #588]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	029b      	lsls	r3, r3, #10
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0xcc>
 8001eba:	e015      	b.n	8001ee8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f85a 	bl	8000f74 <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec6:	f7ff f855 	bl	8000f74 <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	; 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e283      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ed8:	4b88      	ldr	r3, [pc, #544]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	029b      	lsls	r3, r3, #10
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0xf6>
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2202      	movs	r2, #2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d100      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x124>
 8001ef2:	e099      	b.n	8002028 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef4:	4b81      	ldr	r3, [pc, #516]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2238      	movs	r2, #56	; 0x38
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001efe:	4b7f      	ldr	r3, [pc, #508]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2203      	movs	r2, #3
 8001f04:	4013      	ands	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d102      	bne.n	8001f14 <HAL_RCC_OscConfig+0x144>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d002      	beq.n	8001f1a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d135      	bne.n	8001f86 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f1a:	4b78      	ldr	r3, [pc, #480]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4013      	ands	r3, r2
 8001f24:	d005      	beq.n	8001f32 <HAL_RCC_OscConfig+0x162>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e256      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4b72      	ldr	r3, [pc, #456]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4a74      	ldr	r2, [pc, #464]	; (8002108 <HAL_RCC_OscConfig+0x338>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	021a      	lsls	r2, r3, #8
 8001f42:	4b6e      	ldr	r3, [pc, #440]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d112      	bne.n	8001f74 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f4e:	4b6b      	ldr	r3, [pc, #428]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a6e      	ldr	r2, [pc, #440]	; (800210c <HAL_RCC_OscConfig+0x33c>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f62:	4b66      	ldr	r3, [pc, #408]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0adb      	lsrs	r3, r3, #11
 8001f68:	2207      	movs	r2, #7
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	4a68      	ldr	r2, [pc, #416]	; (8002110 <HAL_RCC_OscConfig+0x340>)
 8001f6e:	40da      	lsrs	r2, r3
 8001f70:	4b68      	ldr	r3, [pc, #416]	; (8002114 <HAL_RCC_OscConfig+0x344>)
 8001f72:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f74:	4b68      	ldr	r3, [pc, #416]	; (8002118 <HAL_RCC_OscConfig+0x348>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f7fe ff9f 	bl	8000ebc <HAL_InitTick>
 8001f7e:	1e03      	subs	r3, r0, #0
 8001f80:	d051      	beq.n	8002026 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e22c      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d030      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f8e:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a5e      	ldr	r2, [pc, #376]	; (800210c <HAL_RCC_OscConfig+0x33c>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	4b57      	ldr	r3, [pc, #348]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001fa2:	4b56      	ldr	r3, [pc, #344]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4b55      	ldr	r3, [pc, #340]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	2180      	movs	r1, #128	; 0x80
 8001faa:	0049      	lsls	r1, r1, #1
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ffe0 	bl	8000f74 <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fba:	f7fe ffdb 	bl	8000f74 <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e209      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fcc:	4b4b      	ldr	r3, [pc, #300]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b48      	ldr	r3, [pc, #288]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a4a      	ldr	r2, [pc, #296]	; (8002108 <HAL_RCC_OscConfig+0x338>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	021a      	lsls	r2, r3, #8
 8001fe8:	4b44      	ldr	r3, [pc, #272]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	e01b      	b.n	8002028 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ff0:	4b42      	ldr	r3, [pc, #264]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b41      	ldr	r3, [pc, #260]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8001ff6:	4949      	ldr	r1, [pc, #292]	; (800211c <HAL_RCC_OscConfig+0x34c>)
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe ffba 	bl	8000f74 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002006:	f7fe ffb5 	bl	8000f74 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e1e3      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002018:	4b38      	ldr	r3, [pc, #224]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4013      	ands	r3, r2
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_OscConfig+0x236>
 8002024:	e000      	b.n	8002028 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002026:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2208      	movs	r2, #8
 800202e:	4013      	ands	r3, r2
 8002030:	d047      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002032:	4b32      	ldr	r3, [pc, #200]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2238      	movs	r2, #56	; 0x38
 8002038:	4013      	ands	r3, r2
 800203a:	2b18      	cmp	r3, #24
 800203c:	d10a      	bne.n	8002054 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800203e:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8002040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002042:	2202      	movs	r2, #2
 8002044:	4013      	ands	r3, r2
 8002046:	d03c      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2f2>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d138      	bne.n	80020c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e1c5      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d019      	beq.n	8002090 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 800205e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8002062:	2101      	movs	r1, #1
 8002064:	430a      	orrs	r2, r1
 8002066:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7fe ff84 	bl	8000f74 <HAL_GetTick>
 800206c:	0003      	movs	r3, r0
 800206e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002072:	f7fe ff7f 	bl	8000f74 <HAL_GetTick>
 8002076:	0002      	movs	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e1ad      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8002086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002088:	2202      	movs	r2, #2
 800208a:	4013      	ands	r3, r2
 800208c:	d0f1      	beq.n	8002072 <HAL_RCC_OscConfig+0x2a2>
 800208e:	e018      	b.n	80020c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8002092:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 8002096:	2101      	movs	r1, #1
 8002098:	438a      	bics	r2, r1
 800209a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe ff6a 	bl	8000f74 <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a6:	f7fe ff65 	bl	8000f74 <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e193      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020b8:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 80020ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020bc:	2202      	movs	r2, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	d1f1      	bne.n	80020a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2204      	movs	r2, #4
 80020c8:	4013      	ands	r3, r2
 80020ca:	d100      	bne.n	80020ce <HAL_RCC_OscConfig+0x2fe>
 80020cc:	e0c6      	b.n	800225c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	231f      	movs	r3, #31
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2238      	movs	r2, #56	; 0x38
 80020dc:	4013      	ands	r3, r2
 80020de:	2b20      	cmp	r3, #32
 80020e0:	d11e      	bne.n	8002120 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_OscConfig+0x32c>)
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	2202      	movs	r2, #2
 80020e8:	4013      	ands	r3, r2
 80020ea:	d100      	bne.n	80020ee <HAL_RCC_OscConfig+0x31e>
 80020ec:	e0b6      	b.n	800225c <HAL_RCC_OscConfig+0x48c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d000      	beq.n	80020f8 <HAL_RCC_OscConfig+0x328>
 80020f6:	e0b1      	b.n	800225c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e171      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
 80020fc:	40021000 	.word	0x40021000
 8002100:	fffeffff 	.word	0xfffeffff
 8002104:	fffbffff 	.word	0xfffbffff
 8002108:	ffff80ff 	.word	0xffff80ff
 800210c:	ffffc7ff 	.word	0xffffc7ff
 8002110:	00f42400 	.word	0x00f42400
 8002114:	20000000 	.word	0x20000000
 8002118:	20000004 	.word	0x20000004
 800211c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002120:	4bb1      	ldr	r3, [pc, #708]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 8002122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	4013      	ands	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_RCC_OscConfig+0x360>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x362>
 8002130:	2300      	movs	r3, #0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d011      	beq.n	800215a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4bac      	ldr	r3, [pc, #688]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 8002138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800213a:	4bab      	ldr	r3, [pc, #684]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	0549      	lsls	r1, r1, #21
 8002140:	430a      	orrs	r2, r1
 8002142:	63da      	str	r2, [r3, #60]	; 0x3c
 8002144:	4ba8      	ldr	r3, [pc, #672]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 8002146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	055b      	lsls	r3, r3, #21
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002152:	231f      	movs	r3, #31
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800215a:	4ba4      	ldr	r3, [pc, #656]	; (80023ec <HAL_RCC_OscConfig+0x61c>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4013      	ands	r3, r2
 8002164:	d11a      	bne.n	800219c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002166:	4ba1      	ldr	r3, [pc, #644]	; (80023ec <HAL_RCC_OscConfig+0x61c>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4ba0      	ldr	r3, [pc, #640]	; (80023ec <HAL_RCC_OscConfig+0x61c>)
 800216c:	2180      	movs	r1, #128	; 0x80
 800216e:	0049      	lsls	r1, r1, #1
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002174:	f7fe fefe 	bl	8000f74 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217e:	f7fe fef9 	bl	8000f74 <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e127      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002190:	4b96      	ldr	r3, [pc, #600]	; (80023ec <HAL_RCC_OscConfig+0x61c>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3e2>
 80021a4:	4b90      	ldr	r3, [pc, #576]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80021a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021a8:	4b8f      	ldr	r3, [pc, #572]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80021aa:	2101      	movs	r1, #1
 80021ac:	430a      	orrs	r2, r1
 80021ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80021b0:	e01c      	b.n	80021ec <HAL_RCC_OscConfig+0x41c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x404>
 80021ba:	4b8b      	ldr	r3, [pc, #556]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80021bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021be:	4b8a      	ldr	r3, [pc, #552]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80021c0:	2104      	movs	r1, #4
 80021c2:	430a      	orrs	r2, r1
 80021c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80021c6:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80021c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021ca:	4b87      	ldr	r3, [pc, #540]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	430a      	orrs	r2, r1
 80021d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0x41c>
 80021d4:	4b84      	ldr	r3, [pc, #528]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80021d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021d8:	4b83      	ldr	r3, [pc, #524]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80021da:	2101      	movs	r1, #1
 80021dc:	438a      	bics	r2, r1
 80021de:	65da      	str	r2, [r3, #92]	; 0x5c
 80021e0:	4b81      	ldr	r3, [pc, #516]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80021e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021e4:	4b80      	ldr	r3, [pc, #512]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80021e6:	2104      	movs	r1, #4
 80021e8:	438a      	bics	r2, r1
 80021ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d014      	beq.n	800221e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe febe 	bl	8000f74 <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fc:	e009      	b.n	8002212 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7fe feb9 	bl	8000f74 <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	4a79      	ldr	r2, [pc, #484]	; (80023f0 <HAL_RCC_OscConfig+0x620>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e0e6      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002212:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x42e>
 800221c:	e013      	b.n	8002246 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221e:	f7fe fea9 	bl	8000f74 <HAL_GetTick>
 8002222:	0003      	movs	r3, r0
 8002224:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002226:	e009      	b.n	800223c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7fe fea4 	bl	8000f74 <HAL_GetTick>
 800222c:	0002      	movs	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	4a6f      	ldr	r2, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x620>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e0d1      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	2202      	movs	r2, #2
 8002242:	4013      	ands	r3, r2
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002246:	231f      	movs	r3, #31
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002250:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 8002252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002254:	4b64      	ldr	r3, [pc, #400]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 8002256:	4967      	ldr	r1, [pc, #412]	; (80023f4 <HAL_RCC_OscConfig+0x624>)
 8002258:	400a      	ands	r2, r1
 800225a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d100      	bne.n	8002266 <HAL_RCC_OscConfig+0x496>
 8002264:	e0bb      	b.n	80023de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002266:	4b60      	ldr	r3, [pc, #384]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2238      	movs	r2, #56	; 0x38
 800226c:	4013      	ands	r3, r2
 800226e:	2b10      	cmp	r3, #16
 8002270:	d100      	bne.n	8002274 <HAL_RCC_OscConfig+0x4a4>
 8002272:	e07b      	b.n	800236c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d156      	bne.n	800232a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227c:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 8002282:	495d      	ldr	r1, [pc, #372]	; (80023f8 <HAL_RCC_OscConfig+0x628>)
 8002284:	400a      	ands	r2, r1
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe fe74 	bl	8000f74 <HAL_GetTick>
 800228c:	0003      	movs	r3, r0
 800228e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002292:	f7fe fe6f 	bl	8000f74 <HAL_GetTick>
 8002296:	0002      	movs	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e09d      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a4:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	049b      	lsls	r3, r3, #18
 80022ac:	4013      	ands	r3, r2
 80022ae:	d1f0      	bne.n	8002292 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b0:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a51      	ldr	r2, [pc, #324]	; (80023fc <HAL_RCC_OscConfig+0x62c>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1a      	ldr	r2, [r3, #32]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022dc:	431a      	orrs	r2, r3
 80022de:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80022e0:	430a      	orrs	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e4:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	0449      	lsls	r1, r1, #17
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80022f2:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	4b3c      	ldr	r3, [pc, #240]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	0549      	lsls	r1, r1, #21
 80022fc:	430a      	orrs	r2, r1
 80022fe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe fe38 	bl	8000f74 <HAL_GetTick>
 8002304:	0003      	movs	r3, r0
 8002306:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230a:	f7fe fe33 	bl	8000f74 <HAL_GetTick>
 800230e:	0002      	movs	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e061      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231c:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	049b      	lsls	r3, r3, #18
 8002324:	4013      	ands	r3, r2
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x53a>
 8002328:	e059      	b.n	80023de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4b2e      	ldr	r3, [pc, #184]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 8002330:	4931      	ldr	r1, [pc, #196]	; (80023f8 <HAL_RCC_OscConfig+0x628>)
 8002332:	400a      	ands	r2, r1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe fe1d 	bl	8000f74 <HAL_GetTick>
 800233a:	0003      	movs	r3, r0
 800233c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe fe18 	bl	8000f74 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e046      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002352:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	049b      	lsls	r3, r3, #18
 800235a:	4013      	ands	r3, r2
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 8002364:	4926      	ldr	r1, [pc, #152]	; (8002400 <HAL_RCC_OscConfig+0x630>)
 8002366:	400a      	ands	r2, r1
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	e038      	b.n	80023de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e033      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x618>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2203      	movs	r2, #3
 8002382:	401a      	ands	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	429a      	cmp	r2, r3
 800238a:	d126      	bne.n	80023da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2270      	movs	r2, #112	; 0x70
 8002390:	401a      	ands	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d11f      	bne.n	80023da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	23fe      	movs	r3, #254	; 0xfe
 800239e:	01db      	lsls	r3, r3, #7
 80023a0:	401a      	ands	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d116      	bne.n	80023da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	23f8      	movs	r3, #248	; 0xf8
 80023b0:	039b      	lsls	r3, r3, #14
 80023b2:	401a      	ands	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d10e      	bne.n	80023da <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	23e0      	movs	r3, #224	; 0xe0
 80023c0:	051b      	lsls	r3, r3, #20
 80023c2:	401a      	ands	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	0f5b      	lsrs	r3, r3, #29
 80023d0:	075a      	lsls	r2, r3, #29
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b008      	add	sp, #32
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
 80023f0:	00001388 	.word	0x00001388
 80023f4:	efffffff 	.word	0xefffffff
 80023f8:	feffffff 	.word	0xfeffffff
 80023fc:	11c1808c 	.word	0x11c1808c
 8002400:	eefefffc 	.word	0xeefefffc

08002404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0e9      	b.n	80025ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002418:	4b76      	ldr	r3, [pc, #472]	; (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2207      	movs	r2, #7
 800241e:	4013      	ands	r3, r2
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d91e      	bls.n	8002464 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b73      	ldr	r3, [pc, #460]	; (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2207      	movs	r2, #7
 800242c:	4393      	bics	r3, r2
 800242e:	0019      	movs	r1, r3
 8002430:	4b70      	ldr	r3, [pc, #448]	; (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002438:	f7fe fd9c 	bl	8000f74 <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002440:	e009      	b.n	8002456 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002442:	f7fe fd97 	bl	8000f74 <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	4a6a      	ldr	r2, [pc, #424]	; (80025f8 <HAL_RCC_ClockConfig+0x1f4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e0ca      	b.n	80025ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002456:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2207      	movs	r2, #7
 800245c:	4013      	ands	r3, r2
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d1ee      	bne.n	8002442 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2202      	movs	r2, #2
 800246a:	4013      	ands	r3, r2
 800246c:	d015      	beq.n	800249a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2204      	movs	r2, #4
 8002474:	4013      	ands	r3, r2
 8002476:	d006      	beq.n	8002486 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002478:	4b60      	ldr	r3, [pc, #384]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 800247e:	21e0      	movs	r1, #224	; 0xe0
 8002480:	01c9      	lsls	r1, r1, #7
 8002482:	430a      	orrs	r2, r1
 8002484:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002486:	4b5d      	ldr	r3, [pc, #372]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4a5d      	ldr	r2, [pc, #372]	; (8002600 <HAL_RCC_ClockConfig+0x1fc>)
 800248c:	4013      	ands	r3, r2
 800248e:	0019      	movs	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	4b59      	ldr	r3, [pc, #356]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 8002496:	430a      	orrs	r2, r1
 8002498:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2201      	movs	r2, #1
 80024a0:	4013      	ands	r3, r2
 80024a2:	d057      	beq.n	8002554 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d107      	bne.n	80024bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ac:	4b53      	ldr	r3, [pc, #332]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	029b      	lsls	r3, r3, #10
 80024b4:	4013      	ands	r3, r2
 80024b6:	d12b      	bne.n	8002510 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e097      	b.n	80025ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d107      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c4:	4b4d      	ldr	r3, [pc, #308]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	049b      	lsls	r3, r3, #18
 80024cc:	4013      	ands	r3, r2
 80024ce:	d11f      	bne.n	8002510 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e08b      	b.n	80025ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024dc:	4b47      	ldr	r3, [pc, #284]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4013      	ands	r3, r2
 80024e6:	d113      	bne.n	8002510 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e07f      	b.n	80025ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024f4:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 80024f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f8:	2202      	movs	r2, #2
 80024fa:	4013      	ands	r3, r2
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e074      	b.n	80025ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002502:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	2202      	movs	r2, #2
 8002508:	4013      	ands	r3, r2
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e06d      	b.n	80025ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002510:	4b3a      	ldr	r3, [pc, #232]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2207      	movs	r2, #7
 8002516:	4393      	bics	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4b37      	ldr	r3, [pc, #220]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 8002520:	430a      	orrs	r2, r1
 8002522:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002524:	f7fe fd26 	bl	8000f74 <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252c:	e009      	b.n	8002542 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252e:	f7fe fd21 	bl	8000f74 <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	4a2f      	ldr	r2, [pc, #188]	; (80025f8 <HAL_RCC_ClockConfig+0x1f4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e054      	b.n	80025ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	4b2e      	ldr	r3, [pc, #184]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2238      	movs	r2, #56	; 0x38
 8002548:	401a      	ands	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	429a      	cmp	r2, r3
 8002552:	d1ec      	bne.n	800252e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002554:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2207      	movs	r2, #7
 800255a:	4013      	ands	r3, r2
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d21e      	bcs.n	80025a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2207      	movs	r2, #7
 8002568:	4393      	bics	r3, r2
 800256a:	0019      	movs	r1, r3
 800256c:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002574:	f7fe fcfe 	bl	8000f74 <HAL_GetTick>
 8002578:	0003      	movs	r3, r0
 800257a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800257c:	e009      	b.n	8002592 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257e:	f7fe fcf9 	bl	8000f74 <HAL_GetTick>
 8002582:	0002      	movs	r2, r0
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_RCC_ClockConfig+0x1f4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e02c      	b.n	80025ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2207      	movs	r2, #7
 8002598:	4013      	ands	r3, r2
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d1ee      	bne.n	800257e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2204      	movs	r2, #4
 80025a6:	4013      	ands	r3, r2
 80025a8:	d009      	beq.n	80025be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025aa:	4b14      	ldr	r3, [pc, #80]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	4a15      	ldr	r2, [pc, #84]	; (8002604 <HAL_RCC_ClockConfig+0x200>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	0019      	movs	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 80025ba:	430a      	orrs	r2, r1
 80025bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80025be:	f000 f829 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025c2:	0001      	movs	r1, r0
 80025c4:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	220f      	movs	r2, #15
 80025cc:	401a      	ands	r2, r3
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_RCC_ClockConfig+0x204>)
 80025d0:	0092      	lsls	r2, r2, #2
 80025d2:	58d3      	ldr	r3, [r2, r3]
 80025d4:	221f      	movs	r2, #31
 80025d6:	4013      	ands	r3, r2
 80025d8:	000a      	movs	r2, r1
 80025da:	40da      	lsrs	r2, r3
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_RCC_ClockConfig+0x208>)
 80025de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_ClockConfig+0x20c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7fe fc69 	bl	8000ebc <HAL_InitTick>
 80025ea:	0003      	movs	r3, r0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40022000 	.word	0x40022000
 80025f8:	00001388 	.word	0x00001388
 80025fc:	40021000 	.word	0x40021000
 8002600:	fffff0ff 	.word	0xfffff0ff
 8002604:	ffff8fff 	.word	0xffff8fff
 8002608:	0800493c 	.word	0x0800493c
 800260c:	20000000 	.word	0x20000000
 8002610:	20000004 	.word	0x20000004

08002614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800261a:	4b3c      	ldr	r3, [pc, #240]	; (800270c <HAL_RCC_GetSysClockFreq+0xf8>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2238      	movs	r2, #56	; 0x38
 8002620:	4013      	ands	r3, r2
 8002622:	d10f      	bne.n	8002644 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002624:	4b39      	ldr	r3, [pc, #228]	; (800270c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0adb      	lsrs	r3, r3, #11
 800262a:	2207      	movs	r2, #7
 800262c:	4013      	ands	r3, r2
 800262e:	2201      	movs	r2, #1
 8002630:	409a      	lsls	r2, r3
 8002632:	0013      	movs	r3, r2
 8002634:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002636:	6839      	ldr	r1, [r7, #0]
 8002638:	4835      	ldr	r0, [pc, #212]	; (8002710 <HAL_RCC_GetSysClockFreq+0xfc>)
 800263a:	f7fd fd63 	bl	8000104 <__udivsi3>
 800263e:	0003      	movs	r3, r0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	e05d      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002644:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2238      	movs	r2, #56	; 0x38
 800264a:	4013      	ands	r3, r2
 800264c:	2b08      	cmp	r3, #8
 800264e:	d102      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002650:	4b30      	ldr	r3, [pc, #192]	; (8002714 <HAL_RCC_GetSysClockFreq+0x100>)
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	e054      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002656:	4b2d      	ldr	r3, [pc, #180]	; (800270c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2238      	movs	r2, #56	; 0x38
 800265c:	4013      	ands	r3, r2
 800265e:	2b10      	cmp	r3, #16
 8002660:	d138      	bne.n	80026d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002662:	4b2a      	ldr	r3, [pc, #168]	; (800270c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2203      	movs	r2, #3
 8002668:	4013      	ands	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_RCC_GetSysClockFreq+0xf8>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	2207      	movs	r2, #7
 8002674:	4013      	ands	r3, r2
 8002676:	3301      	adds	r3, #1
 8002678:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d10d      	bne.n	800269c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	4824      	ldr	r0, [pc, #144]	; (8002714 <HAL_RCC_GetSysClockFreq+0x100>)
 8002684:	f7fd fd3e 	bl	8000104 <__udivsi3>
 8002688:	0003      	movs	r3, r0
 800268a:	0019      	movs	r1, r3
 800268c:	4b1f      	ldr	r3, [pc, #124]	; (800270c <HAL_RCC_GetSysClockFreq+0xf8>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	227f      	movs	r2, #127	; 0x7f
 8002694:	4013      	ands	r3, r2
 8002696:	434b      	muls	r3, r1
 8002698:	617b      	str	r3, [r7, #20]
        break;
 800269a:	e00d      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	481c      	ldr	r0, [pc, #112]	; (8002710 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026a0:	f7fd fd30 	bl	8000104 <__udivsi3>
 80026a4:	0003      	movs	r3, r0
 80026a6:	0019      	movs	r1, r3
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	227f      	movs	r2, #127	; 0x7f
 80026b0:	4013      	ands	r3, r2
 80026b2:	434b      	muls	r3, r1
 80026b4:	617b      	str	r3, [r7, #20]
        break;
 80026b6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0f5b      	lsrs	r3, r3, #29
 80026be:	2207      	movs	r2, #7
 80026c0:	4013      	ands	r3, r2
 80026c2:	3301      	adds	r3, #1
 80026c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	6978      	ldr	r0, [r7, #20]
 80026ca:	f7fd fd1b 	bl	8000104 <__udivsi3>
 80026ce:	0003      	movs	r3, r0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	e015      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026d4:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2238      	movs	r2, #56	; 0x38
 80026da:	4013      	ands	r3, r2
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d103      	bne.n	80026e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2238      	movs	r2, #56	; 0x38
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b18      	cmp	r3, #24
 80026f2:	d103      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80026f4:	23fa      	movs	r3, #250	; 0xfa
 80026f6:	01db      	lsls	r3, r3, #7
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	e001      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002700:	693b      	ldr	r3, [r7, #16]
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b006      	add	sp, #24
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	40021000 	.word	0x40021000
 8002710:	00f42400 	.word	0x00f42400
 8002714:	007a1200 	.word	0x007a1200

08002718 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b02      	ldr	r3, [pc, #8]	; (8002728 <HAL_RCC_GetHCLKFreq+0x10>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	20000000 	.word	0x20000000

0800272c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002730:	f7ff fff2 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002734:	0004      	movs	r4, r0
 8002736:	f7ff fb3f 	bl	8001db8 <LL_RCC_GetAPB1Prescaler>
 800273a:	0003      	movs	r3, r0
 800273c:	0b1a      	lsrs	r2, r3, #12
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002740:	0092      	lsls	r2, r2, #2
 8002742:	58d3      	ldr	r3, [r2, r3]
 8002744:	221f      	movs	r2, #31
 8002746:	4013      	ands	r3, r2
 8002748:	40dc      	lsrs	r4, r3
 800274a:	0023      	movs	r3, r4
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	bdb0      	pop	{r4, r5, r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	0800497c 	.word	0x0800497c

08002758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002760:	2313      	movs	r3, #19
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002768:	2312      	movs	r3, #18
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	029b      	lsls	r3, r3, #10
 8002778:	4013      	ands	r3, r2
 800277a:	d100      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800277c:	e0a3      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277e:	2011      	movs	r0, #17
 8002780:	183b      	adds	r3, r7, r0
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4ba5      	ldr	r3, [pc, #660]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	055b      	lsls	r3, r3, #21
 800278e:	4013      	ands	r3, r2
 8002790:	d110      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4ba2      	ldr	r3, [pc, #648]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002796:	4ba1      	ldr	r3, [pc, #644]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	0549      	lsls	r1, r1, #21
 800279c:	430a      	orrs	r2, r1
 800279e:	63da      	str	r2, [r3, #60]	; 0x3c
 80027a0:	4b9e      	ldr	r3, [pc, #632]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	055b      	lsls	r3, r3, #21
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ae:	183b      	adds	r3, r7, r0
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b4:	4b9a      	ldr	r3, [pc, #616]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b99      	ldr	r3, [pc, #612]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80027ba:	2180      	movs	r1, #128	; 0x80
 80027bc:	0049      	lsls	r1, r1, #1
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027c2:	f7fe fbd7 	bl	8000f74 <HAL_GetTick>
 80027c6:	0003      	movs	r3, r0
 80027c8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ca:	e00b      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027cc:	f7fe fbd2 	bl	8000f74 <HAL_GetTick>
 80027d0:	0002      	movs	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d904      	bls.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80027da:	2313      	movs	r3, #19
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	2203      	movs	r2, #3
 80027e0:	701a      	strb	r2, [r3, #0]
        break;
 80027e2:	e005      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027e4:	4b8e      	ldr	r3, [pc, #568]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4013      	ands	r3, r2
 80027ee:	d0ed      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80027f0:	2313      	movs	r3, #19
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d154      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027fe:	23c0      	movs	r3, #192	; 0xc0
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4013      	ands	r3, r2
 8002804:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d019      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	429a      	cmp	r2, r3
 8002814:	d014      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002816:	4b81      	ldr	r3, [pc, #516]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	4a82      	ldr	r2, [pc, #520]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800281c:	4013      	ands	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002820:	4b7e      	ldr	r3, [pc, #504]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002822:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002824:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002826:	2180      	movs	r1, #128	; 0x80
 8002828:	0249      	lsls	r1, r1, #9
 800282a:	430a      	orrs	r2, r1
 800282c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800282e:	4b7b      	ldr	r3, [pc, #492]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002830:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002832:	4b7a      	ldr	r3, [pc, #488]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002834:	497c      	ldr	r1, [pc, #496]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002836:	400a      	ands	r2, r1
 8002838:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800283a:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2201      	movs	r2, #1
 8002844:	4013      	ands	r3, r2
 8002846:	d016      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe fb94 	bl	8000f74 <HAL_GetTick>
 800284c:	0003      	movs	r3, r0
 800284e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002850:	e00c      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7fe fb8f 	bl	8000f74 <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	4a73      	ldr	r2, [pc, #460]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d904      	bls.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002862:	2313      	movs	r3, #19
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	2203      	movs	r2, #3
 8002868:	701a      	strb	r2, [r3, #0]
            break;
 800286a:	e004      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800286e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002870:	2202      	movs	r2, #2
 8002872:	4013      	ands	r3, r2
 8002874:	d0ed      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002876:	2313      	movs	r3, #19
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002880:	4b66      	ldr	r3, [pc, #408]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	4a67      	ldr	r2, [pc, #412]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002886:	4013      	ands	r3, r2
 8002888:	0019      	movs	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002890:	430a      	orrs	r2, r1
 8002892:	65da      	str	r2, [r3, #92]	; 0x5c
 8002894:	e00c      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002896:	2312      	movs	r3, #18
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	2213      	movs	r2, #19
 800289c:	18ba      	adds	r2, r7, r2
 800289e:	7812      	ldrb	r2, [r2, #0]
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e005      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a4:	2312      	movs	r3, #18
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	2213      	movs	r2, #19
 80028aa:	18ba      	adds	r2, r7, r2
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028b0:	2311      	movs	r3, #17
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d105      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ba:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028be:	4b57      	ldr	r3, [pc, #348]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028c0:	495b      	ldr	r1, [pc, #364]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028c2:	400a      	ands	r2, r1
 80028c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2201      	movs	r2, #1
 80028cc:	4013      	ands	r3, r2
 80028ce:	d009      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028d0:	4b52      	ldr	r3, [pc, #328]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	2203      	movs	r2, #3
 80028d6:	4393      	bics	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	4b4f      	ldr	r3, [pc, #316]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028e0:	430a      	orrs	r2, r1
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2210      	movs	r2, #16
 80028ea:	4013      	ands	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028ee:	4b4b      	ldr	r3, [pc, #300]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	4a50      	ldr	r2, [pc, #320]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028fe:	430a      	orrs	r2, r1
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4013      	ands	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800290e:	4b43      	ldr	r3, [pc, #268]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	4a49      	ldr	r2, [pc, #292]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002914:	4013      	ands	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800291e:	430a      	orrs	r2, r1
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4013      	ands	r3, r2
 800292c:	d009      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800292e:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	4a42      	ldr	r2, [pc, #264]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002934:	4013      	ands	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800293e:	430a      	orrs	r2, r1
 8002940:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2220      	movs	r2, #32
 8002948:	4013      	ands	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294c:	4b33      	ldr	r3, [pc, #204]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	4a3b      	ldr	r2, [pc, #236]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002952:	4013      	ands	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800295c:	430a      	orrs	r2, r1
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	01db      	lsls	r3, r3, #7
 8002968:	4013      	ands	r3, r2
 800296a:	d015      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800296c:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	0899      	lsrs	r1, r3, #2
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800297a:	430a      	orrs	r2, r1
 800297c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	05db      	lsls	r3, r3, #23
 8002986:	429a      	cmp	r2, r3
 8002988:	d106      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	0249      	lsls	r1, r1, #9
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	039b      	lsls	r3, r3, #14
 80029a0:	4013      	ands	r3, r2
 80029a2:	d016      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a8:	4a26      	ldr	r2, [pc, #152]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1a      	ldr	r2, [r3, #32]
 80029b2:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029b4:	430a      	orrs	r2, r1
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1a      	ldr	r2, [r3, #32]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	03db      	lsls	r3, r3, #15
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d106      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029c4:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029ca:	2180      	movs	r1, #128	; 0x80
 80029cc:	0449      	lsls	r1, r1, #17
 80029ce:	430a      	orrs	r2, r1
 80029d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	4013      	ands	r3, r2
 80029dc:	d016      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e2:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029ee:	430a      	orrs	r2, r1
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	01db      	lsls	r3, r3, #7
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d106      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	0249      	lsls	r1, r1, #9
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a0c:	2312      	movs	r3, #18
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	781b      	ldrb	r3, [r3, #0]
}
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b006      	add	sp, #24
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40007000 	.word	0x40007000
 8002a24:	fffffcff 	.word	0xfffffcff
 8002a28:	fffeffff 	.word	0xfffeffff
 8002a2c:	00001388 	.word	0x00001388
 8002a30:	efffffff 	.word	0xefffffff
 8002a34:	fffff3ff 	.word	0xfffff3ff
 8002a38:	fff3ffff 	.word	0xfff3ffff
 8002a3c:	ffcfffff 	.word	0xffcfffff
 8002a40:	ffffcfff 	.word	0xffffcfff
 8002a44:	ffbfffff 	.word	0xffbfffff
 8002a48:	ffff3fff 	.word	0xffff3fff

08002a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e0a8      	b.n	8002bb0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	2382      	movs	r3, #130	; 0x82
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d009      	beq.n	8002a86 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	61da      	str	r2, [r3, #28]
 8002a78:	e005      	b.n	8002a86 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	225d      	movs	r2, #93	; 0x5d
 8002a90:	5c9b      	ldrb	r3, [r3, r2]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d107      	bne.n	8002aa8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	225c      	movs	r2, #92	; 0x5c
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f7fe f836 	bl	8000b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	225d      	movs	r2, #93	; 0x5d
 8002aac:	2102      	movs	r1, #2
 8002aae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2140      	movs	r1, #64	; 0x40
 8002abc:	438a      	bics	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	23e0      	movs	r3, #224	; 0xe0
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d902      	bls.n	8002ad2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e002      	b.n	8002ad8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	015b      	lsls	r3, r3, #5
 8002ad6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	23f0      	movs	r3, #240	; 0xf0
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d008      	beq.n	8002af6 <HAL_SPI_Init+0xaa>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	23e0      	movs	r3, #224	; 0xe0
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d002      	beq.n	8002af6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	2382      	movs	r3, #130	; 0x82
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	401a      	ands	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	2384      	movs	r3, #132	; 0x84
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	400b      	ands	r3, r1
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2102      	movs	r1, #2
 8002b12:	400b      	ands	r3, r1
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	400b      	ands	r3, r1
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6999      	ldr	r1, [r3, #24]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	400b      	ands	r3, r1
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	2138      	movs	r1, #56	; 0x38
 8002b32:	400b      	ands	r3, r1
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	2180      	movs	r1, #128	; 0x80
 8002b3c:	400b      	ands	r3, r1
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	0011      	movs	r1, r2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	019b      	lsls	r3, r3, #6
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	0c1b      	lsrs	r3, r3, #16
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2110      	movs	r1, #16
 8002b64:	400b      	ands	r3, r1
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	2108      	movs	r1, #8
 8002b6e:	400b      	ands	r3, r1
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68d9      	ldr	r1, [r3, #12]
 8002b76:	23f0      	movs	r3, #240	; 0xf0
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	0011      	movs	r1, r2
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	015b      	lsls	r3, r3, #5
 8002b86:	401a      	ands	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69da      	ldr	r2, [r3, #28]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4907      	ldr	r1, [pc, #28]	; (8002bb8 <HAL_SPI_Init+0x16c>)
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	225d      	movs	r2, #93	; 0x5d
 8002baa:	2101      	movs	r1, #1
 8002bac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b004      	add	sp, #16
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	fffff7ff 	.word	0xfffff7ff

08002bbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	1dbb      	adds	r3, r7, #6
 8002bca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bcc:	231f      	movs	r3, #31
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	225c      	movs	r2, #92	; 0x5c
 8002bd8:	5c9b      	ldrb	r3, [r3, r2]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_SPI_Transmit+0x26>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e147      	b.n	8002e72 <HAL_SPI_Transmit+0x2b6>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	225c      	movs	r2, #92	; 0x5c
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bea:	f7fe f9c3 	bl	8000f74 <HAL_GetTick>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002bf2:	2316      	movs	r3, #22
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	1dba      	adds	r2, r7, #6
 8002bf8:	8812      	ldrh	r2, [r2, #0]
 8002bfa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	225d      	movs	r2, #93	; 0x5d
 8002c00:	5c9b      	ldrb	r3, [r3, r2]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d004      	beq.n	8002c12 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002c08:	231f      	movs	r3, #31
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c10:	e128      	b.n	8002e64 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_SPI_Transmit+0x64>
 8002c18:	1dbb      	adds	r3, r7, #6
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002c20:	231f      	movs	r3, #31
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c28:	e11c      	b.n	8002e64 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	225d      	movs	r2, #93	; 0x5d
 8002c2e:	2103      	movs	r1, #3
 8002c30:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1dba      	adds	r2, r7, #6
 8002c42:	8812      	ldrh	r2, [r2, #0]
 8002c44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1dba      	adds	r2, r7, #6
 8002c4a:	8812      	ldrh	r2, [r2, #0]
 8002c4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2244      	movs	r2, #68	; 0x44
 8002c58:	2100      	movs	r1, #0
 8002c5a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2246      	movs	r2, #70	; 0x46
 8002c60:	2100      	movs	r1, #0
 8002c62:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d110      	bne.n	8002c9e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2140      	movs	r1, #64	; 0x40
 8002c88:	438a      	bics	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2180      	movs	r1, #128	; 0x80
 8002c98:	01c9      	lsls	r1, r1, #7
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2240      	movs	r2, #64	; 0x40
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b40      	cmp	r3, #64	; 0x40
 8002caa:	d007      	beq.n	8002cbc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2140      	movs	r1, #64	; 0x40
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	23e0      	movs	r3, #224	; 0xe0
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d952      	bls.n	8002d6e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d004      	beq.n	8002cda <HAL_SPI_Transmit+0x11e>
 8002cd0:	2316      	movs	r3, #22
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d143      	bne.n	8002d62 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	881a      	ldrh	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	1c9a      	adds	r2, r3, #2
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cfe:	e030      	b.n	8002d62 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2202      	movs	r2, #2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d112      	bne.n	8002d34 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	1c9a      	adds	r2, r3, #2
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d32:	e016      	b.n	8002d62 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d34:	f7fe f91e 	bl	8000f74 <HAL_GetTick>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d802      	bhi.n	8002d4a <HAL_SPI_Transmit+0x18e>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_SPI_Transmit+0x194>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d108      	bne.n	8002d62 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002d50:	231f      	movs	r3, #31
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	2203      	movs	r2, #3
 8002d56:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	225d      	movs	r2, #93	; 0x5d
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002d60:	e080      	b.n	8002e64 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1c9      	bne.n	8002d00 <HAL_SPI_Transmit+0x144>
 8002d6c:	e053      	b.n	8002e16 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <HAL_SPI_Transmit+0x1c4>
 8002d76:	2316      	movs	r3, #22
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d145      	bne.n	8002e0c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	330c      	adds	r3, #12
 8002d8a:	7812      	ldrb	r2, [r2, #0]
 8002d8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002da6:	e031      	b.n	8002e0c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2202      	movs	r2, #2
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d113      	bne.n	8002dde <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	7812      	ldrb	r2, [r2, #0]
 8002dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ddc:	e016      	b.n	8002e0c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dde:	f7fe f8c9 	bl	8000f74 <HAL_GetTick>
 8002de2:	0002      	movs	r2, r0
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d802      	bhi.n	8002df4 <HAL_SPI_Transmit+0x238>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	d102      	bne.n	8002dfa <HAL_SPI_Transmit+0x23e>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d108      	bne.n	8002e0c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002dfa:	231f      	movs	r3, #31
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	2203      	movs	r2, #3
 8002e00:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	225d      	movs	r2, #93	; 0x5d
 8002e06:	2101      	movs	r1, #1
 8002e08:	5499      	strb	r1, [r3, r2]
          goto error;
 8002e0a:	e02b      	b.n	8002e64 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1c8      	bne.n	8002da8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	6839      	ldr	r1, [r7, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 fcef 	bl	8003800 <SPI_EndRxTxTransaction>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d004      	beq.n	8002e5c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002e52:	231f      	movs	r3, #31
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e003      	b.n	8002e64 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	225d      	movs	r2, #93	; 0x5d
 8002e60:	2101      	movs	r1, #1
 8002e62:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	225c      	movs	r2, #92	; 0x5c
 8002e68:	2100      	movs	r1, #0
 8002e6a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e6c:	231f      	movs	r3, #31
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	781b      	ldrb	r3, [r3, #0]
}
 8002e72:	0018      	movs	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b008      	add	sp, #32
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b089      	sub	sp, #36	; 0x24
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	1dbb      	adds	r3, r7, #6
 8002e8a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2117      	movs	r1, #23
 8002e8e:	187b      	adds	r3, r7, r1
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	225d      	movs	r2, #93	; 0x5d
 8002e98:	5c9b      	ldrb	r3, [r3, r2]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d003      	beq.n	8002ea8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ea6:	e12b      	b.n	8003100 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	2382      	movs	r3, #130	; 0x82
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d113      	bne.n	8002edc <HAL_SPI_Receive+0x60>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10f      	bne.n	8002edc <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	225d      	movs	r2, #93	; 0x5d
 8002ec0:	2104      	movs	r1, #4
 8002ec2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ec4:	1dbb      	adds	r3, r7, #6
 8002ec6:	881c      	ldrh	r4, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	0023      	movs	r3, r4
 8002ed4:	f000 f924 	bl	8003120 <HAL_SPI_TransmitReceive>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	e118      	b.n	800310e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	225c      	movs	r2, #92	; 0x5c
 8002ee0:	5c9b      	ldrb	r3, [r3, r2]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_SPI_Receive+0x6e>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e111      	b.n	800310e <HAL_SPI_Receive+0x292>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	225c      	movs	r2, #92	; 0x5c
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ef2:	f7fe f83f 	bl	8000f74 <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_SPI_Receive+0x8c>
 8002f00:	1dbb      	adds	r3, r7, #6
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d104      	bne.n	8002f12 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002f08:	2317      	movs	r3, #23
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f10:	e0f6      	b.n	8003100 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	225d      	movs	r2, #93	; 0x5d
 8002f16:	2104      	movs	r1, #4
 8002f18:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1dba      	adds	r2, r7, #6
 8002f2a:	2144      	movs	r1, #68	; 0x44
 8002f2c:	8812      	ldrh	r2, [r2, #0]
 8002f2e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1dba      	adds	r2, r7, #6
 8002f34:	2146      	movs	r1, #70	; 0x46
 8002f36:	8812      	ldrh	r2, [r2, #0]
 8002f38:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	23e0      	movs	r3, #224	; 0xe0
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d908      	bls.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	496a      	ldr	r1, [pc, #424]	; (8003118 <HAL_SPI_Receive+0x29c>)
 8002f70:	400a      	ands	r2, r1
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	e008      	b.n	8002f88 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2180      	movs	r1, #128	; 0x80
 8002f82:	0149      	lsls	r1, r1, #5
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d10f      	bne.n	8002fb4 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2140      	movs	r1, #64	; 0x40
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	495b      	ldr	r1, [pc, #364]	; (800311c <HAL_SPI_Receive+0x2a0>)
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2240      	movs	r2, #64	; 0x40
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b40      	cmp	r3, #64	; 0x40
 8002fc0:	d007      	beq.n	8002fd2 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2140      	movs	r1, #64	; 0x40
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	23e0      	movs	r3, #224	; 0xe0
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d900      	bls.n	8002fe0 <HAL_SPI_Receive+0x164>
 8002fde:	e071      	b.n	80030c4 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002fe0:	e035      	b.n	800304e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d117      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	001a      	movs	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	7812      	ldrb	r2, [r2, #0]
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2246      	movs	r2, #70	; 0x46
 8003010:	5a9b      	ldrh	r3, [r3, r2]
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b299      	uxth	r1, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2246      	movs	r2, #70	; 0x46
 800301c:	5299      	strh	r1, [r3, r2]
 800301e:	e016      	b.n	800304e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd ffa8 	bl	8000f74 <HAL_GetTick>
 8003024:	0002      	movs	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d802      	bhi.n	8003036 <HAL_SPI_Receive+0x1ba>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	d102      	bne.n	800303c <HAL_SPI_Receive+0x1c0>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d108      	bne.n	800304e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800303c:	2317      	movs	r3, #23
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	2203      	movs	r2, #3
 8003042:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	225d      	movs	r2, #93	; 0x5d
 8003048:	2101      	movs	r1, #1
 800304a:	5499      	strb	r1, [r3, r2]
          goto error;
 800304c:	e058      	b.n	8003100 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2246      	movs	r2, #70	; 0x46
 8003052:	5a9b      	ldrh	r3, [r3, r2]
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1c3      	bne.n	8002fe2 <HAL_SPI_Receive+0x166>
 800305a:	e039      	b.n	80030d0 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2201      	movs	r2, #1
 8003064:	4013      	ands	r3, r2
 8003066:	2b01      	cmp	r3, #1
 8003068:	d115      	bne.n	8003096 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	b292      	uxth	r2, r2
 8003076:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	1c9a      	adds	r2, r3, #2
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2246      	movs	r2, #70	; 0x46
 8003086:	5a9b      	ldrh	r3, [r3, r2]
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b299      	uxth	r1, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2246      	movs	r2, #70	; 0x46
 8003092:	5299      	strh	r1, [r3, r2]
 8003094:	e016      	b.n	80030c4 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003096:	f7fd ff6d 	bl	8000f74 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d802      	bhi.n	80030ac <HAL_SPI_Receive+0x230>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	3301      	adds	r3, #1
 80030aa:	d102      	bne.n	80030b2 <HAL_SPI_Receive+0x236>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d108      	bne.n	80030c4 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80030b2:	2317      	movs	r3, #23
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	2203      	movs	r2, #3
 80030b8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	225d      	movs	r2, #93	; 0x5d
 80030be:	2101      	movs	r1, #1
 80030c0:	5499      	strb	r1, [r3, r2]
          goto error;
 80030c2:	e01d      	b.n	8003100 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2246      	movs	r2, #70	; 0x46
 80030c8:	5a9b      	ldrh	r3, [r3, r2]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1c5      	bne.n	800305c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	6839      	ldr	r1, [r7, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 fb34 	bl	8003744 <SPI_EndRxTransaction>
 80030dc:	1e03      	subs	r3, r0, #0
 80030de:	d002      	beq.n	80030e6 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d004      	beq.n	80030f8 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80030ee:	2317      	movs	r3, #23
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e003      	b.n	8003100 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	225d      	movs	r2, #93	; 0x5d
 80030fc:	2101      	movs	r1, #1
 80030fe:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	225c      	movs	r2, #92	; 0x5c
 8003104:	2100      	movs	r1, #0
 8003106:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003108:	2317      	movs	r3, #23
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	781b      	ldrb	r3, [r3, #0]
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b007      	add	sp, #28
 8003114:	bd90      	pop	{r4, r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	ffffefff 	.word	0xffffefff
 800311c:	ffffbfff 	.word	0xffffbfff

08003120 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	001a      	movs	r2, r3
 800312e:	1cbb      	adds	r3, r7, #2
 8003130:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003132:	2301      	movs	r3, #1
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003136:	2323      	movs	r3, #35	; 0x23
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	225c      	movs	r2, #92	; 0x5c
 8003142:	5c9b      	ldrb	r3, [r3, r2]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_SPI_TransmitReceive+0x2c>
 8003148:	2302      	movs	r3, #2
 800314a:	e1c4      	b.n	80034d6 <HAL_SPI_TransmitReceive+0x3b6>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	225c      	movs	r2, #92	; 0x5c
 8003150:	2101      	movs	r1, #1
 8003152:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003154:	f7fd ff0e 	bl	8000f74 <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800315c:	201b      	movs	r0, #27
 800315e:	183b      	adds	r3, r7, r0
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	215d      	movs	r1, #93	; 0x5d
 8003164:	5c52      	ldrb	r2, [r2, r1]
 8003166:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800316e:	2312      	movs	r3, #18
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	1cba      	adds	r2, r7, #2
 8003174:	8812      	ldrh	r2, [r2, #0]
 8003176:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003178:	183b      	adds	r3, r7, r0
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d011      	beq.n	80031a4 <HAL_SPI_TransmitReceive+0x84>
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	2382      	movs	r3, #130	; 0x82
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	429a      	cmp	r2, r3
 8003188:	d107      	bne.n	800319a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d103      	bne.n	800319a <HAL_SPI_TransmitReceive+0x7a>
 8003192:	183b      	adds	r3, r7, r0
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b04      	cmp	r3, #4
 8003198:	d004      	beq.n	80031a4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800319a:	2323      	movs	r3, #35	; 0x23
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	2202      	movs	r2, #2
 80031a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80031a2:	e191      	b.n	80034c8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x98>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x98>
 80031b0:	1cbb      	adds	r3, r7, #2
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d104      	bne.n	80031c2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80031b8:	2323      	movs	r3, #35	; 0x23
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
    goto error;
 80031c0:	e182      	b.n	80034c8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	225d      	movs	r2, #93	; 0x5d
 80031c6:	5c9b      	ldrb	r3, [r3, r2]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d003      	beq.n	80031d6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	225d      	movs	r2, #93	; 0x5d
 80031d2:	2105      	movs	r1, #5
 80031d4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1cba      	adds	r2, r7, #2
 80031e6:	2146      	movs	r1, #70	; 0x46
 80031e8:	8812      	ldrh	r2, [r2, #0]
 80031ea:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1cba      	adds	r2, r7, #2
 80031f0:	2144      	movs	r1, #68	; 0x44
 80031f2:	8812      	ldrh	r2, [r2, #0]
 80031f4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1cba      	adds	r2, r7, #2
 8003200:	8812      	ldrh	r2, [r2, #0]
 8003202:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1cba      	adds	r2, r7, #2
 8003208:	8812      	ldrh	r2, [r2, #0]
 800320a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	23e0      	movs	r3, #224	; 0xe0
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	429a      	cmp	r2, r3
 8003222:	d908      	bls.n	8003236 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	49ac      	ldr	r1, [pc, #688]	; (80034e0 <HAL_SPI_TransmitReceive+0x3c0>)
 8003230:	400a      	ands	r2, r1
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	e008      	b.n	8003248 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	0149      	lsls	r1, r1, #5
 8003244:	430a      	orrs	r2, r1
 8003246:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2240      	movs	r2, #64	; 0x40
 8003250:	4013      	ands	r3, r2
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d007      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2140      	movs	r1, #64	; 0x40
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	23e0      	movs	r3, #224	; 0xe0
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	429a      	cmp	r2, r3
 8003270:	d800      	bhi.n	8003274 <HAL_SPI_TransmitReceive+0x154>
 8003272:	e083      	b.n	800337c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_SPI_TransmitReceive+0x168>
 800327c:	2312      	movs	r3, #18
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d000      	beq.n	8003288 <HAL_SPI_TransmitReceive+0x168>
 8003286:	e06d      	b.n	8003364 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	881a      	ldrh	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	1c9a      	adds	r2, r3, #2
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ac:	e05a      	b.n	8003364 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2202      	movs	r2, #2
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d11b      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x1d4>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x1d4>
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d113      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	881a      	ldrh	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	1c9a      	adds	r2, r3, #2
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2201      	movs	r2, #1
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d11c      	bne.n	800333c <HAL_SPI_TransmitReceive+0x21c>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2246      	movs	r2, #70	; 0x46
 8003306:	5a9b      	ldrh	r3, [r3, r2]
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	b292      	uxth	r2, r2
 800331a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	1c9a      	adds	r2, r3, #2
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2246      	movs	r2, #70	; 0x46
 800332a:	5a9b      	ldrh	r3, [r3, r2]
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b299      	uxth	r1, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2246      	movs	r2, #70	; 0x46
 8003336:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800333c:	f7fd fe1a 	bl	8000f74 <HAL_GetTick>
 8003340:	0002      	movs	r2, r0
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003348:	429a      	cmp	r2, r3
 800334a:	d80b      	bhi.n	8003364 <HAL_SPI_TransmitReceive+0x244>
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	3301      	adds	r3, #1
 8003350:	d008      	beq.n	8003364 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003352:	2323      	movs	r3, #35	; 0x23
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	2203      	movs	r2, #3
 8003358:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	225d      	movs	r2, #93	; 0x5d
 800335e:	2101      	movs	r1, #1
 8003360:	5499      	strb	r1, [r3, r2]
        goto error;
 8003362:	e0b1      	b.n	80034c8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d19f      	bne.n	80032ae <HAL_SPI_TransmitReceive+0x18e>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2246      	movs	r2, #70	; 0x46
 8003372:	5a9b      	ldrh	r3, [r3, r2]
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d199      	bne.n	80032ae <HAL_SPI_TransmitReceive+0x18e>
 800337a:	e089      	b.n	8003490 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x270>
 8003384:	2312      	movs	r3, #18
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d000      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x270>
 800338e:	e074      	b.n	800347a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b6:	e060      	b.n	800347a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2202      	movs	r2, #2
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d11c      	bne.n	8003400 <HAL_SPI_TransmitReceive+0x2e0>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d017      	beq.n	8003400 <HAL_SPI_TransmitReceive+0x2e0>
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d114      	bne.n	8003400 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	330c      	adds	r3, #12
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2201      	movs	r2, #1
 8003408:	4013      	ands	r3, r2
 800340a:	2b01      	cmp	r3, #1
 800340c:	d11e      	bne.n	800344c <HAL_SPI_TransmitReceive+0x32c>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2246      	movs	r2, #70	; 0x46
 8003412:	5a9b      	ldrh	r3, [r3, r2]
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d018      	beq.n	800344c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	330c      	adds	r3, #12
 8003420:	001a      	movs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	7812      	ldrb	r2, [r2, #0]
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2246      	movs	r2, #70	; 0x46
 800343a:	5a9b      	ldrh	r3, [r3, r2]
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b299      	uxth	r1, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2246      	movs	r2, #70	; 0x46
 8003446:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003448:	2301      	movs	r3, #1
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800344c:	f7fd fd92 	bl	8000f74 <HAL_GetTick>
 8003450:	0002      	movs	r2, r0
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003458:	429a      	cmp	r2, r3
 800345a:	d802      	bhi.n	8003462 <HAL_SPI_TransmitReceive+0x342>
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	3301      	adds	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_SPI_TransmitReceive+0x348>
 8003462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003464:	2b00      	cmp	r3, #0
 8003466:	d108      	bne.n	800347a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003468:	2323      	movs	r3, #35	; 0x23
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	2203      	movs	r2, #3
 800346e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	225d      	movs	r2, #93	; 0x5d
 8003474:	2101      	movs	r1, #1
 8003476:	5499      	strb	r1, [r3, r2]
        goto error;
 8003478:	e026      	b.n	80034c8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d199      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x298>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2246      	movs	r2, #70	; 0x46
 8003488:	5a9b      	ldrh	r3, [r3, r2]
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d193      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	0018      	movs	r0, r3
 8003498:	f000 f9b2 	bl	8003800 <SPI_EndRxTxTransaction>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d006      	beq.n	80034ae <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80034a0:	2323      	movs	r3, #35	; 0x23
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d004      	beq.n	80034c0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80034b6:	2323      	movs	r3, #35	; 0x23
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e003      	b.n	80034c8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	225d      	movs	r2, #93	; 0x5d
 80034c4:	2101      	movs	r1, #1
 80034c6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	225c      	movs	r2, #92	; 0x5c
 80034cc:	2100      	movs	r1, #0
 80034ce:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80034d0:	2323      	movs	r3, #35	; 0x23
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	781b      	ldrb	r3, [r3, #0]
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b00a      	add	sp, #40	; 0x28
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	ffffefff 	.word	0xffffefff

080034e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	1dfb      	adds	r3, r7, #7
 80034f2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034f4:	f7fd fd3e 	bl	8000f74 <HAL_GetTick>
 80034f8:	0002      	movs	r2, r0
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	18d3      	adds	r3, r2, r3
 8003502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003504:	f7fd fd36 	bl	8000f74 <HAL_GetTick>
 8003508:	0003      	movs	r3, r0
 800350a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800350c:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	015b      	lsls	r3, r3, #5
 8003512:	0d1b      	lsrs	r3, r3, #20
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	4353      	muls	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800351a:	e058      	b.n	80035ce <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	d055      	beq.n	80035ce <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003522:	f7fd fd27 	bl	8000f74 <HAL_GetTick>
 8003526:	0002      	movs	r2, r0
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	429a      	cmp	r2, r3
 8003530:	d902      	bls.n	8003538 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d142      	bne.n	80035be <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	21e0      	movs	r1, #224	; 0xe0
 8003544:	438a      	bics	r2, r1
 8003546:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	2382      	movs	r3, #130	; 0x82
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	429a      	cmp	r2, r3
 8003552:	d113      	bne.n	800357c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	429a      	cmp	r2, r3
 800355e:	d005      	beq.n	800356c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	429a      	cmp	r2, r3
 800356a:	d107      	bne.n	800357c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2140      	movs	r1, #64	; 0x40
 8003578:	438a      	bics	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	019b      	lsls	r3, r3, #6
 8003584:	429a      	cmp	r2, r3
 8003586:	d110      	bne.n	80035aa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	491a      	ldr	r1, [pc, #104]	; (80035fc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003594:	400a      	ands	r2, r1
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2180      	movs	r1, #128	; 0x80
 80035a4:	0189      	lsls	r1, r1, #6
 80035a6:	430a      	orrs	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	225d      	movs	r2, #93	; 0x5d
 80035ae:	2101      	movs	r1, #1
 80035b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	225c      	movs	r2, #92	; 0x5c
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e017      	b.n	80035ee <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	4013      	ands	r3, r2
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	425a      	negs	r2, r3
 80035de:	4153      	adcs	r3, r2
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	001a      	movs	r2, r3
 80035e4:	1dfb      	adds	r3, r7, #7
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d197      	bne.n	800351c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b008      	add	sp, #32
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	20000000 	.word	0x20000000
 80035fc:	ffffdfff 	.word	0xffffdfff

08003600 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800360e:	2317      	movs	r3, #23
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003616:	f7fd fcad 	bl	8000f74 <HAL_GetTick>
 800361a:	0002      	movs	r2, r0
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	18d3      	adds	r3, r2, r3
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003626:	f7fd fca5 	bl	8000f74 <HAL_GetTick>
 800362a:	0003      	movs	r3, r0
 800362c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	0013      	movs	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	189b      	adds	r3, r3, r2
 8003640:	00da      	lsls	r2, r3, #3
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	0d1b      	lsrs	r3, r3, #20
 8003646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003648:	4353      	muls	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800364c:	e068      	b.n	8003720 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	23c0      	movs	r3, #192	; 0xc0
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	429a      	cmp	r2, r3
 8003656:	d10a      	bne.n	800366e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d107      	bne.n	800366e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	2117      	movs	r1, #23
 8003666:	187b      	adds	r3, r7, r1
 8003668:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800366a:	187b      	adds	r3, r7, r1
 800366c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	d055      	beq.n	8003720 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003674:	f7fd fc7e 	bl	8000f74 <HAL_GetTick>
 8003678:	0002      	movs	r2, r0
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003680:	429a      	cmp	r2, r3
 8003682:	d902      	bls.n	800368a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	d142      	bne.n	8003710 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	21e0      	movs	r1, #224	; 0xe0
 8003696:	438a      	bics	r2, r1
 8003698:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	2382      	movs	r3, #130	; 0x82
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d113      	bne.n	80036ce <SPI_WaitFifoStateUntilTimeout+0xce>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d005      	beq.n	80036be <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d107      	bne.n	80036ce <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2140      	movs	r1, #64	; 0x40
 80036ca:	438a      	bics	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	019b      	lsls	r3, r3, #6
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d110      	bne.n	80036fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4916      	ldr	r1, [pc, #88]	; (8003740 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80036e6:	400a      	ands	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2180      	movs	r1, #128	; 0x80
 80036f6:	0189      	lsls	r1, r1, #6
 80036f8:	430a      	orrs	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	225d      	movs	r2, #93	; 0x5d
 8003700:	2101      	movs	r1, #1
 8003702:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	225c      	movs	r2, #92	; 0x5c
 8003708:	2100      	movs	r1, #0
 800370a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e010      	b.n	8003732 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	3b01      	subs	r3, #1
 800371e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	4013      	ands	r3, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	429a      	cmp	r2, r3
 800372e:	d18e      	bne.n	800364e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b00a      	add	sp, #40	; 0x28
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	20000000 	.word	0x20000000
 8003740:	ffffdfff 	.word	0xffffdfff

08003744 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	2382      	movs	r3, #130	; 0x82
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	429a      	cmp	r2, r3
 800375a:	d113      	bne.n	8003784 <SPI_EndRxTransaction+0x40>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	429a      	cmp	r2, r3
 8003766:	d005      	beq.n	8003774 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	429a      	cmp	r2, r3
 8003772:	d107      	bne.n	8003784 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2140      	movs	r1, #64	; 0x40
 8003780:	438a      	bics	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	0013      	movs	r3, r2
 800378e:	2200      	movs	r2, #0
 8003790:	2180      	movs	r1, #128	; 0x80
 8003792:	f7ff fea7 	bl	80034e4 <SPI_WaitFlagStateUntilTimeout>
 8003796:	1e03      	subs	r3, r0, #0
 8003798:	d007      	beq.n	80037aa <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379e:	2220      	movs	r2, #32
 80037a0:	431a      	orrs	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e026      	b.n	80037f8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	2382      	movs	r3, #130	; 0x82
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d11f      	bne.n	80037f6 <SPI_EndRxTransaction+0xb2>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	429a      	cmp	r2, r3
 80037c0:	d005      	beq.n	80037ce <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d113      	bne.n	80037f6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	23c0      	movs	r3, #192	; 0xc0
 80037d2:	00d9      	lsls	r1, r3, #3
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	0013      	movs	r3, r2
 80037dc:	2200      	movs	r2, #0
 80037de:	f7ff ff0f 	bl	8003600 <SPI_WaitFifoStateUntilTimeout>
 80037e2:	1e03      	subs	r3, r0, #0
 80037e4:	d007      	beq.n	80037f6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ea:	2220      	movs	r2, #32
 80037ec:	431a      	orrs	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e000      	b.n	80037f8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b004      	add	sp, #16
 80037fe:	bd80      	pop	{r7, pc}

08003800 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	23c0      	movs	r3, #192	; 0xc0
 8003810:	0159      	lsls	r1, r3, #5
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	0013      	movs	r3, r2
 800381a:	2200      	movs	r2, #0
 800381c:	f7ff fef0 	bl	8003600 <SPI_WaitFifoStateUntilTimeout>
 8003820:	1e03      	subs	r3, r0, #0
 8003822:	d007      	beq.n	8003834 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003828:	2220      	movs	r2, #32
 800382a:	431a      	orrs	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e027      	b.n	8003884 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	0013      	movs	r3, r2
 800383e:	2200      	movs	r2, #0
 8003840:	2180      	movs	r1, #128	; 0x80
 8003842:	f7ff fe4f 	bl	80034e4 <SPI_WaitFlagStateUntilTimeout>
 8003846:	1e03      	subs	r3, r0, #0
 8003848:	d007      	beq.n	800385a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384e:	2220      	movs	r2, #32
 8003850:	431a      	orrs	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e014      	b.n	8003884 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	23c0      	movs	r3, #192	; 0xc0
 800385e:	00d9      	lsls	r1, r3, #3
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	0013      	movs	r3, r2
 8003868:	2200      	movs	r2, #0
 800386a:	f7ff fec9 	bl	8003600 <SPI_WaitFifoStateUntilTimeout>
 800386e:	1e03      	subs	r3, r0, #0
 8003870:	d007      	beq.n	8003882 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003876:	2220      	movs	r2, #32
 8003878:	431a      	orrs	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e000      	b.n	8003884 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	0018      	movs	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	b004      	add	sp, #16
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e04e      	b.n	800393c <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2288      	movs	r2, #136	; 0x88
 80038a2:	589b      	ldr	r3, [r3, r2]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d107      	bne.n	80038b8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2284      	movs	r2, #132	; 0x84
 80038ac:	2100      	movs	r1, #0
 80038ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	0018      	movs	r0, r3
 80038b4:	f7fd fa56 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2288      	movs	r2, #136	; 0x88
 80038bc:	2124      	movs	r1, #36	; 0x24
 80038be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2101      	movs	r1, #1
 80038cc:	438a      	bics	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	0018      	movs	r0, r3
 80038dc:	f000 faac 	bl	8003e38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 f830 	bl	8003948 <UART_SetConfig>
 80038e8:	0003      	movs	r3, r0
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e024      	b.n	800393c <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4911      	ldr	r1, [pc, #68]	; (8003944 <HAL_HalfDuplex_Init+0xb8>)
 80038fe:	400a      	ands	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2122      	movs	r1, #34	; 0x22
 800390e:	438a      	bics	r2, r1
 8003910:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2108      	movs	r1, #8
 800391e:	430a      	orrs	r2, r1
 8003920:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2101      	movs	r1, #1
 800392e:	430a      	orrs	r2, r1
 8003930:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	0018      	movs	r0, r3
 8003936:	f000 fb33 	bl	8003fa0 <UART_CheckIdleState>
 800393a:	0003      	movs	r3, r0
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b002      	add	sp, #8
 8003942:	bd80      	pop	{r7, pc}
 8003944:	ffffb7ff 	.word	0xffffb7ff

08003948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003948:	b5b0      	push	{r4, r5, r7, lr}
 800394a:	b090      	sub	sp, #64	; 0x40
 800394c:	af00      	add	r7, sp, #0
 800394e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003950:	231a      	movs	r3, #26
 8003952:	2220      	movs	r2, #32
 8003954:	189b      	adds	r3, r3, r2
 8003956:	19db      	adds	r3, r3, r7
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	431a      	orrs	r2, r3
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	4313      	orrs	r3, r2
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4ac4      	ldr	r2, [pc, #784]	; (8003c8c <UART_SetConfig+0x344>)
 800397c:	4013      	ands	r3, r2
 800397e:	0019      	movs	r1, r3
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003986:	430b      	orrs	r3, r1
 8003988:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4abf      	ldr	r2, [pc, #764]	; (8003c90 <UART_SetConfig+0x348>)
 8003992:	4013      	ands	r3, r2
 8003994:	0018      	movs	r0, r3
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	68d9      	ldr	r1, [r3, #12]
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	0003      	movs	r3, r0
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4ab9      	ldr	r2, [pc, #740]	; (8003c94 <UART_SetConfig+0x34c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d004      	beq.n	80039be <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ba:	4313      	orrs	r3, r2
 80039bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4ab4      	ldr	r2, [pc, #720]	; (8003c98 <UART_SetConfig+0x350>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d0:	430b      	orrs	r3, r1
 80039d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	220f      	movs	r2, #15
 80039dc:	4393      	bics	r3, r2
 80039de:	0018      	movs	r0, r3
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	0003      	movs	r3, r0
 80039ea:	430b      	orrs	r3, r1
 80039ec:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4aaa      	ldr	r2, [pc, #680]	; (8003c9c <UART_SetConfig+0x354>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d131      	bne.n	8003a5c <UART_SetConfig+0x114>
 80039f8:	4ba9      	ldr	r3, [pc, #676]	; (8003ca0 <UART_SetConfig+0x358>)
 80039fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fc:	2203      	movs	r2, #3
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d01d      	beq.n	8003a40 <UART_SetConfig+0xf8>
 8003a04:	d823      	bhi.n	8003a4e <UART_SetConfig+0x106>
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d00c      	beq.n	8003a24 <UART_SetConfig+0xdc>
 8003a0a:	d820      	bhi.n	8003a4e <UART_SetConfig+0x106>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <UART_SetConfig+0xce>
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d00e      	beq.n	8003a32 <UART_SetConfig+0xea>
 8003a14:	e01b      	b.n	8003a4e <UART_SetConfig+0x106>
 8003a16:	231b      	movs	r3, #27
 8003a18:	2220      	movs	r2, #32
 8003a1a:	189b      	adds	r3, r3, r2
 8003a1c:	19db      	adds	r3, r3, r7
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	e071      	b.n	8003b08 <UART_SetConfig+0x1c0>
 8003a24:	231b      	movs	r3, #27
 8003a26:	2220      	movs	r2, #32
 8003a28:	189b      	adds	r3, r3, r2
 8003a2a:	19db      	adds	r3, r3, r7
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	e06a      	b.n	8003b08 <UART_SetConfig+0x1c0>
 8003a32:	231b      	movs	r3, #27
 8003a34:	2220      	movs	r2, #32
 8003a36:	189b      	adds	r3, r3, r2
 8003a38:	19db      	adds	r3, r3, r7
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	e063      	b.n	8003b08 <UART_SetConfig+0x1c0>
 8003a40:	231b      	movs	r3, #27
 8003a42:	2220      	movs	r2, #32
 8003a44:	189b      	adds	r3, r3, r2
 8003a46:	19db      	adds	r3, r3, r7
 8003a48:	2208      	movs	r2, #8
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	e05c      	b.n	8003b08 <UART_SetConfig+0x1c0>
 8003a4e:	231b      	movs	r3, #27
 8003a50:	2220      	movs	r2, #32
 8003a52:	189b      	adds	r3, r3, r2
 8003a54:	19db      	adds	r3, r3, r7
 8003a56:	2210      	movs	r2, #16
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	e055      	b.n	8003b08 <UART_SetConfig+0x1c0>
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a90      	ldr	r2, [pc, #576]	; (8003ca4 <UART_SetConfig+0x35c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d106      	bne.n	8003a74 <UART_SetConfig+0x12c>
 8003a66:	231b      	movs	r3, #27
 8003a68:	2220      	movs	r2, #32
 8003a6a:	189b      	adds	r3, r3, r2
 8003a6c:	19db      	adds	r3, r3, r7
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
 8003a72:	e049      	b.n	8003b08 <UART_SetConfig+0x1c0>
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a86      	ldr	r2, [pc, #536]	; (8003c94 <UART_SetConfig+0x34c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d13e      	bne.n	8003afc <UART_SetConfig+0x1b4>
 8003a7e:	4b88      	ldr	r3, [pc, #544]	; (8003ca0 <UART_SetConfig+0x358>)
 8003a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a82:	23c0      	movs	r3, #192	; 0xc0
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	4013      	ands	r3, r2
 8003a88:	22c0      	movs	r2, #192	; 0xc0
 8003a8a:	0112      	lsls	r2, r2, #4
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d027      	beq.n	8003ae0 <UART_SetConfig+0x198>
 8003a90:	22c0      	movs	r2, #192	; 0xc0
 8003a92:	0112      	lsls	r2, r2, #4
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d82a      	bhi.n	8003aee <UART_SetConfig+0x1a6>
 8003a98:	2280      	movs	r2, #128	; 0x80
 8003a9a:	0112      	lsls	r2, r2, #4
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d011      	beq.n	8003ac4 <UART_SetConfig+0x17c>
 8003aa0:	2280      	movs	r2, #128	; 0x80
 8003aa2:	0112      	lsls	r2, r2, #4
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d822      	bhi.n	8003aee <UART_SetConfig+0x1a6>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <UART_SetConfig+0x16e>
 8003aac:	2280      	movs	r2, #128	; 0x80
 8003aae:	00d2      	lsls	r2, r2, #3
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00e      	beq.n	8003ad2 <UART_SetConfig+0x18a>
 8003ab4:	e01b      	b.n	8003aee <UART_SetConfig+0x1a6>
 8003ab6:	231b      	movs	r3, #27
 8003ab8:	2220      	movs	r2, #32
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	19db      	adds	r3, r3, r7
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	e021      	b.n	8003b08 <UART_SetConfig+0x1c0>
 8003ac4:	231b      	movs	r3, #27
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	189b      	adds	r3, r3, r2
 8003aca:	19db      	adds	r3, r3, r7
 8003acc:	2202      	movs	r2, #2
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	e01a      	b.n	8003b08 <UART_SetConfig+0x1c0>
 8003ad2:	231b      	movs	r3, #27
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	19db      	adds	r3, r3, r7
 8003ada:	2204      	movs	r2, #4
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	e013      	b.n	8003b08 <UART_SetConfig+0x1c0>
 8003ae0:	231b      	movs	r3, #27
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	189b      	adds	r3, r3, r2
 8003ae6:	19db      	adds	r3, r3, r7
 8003ae8:	2208      	movs	r2, #8
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	e00c      	b.n	8003b08 <UART_SetConfig+0x1c0>
 8003aee:	231b      	movs	r3, #27
 8003af0:	2220      	movs	r2, #32
 8003af2:	189b      	adds	r3, r3, r2
 8003af4:	19db      	adds	r3, r3, r7
 8003af6:	2210      	movs	r2, #16
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	e005      	b.n	8003b08 <UART_SetConfig+0x1c0>
 8003afc:	231b      	movs	r3, #27
 8003afe:	2220      	movs	r2, #32
 8003b00:	189b      	adds	r3, r3, r2
 8003b02:	19db      	adds	r3, r3, r7
 8003b04:	2210      	movs	r2, #16
 8003b06:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a61      	ldr	r2, [pc, #388]	; (8003c94 <UART_SetConfig+0x34c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d000      	beq.n	8003b14 <UART_SetConfig+0x1cc>
 8003b12:	e092      	b.n	8003c3a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b14:	231b      	movs	r3, #27
 8003b16:	2220      	movs	r2, #32
 8003b18:	189b      	adds	r3, r3, r2
 8003b1a:	19db      	adds	r3, r3, r7
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d015      	beq.n	8003b4e <UART_SetConfig+0x206>
 8003b22:	dc18      	bgt.n	8003b56 <UART_SetConfig+0x20e>
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d00d      	beq.n	8003b44 <UART_SetConfig+0x1fc>
 8003b28:	dc15      	bgt.n	8003b56 <UART_SetConfig+0x20e>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <UART_SetConfig+0x1ec>
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d005      	beq.n	8003b3e <UART_SetConfig+0x1f6>
 8003b32:	e010      	b.n	8003b56 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b34:	f7fe fdfa 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b3c:	e014      	b.n	8003b68 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ca8 <UART_SetConfig+0x360>)
 8003b40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b42:	e011      	b.n	8003b68 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b44:	f7fe fd66 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b4c:	e00c      	b.n	8003b68 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b54:	e008      	b.n	8003b68 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003b5a:	231a      	movs	r3, #26
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	189b      	adds	r3, r3, r2
 8003b60:	19db      	adds	r3, r3, r7
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
        break;
 8003b66:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d100      	bne.n	8003b70 <UART_SetConfig+0x228>
 8003b6e:	e147      	b.n	8003e00 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b74:	4b4d      	ldr	r3, [pc, #308]	; (8003cac <UART_SetConfig+0x364>)
 8003b76:	0052      	lsls	r2, r2, #1
 8003b78:	5ad3      	ldrh	r3, [r2, r3]
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b7e:	f7fc fac1 	bl	8000104 <__udivsi3>
 8003b82:	0003      	movs	r3, r0
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	0013      	movs	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d305      	bcc.n	8003ba2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d906      	bls.n	8003bb0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003ba2:	231a      	movs	r3, #26
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	189b      	adds	r3, r3, r2
 8003ba8:	19db      	adds	r3, r3, r7
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	e127      	b.n	8003e00 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bbc:	4b3b      	ldr	r3, [pc, #236]	; (8003cac <UART_SetConfig+0x364>)
 8003bbe:	0052      	lsls	r2, r2, #1
 8003bc0:	5ad3      	ldrh	r3, [r2, r3]
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	69b8      	ldr	r0, [r7, #24]
 8003bce:	69f9      	ldr	r1, [r7, #28]
 8003bd0:	f7fc fc0e 	bl	80003f0 <__aeabi_uldivmod>
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	000b      	movs	r3, r1
 8003bd8:	0e11      	lsrs	r1, r2, #24
 8003bda:	021d      	lsls	r5, r3, #8
 8003bdc:	430d      	orrs	r5, r1
 8003bde:	0214      	lsls	r4, r2, #8
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	085b      	lsrs	r3, r3, #1
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68b8      	ldr	r0, [r7, #8]
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	1900      	adds	r0, r0, r4
 8003bf2:	4169      	adcs	r1, r5
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f7fc fbf5 	bl	80003f0 <__aeabi_uldivmod>
 8003c06:	0002      	movs	r2, r0
 8003c08:	000b      	movs	r3, r1
 8003c0a:	0013      	movs	r3, r2
 8003c0c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c10:	23c0      	movs	r3, #192	; 0xc0
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d309      	bcc.n	8003c2c <UART_SetConfig+0x2e4>
 8003c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c1a:	2380      	movs	r3, #128	; 0x80
 8003c1c:	035b      	lsls	r3, r3, #13
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d204      	bcs.n	8003c2c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	e0e9      	b.n	8003e00 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003c2c:	231a      	movs	r3, #26
 8003c2e:	2220      	movs	r2, #32
 8003c30:	189b      	adds	r3, r3, r2
 8003c32:	19db      	adds	r3, r3, r7
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	e0e2      	b.n	8003e00 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d000      	beq.n	8003c48 <UART_SetConfig+0x300>
 8003c46:	e083      	b.n	8003d50 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003c48:	231b      	movs	r3, #27
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	189b      	adds	r3, r3, r2
 8003c4e:	19db      	adds	r3, r3, r7
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d015      	beq.n	8003c82 <UART_SetConfig+0x33a>
 8003c56:	dc2b      	bgt.n	8003cb0 <UART_SetConfig+0x368>
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d00d      	beq.n	8003c78 <UART_SetConfig+0x330>
 8003c5c:	dc28      	bgt.n	8003cb0 <UART_SetConfig+0x368>
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <UART_SetConfig+0x320>
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d005      	beq.n	8003c72 <UART_SetConfig+0x32a>
 8003c66:	e023      	b.n	8003cb0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c68:	f7fe fd60 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c70:	e027      	b.n	8003cc2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c72:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <UART_SetConfig+0x360>)
 8003c74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c76:	e024      	b.n	8003cc2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c78:	f7fe fccc 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c80:	e01f      	b.n	8003cc2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c88:	e01b      	b.n	8003cc2 <UART_SetConfig+0x37a>
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	cfff69f3 	.word	0xcfff69f3
 8003c90:	ffffcfff 	.word	0xffffcfff
 8003c94:	40008000 	.word	0x40008000
 8003c98:	11fff4ff 	.word	0x11fff4ff
 8003c9c:	40013800 	.word	0x40013800
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40004400 	.word	0x40004400
 8003ca8:	00f42400 	.word	0x00f42400
 8003cac:	0800499c 	.word	0x0800499c
      default:
        pclk = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003cb4:	231a      	movs	r3, #26
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	189b      	adds	r3, r3, r2
 8003cba:	19db      	adds	r3, r3, r7
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
        break;
 8003cc0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d100      	bne.n	8003cca <UART_SetConfig+0x382>
 8003cc8:	e09a      	b.n	8003e00 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cce:	4b58      	ldr	r3, [pc, #352]	; (8003e30 <UART_SetConfig+0x4e8>)
 8003cd0:	0052      	lsls	r2, r2, #1
 8003cd2:	5ad3      	ldrh	r3, [r2, r3]
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003cd8:	f7fc fa14 	bl	8000104 <__udivsi3>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	005a      	lsls	r2, r3, #1
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	18d2      	adds	r2, r2, r3
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	0019      	movs	r1, r3
 8003cee:	0010      	movs	r0, r2
 8003cf0:	f7fc fa08 	bl	8000104 <__udivsi3>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	2b0f      	cmp	r3, #15
 8003cfc:	d921      	bls.n	8003d42 <UART_SetConfig+0x3fa>
 8003cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	025b      	lsls	r3, r3, #9
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d21c      	bcs.n	8003d42 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	200e      	movs	r0, #14
 8003d0e:	2420      	movs	r4, #32
 8003d10:	1903      	adds	r3, r0, r4
 8003d12:	19db      	adds	r3, r3, r7
 8003d14:	210f      	movs	r1, #15
 8003d16:	438a      	bics	r2, r1
 8003d18:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2207      	movs	r2, #7
 8003d22:	4013      	ands	r3, r2
 8003d24:	b299      	uxth	r1, r3
 8003d26:	1903      	adds	r3, r0, r4
 8003d28:	19db      	adds	r3, r3, r7
 8003d2a:	1902      	adds	r2, r0, r4
 8003d2c:	19d2      	adds	r2, r2, r7
 8003d2e:	8812      	ldrh	r2, [r2, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	1902      	adds	r2, r0, r4
 8003d3a:	19d2      	adds	r2, r2, r7
 8003d3c:	8812      	ldrh	r2, [r2, #0]
 8003d3e:	60da      	str	r2, [r3, #12]
 8003d40:	e05e      	b.n	8003e00 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d42:	231a      	movs	r3, #26
 8003d44:	2220      	movs	r2, #32
 8003d46:	189b      	adds	r3, r3, r2
 8003d48:	19db      	adds	r3, r3, r7
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e057      	b.n	8003e00 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d50:	231b      	movs	r3, #27
 8003d52:	2220      	movs	r2, #32
 8003d54:	189b      	adds	r3, r3, r2
 8003d56:	19db      	adds	r3, r3, r7
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d015      	beq.n	8003d8a <UART_SetConfig+0x442>
 8003d5e:	dc18      	bgt.n	8003d92 <UART_SetConfig+0x44a>
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d00d      	beq.n	8003d80 <UART_SetConfig+0x438>
 8003d64:	dc15      	bgt.n	8003d92 <UART_SetConfig+0x44a>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <UART_SetConfig+0x428>
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d005      	beq.n	8003d7a <UART_SetConfig+0x432>
 8003d6e:	e010      	b.n	8003d92 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d70:	f7fe fcdc 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 8003d74:	0003      	movs	r3, r0
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d78:	e014      	b.n	8003da4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d7a:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <UART_SetConfig+0x4ec>)
 8003d7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d7e:	e011      	b.n	8003da4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d80:	f7fe fc48 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8003d84:	0003      	movs	r3, r0
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d88:	e00c      	b.n	8003da4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d90:	e008      	b.n	8003da4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003d96:	231a      	movs	r3, #26
 8003d98:	2220      	movs	r2, #32
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	19db      	adds	r3, r3, r7
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
        break;
 8003da2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d02a      	beq.n	8003e00 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dae:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <UART_SetConfig+0x4e8>)
 8003db0:	0052      	lsls	r2, r2, #1
 8003db2:	5ad3      	ldrh	r3, [r2, r3]
 8003db4:	0019      	movs	r1, r3
 8003db6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003db8:	f7fc f9a4 	bl	8000104 <__udivsi3>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	001a      	movs	r2, r3
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	18d2      	adds	r2, r2, r3
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	0019      	movs	r1, r3
 8003dce:	0010      	movs	r0, r2
 8003dd0:	f7fc f998 	bl	8000104 <__udivsi3>
 8003dd4:	0003      	movs	r3, r0
 8003dd6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	2b0f      	cmp	r3, #15
 8003ddc:	d90a      	bls.n	8003df4 <UART_SetConfig+0x4ac>
 8003dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	025b      	lsls	r3, r3, #9
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d205      	bcs.n	8003df4 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	e005      	b.n	8003e00 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003df4:	231a      	movs	r3, #26
 8003df6:	2220      	movs	r2, #32
 8003df8:	189b      	adds	r3, r3, r2
 8003dfa:	19db      	adds	r3, r3, r7
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	226a      	movs	r2, #106	; 0x6a
 8003e04:	2101      	movs	r1, #1
 8003e06:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	2268      	movs	r2, #104	; 0x68
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	2200      	movs	r2, #0
 8003e14:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	2200      	movs	r2, #0
 8003e1a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003e1c:	231a      	movs	r3, #26
 8003e1e:	2220      	movs	r2, #32
 8003e20:	189b      	adds	r3, r3, r2
 8003e22:	19db      	adds	r3, r3, r7
 8003e24:	781b      	ldrb	r3, [r3, #0]
}
 8003e26:	0018      	movs	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b010      	add	sp, #64	; 0x40
 8003e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	0800499c 	.word	0x0800499c
 8003e34:	00f42400 	.word	0x00f42400

08003e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	2208      	movs	r2, #8
 8003e46:	4013      	ands	r3, r2
 8003e48:	d00b      	beq.n	8003e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4a4a      	ldr	r2, [pc, #296]	; (8003f7c <UART_AdvFeatureConfig+0x144>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	0019      	movs	r1, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	2201      	movs	r2, #1
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	4a43      	ldr	r2, [pc, #268]	; (8003f80 <UART_AdvFeatureConfig+0x148>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	0019      	movs	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	2202      	movs	r2, #2
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4a3b      	ldr	r2, [pc, #236]	; (8003f84 <UART_AdvFeatureConfig+0x14c>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	0019      	movs	r1, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	2204      	movs	r2, #4
 8003eac:	4013      	ands	r3, r2
 8003eae:	d00b      	beq.n	8003ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4a34      	ldr	r2, [pc, #208]	; (8003f88 <UART_AdvFeatureConfig+0x150>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	0019      	movs	r1, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	2210      	movs	r2, #16
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d00b      	beq.n	8003eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a2c      	ldr	r2, [pc, #176]	; (8003f8c <UART_AdvFeatureConfig+0x154>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	0019      	movs	r1, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	2220      	movs	r2, #32
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d00b      	beq.n	8003f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	4a25      	ldr	r2, [pc, #148]	; (8003f90 <UART_AdvFeatureConfig+0x158>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	0019      	movs	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	2240      	movs	r2, #64	; 0x40
 8003f12:	4013      	ands	r3, r2
 8003f14:	d01d      	beq.n	8003f52 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <UART_AdvFeatureConfig+0x15c>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	0019      	movs	r1, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	035b      	lsls	r3, r3, #13
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d10b      	bne.n	8003f52 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <UART_AdvFeatureConfig+0x160>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d00b      	beq.n	8003f74 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <UART_AdvFeatureConfig+0x164>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	0019      	movs	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
  }
}
 8003f74:	46c0      	nop			; (mov r8, r8)
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b002      	add	sp, #8
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	ffff7fff 	.word	0xffff7fff
 8003f80:	fffdffff 	.word	0xfffdffff
 8003f84:	fffeffff 	.word	0xfffeffff
 8003f88:	fffbffff 	.word	0xfffbffff
 8003f8c:	ffffefff 	.word	0xffffefff
 8003f90:	ffffdfff 	.word	0xffffdfff
 8003f94:	ffefffff 	.word	0xffefffff
 8003f98:	ff9fffff 	.word	0xff9fffff
 8003f9c:	fff7ffff 	.word	0xfff7ffff

08003fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b092      	sub	sp, #72	; 0x48
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2290      	movs	r2, #144	; 0x90
 8003fac:	2100      	movs	r1, #0
 8003fae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fb0:	f7fc ffe0 	bl	8000f74 <HAL_GetTick>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2208      	movs	r2, #8
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d12d      	bne.n	8004022 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc8:	2280      	movs	r2, #128	; 0x80
 8003fca:	0391      	lsls	r1, r2, #14
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4a47      	ldr	r2, [pc, #284]	; (80040ec <UART_CheckIdleState+0x14c>)
 8003fd0:	9200      	str	r2, [sp, #0]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f000 f88e 	bl	80040f4 <UART_WaitOnFlagUntilTimeout>
 8003fd8:	1e03      	subs	r3, r0, #0
 8003fda:	d022      	beq.n	8004022 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	f383 8810 	msr	PRIMASK, r3
}
 8003ff0:	46c0      	nop			; (mov r8, r8)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2180      	movs	r1, #128	; 0x80
 8003ffe:	438a      	bics	r2, r1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	f383 8810 	msr	PRIMASK, r3
}
 800400c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2288      	movs	r2, #136	; 0x88
 8004012:	2120      	movs	r1, #32
 8004014:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2284      	movs	r2, #132	; 0x84
 800401a:	2100      	movs	r1, #0
 800401c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e060      	b.n	80040e4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2204      	movs	r2, #4
 800402a:	4013      	ands	r3, r2
 800402c:	2b04      	cmp	r3, #4
 800402e:	d146      	bne.n	80040be <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004032:	2280      	movs	r2, #128	; 0x80
 8004034:	03d1      	lsls	r1, r2, #15
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4a2c      	ldr	r2, [pc, #176]	; (80040ec <UART_CheckIdleState+0x14c>)
 800403a:	9200      	str	r2, [sp, #0]
 800403c:	2200      	movs	r2, #0
 800403e:	f000 f859 	bl	80040f4 <UART_WaitOnFlagUntilTimeout>
 8004042:	1e03      	subs	r3, r0, #0
 8004044:	d03b      	beq.n	80040be <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004046:	f3ef 8310 	mrs	r3, PRIMASK
 800404a:	60fb      	str	r3, [r7, #12]
  return(result);
 800404c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
 8004050:	2301      	movs	r3, #1
 8004052:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f383 8810 	msr	PRIMASK, r3
}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4922      	ldr	r1, [pc, #136]	; (80040f0 <UART_CheckIdleState+0x150>)
 8004068:	400a      	ands	r2, r1
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f383 8810 	msr	PRIMASK, r3
}
 8004076:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004078:	f3ef 8310 	mrs	r3, PRIMASK
 800407c:	61bb      	str	r3, [r7, #24]
  return(result);
 800407e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004080:	633b      	str	r3, [r7, #48]	; 0x30
 8004082:	2301      	movs	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f383 8810 	msr	PRIMASK, r3
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2101      	movs	r1, #1
 800409a:	438a      	bics	r2, r1
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f383 8810 	msr	PRIMASK, r3
}
 80040a8:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	228c      	movs	r2, #140	; 0x8c
 80040ae:	2120      	movs	r1, #32
 80040b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2284      	movs	r2, #132	; 0x84
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e012      	b.n	80040e4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2288      	movs	r2, #136	; 0x88
 80040c2:	2120      	movs	r1, #32
 80040c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	228c      	movs	r2, #140	; 0x8c
 80040ca:	2120      	movs	r1, #32
 80040cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2284      	movs	r2, #132	; 0x84
 80040de:	2100      	movs	r1, #0
 80040e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b010      	add	sp, #64	; 0x40
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	01ffffff 	.word	0x01ffffff
 80040f0:	fffffedf 	.word	0xfffffedf

080040f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	1dfb      	adds	r3, r7, #7
 8004102:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004104:	e051      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	3301      	adds	r3, #1
 800410a:	d04e      	beq.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410c:	f7fc ff32 	bl	8000f74 <HAL_GetTick>
 8004110:	0002      	movs	r2, r0
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	429a      	cmp	r2, r3
 800411a:	d302      	bcc.n	8004122 <UART_WaitOnFlagUntilTimeout+0x2e>
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e051      	b.n	80041ca <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2204      	movs	r2, #4
 800412e:	4013      	ands	r3, r2
 8004130:	d03b      	beq.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb6>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b80      	cmp	r3, #128	; 0x80
 8004136:	d038      	beq.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb6>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d035      	beq.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	2208      	movs	r2, #8
 8004146:	4013      	ands	r3, r2
 8004148:	2b08      	cmp	r3, #8
 800414a:	d111      	bne.n	8004170 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2208      	movs	r2, #8
 8004152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	0018      	movs	r0, r3
 8004158:	f000 f83c 	bl	80041d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2290      	movs	r2, #144	; 0x90
 8004160:	2108      	movs	r1, #8
 8004162:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2284      	movs	r2, #132	; 0x84
 8004168:	2100      	movs	r1, #0
 800416a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e02c      	b.n	80041ca <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	2380      	movs	r3, #128	; 0x80
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	401a      	ands	r2, r3
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	429a      	cmp	r2, r3
 8004182:	d112      	bne.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2280      	movs	r2, #128	; 0x80
 800418a:	0112      	lsls	r2, r2, #4
 800418c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	0018      	movs	r0, r3
 8004192:	f000 f81f 	bl	80041d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2290      	movs	r2, #144	; 0x90
 800419a:	2120      	movs	r1, #32
 800419c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2284      	movs	r2, #132	; 0x84
 80041a2:	2100      	movs	r1, #0
 80041a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e00f      	b.n	80041ca <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	425a      	negs	r2, r3
 80041ba:	4153      	adcs	r3, r2
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	001a      	movs	r2, r3
 80041c0:	1dfb      	adds	r3, r7, #7
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d09e      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b004      	add	sp, #16
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08e      	sub	sp, #56	; 0x38
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041dc:	f3ef 8310 	mrs	r3, PRIMASK
 80041e0:	617b      	str	r3, [r7, #20]
  return(result);
 80041e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
 80041e6:	2301      	movs	r3, #1
 80041e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f383 8810 	msr	PRIMASK, r3
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4926      	ldr	r1, [pc, #152]	; (8004298 <UART_EndRxTransfer+0xc4>)
 80041fe:	400a      	ands	r2, r1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004204:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f383 8810 	msr	PRIMASK, r3
}
 800420c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800420e:	f3ef 8310 	mrs	r3, PRIMASK
 8004212:	623b      	str	r3, [r7, #32]
  return(result);
 8004214:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004216:	633b      	str	r3, [r7, #48]	; 0x30
 8004218:	2301      	movs	r3, #1
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	f383 8810 	msr	PRIMASK, r3
}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	491b      	ldr	r1, [pc, #108]	; (800429c <UART_EndRxTransfer+0xc8>)
 8004230:	400a      	ands	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	f383 8810 	msr	PRIMASK, r3
}
 800423e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d118      	bne.n	800427a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004248:	f3ef 8310 	mrs	r3, PRIMASK
 800424c:	60bb      	str	r3, [r7, #8]
  return(result);
 800424e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004252:	2301      	movs	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f383 8810 	msr	PRIMASK, r3
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2110      	movs	r1, #16
 800426a:	438a      	bics	r2, r1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f383 8810 	msr	PRIMASK, r3
}
 8004278:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	228c      	movs	r2, #140	; 0x8c
 800427e:	2120      	movs	r1, #32
 8004280:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	46bd      	mov	sp, r7
 8004292:	b00e      	add	sp, #56	; 0x38
 8004294:	bd80      	pop	{r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	fffffedf 	.word	0xfffffedf
 800429c:	effffffe 	.word	0xeffffffe

080042a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2284      	movs	r2, #132	; 0x84
 80042ac:	5c9b      	ldrb	r3, [r3, r2]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e027      	b.n	8004306 <HAL_UARTEx_DisableFifoMode+0x66>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2284      	movs	r2, #132	; 0x84
 80042ba:	2101      	movs	r1, #1
 80042bc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2288      	movs	r2, #136	; 0x88
 80042c2:	2124      	movs	r1, #36	; 0x24
 80042c4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2101      	movs	r1, #1
 80042da:	438a      	bics	r2, r1
 80042dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4a0b      	ldr	r2, [pc, #44]	; (8004310 <HAL_UARTEx_DisableFifoMode+0x70>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2288      	movs	r2, #136	; 0x88
 80042f8:	2120      	movs	r1, #32
 80042fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2284      	movs	r2, #132	; 0x84
 8004300:	2100      	movs	r1, #0
 8004302:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	0018      	movs	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	b004      	add	sp, #16
 800430c:	bd80      	pop	{r7, pc}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	dfffffff 	.word	0xdfffffff

08004314 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2284      	movs	r2, #132	; 0x84
 8004322:	5c9b      	ldrb	r3, [r3, r2]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004328:	2302      	movs	r3, #2
 800432a:	e02e      	b.n	800438a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2284      	movs	r2, #132	; 0x84
 8004330:	2101      	movs	r1, #1
 8004332:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2288      	movs	r2, #136	; 0x88
 8004338:	2124      	movs	r1, #36	; 0x24
 800433a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2101      	movs	r1, #1
 8004350:	438a      	bics	r2, r1
 8004352:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	08d9      	lsrs	r1, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	0018      	movs	r0, r3
 800436c:	f000 f854 	bl	8004418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2288      	movs	r2, #136	; 0x88
 800437c:	2120      	movs	r1, #32
 800437e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2284      	movs	r2, #132	; 0x84
 8004384:	2100      	movs	r1, #0
 8004386:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	0018      	movs	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	b004      	add	sp, #16
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2284      	movs	r2, #132	; 0x84
 80043a2:	5c9b      	ldrb	r3, [r3, r2]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e02f      	b.n	800440c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2284      	movs	r2, #132	; 0x84
 80043b0:	2101      	movs	r1, #1
 80043b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2288      	movs	r2, #136	; 0x88
 80043b8:	2124      	movs	r1, #36	; 0x24
 80043ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2101      	movs	r1, #1
 80043d0:	438a      	bics	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80043dc:	4013      	ands	r3, r2
 80043de:	0019      	movs	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	0018      	movs	r0, r3
 80043ee:	f000 f813 	bl	8004418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2288      	movs	r2, #136	; 0x88
 80043fe:	2120      	movs	r1, #32
 8004400:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2284      	movs	r2, #132	; 0x84
 8004406:	2100      	movs	r1, #0
 8004408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	0018      	movs	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	b004      	add	sp, #16
 8004412:	bd80      	pop	{r7, pc}
 8004414:	f1ffffff 	.word	0xf1ffffff

08004418 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004424:	2b00      	cmp	r3, #0
 8004426:	d108      	bne.n	800443a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	226a      	movs	r2, #106	; 0x6a
 800442c:	2101      	movs	r1, #1
 800442e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2268      	movs	r2, #104	; 0x68
 8004434:	2101      	movs	r1, #1
 8004436:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004438:	e043      	b.n	80044c2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800443a:	260f      	movs	r6, #15
 800443c:	19bb      	adds	r3, r7, r6
 800443e:	2208      	movs	r2, #8
 8004440:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004442:	200e      	movs	r0, #14
 8004444:	183b      	adds	r3, r7, r0
 8004446:	2208      	movs	r2, #8
 8004448:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	0e5b      	lsrs	r3, r3, #25
 8004452:	b2da      	uxtb	r2, r3
 8004454:	240d      	movs	r4, #13
 8004456:	193b      	adds	r3, r7, r4
 8004458:	2107      	movs	r1, #7
 800445a:	400a      	ands	r2, r1
 800445c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	0f5b      	lsrs	r3, r3, #29
 8004466:	b2da      	uxtb	r2, r3
 8004468:	250c      	movs	r5, #12
 800446a:	197b      	adds	r3, r7, r5
 800446c:	2107      	movs	r1, #7
 800446e:	400a      	ands	r2, r1
 8004470:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004472:	183b      	adds	r3, r7, r0
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	197a      	adds	r2, r7, r5
 8004478:	7812      	ldrb	r2, [r2, #0]
 800447a:	4914      	ldr	r1, [pc, #80]	; (80044cc <UARTEx_SetNbDataToProcess+0xb4>)
 800447c:	5c8a      	ldrb	r2, [r1, r2]
 800447e:	435a      	muls	r2, r3
 8004480:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004482:	197b      	adds	r3, r7, r5
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <UARTEx_SetNbDataToProcess+0xb8>)
 8004488:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800448a:	0019      	movs	r1, r3
 800448c:	f7fb fec4 	bl	8000218 <__divsi3>
 8004490:	0003      	movs	r3, r0
 8004492:	b299      	uxth	r1, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	226a      	movs	r2, #106	; 0x6a
 8004498:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800449a:	19bb      	adds	r3, r7, r6
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	193a      	adds	r2, r7, r4
 80044a0:	7812      	ldrb	r2, [r2, #0]
 80044a2:	490a      	ldr	r1, [pc, #40]	; (80044cc <UARTEx_SetNbDataToProcess+0xb4>)
 80044a4:	5c8a      	ldrb	r2, [r1, r2]
 80044a6:	435a      	muls	r2, r3
 80044a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80044aa:	193b      	adds	r3, r7, r4
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <UARTEx_SetNbDataToProcess+0xb8>)
 80044b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044b2:	0019      	movs	r1, r3
 80044b4:	f7fb feb0 	bl	8000218 <__divsi3>
 80044b8:	0003      	movs	r3, r0
 80044ba:	b299      	uxth	r1, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2268      	movs	r2, #104	; 0x68
 80044c0:	5299      	strh	r1, [r3, r2]
}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b005      	add	sp, #20
 80044c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	080049b4 	.word	0x080049b4
 80044d0:	080049bc 	.word	0x080049bc

080044d4 <nrf_read_reg>:
 */

#include "NRF24L01.h"

uint8_t nrf_read_reg(uint8_t reg)
{
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af02      	add	r7, sp, #8
 80044da:	0002      	movs	r2, r0
 80044dc:	1dfb      	adds	r3, r7, #7
 80044de:	701a      	strb	r2, [r3, #0]
//    HAL_SPI_Transmit(&hspi1, &command, 1, 100);
//    HAL_SPI_Receive(&hspi1, &status, 1, 100);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
//
//    return status;
	uint8_t command = NRF24_CMD_R_REGISTER | reg;
 80044e0:	240f      	movs	r4, #15
 80044e2:	193b      	adds	r3, r7, r4
 80044e4:	1dfa      	adds	r2, r7, #7
 80044e6:	7812      	ldrb	r2, [r2, #0]
 80044e8:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t data;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	0059      	lsls	r1, r3, #1
 80044ee:	23a0      	movs	r3, #160	; 0xa0
 80044f0:	05db      	lsls	r3, r3, #23
 80044f2:	2200      	movs	r2, #0
 80044f4:	0018      	movs	r0, r3
 80044f6:	f7fd fc01 	bl	8001cfc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 80044fa:	230e      	movs	r3, #14
 80044fc:	18fa      	adds	r2, r7, r3
 80044fe:	1939      	adds	r1, r7, r4
 8004500:	480e      	ldr	r0, [pc, #56]	; (800453c <nrf_read_reg+0x68>)
 8004502:	23fa      	movs	r3, #250	; 0xfa
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	2301      	movs	r3, #1
 800450a:	f7fe fe09 	bl	8003120 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&hspi1, &data, 1, 2000);
 800450e:	23fa      	movs	r3, #250	; 0xfa
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	240d      	movs	r4, #13
 8004514:	1939      	adds	r1, r7, r4
 8004516:	4809      	ldr	r0, [pc, #36]	; (800453c <nrf_read_reg+0x68>)
 8004518:	2201      	movs	r2, #1
 800451a:	f7fe fcaf 	bl	8002e7c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	0059      	lsls	r1, r3, #1
 8004522:	23a0      	movs	r3, #160	; 0xa0
 8004524:	05db      	lsls	r3, r3, #23
 8004526:	2201      	movs	r2, #1
 8004528:	0018      	movs	r0, r3
 800452a:	f7fd fbe7 	bl	8001cfc <HAL_GPIO_WritePin>
	return data;
 800452e:	193b      	adds	r3, r7, r4
 8004530:	781b      	ldrb	r3, [r3, #0]

}
 8004532:	0018      	movs	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	b005      	add	sp, #20
 8004538:	bd90      	pop	{r4, r7, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	2000008c 	.word	0x2000008c

08004540 <nrf_read_reg_multi>:

void nrf_read_reg_multi (uint8_t reg, uint8_t *data, int size){
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af02      	add	r7, sp, #8
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	210f      	movs	r1, #15
 800454c:	187b      	adds	r3, r7, r1
 800454e:	1c02      	adds	r2, r0, #0
 8004550:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Receive(&hspi1, data, size, 1000);

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
    */

	uint8_t command = NRF24_CMD_R_REGISTER | reg;
 8004552:	2413      	movs	r4, #19
 8004554:	193b      	adds	r3, r7, r4
 8004556:	187a      	adds	r2, r7, r1
 8004558:	7812      	ldrb	r2, [r2, #0]
 800455a:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	0059      	lsls	r1, r3, #1
 8004560:	23a0      	movs	r3, #160	; 0xa0
 8004562:	05db      	lsls	r3, r3, #23
 8004564:	2201      	movs	r2, #1
 8004566:	0018      	movs	r0, r3
 8004568:	f7fd fbc8 	bl	8001cfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	0059      	lsls	r1, r3, #1
 8004570:	23a0      	movs	r3, #160	; 0xa0
 8004572:	05db      	lsls	r3, r3, #23
 8004574:	2200      	movs	r2, #0
 8004576:	0018      	movs	r0, r3
 8004578:	f7fd fbc0 	bl	8001cfc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 800457c:	2312      	movs	r3, #18
 800457e:	18fa      	adds	r2, r7, r3
 8004580:	1939      	adds	r1, r7, r4
 8004582:	4813      	ldr	r0, [pc, #76]	; (80045d0 <nrf_read_reg_multi+0x90>)
 8004584:	23fa      	movs	r3, #250	; 0xfa
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	2301      	movs	r3, #1
 800458c:	f7fe fdc8 	bl	8003120 <HAL_SPI_TransmitReceive>
	for(int i = 0; i<size; i++)
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	e00b      	b.n	80045ae <nrf_read_reg_multi+0x6e>
		HAL_SPI_Receive(&hspi1, &data[i], 1, 2000);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	18d1      	adds	r1, r2, r3
 800459c:	23fa      	movs	r3, #250	; 0xfa
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	480b      	ldr	r0, [pc, #44]	; (80045d0 <nrf_read_reg_multi+0x90>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	f7fe fc6a 	bl	8002e7c <HAL_SPI_Receive>
	for(int i = 0; i<size; i++)
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3301      	adds	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	dbef      	blt.n	8004596 <nrf_read_reg_multi+0x56>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 80045b6:	2380      	movs	r3, #128	; 0x80
 80045b8:	0059      	lsls	r1, r3, #1
 80045ba:	23a0      	movs	r3, #160	; 0xa0
 80045bc:	05db      	lsls	r3, r3, #23
 80045be:	2201      	movs	r2, #1
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7fd fb9b 	bl	8001cfc <HAL_GPIO_WritePin>
}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b007      	add	sp, #28
 80045cc:	bd90      	pop	{r4, r7, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	2000008c 	.word	0x2000008c

080045d4 <nrf_write_reg>:

void nrf_write_reg(uint8_t reg, uint8_t value)
{
 80045d4:	b5b0      	push	{r4, r5, r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af02      	add	r7, sp, #8
 80045da:	0002      	movs	r2, r0
 80045dc:	1dfb      	adds	r3, r7, #7
 80045de:	701a      	strb	r2, [r3, #0]
 80045e0:	1dbb      	adds	r3, r7, #6
 80045e2:	1c0a      	adds	r2, r1, #0
 80045e4:	701a      	strb	r2, [r3, #0]
//
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);

	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 80045e6:	1dfb      	adds	r3, r7, #7
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2220      	movs	r2, #32
 80045ec:	4313      	orrs	r3, r2
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	240f      	movs	r4, #15
 80045f2:	193b      	adds	r3, r7, r4
 80045f4:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t write_val = value;
 80045f6:	250d      	movs	r5, #13
 80045f8:	197b      	adds	r3, r7, r5
 80045fa:	1dba      	adds	r2, r7, #6
 80045fc:	7812      	ldrb	r2, [r2, #0]
 80045fe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	0059      	lsls	r1, r3, #1
 8004604:	23a0      	movs	r3, #160	; 0xa0
 8004606:	05db      	lsls	r3, r3, #23
 8004608:	2200      	movs	r2, #0
 800460a:	0018      	movs	r0, r3
 800460c:	f7fd fb76 	bl	8001cfc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8004610:	230e      	movs	r3, #14
 8004612:	18fa      	adds	r2, r7, r3
 8004614:	1939      	adds	r1, r7, r4
 8004616:	480d      	ldr	r0, [pc, #52]	; (800464c <nrf_write_reg+0x78>)
 8004618:	23fa      	movs	r3, #250	; 0xfa
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	2301      	movs	r3, #1
 8004620:	f7fe fd7e 	bl	8003120 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &write_val, 1, 2000);
 8004624:	23fa      	movs	r3, #250	; 0xfa
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	1979      	adds	r1, r7, r5
 800462a:	4808      	ldr	r0, [pc, #32]	; (800464c <nrf_write_reg+0x78>)
 800462c:	2201      	movs	r2, #1
 800462e:	f7fe fac5 	bl	8002bbc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	0059      	lsls	r1, r3, #1
 8004636:	23a0      	movs	r3, #160	; 0xa0
 8004638:	05db      	lsls	r3, r3, #23
 800463a:	2201      	movs	r2, #1
 800463c:	0018      	movs	r0, r3
 800463e:	f7fd fb5d 	bl	8001cfc <HAL_GPIO_WritePin>

}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	46bd      	mov	sp, r7
 8004646:	b004      	add	sp, #16
 8004648:	bdb0      	pop	{r4, r5, r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	2000008c 	.word	0x2000008c

08004650 <nrf_write_reg_multi>:

void nrf_write_reg_multi(uint8_t reg, uint8_t *data, int size)
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b089      	sub	sp, #36	; 0x24
 8004654:	af02      	add	r7, sp, #8
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	210f      	movs	r1, #15
 800465c:	187b      	adds	r3, r7, r1
 800465e:	1c02      	adds	r2, r0, #0
 8004660:	701a      	strb	r2, [r3, #0]
	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 8004662:	187b      	adds	r3, r7, r1
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2220      	movs	r2, #32
 8004668:	4313      	orrs	r3, r2
 800466a:	b2da      	uxtb	r2, r3
 800466c:	2413      	movs	r4, #19
 800466e:	193b      	adds	r3, r7, r4
 8004670:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	//uint8_t write_val = value;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004672:	2380      	movs	r3, #128	; 0x80
 8004674:	0059      	lsls	r1, r3, #1
 8004676:	23a0      	movs	r3, #160	; 0xa0
 8004678:	05db      	lsls	r3, r3, #23
 800467a:	2200      	movs	r2, #0
 800467c:	0018      	movs	r0, r3
 800467e:	f7fd fb3d 	bl	8001cfc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8004682:	2312      	movs	r3, #18
 8004684:	18fa      	adds	r2, r7, r3
 8004686:	1939      	adds	r1, r7, r4
 8004688:	4812      	ldr	r0, [pc, #72]	; (80046d4 <nrf_write_reg_multi+0x84>)
 800468a:	23fa      	movs	r3, #250	; 0xfa
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	2301      	movs	r3, #1
 8004692:	f7fe fd45 	bl	8003120 <HAL_SPI_TransmitReceive>
	for (int i = 0; i <size; i++)
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e00b      	b.n	80046b4 <nrf_write_reg_multi+0x64>
		HAL_SPI_Transmit(&hspi1, &data[i], 1, 2000);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	18d1      	adds	r1, r2, r3
 80046a2:	23fa      	movs	r3, #250	; 0xfa
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	480b      	ldr	r0, [pc, #44]	; (80046d4 <nrf_write_reg_multi+0x84>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	f7fe fa87 	bl	8002bbc <HAL_SPI_Transmit>
	for (int i = 0; i <size; i++)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	3301      	adds	r3, #1
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	dbef      	blt.n	800469c <nrf_write_reg_multi+0x4c>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	0059      	lsls	r1, r3, #1
 80046c0:	23a0      	movs	r3, #160	; 0xa0
 80046c2:	05db      	lsls	r3, r3, #23
 80046c4:	2201      	movs	r2, #1
 80046c6:	0018      	movs	r0, r3
 80046c8:	f7fd fb18 	bl	8001cfc <HAL_GPIO_WritePin>

}
 80046cc:	46c0      	nop			; (mov r8, r8)
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b007      	add	sp, #28
 80046d2:	bd90      	pop	{r4, r7, pc}
 80046d4:	2000008c 	.word	0x2000008c

080046d8 <nrf_send_cmd>:

void nrf_send_cmd (uint8_t cmd){
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	0002      	movs	r2, r0
 80046e0:	1dfb      	adds	r3, r7, #7
 80046e2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	0059      	lsls	r1, r3, #1
 80046e8:	23a0      	movs	r3, #160	; 0xa0
 80046ea:	05db      	lsls	r3, r3, #23
 80046ec:	2200      	movs	r2, #0
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7fd fb04 	bl	8001cfc <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80046f4:	1df9      	adds	r1, r7, #7
 80046f6:	4808      	ldr	r0, [pc, #32]	; (8004718 <nrf_send_cmd+0x40>)
 80046f8:	2364      	movs	r3, #100	; 0x64
 80046fa:	2201      	movs	r2, #1
 80046fc:	f7fe fa5e 	bl	8002bbc <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	0059      	lsls	r1, r3, #1
 8004704:	23a0      	movs	r3, #160	; 0xa0
 8004706:	05db      	lsls	r3, r3, #23
 8004708:	2201      	movs	r2, #1
 800470a:	0018      	movs	r0, r3
 800470c:	f7fd faf6 	bl	8001cfc <HAL_GPIO_WritePin>
}
 8004710:	46c0      	nop			; (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b002      	add	sp, #8
 8004716:	bd80      	pop	{r7, pc}
 8004718:	2000008c 	.word	0x2000008c

0800471c <nrf_init>:

void nrf_init(void){
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	0119      	lsls	r1, r3, #4
 8004724:	23a0      	movs	r3, #160	; 0xa0
 8004726:	05db      	lsls	r3, r3, #23
 8004728:	2200      	movs	r2, #0
 800472a:	0018      	movs	r0, r3
 800472c:	f7fd fae6 	bl	8001cfc <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_CONFIG, 0);
 8004730:	2100      	movs	r1, #0
 8004732:	2000      	movs	r0, #0
 8004734:	f7ff ff4e 	bl	80045d4 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_AA, 0); //Turn off auto ack
 8004738:	2100      	movs	r1, #0
 800473a:	2001      	movs	r0, #1
 800473c:	f7ff ff4a 	bl	80045d4 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_RXADDR, 0); //Not enabling any data pipe
 8004740:	2100      	movs	r1, #0
 8004742:	2002      	movs	r0, #2
 8004744:	f7ff ff46 	bl	80045d4 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_AW, 0x03); //5 bytes for TX/RX address
 8004748:	2103      	movs	r1, #3
 800474a:	2003      	movs	r0, #3
 800474c:	f7ff ff42 	bl	80045d4 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_RETR, 0); //No retransmission
 8004750:	2100      	movs	r1, #0
 8004752:	2004      	movs	r0, #4
 8004754:	f7ff ff3e 	bl	80045d4 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_CH, 0); //
 8004758:	2100      	movs	r1, #0
 800475a:	2005      	movs	r0, #5
 800475c:	f7ff ff3a 	bl	80045d4 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_SETUP, 0x0E); //Power = 0dB, data rate = 2Mbps
 8004760:	210e      	movs	r1, #14
 8004762:	2006      	movs	r0, #6
 8004764:	f7ff ff36 	bl	80045d4 <nrf_write_reg>

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8004768:	2380      	movs	r3, #128	; 0x80
 800476a:	0119      	lsls	r1, r3, #4
 800476c:	23a0      	movs	r3, #160	; 0xa0
 800476e:	05db      	lsls	r3, r3, #23
 8004770:	2200      	movs	r2, #0
 8004772:	0018      	movs	r0, r3
 8004774:	f7fd fac2 	bl	8001cfc <HAL_GPIO_WritePin>

}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <nrf_tx_mode>:

void nrf_tx_mode(uint8_t *addr, uint8_t channel){
 800477e:	b5b0      	push	{r4, r5, r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	000a      	movs	r2, r1
 8004788:	1cfb      	adds	r3, r7, #3
 800478a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800478c:	2380      	movs	r3, #128	; 0x80
 800478e:	0119      	lsls	r1, r3, #4
 8004790:	23a0      	movs	r3, #160	; 0xa0
 8004792:	05db      	lsls	r3, r3, #23
 8004794:	2200      	movs	r2, #0
 8004796:	0018      	movs	r0, r3
 8004798:	f7fd fab0 	bl	8001cfc <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_RF_CH, channel);
 800479c:	1cfb      	adds	r3, r7, #3
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	0019      	movs	r1, r3
 80047a2:	2005      	movs	r0, #5
 80047a4:	f7ff ff16 	bl	80045d4 <nrf_write_reg>
    nrf_write_reg_multi(NRF24_REG_TX_ADDR, addr, 5);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2205      	movs	r2, #5
 80047ac:	0019      	movs	r1, r3
 80047ae:	2010      	movs	r0, #16
 80047b0:	f7ff ff4e 	bl	8004650 <nrf_write_reg_multi>

    uint8_t config = nrf_read_reg(NRF24_REG_CONFIG);
 80047b4:	250f      	movs	r5, #15
 80047b6:	197c      	adds	r4, r7, r5
 80047b8:	2000      	movs	r0, #0
 80047ba:	f7ff fe8b 	bl	80044d4 <nrf_read_reg>
 80047be:	0003      	movs	r3, r0
 80047c0:	7023      	strb	r3, [r4, #0]
    config = config | (1<<1);
 80047c2:	0028      	movs	r0, r5
 80047c4:	183b      	adds	r3, r7, r0
 80047c6:	183a      	adds	r2, r7, r0
 80047c8:	7812      	ldrb	r2, [r2, #0]
 80047ca:	2102      	movs	r1, #2
 80047cc:	430a      	orrs	r2, r1
 80047ce:	701a      	strb	r2, [r3, #0]
    nrf_write_reg(NRF24_REG_CONFIG, config);
 80047d0:	183b      	adds	r3, r7, r0
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	0019      	movs	r1, r3
 80047d6:	2000      	movs	r0, #0
 80047d8:	f7ff fefc 	bl	80045d4 <nrf_write_reg>

    //testing that I added
    uint8_t test = 0;
 80047dc:	210e      	movs	r1, #14
 80047de:	187b      	adds	r3, r7, r1
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
    test = nrf_read_reg(NRF24_REG_RF_SETUP);
 80047e4:	187c      	adds	r4, r7, r1
 80047e6:	2006      	movs	r0, #6
 80047e8:	f7ff fe74 	bl	80044d4 <nrf_read_reg>
 80047ec:	0003      	movs	r3, r0
 80047ee:	7023      	strb	r3, [r4, #0]
    uint8_t test2[5] = {0};
 80047f0:	2108      	movs	r1, #8
 80047f2:	187b      	adds	r3, r7, r1
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	2200      	movs	r2, #0
 80047fa:	711a      	strb	r2, [r3, #4]
    nrf_read_reg_multi(NRF24_REG_TX_ADDR, test2, 5);
 80047fc:	187b      	adds	r3, r7, r1
 80047fe:	2205      	movs	r2, #5
 8004800:	0019      	movs	r1, r3
 8004802:	2010      	movs	r0, #16
 8004804:	f7ff fe9c 	bl	8004540 <nrf_read_reg_multi>

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	0119      	lsls	r1, r3, #4
 800480c:	23a0      	movs	r3, #160	; 0xa0
 800480e:	05db      	lsls	r3, r3, #23
 8004810:	2201      	movs	r2, #1
 8004812:	0018      	movs	r0, r3
 8004814:	f7fd fa72 	bl	8001cfc <HAL_GPIO_WritePin>
}
 8004818:	46c0      	nop			; (mov r8, r8)
 800481a:	46bd      	mov	sp, r7
 800481c:	b004      	add	sp, #16
 800481e:	bdb0      	pop	{r4, r5, r7, pc}

08004820 <nrf_transmit>:

uint8_t nrf_transmit(uint8_t *data){
 8004820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 8004828:	250e      	movs	r5, #14
 800482a:	197b      	adds	r3, r7, r5
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8004830:	2380      	movs	r3, #128	; 0x80
 8004832:	0059      	lsls	r1, r3, #1
 8004834:	23a0      	movs	r3, #160	; 0xa0
 8004836:	05db      	lsls	r3, r3, #23
 8004838:	2200      	movs	r2, #0
 800483a:	0018      	movs	r0, r3
 800483c:	f7fd fa5e 	bl	8001cfc <HAL_GPIO_WritePin>

    //TX command
    cmd = NRF24_CMD_W_TX_PAYLOAD;
 8004840:	197b      	adds	r3, r7, r5
 8004842:	22a0      	movs	r2, #160	; 0xa0
 8004844:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8004846:	1979      	adds	r1, r7, r5
 8004848:	481b      	ldr	r0, [pc, #108]	; (80048b8 <nrf_transmit+0x98>)
 800484a:	2364      	movs	r3, #100	; 0x64
 800484c:	2201      	movs	r2, #1
 800484e:	f7fe f9b5 	bl	8002bbc <HAL_SPI_Transmit>

    //TX data send
    HAL_SPI_Transmit(&hspi1, data, 32, 1000);
 8004852:	23fa      	movs	r3, #250	; 0xfa
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4817      	ldr	r0, [pc, #92]	; (80048b8 <nrf_transmit+0x98>)
 800485a:	2220      	movs	r2, #32
 800485c:	f7fe f9ae 	bl	8002bbc <HAL_SPI_Transmit>


    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	0059      	lsls	r1, r3, #1
 8004864:	23a0      	movs	r3, #160	; 0xa0
 8004866:	05db      	lsls	r3, r3, #23
 8004868:	2201      	movs	r2, #1
 800486a:	0018      	movs	r0, r3
 800486c:	f7fd fa46 	bl	8001cfc <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8004870:	2001      	movs	r0, #1
 8004872:	f7fc fb89 	bl	8000f88 <HAL_Delay>

    uint8_t fifo_status = nrf_read_reg(NRF24_REG_FIFO_STATUS);
 8004876:	260f      	movs	r6, #15
 8004878:	19bc      	adds	r4, r7, r6
 800487a:	2017      	movs	r0, #23
 800487c:	f7ff fe2a 	bl	80044d4 <nrf_read_reg>
 8004880:	0003      	movs	r3, r0
 8004882:	7023      	strb	r3, [r4, #0]

    if((fifo_status & (1<<4)) && (!(fifo_status & (1<<3)))){
 8004884:	0031      	movs	r1, r6
 8004886:	187b      	adds	r3, r7, r1
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2210      	movs	r2, #16
 800488c:	4013      	ands	r3, r2
 800488e:	d00e      	beq.n	80048ae <nrf_transmit+0x8e>
 8004890:	187b      	adds	r3, r7, r1
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2208      	movs	r2, #8
 8004896:	4013      	ands	r3, r2
 8004898:	d109      	bne.n	80048ae <nrf_transmit+0x8e>
    	cmd = NRF24_CMD_FLUSH_TX;
 800489a:	197b      	adds	r3, r7, r5
 800489c:	22e1      	movs	r2, #225	; 0xe1
 800489e:	701a      	strb	r2, [r3, #0]
    	nrf_send_cmd(cmd);
 80048a0:	197b      	adds	r3, r7, r5
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	0018      	movs	r0, r3
 80048a6:	f7ff ff17 	bl	80046d8 <nrf_send_cmd>

    	return 1;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <nrf_transmit+0x90>
    }

    return 0;
 80048ae:	2300      	movs	r3, #0


}
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b005      	add	sp, #20
 80048b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b8:	2000008c 	.word	0x2000008c

080048bc <memset>:
 80048bc:	0003      	movs	r3, r0
 80048be:	1882      	adds	r2, r0, r2
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d100      	bne.n	80048c6 <memset+0xa>
 80048c4:	4770      	bx	lr
 80048c6:	7019      	strb	r1, [r3, #0]
 80048c8:	3301      	adds	r3, #1
 80048ca:	e7f9      	b.n	80048c0 <memset+0x4>

080048cc <__libc_init_array>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	2600      	movs	r6, #0
 80048d0:	4c0c      	ldr	r4, [pc, #48]	; (8004904 <__libc_init_array+0x38>)
 80048d2:	4d0d      	ldr	r5, [pc, #52]	; (8004908 <__libc_init_array+0x3c>)
 80048d4:	1b64      	subs	r4, r4, r5
 80048d6:	10a4      	asrs	r4, r4, #2
 80048d8:	42a6      	cmp	r6, r4
 80048da:	d109      	bne.n	80048f0 <__libc_init_array+0x24>
 80048dc:	2600      	movs	r6, #0
 80048de:	f000 f819 	bl	8004914 <_init>
 80048e2:	4c0a      	ldr	r4, [pc, #40]	; (800490c <__libc_init_array+0x40>)
 80048e4:	4d0a      	ldr	r5, [pc, #40]	; (8004910 <__libc_init_array+0x44>)
 80048e6:	1b64      	subs	r4, r4, r5
 80048e8:	10a4      	asrs	r4, r4, #2
 80048ea:	42a6      	cmp	r6, r4
 80048ec:	d105      	bne.n	80048fa <__libc_init_array+0x2e>
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	00b3      	lsls	r3, r6, #2
 80048f2:	58eb      	ldr	r3, [r5, r3]
 80048f4:	4798      	blx	r3
 80048f6:	3601      	adds	r6, #1
 80048f8:	e7ee      	b.n	80048d8 <__libc_init_array+0xc>
 80048fa:	00b3      	lsls	r3, r6, #2
 80048fc:	58eb      	ldr	r3, [r5, r3]
 80048fe:	4798      	blx	r3
 8004900:	3601      	adds	r6, #1
 8004902:	e7f2      	b.n	80048ea <__libc_init_array+0x1e>
 8004904:	080049cc 	.word	0x080049cc
 8004908:	080049cc 	.word	0x080049cc
 800490c:	080049d0 	.word	0x080049d0
 8004910:	080049cc 	.word	0x080049cc

08004914 <_init>:
 8004914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491a:	bc08      	pop	{r3}
 800491c:	469e      	mov	lr, r3
 800491e:	4770      	bx	lr

08004920 <_fini>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004926:	bc08      	pop	{r3}
 8004928:	469e      	mov	lr, r3
 800492a:	4770      	bx	lr
