
Remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f4  080058f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058fc  080058fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000000c  08005910  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08005910  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155a1  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003056  00000000  00000000  00035618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  00038670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ead  00000000  00000000  00039938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000192b1  00000000  00000000  0003a7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180a8  00000000  00000000  00053a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fa2d  00000000  00000000  0006bb3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043d0  00000000  00000000  0010b56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0010f93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005844 	.word	0x08005844

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005844 	.word	0x08005844

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	0018      	movs	r0, r3
 8000626:	230c      	movs	r3, #12
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f005 f8dd 	bl	80057ea <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000630:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000632:	4a2e      	ldr	r2, [pc, #184]	; (80006ec <MX_ADC1_Init+0xd0>)
 8000634:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000636:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	05d2      	lsls	r2, r2, #23
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063e:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064a:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000652:	2204      	movs	r2, #4
 8000654:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000656:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000658:	2200      	movs	r2, #0
 800065a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800065e:	2200      	movs	r2, #0
 8000660:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000664:	2200      	movs	r2, #0
 8000666:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800066a:	2201      	movs	r2, #1
 800066c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000670:	2220      	movs	r2, #32
 8000672:	2100      	movs	r1, #0
 8000674:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000684:	222c      	movs	r2, #44	; 0x2c
 8000686:	2100      	movs	r1, #0
 8000688:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800068c:	2200      	movs	r2, #0
 800068e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000692:	2200      	movs	r2, #0
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_ADC1_Init+0xcc>)
 8000698:	2200      	movs	r2, #0
 800069a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_ADC1_Init+0xcc>)
 800069e:	223c      	movs	r2, #60	; 0x3c
 80006a0:	2100      	movs	r1, #0
 80006a2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_ADC1_Init+0xcc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_ADC1_Init+0xcc>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 fed5 	bl	800145c <HAL_ADC_Init>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80006b6:	f000 f9f5 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <MX_ADC1_Init+0xd4>)
 80006be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	1d3a      	adds	r2, r7, #4
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_ADC1_Init+0xcc>)
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 f958 	bl	8001988 <HAL_ADC_ConfigChannel>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80006dc:	f000 f9e2 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b004      	add	sp, #16
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000028 	.word	0x20000028
 80006ec:	40012400 	.word	0x40012400
 80006f0:	04000002 	.word	0x04000002

080006f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b08b      	sub	sp, #44	; 0x2c
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	2414      	movs	r4, #20
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	0018      	movs	r0, r3
 8000702:	2314      	movs	r3, #20
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f005 f86f 	bl	80057ea <memset>
  if(adcHandle->Instance==ADC1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a18      	ldr	r2, [pc, #96]	; (8000774 <HAL_ADC_MspInit+0x80>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d129      	bne.n	800076a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <HAL_ADC_MspInit+0x84>)
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	0349      	lsls	r1, r1, #13
 8000720:	430a      	orrs	r2, r1
 8000722:	641a      	str	r2, [r3, #64]	; 0x40
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	035b      	lsls	r3, r3, #13
 800072c:	4013      	ands	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000738:	2101      	movs	r1, #1
 800073a:	430a      	orrs	r2, r1
 800073c:	635a      	str	r2, [r3, #52]	; 0x34
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <HAL_ADC_MspInit+0x84>)
 8000740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000742:	2201      	movs	r2, #1
 8000744:	4013      	ands	r3, r2
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Analog_In_Pin;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2202      	movs	r2, #2
 800074e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2203      	movs	r2, #3
 8000754:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Analog_In_GPIO_Port, &GPIO_InitStruct);
 800075c:	193a      	adds	r2, r7, r4
 800075e:	23a0      	movs	r3, #160	; 0xa0
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f001 fc4b 	bl	8002000 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b00b      	add	sp, #44	; 0x2c
 8000770:	bd90      	pop	{r4, r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40012400 	.word	0x40012400
 8000778:	40021000 	.word	0x40021000

0800077c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	240c      	movs	r4, #12
 8000784:	193b      	adds	r3, r7, r4
 8000786:	0018      	movs	r0, r3
 8000788:	2314      	movs	r3, #20
 800078a:	001a      	movs	r2, r3
 800078c:	2100      	movs	r1, #0
 800078e:	f005 f82c 	bl	80057ea <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b45      	ldr	r3, [pc, #276]	; (80008a8 <MX_GPIO_Init+0x12c>)
 8000794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000796:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <MX_GPIO_Init+0x12c>)
 8000798:	2102      	movs	r1, #2
 800079a:	430a      	orrs	r2, r1
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
 800079e:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a2:	2202      	movs	r2, #2
 80007a4:	4013      	ands	r3, r2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b3f      	ldr	r3, [pc, #252]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007b0:	2104      	movs	r1, #4
 80007b2:	430a      	orrs	r2, r1
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ba:	2204      	movs	r2, #4
 80007bc:	4013      	ands	r3, r2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c6:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|CS_Pin, GPIO_PIN_RESET);
 80007da:	23c0      	movs	r3, #192	; 0xc0
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4833      	ldr	r0, [pc, #204]	; (80008ac <MX_GPIO_Init+0x130>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	0019      	movs	r1, r3
 80007e4:	f001 fd8d 	bl	8002302 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	4830      	ldr	r0, [pc, #192]	; (80008b0 <MX_GPIO_Init+0x134>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	0019      	movs	r1, r3
 80007f2:	f001 fd86 	bl	8002302 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|LED_Pin|SPI1_CSN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80007f6:	492f      	ldr	r1, [pc, #188]	; (80008b4 <MX_GPIO_Init+0x138>)
 80007f8:	23a0      	movs	r3, #160	; 0xa0
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	2200      	movs	r2, #0
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 fd7f 	bl	8002302 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|CS_Pin;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	22c0      	movs	r2, #192	; 0xc0
 8000808:	0092      	lsls	r2, r2, #2
 800080a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2201      	movs	r2, #1
 8000810:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	193b      	adds	r3, r7, r4
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <MX_GPIO_Init+0x130>)
 8000822:	0019      	movs	r1, r3
 8000824:	0010      	movs	r0, r2
 8000826:	f001 fbeb 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DC_Pin;
 800082a:	0021      	movs	r1, r4
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	0212      	lsls	r2, r2, #8
 8000832:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	000c      	movs	r4, r1
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2201      	movs	r2, #1
 800083a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000848:	193b      	adds	r3, r7, r4
 800084a:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <MX_GPIO_Init+0x134>)
 800084c:	0019      	movs	r1, r3
 800084e:	0010      	movs	r0, r2
 8000850:	f001 fbd6 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RST_Pin|LED_Pin|SPI1_CSN_Pin|NRF_CE_Pin;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <MX_GPIO_Init+0x138>)
 8000858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	193a      	adds	r2, r7, r4
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f001 fbc3 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_In_Pin;
 800087a:	0021      	movs	r1, r4
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	0152      	lsls	r2, r2, #5
 8000882:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_In_GPIO_Port, &GPIO_InitStruct);
 8000890:	187a      	adds	r2, r7, r1
 8000892:	23a0      	movs	r3, #160	; 0xa0
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f001 fbb1 	bl	8002000 <HAL_GPIO_Init>

}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b009      	add	sp, #36	; 0x24
 80008a4:	bd90      	pop	{r4, r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000
 80008ac:	50000400 	.word	0x50000400
 80008b0:	50000800 	.word	0x50000800
 80008b4:	00000988 	.word	0x00000988

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b091      	sub	sp, #68	; 0x44
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fbed 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f87d 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f7ff ff59 	bl	800077c <MX_GPIO_Init>
  MX_ADC1_Init();
 80008ca:	f7ff fea7 	bl	800061c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80008ce:	f000 fb0b 	bl	8000ee8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80008d2:	f000 f8ed 	bl	8000ab0 <MX_SPI1_Init>
  MX_TIM16_Init();
 80008d6:	f000 faa3 	bl	8000e20 <MX_TIM16_Init>
  MX_TIM2_Init();
 80008da:	f000 fa4d 	bl	8000d78 <MX_TIM2_Init>
  MX_SPI2_Init();
 80008de:	f000 f925 	bl	8000b2c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */



  uint8_t TX_addr[] = {0xEE, 0xDD, 0xCC, 0xBB, 0xAA};
 80008e2:	242c      	movs	r4, #44	; 0x2c
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	4a30      	ldr	r2, [pc, #192]	; (80009a8 <main+0xf0>)
 80008e8:	6811      	ldr	r1, [r2, #0]
 80008ea:	6019      	str	r1, [r3, #0]
 80008ec:	7912      	ldrb	r2, [r2, #4]
 80008ee:	711a      	strb	r2, [r3, #4]
  uint8_t RX_addr[] = {0x99, 0x88, 0x77, 0x66, 0x55};
 80008f0:	2324      	movs	r3, #36	; 0x24
 80008f2:	18fb      	adds	r3, r7, r3
 80008f4:	4a2d      	ldr	r2, [pc, #180]	; (80009ac <main+0xf4>)
 80008f6:	6811      	ldr	r1, [r2, #0]
 80008f8:	6019      	str	r1, [r3, #0]
 80008fa:	7912      	ldrb	r2, [r2, #4]
 80008fc:	711a      	strb	r2, [r3, #4]

  uint32_t counter = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	2201      	movs	r2, #1
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0018      	movs	r0, r3
 800090c:	f001 fcf9 	bl	8002302 <HAL_GPIO_WritePin>


  nrf_init();
 8000910:	f004 fe6c 	bl	80055ec <nrf_init>

  nrf_tx_mode(TX_addr, 10);
 8000914:	193b      	adds	r3, r7, r4
 8000916:	210a      	movs	r1, #10
 8000918:	0018      	movs	r0, r3
 800091a:	f004 fe98 	bl	800564e <nrf_tx_mode>
//	Paint_DrawRectangle(115, 115, 136, 141, DARKRED, 2, 0);
//	Paint_DrawNum(120, 120, counter, &Font16, DARKBLUE, DARKGREEN);


  //Setup the interrupt last
  HAL_TIM_Base_Start_IT(&htim2);
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <main+0xf8>)
 8000920:	0018      	movs	r0, r3
 8000922:	f003 fb29 	bl	8003f78 <HAL_TIM_Base_Start_IT>


  uint8_t RX_data[32] = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	3304      	adds	r3, #4
 800092e:	221c      	movs	r2, #28
 8000930:	2100      	movs	r1, #0
 8000932:	0018      	movs	r0, r3
 8000934:	f004 ff59 	bl	80057ea <memset>
//	HAL_Delay(250);



	/*Code for sending the ADC value over NRF*/
	if (adc_trans_task == 1){
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <main+0xfc>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d124      	bne.n	800098a <main+0xd2>
		//Read the ADC
		uint32_t adc_val = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_ADC_Start(&hadc1);
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <main+0x100>)
 8000946:	0018      	movs	r0, r3
 8000948:	f000 ff30 	bl	80017ac <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800094c:	2301      	movs	r3, #1
 800094e:	425a      	negs	r2, r3
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <main+0x100>)
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f000 ff77 	bl	8001848 <HAL_ADC_PollForConversion>
		adc_val = HAL_ADC_GetValue(&hadc1);
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <main+0x100>)
 800095c:	0018      	movs	r0, r3
 800095e:	f001 f807 	bl	8001970 <HAL_ADC_GetValue>
 8000962:	0003      	movs	r3, r0
 8000964:	63bb      	str	r3, [r7, #56]	; 0x38

		//NRF Transmission Code
		int trans_stat = nrf_send_adc(adc_val);
 8000966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000968:	0018      	movs	r0, r3
 800096a:	f004 ff05 	bl	8005778 <nrf_send_adc>
 800096e:	0003      	movs	r3, r0
 8000970:	637b      	str	r3, [r7, #52]	; 0x34

		if(trans_stat == 1){
 8000972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000974:	2b01      	cmp	r3, #1
 8000976:	d105      	bne.n	8000984 <main+0xcc>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000978:	23a0      	movs	r3, #160	; 0xa0
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	0018      	movs	r0, r3
 8000980:	f001 fcdc 	bl	800233c <HAL_GPIO_TogglePin>

		}
	adc_trans_task = 0;
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <main+0xfc>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(Button_In_GPIO_Port, Button_In_Pin) == 0){
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	015a      	lsls	r2, r3, #5
 800098e:	23a0      	movs	r3, #160	; 0xa0
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	0011      	movs	r1, r2
 8000994:	0018      	movs	r0, r3
 8000996:	f001 fc97 	bl	80022c8 <HAL_GPIO_ReadPin>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d1cc      	bne.n	8000938 <main+0x80>
		while(1){
			nrf_send_adc(3300);
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <main+0x104>)
 80009a0:	0018      	movs	r0, r3
 80009a2:	f004 fee9 	bl	8005778 <nrf_send_adc>
 80009a6:	e7fa      	b.n	800099e <main+0xe6>
 80009a8:	0800585c 	.word	0x0800585c
 80009ac:	08005864 	.word	0x08005864
 80009b0:	20000158 	.word	0x20000158
 80009b4:	2000008c 	.word	0x2000008c
 80009b8:	20000028 	.word	0x20000028
 80009bc:	00000ce4 	.word	0x00000ce4

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b093      	sub	sp, #76	; 0x4c
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	2410      	movs	r4, #16
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	0018      	movs	r0, r3
 80009cc:	2338      	movs	r3, #56	; 0x38
 80009ce:	001a      	movs	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f004 ff0a 	bl	80057ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d6:	003b      	movs	r3, r7
 80009d8:	0018      	movs	r0, r3
 80009da:	2310      	movs	r3, #16
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f004 ff03 	bl	80057ea <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fcc3 	bl	8002374 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2202      	movs	r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	0052      	lsls	r2, r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009fc:	0021      	movs	r1, r4
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2240      	movs	r2, #64	; 0x40
 8000a08:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2202      	movs	r2, #2
 8000a14:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2208      	movs	r2, #8
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	0292      	lsls	r2, r2, #10
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	0492      	lsls	r2, r2, #18
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	0592      	lsls	r2, r2, #22
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f001 fce5 	bl	800240c <HAL_RCC_OscConfig>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a46:	f000 f82d 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4a:	003b      	movs	r3, r7
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a50:	003b      	movs	r3, r7
 8000a52:	2202      	movs	r2, #2
 8000a54:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	003b      	movs	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a5c:	003b      	movs	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a62:	003b      	movs	r3, r7
 8000a64:	2102      	movs	r1, #2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f001 ffea 	bl	8002a40 <HAL_RCC_ClockConfig>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a70:	f000 f818 	bl	8000aa4 <Error_Handler>
  }
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b013      	add	sp, #76	; 0x4c
 8000a7a:	bd90      	pop	{r4, r7, pc}

08000a7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  if (htim == &htim2 ){
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d102      	bne.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x16>
	//Code to run for TIM2 IRQ
	adc_trans_task = 1;
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]

  }
}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	20000158 	.word	0x20000158
 8000aa0:	2000008c 	.word	0x2000008c

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <MX_SPI1_Init+0x78>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000abc:	2282      	movs	r2, #130	; 0x82
 8000abe:	0052      	lsls	r2, r2, #1
 8000ac0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000aca:	22e0      	movs	r2, #224	; 0xe0
 8000acc:	00d2      	lsls	r2, r2, #3
 8000ace:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	0092      	lsls	r2, r2, #2
 8000ae2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000afe:	2207      	movs	r2, #7
 8000b00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <MX_SPI1_Init+0x74>)
 8000b10:	0018      	movs	r0, r3
 8000b12:	f002 fab9 	bl	8003088 <HAL_SPI_Init>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f7ff ffc3 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000090 	.word	0x20000090
 8000b28:	40013000 	.word	0x40013000

08000b2c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <MX_SPI2_Init+0x78>)
 8000b34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b38:	2282      	movs	r2, #130	; 0x82
 8000b3a:	0052      	lsls	r2, r2, #1
 8000b3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b46:	22e0      	movs	r2, #224	; 0xe0
 8000b48:	00d2      	lsls	r2, r2, #3
 8000b4a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b62:	2220      	movs	r2, #32
 8000b64:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b86:	2208      	movs	r2, #8
 8000b88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f002 fa7b 	bl	8003088 <HAL_SPI_Init>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d001      	beq.n	8000b9a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b96:	f7ff ff85 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200000f4 	.word	0x200000f4
 8000ba4:	40003800 	.word	0x40003800

08000ba8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b08d      	sub	sp, #52	; 0x34
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	241c      	movs	r4, #28
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	2314      	movs	r3, #20
 8000bb8:	001a      	movs	r2, r3
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f004 fe15 	bl	80057ea <memset>
  if(spiHandle->Instance==SPI1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a42      	ldr	r2, [pc, #264]	; (8000cd0 <HAL_SPI_MspInit+0x128>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d131      	bne.n	8000c2e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bca:	4b42      	ldr	r3, [pc, #264]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	0149      	lsls	r1, r1, #5
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	641a      	str	r2, [r3, #64]	; 0x40
 8000bd8:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	015b      	lsls	r3, r3, #5
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b3b      	ldr	r3, [pc, #236]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bea:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000bec:	2101      	movs	r1, #1
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf2:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000bfe:	0021      	movs	r1, r4
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2264      	movs	r2, #100	; 0x64
 8000c04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2202      	movs	r2, #2
 8000c0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	187a      	adds	r2, r7, r1
 8000c20:	23a0      	movs	r3, #160	; 0xa0
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	0011      	movs	r1, r2
 8000c26:	0018      	movs	r0, r3
 8000c28:	f001 f9ea 	bl	8002000 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c2c:	e04c      	b.n	8000cc8 <HAL_SPI_MspInit+0x120>
  else if(spiHandle->Instance==SPI2)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a29      	ldr	r2, [pc, #164]	; (8000cd8 <HAL_SPI_MspInit+0x130>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d147      	bne.n	8000cc8 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c3c:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000c3e:	2180      	movs	r1, #128	; 0x80
 8000c40:	01c9      	lsls	r1, r1, #7
 8000c42:	430a      	orrs	r2, r1
 8000c44:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	01db      	lsls	r3, r3, #7
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <HAL_SPI_MspInit+0x12c>)
 8000c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c64:	2201      	movs	r2, #1
 8000c66:	4013      	ands	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6c:	241c      	movs	r4, #28
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	2202      	movs	r2, #2
 8000c78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	193a      	adds	r2, r7, r4
 8000c8e:	23a0      	movs	r3, #160	; 0xa0
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 f9b3 	bl	8002000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c9a:	0021      	movs	r1, r4
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	187a      	adds	r2, r7, r1
 8000cbc:	23a0      	movs	r3, #160	; 0xa0
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f001 f99c 	bl	8002000 <HAL_GPIO_Init>
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b00d      	add	sp, #52	; 0x34
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	40013000 	.word	0x40013000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40003800 	.word	0x40003800

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	430a      	orrs	r2, r1
 8000cec:	641a      	str	r2, [r3, #64]	; 0x40
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_MspInit+0x44>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_MspInit+0x44>)
 8000cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_MspInit+0x44>)
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	0549      	lsls	r1, r1, #21
 8000d04:	430a      	orrs	r2, r1
 8000d06:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_MspInit+0x44>)
 8000d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	055b      	lsls	r3, r3, #21
 8000d10:	4013      	ands	r3, r2
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40021000 	.word	0x40021000

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d28:	e7fe      	b.n	8000d28 <NMI_Handler+0x4>

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d48:	f000 fa12 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <TIM2_IRQHandler+0x14>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f003 f960 	bl	8004020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	20000158 	.word	0x20000158

08000d6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7e:	2310      	movs	r3, #16
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	0018      	movs	r0, r3
 8000d84:	2310      	movs	r3, #16
 8000d86:	001a      	movs	r2, r3
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f004 fd2e 	bl	80057ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	0018      	movs	r0, r3
 8000d92:	230c      	movs	r3, #12
 8000d94:	001a      	movs	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	f004 fd27 	bl	80057ea <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	05d2      	lsls	r2, r2, #23
 8000da2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000da6:	4a1d      	ldr	r2, [pc, #116]	; (8000e1c <MX_TIM2_Init+0xa4>)
 8000da8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000db2:	2263      	movs	r2, #99	; 0x63
 8000db4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f003 f87f 	bl	8003ec8 <HAL_TIM_Base_Init>
 8000dca:	1e03      	subs	r3, r0, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000dce:	f7ff fe69 	bl	8000aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	0152      	lsls	r2, r2, #5
 8000dda:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ddc:	187a      	adds	r2, r7, r1
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000de0:	0011      	movs	r1, r2
 8000de2:	0018      	movs	r0, r3
 8000de4:	f003 fa24 	bl	8004230 <HAL_TIM_ConfigClockSource>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000dec:	f7ff fe5a 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfc:	1d3a      	adds	r2, r7, #4
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000e00:	0011      	movs	r1, r2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f003 fc2a 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e0c:	f7ff fe4a 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b008      	add	sp, #32
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000158 	.word	0x20000158
 8000e1c:	000018ff 	.word	0x000018ff

08000e20 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <MX_TIM16_Init+0x48>)
 8000e26:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <MX_TIM16_Init+0x4c>)
 8000e28:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 300-1;
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_TIM16_Init+0x48>)
 8000e2c:	222c      	movs	r2, #44	; 0x2c
 8000e2e:	32ff      	adds	r2, #255	; 0xff
 8000e30:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <MX_TIM16_Init+0x48>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_TIM16_Init+0x48>)
 8000e3a:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <MX_TIM16_Init+0x50>)
 8000e3c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <MX_TIM16_Init+0x48>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_TIM16_Init+0x48>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <MX_TIM16_Init+0x48>)
 8000e4c:	2280      	movs	r2, #128	; 0x80
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <MX_TIM16_Init+0x48>)
 8000e52:	0018      	movs	r0, r3
 8000e54:	f003 f838 	bl	8003ec8 <HAL_TIM_Base_Init>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000e5c:	f7ff fe22 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	200001a4 	.word	0x200001a4
 8000e6c:	40014400 	.word	0x40014400
 8000e70:	000003e7 	.word	0x000003e7

08000e74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	05db      	lsls	r3, r3, #23
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d114      	bne.n	8000eb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_TIM_Base_MspInit+0x6c>)
 8000e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_TIM_Base_MspInit+0x6c>)
 8000e8e:	2101      	movs	r1, #1
 8000e90:	430a      	orrs	r2, r1
 8000e92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_TIM_Base_MspInit+0x6c>)
 8000e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	200f      	movs	r0, #15
 8000ea6:	f001 f879 	bl	8001f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f001 f88b 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000eb0:	e012      	b.n	8000ed8 <HAL_TIM_Base_MspInit+0x64>
  else if(tim_baseHandle->Instance==TIM16)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_TIM_Base_MspInit+0x70>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d10d      	bne.n	8000ed8 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_TIM_Base_MspInit+0x6c>)
 8000ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <HAL_TIM_Base_MspInit+0x6c>)
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	0289      	lsls	r1, r1, #10
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_TIM_Base_MspInit+0x6c>)
 8000ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	029b      	lsls	r3, r3, #10
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b004      	add	sp, #16
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40014400 	.word	0x40014400

08000ee8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eec:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000eee:	4a24      	ldr	r2, [pc, #144]	; (8000f80 <MX_USART1_UART_Init+0x98>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ef2:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000ef4:	22e1      	movs	r2, #225	; 0xe1
 8000ef6:	0252      	lsls	r2, r2, #9
 8000ef8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f32:	0018      	movs	r0, r3
 8000f34:	f003 fc12 	bl	800475c <HAL_HalfDuplex_Init>
 8000f38:	1e03      	subs	r3, r0, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f3c:	f7ff fdb2 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	0018      	movs	r0, r3
 8000f46:	f004 f94d 	bl	80051e4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f4e:	f7ff fda9 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	0018      	movs	r0, r3
 8000f58:	f004 f984 	bl	8005264 <HAL_UARTEx_SetRxFifoThreshold>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f60:	f7ff fda0 	bl	8000aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f004 f902 	bl	8005170 <HAL_UARTEx_DisableFifoMode>
 8000f6c:	1e03      	subs	r3, r0, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f70:	f7ff fd98 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	200001f0 	.word	0x200001f0
 8000f80:	40013800 	.word	0x40013800

08000f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b095      	sub	sp, #84	; 0x54
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	233c      	movs	r3, #60	; 0x3c
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	0018      	movs	r0, r3
 8000f92:	2314      	movs	r3, #20
 8000f94:	001a      	movs	r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	f004 fc27 	bl	80057ea <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	2414      	movs	r4, #20
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	2328      	movs	r3, #40	; 0x28
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f004 fc1f 	bl	80057ea <memset>
  if(uartHandle->Instance==USART1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a22      	ldr	r2, [pc, #136]	; (800103c <HAL_UART_MspInit+0xb8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d13d      	bne.n	8001032 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f001 fee5 	bl	8002d94 <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	1e03      	subs	r3, r0, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fce:	f7ff fd69 	bl	8000aa4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_UART_MspInit+0xbc>)
 8000fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_UART_MspInit+0xbc>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	01c9      	lsls	r1, r1, #7
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	641a      	str	r2, [r3, #64]	; 0x40
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_UART_MspInit+0xbc>)
 8000fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	01db      	lsls	r3, r3, #7
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_UART_MspInit+0xbc>)
 8000ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_UART_MspInit+0xbc>)
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_UART_MspInit+0xbc>)
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffe:	2202      	movs	r2, #2
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001006:	213c      	movs	r1, #60	; 0x3c
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2240      	movs	r2, #64	; 0x40
 800100c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2212      	movs	r2, #18
 8001012:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2201      	movs	r2, #1
 8001018:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	187b      	adds	r3, r7, r1
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_UART_MspInit+0xc0>)
 800102a:	0019      	movs	r1, r3
 800102c:	0010      	movs	r0, r2
 800102e:	f000 ffe7 	bl	8002000 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b015      	add	sp, #84	; 0x54
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	40013800 	.word	0x40013800
 8001040:	40021000 	.word	0x40021000
 8001044:	50000400 	.word	0x50000400

08001048 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800104a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800104c:	f7ff fe8e 	bl	8000d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <LoopForever+0x6>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <LoopForever+0xe>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	; (8001094 <LoopForever+0x16>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001076:	f004 fbc1 	bl	80057fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800107a:	f7ff fc1d 	bl	80008b8 <main>

0800107e <LoopForever>:

LoopForever:
  b LoopForever
 800107e:	e7fe      	b.n	800107e <LoopForever>
  ldr   r0, =_estack
 8001080:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800108c:	08005904 	.word	0x08005904
  ldr r2, =_sbss
 8001090:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001094:	20000288 	.word	0x20000288

08001098 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC1_IRQHandler>
	...

0800109c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_Init+0x3c>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_Init+0x3c>)
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	0049      	lsls	r1, r1, #1
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b6:	2003      	movs	r0, #3
 80010b8:	f000 f810 	bl	80010dc <HAL_InitTick>
 80010bc:	1e03      	subs	r3, r0, #0
 80010be:	d003      	beq.n	80010c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e001      	b.n	80010cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010c8:	f7ff fe08 	bl	8000cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	781b      	ldrb	r3, [r3, #0]
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40022000 	.word	0x40022000

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010e4:	230f      	movs	r3, #15
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <HAL_InitTick+0x88>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d02b      	beq.n	800114c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <HAL_InitTick+0x8c>)
 80010f6:	681c      	ldr	r4, [r3, #0]
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_InitTick+0x88>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	0019      	movs	r1, r3
 80010fe:	23fa      	movs	r3, #250	; 0xfa
 8001100:	0098      	lsls	r0, r3, #2
 8001102:	f7fe ffff 	bl	8000104 <__udivsi3>
 8001106:	0003      	movs	r3, r0
 8001108:	0019      	movs	r1, r3
 800110a:	0020      	movs	r0, r4
 800110c:	f7fe fffa 	bl	8000104 <__udivsi3>
 8001110:	0003      	movs	r3, r0
 8001112:	0018      	movs	r0, r3
 8001114:	f000 ff67 	bl	8001fe6 <HAL_SYSTICK_Config>
 8001118:	1e03      	subs	r3, r0, #0
 800111a:	d112      	bne.n	8001142 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d80a      	bhi.n	8001138 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	2301      	movs	r3, #1
 8001126:	425b      	negs	r3, r3
 8001128:	2200      	movs	r2, #0
 800112a:	0018      	movs	r0, r3
 800112c:	f000 ff36 	bl	8001f9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_InitTick+0x90>)
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e00d      	b.n	8001154 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001138:	230f      	movs	r3, #15
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	2201      	movs	r2, #1
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e008      	b.n	8001154 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001142:	230f      	movs	r3, #15
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e003      	b.n	8001154 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800114c:	230f      	movs	r3, #15
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001154:	230f      	movs	r3, #15
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	781b      	ldrb	r3, [r3, #0]
}
 800115a:	0018      	movs	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	b005      	add	sp, #20
 8001160:	bd90      	pop	{r4, r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	20000008 	.word	0x20000008
 8001168:	20000000 	.word	0x20000000
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <HAL_IncTick+0x1c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	001a      	movs	r2, r3
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_IncTick+0x20>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	18d2      	adds	r2, r2, r3
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <HAL_IncTick+0x20>)
 8001182:	601a      	str	r2, [r3, #0]
}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	20000008 	.word	0x20000008
 8001190:	20000284 	.word	0x20000284

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <HAL_GetTick+0x10>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	20000284 	.word	0x20000284

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff fff0 	bl	8001194 <HAL_GetTick>
 80011b4:	0003      	movs	r3, r0
 80011b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_Delay+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	001a      	movs	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	189b      	adds	r3, r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	f7ff ffe0 	bl	8001194 <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b004      	add	sp, #16
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	20000008 	.word	0x20000008

080011f0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001200:	401a      	ands	r2, r3
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	fe3fffff 	.word	0xfe3fffff

08001218 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	23e0      	movs	r3, #224	; 0xe0
 8001226:	045b      	lsls	r3, r3, #17
 8001228:	4013      	ands	r3, r2
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}

08001232 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	2104      	movs	r1, #4
 8001246:	400a      	ands	r2, r1
 8001248:	2107      	movs	r1, #7
 800124a:	4091      	lsls	r1, r2
 800124c:	000a      	movs	r2, r1
 800124e:	43d2      	mvns	r2, r2
 8001250:	401a      	ands	r2, r3
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2104      	movs	r1, #4
 8001256:	400b      	ands	r3, r1
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4099      	lsls	r1, r3
 800125c:	000b      	movs	r3, r1
 800125e:	431a      	orrs	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b004      	add	sp, #16
 800126a:	bd80      	pop	{r7, pc}

0800126c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	2104      	movs	r1, #4
 800127e:	400a      	ands	r2, r1
 8001280:	2107      	movs	r1, #7
 8001282:	4091      	lsls	r1, r2
 8001284:	000a      	movs	r2, r1
 8001286:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2104      	movs	r1, #4
 800128c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800128e:	40da      	lsrs	r2, r3
 8001290:	0013      	movs	r3, r2
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}

0800129a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	23c0      	movs	r3, #192	; 0xc0
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	4013      	ands	r3, r2
 80012ac:	d101      	bne.n	80012b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b002      	add	sp, #8
 80012ba:	bd80      	pop	{r7, pc}

080012bc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	211f      	movs	r1, #31
 80012d0:	400a      	ands	r2, r1
 80012d2:	210f      	movs	r1, #15
 80012d4:	4091      	lsls	r1, r2
 80012d6:	000a      	movs	r2, r1
 80012d8:	43d2      	mvns	r2, r2
 80012da:	401a      	ands	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	0e9b      	lsrs	r3, r3, #26
 80012e0:	210f      	movs	r1, #15
 80012e2:	4019      	ands	r1, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	201f      	movs	r0, #31
 80012e8:	4003      	ands	r3, r0
 80012ea:	4099      	lsls	r1, r3
 80012ec:	000b      	movs	r3, r1
 80012ee:	431a      	orrs	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b004      	add	sp, #16
 80012fa:	bd80      	pop	{r7, pc}

080012fc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	035b      	lsls	r3, r3, #13
 800130e:	0b5b      	lsrs	r3, r3, #13
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}

0800131e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	0352      	lsls	r2, r2, #13
 8001330:	0b52      	lsrs	r2, r2, #13
 8001332:	43d2      	mvns	r2, r2
 8001334:	401a      	ands	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	0212      	lsls	r2, r2, #8
 8001358:	43d2      	mvns	r2, r2
 800135a:	401a      	ands	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	400b      	ands	r3, r1
 8001364:	4904      	ldr	r1, [pc, #16]	; (8001378 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001366:	400b      	ands	r3, r1
 8001368:	431a      	orrs	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b004      	add	sp, #16
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	07ffff00 	.word	0x07ffff00

0800137c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800138a:	4013      	ands	r3, r2
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	0552      	lsls	r2, r2, #21
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	6fffffe8 	.word	0x6fffffe8

080013a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	055b      	lsls	r3, r3, #21
 80013b4:	401a      	ands	r2, r3
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	055b      	lsls	r3, r3, #21
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d101      	bne.n	80013c2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <LL_ADC_Enable+0x20>)
 80013da:	4013      	ands	r3, r2
 80013dc:	2201      	movs	r2, #1
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	7fffffe8 	.word	0x7fffffe8

080013f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2201      	movs	r2, #1
 80013fe:	4013      	ands	r3, r2
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <LL_ADC_IsEnabled+0x18>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <LL_ADC_IsEnabled+0x1a>
 8001408:	2300      	movs	r3, #0
}
 800140a:	0018      	movs	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	b002      	add	sp, #8
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <LL_ADC_REG_StartConversion+0x20>)
 8001422:	4013      	ands	r3, r2
 8001424:	2204      	movs	r2, #4
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b002      	add	sp, #8
 8001432:	bd80      	pop	{r7, pc}
 8001434:	7fffffe8 	.word	0x7fffffe8

08001438 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2204      	movs	r2, #4
 8001446:	4013      	ands	r3, r2
 8001448:	2b04      	cmp	r3, #4
 800144a:	d101      	bne.n	8001450 <LL_ADC_REG_IsConversionOngoing+0x18>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001450:	2300      	movs	r3, #0
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001464:	231f      	movs	r3, #31
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e17f      	b.n	8001782 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10a      	bne.n	80014a0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff f931 	bl	80006f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2254      	movs	r2, #84	; 0x54
 800149c:	2100      	movs	r1, #0
 800149e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff ff7d 	bl	80013a4 <LL_ADC_IsInternalRegulatorEnabled>
 80014aa:	1e03      	subs	r3, r0, #0
 80014ac:	d115      	bne.n	80014da <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7ff ff62 	bl	800137c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014b8:	4bb4      	ldr	r3, [pc, #720]	; (800178c <HAL_ADC_Init+0x330>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	49b4      	ldr	r1, [pc, #720]	; (8001790 <HAL_ADC_Init+0x334>)
 80014be:	0018      	movs	r0, r3
 80014c0:	f7fe fe20 	bl	8000104 <__udivsi3>
 80014c4:	0003      	movs	r3, r0
 80014c6:	3301      	adds	r3, #1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014cc:	e002      	b.n	80014d4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f9      	bne.n	80014ce <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	0018      	movs	r0, r3
 80014e0:	f7ff ff60 	bl	80013a4 <LL_ADC_IsInternalRegulatorEnabled>
 80014e4:	1e03      	subs	r3, r0, #0
 80014e6:	d10f      	bne.n	8001508 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	2210      	movs	r2, #16
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	2201      	movs	r2, #1
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001500:	231f      	movs	r3, #31
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0018      	movs	r0, r3
 800150e:	f7ff ff93 	bl	8001438 <LL_ADC_REG_IsConversionOngoing>
 8001512:	0003      	movs	r3, r0
 8001514:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	2210      	movs	r2, #16
 800151c:	4013      	ands	r3, r2
 800151e:	d000      	beq.n	8001522 <HAL_ADC_Init+0xc6>
 8001520:	e122      	b.n	8001768 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d000      	beq.n	800152a <HAL_ADC_Init+0xce>
 8001528:	e11e      	b.n	8001768 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	4a99      	ldr	r2, [pc, #612]	; (8001794 <HAL_ADC_Init+0x338>)
 8001530:	4013      	ands	r3, r2
 8001532:	2202      	movs	r2, #2
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff ff56 	bl	80013f0 <LL_ADC_IsEnabled>
 8001544:	1e03      	subs	r3, r0, #0
 8001546:	d000      	beq.n	800154a <HAL_ADC_Init+0xee>
 8001548:	e0ad      	b.n	80016a6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7e1b      	ldrb	r3, [r3, #24]
 8001552:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001554:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7e5b      	ldrb	r3, [r3, #25]
 800155a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800155c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7e9b      	ldrb	r3, [r3, #26]
 8001562:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001564:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_ADC_Init+0x118>
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	015b      	lsls	r3, r3, #5
 8001572:	e000      	b.n	8001576 <HAL_ADC_Init+0x11a>
 8001574:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001576:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800157c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	da04      	bge.n	8001590 <HAL_ADC_Init+0x134>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	085b      	lsrs	r3, r3, #1
 800158e:	e001      	b.n	8001594 <HAL_ADC_Init+0x138>
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001594:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	212c      	movs	r1, #44	; 0x2c
 800159a:	5c5b      	ldrb	r3, [r3, r1]
 800159c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800159e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2220      	movs	r2, #32
 80015aa:	5c9b      	ldrb	r3, [r3, r2]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d115      	bne.n	80015dc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7e9b      	ldrb	r3, [r3, #26]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d105      	bne.n	80015c4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	0252      	lsls	r2, r2, #9
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	e00b      	b.n	80015dc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c8:	2220      	movs	r2, #32
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	2201      	movs	r2, #1
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00a      	beq.n	80015fa <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e8:	23e0      	movs	r3, #224	; 0xe0
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015f2:	4313      	orrs	r3, r2
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4a65      	ldr	r2, [pc, #404]	; (8001798 <HAL_ADC_Init+0x33c>)
 8001602:	4013      	ands	r3, r2
 8001604:	0019      	movs	r1, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	430a      	orrs	r2, r1
 800160e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	0f9b      	lsrs	r3, r3, #30
 8001616:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800161c:	4313      	orrs	r3, r2
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4313      	orrs	r3, r2
 8001622:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	223c      	movs	r2, #60	; 0x3c
 8001628:	5c9b      	ldrb	r3, [r3, r2]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d111      	bne.n	8001652 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0f9b      	lsrs	r3, r3, #30
 8001634:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800163a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001640:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001646:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	4313      	orrs	r3, r2
 800164c:	2201      	movs	r2, #1
 800164e:	4313      	orrs	r3, r2
 8001650:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	4a50      	ldr	r2, [pc, #320]	; (800179c <HAL_ADC_Init+0x340>)
 800165a:	4013      	ands	r3, r2
 800165c:	0019      	movs	r1, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	430a      	orrs	r2, r1
 8001666:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	23c0      	movs	r3, #192	; 0xc0
 800166e:	061b      	lsls	r3, r3, #24
 8001670:	429a      	cmp	r2, r3
 8001672:	d018      	beq.n	80016a6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	05db      	lsls	r3, r3, #23
 800167c:	429a      	cmp	r2, r3
 800167e:	d012      	beq.n	80016a6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	061b      	lsls	r3, r3, #24
 8001688:	429a      	cmp	r2, r3
 800168a:	d00c      	beq.n	80016a6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800168c:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <HAL_ADC_Init+0x344>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a44      	ldr	r2, [pc, #272]	; (80017a4 <HAL_ADC_Init+0x348>)
 8001692:	4013      	ands	r3, r2
 8001694:	0019      	movs	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	23f0      	movs	r3, #240	; 0xf0
 800169c:	039b      	lsls	r3, r3, #14
 800169e:	401a      	ands	r2, r3
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <HAL_ADC_Init+0x344>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ae:	001a      	movs	r2, r3
 80016b0:	2100      	movs	r1, #0
 80016b2:	f7ff fdbe 	bl	8001232 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016be:	493a      	ldr	r1, [pc, #232]	; (80017a8 <HAL_ADC_Init+0x34c>)
 80016c0:	001a      	movs	r2, r3
 80016c2:	f7ff fdb6 	bl	8001232 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2110      	movs	r1, #16
 80016da:	4249      	negs	r1, r1
 80016dc:	430a      	orrs	r2, r1
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
 80016e0:	e018      	b.n	8001714 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	039b      	lsls	r3, r3, #14
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d112      	bne.n	8001714 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	221c      	movs	r2, #28
 80016fe:	4013      	ands	r3, r2
 8001700:	2210      	movs	r2, #16
 8001702:	4252      	negs	r2, r2
 8001704:	409a      	lsls	r2, r3
 8001706:	0011      	movs	r1, r2
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2100      	movs	r1, #0
 800171a:	0018      	movs	r0, r3
 800171c:	f7ff fda6 	bl	800126c <LL_ADC_GetSamplingTimeCommonChannels>
 8001720:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001726:	429a      	cmp	r2, r3
 8001728:	d10b      	bne.n	8001742 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	2203      	movs	r2, #3
 8001736:	4393      	bics	r3, r2
 8001738:	2201      	movs	r2, #1
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001740:	e01c      	b.n	800177c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	2212      	movs	r2, #18
 8001748:	4393      	bics	r3, r2
 800174a:	2210      	movs	r2, #16
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001756:	2201      	movs	r2, #1
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800175e:	231f      	movs	r3, #31
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001766:	e009      	b.n	800177c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	2210      	movs	r2, #16
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001774:	231f      	movs	r3, #31
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800177c:	231f      	movs	r3, #31
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	781b      	ldrb	r3, [r3, #0]
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b008      	add	sp, #32
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	20000000 	.word	0x20000000
 8001790:	00030d40 	.word	0x00030d40
 8001794:	fffffefd 	.word	0xfffffefd
 8001798:	ffde0201 	.word	0xffde0201
 800179c:	1ffffc02 	.word	0x1ffffc02
 80017a0:	40012708 	.word	0x40012708
 80017a4:	ffc3ffff 	.word	0xffc3ffff
 80017a8:	07ffff04 	.word	0x07ffff04

080017ac <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017ac:	b5b0      	push	{r4, r5, r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff fe3d 	bl	8001438 <LL_ADC_REG_IsConversionOngoing>
 80017be:	1e03      	subs	r3, r0, #0
 80017c0:	d135      	bne.n	800182e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2254      	movs	r2, #84	; 0x54
 80017c6:	5c9b      	ldrb	r3, [r3, r2]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_Start+0x24>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e035      	b.n	800183c <HAL_ADC_Start+0x90>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2254      	movs	r2, #84	; 0x54
 80017d4:	2101      	movs	r1, #1
 80017d6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017d8:	250f      	movs	r5, #15
 80017da:	197c      	adds	r4, r7, r5
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 faaa 	bl	8001d38 <ADC_Enable>
 80017e4:	0003      	movs	r3, r0
 80017e6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017e8:	197b      	adds	r3, r7, r5
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d119      	bne.n	8001824 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	4a13      	ldr	r2, [pc, #76]	; (8001844 <HAL_ADC_Start+0x98>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	0052      	lsls	r2, r2, #1
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	221c      	movs	r2, #28
 800180e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2254      	movs	r2, #84	; 0x54
 8001814:	2100      	movs	r1, #0
 8001816:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff fdf9 	bl	8001414 <LL_ADC_REG_StartConversion>
 8001822:	e008      	b.n	8001836 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2254      	movs	r2, #84	; 0x54
 8001828:	2100      	movs	r1, #0
 800182a:	5499      	strb	r1, [r3, r2]
 800182c:	e003      	b.n	8001836 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800182e:	230f      	movs	r3, #15
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001836:	230f      	movs	r3, #15
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	781b      	ldrb	r3, [r3, #0]
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	b004      	add	sp, #16
 8001842:	bdb0      	pop	{r4, r5, r7, pc}
 8001844:	fffff0fe 	.word	0xfffff0fe

08001848 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	2b08      	cmp	r3, #8
 8001858:	d102      	bne.n	8001860 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800185a:	2308      	movs	r3, #8
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	e00f      	b.n	8001880 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2201      	movs	r2, #1
 8001868:	4013      	ands	r3, r2
 800186a:	d007      	beq.n	800187c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001870:	2220      	movs	r2, #32
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e072      	b.n	8001962 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800187c:	2304      	movs	r3, #4
 800187e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001880:	f7ff fc88 	bl	8001194 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001888:	e01f      	b.n	80018ca <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	d01c      	beq.n	80018ca <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001890:	f7ff fc80 	bl	8001194 <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d302      	bcc.n	80018a6 <HAL_ADC_PollForConversion+0x5e>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d111      	bne.n	80018ca <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4013      	ands	r3, r2
 80018b0:	d10b      	bne.n	80018ca <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	2204      	movs	r2, #4
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2254      	movs	r2, #84	; 0x54
 80018c2:	2100      	movs	r1, #0
 80018c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e04b      	b.n	8001962 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4013      	ands	r3, r2
 80018d4:	d0d9      	beq.n	800188a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7ff fcd6 	bl	800129a <LL_ADC_REG_IsTriggerSourceSWStart>
 80018ee:	1e03      	subs	r3, r0, #0
 80018f0:	d02e      	beq.n	8001950 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7e9b      	ldrb	r3, [r3, #26]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d12a      	bne.n	8001950 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2208      	movs	r2, #8
 8001902:	4013      	ands	r3, r2
 8001904:	2b08      	cmp	r3, #8
 8001906:	d123      	bne.n	8001950 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff fd93 	bl	8001438 <LL_ADC_REG_IsConversionOngoing>
 8001912:	1e03      	subs	r3, r0, #0
 8001914:	d110      	bne.n	8001938 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	210c      	movs	r1, #12
 8001922:	438a      	bics	r2, r1
 8001924:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_ADC_PollForConversion+0x124>)
 800192c:	4013      	ands	r3, r2
 800192e:	2201      	movs	r2, #1
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	659a      	str	r2, [r3, #88]	; 0x58
 8001936:	e00b      	b.n	8001950 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	2220      	movs	r2, #32
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001948:	2201      	movs	r2, #1
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7e1b      	ldrb	r3, [r3, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d103      	bne.n	8001960 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	220c      	movs	r2, #12
 800195e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b004      	add	sp, #16
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	fffffefe 	.word	0xfffffefe

08001970 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b002      	add	sp, #8
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001992:	2317      	movs	r3, #23
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2254      	movs	r2, #84	; 0x54
 80019a2:	5c9b      	ldrb	r3, [r3, r2]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x24>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e1c0      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x3a6>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2254      	movs	r2, #84	; 0x54
 80019b0:	2101      	movs	r1, #1
 80019b2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7ff fd3d 	bl	8001438 <LL_ADC_REG_IsConversionOngoing>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d000      	beq.n	80019c4 <HAL_ADC_ConfigChannel+0x3c>
 80019c2:	e1a3      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d100      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x46>
 80019cc:	e143      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	061b      	lsls	r3, r3, #24
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d004      	beq.n	80019e4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019de:	4ac1      	ldr	r2, [pc, #772]	; (8001ce4 <HAL_ADC_ConfigChannel+0x35c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d108      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0019      	movs	r1, r3
 80019ee:	0010      	movs	r0, r2
 80019f0:	f7ff fc84 	bl	80012fc <LL_ADC_REG_SetSequencerChAdd>
 80019f4:	e0c9      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	211f      	movs	r1, #31
 8001a00:	400b      	ands	r3, r1
 8001a02:	210f      	movs	r1, #15
 8001a04:	4099      	lsls	r1, r3
 8001a06:	000b      	movs	r3, r1
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	035b      	lsls	r3, r3, #13
 8001a14:	0b5b      	lsrs	r3, r3, #13
 8001a16:	d105      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x9c>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0e9b      	lsrs	r3, r3, #26
 8001a1e:	221f      	movs	r2, #31
 8001a20:	4013      	ands	r3, r2
 8001a22:	e098      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d000      	beq.n	8001a30 <HAL_ADC_ConfigChannel+0xa8>
 8001a2e:	e091      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x1cc>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2202      	movs	r2, #2
 8001a36:	4013      	ands	r3, r2
 8001a38:	d000      	beq.n	8001a3c <HAL_ADC_ConfigChannel+0xb4>
 8001a3a:	e089      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x1c8>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2204      	movs	r2, #4
 8001a42:	4013      	ands	r3, r2
 8001a44:	d000      	beq.n	8001a48 <HAL_ADC_ConfigChannel+0xc0>
 8001a46:	e081      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x1c4>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2208      	movs	r2, #8
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d000      	beq.n	8001a54 <HAL_ADC_ConfigChannel+0xcc>
 8001a52:	e079      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x1c0>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2210      	movs	r2, #16
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d000      	beq.n	8001a60 <HAL_ADC_ConfigChannel+0xd8>
 8001a5e:	e071      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x1bc>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2220      	movs	r2, #32
 8001a66:	4013      	ands	r3, r2
 8001a68:	d000      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0xe4>
 8001a6a:	e069      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x1b8>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2240      	movs	r2, #64	; 0x40
 8001a72:	4013      	ands	r3, r2
 8001a74:	d000      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0xf0>
 8001a76:	e061      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x1b4>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d000      	beq.n	8001a84 <HAL_ADC_ConfigChannel+0xfc>
 8001a82:	e059      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x1b0>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d151      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1ac>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d149      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1a8>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d141      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x1a4>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d139      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1a0>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	015b      	lsls	r3, r3, #5
 8001abc:	4013      	ands	r3, r2
 8001abe:	d131      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x19c>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	019b      	lsls	r3, r3, #6
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d129      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x198>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	01db      	lsls	r3, r3, #7
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d121      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x194>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d119      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x190>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	025b      	lsls	r3, r3, #9
 8001aec:	4013      	ands	r3, r2
 8001aee:	d111      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x18c>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	029b      	lsls	r3, r3, #10
 8001af8:	4013      	ands	r3, r2
 8001afa:	d109      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x188>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	02db      	lsls	r3, r3, #11
 8001b04:	4013      	ands	r3, r2
 8001b06:	d001      	beq.n	8001b0c <HAL_ADC_ConfigChannel+0x184>
 8001b08:	2312      	movs	r3, #18
 8001b0a:	e024      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e022      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b10:	2311      	movs	r3, #17
 8001b12:	e020      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b14:	2310      	movs	r3, #16
 8001b16:	e01e      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b18:	230f      	movs	r3, #15
 8001b1a:	e01c      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b1c:	230e      	movs	r3, #14
 8001b1e:	e01a      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b20:	230d      	movs	r3, #13
 8001b22:	e018      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b24:	230c      	movs	r3, #12
 8001b26:	e016      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b28:	230b      	movs	r3, #11
 8001b2a:	e014      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b2c:	230a      	movs	r3, #10
 8001b2e:	e012      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b30:	2309      	movs	r3, #9
 8001b32:	e010      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b34:	2308      	movs	r3, #8
 8001b36:	e00e      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b38:	2307      	movs	r3, #7
 8001b3a:	e00c      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b3c:	2306      	movs	r3, #6
 8001b3e:	e00a      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b40:	2305      	movs	r3, #5
 8001b42:	e008      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b44:	2304      	movs	r3, #4
 8001b46:	e006      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e004      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e002      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1ce>
 8001b54:	2300      	movs	r3, #0
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	6852      	ldr	r2, [r2, #4]
 8001b5a:	201f      	movs	r0, #31
 8001b5c:	4002      	ands	r2, r0
 8001b5e:	4093      	lsls	r3, r2
 8001b60:	000a      	movs	r2, r1
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d808      	bhi.n	8001b8a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6859      	ldr	r1, [r3, #4]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	001a      	movs	r2, r3
 8001b86:	f7ff fb99 	bl	80012bc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	6819      	ldr	r1, [r3, #0]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	001a      	movs	r2, r3
 8001b98:	f7ff fbd4 	bl	8001344 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db00      	blt.n	8001ba6 <HAL_ADC_ConfigChannel+0x21e>
 8001ba4:	e0bc      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ba6:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <HAL_ADC_ConfigChannel+0x360>)
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff fb35 	bl	8001218 <LL_ADC_GetCommonPathInternalCh>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a4d      	ldr	r2, [pc, #308]	; (8001cec <HAL_ADC_ConfigChannel+0x364>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d122      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bc4:	d11d      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	0412      	lsls	r2, r2, #16
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	4a46      	ldr	r2, [pc, #280]	; (8001ce8 <HAL_ADC_ConfigChannel+0x360>)
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	0010      	movs	r0, r2
 8001bd4:	f7ff fb0c 	bl	80011f0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bd8:	4b45      	ldr	r3, [pc, #276]	; (8001cf0 <HAL_ADC_ConfigChannel+0x368>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4945      	ldr	r1, [pc, #276]	; (8001cf4 <HAL_ADC_ConfigChannel+0x36c>)
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7fe fa90 	bl	8000104 <__udivsi3>
 8001be4:	0003      	movs	r3, r0
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	0013      	movs	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	189b      	adds	r3, r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bf2:	e002      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f9      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c00:	e08e      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a3c      	ldr	r2, [pc, #240]	; (8001cf8 <HAL_ADC_ConfigChannel+0x370>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d10e      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	045b      	lsls	r3, r3, #17
 8001c12:	4013      	ands	r3, r2
 8001c14:	d109      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	0452      	lsls	r2, r2, #17
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	4a32      	ldr	r2, [pc, #200]	; (8001ce8 <HAL_ADC_ConfigChannel+0x360>)
 8001c20:	0019      	movs	r1, r3
 8001c22:	0010      	movs	r0, r2
 8001c24:	f7ff fae4 	bl	80011f0 <LL_ADC_SetCommonPathInternalCh>
 8001c28:	e07a      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a33      	ldr	r2, [pc, #204]	; (8001cfc <HAL_ADC_ConfigChannel+0x374>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d000      	beq.n	8001c36 <HAL_ADC_ConfigChannel+0x2ae>
 8001c34:	e074      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	03db      	lsls	r3, r3, #15
 8001c3c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c3e:	d000      	beq.n	8001c42 <HAL_ADC_ConfigChannel+0x2ba>
 8001c40:	e06e      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	03d2      	lsls	r2, r2, #15
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	4a27      	ldr	r2, [pc, #156]	; (8001ce8 <HAL_ADC_ConfigChannel+0x360>)
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	0010      	movs	r0, r2
 8001c50:	f7ff face 	bl	80011f0 <LL_ADC_SetCommonPathInternalCh>
 8001c54:	e064      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d004      	beq.n	8001c6c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c66:	4a1f      	ldr	r2, [pc, #124]	; (8001ce4 <HAL_ADC_ConfigChannel+0x35c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d107      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0019      	movs	r1, r3
 8001c76:	0010      	movs	r0, r2
 8001c78:	f7ff fb51 	bl	800131e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	da4d      	bge.n	8001d20 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c84:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_ADC_ConfigChannel+0x360>)
 8001c86:	0018      	movs	r0, r3
 8001c88:	f7ff fac6 	bl	8001218 <LL_ADC_GetCommonPathInternalCh>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a15      	ldr	r2, [pc, #84]	; (8001cec <HAL_ADC_ConfigChannel+0x364>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d108      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <HAL_ADC_ConfigChannel+0x378>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	4a11      	ldr	r2, [pc, #68]	; (8001ce8 <HAL_ADC_ConfigChannel+0x360>)
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	0010      	movs	r0, r2
 8001ca6:	f7ff faa3 	bl	80011f0 <LL_ADC_SetCommonPathInternalCh>
 8001caa:	e039      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a11      	ldr	r2, [pc, #68]	; (8001cf8 <HAL_ADC_ConfigChannel+0x370>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d108      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <HAL_ADC_ConfigChannel+0x37c>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_ADC_ConfigChannel+0x360>)
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	0010      	movs	r0, r2
 8001cc2:	f7ff fa95 	bl	80011f0 <LL_ADC_SetCommonPathInternalCh>
 8001cc6:	e02b      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <HAL_ADC_ConfigChannel+0x374>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d126      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_ADC_ConfigChannel+0x380>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	4a03      	ldr	r2, [pc, #12]	; (8001ce8 <HAL_ADC_ConfigChannel+0x360>)
 8001cda:	0019      	movs	r1, r3
 8001cdc:	0010      	movs	r0, r2
 8001cde:	f7ff fa87 	bl	80011f0 <LL_ADC_SetCommonPathInternalCh>
 8001ce2:	e01d      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x398>
 8001ce4:	80000004 	.word	0x80000004
 8001ce8:	40012708 	.word	0x40012708
 8001cec:	b0001000 	.word	0xb0001000
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	00030d40 	.word	0x00030d40
 8001cf8:	b8004000 	.word	0xb8004000
 8001cfc:	b4002000 	.word	0xb4002000
 8001d00:	ff7fffff 	.word	0xff7fffff
 8001d04:	feffffff 	.word	0xfeffffff
 8001d08:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	2220      	movs	r2, #32
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d18:	2317      	movs	r3, #23
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2254      	movs	r2, #84	; 0x54
 8001d24:	2100      	movs	r1, #0
 8001d26:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d28:	2317      	movs	r3, #23
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	781b      	ldrb	r3, [r3, #0]
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b006      	add	sp, #24
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)

08001d38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff fb51 	bl	80013f0 <LL_ADC_IsEnabled>
 8001d4e:	1e03      	subs	r3, r0, #0
 8001d50:	d000      	beq.n	8001d54 <ADC_Enable+0x1c>
 8001d52:	e069      	b.n	8001e28 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4a36      	ldr	r2, [pc, #216]	; (8001e34 <ADC_Enable+0xfc>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d00d      	beq.n	8001d7c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	2210      	movs	r2, #16
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	2201      	movs	r2, #1
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e056      	b.n	8001e2a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff fb23 	bl	80013cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001d86:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <ADC_Enable+0x100>)
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff fa45 	bl	8001218 <LL_ADC_GetCommonPathInternalCh>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	4013      	ands	r3, r2
 8001d96:	d00f      	beq.n	8001db8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d98:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <ADC_Enable+0x104>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4928      	ldr	r1, [pc, #160]	; (8001e40 <ADC_Enable+0x108>)
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f7fe f9b0 	bl	8000104 <__udivsi3>
 8001da4:	0003      	movs	r3, r0
 8001da6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001da8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001daa:	e002      	b.n	8001db2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f9      	bne.n	8001dac <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7e5b      	ldrb	r3, [r3, #25]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d033      	beq.n	8001e28 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001dc0:	f7ff f9e8 	bl	8001194 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dc8:	e027      	b.n	8001e1a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7ff fb0e 	bl	80013f0 <LL_ADC_IsEnabled>
 8001dd4:	1e03      	subs	r3, r0, #0
 8001dd6:	d104      	bne.n	8001de2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff faf5 	bl	80013cc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001de2:	f7ff f9d7 	bl	8001194 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d914      	bls.n	8001e1a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2201      	movs	r2, #1
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d00d      	beq.n	8001e1a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	2210      	movs	r2, #16
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0e:	2201      	movs	r2, #1
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e007      	b.n	8001e2a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2201      	movs	r2, #1
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d1d0      	bne.n	8001dca <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b004      	add	sp, #16
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	80000017 	.word	0x80000017
 8001e38:	40012708 	.word	0x40012708
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	00030d40 	.word	0x00030d40

08001e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	1dfb      	adds	r3, r7, #7
 8001e4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	1dfb      	adds	r3, r7, #7
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b7f      	cmp	r3, #127	; 0x7f
 8001e56:	d809      	bhi.n	8001e6c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e58:	1dfb      	adds	r3, r7, #7
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	231f      	movs	r3, #31
 8001e60:	401a      	ands	r2, r3
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <__NVIC_EnableIRQ+0x30>)
 8001e64:	2101      	movs	r1, #1
 8001e66:	4091      	lsls	r1, r2
 8001e68:	000a      	movs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	0002      	movs	r2, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e8c:	d828      	bhi.n	8001ee0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e8e:	4a2f      	ldr	r2, [pc, #188]	; (8001f4c <__NVIC_SetPriority+0xd4>)
 8001e90:	1dfb      	adds	r3, r7, #7
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b25b      	sxtb	r3, r3
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	33c0      	adds	r3, #192	; 0xc0
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	589b      	ldr	r3, [r3, r2]
 8001e9e:	1dfa      	adds	r2, r7, #7
 8001ea0:	7812      	ldrb	r2, [r2, #0]
 8001ea2:	0011      	movs	r1, r2
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	00d2      	lsls	r2, r2, #3
 8001eaa:	21ff      	movs	r1, #255	; 0xff
 8001eac:	4091      	lsls	r1, r2
 8001eae:	000a      	movs	r2, r1
 8001eb0:	43d2      	mvns	r2, r2
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	019b      	lsls	r3, r3, #6
 8001eba:	22ff      	movs	r2, #255	; 0xff
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	4003      	ands	r3, r0
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ecc:	481f      	ldr	r0, [pc, #124]	; (8001f4c <__NVIC_SetPriority+0xd4>)
 8001ece:	1dfb      	adds	r3, r7, #7
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b25b      	sxtb	r3, r3
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	33c0      	adds	r3, #192	; 0xc0
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ede:	e031      	b.n	8001f44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ee0:	4a1b      	ldr	r2, [pc, #108]	; (8001f50 <__NVIC_SetPriority+0xd8>)
 8001ee2:	1dfb      	adds	r3, r7, #7
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	230f      	movs	r3, #15
 8001eea:	400b      	ands	r3, r1
 8001eec:	3b08      	subs	r3, #8
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3306      	adds	r3, #6
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	18d3      	adds	r3, r2, r3
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	1dfa      	adds	r2, r7, #7
 8001efc:	7812      	ldrb	r2, [r2, #0]
 8001efe:	0011      	movs	r1, r2
 8001f00:	2203      	movs	r2, #3
 8001f02:	400a      	ands	r2, r1
 8001f04:	00d2      	lsls	r2, r2, #3
 8001f06:	21ff      	movs	r1, #255	; 0xff
 8001f08:	4091      	lsls	r1, r2
 8001f0a:	000a      	movs	r2, r1
 8001f0c:	43d2      	mvns	r2, r2
 8001f0e:	401a      	ands	r2, r3
 8001f10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	019b      	lsls	r3, r3, #6
 8001f16:	22ff      	movs	r2, #255	; 0xff
 8001f18:	401a      	ands	r2, r3
 8001f1a:	1dfb      	adds	r3, r7, #7
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	2303      	movs	r3, #3
 8001f22:	4003      	ands	r3, r0
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f28:	4809      	ldr	r0, [pc, #36]	; (8001f50 <__NVIC_SetPriority+0xd8>)
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	001c      	movs	r4, r3
 8001f30:	230f      	movs	r3, #15
 8001f32:	4023      	ands	r3, r4
 8001f34:	3b08      	subs	r3, #8
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	3306      	adds	r3, #6
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	18c3      	adds	r3, r0, r3
 8001f40:	3304      	adds	r3, #4
 8001f42:	601a      	str	r2, [r3, #0]
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b003      	add	sp, #12
 8001f4a:	bd90      	pop	{r4, r7, pc}
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	1e5a      	subs	r2, r3, #1
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	045b      	lsls	r3, r3, #17
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d301      	bcc.n	8001f6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e010      	b.n	8001f8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <SysTick_Config+0x44>)
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	3a01      	subs	r2, #1
 8001f72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f74:	2301      	movs	r3, #1
 8001f76:	425b      	negs	r3, r3
 8001f78:	2103      	movs	r1, #3
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7ff ff7c 	bl	8001e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <SysTick_Config+0x44>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f86:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <SysTick_Config+0x44>)
 8001f88:	2207      	movs	r2, #7
 8001f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b002      	add	sp, #8
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	e000e010 	.word	0xe000e010

08001f9c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	210f      	movs	r1, #15
 8001fa8:	187b      	adds	r3, r7, r1
 8001faa:	1c02      	adds	r2, r0, #0
 8001fac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b25b      	sxtb	r3, r3
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7ff ff5d 	bl	8001e78 <__NVIC_SetPriority>
}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b004      	add	sp, #16
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	0002      	movs	r2, r0
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b25b      	sxtb	r3, r3
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff ff33 	bl	8001e44 <__NVIC_EnableIRQ>
}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff ffaf 	bl	8001f54 <SysTick_Config>
 8001ff6:	0003      	movs	r3, r0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200e:	e147      	b.n	80022a0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4091      	lsls	r1, r2
 800201a:	000a      	movs	r2, r1
 800201c:	4013      	ands	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d100      	bne.n	8002028 <HAL_GPIO_Init+0x28>
 8002026:	e138      	b.n	800229a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2203      	movs	r2, #3
 800202e:	4013      	ands	r3, r2
 8002030:	2b01      	cmp	r3, #1
 8002032:	d005      	beq.n	8002040 <HAL_GPIO_Init+0x40>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2203      	movs	r2, #3
 800203a:	4013      	ands	r3, r2
 800203c:	2b02      	cmp	r3, #2
 800203e:	d130      	bne.n	80020a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	409a      	lsls	r2, r3
 800204e:	0013      	movs	r3, r2
 8002050:	43da      	mvns	r2, r3
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	409a      	lsls	r2, r3
 8002062:	0013      	movs	r3, r2
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002076:	2201      	movs	r2, #1
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
 800207c:	0013      	movs	r3, r2
 800207e:	43da      	mvns	r2, r3
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	2201      	movs	r2, #1
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
 8002094:	0013      	movs	r3, r2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2203      	movs	r2, #3
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d017      	beq.n	80020de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2203      	movs	r2, #3
 80020ba:	409a      	lsls	r2, r3
 80020bc:	0013      	movs	r3, r2
 80020be:	43da      	mvns	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	409a      	lsls	r2, r3
 80020d0:	0013      	movs	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2203      	movs	r2, #3
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d123      	bne.n	8002132 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	08da      	lsrs	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3208      	adds	r2, #8
 80020f2:	0092      	lsls	r2, r2, #2
 80020f4:	58d3      	ldr	r3, [r2, r3]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2207      	movs	r2, #7
 80020fc:	4013      	ands	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	409a      	lsls	r2, r3
 8002104:	0013      	movs	r3, r2
 8002106:	43da      	mvns	r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2107      	movs	r1, #7
 8002116:	400b      	ands	r3, r1
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	409a      	lsls	r2, r3
 800211c:	0013      	movs	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	0092      	lsls	r2, r2, #2
 800212e:	6939      	ldr	r1, [r7, #16]
 8002130:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	409a      	lsls	r2, r3
 8002140:	0013      	movs	r3, r2
 8002142:	43da      	mvns	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2203      	movs	r2, #3
 8002150:	401a      	ands	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	409a      	lsls	r2, r3
 8002158:	0013      	movs	r3, r2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	23c0      	movs	r3, #192	; 0xc0
 800216c:	029b      	lsls	r3, r3, #10
 800216e:	4013      	ands	r3, r2
 8002170:	d100      	bne.n	8002174 <HAL_GPIO_Init+0x174>
 8002172:	e092      	b.n	800229a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002174:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3318      	adds	r3, #24
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	589b      	ldr	r3, [r3, r2]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2203      	movs	r2, #3
 8002186:	4013      	ands	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	220f      	movs	r2, #15
 800218c:	409a      	lsls	r2, r3
 800218e:	0013      	movs	r3, r2
 8002190:	43da      	mvns	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	23a0      	movs	r3, #160	; 0xa0
 800219c:	05db      	lsls	r3, r3, #23
 800219e:	429a      	cmp	r2, r3
 80021a0:	d013      	beq.n	80021ca <HAL_GPIO_Init+0x1ca>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a45      	ldr	r2, [pc, #276]	; (80022bc <HAL_GPIO_Init+0x2bc>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00d      	beq.n	80021c6 <HAL_GPIO_Init+0x1c6>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a44      	ldr	r2, [pc, #272]	; (80022c0 <HAL_GPIO_Init+0x2c0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d007      	beq.n	80021c2 <HAL_GPIO_Init+0x1c2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a43      	ldr	r2, [pc, #268]	; (80022c4 <HAL_GPIO_Init+0x2c4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_GPIO_Init+0x1be>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x1cc>
 80021be:	2305      	movs	r3, #5
 80021c0:	e004      	b.n	80021cc <HAL_GPIO_Init+0x1cc>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_Init+0x1cc>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x1cc>
 80021ca:	2300      	movs	r3, #0
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	2103      	movs	r1, #3
 80021d0:	400a      	ands	r2, r1
 80021d2:	00d2      	lsls	r2, r2, #3
 80021d4:	4093      	lsls	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80021dc:	4936      	ldr	r1, [pc, #216]	; (80022b8 <HAL_GPIO_Init+0x2b8>)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3318      	adds	r3, #24
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021ea:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <HAL_GPIO_Init+0x2b8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43da      	mvns	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	035b      	lsls	r3, r3, #13
 8002202:	4013      	ands	r3, r2
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	43da      	mvns	r2, r3
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	039b      	lsls	r3, r3, #14
 800222c:	4013      	ands	r3, r2
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002238:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <HAL_GPIO_Init+0x2b8>)
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800223e:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002240:	2384      	movs	r3, #132	; 0x84
 8002242:	58d3      	ldr	r3, [r2, r3]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	43da      	mvns	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	029b      	lsls	r3, r3, #10
 8002258:	4013      	ands	r3, r2
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002264:	4914      	ldr	r1, [pc, #80]	; (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002266:	2284      	movs	r2, #132	; 0x84
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800226c:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <HAL_GPIO_Init+0x2b8>)
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	58d3      	ldr	r3, [r2, r3]
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43da      	mvns	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	025b      	lsls	r3, r3, #9
 8002286:	4013      	ands	r3, r2
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002292:	4909      	ldr	r1, [pc, #36]	; (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002294:	2280      	movs	r2, #128	; 0x80
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	40da      	lsrs	r2, r3
 80022a8:	1e13      	subs	r3, r2, #0
 80022aa:	d000      	beq.n	80022ae <HAL_GPIO_Init+0x2ae>
 80022ac:	e6b0      	b.n	8002010 <HAL_GPIO_Init+0x10>
  }
}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b006      	add	sp, #24
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021800 	.word	0x40021800
 80022bc:	50000400 	.word	0x50000400
 80022c0:	50000800 	.word	0x50000800
 80022c4:	50000c00 	.word	0x50000c00

080022c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	000a      	movs	r2, r1
 80022d2:	1cbb      	adds	r3, r7, #2
 80022d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	1cba      	adds	r2, r7, #2
 80022dc:	8812      	ldrh	r2, [r2, #0]
 80022de:	4013      	ands	r3, r2
 80022e0:	d004      	beq.n	80022ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80022e2:	230f      	movs	r3, #15
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	e003      	b.n	80022f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ec:	230f      	movs	r3, #15
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80022f4:	230f      	movs	r3, #15
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	781b      	ldrb	r3, [r3, #0]
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b004      	add	sp, #16
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	0008      	movs	r0, r1
 800230c:	0011      	movs	r1, r2
 800230e:	1cbb      	adds	r3, r7, #2
 8002310:	1c02      	adds	r2, r0, #0
 8002312:	801a      	strh	r2, [r3, #0]
 8002314:	1c7b      	adds	r3, r7, #1
 8002316:	1c0a      	adds	r2, r1, #0
 8002318:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800231a:	1c7b      	adds	r3, r7, #1
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002322:	1cbb      	adds	r3, r7, #2
 8002324:	881a      	ldrh	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800232a:	e003      	b.n	8002334 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800232c:	1cbb      	adds	r3, r7, #2
 800232e:	881a      	ldrh	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	000a      	movs	r2, r1
 8002346:	1cbb      	adds	r3, r7, #2
 8002348:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002350:	1cbb      	adds	r3, r7, #2
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4013      	ands	r3, r2
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43db      	mvns	r3, r3
 800235e:	1cb9      	adds	r1, r7, #2
 8002360:	8809      	ldrh	r1, [r1, #0]
 8002362:	400b      	ands	r3, r1
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	619a      	str	r2, [r3, #24]
}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	46bd      	mov	sp, r7
 800236e:	b004      	add	sp, #16
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002382:	4013      	ands	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	430a      	orrs	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	429a      	cmp	r2, r3
 8002396:	d11f      	bne.n	80023d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	0013      	movs	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	189b      	adds	r3, r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4912      	ldr	r1, [pc, #72]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80023a6:	0018      	movs	r0, r3
 80023a8:	f7fd feac 	bl	8000104 <__udivsi3>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3301      	adds	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b2:	e008      	b.n	80023c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3b01      	subs	r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e001      	b.n	80023c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e009      	b.n	80023da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	401a      	ands	r2, r3
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d0ed      	beq.n	80023b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40007000 	.word	0x40007000
 80023e8:	fffff9ff 	.word	0xfffff9ff
 80023ec:	20000000 	.word	0x20000000
 80023f0:	000f4240 	.word	0x000f4240

080023f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <LL_RCC_GetAPB1Prescaler+0x14>)
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	23e0      	movs	r3, #224	; 0xe0
 80023fe:	01db      	lsls	r3, r3, #7
 8002400:	4013      	ands	r3, r2
}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021000 	.word	0x40021000

0800240c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e2fe      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2201      	movs	r2, #1
 8002424:	4013      	ands	r3, r2
 8002426:	d100      	bne.n	800242a <HAL_RCC_OscConfig+0x1e>
 8002428:	e07c      	b.n	8002524 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242a:	4bc3      	ldr	r3, [pc, #780]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2238      	movs	r2, #56	; 0x38
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002434:	4bc0      	ldr	r3, [pc, #768]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2203      	movs	r2, #3
 800243a:	4013      	ands	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2b10      	cmp	r3, #16
 8002442:	d102      	bne.n	800244a <HAL_RCC_OscConfig+0x3e>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d002      	beq.n	8002450 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b08      	cmp	r3, #8
 800244e:	d10b      	bne.n	8002468 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	4bb9      	ldr	r3, [pc, #740]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	029b      	lsls	r3, r3, #10
 8002458:	4013      	ands	r3, r2
 800245a:	d062      	beq.n	8002522 <HAL_RCC_OscConfig+0x116>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d15e      	bne.n	8002522 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e2d9      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	025b      	lsls	r3, r3, #9
 8002470:	429a      	cmp	r2, r3
 8002472:	d107      	bne.n	8002484 <HAL_RCC_OscConfig+0x78>
 8002474:	4bb0      	ldr	r3, [pc, #704]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4baf      	ldr	r3, [pc, #700]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	0249      	lsls	r1, r1, #9
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e020      	b.n	80024c6 <HAL_RCC_OscConfig+0xba>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	23a0      	movs	r3, #160	; 0xa0
 800248a:	02db      	lsls	r3, r3, #11
 800248c:	429a      	cmp	r2, r3
 800248e:	d10e      	bne.n	80024ae <HAL_RCC_OscConfig+0xa2>
 8002490:	4ba9      	ldr	r3, [pc, #676]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4ba8      	ldr	r3, [pc, #672]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	02c9      	lsls	r1, r1, #11
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	4ba6      	ldr	r3, [pc, #664]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4ba5      	ldr	r3, [pc, #660]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	0249      	lsls	r1, r1, #9
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e00b      	b.n	80024c6 <HAL_RCC_OscConfig+0xba>
 80024ae:	4ba2      	ldr	r3, [pc, #648]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4ba1      	ldr	r3, [pc, #644]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80024b4:	49a1      	ldr	r1, [pc, #644]	; (800273c <HAL_RCC_OscConfig+0x330>)
 80024b6:	400a      	ands	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	4b9f      	ldr	r3, [pc, #636]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4b9e      	ldr	r3, [pc, #632]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80024c0:	499f      	ldr	r1, [pc, #636]	; (8002740 <HAL_RCC_OscConfig+0x334>)
 80024c2:	400a      	ands	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d014      	beq.n	80024f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7fe fe61 	bl	8001194 <HAL_GetTick>
 80024d2:	0003      	movs	r3, r0
 80024d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe fe5c 	bl	8001194 <HAL_GetTick>
 80024dc:	0002      	movs	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e298      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ea:	4b93      	ldr	r3, [pc, #588]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	029b      	lsls	r3, r3, #10
 80024f2:	4013      	ands	r3, r2
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xcc>
 80024f6:	e015      	b.n	8002524 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fe4c 	bl	8001194 <HAL_GetTick>
 80024fc:	0003      	movs	r3, r0
 80024fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002502:	f7fe fe47 	bl	8001194 <HAL_GetTick>
 8002506:	0002      	movs	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b64      	cmp	r3, #100	; 0x64
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e283      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002514:	4b88      	ldr	r3, [pc, #544]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	029b      	lsls	r3, r3, #10
 800251c:	4013      	ands	r3, r2
 800251e:	d1f0      	bne.n	8002502 <HAL_RCC_OscConfig+0xf6>
 8002520:	e000      	b.n	8002524 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002522:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2202      	movs	r2, #2
 800252a:	4013      	ands	r3, r2
 800252c:	d100      	bne.n	8002530 <HAL_RCC_OscConfig+0x124>
 800252e:	e099      	b.n	8002664 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002530:	4b81      	ldr	r3, [pc, #516]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2238      	movs	r2, #56	; 0x38
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800253a:	4b7f      	ldr	r3, [pc, #508]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2203      	movs	r2, #3
 8002540:	4013      	ands	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b10      	cmp	r3, #16
 8002548:	d102      	bne.n	8002550 <HAL_RCC_OscConfig+0x144>
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d002      	beq.n	8002556 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d135      	bne.n	80025c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002556:	4b78      	ldr	r3, [pc, #480]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4013      	ands	r3, r2
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x162>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e256      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b72      	ldr	r3, [pc, #456]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4a74      	ldr	r2, [pc, #464]	; (8002744 <HAL_RCC_OscConfig+0x338>)
 8002574:	4013      	ands	r3, r2
 8002576:	0019      	movs	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	021a      	lsls	r2, r3, #8
 800257e:	4b6e      	ldr	r3, [pc, #440]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002580:	430a      	orrs	r2, r1
 8002582:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d112      	bne.n	80025b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800258a:	4b6b      	ldr	r3, [pc, #428]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6e      	ldr	r2, [pc, #440]	; (8002748 <HAL_RCC_OscConfig+0x33c>)
 8002590:	4013      	ands	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	4b67      	ldr	r3, [pc, #412]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800259e:	4b66      	ldr	r3, [pc, #408]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	0adb      	lsrs	r3, r3, #11
 80025a4:	2207      	movs	r2, #7
 80025a6:	4013      	ands	r3, r2
 80025a8:	4a68      	ldr	r2, [pc, #416]	; (800274c <HAL_RCC_OscConfig+0x340>)
 80025aa:	40da      	lsrs	r2, r3
 80025ac:	4b68      	ldr	r3, [pc, #416]	; (8002750 <HAL_RCC_OscConfig+0x344>)
 80025ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025b0:	4b68      	ldr	r3, [pc, #416]	; (8002754 <HAL_RCC_OscConfig+0x348>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7fe fd91 	bl	80010dc <HAL_InitTick>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d051      	beq.n	8002662 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e22c      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d030      	beq.n	800262c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025ca:	4b5b      	ldr	r3, [pc, #364]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a5e      	ldr	r2, [pc, #376]	; (8002748 <HAL_RCC_OscConfig+0x33c>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	0019      	movs	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	4b57      	ldr	r3, [pc, #348]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80025de:	4b56      	ldr	r3, [pc, #344]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b55      	ldr	r3, [pc, #340]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	0049      	lsls	r1, r1, #1
 80025e8:	430a      	orrs	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fdd2 	bl	8001194 <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f6:	f7fe fdcd 	bl	8001194 <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e209      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4013      	ands	r3, r2
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002614:	4b48      	ldr	r3, [pc, #288]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4a4a      	ldr	r2, [pc, #296]	; (8002744 <HAL_RCC_OscConfig+0x338>)
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	021a      	lsls	r2, r3, #8
 8002624:	4b44      	ldr	r3, [pc, #272]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	e01b      	b.n	8002664 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800262c:	4b42      	ldr	r3, [pc, #264]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b41      	ldr	r3, [pc, #260]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002632:	4949      	ldr	r1, [pc, #292]	; (8002758 <HAL_RCC_OscConfig+0x34c>)
 8002634:	400a      	ands	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fdac 	bl	8001194 <HAL_GetTick>
 800263c:	0003      	movs	r3, r0
 800263e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002642:	f7fe fda7 	bl	8001194 <HAL_GetTick>
 8002646:	0002      	movs	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e1e3      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002654:	4b38      	ldr	r3, [pc, #224]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4013      	ands	r3, r2
 800265e:	d1f0      	bne.n	8002642 <HAL_RCC_OscConfig+0x236>
 8002660:	e000      	b.n	8002664 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002662:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2208      	movs	r2, #8
 800266a:	4013      	ands	r3, r2
 800266c:	d047      	beq.n	80026fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800266e:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2238      	movs	r2, #56	; 0x38
 8002674:	4013      	ands	r3, r2
 8002676:	2b18      	cmp	r3, #24
 8002678:	d10a      	bne.n	8002690 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800267a:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 800267c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267e:	2202      	movs	r2, #2
 8002680:	4013      	ands	r3, r2
 8002682:	d03c      	beq.n	80026fe <HAL_RCC_OscConfig+0x2f2>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d138      	bne.n	80026fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e1c5      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d019      	beq.n	80026cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002698:	4b27      	ldr	r3, [pc, #156]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 800269a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800269c:	4b26      	ldr	r3, [pc, #152]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 800269e:	2101      	movs	r1, #1
 80026a0:	430a      	orrs	r2, r1
 80026a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fd76 	bl	8001194 <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ae:	f7fe fd71 	bl	8001194 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e1ad      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80026c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	d0f1      	beq.n	80026ae <HAL_RCC_OscConfig+0x2a2>
 80026ca:	e018      	b.n	80026fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80026ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80026d2:	2101      	movs	r1, #1
 80026d4:	438a      	bics	r2, r1
 80026d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fd5c 	bl	8001194 <HAL_GetTick>
 80026dc:	0003      	movs	r3, r0
 80026de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e2:	f7fe fd57 	bl	8001194 <HAL_GetTick>
 80026e6:	0002      	movs	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e193      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f4:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 80026f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f8:	2202      	movs	r2, #2
 80026fa:	4013      	ands	r3, r2
 80026fc:	d1f1      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2204      	movs	r2, #4
 8002704:	4013      	ands	r3, r2
 8002706:	d100      	bne.n	800270a <HAL_RCC_OscConfig+0x2fe>
 8002708:	e0c6      	b.n	8002898 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	231f      	movs	r3, #31
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2238      	movs	r2, #56	; 0x38
 8002718:	4013      	ands	r3, r2
 800271a:	2b20      	cmp	r3, #32
 800271c:	d11e      	bne.n	800275c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_OscConfig+0x32c>)
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	2202      	movs	r2, #2
 8002724:	4013      	ands	r3, r2
 8002726:	d100      	bne.n	800272a <HAL_RCC_OscConfig+0x31e>
 8002728:	e0b6      	b.n	8002898 <HAL_RCC_OscConfig+0x48c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d000      	beq.n	8002734 <HAL_RCC_OscConfig+0x328>
 8002732:	e0b1      	b.n	8002898 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e171      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
 8002738:	40021000 	.word	0x40021000
 800273c:	fffeffff 	.word	0xfffeffff
 8002740:	fffbffff 	.word	0xfffbffff
 8002744:	ffff80ff 	.word	0xffff80ff
 8002748:	ffffc7ff 	.word	0xffffc7ff
 800274c:	00f42400 	.word	0x00f42400
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004
 8002758:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800275c:	4bb1      	ldr	r3, [pc, #708]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 800275e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	055b      	lsls	r3, r3, #21
 8002764:	4013      	ands	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_RCC_OscConfig+0x360>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x362>
 800276c:	2300      	movs	r3, #0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d011      	beq.n	8002796 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	4bac      	ldr	r3, [pc, #688]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002776:	4bab      	ldr	r3, [pc, #684]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	0549      	lsls	r1, r1, #21
 800277c:	430a      	orrs	r2, r1
 800277e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002780:	4ba8      	ldr	r3, [pc, #672]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	055b      	lsls	r3, r3, #21
 8002788:	4013      	ands	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800278e:	231f      	movs	r3, #31
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002796:	4ba4      	ldr	r3, [pc, #656]	; (8002a28 <HAL_RCC_OscConfig+0x61c>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4013      	ands	r3, r2
 80027a0:	d11a      	bne.n	80027d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027a2:	4ba1      	ldr	r3, [pc, #644]	; (8002a28 <HAL_RCC_OscConfig+0x61c>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4ba0      	ldr	r3, [pc, #640]	; (8002a28 <HAL_RCC_OscConfig+0x61c>)
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	0049      	lsls	r1, r1, #1
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80027b0:	f7fe fcf0 	bl	8001194 <HAL_GetTick>
 80027b4:	0003      	movs	r3, r0
 80027b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ba:	f7fe fceb 	bl	8001194 <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e127      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027cc:	4b96      	ldr	r3, [pc, #600]	; (8002a28 <HAL_RCC_OscConfig+0x61c>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4013      	ands	r3, r2
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x3e2>
 80027e0:	4b90      	ldr	r3, [pc, #576]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 80027e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027e4:	4b8f      	ldr	r3, [pc, #572]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 80027e6:	2101      	movs	r1, #1
 80027e8:	430a      	orrs	r2, r1
 80027ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80027ec:	e01c      	b.n	8002828 <HAL_RCC_OscConfig+0x41c>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x404>
 80027f6:	4b8b      	ldr	r3, [pc, #556]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 80027f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027fa:	4b8a      	ldr	r3, [pc, #552]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 80027fc:	2104      	movs	r1, #4
 80027fe:	430a      	orrs	r2, r1
 8002800:	65da      	str	r2, [r3, #92]	; 0x5c
 8002802:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002804:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002806:	4b87      	ldr	r3, [pc, #540]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002808:	2101      	movs	r1, #1
 800280a:	430a      	orrs	r2, r1
 800280c:	65da      	str	r2, [r3, #92]	; 0x5c
 800280e:	e00b      	b.n	8002828 <HAL_RCC_OscConfig+0x41c>
 8002810:	4b84      	ldr	r3, [pc, #528]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002812:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002814:	4b83      	ldr	r3, [pc, #524]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002816:	2101      	movs	r1, #1
 8002818:	438a      	bics	r2, r1
 800281a:	65da      	str	r2, [r3, #92]	; 0x5c
 800281c:	4b81      	ldr	r3, [pc, #516]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 800281e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002820:	4b80      	ldr	r3, [pc, #512]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002822:	2104      	movs	r1, #4
 8002824:	438a      	bics	r2, r1
 8002826:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d014      	beq.n	800285a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fcb0 	bl	8001194 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002838:	e009      	b.n	800284e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fcab 	bl	8001194 <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	4a79      	ldr	r2, [pc, #484]	; (8002a2c <HAL_RCC_OscConfig+0x620>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0e6      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800284e:	4b75      	ldr	r3, [pc, #468]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	2202      	movs	r2, #2
 8002854:	4013      	ands	r3, r2
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x42e>
 8002858:	e013      	b.n	8002882 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285a:	f7fe fc9b 	bl	8001194 <HAL_GetTick>
 800285e:	0003      	movs	r3, r0
 8002860:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002862:	e009      	b.n	8002878 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002864:	f7fe fc96 	bl	8001194 <HAL_GetTick>
 8002868:	0002      	movs	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	4a6f      	ldr	r2, [pc, #444]	; (8002a2c <HAL_RCC_OscConfig+0x620>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e0d1      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002878:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	2202      	movs	r2, #2
 800287e:	4013      	ands	r3, r2
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002882:	231f      	movs	r3, #31
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800288c:	4b65      	ldr	r3, [pc, #404]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 800288e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002890:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002892:	4967      	ldr	r1, [pc, #412]	; (8002a30 <HAL_RCC_OscConfig+0x624>)
 8002894:	400a      	ands	r2, r1
 8002896:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d100      	bne.n	80028a2 <HAL_RCC_OscConfig+0x496>
 80028a0:	e0bb      	b.n	8002a1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028a2:	4b60      	ldr	r3, [pc, #384]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2238      	movs	r2, #56	; 0x38
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d100      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4a4>
 80028ae:	e07b      	b.n	80029a8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d156      	bne.n	8002966 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b8:	4b5a      	ldr	r3, [pc, #360]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 80028be:	495d      	ldr	r1, [pc, #372]	; (8002a34 <HAL_RCC_OscConfig+0x628>)
 80028c0:	400a      	ands	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe fc66 	bl	8001194 <HAL_GetTick>
 80028c8:	0003      	movs	r3, r0
 80028ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ce:	f7fe fc61 	bl	8001194 <HAL_GetTick>
 80028d2:	0002      	movs	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e09d      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e0:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	049b      	lsls	r3, r3, #18
 80028e8:	4013      	ands	r3, r2
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ec:	4b4d      	ldr	r3, [pc, #308]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a51      	ldr	r2, [pc, #324]	; (8002a38 <HAL_RCC_OscConfig+0x62c>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	0019      	movs	r1, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1a      	ldr	r2, [r3, #32]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002918:	431a      	orrs	r2, r3
 800291a:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 800291c:	430a      	orrs	r2, r1
 800291e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002920:	4b40      	ldr	r3, [pc, #256]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b3f      	ldr	r3, [pc, #252]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002926:	2180      	movs	r1, #128	; 0x80
 8002928:	0449      	lsls	r1, r1, #17
 800292a:	430a      	orrs	r2, r1
 800292c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800292e:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	4b3c      	ldr	r3, [pc, #240]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	0549      	lsls	r1, r1, #21
 8002938:	430a      	orrs	r2, r1
 800293a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fc2a 	bl	8001194 <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002946:	f7fe fc25 	bl	8001194 <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e061      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002958:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	049b      	lsls	r3, r3, #18
 8002960:	4013      	ands	r3, r2
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x53a>
 8002964:	e059      	b.n	8002a1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 800296c:	4931      	ldr	r1, [pc, #196]	; (8002a34 <HAL_RCC_OscConfig+0x628>)
 800296e:	400a      	ands	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7fe fc0f 	bl	8001194 <HAL_GetTick>
 8002976:	0003      	movs	r3, r0
 8002978:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe fc0a 	bl	8001194 <HAL_GetTick>
 8002980:	0002      	movs	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e046      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298e:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	049b      	lsls	r3, r3, #18
 8002996:	4013      	ands	r3, r2
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800299a:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 80029a0:	4926      	ldr	r1, [pc, #152]	; (8002a3c <HAL_RCC_OscConfig+0x630>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	e038      	b.n	8002a1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e033      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_OscConfig+0x618>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2203      	movs	r2, #3
 80029be:	401a      	ands	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d126      	bne.n	8002a16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2270      	movs	r2, #112	; 0x70
 80029cc:	401a      	ands	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d11f      	bne.n	8002a16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	23fe      	movs	r3, #254	; 0xfe
 80029da:	01db      	lsls	r3, r3, #7
 80029dc:	401a      	ands	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d116      	bne.n	8002a16 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	23f8      	movs	r3, #248	; 0xf8
 80029ec:	039b      	lsls	r3, r3, #14
 80029ee:	401a      	ands	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d10e      	bne.n	8002a16 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	23e0      	movs	r3, #224	; 0xe0
 80029fc:	051b      	lsls	r3, r3, #20
 80029fe:	401a      	ands	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	0f5b      	lsrs	r3, r3, #29
 8002a0c:	075a      	lsls	r2, r3, #29
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b008      	add	sp, #32
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40007000 	.word	0x40007000
 8002a2c:	00001388 	.word	0x00001388
 8002a30:	efffffff 	.word	0xefffffff
 8002a34:	feffffff 	.word	0xfeffffff
 8002a38:	11c1808c 	.word	0x11c1808c
 8002a3c:	eefefffc 	.word	0xeefefffc

08002a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0e9      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a54:	4b76      	ldr	r3, [pc, #472]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2207      	movs	r2, #7
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d91e      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b73      	ldr	r3, [pc, #460]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2207      	movs	r2, #7
 8002a68:	4393      	bics	r3, r2
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	4b70      	ldr	r3, [pc, #448]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a74:	f7fe fb8e 	bl	8001194 <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a7c:	e009      	b.n	8002a92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7e:	f7fe fb89 	bl	8001194 <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	4a6a      	ldr	r2, [pc, #424]	; (8002c34 <HAL_RCC_ClockConfig+0x1f4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e0ca      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a92:	4b67      	ldr	r3, [pc, #412]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2207      	movs	r2, #7
 8002a98:	4013      	ands	r3, r2
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1ee      	bne.n	8002a7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d015      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2204      	movs	r2, #4
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d006      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ab4:	4b60      	ldr	r3, [pc, #384]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002aba:	21e0      	movs	r1, #224	; 0xe0
 8002abc:	01c9      	lsls	r1, r1, #7
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac2:	4b5d      	ldr	r3, [pc, #372]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4a5d      	ldr	r2, [pc, #372]	; (8002c3c <HAL_RCC_ClockConfig+0x1fc>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2201      	movs	r2, #1
 8002adc:	4013      	ands	r3, r2
 8002ade:	d057      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae8:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	029b      	lsls	r3, r3, #10
 8002af0:	4013      	ands	r3, r2
 8002af2:	d12b      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e097      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b00:	4b4d      	ldr	r3, [pc, #308]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	049b      	lsls	r3, r3, #18
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d11f      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e08b      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b18:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4013      	ands	r3, r2
 8002b22:	d113      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e07f      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b30:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b34:	2202      	movs	r2, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	d108      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e074      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3e:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e06d      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b4c:	4b3a      	ldr	r3, [pc, #232]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2207      	movs	r2, #7
 8002b52:	4393      	bics	r3, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	4b37      	ldr	r3, [pc, #220]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b60:	f7fe fb18 	bl	8001194 <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b68:	e009      	b.n	8002b7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6a:	f7fe fb13 	bl	8001194 <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	4a2f      	ldr	r2, [pc, #188]	; (8002c34 <HAL_RCC_ClockConfig+0x1f4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e054      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	4b2e      	ldr	r3, [pc, #184]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2238      	movs	r2, #56	; 0x38
 8002b84:	401a      	ands	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d1ec      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2207      	movs	r2, #7
 8002b96:	4013      	ands	r3, r2
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d21e      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2207      	movs	r2, #7
 8002ba4:	4393      	bics	r3, r2
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bb0:	f7fe faf0 	bl	8001194 <HAL_GetTick>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bb8:	e009      	b.n	8002bce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bba:	f7fe faeb 	bl	8001194 <HAL_GetTick>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	4a1b      	ldr	r2, [pc, #108]	; (8002c34 <HAL_RCC_ClockConfig+0x1f4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e02c      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bce:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2207      	movs	r2, #7
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1ee      	bne.n	8002bba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2204      	movs	r2, #4
 8002be2:	4013      	ands	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4a15      	ldr	r2, [pc, #84]	; (8002c40 <HAL_RCC_ClockConfig+0x200>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002bfa:	f000 f829 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002bfe:	0001      	movs	r1, r0
 8002c00:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <HAL_RCC_ClockConfig+0x1f8>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_RCC_ClockConfig+0x204>)
 8002c0c:	0092      	lsls	r2, r2, #2
 8002c0e:	58d3      	ldr	r3, [r2, r3]
 8002c10:	221f      	movs	r2, #31
 8002c12:	4013      	ands	r3, r2
 8002c14:	000a      	movs	r2, r1
 8002c16:	40da      	lsrs	r2, r3
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x208>)
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_ClockConfig+0x20c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7fe fa5b 	bl	80010dc <HAL_InitTick>
 8002c26:	0003      	movs	r3, r0
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b004      	add	sp, #16
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40022000 	.word	0x40022000
 8002c34:	00001388 	.word	0x00001388
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	fffff0ff 	.word	0xfffff0ff
 8002c40:	ffff8fff 	.word	0xffff8fff
 8002c44:	0800586c 	.word	0x0800586c
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000004 	.word	0x20000004

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c56:	4b3c      	ldr	r3, [pc, #240]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2238      	movs	r2, #56	; 0x38
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d10f      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c60:	4b39      	ldr	r3, [pc, #228]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0adb      	lsrs	r3, r3, #11
 8002c66:	2207      	movs	r2, #7
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	0013      	movs	r3, r2
 8002c70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c72:	6839      	ldr	r1, [r7, #0]
 8002c74:	4835      	ldr	r0, [pc, #212]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c76:	f7fd fa45 	bl	8000104 <__udivsi3>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	e05d      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c80:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2238      	movs	r2, #56	; 0x38
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d102      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c8c:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e054      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2238      	movs	r2, #56	; 0x38
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b10      	cmp	r3, #16
 8002c9c:	d138      	bne.n	8002d10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ca8:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	2207      	movs	r2, #7
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d10d      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	4824      	ldr	r0, [pc, #144]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x100>)
 8002cc0:	f7fd fa20 	bl	8000104 <__udivsi3>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	227f      	movs	r2, #127	; 0x7f
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	434b      	muls	r3, r1
 8002cd4:	617b      	str	r3, [r7, #20]
        break;
 8002cd6:	e00d      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	481c      	ldr	r0, [pc, #112]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cdc:	f7fd fa12 	bl	8000104 <__udivsi3>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	227f      	movs	r2, #127	; 0x7f
 8002cec:	4013      	ands	r3, r2
 8002cee:	434b      	muls	r3, r1
 8002cf0:	617b      	str	r3, [r7, #20]
        break;
 8002cf2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0f5b      	lsrs	r3, r3, #29
 8002cfa:	2207      	movs	r2, #7
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	3301      	adds	r3, #1
 8002d00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	6978      	ldr	r0, [r7, #20]
 8002d06:	f7fd f9fd 	bl	8000104 <__udivsi3>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	e015      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2238      	movs	r2, #56	; 0x38
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d103      	bne.n	8002d24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d24:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2238      	movs	r2, #56	; 0x38
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b18      	cmp	r3, #24
 8002d2e:	d103      	bne.n	8002d38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d30:	23fa      	movs	r3, #250	; 0xfa
 8002d32:	01db      	lsls	r3, r3, #7
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	e001      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d3c:	693b      	ldr	r3, [r7, #16]
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b006      	add	sp, #24
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	00f42400 	.word	0x00f42400
 8002d50:	007a1200 	.word	0x007a1200

08002d54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d58:	4b02      	ldr	r3, [pc, #8]	; (8002d64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	20000000 	.word	0x20000000

08002d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d6c:	f7ff fff2 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8002d70:	0004      	movs	r4, r0
 8002d72:	f7ff fb3f 	bl	80023f4 <LL_RCC_GetAPB1Prescaler>
 8002d76:	0003      	movs	r3, r0
 8002d78:	0b1a      	lsrs	r2, r3, #12
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d7c:	0092      	lsls	r2, r2, #2
 8002d7e:	58d3      	ldr	r3, [r2, r3]
 8002d80:	221f      	movs	r2, #31
 8002d82:	4013      	ands	r3, r2
 8002d84:	40dc      	lsrs	r4, r3
 8002d86:	0023      	movs	r3, r4
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	080058ac 	.word	0x080058ac

08002d94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d9c:	2313      	movs	r3, #19
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002da4:	2312      	movs	r3, #18
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	4013      	ands	r3, r2
 8002db6:	d100      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002db8:	e0a3      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dba:	2011      	movs	r0, #17
 8002dbc:	183b      	adds	r3, r7, r0
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc2:	4ba5      	ldr	r3, [pc, #660]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	055b      	lsls	r3, r3, #21
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d110      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dce:	4ba2      	ldr	r3, [pc, #648]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd2:	4ba1      	ldr	r3, [pc, #644]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0549      	lsls	r1, r1, #21
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ddc:	4b9e      	ldr	r3, [pc, #632]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	055b      	lsls	r3, r3, #21
 8002de4:	4013      	ands	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dea:	183b      	adds	r3, r7, r0
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df0:	4b9a      	ldr	r3, [pc, #616]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b99      	ldr	r3, [pc, #612]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002df6:	2180      	movs	r1, #128	; 0x80
 8002df8:	0049      	lsls	r1, r1, #1
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dfe:	f7fe f9c9 	bl	8001194 <HAL_GetTick>
 8002e02:	0003      	movs	r3, r0
 8002e04:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e06:	e00b      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e08:	f7fe f9c4 	bl	8001194 <HAL_GetTick>
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d904      	bls.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e16:	2313      	movs	r3, #19
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	701a      	strb	r2, [r3, #0]
        break;
 8002e1e:	e005      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e20:	4b8e      	ldr	r3, [pc, #568]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d0ed      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e2c:	2313      	movs	r3, #19
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d154      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e36:	4b88      	ldr	r3, [pc, #544]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e3a:	23c0      	movs	r3, #192	; 0xc0
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4013      	ands	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d019      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d014      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e52:	4b81      	ldr	r3, [pc, #516]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	4a82      	ldr	r2, [pc, #520]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e5c:	4b7e      	ldr	r3, [pc, #504]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e60:	4b7d      	ldr	r3, [pc, #500]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	0249      	lsls	r1, r1, #9
 8002e66:	430a      	orrs	r2, r1
 8002e68:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e6a:	4b7b      	ldr	r3, [pc, #492]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e6e:	4b7a      	ldr	r3, [pc, #488]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e70:	497c      	ldr	r1, [pc, #496]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002e72:	400a      	ands	r2, r1
 8002e74:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e76:	4b78      	ldr	r3, [pc, #480]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	d016      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe f986 	bl	8001194 <HAL_GetTick>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e8c:	e00c      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fe f981 	bl	8001194 <HAL_GetTick>
 8002e92:	0002      	movs	r2, r0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	4a73      	ldr	r2, [pc, #460]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d904      	bls.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002e9e:	2313      	movs	r3, #19
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	701a      	strb	r2, [r3, #0]
            break;
 8002ea6:	e004      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea8:	4b6b      	ldr	r3, [pc, #428]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	2202      	movs	r2, #2
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d0ed      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002eb2:	2313      	movs	r3, #19
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ebc:	4b66      	ldr	r3, [pc, #408]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	4a67      	ldr	r2, [pc, #412]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eca:	4b63      	ldr	r3, [pc, #396]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ed0:	e00c      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ed2:	2312      	movs	r3, #18
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	2213      	movs	r2, #19
 8002ed8:	18ba      	adds	r2, r7, r2
 8002eda:	7812      	ldrb	r2, [r2, #0]
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e005      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	2312      	movs	r3, #18
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2213      	movs	r2, #19
 8002ee6:	18ba      	adds	r2, r7, r2
 8002ee8:	7812      	ldrb	r2, [r2, #0]
 8002eea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eec:	2311      	movs	r3, #17
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef6:	4b58      	ldr	r3, [pc, #352]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002efa:	4b57      	ldr	r3, [pc, #348]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002efc:	495b      	ldr	r1, [pc, #364]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002efe:	400a      	ands	r2, r1
 8002f00:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2201      	movs	r2, #1
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f0c:	4b52      	ldr	r3, [pc, #328]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	2203      	movs	r2, #3
 8002f12:	4393      	bics	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	4b4f      	ldr	r3, [pc, #316]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2210      	movs	r2, #16
 8002f26:	4013      	ands	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f2a:	4b4b      	ldr	r3, [pc, #300]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	4a50      	ldr	r2, [pc, #320]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4013      	ands	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f4a:	4b43      	ldr	r3, [pc, #268]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	4a49      	ldr	r2, [pc, #292]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	4b3f      	ldr	r3, [pc, #252]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4013      	ands	r3, r2
 8002f68:	d009      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6e:	4a42      	ldr	r2, [pc, #264]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	0019      	movs	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	4b37      	ldr	r3, [pc, #220]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2220      	movs	r2, #32
 8002f84:	4013      	ands	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f88:	4b33      	ldr	r3, [pc, #204]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	4a3b      	ldr	r2, [pc, #236]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	01db      	lsls	r3, r3, #7
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d015      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	0899      	lsrs	r1, r3, #2
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	4b28      	ldr	r3, [pc, #160]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	05db      	lsls	r3, r3, #23
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d106      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	4b23      	ldr	r3, [pc, #140]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fcc:	2180      	movs	r1, #128	; 0x80
 8002fce:	0249      	lsls	r1, r1, #9
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	039b      	lsls	r3, r3, #14
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d016      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	4a26      	ldr	r2, [pc, #152]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1a      	ldr	r2, [r3, #32]
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	03db      	lsls	r3, r3, #15
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d106      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003006:	2180      	movs	r1, #128	; 0x80
 8003008:	0449      	lsls	r1, r1, #17
 800300a:	430a      	orrs	r2, r1
 800300c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	4013      	ands	r3, r2
 8003018:	d016      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800301a:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	4a19      	ldr	r2, [pc, #100]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003020:	4013      	ands	r3, r2
 8003022:	0019      	movs	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800302a:	430a      	orrs	r2, r1
 800302c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	01db      	lsls	r3, r3, #7
 8003036:	429a      	cmp	r2, r3
 8003038:	d106      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	0249      	lsls	r1, r1, #9
 8003044:	430a      	orrs	r2, r1
 8003046:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003048:	2312      	movs	r3, #18
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	781b      	ldrb	r3, [r3, #0]
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b006      	add	sp, #24
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
 8003060:	fffffcff 	.word	0xfffffcff
 8003064:	fffeffff 	.word	0xfffeffff
 8003068:	00001388 	.word	0x00001388
 800306c:	efffffff 	.word	0xefffffff
 8003070:	fffff3ff 	.word	0xfffff3ff
 8003074:	fff3ffff 	.word	0xfff3ffff
 8003078:	ffcfffff 	.word	0xffcfffff
 800307c:	ffffcfff 	.word	0xffffcfff
 8003080:	ffbfffff 	.word	0xffbfffff
 8003084:	ffff3fff 	.word	0xffff3fff

08003088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e0a8      	b.n	80031ec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	2382      	movs	r3, #130	; 0x82
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d009      	beq.n	80030c2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	61da      	str	r2, [r3, #28]
 80030b4:	e005      	b.n	80030c2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	225d      	movs	r2, #93	; 0x5d
 80030cc:	5c9b      	ldrb	r3, [r3, r2]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d107      	bne.n	80030e4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	225c      	movs	r2, #92	; 0x5c
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	0018      	movs	r0, r3
 80030e0:	f7fd fd62 	bl	8000ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	225d      	movs	r2, #93	; 0x5d
 80030e8:	2102      	movs	r1, #2
 80030ea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2140      	movs	r1, #64	; 0x40
 80030f8:	438a      	bics	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	23e0      	movs	r3, #224	; 0xe0
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	429a      	cmp	r2, r3
 8003106:	d902      	bls.n	800310e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e002      	b.n	8003114 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	015b      	lsls	r3, r3, #5
 8003112:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	23f0      	movs	r3, #240	; 0xf0
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	429a      	cmp	r2, r3
 800311e:	d008      	beq.n	8003132 <HAL_SPI_Init+0xaa>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	23e0      	movs	r3, #224	; 0xe0
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	429a      	cmp	r2, r3
 800312a:	d002      	beq.n	8003132 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	2382      	movs	r3, #130	; 0x82
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	401a      	ands	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6899      	ldr	r1, [r3, #8]
 8003140:	2384      	movs	r3, #132	; 0x84
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	400b      	ands	r3, r1
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2102      	movs	r1, #2
 800314e:	400b      	ands	r3, r1
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	2101      	movs	r1, #1
 8003158:	400b      	ands	r3, r1
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6999      	ldr	r1, [r3, #24]
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	400b      	ands	r3, r1
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	2138      	movs	r1, #56	; 0x38
 800316e:	400b      	ands	r3, r1
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	2180      	movs	r1, #128	; 0x80
 8003178:	400b      	ands	r3, r1
 800317a:	431a      	orrs	r2, r3
 800317c:	0011      	movs	r1, r2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	019b      	lsls	r3, r3, #6
 8003186:	401a      	ands	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	2204      	movs	r2, #4
 8003198:	401a      	ands	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2110      	movs	r1, #16
 80031a0:	400b      	ands	r3, r1
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	2108      	movs	r1, #8
 80031aa:	400b      	ands	r3, r1
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68d9      	ldr	r1, [r3, #12]
 80031b2:	23f0      	movs	r3, #240	; 0xf0
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	400b      	ands	r3, r1
 80031b8:	431a      	orrs	r2, r3
 80031ba:	0011      	movs	r1, r2
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	015b      	lsls	r3, r3, #5
 80031c2:	401a      	ands	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69da      	ldr	r2, [r3, #28]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4907      	ldr	r1, [pc, #28]	; (80031f4 <HAL_SPI_Init+0x16c>)
 80031d8:	400a      	ands	r2, r1
 80031da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	225d      	movs	r2, #93	; 0x5d
 80031e6:	2101      	movs	r1, #1
 80031e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b004      	add	sp, #16
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	fffff7ff 	.word	0xfffff7ff

080031f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	1dbb      	adds	r3, r7, #6
 8003206:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003208:	231f      	movs	r3, #31
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	225c      	movs	r2, #92	; 0x5c
 8003214:	5c9b      	ldrb	r3, [r3, r2]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_SPI_Transmit+0x26>
 800321a:	2302      	movs	r3, #2
 800321c:	e147      	b.n	80034ae <HAL_SPI_Transmit+0x2b6>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	225c      	movs	r2, #92	; 0x5c
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003226:	f7fd ffb5 	bl	8001194 <HAL_GetTick>
 800322a:	0003      	movs	r3, r0
 800322c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800322e:	2316      	movs	r3, #22
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	1dba      	adds	r2, r7, #6
 8003234:	8812      	ldrh	r2, [r2, #0]
 8003236:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	225d      	movs	r2, #93	; 0x5d
 800323c:	5c9b      	ldrb	r3, [r3, r2]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d004      	beq.n	800324e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003244:	231f      	movs	r3, #31
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2202      	movs	r2, #2
 800324a:	701a      	strb	r2, [r3, #0]
    goto error;
 800324c:	e128      	b.n	80034a0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_SPI_Transmit+0x64>
 8003254:	1dbb      	adds	r3, r7, #6
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800325c:	231f      	movs	r3, #31
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]
    goto error;
 8003264:	e11c      	b.n	80034a0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	225d      	movs	r2, #93	; 0x5d
 800326a:	2103      	movs	r1, #3
 800326c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1dba      	adds	r2, r7, #6
 800327e:	8812      	ldrh	r2, [r2, #0]
 8003280:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1dba      	adds	r2, r7, #6
 8003286:	8812      	ldrh	r2, [r2, #0]
 8003288:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2244      	movs	r2, #68	; 0x44
 8003294:	2100      	movs	r1, #0
 8003296:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2246      	movs	r2, #70	; 0x46
 800329c:	2100      	movs	r1, #0
 800329e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d110      	bne.n	80032da <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2140      	movs	r1, #64	; 0x40
 80032c4:	438a      	bics	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2180      	movs	r1, #128	; 0x80
 80032d4:	01c9      	lsls	r1, r1, #7
 80032d6:	430a      	orrs	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2240      	movs	r2, #64	; 0x40
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b40      	cmp	r3, #64	; 0x40
 80032e6:	d007      	beq.n	80032f8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2140      	movs	r1, #64	; 0x40
 80032f4:	430a      	orrs	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	23e0      	movs	r3, #224	; 0xe0
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	429a      	cmp	r2, r3
 8003302:	d952      	bls.n	80033aa <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <HAL_SPI_Transmit+0x11e>
 800330c:	2316      	movs	r3, #22
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d143      	bne.n	800339e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	881a      	ldrh	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	1c9a      	adds	r2, r3, #2
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800333a:	e030      	b.n	800339e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2202      	movs	r2, #2
 8003344:	4013      	ands	r3, r2
 8003346:	2b02      	cmp	r3, #2
 8003348:	d112      	bne.n	8003370 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	881a      	ldrh	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	1c9a      	adds	r2, r3, #2
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800336e:	e016      	b.n	800339e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003370:	f7fd ff10 	bl	8001194 <HAL_GetTick>
 8003374:	0002      	movs	r2, r0
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d802      	bhi.n	8003386 <HAL_SPI_Transmit+0x18e>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	d102      	bne.n	800338c <HAL_SPI_Transmit+0x194>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d108      	bne.n	800339e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800338c:	231f      	movs	r3, #31
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	2203      	movs	r2, #3
 8003392:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	225d      	movs	r2, #93	; 0x5d
 8003398:	2101      	movs	r1, #1
 800339a:	5499      	strb	r1, [r3, r2]
          goto error;
 800339c:	e080      	b.n	80034a0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1c9      	bne.n	800333c <HAL_SPI_Transmit+0x144>
 80033a8:	e053      	b.n	8003452 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_SPI_Transmit+0x1c4>
 80033b2:	2316      	movs	r3, #22
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d145      	bne.n	8003448 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	7812      	ldrb	r2, [r2, #0]
 80033c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80033e2:	e031      	b.n	8003448 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2202      	movs	r2, #2
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d113      	bne.n	800341a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003418:	e016      	b.n	8003448 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800341a:	f7fd febb 	bl	8001194 <HAL_GetTick>
 800341e:	0002      	movs	r2, r0
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d802      	bhi.n	8003430 <HAL_SPI_Transmit+0x238>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	3301      	adds	r3, #1
 800342e:	d102      	bne.n	8003436 <HAL_SPI_Transmit+0x23e>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d108      	bne.n	8003448 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003436:	231f      	movs	r3, #31
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	2203      	movs	r2, #3
 800343c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	225d      	movs	r2, #93	; 0x5d
 8003442:	2101      	movs	r1, #1
 8003444:	5499      	strb	r1, [r3, r2]
          goto error;
 8003446:	e02b      	b.n	80034a0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1c8      	bne.n	80033e4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	6839      	ldr	r1, [r7, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	0018      	movs	r0, r3
 800345a:	f000 fcef 	bl	8003e3c <SPI_EndRxTxTransaction>
 800345e:	1e03      	subs	r3, r0, #0
 8003460:	d002      	beq.n	8003468 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003470:	2300      	movs	r3, #0
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348a:	2b00      	cmp	r3, #0
 800348c:	d004      	beq.n	8003498 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800348e:	231f      	movs	r3, #31
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e003      	b.n	80034a0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	225d      	movs	r2, #93	; 0x5d
 800349c:	2101      	movs	r1, #1
 800349e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	225c      	movs	r2, #92	; 0x5c
 80034a4:	2100      	movs	r1, #0
 80034a6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80034a8:	231f      	movs	r3, #31
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	781b      	ldrb	r3, [r3, #0]
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b008      	add	sp, #32
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	1dbb      	adds	r3, r7, #6
 80034c6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034c8:	2117      	movs	r1, #23
 80034ca:	187b      	adds	r3, r7, r1
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	225d      	movs	r2, #93	; 0x5d
 80034d4:	5c9b      	ldrb	r3, [r3, r2]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d003      	beq.n	80034e4 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80034dc:	187b      	adds	r3, r7, r1
 80034de:	2202      	movs	r2, #2
 80034e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80034e2:	e12b      	b.n	800373c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	2382      	movs	r3, #130	; 0x82
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d113      	bne.n	8003518 <HAL_SPI_Receive+0x60>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10f      	bne.n	8003518 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	225d      	movs	r2, #93	; 0x5d
 80034fc:	2104      	movs	r1, #4
 80034fe:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003500:	1dbb      	adds	r3, r7, #6
 8003502:	881c      	ldrh	r4, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	0023      	movs	r3, r4
 8003510:	f000 f924 	bl	800375c <HAL_SPI_TransmitReceive>
 8003514:	0003      	movs	r3, r0
 8003516:	e118      	b.n	800374a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	225c      	movs	r2, #92	; 0x5c
 800351c:	5c9b      	ldrb	r3, [r3, r2]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_SPI_Receive+0x6e>
 8003522:	2302      	movs	r3, #2
 8003524:	e111      	b.n	800374a <HAL_SPI_Receive+0x292>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	225c      	movs	r2, #92	; 0x5c
 800352a:	2101      	movs	r1, #1
 800352c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800352e:	f7fd fe31 	bl	8001194 <HAL_GetTick>
 8003532:	0003      	movs	r3, r0
 8003534:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_SPI_Receive+0x8c>
 800353c:	1dbb      	adds	r3, r7, #6
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d104      	bne.n	800354e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003544:	2317      	movs	r3, #23
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	2201      	movs	r2, #1
 800354a:	701a      	strb	r2, [r3, #0]
    goto error;
 800354c:	e0f6      	b.n	800373c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	225d      	movs	r2, #93	; 0x5d
 8003552:	2104      	movs	r1, #4
 8003554:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1dba      	adds	r2, r7, #6
 8003566:	2144      	movs	r1, #68	; 0x44
 8003568:	8812      	ldrh	r2, [r2, #0]
 800356a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1dba      	adds	r2, r7, #6
 8003570:	2146      	movs	r1, #70	; 0x46
 8003572:	8812      	ldrh	r2, [r2, #0]
 8003574:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	23e0      	movs	r3, #224	; 0xe0
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	429a      	cmp	r2, r3
 800359e:	d908      	bls.n	80035b2 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	496a      	ldr	r1, [pc, #424]	; (8003754 <HAL_SPI_Receive+0x29c>)
 80035ac:	400a      	ands	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	e008      	b.n	80035c4 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2180      	movs	r1, #128	; 0x80
 80035be:	0149      	lsls	r1, r1, #5
 80035c0:	430a      	orrs	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d10f      	bne.n	80035f0 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2140      	movs	r1, #64	; 0x40
 80035dc:	438a      	bics	r2, r1
 80035de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	495b      	ldr	r1, [pc, #364]	; (8003758 <HAL_SPI_Receive+0x2a0>)
 80035ec:	400a      	ands	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2240      	movs	r2, #64	; 0x40
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b40      	cmp	r3, #64	; 0x40
 80035fc:	d007      	beq.n	800360e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2140      	movs	r1, #64	; 0x40
 800360a:	430a      	orrs	r2, r1
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	23e0      	movs	r3, #224	; 0xe0
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	429a      	cmp	r2, r3
 8003618:	d900      	bls.n	800361c <HAL_SPI_Receive+0x164>
 800361a:	e071      	b.n	8003700 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800361c:	e035      	b.n	800368a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2201      	movs	r2, #1
 8003626:	4013      	ands	r3, r2
 8003628:	2b01      	cmp	r3, #1
 800362a:	d117      	bne.n	800365c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	330c      	adds	r3, #12
 8003632:	001a      	movs	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	7812      	ldrb	r2, [r2, #0]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2246      	movs	r2, #70	; 0x46
 800364c:	5a9b      	ldrh	r3, [r3, r2]
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b299      	uxth	r1, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2246      	movs	r2, #70	; 0x46
 8003658:	5299      	strh	r1, [r3, r2]
 800365a:	e016      	b.n	800368a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800365c:	f7fd fd9a 	bl	8001194 <HAL_GetTick>
 8003660:	0002      	movs	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d802      	bhi.n	8003672 <HAL_SPI_Receive+0x1ba>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	3301      	adds	r3, #1
 8003670:	d102      	bne.n	8003678 <HAL_SPI_Receive+0x1c0>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d108      	bne.n	800368a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8003678:	2317      	movs	r3, #23
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	2203      	movs	r2, #3
 800367e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	225d      	movs	r2, #93	; 0x5d
 8003684:	2101      	movs	r1, #1
 8003686:	5499      	strb	r1, [r3, r2]
          goto error;
 8003688:	e058      	b.n	800373c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2246      	movs	r2, #70	; 0x46
 800368e:	5a9b      	ldrh	r3, [r3, r2]
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1c3      	bne.n	800361e <HAL_SPI_Receive+0x166>
 8003696:	e039      	b.n	800370c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2201      	movs	r2, #1
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d115      	bne.n	80036d2 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	b292      	uxth	r2, r2
 80036b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	1c9a      	adds	r2, r3, #2
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2246      	movs	r2, #70	; 0x46
 80036c2:	5a9b      	ldrh	r3, [r3, r2]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b299      	uxth	r1, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2246      	movs	r2, #70	; 0x46
 80036ce:	5299      	strh	r1, [r3, r2]
 80036d0:	e016      	b.n	8003700 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d2:	f7fd fd5f 	bl	8001194 <HAL_GetTick>
 80036d6:	0002      	movs	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d802      	bhi.n	80036e8 <HAL_SPI_Receive+0x230>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	3301      	adds	r3, #1
 80036e6:	d102      	bne.n	80036ee <HAL_SPI_Receive+0x236>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d108      	bne.n	8003700 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80036ee:	2317      	movs	r3, #23
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	2203      	movs	r2, #3
 80036f4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	225d      	movs	r2, #93	; 0x5d
 80036fa:	2101      	movs	r1, #1
 80036fc:	5499      	strb	r1, [r3, r2]
          goto error;
 80036fe:	e01d      	b.n	800373c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2246      	movs	r2, #70	; 0x46
 8003704:	5a9b      	ldrh	r3, [r3, r2]
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1c5      	bne.n	8003698 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	6839      	ldr	r1, [r7, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	0018      	movs	r0, r3
 8003714:	f000 fb34 	bl	8003d80 <SPI_EndRxTransaction>
 8003718:	1e03      	subs	r3, r0, #0
 800371a:	d002      	beq.n	8003722 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003726:	2b00      	cmp	r3, #0
 8003728:	d004      	beq.n	8003734 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800372a:	2317      	movs	r3, #23
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e003      	b.n	800373c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	225d      	movs	r2, #93	; 0x5d
 8003738:	2101      	movs	r1, #1
 800373a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	225c      	movs	r2, #92	; 0x5c
 8003740:	2100      	movs	r1, #0
 8003742:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003744:	2317      	movs	r3, #23
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	781b      	ldrb	r3, [r3, #0]
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b007      	add	sp, #28
 8003750:	bd90      	pop	{r4, r7, pc}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	ffffefff 	.word	0xffffefff
 8003758:	ffffbfff 	.word	0xffffbfff

0800375c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	; 0x28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	001a      	movs	r2, r3
 800376a:	1cbb      	adds	r3, r7, #2
 800376c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800376e:	2301      	movs	r3, #1
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003772:	2323      	movs	r3, #35	; 0x23
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	225c      	movs	r2, #92	; 0x5c
 800377e:	5c9b      	ldrb	r3, [r3, r2]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x2c>
 8003784:	2302      	movs	r3, #2
 8003786:	e1c4      	b.n	8003b12 <HAL_SPI_TransmitReceive+0x3b6>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	225c      	movs	r2, #92	; 0x5c
 800378c:	2101      	movs	r1, #1
 800378e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003790:	f7fd fd00 	bl	8001194 <HAL_GetTick>
 8003794:	0003      	movs	r3, r0
 8003796:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003798:	201b      	movs	r0, #27
 800379a:	183b      	adds	r3, r7, r0
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	215d      	movs	r1, #93	; 0x5d
 80037a0:	5c52      	ldrb	r2, [r2, r1]
 80037a2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80037aa:	2312      	movs	r3, #18
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	1cba      	adds	r2, r7, #2
 80037b0:	8812      	ldrh	r2, [r2, #0]
 80037b2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037b4:	183b      	adds	r3, r7, r0
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d011      	beq.n	80037e0 <HAL_SPI_TransmitReceive+0x84>
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	2382      	movs	r3, #130	; 0x82
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d107      	bne.n	80037d6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <HAL_SPI_TransmitReceive+0x7a>
 80037ce:	183b      	adds	r3, r7, r0
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d004      	beq.n	80037e0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80037d6:	2323      	movs	r3, #35	; 0x23
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	2202      	movs	r2, #2
 80037dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80037de:	e191      	b.n	8003b04 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x98>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x98>
 80037ec:	1cbb      	adds	r3, r7, #2
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80037f4:	2323      	movs	r3, #35	; 0x23
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80037fc:	e182      	b.n	8003b04 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	225d      	movs	r2, #93	; 0x5d
 8003802:	5c9b      	ldrb	r3, [r3, r2]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b04      	cmp	r3, #4
 8003808:	d003      	beq.n	8003812 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	225d      	movs	r2, #93	; 0x5d
 800380e:	2105      	movs	r1, #5
 8003810:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1cba      	adds	r2, r7, #2
 8003822:	2146      	movs	r1, #70	; 0x46
 8003824:	8812      	ldrh	r2, [r2, #0]
 8003826:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1cba      	adds	r2, r7, #2
 800382c:	2144      	movs	r1, #68	; 0x44
 800382e:	8812      	ldrh	r2, [r2, #0]
 8003830:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1cba      	adds	r2, r7, #2
 800383c:	8812      	ldrh	r2, [r2, #0]
 800383e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1cba      	adds	r2, r7, #2
 8003844:	8812      	ldrh	r2, [r2, #0]
 8003846:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	23e0      	movs	r3, #224	; 0xe0
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	429a      	cmp	r2, r3
 800385e:	d908      	bls.n	8003872 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	49ac      	ldr	r1, [pc, #688]	; (8003b1c <HAL_SPI_TransmitReceive+0x3c0>)
 800386c:	400a      	ands	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	e008      	b.n	8003884 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2180      	movs	r1, #128	; 0x80
 800387e:	0149      	lsls	r1, r1, #5
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2240      	movs	r2, #64	; 0x40
 800388c:	4013      	ands	r3, r2
 800388e:	2b40      	cmp	r3, #64	; 0x40
 8003890:	d007      	beq.n	80038a2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2140      	movs	r1, #64	; 0x40
 800389e:	430a      	orrs	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	23e0      	movs	r3, #224	; 0xe0
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d800      	bhi.n	80038b0 <HAL_SPI_TransmitReceive+0x154>
 80038ae:	e083      	b.n	80039b8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_SPI_TransmitReceive+0x168>
 80038b8:	2312      	movs	r3, #18
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d000      	beq.n	80038c4 <HAL_SPI_TransmitReceive+0x168>
 80038c2:	e06d      	b.n	80039a0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	881a      	ldrh	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	1c9a      	adds	r2, r3, #2
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038e8:	e05a      	b.n	80039a0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2202      	movs	r2, #2
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d11b      	bne.n	8003930 <HAL_SPI_TransmitReceive+0x1d4>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d016      	beq.n	8003930 <HAL_SPI_TransmitReceive+0x1d4>
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	2b01      	cmp	r3, #1
 8003906:	d113      	bne.n	8003930 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	881a      	ldrh	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	1c9a      	adds	r2, r3, #2
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2201      	movs	r2, #1
 8003938:	4013      	ands	r3, r2
 800393a:	2b01      	cmp	r3, #1
 800393c:	d11c      	bne.n	8003978 <HAL_SPI_TransmitReceive+0x21c>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2246      	movs	r2, #70	; 0x46
 8003942:	5a9b      	ldrh	r3, [r3, r2]
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d016      	beq.n	8003978 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	b292      	uxth	r2, r2
 8003956:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	1c9a      	adds	r2, r3, #2
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2246      	movs	r2, #70	; 0x46
 8003966:	5a9b      	ldrh	r3, [r3, r2]
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b299      	uxth	r1, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2246      	movs	r2, #70	; 0x46
 8003972:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003974:	2301      	movs	r3, #1
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003978:	f7fd fc0c 	bl	8001194 <HAL_GetTick>
 800397c:	0002      	movs	r2, r0
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003984:	429a      	cmp	r2, r3
 8003986:	d80b      	bhi.n	80039a0 <HAL_SPI_TransmitReceive+0x244>
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	3301      	adds	r3, #1
 800398c:	d008      	beq.n	80039a0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800398e:	2323      	movs	r3, #35	; 0x23
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	2203      	movs	r2, #3
 8003994:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	225d      	movs	r2, #93	; 0x5d
 800399a:	2101      	movs	r1, #1
 800399c:	5499      	strb	r1, [r3, r2]
        goto error;
 800399e:	e0b1      	b.n	8003b04 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d19f      	bne.n	80038ea <HAL_SPI_TransmitReceive+0x18e>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2246      	movs	r2, #70	; 0x46
 80039ae:	5a9b      	ldrh	r3, [r3, r2]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d199      	bne.n	80038ea <HAL_SPI_TransmitReceive+0x18e>
 80039b6:	e089      	b.n	8003acc <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_SPI_TransmitReceive+0x270>
 80039c0:	2312      	movs	r3, #18
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d000      	beq.n	80039cc <HAL_SPI_TransmitReceive+0x270>
 80039ca:	e074      	b.n	8003ab6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	7812      	ldrb	r2, [r2, #0]
 80039d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039f2:	e060      	b.n	8003ab6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2202      	movs	r2, #2
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d11c      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x2e0>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d017      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x2e0>
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d114      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2201      	movs	r2, #1
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d11e      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x32c>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2246      	movs	r2, #70	; 0x46
 8003a4e:	5a9b      	ldrh	r3, [r3, r2]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d018      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	7812      	ldrb	r2, [r2, #0]
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2246      	movs	r2, #70	; 0x46
 8003a76:	5a9b      	ldrh	r3, [r3, r2]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b299      	uxth	r1, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2246      	movs	r2, #70	; 0x46
 8003a82:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a84:	2301      	movs	r3, #1
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a88:	f7fd fb84 	bl	8001194 <HAL_GetTick>
 8003a8c:	0002      	movs	r2, r0
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d802      	bhi.n	8003a9e <HAL_SPI_TransmitReceive+0x342>
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	d102      	bne.n	8003aa4 <HAL_SPI_TransmitReceive+0x348>
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d108      	bne.n	8003ab6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003aa4:	2323      	movs	r3, #35	; 0x23
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	225d      	movs	r2, #93	; 0x5d
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	5499      	strb	r1, [r3, r2]
        goto error;
 8003ab4:	e026      	b.n	8003b04 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d199      	bne.n	80039f4 <HAL_SPI_TransmitReceive+0x298>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2246      	movs	r2, #70	; 0x46
 8003ac4:	5a9b      	ldrh	r3, [r3, r2]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d193      	bne.n	80039f4 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 f9b2 	bl	8003e3c <SPI_EndRxTxTransaction>
 8003ad8:	1e03      	subs	r3, r0, #0
 8003ada:	d006      	beq.n	8003aea <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003adc:	2323      	movs	r3, #35	; 0x23
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003af2:	2323      	movs	r3, #35	; 0x23
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	e003      	b.n	8003b04 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	225d      	movs	r2, #93	; 0x5d
 8003b00:	2101      	movs	r1, #1
 8003b02:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	225c      	movs	r2, #92	; 0x5c
 8003b08:	2100      	movs	r1, #0
 8003b0a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003b0c:	2323      	movs	r3, #35	; 0x23
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	781b      	ldrb	r3, [r3, #0]
}
 8003b12:	0018      	movs	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b00a      	add	sp, #40	; 0x28
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	ffffefff 	.word	0xffffefff

08003b20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	1dfb      	adds	r3, r7, #7
 8003b2e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b30:	f7fd fb30 	bl	8001194 <HAL_GetTick>
 8003b34:	0002      	movs	r2, r0
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	18d3      	adds	r3, r2, r3
 8003b3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b40:	f7fd fb28 	bl	8001194 <HAL_GetTick>
 8003b44:	0003      	movs	r3, r0
 8003b46:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b48:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	015b      	lsls	r3, r3, #5
 8003b4e:	0d1b      	lsrs	r3, r3, #20
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	4353      	muls	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b56:	e058      	b.n	8003c0a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	d055      	beq.n	8003c0a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b5e:	f7fd fb19 	bl	8001194 <HAL_GetTick>
 8003b62:	0002      	movs	r2, r0
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d902      	bls.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d142      	bne.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	21e0      	movs	r1, #224	; 0xe0
 8003b80:	438a      	bics	r2, r1
 8003b82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	2382      	movs	r3, #130	; 0x82
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d113      	bne.n	8003bb8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d005      	beq.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d107      	bne.n	8003bb8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2140      	movs	r1, #64	; 0x40
 8003bb4:	438a      	bics	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	019b      	lsls	r3, r3, #6
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d110      	bne.n	8003be6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	491a      	ldr	r1, [pc, #104]	; (8003c38 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003bd0:	400a      	ands	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2180      	movs	r1, #128	; 0x80
 8003be0:	0189      	lsls	r1, r1, #6
 8003be2:	430a      	orrs	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	225d      	movs	r2, #93	; 0x5d
 8003bea:	2101      	movs	r1, #1
 8003bec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	225c      	movs	r2, #92	; 0x5c
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e017      	b.n	8003c2a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	4013      	ands	r3, r2
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	425a      	negs	r2, r3
 8003c1a:	4153      	adcs	r3, r2
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	001a      	movs	r2, r3
 8003c20:	1dfb      	adds	r3, r7, #7
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d197      	bne.n	8003b58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b008      	add	sp, #32
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	20000000 	.word	0x20000000
 8003c38:	ffffdfff 	.word	0xffffdfff

08003c3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c4a:	2317      	movs	r3, #23
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c52:	f7fd fa9f 	bl	8001194 <HAL_GetTick>
 8003c56:	0002      	movs	r2, r0
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	18d3      	adds	r3, r2, r3
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c62:	f7fd fa97 	bl	8001194 <HAL_GetTick>
 8003c66:	0003      	movs	r3, r0
 8003c68:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c72:	4b41      	ldr	r3, [pc, #260]	; (8003d78 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	0013      	movs	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	189b      	adds	r3, r3, r2
 8003c7c:	00da      	lsls	r2, r3, #3
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	0d1b      	lsrs	r3, r3, #20
 8003c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c84:	4353      	muls	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c88:	e068      	b.n	8003d5c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	23c0      	movs	r3, #192	; 0xc0
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d10a      	bne.n	8003caa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d107      	bne.n	8003caa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	2117      	movs	r1, #23
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ca6:	187b      	adds	r3, r7, r1
 8003ca8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	3301      	adds	r3, #1
 8003cae:	d055      	beq.n	8003d5c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cb0:	f7fd fa70 	bl	8001194 <HAL_GetTick>
 8003cb4:	0002      	movs	r2, r0
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d902      	bls.n	8003cc6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d142      	bne.n	8003d4c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	21e0      	movs	r1, #224	; 0xe0
 8003cd2:	438a      	bics	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	2382      	movs	r3, #130	; 0x82
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d113      	bne.n	8003d0a <SPI_WaitFifoStateUntilTimeout+0xce>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d005      	beq.n	8003cfa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d107      	bne.n	8003d0a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2140      	movs	r1, #64	; 0x40
 8003d06:	438a      	bics	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	019b      	lsls	r3, r3, #6
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d110      	bne.n	8003d38 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4916      	ldr	r1, [pc, #88]	; (8003d7c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003d22:	400a      	ands	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	0189      	lsls	r1, r1, #6
 8003d34:	430a      	orrs	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	225d      	movs	r2, #93	; 0x5d
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	225c      	movs	r2, #92	; 0x5c
 8003d44:	2100      	movs	r1, #0
 8003d46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e010      	b.n	8003d6e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	4013      	ands	r3, r2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d18e      	bne.n	8003c8a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	0018      	movs	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b00a      	add	sp, #40	; 0x28
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	20000000 	.word	0x20000000
 8003d7c:	ffffdfff 	.word	0xffffdfff

08003d80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	2382      	movs	r3, #130	; 0x82
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d113      	bne.n	8003dc0 <SPI_EndRxTransaction+0x40>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	2380      	movs	r3, #128	; 0x80
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d005      	beq.n	8003db0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d107      	bne.n	8003dc0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2140      	movs	r1, #64	; 0x40
 8003dbc:	438a      	bics	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	0013      	movs	r3, r2
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	f7ff fea7 	bl	8003b20 <SPI_WaitFlagStateUntilTimeout>
 8003dd2:	1e03      	subs	r3, r0, #0
 8003dd4:	d007      	beq.n	8003de6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dda:	2220      	movs	r2, #32
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e026      	b.n	8003e34 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	2382      	movs	r3, #130	; 0x82
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d11f      	bne.n	8003e32 <SPI_EndRxTransaction+0xb2>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d005      	beq.n	8003e0a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d113      	bne.n	8003e32 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	23c0      	movs	r3, #192	; 0xc0
 8003e0e:	00d9      	lsls	r1, r3, #3
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	0013      	movs	r3, r2
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f7ff ff0f 	bl	8003c3c <SPI_WaitFifoStateUntilTimeout>
 8003e1e:	1e03      	subs	r3, r0, #0
 8003e20:	d007      	beq.n	8003e32 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e26:	2220      	movs	r2, #32
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e000      	b.n	8003e34 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	0018      	movs	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b004      	add	sp, #16
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	23c0      	movs	r3, #192	; 0xc0
 8003e4c:	0159      	lsls	r1, r3, #5
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	0013      	movs	r3, r2
 8003e56:	2200      	movs	r2, #0
 8003e58:	f7ff fef0 	bl	8003c3c <SPI_WaitFifoStateUntilTimeout>
 8003e5c:	1e03      	subs	r3, r0, #0
 8003e5e:	d007      	beq.n	8003e70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e64:	2220      	movs	r2, #32
 8003e66:	431a      	orrs	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e027      	b.n	8003ec0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	0013      	movs	r3, r2
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2180      	movs	r1, #128	; 0x80
 8003e7e:	f7ff fe4f 	bl	8003b20 <SPI_WaitFlagStateUntilTimeout>
 8003e82:	1e03      	subs	r3, r0, #0
 8003e84:	d007      	beq.n	8003e96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e014      	b.n	8003ec0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	23c0      	movs	r3, #192	; 0xc0
 8003e9a:	00d9      	lsls	r1, r3, #3
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	0013      	movs	r3, r2
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f7ff fec9 	bl	8003c3c <SPI_WaitFifoStateUntilTimeout>
 8003eaa:	1e03      	subs	r3, r0, #0
 8003eac:	d007      	beq.n	8003ebe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e000      	b.n	8003ec0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b004      	add	sp, #16
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e04a      	b.n	8003f70 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	223d      	movs	r2, #61	; 0x3d
 8003ede:	5c9b      	ldrb	r3, [r3, r2]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d107      	bne.n	8003ef6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	223c      	movs	r2, #60	; 0x3c
 8003eea:	2100      	movs	r1, #0
 8003eec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f7fc ffbf 	bl	8000e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	223d      	movs	r2, #61	; 0x3d
 8003efa:	2102      	movs	r1, #2
 8003efc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3304      	adds	r3, #4
 8003f06:	0019      	movs	r1, r3
 8003f08:	0010      	movs	r0, r2
 8003f0a:	f000 fa87 	bl	800441c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2248      	movs	r2, #72	; 0x48
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	223e      	movs	r2, #62	; 0x3e
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	5499      	strb	r1, [r3, r2]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	223f      	movs	r2, #63	; 0x3f
 8003f22:	2101      	movs	r1, #1
 8003f24:	5499      	strb	r1, [r3, r2]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2240      	movs	r2, #64	; 0x40
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	5499      	strb	r1, [r3, r2]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2241      	movs	r2, #65	; 0x41
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2242      	movs	r2, #66	; 0x42
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	5499      	strb	r1, [r3, r2]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2243      	movs	r2, #67	; 0x43
 8003f42:	2101      	movs	r1, #1
 8003f44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2244      	movs	r2, #68	; 0x44
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	5499      	strb	r1, [r3, r2]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2245      	movs	r2, #69	; 0x45
 8003f52:	2101      	movs	r1, #1
 8003f54:	5499      	strb	r1, [r3, r2]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2246      	movs	r2, #70	; 0x46
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	5499      	strb	r1, [r3, r2]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2247      	movs	r2, #71	; 0x47
 8003f62:	2101      	movs	r1, #1
 8003f64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	223d      	movs	r2, #61	; 0x3d
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b002      	add	sp, #8
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	223d      	movs	r2, #61	; 0x3d
 8003f84:	5c9b      	ldrb	r3, [r3, r2]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d001      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e03d      	b.n	800400c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	223d      	movs	r2, #61	; 0x3d
 8003f94:	2102      	movs	r1, #2
 8003f96:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a19      	ldr	r2, [pc, #100]	; (8004014 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0x50>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	05db      	lsls	r3, r3, #23
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d004      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0x50>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a15      	ldr	r2, [pc, #84]	; (8004018 <HAL_TIM_Base_Start_IT+0xa0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d116      	bne.n	8003ff6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	4a13      	ldr	r2, [pc, #76]	; (800401c <HAL_TIM_Base_Start_IT+0xa4>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b06      	cmp	r3, #6
 8003fd8:	d016      	beq.n	8004008 <HAL_TIM_Base_Start_IT+0x90>
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	025b      	lsls	r3, r3, #9
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d011      	beq.n	8004008 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2101      	movs	r1, #1
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff4:	e008      	b.n	8004008 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2101      	movs	r1, #1
 8004002:	430a      	orrs	r2, r1
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e000      	b.n	800400a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004008:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b004      	add	sp, #16
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40000400 	.word	0x40000400
 800401c:	00010007 	.word	0x00010007

08004020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2202      	movs	r2, #2
 800403c:	4013      	ands	r3, r2
 800403e:	d021      	beq.n	8004084 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2202      	movs	r2, #2
 8004044:	4013      	ands	r3, r2
 8004046:	d01d      	beq.n	8004084 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2203      	movs	r2, #3
 800404e:	4252      	negs	r2, r2
 8004050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2203      	movs	r2, #3
 8004060:	4013      	ands	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	0018      	movs	r0, r3
 8004068:	f000 f9c0 	bl	80043ec <HAL_TIM_IC_CaptureCallback>
 800406c:	e007      	b.n	800407e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	0018      	movs	r0, r3
 8004072:	f000 f9b3 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f000 f9bf 	bl	80043fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2204      	movs	r2, #4
 8004088:	4013      	ands	r3, r2
 800408a:	d022      	beq.n	80040d2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2204      	movs	r2, #4
 8004090:	4013      	ands	r3, r2
 8004092:	d01e      	beq.n	80040d2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2205      	movs	r2, #5
 800409a:	4252      	negs	r2, r2
 800409c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	23c0      	movs	r3, #192	; 0xc0
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4013      	ands	r3, r2
 80040b0:	d004      	beq.n	80040bc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 f999 	bl	80043ec <HAL_TIM_IC_CaptureCallback>
 80040ba:	e007      	b.n	80040cc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	0018      	movs	r0, r3
 80040c0:	f000 f98c 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 f998 	bl	80043fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2208      	movs	r2, #8
 80040d6:	4013      	ands	r3, r2
 80040d8:	d021      	beq.n	800411e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2208      	movs	r2, #8
 80040de:	4013      	ands	r3, r2
 80040e0:	d01d      	beq.n	800411e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2209      	movs	r2, #9
 80040e8:	4252      	negs	r2, r2
 80040ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2204      	movs	r2, #4
 80040f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	2203      	movs	r2, #3
 80040fa:	4013      	ands	r3, r2
 80040fc:	d004      	beq.n	8004108 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	0018      	movs	r0, r3
 8004102:	f000 f973 	bl	80043ec <HAL_TIM_IC_CaptureCallback>
 8004106:	e007      	b.n	8004118 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	0018      	movs	r0, r3
 800410c:	f000 f966 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	0018      	movs	r0, r3
 8004114:	f000 f972 	bl	80043fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2210      	movs	r2, #16
 8004122:	4013      	ands	r3, r2
 8004124:	d022      	beq.n	800416c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2210      	movs	r2, #16
 800412a:	4013      	ands	r3, r2
 800412c:	d01e      	beq.n	800416c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2211      	movs	r2, #17
 8004134:	4252      	negs	r2, r2
 8004136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2208      	movs	r2, #8
 800413c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	23c0      	movs	r3, #192	; 0xc0
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4013      	ands	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	0018      	movs	r0, r3
 8004150:	f000 f94c 	bl	80043ec <HAL_TIM_IC_CaptureCallback>
 8004154:	e007      	b.n	8004166 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	0018      	movs	r0, r3
 800415a:	f000 f93f 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	0018      	movs	r0, r3
 8004162:	f000 f94b 	bl	80043fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2201      	movs	r2, #1
 8004170:	4013      	ands	r3, r2
 8004172:	d00c      	beq.n	800418e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	4013      	ands	r3, r2
 800417a:	d008      	beq.n	800418e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2202      	movs	r2, #2
 8004182:	4252      	negs	r2, r2
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	0018      	movs	r0, r3
 800418a:	f7fc fc77 	bl	8000a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2280      	movs	r2, #128	; 0x80
 8004192:	4013      	ands	r3, r2
 8004194:	d104      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	019b      	lsls	r3, r3, #6
 800419c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800419e:	d00b      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2280      	movs	r2, #128	; 0x80
 80041a4:	4013      	ands	r3, r2
 80041a6:	d007      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1e      	ldr	r2, [pc, #120]	; (8004228 <HAL_TIM_IRQHandler+0x208>)
 80041ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	0018      	movs	r0, r3
 80041b4:	f000 fac2 	bl	800473c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	4013      	ands	r3, r2
 80041c0:	d00b      	beq.n	80041da <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2280      	movs	r2, #128	; 0x80
 80041c6:	4013      	ands	r3, r2
 80041c8:	d007      	beq.n	80041da <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a17      	ldr	r2, [pc, #92]	; (800422c <HAL_TIM_IRQHandler+0x20c>)
 80041d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	0018      	movs	r0, r3
 80041d6:	f000 fab9 	bl	800474c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2240      	movs	r2, #64	; 0x40
 80041de:	4013      	ands	r3, r2
 80041e0:	d00c      	beq.n	80041fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2240      	movs	r2, #64	; 0x40
 80041e6:	4013      	ands	r3, r2
 80041e8:	d008      	beq.n	80041fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2241      	movs	r2, #65	; 0x41
 80041f0:	4252      	negs	r2, r2
 80041f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 f908 	bl	800440c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2220      	movs	r2, #32
 8004200:	4013      	ands	r3, r2
 8004202:	d00c      	beq.n	800421e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	4013      	ands	r3, r2
 800420a:	d008      	beq.n	800421e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2221      	movs	r2, #33	; 0x21
 8004212:	4252      	negs	r2, r2
 8004214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0018      	movs	r0, r3
 800421a:	f000 fa87 	bl	800472c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	b004      	add	sp, #16
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	ffffdf7f 	.word	0xffffdf7f
 800422c:	fffffeff 	.word	0xfffffeff

08004230 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	230f      	movs	r3, #15
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	223c      	movs	r2, #60	; 0x3c
 8004246:	5c9b      	ldrb	r3, [r3, r2]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_TIM_ConfigClockSource+0x20>
 800424c:	2302      	movs	r3, #2
 800424e:	e0bc      	b.n	80043ca <HAL_TIM_ConfigClockSource+0x19a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	223c      	movs	r2, #60	; 0x3c
 8004254:	2101      	movs	r1, #1
 8004256:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	223d      	movs	r2, #61	; 0x3d
 800425c:	2102      	movs	r1, #2
 800425e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4a5a      	ldr	r2, [pc, #360]	; (80043d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800426c:	4013      	ands	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4a59      	ldr	r2, [pc, #356]	; (80043d8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004274:	4013      	ands	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2280      	movs	r2, #128	; 0x80
 8004286:	0192      	lsls	r2, r2, #6
 8004288:	4293      	cmp	r3, r2
 800428a:	d040      	beq.n	800430e <HAL_TIM_ConfigClockSource+0xde>
 800428c:	2280      	movs	r2, #128	; 0x80
 800428e:	0192      	lsls	r2, r2, #6
 8004290:	4293      	cmp	r3, r2
 8004292:	d900      	bls.n	8004296 <HAL_TIM_ConfigClockSource+0x66>
 8004294:	e088      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 8004296:	2280      	movs	r2, #128	; 0x80
 8004298:	0152      	lsls	r2, r2, #5
 800429a:	4293      	cmp	r3, r2
 800429c:	d100      	bne.n	80042a0 <HAL_TIM_ConfigClockSource+0x70>
 800429e:	e088      	b.n	80043b2 <HAL_TIM_ConfigClockSource+0x182>
 80042a0:	2280      	movs	r2, #128	; 0x80
 80042a2:	0152      	lsls	r2, r2, #5
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d900      	bls.n	80042aa <HAL_TIM_ConfigClockSource+0x7a>
 80042a8:	e07e      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042aa:	2b70      	cmp	r3, #112	; 0x70
 80042ac:	d018      	beq.n	80042e0 <HAL_TIM_ConfigClockSource+0xb0>
 80042ae:	d900      	bls.n	80042b2 <HAL_TIM_ConfigClockSource+0x82>
 80042b0:	e07a      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042b2:	2b60      	cmp	r3, #96	; 0x60
 80042b4:	d04f      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0x126>
 80042b6:	d900      	bls.n	80042ba <HAL_TIM_ConfigClockSource+0x8a>
 80042b8:	e076      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042ba:	2b50      	cmp	r3, #80	; 0x50
 80042bc:	d03b      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x106>
 80042be:	d900      	bls.n	80042c2 <HAL_TIM_ConfigClockSource+0x92>
 80042c0:	e072      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042c2:	2b40      	cmp	r3, #64	; 0x40
 80042c4:	d057      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0x146>
 80042c6:	d900      	bls.n	80042ca <HAL_TIM_ConfigClockSource+0x9a>
 80042c8:	e06e      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042ca:	2b30      	cmp	r3, #48	; 0x30
 80042cc:	d063      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x166>
 80042ce:	d86b      	bhi.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d060      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x166>
 80042d4:	d868      	bhi.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d05d      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x166>
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d05b      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x166>
 80042de:	e063      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042f0:	f000 f994 	bl	800461c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2277      	movs	r2, #119	; 0x77
 8004300:	4313      	orrs	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	609a      	str	r2, [r3, #8]
      break;
 800430c:	e052      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800431e:	f000 f97d 	bl	800461c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2180      	movs	r1, #128	; 0x80
 800432e:	01c9      	lsls	r1, r1, #7
 8004330:	430a      	orrs	r2, r1
 8004332:	609a      	str	r2, [r3, #8]
      break;
 8004334:	e03e      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004342:	001a      	movs	r2, r3
 8004344:	f000 f8ee 	bl	8004524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2150      	movs	r1, #80	; 0x50
 800434e:	0018      	movs	r0, r3
 8004350:	f000 f948 	bl	80045e4 <TIM_ITRx_SetConfig>
      break;
 8004354:	e02e      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004362:	001a      	movs	r2, r3
 8004364:	f000 f90c 	bl	8004580 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2160      	movs	r1, #96	; 0x60
 800436e:	0018      	movs	r0, r3
 8004370:	f000 f938 	bl	80045e4 <TIM_ITRx_SetConfig>
      break;
 8004374:	e01e      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004382:	001a      	movs	r2, r3
 8004384:	f000 f8ce 	bl	8004524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2140      	movs	r1, #64	; 0x40
 800438e:	0018      	movs	r0, r3
 8004390:	f000 f928 	bl	80045e4 <TIM_ITRx_SetConfig>
      break;
 8004394:	e00e      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	0019      	movs	r1, r3
 80043a0:	0010      	movs	r0, r2
 80043a2:	f000 f91f 	bl	80045e4 <TIM_ITRx_SetConfig>
      break;
 80043a6:	e005      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80043a8:	230f      	movs	r3, #15
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
      break;
 80043b0:	e000      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80043b2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	223d      	movs	r2, #61	; 0x3d
 80043b8:	2101      	movs	r1, #1
 80043ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	223c      	movs	r2, #60	; 0x3c
 80043c0:	2100      	movs	r1, #0
 80043c2:	5499      	strb	r1, [r3, r2]

  return status;
 80043c4:	230f      	movs	r3, #15
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	781b      	ldrb	r3, [r3, #0]
}
 80043ca:	0018      	movs	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b004      	add	sp, #16
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	ffceff88 	.word	0xffceff88
 80043d8:	ffff00ff 	.word	0xffff00ff

080043dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e4:	46c0      	nop			; (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b002      	add	sp, #8
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	b002      	add	sp, #8
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	46bd      	mov	sp, r7
 8004418:	b002      	add	sp, #8
 800441a:	bd80      	pop	{r7, pc}

0800441c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a37      	ldr	r2, [pc, #220]	; (800450c <TIM_Base_SetConfig+0xf0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d008      	beq.n	8004446 <TIM_Base_SetConfig+0x2a>
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	05db      	lsls	r3, r3, #23
 800443a:	429a      	cmp	r2, r3
 800443c:	d003      	beq.n	8004446 <TIM_Base_SetConfig+0x2a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a33      	ldr	r2, [pc, #204]	; (8004510 <TIM_Base_SetConfig+0xf4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d108      	bne.n	8004458 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2270      	movs	r2, #112	; 0x70
 800444a:	4393      	bics	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a2c      	ldr	r2, [pc, #176]	; (800450c <TIM_Base_SetConfig+0xf0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d014      	beq.n	800448a <TIM_Base_SetConfig+0x6e>
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	05db      	lsls	r3, r3, #23
 8004466:	429a      	cmp	r2, r3
 8004468:	d00f      	beq.n	800448a <TIM_Base_SetConfig+0x6e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a28      	ldr	r2, [pc, #160]	; (8004510 <TIM_Base_SetConfig+0xf4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00b      	beq.n	800448a <TIM_Base_SetConfig+0x6e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a27      	ldr	r2, [pc, #156]	; (8004514 <TIM_Base_SetConfig+0xf8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d007      	beq.n	800448a <TIM_Base_SetConfig+0x6e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a26      	ldr	r2, [pc, #152]	; (8004518 <TIM_Base_SetConfig+0xfc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d003      	beq.n	800448a <TIM_Base_SetConfig+0x6e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a25      	ldr	r2, [pc, #148]	; (800451c <TIM_Base_SetConfig+0x100>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d108      	bne.n	800449c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4a24      	ldr	r2, [pc, #144]	; (8004520 <TIM_Base_SetConfig+0x104>)
 800448e:	4013      	ands	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2280      	movs	r2, #128	; 0x80
 80044a0:	4393      	bics	r3, r2
 80044a2:	001a      	movs	r2, r3
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a11      	ldr	r2, [pc, #68]	; (800450c <TIM_Base_SetConfig+0xf0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d007      	beq.n	80044da <TIM_Base_SetConfig+0xbe>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a12      	ldr	r2, [pc, #72]	; (8004518 <TIM_Base_SetConfig+0xfc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d003      	beq.n	80044da <TIM_Base_SetConfig+0xbe>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a11      	ldr	r2, [pc, #68]	; (800451c <TIM_Base_SetConfig+0x100>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d103      	bne.n	80044e2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2201      	movs	r2, #1
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d106      	bne.n	8004502 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2201      	movs	r2, #1
 80044fa:	4393      	bics	r3, r2
 80044fc:	001a      	movs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	611a      	str	r2, [r3, #16]
  }
}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	46bd      	mov	sp, r7
 8004506:	b004      	add	sp, #16
 8004508:	bd80      	pop	{r7, pc}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40000400 	.word	0x40000400
 8004514:	40002000 	.word	0x40002000
 8004518:	40014400 	.word	0x40014400
 800451c:	40014800 	.word	0x40014800
 8004520:	fffffcff 	.word	0xfffffcff

08004524 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	2201      	movs	r2, #1
 800453c:	4393      	bics	r3, r2
 800453e:	001a      	movs	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	22f0      	movs	r2, #240	; 0xf0
 800454e:	4393      	bics	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	220a      	movs	r2, #10
 8004560:	4393      	bics	r3, r2
 8004562:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	621a      	str	r2, [r3, #32]
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	b006      	add	sp, #24
 800457e:	bd80      	pop	{r7, pc}

08004580 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	2210      	movs	r2, #16
 8004598:	4393      	bics	r3, r2
 800459a:	001a      	movs	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4a0d      	ldr	r2, [pc, #52]	; (80045e0 <TIM_TI2_ConfigInputStage+0x60>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	031b      	lsls	r3, r3, #12
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	22a0      	movs	r2, #160	; 0xa0
 80045bc:	4393      	bics	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	46bd      	mov	sp, r7
 80045da:	b006      	add	sp, #24
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	ffff0fff 	.word	0xffff0fff

080045e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a08      	ldr	r2, [pc, #32]	; (8004618 <TIM_ITRx_SetConfig+0x34>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	2207      	movs	r2, #7
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	609a      	str	r2, [r3, #8]
}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b004      	add	sp, #16
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	ffcfff8f 	.word	0xffcfff8f

0800461c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	4a09      	ldr	r2, [pc, #36]	; (8004658 <TIM_ETR_SetConfig+0x3c>)
 8004634:	4013      	ands	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	021a      	lsls	r2, r3, #8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	431a      	orrs	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4313      	orrs	r3, r2
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	609a      	str	r2, [r3, #8]
}
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b006      	add	sp, #24
 8004656:	bd80      	pop	{r7, pc}
 8004658:	ffff00ff 	.word	0xffff00ff

0800465c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	223c      	movs	r2, #60	; 0x3c
 800466a:	5c9b      	ldrb	r3, [r3, r2]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004670:	2302      	movs	r3, #2
 8004672:	e050      	b.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	223c      	movs	r2, #60	; 0x3c
 8004678:	2101      	movs	r1, #1
 800467a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	223d      	movs	r2, #61	; 0x3d
 8004680:	2102      	movs	r1, #2
 8004682:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a21      	ldr	r2, [pc, #132]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d108      	bne.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4a20      	ldr	r2, [pc, #128]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2270      	movs	r2, #112	; 0x70
 80046b4:	4393      	bics	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a14      	ldr	r2, [pc, #80]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00a      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	05db      	lsls	r3, r3, #23
 80046dc:	429a      	cmp	r2, r3
 80046de:	d004      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a10      	ldr	r2, [pc, #64]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d10c      	bne.n	8004704 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	4393      	bics	r3, r2
 80046f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	223d      	movs	r2, #61	; 0x3d
 8004708:	2101      	movs	r1, #1
 800470a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	223c      	movs	r2, #60	; 0x3c
 8004710:	2100      	movs	r1, #0
 8004712:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	0018      	movs	r0, r3
 8004718:	46bd      	mov	sp, r7
 800471a:	b004      	add	sp, #16
 800471c:	bd80      	pop	{r7, pc}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	40012c00 	.word	0x40012c00
 8004724:	ff0fffff 	.word	0xff0fffff
 8004728:	40000400 	.word	0x40000400

0800472c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	b002      	add	sp, #8
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004744:	46c0      	nop			; (mov r8, r8)
 8004746:	46bd      	mov	sp, r7
 8004748:	b002      	add	sp, #8
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004754:	46c0      	nop			; (mov r8, r8)
 8004756:	46bd      	mov	sp, r7
 8004758:	b002      	add	sp, #8
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e04e      	b.n	800480c <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2288      	movs	r2, #136	; 0x88
 8004772:	589b      	ldr	r3, [r3, r2]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d107      	bne.n	8004788 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2284      	movs	r2, #132	; 0x84
 800477c:	2100      	movs	r1, #0
 800477e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	0018      	movs	r0, r3
 8004784:	f7fc fbfe 	bl	8000f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2288      	movs	r2, #136	; 0x88
 800478c:	2124      	movs	r1, #36	; 0x24
 800478e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2101      	movs	r1, #1
 800479c:	438a      	bics	r2, r1
 800479e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 faac 	bl	8004d08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	0018      	movs	r0, r3
 80047b4:	f000 f830 	bl	8004818 <UART_SetConfig>
 80047b8:	0003      	movs	r3, r0
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e024      	b.n	800480c <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4911      	ldr	r1, [pc, #68]	; (8004814 <HAL_HalfDuplex_Init+0xb8>)
 80047ce:	400a      	ands	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2122      	movs	r1, #34	; 0x22
 80047de:	438a      	bics	r2, r1
 80047e0:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2108      	movs	r1, #8
 80047ee:	430a      	orrs	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	430a      	orrs	r2, r1
 8004800:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	0018      	movs	r0, r3
 8004806:	f000 fb33 	bl	8004e70 <UART_CheckIdleState>
 800480a:	0003      	movs	r3, r0
}
 800480c:	0018      	movs	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	b002      	add	sp, #8
 8004812:	bd80      	pop	{r7, pc}
 8004814:	ffffb7ff 	.word	0xffffb7ff

08004818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004818:	b5b0      	push	{r4, r5, r7, lr}
 800481a:	b090      	sub	sp, #64	; 0x40
 800481c:	af00      	add	r7, sp, #0
 800481e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004820:	231a      	movs	r3, #26
 8004822:	2220      	movs	r2, #32
 8004824:	189b      	adds	r3, r3, r2
 8004826:	19db      	adds	r3, r3, r7
 8004828:	2200      	movs	r2, #0
 800482a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	431a      	orrs	r2, r3
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	431a      	orrs	r2, r3
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	4313      	orrs	r3, r2
 8004842:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4ac4      	ldr	r2, [pc, #784]	; (8004b5c <UART_SetConfig+0x344>)
 800484c:	4013      	ands	r3, r2
 800484e:	0019      	movs	r1, r3
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004856:	430b      	orrs	r3, r1
 8004858:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4abf      	ldr	r2, [pc, #764]	; (8004b60 <UART_SetConfig+0x348>)
 8004862:	4013      	ands	r3, r2
 8004864:	0018      	movs	r0, r3
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	68d9      	ldr	r1, [r3, #12]
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	0003      	movs	r3, r0
 8004870:	430b      	orrs	r3, r1
 8004872:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4ab9      	ldr	r2, [pc, #740]	; (8004b64 <UART_SetConfig+0x34c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800488a:	4313      	orrs	r3, r2
 800488c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4ab4      	ldr	r2, [pc, #720]	; (8004b68 <UART_SetConfig+0x350>)
 8004896:	4013      	ands	r3, r2
 8004898:	0019      	movs	r1, r3
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	220f      	movs	r2, #15
 80048ac:	4393      	bics	r3, r2
 80048ae:	0018      	movs	r0, r3
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	0003      	movs	r3, r0
 80048ba:	430b      	orrs	r3, r1
 80048bc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4aaa      	ldr	r2, [pc, #680]	; (8004b6c <UART_SetConfig+0x354>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d131      	bne.n	800492c <UART_SetConfig+0x114>
 80048c8:	4ba9      	ldr	r3, [pc, #676]	; (8004b70 <UART_SetConfig+0x358>)
 80048ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048cc:	2203      	movs	r2, #3
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d01d      	beq.n	8004910 <UART_SetConfig+0xf8>
 80048d4:	d823      	bhi.n	800491e <UART_SetConfig+0x106>
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d00c      	beq.n	80048f4 <UART_SetConfig+0xdc>
 80048da:	d820      	bhi.n	800491e <UART_SetConfig+0x106>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <UART_SetConfig+0xce>
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d00e      	beq.n	8004902 <UART_SetConfig+0xea>
 80048e4:	e01b      	b.n	800491e <UART_SetConfig+0x106>
 80048e6:	231b      	movs	r3, #27
 80048e8:	2220      	movs	r2, #32
 80048ea:	189b      	adds	r3, r3, r2
 80048ec:	19db      	adds	r3, r3, r7
 80048ee:	2200      	movs	r2, #0
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	e071      	b.n	80049d8 <UART_SetConfig+0x1c0>
 80048f4:	231b      	movs	r3, #27
 80048f6:	2220      	movs	r2, #32
 80048f8:	189b      	adds	r3, r3, r2
 80048fa:	19db      	adds	r3, r3, r7
 80048fc:	2202      	movs	r2, #2
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	e06a      	b.n	80049d8 <UART_SetConfig+0x1c0>
 8004902:	231b      	movs	r3, #27
 8004904:	2220      	movs	r2, #32
 8004906:	189b      	adds	r3, r3, r2
 8004908:	19db      	adds	r3, r3, r7
 800490a:	2204      	movs	r2, #4
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	e063      	b.n	80049d8 <UART_SetConfig+0x1c0>
 8004910:	231b      	movs	r3, #27
 8004912:	2220      	movs	r2, #32
 8004914:	189b      	adds	r3, r3, r2
 8004916:	19db      	adds	r3, r3, r7
 8004918:	2208      	movs	r2, #8
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	e05c      	b.n	80049d8 <UART_SetConfig+0x1c0>
 800491e:	231b      	movs	r3, #27
 8004920:	2220      	movs	r2, #32
 8004922:	189b      	adds	r3, r3, r2
 8004924:	19db      	adds	r3, r3, r7
 8004926:	2210      	movs	r2, #16
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	e055      	b.n	80049d8 <UART_SetConfig+0x1c0>
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a90      	ldr	r2, [pc, #576]	; (8004b74 <UART_SetConfig+0x35c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d106      	bne.n	8004944 <UART_SetConfig+0x12c>
 8004936:	231b      	movs	r3, #27
 8004938:	2220      	movs	r2, #32
 800493a:	189b      	adds	r3, r3, r2
 800493c:	19db      	adds	r3, r3, r7
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e049      	b.n	80049d8 <UART_SetConfig+0x1c0>
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a86      	ldr	r2, [pc, #536]	; (8004b64 <UART_SetConfig+0x34c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d13e      	bne.n	80049cc <UART_SetConfig+0x1b4>
 800494e:	4b88      	ldr	r3, [pc, #544]	; (8004b70 <UART_SetConfig+0x358>)
 8004950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004952:	23c0      	movs	r3, #192	; 0xc0
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	4013      	ands	r3, r2
 8004958:	22c0      	movs	r2, #192	; 0xc0
 800495a:	0112      	lsls	r2, r2, #4
 800495c:	4293      	cmp	r3, r2
 800495e:	d027      	beq.n	80049b0 <UART_SetConfig+0x198>
 8004960:	22c0      	movs	r2, #192	; 0xc0
 8004962:	0112      	lsls	r2, r2, #4
 8004964:	4293      	cmp	r3, r2
 8004966:	d82a      	bhi.n	80049be <UART_SetConfig+0x1a6>
 8004968:	2280      	movs	r2, #128	; 0x80
 800496a:	0112      	lsls	r2, r2, #4
 800496c:	4293      	cmp	r3, r2
 800496e:	d011      	beq.n	8004994 <UART_SetConfig+0x17c>
 8004970:	2280      	movs	r2, #128	; 0x80
 8004972:	0112      	lsls	r2, r2, #4
 8004974:	4293      	cmp	r3, r2
 8004976:	d822      	bhi.n	80049be <UART_SetConfig+0x1a6>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <UART_SetConfig+0x16e>
 800497c:	2280      	movs	r2, #128	; 0x80
 800497e:	00d2      	lsls	r2, r2, #3
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <UART_SetConfig+0x18a>
 8004984:	e01b      	b.n	80049be <UART_SetConfig+0x1a6>
 8004986:	231b      	movs	r3, #27
 8004988:	2220      	movs	r2, #32
 800498a:	189b      	adds	r3, r3, r2
 800498c:	19db      	adds	r3, r3, r7
 800498e:	2200      	movs	r2, #0
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	e021      	b.n	80049d8 <UART_SetConfig+0x1c0>
 8004994:	231b      	movs	r3, #27
 8004996:	2220      	movs	r2, #32
 8004998:	189b      	adds	r3, r3, r2
 800499a:	19db      	adds	r3, r3, r7
 800499c:	2202      	movs	r2, #2
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e01a      	b.n	80049d8 <UART_SetConfig+0x1c0>
 80049a2:	231b      	movs	r3, #27
 80049a4:	2220      	movs	r2, #32
 80049a6:	189b      	adds	r3, r3, r2
 80049a8:	19db      	adds	r3, r3, r7
 80049aa:	2204      	movs	r2, #4
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	e013      	b.n	80049d8 <UART_SetConfig+0x1c0>
 80049b0:	231b      	movs	r3, #27
 80049b2:	2220      	movs	r2, #32
 80049b4:	189b      	adds	r3, r3, r2
 80049b6:	19db      	adds	r3, r3, r7
 80049b8:	2208      	movs	r2, #8
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	e00c      	b.n	80049d8 <UART_SetConfig+0x1c0>
 80049be:	231b      	movs	r3, #27
 80049c0:	2220      	movs	r2, #32
 80049c2:	189b      	adds	r3, r3, r2
 80049c4:	19db      	adds	r3, r3, r7
 80049c6:	2210      	movs	r2, #16
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	e005      	b.n	80049d8 <UART_SetConfig+0x1c0>
 80049cc:	231b      	movs	r3, #27
 80049ce:	2220      	movs	r2, #32
 80049d0:	189b      	adds	r3, r3, r2
 80049d2:	19db      	adds	r3, r3, r7
 80049d4:	2210      	movs	r2, #16
 80049d6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a61      	ldr	r2, [pc, #388]	; (8004b64 <UART_SetConfig+0x34c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d000      	beq.n	80049e4 <UART_SetConfig+0x1cc>
 80049e2:	e092      	b.n	8004b0a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049e4:	231b      	movs	r3, #27
 80049e6:	2220      	movs	r2, #32
 80049e8:	189b      	adds	r3, r3, r2
 80049ea:	19db      	adds	r3, r3, r7
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d015      	beq.n	8004a1e <UART_SetConfig+0x206>
 80049f2:	dc18      	bgt.n	8004a26 <UART_SetConfig+0x20e>
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d00d      	beq.n	8004a14 <UART_SetConfig+0x1fc>
 80049f8:	dc15      	bgt.n	8004a26 <UART_SetConfig+0x20e>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <UART_SetConfig+0x1ec>
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d005      	beq.n	8004a0e <UART_SetConfig+0x1f6>
 8004a02:	e010      	b.n	8004a26 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a04:	f7fe f9b0 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a0c:	e014      	b.n	8004a38 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a0e:	4b5a      	ldr	r3, [pc, #360]	; (8004b78 <UART_SetConfig+0x360>)
 8004a10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a12:	e011      	b.n	8004a38 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a14:	f7fe f91c 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a1c:	e00c      	b.n	8004a38 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a24:	e008      	b.n	8004a38 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004a2a:	231a      	movs	r3, #26
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	19db      	adds	r3, r3, r7
 8004a32:	2201      	movs	r2, #1
 8004a34:	701a      	strb	r2, [r3, #0]
        break;
 8004a36:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d100      	bne.n	8004a40 <UART_SetConfig+0x228>
 8004a3e:	e147      	b.n	8004cd0 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a44:	4b4d      	ldr	r3, [pc, #308]	; (8004b7c <UART_SetConfig+0x364>)
 8004a46:	0052      	lsls	r2, r2, #1
 8004a48:	5ad3      	ldrh	r3, [r2, r3]
 8004a4a:	0019      	movs	r1, r3
 8004a4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a4e:	f7fb fb59 	bl	8000104 <__udivsi3>
 8004a52:	0003      	movs	r3, r0
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	0013      	movs	r3, r2
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	189b      	adds	r3, r3, r2
 8004a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d305      	bcc.n	8004a72 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d906      	bls.n	8004a80 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004a72:	231a      	movs	r3, #26
 8004a74:	2220      	movs	r2, #32
 8004a76:	189b      	adds	r3, r3, r2
 8004a78:	19db      	adds	r3, r3, r7
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	e127      	b.n	8004cd0 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a8c:	4b3b      	ldr	r3, [pc, #236]	; (8004b7c <UART_SetConfig+0x364>)
 8004a8e:	0052      	lsls	r2, r2, #1
 8004a90:	5ad3      	ldrh	r3, [r2, r3]
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	69b8      	ldr	r0, [r7, #24]
 8004a9e:	69f9      	ldr	r1, [r7, #28]
 8004aa0:	f7fb fca6 	bl	80003f0 <__aeabi_uldivmod>
 8004aa4:	0002      	movs	r2, r0
 8004aa6:	000b      	movs	r3, r1
 8004aa8:	0e11      	lsrs	r1, r2, #24
 8004aaa:	021d      	lsls	r5, r3, #8
 8004aac:	430d      	orrs	r5, r1
 8004aae:	0214      	lsls	r4, r2, #8
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	68b8      	ldr	r0, [r7, #8]
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	1900      	adds	r0, r0, r4
 8004ac2:	4169      	adcs	r1, r5
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
 8004aca:	2300      	movs	r3, #0
 8004acc:	607b      	str	r3, [r7, #4]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f7fb fc8d 	bl	80003f0 <__aeabi_uldivmod>
 8004ad6:	0002      	movs	r2, r0
 8004ad8:	000b      	movs	r3, r1
 8004ada:	0013      	movs	r3, r2
 8004adc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae0:	23c0      	movs	r3, #192	; 0xc0
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d309      	bcc.n	8004afc <UART_SetConfig+0x2e4>
 8004ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aea:	2380      	movs	r3, #128	; 0x80
 8004aec:	035b      	lsls	r3, r3, #13
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d204      	bcs.n	8004afc <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	e0e9      	b.n	8004cd0 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004afc:	231a      	movs	r3, #26
 8004afe:	2220      	movs	r2, #32
 8004b00:	189b      	adds	r3, r3, r2
 8004b02:	19db      	adds	r3, r3, r7
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
 8004b08:	e0e2      	b.n	8004cd0 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	69da      	ldr	r2, [r3, #28]
 8004b0e:	2380      	movs	r3, #128	; 0x80
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d000      	beq.n	8004b18 <UART_SetConfig+0x300>
 8004b16:	e083      	b.n	8004c20 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004b18:	231b      	movs	r3, #27
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	189b      	adds	r3, r3, r2
 8004b1e:	19db      	adds	r3, r3, r7
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d015      	beq.n	8004b52 <UART_SetConfig+0x33a>
 8004b26:	dc2b      	bgt.n	8004b80 <UART_SetConfig+0x368>
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d00d      	beq.n	8004b48 <UART_SetConfig+0x330>
 8004b2c:	dc28      	bgt.n	8004b80 <UART_SetConfig+0x368>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <UART_SetConfig+0x320>
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d005      	beq.n	8004b42 <UART_SetConfig+0x32a>
 8004b36:	e023      	b.n	8004b80 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b38:	f7fe f916 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8004b3c:	0003      	movs	r3, r0
 8004b3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b40:	e027      	b.n	8004b92 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b42:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <UART_SetConfig+0x360>)
 8004b44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b46:	e024      	b.n	8004b92 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b48:	f7fe f882 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b50:	e01f      	b.n	8004b92 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b52:	2380      	movs	r3, #128	; 0x80
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b58:	e01b      	b.n	8004b92 <UART_SetConfig+0x37a>
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	cfff69f3 	.word	0xcfff69f3
 8004b60:	ffffcfff 	.word	0xffffcfff
 8004b64:	40008000 	.word	0x40008000
 8004b68:	11fff4ff 	.word	0x11fff4ff
 8004b6c:	40013800 	.word	0x40013800
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40004400 	.word	0x40004400
 8004b78:	00f42400 	.word	0x00f42400
 8004b7c:	080058cc 	.word	0x080058cc
      default:
        pclk = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004b84:	231a      	movs	r3, #26
 8004b86:	2220      	movs	r2, #32
 8004b88:	189b      	adds	r3, r3, r2
 8004b8a:	19db      	adds	r3, r3, r7
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	701a      	strb	r2, [r3, #0]
        break;
 8004b90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d100      	bne.n	8004b9a <UART_SetConfig+0x382>
 8004b98:	e09a      	b.n	8004cd0 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b9e:	4b58      	ldr	r3, [pc, #352]	; (8004d00 <UART_SetConfig+0x4e8>)
 8004ba0:	0052      	lsls	r2, r2, #1
 8004ba2:	5ad3      	ldrh	r3, [r2, r3]
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ba8:	f7fb faac 	bl	8000104 <__udivsi3>
 8004bac:	0003      	movs	r3, r0
 8004bae:	005a      	lsls	r2, r3, #1
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	085b      	lsrs	r3, r3, #1
 8004bb6:	18d2      	adds	r2, r2, r3
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	0010      	movs	r0, r2
 8004bc0:	f7fb faa0 	bl	8000104 <__udivsi3>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	2b0f      	cmp	r3, #15
 8004bcc:	d921      	bls.n	8004c12 <UART_SetConfig+0x3fa>
 8004bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	025b      	lsls	r3, r3, #9
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d21c      	bcs.n	8004c12 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	200e      	movs	r0, #14
 8004bde:	2420      	movs	r4, #32
 8004be0:	1903      	adds	r3, r0, r4
 8004be2:	19db      	adds	r3, r3, r7
 8004be4:	210f      	movs	r1, #15
 8004be6:	438a      	bics	r2, r1
 8004be8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	085b      	lsrs	r3, r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2207      	movs	r2, #7
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	b299      	uxth	r1, r3
 8004bf6:	1903      	adds	r3, r0, r4
 8004bf8:	19db      	adds	r3, r3, r7
 8004bfa:	1902      	adds	r2, r0, r4
 8004bfc:	19d2      	adds	r2, r2, r7
 8004bfe:	8812      	ldrh	r2, [r2, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	1902      	adds	r2, r0, r4
 8004c0a:	19d2      	adds	r2, r2, r7
 8004c0c:	8812      	ldrh	r2, [r2, #0]
 8004c0e:	60da      	str	r2, [r3, #12]
 8004c10:	e05e      	b.n	8004cd0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c12:	231a      	movs	r3, #26
 8004c14:	2220      	movs	r2, #32
 8004c16:	189b      	adds	r3, r3, r2
 8004c18:	19db      	adds	r3, r3, r7
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	e057      	b.n	8004cd0 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c20:	231b      	movs	r3, #27
 8004c22:	2220      	movs	r2, #32
 8004c24:	189b      	adds	r3, r3, r2
 8004c26:	19db      	adds	r3, r3, r7
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d015      	beq.n	8004c5a <UART_SetConfig+0x442>
 8004c2e:	dc18      	bgt.n	8004c62 <UART_SetConfig+0x44a>
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d00d      	beq.n	8004c50 <UART_SetConfig+0x438>
 8004c34:	dc15      	bgt.n	8004c62 <UART_SetConfig+0x44a>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <UART_SetConfig+0x428>
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d005      	beq.n	8004c4a <UART_SetConfig+0x432>
 8004c3e:	e010      	b.n	8004c62 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c40:	f7fe f892 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8004c44:	0003      	movs	r3, r0
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c48:	e014      	b.n	8004c74 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c4a:	4b2e      	ldr	r3, [pc, #184]	; (8004d04 <UART_SetConfig+0x4ec>)
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c4e:	e011      	b.n	8004c74 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c50:	f7fd fffe 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8004c54:	0003      	movs	r3, r0
 8004c56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c58:	e00c      	b.n	8004c74 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5a:	2380      	movs	r3, #128	; 0x80
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c60:	e008      	b.n	8004c74 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004c66:	231a      	movs	r3, #26
 8004c68:	2220      	movs	r2, #32
 8004c6a:	189b      	adds	r3, r3, r2
 8004c6c:	19db      	adds	r3, r3, r7
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
        break;
 8004c72:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d02a      	beq.n	8004cd0 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c7e:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <UART_SetConfig+0x4e8>)
 8004c80:	0052      	lsls	r2, r2, #1
 8004c82:	5ad3      	ldrh	r3, [r2, r3]
 8004c84:	0019      	movs	r1, r3
 8004c86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c88:	f7fb fa3c 	bl	8000104 <__udivsi3>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	001a      	movs	r2, r3
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	085b      	lsrs	r3, r3, #1
 8004c96:	18d2      	adds	r2, r2, r3
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	0010      	movs	r0, r2
 8004ca0:	f7fb fa30 	bl	8000104 <__udivsi3>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	d90a      	bls.n	8004cc4 <UART_SetConfig+0x4ac>
 8004cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb0:	2380      	movs	r3, #128	; 0x80
 8004cb2:	025b      	lsls	r3, r3, #9
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d205      	bcs.n	8004cc4 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60da      	str	r2, [r3, #12]
 8004cc2:	e005      	b.n	8004cd0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004cc4:	231a      	movs	r3, #26
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	189b      	adds	r3, r3, r2
 8004cca:	19db      	adds	r3, r3, r7
 8004ccc:	2201      	movs	r2, #1
 8004cce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	226a      	movs	r2, #106	; 0x6a
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	2268      	movs	r2, #104	; 0x68
 8004cdc:	2101      	movs	r1, #1
 8004cde:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	2200      	movs	r2, #0
 8004cea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004cec:	231a      	movs	r3, #26
 8004cee:	2220      	movs	r2, #32
 8004cf0:	189b      	adds	r3, r3, r2
 8004cf2:	19db      	adds	r3, r3, r7
 8004cf4:	781b      	ldrb	r3, [r3, #0]
}
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b010      	add	sp, #64	; 0x40
 8004cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	080058cc 	.word	0x080058cc
 8004d04:	00f42400 	.word	0x00f42400

08004d08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	2208      	movs	r2, #8
 8004d16:	4013      	ands	r3, r2
 8004d18:	d00b      	beq.n	8004d32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a4a      	ldr	r2, [pc, #296]	; (8004e4c <UART_AdvFeatureConfig+0x144>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	0019      	movs	r1, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	2201      	movs	r2, #1
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d00b      	beq.n	8004d54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	4a43      	ldr	r2, [pc, #268]	; (8004e50 <UART_AdvFeatureConfig+0x148>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	0019      	movs	r1, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d58:	2202      	movs	r2, #2
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d00b      	beq.n	8004d76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	4a3b      	ldr	r2, [pc, #236]	; (8004e54 <UART_AdvFeatureConfig+0x14c>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	0019      	movs	r1, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d00b      	beq.n	8004d98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	4a34      	ldr	r2, [pc, #208]	; (8004e58 <UART_AdvFeatureConfig+0x150>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	0019      	movs	r1, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	2210      	movs	r2, #16
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d00b      	beq.n	8004dba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	4a2c      	ldr	r2, [pc, #176]	; (8004e5c <UART_AdvFeatureConfig+0x154>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	0019      	movs	r1, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d00b      	beq.n	8004ddc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	4a25      	ldr	r2, [pc, #148]	; (8004e60 <UART_AdvFeatureConfig+0x158>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	0019      	movs	r1, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	2240      	movs	r2, #64	; 0x40
 8004de2:	4013      	ands	r3, r2
 8004de4:	d01d      	beq.n	8004e22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	4a1d      	ldr	r2, [pc, #116]	; (8004e64 <UART_AdvFeatureConfig+0x15c>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	0019      	movs	r1, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	035b      	lsls	r3, r3, #13
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d10b      	bne.n	8004e22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	4a15      	ldr	r2, [pc, #84]	; (8004e68 <UART_AdvFeatureConfig+0x160>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	0019      	movs	r1, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	2280      	movs	r2, #128	; 0x80
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d00b      	beq.n	8004e44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	4a0e      	ldr	r2, [pc, #56]	; (8004e6c <UART_AdvFeatureConfig+0x164>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	0019      	movs	r1, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	605a      	str	r2, [r3, #4]
  }
}
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	ffff7fff 	.word	0xffff7fff
 8004e50:	fffdffff 	.word	0xfffdffff
 8004e54:	fffeffff 	.word	0xfffeffff
 8004e58:	fffbffff 	.word	0xfffbffff
 8004e5c:	ffffefff 	.word	0xffffefff
 8004e60:	ffffdfff 	.word	0xffffdfff
 8004e64:	ffefffff 	.word	0xffefffff
 8004e68:	ff9fffff 	.word	0xff9fffff
 8004e6c:	fff7ffff 	.word	0xfff7ffff

08004e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b092      	sub	sp, #72	; 0x48
 8004e74:	af02      	add	r7, sp, #8
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2290      	movs	r2, #144	; 0x90
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e80:	f7fc f988 	bl	8001194 <HAL_GetTick>
 8004e84:	0003      	movs	r3, r0
 8004e86:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2208      	movs	r2, #8
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d12d      	bne.n	8004ef2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e98:	2280      	movs	r2, #128	; 0x80
 8004e9a:	0391      	lsls	r1, r2, #14
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4a47      	ldr	r2, [pc, #284]	; (8004fbc <UART_CheckIdleState+0x14c>)
 8004ea0:	9200      	str	r2, [sp, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f000 f88e 	bl	8004fc4 <UART_WaitOnFlagUntilTimeout>
 8004ea8:	1e03      	subs	r3, r0, #0
 8004eaa:	d022      	beq.n	8004ef2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eac:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	f383 8810 	msr	PRIMASK, r3
}
 8004ec0:	46c0      	nop			; (mov r8, r8)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2180      	movs	r1, #128	; 0x80
 8004ece:	438a      	bics	r2, r1
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	f383 8810 	msr	PRIMASK, r3
}
 8004edc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2288      	movs	r2, #136	; 0x88
 8004ee2:	2120      	movs	r1, #32
 8004ee4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2284      	movs	r2, #132	; 0x84
 8004eea:	2100      	movs	r1, #0
 8004eec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e060      	b.n	8004fb4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d146      	bne.n	8004f8e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f02:	2280      	movs	r2, #128	; 0x80
 8004f04:	03d1      	lsls	r1, r2, #15
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4a2c      	ldr	r2, [pc, #176]	; (8004fbc <UART_CheckIdleState+0x14c>)
 8004f0a:	9200      	str	r2, [sp, #0]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f000 f859 	bl	8004fc4 <UART_WaitOnFlagUntilTimeout>
 8004f12:	1e03      	subs	r3, r0, #0
 8004f14:	d03b      	beq.n	8004f8e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f16:	f3ef 8310 	mrs	r3, PRIMASK
 8004f1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f20:	2301      	movs	r3, #1
 8004f22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f383 8810 	msr	PRIMASK, r3
}
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4922      	ldr	r1, [pc, #136]	; (8004fc0 <UART_CheckIdleState+0x150>)
 8004f38:	400a      	ands	r2, r1
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f383 8810 	msr	PRIMASK, r3
}
 8004f46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f48:	f3ef 8310 	mrs	r3, PRIMASK
 8004f4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f4e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f50:	633b      	str	r3, [r7, #48]	; 0x30
 8004f52:	2301      	movs	r3, #1
 8004f54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	f383 8810 	msr	PRIMASK, r3
}
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2101      	movs	r1, #1
 8004f6a:	438a      	bics	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	f383 8810 	msr	PRIMASK, r3
}
 8004f78:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	228c      	movs	r2, #140	; 0x8c
 8004f7e:	2120      	movs	r1, #32
 8004f80:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2284      	movs	r2, #132	; 0x84
 8004f86:	2100      	movs	r1, #0
 8004f88:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e012      	b.n	8004fb4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2288      	movs	r2, #136	; 0x88
 8004f92:	2120      	movs	r1, #32
 8004f94:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	228c      	movs	r2, #140	; 0x8c
 8004f9a:	2120      	movs	r1, #32
 8004f9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2284      	movs	r2, #132	; 0x84
 8004fae:	2100      	movs	r1, #0
 8004fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b010      	add	sp, #64	; 0x40
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	01ffffff 	.word	0x01ffffff
 8004fc0:	fffffedf 	.word	0xfffffedf

08004fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	1dfb      	adds	r3, r7, #7
 8004fd2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd4:	e051      	b.n	800507a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	d04e      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fdc:	f7fc f8da 	bl	8001194 <HAL_GetTick>
 8004fe0:	0002      	movs	r2, r0
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d302      	bcc.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e051      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	4013      	ands	r3, r2
 8005000:	d03b      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b80      	cmp	r3, #128	; 0x80
 8005006:	d038      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b40      	cmp	r3, #64	; 0x40
 800500c:	d035      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	2208      	movs	r2, #8
 8005016:	4013      	ands	r3, r2
 8005018:	2b08      	cmp	r3, #8
 800501a:	d111      	bne.n	8005040 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2208      	movs	r2, #8
 8005022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	0018      	movs	r0, r3
 8005028:	f000 f83c 	bl	80050a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2290      	movs	r2, #144	; 0x90
 8005030:	2108      	movs	r1, #8
 8005032:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2284      	movs	r2, #132	; 0x84
 8005038:	2100      	movs	r1, #0
 800503a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e02c      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	2380      	movs	r3, #128	; 0x80
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	401a      	ands	r2, r3
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	429a      	cmp	r2, r3
 8005052:	d112      	bne.n	800507a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2280      	movs	r2, #128	; 0x80
 800505a:	0112      	lsls	r2, r2, #4
 800505c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	0018      	movs	r0, r3
 8005062:	f000 f81f 	bl	80050a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2290      	movs	r2, #144	; 0x90
 800506a:	2120      	movs	r1, #32
 800506c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2284      	movs	r2, #132	; 0x84
 8005072:	2100      	movs	r1, #0
 8005074:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e00f      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	4013      	ands	r3, r2
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	425a      	negs	r2, r3
 800508a:	4153      	adcs	r3, r2
 800508c:	b2db      	uxtb	r3, r3
 800508e:	001a      	movs	r2, r3
 8005090:	1dfb      	adds	r3, r7, #7
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d09e      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	0018      	movs	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	b004      	add	sp, #16
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08e      	sub	sp, #56	; 0x38
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ac:	f3ef 8310 	mrs	r3, PRIMASK
 80050b0:	617b      	str	r3, [r7, #20]
  return(result);
 80050b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
 80050b6:	2301      	movs	r3, #1
 80050b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	f383 8810 	msr	PRIMASK, r3
}
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4926      	ldr	r1, [pc, #152]	; (8005168 <UART_EndRxTransfer+0xc4>)
 80050ce:	400a      	ands	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f383 8810 	msr	PRIMASK, r3
}
 80050dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050de:	f3ef 8310 	mrs	r3, PRIMASK
 80050e2:	623b      	str	r3, [r7, #32]
  return(result);
 80050e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050e6:	633b      	str	r3, [r7, #48]	; 0x30
 80050e8:	2301      	movs	r3, #1
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	f383 8810 	msr	PRIMASK, r3
}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	491b      	ldr	r1, [pc, #108]	; (800516c <UART_EndRxTransfer+0xc8>)
 8005100:	400a      	ands	r2, r1
 8005102:	609a      	str	r2, [r3, #8]
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	f383 8810 	msr	PRIMASK, r3
}
 800510e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d118      	bne.n	800514a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005118:	f3ef 8310 	mrs	r3, PRIMASK
 800511c:	60bb      	str	r3, [r7, #8]
  return(result);
 800511e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005122:	2301      	movs	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f383 8810 	msr	PRIMASK, r3
}
 800512c:	46c0      	nop			; (mov r8, r8)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2110      	movs	r1, #16
 800513a:	438a      	bics	r2, r1
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f383 8810 	msr	PRIMASK, r3
}
 8005148:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	228c      	movs	r2, #140	; 0x8c
 800514e:	2120      	movs	r1, #32
 8005150:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	46bd      	mov	sp, r7
 8005162:	b00e      	add	sp, #56	; 0x38
 8005164:	bd80      	pop	{r7, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	fffffedf 	.word	0xfffffedf
 800516c:	effffffe 	.word	0xeffffffe

08005170 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2284      	movs	r2, #132	; 0x84
 800517c:	5c9b      	ldrb	r3, [r3, r2]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_UARTEx_DisableFifoMode+0x16>
 8005182:	2302      	movs	r3, #2
 8005184:	e027      	b.n	80051d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2284      	movs	r2, #132	; 0x84
 800518a:	2101      	movs	r1, #1
 800518c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2288      	movs	r2, #136	; 0x88
 8005192:	2124      	movs	r1, #36	; 0x24
 8005194:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2101      	movs	r1, #1
 80051aa:	438a      	bics	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a0b      	ldr	r2, [pc, #44]	; (80051e0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2288      	movs	r2, #136	; 0x88
 80051c8:	2120      	movs	r1, #32
 80051ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2284      	movs	r2, #132	; 0x84
 80051d0:	2100      	movs	r1, #0
 80051d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	0018      	movs	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	b004      	add	sp, #16
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	dfffffff 	.word	0xdfffffff

080051e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2284      	movs	r2, #132	; 0x84
 80051f2:	5c9b      	ldrb	r3, [r3, r2]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e02e      	b.n	800525a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2284      	movs	r2, #132	; 0x84
 8005200:	2101      	movs	r1, #1
 8005202:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2288      	movs	r2, #136	; 0x88
 8005208:	2124      	movs	r1, #36	; 0x24
 800520a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2101      	movs	r1, #1
 8005220:	438a      	bics	r2, r1
 8005222:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	08d9      	lsrs	r1, r3, #3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	0018      	movs	r0, r3
 800523c:	f000 f854 	bl	80052e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2288      	movs	r2, #136	; 0x88
 800524c:	2120      	movs	r1, #32
 800524e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2284      	movs	r2, #132	; 0x84
 8005254:	2100      	movs	r1, #0
 8005256:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	0018      	movs	r0, r3
 800525c:	46bd      	mov	sp, r7
 800525e:	b004      	add	sp, #16
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2284      	movs	r2, #132	; 0x84
 8005272:	5c9b      	ldrb	r3, [r3, r2]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005278:	2302      	movs	r3, #2
 800527a:	e02f      	b.n	80052dc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2284      	movs	r2, #132	; 0x84
 8005280:	2101      	movs	r1, #1
 8005282:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2288      	movs	r2, #136	; 0x88
 8005288:	2124      	movs	r1, #36	; 0x24
 800528a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2101      	movs	r1, #1
 80052a0:	438a      	bics	r2, r1
 80052a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	4a0e      	ldr	r2, [pc, #56]	; (80052e4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	0019      	movs	r1, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	0018      	movs	r0, r3
 80052be:	f000 f813 	bl	80052e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2288      	movs	r2, #136	; 0x88
 80052ce:	2120      	movs	r1, #32
 80052d0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2284      	movs	r2, #132	; 0x84
 80052d6:	2100      	movs	r1, #0
 80052d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	0018      	movs	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	b004      	add	sp, #16
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	f1ffffff 	.word	0xf1ffffff

080052e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d108      	bne.n	800530a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	226a      	movs	r2, #106	; 0x6a
 80052fc:	2101      	movs	r1, #1
 80052fe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2268      	movs	r2, #104	; 0x68
 8005304:	2101      	movs	r1, #1
 8005306:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005308:	e043      	b.n	8005392 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800530a:	260f      	movs	r6, #15
 800530c:	19bb      	adds	r3, r7, r6
 800530e:	2208      	movs	r2, #8
 8005310:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005312:	200e      	movs	r0, #14
 8005314:	183b      	adds	r3, r7, r0
 8005316:	2208      	movs	r2, #8
 8005318:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	0e5b      	lsrs	r3, r3, #25
 8005322:	b2da      	uxtb	r2, r3
 8005324:	240d      	movs	r4, #13
 8005326:	193b      	adds	r3, r7, r4
 8005328:	2107      	movs	r1, #7
 800532a:	400a      	ands	r2, r1
 800532c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	0f5b      	lsrs	r3, r3, #29
 8005336:	b2da      	uxtb	r2, r3
 8005338:	250c      	movs	r5, #12
 800533a:	197b      	adds	r3, r7, r5
 800533c:	2107      	movs	r1, #7
 800533e:	400a      	ands	r2, r1
 8005340:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005342:	183b      	adds	r3, r7, r0
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	197a      	adds	r2, r7, r5
 8005348:	7812      	ldrb	r2, [r2, #0]
 800534a:	4914      	ldr	r1, [pc, #80]	; (800539c <UARTEx_SetNbDataToProcess+0xb4>)
 800534c:	5c8a      	ldrb	r2, [r1, r2]
 800534e:	435a      	muls	r2, r3
 8005350:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005352:	197b      	adds	r3, r7, r5
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	4a12      	ldr	r2, [pc, #72]	; (80053a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005358:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800535a:	0019      	movs	r1, r3
 800535c:	f7fa ff5c 	bl	8000218 <__divsi3>
 8005360:	0003      	movs	r3, r0
 8005362:	b299      	uxth	r1, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	226a      	movs	r2, #106	; 0x6a
 8005368:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800536a:	19bb      	adds	r3, r7, r6
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	193a      	adds	r2, r7, r4
 8005370:	7812      	ldrb	r2, [r2, #0]
 8005372:	490a      	ldr	r1, [pc, #40]	; (800539c <UARTEx_SetNbDataToProcess+0xb4>)
 8005374:	5c8a      	ldrb	r2, [r1, r2]
 8005376:	435a      	muls	r2, r3
 8005378:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800537a:	193b      	adds	r3, r7, r4
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	4a08      	ldr	r2, [pc, #32]	; (80053a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005380:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005382:	0019      	movs	r1, r3
 8005384:	f7fa ff48 	bl	8000218 <__divsi3>
 8005388:	0003      	movs	r3, r0
 800538a:	b299      	uxth	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2268      	movs	r2, #104	; 0x68
 8005390:	5299      	strh	r1, [r3, r2]
}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b005      	add	sp, #20
 8005398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	080058e4 	.word	0x080058e4
 80053a0:	080058ec 	.word	0x080058ec

080053a4 <nrf_read_reg>:
 */

#include "NRF24L01.h"

uint8_t nrf_read_reg(uint8_t reg)
{
 80053a4:	b590      	push	{r4, r7, lr}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	0002      	movs	r2, r0
 80053ac:	1dfb      	adds	r3, r7, #7
 80053ae:	701a      	strb	r2, [r3, #0]
//    HAL_SPI_Transmit(&hspi1, &command, 1, 100);
//    HAL_SPI_Receive(&hspi1, &status, 1, 100);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
//
//    return status;
	uint8_t command = NRF24_CMD_R_REGISTER | reg;
 80053b0:	240f      	movs	r4, #15
 80053b2:	193b      	adds	r3, r7, r4
 80053b4:	1dfa      	adds	r2, r7, #7
 80053b6:	7812      	ldrb	r2, [r2, #0]
 80053b8:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t data;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 80053ba:	2380      	movs	r3, #128	; 0x80
 80053bc:	0059      	lsls	r1, r3, #1
 80053be:	23a0      	movs	r3, #160	; 0xa0
 80053c0:	05db      	lsls	r3, r3, #23
 80053c2:	2200      	movs	r2, #0
 80053c4:	0018      	movs	r0, r3
 80053c6:	f7fc ff9c 	bl	8002302 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 80053ca:	230e      	movs	r3, #14
 80053cc:	18fa      	adds	r2, r7, r3
 80053ce:	1939      	adds	r1, r7, r4
 80053d0:	480e      	ldr	r0, [pc, #56]	; (800540c <nrf_read_reg+0x68>)
 80053d2:	23fa      	movs	r3, #250	; 0xfa
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	2301      	movs	r3, #1
 80053da:	f7fe f9bf 	bl	800375c <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&hspi1, &data, 1, 2000);
 80053de:	23fa      	movs	r3, #250	; 0xfa
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	240d      	movs	r4, #13
 80053e4:	1939      	adds	r1, r7, r4
 80053e6:	4809      	ldr	r0, [pc, #36]	; (800540c <nrf_read_reg+0x68>)
 80053e8:	2201      	movs	r2, #1
 80053ea:	f7fe f865 	bl	80034b8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	0059      	lsls	r1, r3, #1
 80053f2:	23a0      	movs	r3, #160	; 0xa0
 80053f4:	05db      	lsls	r3, r3, #23
 80053f6:	2201      	movs	r2, #1
 80053f8:	0018      	movs	r0, r3
 80053fa:	f7fc ff82 	bl	8002302 <HAL_GPIO_WritePin>
	return data;
 80053fe:	193b      	adds	r3, r7, r4
 8005400:	781b      	ldrb	r3, [r3, #0]

}
 8005402:	0018      	movs	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	b005      	add	sp, #20
 8005408:	bd90      	pop	{r4, r7, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	20000090 	.word	0x20000090

08005410 <nrf_read_reg_multi>:

void nrf_read_reg_multi (uint8_t reg, uint8_t *data, int size){
 8005410:	b590      	push	{r4, r7, lr}
 8005412:	b089      	sub	sp, #36	; 0x24
 8005414:	af02      	add	r7, sp, #8
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	210f      	movs	r1, #15
 800541c:	187b      	adds	r3, r7, r1
 800541e:	1c02      	adds	r2, r0, #0
 8005420:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Receive(&hspi1, data, size, 1000);

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
    */

	uint8_t command = NRF24_CMD_R_REGISTER | reg;
 8005422:	2413      	movs	r4, #19
 8005424:	193b      	adds	r3, r7, r4
 8005426:	187a      	adds	r2, r7, r1
 8005428:	7812      	ldrb	r2, [r2, #0]
 800542a:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	0059      	lsls	r1, r3, #1
 8005430:	23a0      	movs	r3, #160	; 0xa0
 8005432:	05db      	lsls	r3, r3, #23
 8005434:	2201      	movs	r2, #1
 8005436:	0018      	movs	r0, r3
 8005438:	f7fc ff63 	bl	8002302 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 800543c:	2380      	movs	r3, #128	; 0x80
 800543e:	0059      	lsls	r1, r3, #1
 8005440:	23a0      	movs	r3, #160	; 0xa0
 8005442:	05db      	lsls	r3, r3, #23
 8005444:	2200      	movs	r2, #0
 8005446:	0018      	movs	r0, r3
 8005448:	f7fc ff5b 	bl	8002302 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 800544c:	2312      	movs	r3, #18
 800544e:	18fa      	adds	r2, r7, r3
 8005450:	1939      	adds	r1, r7, r4
 8005452:	4813      	ldr	r0, [pc, #76]	; (80054a0 <nrf_read_reg_multi+0x90>)
 8005454:	23fa      	movs	r3, #250	; 0xfa
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	2301      	movs	r3, #1
 800545c:	f7fe f97e 	bl	800375c <HAL_SPI_TransmitReceive>
	for(int i = 0; i<size; i++)
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e00b      	b.n	800547e <nrf_read_reg_multi+0x6e>
		HAL_SPI_Receive(&hspi1, &data[i], 1, 2000);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	18d1      	adds	r1, r2, r3
 800546c:	23fa      	movs	r3, #250	; 0xfa
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	480b      	ldr	r0, [pc, #44]	; (80054a0 <nrf_read_reg_multi+0x90>)
 8005472:	2201      	movs	r2, #1
 8005474:	f7fe f820 	bl	80034b8 <HAL_SPI_Receive>
	for(int i = 0; i<size; i++)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	3301      	adds	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	dbef      	blt.n	8005466 <nrf_read_reg_multi+0x56>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8005486:	2380      	movs	r3, #128	; 0x80
 8005488:	0059      	lsls	r1, r3, #1
 800548a:	23a0      	movs	r3, #160	; 0xa0
 800548c:	05db      	lsls	r3, r3, #23
 800548e:	2201      	movs	r2, #1
 8005490:	0018      	movs	r0, r3
 8005492:	f7fc ff36 	bl	8002302 <HAL_GPIO_WritePin>
}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	46bd      	mov	sp, r7
 800549a:	b007      	add	sp, #28
 800549c:	bd90      	pop	{r4, r7, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	20000090 	.word	0x20000090

080054a4 <nrf_write_reg>:

void nrf_write_reg(uint8_t reg, uint8_t value)
{
 80054a4:	b5b0      	push	{r4, r5, r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	0002      	movs	r2, r0
 80054ac:	1dfb      	adds	r3, r7, #7
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	1dbb      	adds	r3, r7, #6
 80054b2:	1c0a      	adds	r2, r1, #0
 80054b4:	701a      	strb	r2, [r3, #0]
//
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(&hspi1, buf, 2, 1000);
//    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);

	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 80054b6:	1dfb      	adds	r3, r7, #7
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2220      	movs	r2, #32
 80054bc:	4313      	orrs	r3, r2
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	240f      	movs	r4, #15
 80054c2:	193b      	adds	r3, r7, r4
 80054c4:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t write_val = value;
 80054c6:	250d      	movs	r5, #13
 80054c8:	197b      	adds	r3, r7, r5
 80054ca:	1dba      	adds	r2, r7, #6
 80054cc:	7812      	ldrb	r2, [r2, #0]
 80054ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	0059      	lsls	r1, r3, #1
 80054d4:	23a0      	movs	r3, #160	; 0xa0
 80054d6:	05db      	lsls	r3, r3, #23
 80054d8:	2200      	movs	r2, #0
 80054da:	0018      	movs	r0, r3
 80054dc:	f7fc ff11 	bl	8002302 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 80054e0:	230e      	movs	r3, #14
 80054e2:	18fa      	adds	r2, r7, r3
 80054e4:	1939      	adds	r1, r7, r4
 80054e6:	480d      	ldr	r0, [pc, #52]	; (800551c <nrf_write_reg+0x78>)
 80054e8:	23fa      	movs	r3, #250	; 0xfa
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	2301      	movs	r3, #1
 80054f0:	f7fe f934 	bl	800375c <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &write_val, 1, 2000);
 80054f4:	23fa      	movs	r3, #250	; 0xfa
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	1979      	adds	r1, r7, r5
 80054fa:	4808      	ldr	r0, [pc, #32]	; (800551c <nrf_write_reg+0x78>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	f7fd fe7b 	bl	80031f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8005502:	2380      	movs	r3, #128	; 0x80
 8005504:	0059      	lsls	r1, r3, #1
 8005506:	23a0      	movs	r3, #160	; 0xa0
 8005508:	05db      	lsls	r3, r3, #23
 800550a:	2201      	movs	r2, #1
 800550c:	0018      	movs	r0, r3
 800550e:	f7fc fef8 	bl	8002302 <HAL_GPIO_WritePin>

}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	46bd      	mov	sp, r7
 8005516:	b004      	add	sp, #16
 8005518:	bdb0      	pop	{r4, r5, r7, pc}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	20000090 	.word	0x20000090

08005520 <nrf_write_reg_multi>:

void nrf_write_reg_multi(uint8_t reg, uint8_t *data, int size)
{
 8005520:	b590      	push	{r4, r7, lr}
 8005522:	b089      	sub	sp, #36	; 0x24
 8005524:	af02      	add	r7, sp, #8
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	210f      	movs	r1, #15
 800552c:	187b      	adds	r3, r7, r1
 800552e:	1c02      	adds	r2, r0, #0
 8005530:	701a      	strb	r2, [r3, #0]
	uint8_t command = NRF24_CMD_W_REGISTER | reg;
 8005532:	187b      	adds	r3, r7, r1
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2220      	movs	r2, #32
 8005538:	4313      	orrs	r3, r2
 800553a:	b2da      	uxtb	r2, r3
 800553c:	2413      	movs	r4, #19
 800553e:	193b      	adds	r3, r7, r4
 8005540:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	//uint8_t write_val = value;
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8005542:	2380      	movs	r3, #128	; 0x80
 8005544:	0059      	lsls	r1, r3, #1
 8005546:	23a0      	movs	r3, #160	; 0xa0
 8005548:	05db      	lsls	r3, r3, #23
 800554a:	2200      	movs	r2, #0
 800554c:	0018      	movs	r0, r3
 800554e:	f7fc fed8 	bl	8002302 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &command, &status, 1, 2000);
 8005552:	2312      	movs	r3, #18
 8005554:	18fa      	adds	r2, r7, r3
 8005556:	1939      	adds	r1, r7, r4
 8005558:	4812      	ldr	r0, [pc, #72]	; (80055a4 <nrf_write_reg_multi+0x84>)
 800555a:	23fa      	movs	r3, #250	; 0xfa
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	2301      	movs	r3, #1
 8005562:	f7fe f8fb 	bl	800375c <HAL_SPI_TransmitReceive>
	for (int i = 0; i <size; i++)
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e00b      	b.n	8005584 <nrf_write_reg_multi+0x64>
		HAL_SPI_Transmit(&hspi1, &data[i], 1, 2000);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	18d1      	adds	r1, r2, r3
 8005572:	23fa      	movs	r3, #250	; 0xfa
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	480b      	ldr	r0, [pc, #44]	; (80055a4 <nrf_write_reg_multi+0x84>)
 8005578:	2201      	movs	r2, #1
 800557a:	f7fd fe3d 	bl	80031f8 <HAL_SPI_Transmit>
	for (int i = 0; i <size; i++)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	3301      	adds	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	429a      	cmp	r2, r3
 800558a:	dbef      	blt.n	800556c <nrf_write_reg_multi+0x4c>
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	0059      	lsls	r1, r3, #1
 8005590:	23a0      	movs	r3, #160	; 0xa0
 8005592:	05db      	lsls	r3, r3, #23
 8005594:	2201      	movs	r2, #1
 8005596:	0018      	movs	r0, r3
 8005598:	f7fc feb3 	bl	8002302 <HAL_GPIO_WritePin>

}
 800559c:	46c0      	nop			; (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	b007      	add	sp, #28
 80055a2:	bd90      	pop	{r4, r7, pc}
 80055a4:	20000090 	.word	0x20000090

080055a8 <nrf_send_cmd>:

void nrf_send_cmd (uint8_t cmd){
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	0002      	movs	r2, r0
 80055b0:	1dfb      	adds	r3, r7, #7
 80055b2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 80055b4:	2380      	movs	r3, #128	; 0x80
 80055b6:	0059      	lsls	r1, r3, #1
 80055b8:	23a0      	movs	r3, #160	; 0xa0
 80055ba:	05db      	lsls	r3, r3, #23
 80055bc:	2200      	movs	r2, #0
 80055be:	0018      	movs	r0, r3
 80055c0:	f7fc fe9f 	bl	8002302 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80055c4:	1df9      	adds	r1, r7, #7
 80055c6:	4808      	ldr	r0, [pc, #32]	; (80055e8 <nrf_send_cmd+0x40>)
 80055c8:	2364      	movs	r3, #100	; 0x64
 80055ca:	2201      	movs	r2, #1
 80055cc:	f7fd fe14 	bl	80031f8 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	0059      	lsls	r1, r3, #1
 80055d4:	23a0      	movs	r3, #160	; 0xa0
 80055d6:	05db      	lsls	r3, r3, #23
 80055d8:	2201      	movs	r2, #1
 80055da:	0018      	movs	r0, r3
 80055dc:	f7fc fe91 	bl	8002302 <HAL_GPIO_WritePin>
}
 80055e0:	46c0      	nop			; (mov r8, r8)
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b002      	add	sp, #8
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20000090 	.word	0x20000090

080055ec <nrf_init>:

void nrf_init(void){
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	0119      	lsls	r1, r3, #4
 80055f4:	23a0      	movs	r3, #160	; 0xa0
 80055f6:	05db      	lsls	r3, r3, #23
 80055f8:	2200      	movs	r2, #0
 80055fa:	0018      	movs	r0, r3
 80055fc:	f7fc fe81 	bl	8002302 <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_CONFIG, 0);
 8005600:	2100      	movs	r1, #0
 8005602:	2000      	movs	r0, #0
 8005604:	f7ff ff4e 	bl	80054a4 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_AA, 0); //Turn off auto ack
 8005608:	2100      	movs	r1, #0
 800560a:	2001      	movs	r0, #1
 800560c:	f7ff ff4a 	bl	80054a4 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_EN_RXADDR, 0); //Not enabling any data pipe
 8005610:	2100      	movs	r1, #0
 8005612:	2002      	movs	r0, #2
 8005614:	f7ff ff46 	bl	80054a4 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_AW, 0x03); //5 bytes for TX/RX address
 8005618:	2103      	movs	r1, #3
 800561a:	2003      	movs	r0, #3
 800561c:	f7ff ff42 	bl	80054a4 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_SETUP_RETR, 0); //No retransmission
 8005620:	2100      	movs	r1, #0
 8005622:	2004      	movs	r0, #4
 8005624:	f7ff ff3e 	bl	80054a4 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_CH, 0); //
 8005628:	2100      	movs	r1, #0
 800562a:	2005      	movs	r0, #5
 800562c:	f7ff ff3a 	bl	80054a4 <nrf_write_reg>

    nrf_write_reg(NRF24_REG_RF_SETUP, 0x0E); //Power = 0dB, data rate = 2Mbps
 8005630:	210e      	movs	r1, #14
 8005632:	2006      	movs	r0, #6
 8005634:	f7ff ff36 	bl	80054a4 <nrf_write_reg>

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	0119      	lsls	r1, r3, #4
 800563c:	23a0      	movs	r3, #160	; 0xa0
 800563e:	05db      	lsls	r3, r3, #23
 8005640:	2200      	movs	r2, #0
 8005642:	0018      	movs	r0, r3
 8005644:	f7fc fe5d 	bl	8002302 <HAL_GPIO_WritePin>

}
 8005648:	46c0      	nop			; (mov r8, r8)
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <nrf_tx_mode>:

void nrf_tx_mode(uint8_t *addr, uint8_t channel){
 800564e:	b5b0      	push	{r4, r5, r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	000a      	movs	r2, r1
 8005658:	1cfb      	adds	r3, r7, #3
 800565a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800565c:	2380      	movs	r3, #128	; 0x80
 800565e:	0119      	lsls	r1, r3, #4
 8005660:	23a0      	movs	r3, #160	; 0xa0
 8005662:	05db      	lsls	r3, r3, #23
 8005664:	2200      	movs	r2, #0
 8005666:	0018      	movs	r0, r3
 8005668:	f7fc fe4b 	bl	8002302 <HAL_GPIO_WritePin>

    nrf_write_reg(NRF24_REG_RF_CH, channel);
 800566c:	1cfb      	adds	r3, r7, #3
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	0019      	movs	r1, r3
 8005672:	2005      	movs	r0, #5
 8005674:	f7ff ff16 	bl	80054a4 <nrf_write_reg>
    nrf_write_reg_multi(NRF24_REG_TX_ADDR, addr, 5);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2205      	movs	r2, #5
 800567c:	0019      	movs	r1, r3
 800567e:	2010      	movs	r0, #16
 8005680:	f7ff ff4e 	bl	8005520 <nrf_write_reg_multi>

    uint8_t config = nrf_read_reg(NRF24_REG_CONFIG);
 8005684:	250f      	movs	r5, #15
 8005686:	197c      	adds	r4, r7, r5
 8005688:	2000      	movs	r0, #0
 800568a:	f7ff fe8b 	bl	80053a4 <nrf_read_reg>
 800568e:	0003      	movs	r3, r0
 8005690:	7023      	strb	r3, [r4, #0]
    config = (config | ((1<<1) & 0xFE));
 8005692:	0028      	movs	r0, r5
 8005694:	183b      	adds	r3, r7, r0
 8005696:	183a      	adds	r2, r7, r0
 8005698:	7812      	ldrb	r2, [r2, #0]
 800569a:	2102      	movs	r1, #2
 800569c:	430a      	orrs	r2, r1
 800569e:	701a      	strb	r2, [r3, #0]
    nrf_write_reg(NRF24_REG_CONFIG, config);
 80056a0:	183b      	adds	r3, r7, r0
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	0019      	movs	r1, r3
 80056a6:	2000      	movs	r0, #0
 80056a8:	f7ff fefc 	bl	80054a4 <nrf_write_reg>

    //Testing I added
    uint8_t test[5] = {0};
 80056ac:	2108      	movs	r1, #8
 80056ae:	187b      	adds	r3, r7, r1
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	2200      	movs	r2, #0
 80056b6:	711a      	strb	r2, [r3, #4]
    nrf_read_reg_multi(NRF24_REG_TX_ADDR, test, 5);
 80056b8:	187b      	adds	r3, r7, r1
 80056ba:	2205      	movs	r2, #5
 80056bc:	0019      	movs	r1, r3
 80056be:	2010      	movs	r0, #16
 80056c0:	f7ff fea6 	bl	8005410 <nrf_read_reg_multi>

    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80056c4:	2380      	movs	r3, #128	; 0x80
 80056c6:	0119      	lsls	r1, r3, #4
 80056c8:	23a0      	movs	r3, #160	; 0xa0
 80056ca:	05db      	lsls	r3, r3, #23
 80056cc:	2201      	movs	r2, #1
 80056ce:	0018      	movs	r0, r3
 80056d0:	f7fc fe17 	bl	8002302 <HAL_GPIO_WritePin>
}
 80056d4:	46c0      	nop			; (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b004      	add	sp, #16
 80056da:	bdb0      	pop	{r4, r5, r7, pc}

080056dc <nrf_transmit>:

uint8_t nrf_transmit(uint8_t *data){
 80056dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 80056e4:	250e      	movs	r5, #14
 80056e6:	197b      	adds	r3, r7, r5
 80056e8:	2200      	movs	r2, #0
 80056ea:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	0059      	lsls	r1, r3, #1
 80056f0:	23a0      	movs	r3, #160	; 0xa0
 80056f2:	05db      	lsls	r3, r3, #23
 80056f4:	2200      	movs	r2, #0
 80056f6:	0018      	movs	r0, r3
 80056f8:	f7fc fe03 	bl	8002302 <HAL_GPIO_WritePin>

    //TX command
    cmd = NRF24_CMD_W_TX_PAYLOAD;
 80056fc:	197b      	adds	r3, r7, r5
 80056fe:	22a0      	movs	r2, #160	; 0xa0
 8005700:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8005702:	1979      	adds	r1, r7, r5
 8005704:	481b      	ldr	r0, [pc, #108]	; (8005774 <nrf_transmit+0x98>)
 8005706:	2364      	movs	r3, #100	; 0x64
 8005708:	2201      	movs	r2, #1
 800570a:	f7fd fd75 	bl	80031f8 <HAL_SPI_Transmit>

    //TX data send
    HAL_SPI_Transmit(&hspi1, data, 32, 1000);
 800570e:	23fa      	movs	r3, #250	; 0xfa
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4817      	ldr	r0, [pc, #92]	; (8005774 <nrf_transmit+0x98>)
 8005716:	2220      	movs	r2, #32
 8005718:	f7fd fd6e 	bl	80031f8 <HAL_SPI_Transmit>


    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 800571c:	2380      	movs	r3, #128	; 0x80
 800571e:	0059      	lsls	r1, r3, #1
 8005720:	23a0      	movs	r3, #160	; 0xa0
 8005722:	05db      	lsls	r3, r3, #23
 8005724:	2201      	movs	r2, #1
 8005726:	0018      	movs	r0, r3
 8005728:	f7fc fdeb 	bl	8002302 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 800572c:	2001      	movs	r0, #1
 800572e:	f7fb fd3b 	bl	80011a8 <HAL_Delay>

    uint8_t fifo_status = nrf_read_reg(NRF24_REG_FIFO_STATUS);
 8005732:	260f      	movs	r6, #15
 8005734:	19bc      	adds	r4, r7, r6
 8005736:	2017      	movs	r0, #23
 8005738:	f7ff fe34 	bl	80053a4 <nrf_read_reg>
 800573c:	0003      	movs	r3, r0
 800573e:	7023      	strb	r3, [r4, #0]

    if((fifo_status & (1<<4)) && (!(fifo_status & (1<<3)))){
 8005740:	0031      	movs	r1, r6
 8005742:	187b      	adds	r3, r7, r1
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2210      	movs	r2, #16
 8005748:	4013      	ands	r3, r2
 800574a:	d00e      	beq.n	800576a <nrf_transmit+0x8e>
 800574c:	187b      	adds	r3, r7, r1
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2208      	movs	r2, #8
 8005752:	4013      	ands	r3, r2
 8005754:	d109      	bne.n	800576a <nrf_transmit+0x8e>
    	cmd = NRF24_CMD_FLUSH_TX;
 8005756:	197b      	adds	r3, r7, r5
 8005758:	22e1      	movs	r2, #225	; 0xe1
 800575a:	701a      	strb	r2, [r3, #0]
    	nrf_send_cmd(cmd);
 800575c:	197b      	adds	r3, r7, r5
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	0018      	movs	r0, r3
 8005762:	f7ff ff21 	bl	80055a8 <nrf_send_cmd>

    	return 1;
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <nrf_transmit+0x90>
    }

    return 0;
 800576a:	2300      	movs	r3, #0


}
 800576c:	0018      	movs	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	b005      	add	sp, #20
 8005772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005774:	20000090 	.word	0x20000090

08005778 <nrf_send_adc>:
    nrf_send_cmd(cmd);


}

int nrf_send_adc(uint32_t adc_val){
 8005778:	b5b0      	push	{r4, r5, r7, lr}
 800577a:	b08c      	sub	sp, #48	; 0x30
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8005780:	242f      	movs	r4, #47	; 0x2f
 8005782:	193b      	adds	r3, r7, r4
 8005784:	2200      	movs	r2, #0
 8005786:	701a      	strb	r2, [r3, #0]
	uint8_t TX_data[32] = {0};
 8005788:	2508      	movs	r5, #8
 800578a:	197b      	adds	r3, r7, r5
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	3304      	adds	r3, #4
 8005792:	221c      	movs	r2, #28
 8005794:	2100      	movs	r1, #0
 8005796:	0018      	movs	r0, r3
 8005798:	f000 f827 	bl	80057ea <memset>

	//Put together 32 byte data packet
	//0: Command Type
	//1-31: Payload
	TX_data[index++] = (uint8_t)CMD_SEND_ADC;
 800579c:	0020      	movs	r0, r4
 800579e:	183b      	adds	r3, r7, r0
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	183a      	adds	r2, r7, r0
 80057a4:	1c59      	adds	r1, r3, #1
 80057a6:	7011      	strb	r1, [r2, #0]
 80057a8:	001a      	movs	r2, r3
 80057aa:	197b      	adds	r3, r7, r5
 80057ac:	2100      	movs	r1, #0
 80057ae:	5499      	strb	r1, [r3, r2]
	TX_data[index++] = (uint8_t)(adc_val >> 8);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	0a19      	lsrs	r1, r3, #8
 80057b4:	183b      	adds	r3, r7, r0
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	0004      	movs	r4, r0
 80057ba:	183a      	adds	r2, r7, r0
 80057bc:	1c58      	adds	r0, r3, #1
 80057be:	7010      	strb	r0, [r2, #0]
 80057c0:	001a      	movs	r2, r3
 80057c2:	b2c9      	uxtb	r1, r1
 80057c4:	197b      	adds	r3, r7, r5
 80057c6:	5499      	strb	r1, [r3, r2]
	TX_data[index] 	 = (uint8_t)(adc_val & 0xFF);
 80057c8:	193b      	adds	r3, r7, r4
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	b2d1      	uxtb	r1, r2
 80057d0:	197a      	adds	r2, r7, r5
 80057d2:	54d1      	strb	r1, [r2, r3]

	int trans_stat = nrf_transmit(TX_data);
 80057d4:	197b      	adds	r3, r7, r5
 80057d6:	0018      	movs	r0, r3
 80057d8:	f7ff ff80 	bl	80056dc <nrf_transmit>
 80057dc:	0003      	movs	r3, r0
 80057de:	62bb      	str	r3, [r7, #40]	; 0x28
	return trans_stat;
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80057e2:	0018      	movs	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b00c      	add	sp, #48	; 0x30
 80057e8:	bdb0      	pop	{r4, r5, r7, pc}

080057ea <memset>:
 80057ea:	0003      	movs	r3, r0
 80057ec:	1882      	adds	r2, r0, r2
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d100      	bne.n	80057f4 <memset+0xa>
 80057f2:	4770      	bx	lr
 80057f4:	7019      	strb	r1, [r3, #0]
 80057f6:	3301      	adds	r3, #1
 80057f8:	e7f9      	b.n	80057ee <memset+0x4>
	...

080057fc <__libc_init_array>:
 80057fc:	b570      	push	{r4, r5, r6, lr}
 80057fe:	2600      	movs	r6, #0
 8005800:	4c0c      	ldr	r4, [pc, #48]	; (8005834 <__libc_init_array+0x38>)
 8005802:	4d0d      	ldr	r5, [pc, #52]	; (8005838 <__libc_init_array+0x3c>)
 8005804:	1b64      	subs	r4, r4, r5
 8005806:	10a4      	asrs	r4, r4, #2
 8005808:	42a6      	cmp	r6, r4
 800580a:	d109      	bne.n	8005820 <__libc_init_array+0x24>
 800580c:	2600      	movs	r6, #0
 800580e:	f000 f819 	bl	8005844 <_init>
 8005812:	4c0a      	ldr	r4, [pc, #40]	; (800583c <__libc_init_array+0x40>)
 8005814:	4d0a      	ldr	r5, [pc, #40]	; (8005840 <__libc_init_array+0x44>)
 8005816:	1b64      	subs	r4, r4, r5
 8005818:	10a4      	asrs	r4, r4, #2
 800581a:	42a6      	cmp	r6, r4
 800581c:	d105      	bne.n	800582a <__libc_init_array+0x2e>
 800581e:	bd70      	pop	{r4, r5, r6, pc}
 8005820:	00b3      	lsls	r3, r6, #2
 8005822:	58eb      	ldr	r3, [r5, r3]
 8005824:	4798      	blx	r3
 8005826:	3601      	adds	r6, #1
 8005828:	e7ee      	b.n	8005808 <__libc_init_array+0xc>
 800582a:	00b3      	lsls	r3, r6, #2
 800582c:	58eb      	ldr	r3, [r5, r3]
 800582e:	4798      	blx	r3
 8005830:	3601      	adds	r6, #1
 8005832:	e7f2      	b.n	800581a <__libc_init_array+0x1e>
 8005834:	080058fc 	.word	0x080058fc
 8005838:	080058fc 	.word	0x080058fc
 800583c:	08005900 	.word	0x08005900
 8005840:	080058fc 	.word	0x080058fc

08005844 <_init>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr

08005850 <_fini>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	46c0      	nop			; (mov r8, r8)
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr
